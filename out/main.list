
out/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a44  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008b50  08014b00  08014b00  00024b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d650  0801d650  0002d650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d658  0801d658  0002d658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801d65c  0801d65c  0002d65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0801d660  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000658  20000070  0801d6d0  00030070  2**2
                  ALLOC
  8 ._user_heap_stack 00001600  200006c8  0801d6d0  000306c8  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d55e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c18  00000000  00000000  0005d5f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001919f  00000000  00000000  0005f20e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000168  00000000  00000000  000783ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00005d08  00000000  00000000  00078515  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007ff7  00000000  00000000  0007e21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000cb4c  00000000  00000000  00086214  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007f  00000000  00000000  00092d60  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003084  00000000  00000000  00092de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000054  00000000  00000000  00095e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000a9  00000000  00000000  00095eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08014ae8 	.word	0x08014ae8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08014ae8 	.word	0x08014ae8

08000104 <validate.lto_priv.257>:
 8000104:	6983      	ldr	r3, [r0, #24]
 8000106:	b510      	push	{r4, lr}
 8000108:	0004      	movs	r4, r0
 800010a:	2b00      	cmp	r3, #0
 800010c:	d00a      	beq.n	8000124 <validate.lto_priv.257+0x20>
 800010e:	4b0e      	ldr	r3, [pc, #56]	; (8000148 <validate.lto_priv.257+0x44>)
 8000110:	001a      	movs	r2, r3
 8000112:	3230      	adds	r2, #48	; 0x30
 8000114:	7812      	ldrb	r2, [r2, #0]
 8000116:	2a00      	cmp	r2, #0
 8000118:	d004      	beq.n	8000124 <validate.lto_priv.257+0x20>
 800011a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800011c:	4a0b      	ldr	r2, [pc, #44]	; (800014c <validate.lto_priv.257+0x48>)
 800011e:	490c      	ldr	r1, [pc, #48]	; (8000150 <validate.lto_priv.257+0x4c>)
 8000120:	2001      	movs	r0, #1
 8000122:	4798      	blx	r3
 8000124:	69e3      	ldr	r3, [r4, #28]
 8000126:	2b00      	cmp	r3, #0
 8000128:	d00a      	beq.n	8000140 <validate.lto_priv.257+0x3c>
 800012a:	4b07      	ldr	r3, [pc, #28]	; (8000148 <validate.lto_priv.257+0x44>)
 800012c:	001a      	movs	r2, r3
 800012e:	3230      	adds	r2, #48	; 0x30
 8000130:	7812      	ldrb	r2, [r2, #0]
 8000132:	2a00      	cmp	r2, #0
 8000134:	d004      	beq.n	8000140 <validate.lto_priv.257+0x3c>
 8000136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000138:	4a06      	ldr	r2, [pc, #24]	; (8000154 <validate.lto_priv.257+0x50>)
 800013a:	4905      	ldr	r1, [pc, #20]	; (8000150 <validate.lto_priv.257+0x4c>)
 800013c:	2001      	movs	r0, #1
 800013e:	4798      	blx	r3
 8000140:	6820      	ldr	r0, [r4, #0]
 8000142:	6883      	ldr	r3, [r0, #8]
 8000144:	4798      	blx	r3
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200003e8 	.word	0x200003e8
 800014c:	0801ab40 	.word	0x0801ab40
 8000150:	0801ab51 	.word	0x0801ab51
 8000154:	0801ab73 	.word	0x0801ab73

08000158 <event.lto_priv.270>:
 8000158:	b570      	push	{r4, r5, r6, lr}
 800015a:	0004      	movs	r4, r0
 800015c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800015e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000160:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8000162:	6809      	ldr	r1, [r1, #0]
 8000164:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000166:	6900      	ldr	r0, [r0, #16]
 8000168:	47a8      	blx	r5
 800016a:	6820      	ldr	r0, [r4, #0]
 800016c:	6843      	ldr	r3, [r0, #4]
 800016e:	4798      	blx	r3
 8000170:	bd70      	pop	{r4, r5, r6, pc}

08000172 <noise_level_normalization_u16>:
 8000172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000174:	2601      	movs	r6, #1
 8000176:	0004      	movs	r4, r0
 8000178:	2700      	movs	r7, #0
 800017a:	0849      	lsrs	r1, r1, #1
 800017c:	b085      	sub	sp, #20
 800017e:	0049      	lsls	r1, r1, #1
 8000180:	9303      	str	r3, [sp, #12]
 8000182:	4d0f      	ldr	r5, [pc, #60]	; (80001c0 <noise_level_normalization_u16+0x4e>)
 8000184:	1843      	adds	r3, r0, r1
 8000186:	9202      	str	r2, [sp, #8]
 8000188:	9301      	str	r3, [sp, #4]
 800018a:	4276      	negs	r6, r6
 800018c:	9b01      	ldr	r3, [sp, #4]
 800018e:	429c      	cmp	r4, r3
 8000190:	d101      	bne.n	8000196 <noise_level_normalization_u16+0x24>
 8000192:	b005      	add	sp, #20
 8000194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000196:	4b0b      	ldr	r3, [pc, #44]	; (80001c4 <noise_level_normalization_u16+0x52>)
 8000198:	8820      	ldrh	r0, [r4, #0]
 800019a:	9902      	ldr	r1, [sp, #8]
 800019c:	18c0      	adds	r0, r0, r3
 800019e:	9b03      	ldr	r3, [sp, #12]
 80001a0:	4358      	muls	r0, r3
 80001a2:	f00c fec5 	bl	800cf30 <__divsi3>
 80001a6:	2380      	movs	r3, #128	; 0x80
 80001a8:	021b      	lsls	r3, r3, #8
 80001aa:	18c0      	adds	r0, r0, r3
 80001ac:	d502      	bpl.n	80001b4 <noise_level_normalization_u16+0x42>
 80001ae:	8027      	strh	r7, [r4, #0]
 80001b0:	3402      	adds	r4, #2
 80001b2:	e7eb      	b.n	800018c <noise_level_normalization_u16+0x1a>
 80001b4:	42a8      	cmp	r0, r5
 80001b6:	dd01      	ble.n	80001bc <noise_level_normalization_u16+0x4a>
 80001b8:	8026      	strh	r6, [r4, #0]
 80001ba:	e7f9      	b.n	80001b0 <noise_level_normalization_u16+0x3e>
 80001bc:	8020      	strh	r0, [r4, #0]
 80001be:	e7f7      	b.n	80001b0 <noise_level_normalization_u16+0x3e>
 80001c0:	0000ffff 	.word	0x0000ffff
 80001c4:	ffff8000 	.word	0xffff8000

080001c8 <validate.lto_priv.256>:
 80001c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80001ca:	4a20      	ldr	r2, [pc, #128]	; (800024c <validate.lto_priv.256+0x84>)
 80001cc:	b510      	push	{r4, lr}
 80001ce:	0004      	movs	r4, r0
 80001d0:	4293      	cmp	r3, r2
 80001d2:	d10b      	bne.n	80001ec <validate.lto_priv.256+0x24>
 80001d4:	6903      	ldr	r3, [r0, #16]
 80001d6:	6942      	ldr	r2, [r0, #20]
 80001d8:	4293      	cmp	r3, r2
 80001da:	d016      	beq.n	800020a <validate.lto_priv.256+0x42>
 80001dc:	4b1c      	ldr	r3, [pc, #112]	; (8000250 <validate.lto_priv.256+0x88>)
 80001de:	4a1d      	ldr	r2, [pc, #116]	; (8000254 <validate.lto_priv.256+0x8c>)
 80001e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001e2:	2000      	movs	r0, #0
 80001e4:	491c      	ldr	r1, [pc, #112]	; (8000258 <validate.lto_priv.256+0x90>)
 80001e6:	4798      	blx	r3
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	4a1b      	ldr	r2, [pc, #108]	; (800025c <validate.lto_priv.256+0x94>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d107      	bne.n	8000202 <validate.lto_priv.256+0x3a>
 80001f2:	6903      	ldr	r3, [r0, #16]
 80001f4:	6942      	ldr	r2, [r0, #20]
 80001f6:	4293      	cmp	r3, r2
 80001f8:	d107      	bne.n	800020a <validate.lto_priv.256+0x42>
 80001fa:	4b15      	ldr	r3, [pc, #84]	; (8000250 <validate.lto_priv.256+0x88>)
 80001fc:	4a18      	ldr	r2, [pc, #96]	; (8000260 <validate.lto_priv.256+0x98>)
 80001fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000200:	e7ef      	b.n	80001e2 <validate.lto_priv.256+0x1a>
 8000202:	4b13      	ldr	r3, [pc, #76]	; (8000250 <validate.lto_priv.256+0x88>)
 8000204:	4a17      	ldr	r2, [pc, #92]	; (8000264 <validate.lto_priv.256+0x9c>)
 8000206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000208:	e7eb      	b.n	80001e2 <validate.lto_priv.256+0x1a>
 800020a:	69a3      	ldr	r3, [r4, #24]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d00a      	beq.n	8000226 <validate.lto_priv.256+0x5e>
 8000210:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <validate.lto_priv.256+0x88>)
 8000212:	001a      	movs	r2, r3
 8000214:	3230      	adds	r2, #48	; 0x30
 8000216:	7812      	ldrb	r2, [r2, #0]
 8000218:	2a00      	cmp	r2, #0
 800021a:	d004      	beq.n	8000226 <validate.lto_priv.256+0x5e>
 800021c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800021e:	4a12      	ldr	r2, [pc, #72]	; (8000268 <validate.lto_priv.256+0xa0>)
 8000220:	490d      	ldr	r1, [pc, #52]	; (8000258 <validate.lto_priv.256+0x90>)
 8000222:	2001      	movs	r0, #1
 8000224:	4798      	blx	r3
 8000226:	69e3      	ldr	r3, [r4, #28]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d00a      	beq.n	8000242 <validate.lto_priv.256+0x7a>
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <validate.lto_priv.256+0x88>)
 800022e:	001a      	movs	r2, r3
 8000230:	3230      	adds	r2, #48	; 0x30
 8000232:	7812      	ldrb	r2, [r2, #0]
 8000234:	2a00      	cmp	r2, #0
 8000236:	d004      	beq.n	8000242 <validate.lto_priv.256+0x7a>
 8000238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800023a:	4a0c      	ldr	r2, [pc, #48]	; (800026c <validate.lto_priv.256+0xa4>)
 800023c:	4906      	ldr	r1, [pc, #24]	; (8000258 <validate.lto_priv.256+0x90>)
 800023e:	2001      	movs	r0, #1
 8000240:	4798      	blx	r3
 8000242:	6820      	ldr	r0, [r4, #0]
 8000244:	6883      	ldr	r3, [r0, #8]
 8000246:	4798      	blx	r3
 8000248:	e7cf      	b.n	80001ea <validate.lto_priv.256+0x22>
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	08001033 	.word	0x08001033
 8000250:	200003e8 	.word	0x200003e8
 8000254:	0801ab82 	.word	0x0801ab82
 8000258:	0801abaa 	.word	0x0801abaa
 800025c:	080010e1 	.word	0x080010e1
 8000260:	0801abbb 	.word	0x0801abbb
 8000264:	0801abf0 	.word	0x0801abf0
 8000268:	0801ab40 	.word	0x0801ab40
 800026c:	0801ab73 	.word	0x0801ab73

08000270 <event.lto_priv.269>:
 8000270:	b510      	push	{r4, lr}
 8000272:	0004      	movs	r4, r0
 8000274:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000276:	4798      	blx	r3
 8000278:	6820      	ldr	r0, [r4, #0]
 800027a:	6843      	ldr	r3, [r0, #4]
 800027c:	4798      	blx	r3
 800027e:	bd10      	pop	{r4, pc}

08000280 <validate.lto_priv.255>:
 8000280:	6903      	ldr	r3, [r0, #16]
 8000282:	6942      	ldr	r2, [r0, #20]
 8000284:	b510      	push	{r4, lr}
 8000286:	0004      	movs	r4, r0
 8000288:	4293      	cmp	r3, r2
 800028a:	d007      	beq.n	800029c <validate.lto_priv.255+0x1c>
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <validate.lto_priv.255+0x5c>)
 800028e:	2000      	movs	r0, #0
 8000290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000292:	4a13      	ldr	r2, [pc, #76]	; (80002e0 <validate.lto_priv.255+0x60>)
 8000294:	4913      	ldr	r1, [pc, #76]	; (80002e4 <validate.lto_priv.255+0x64>)
 8000296:	4798      	blx	r3
 8000298:	2000      	movs	r0, #0
 800029a:	bd10      	pop	{r4, pc}
 800029c:	6983      	ldr	r3, [r0, #24]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d00a      	beq.n	80002b8 <validate.lto_priv.255+0x38>
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <validate.lto_priv.255+0x5c>)
 80002a4:	001a      	movs	r2, r3
 80002a6:	3230      	adds	r2, #48	; 0x30
 80002a8:	7812      	ldrb	r2, [r2, #0]
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d004      	beq.n	80002b8 <validate.lto_priv.255+0x38>
 80002ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <validate.lto_priv.255+0x68>)
 80002b2:	490c      	ldr	r1, [pc, #48]	; (80002e4 <validate.lto_priv.255+0x64>)
 80002b4:	2001      	movs	r0, #1
 80002b6:	4798      	blx	r3
 80002b8:	69e3      	ldr	r3, [r4, #28]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d00a      	beq.n	80002d4 <validate.lto_priv.255+0x54>
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <validate.lto_priv.255+0x5c>)
 80002c0:	001a      	movs	r2, r3
 80002c2:	3230      	adds	r2, #48	; 0x30
 80002c4:	7812      	ldrb	r2, [r2, #0]
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d004      	beq.n	80002d4 <validate.lto_priv.255+0x54>
 80002ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002cc:	4a07      	ldr	r2, [pc, #28]	; (80002ec <validate.lto_priv.255+0x6c>)
 80002ce:	4905      	ldr	r1, [pc, #20]	; (80002e4 <validate.lto_priv.255+0x64>)
 80002d0:	2001      	movs	r0, #1
 80002d2:	4798      	blx	r3
 80002d4:	6820      	ldr	r0, [r4, #0]
 80002d6:	6883      	ldr	r3, [r0, #8]
 80002d8:	4798      	blx	r3
 80002da:	e7de      	b.n	800029a <validate.lto_priv.255+0x1a>
 80002dc:	200003e8 	.word	0x200003e8
 80002e0:	0801ab82 	.word	0x0801ab82
 80002e4:	0801ac05 	.word	0x0801ac05
 80002e8:	0801ab40 	.word	0x0801ab40
 80002ec:	0801ab73 	.word	0x0801ab73

080002f0 <event.lto_priv.268>:
 80002f0:	b510      	push	{r4, lr}
 80002f2:	0004      	movs	r4, r0
 80002f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80002f6:	4798      	blx	r3
 80002f8:	6820      	ldr	r0, [r4, #0]
 80002fa:	6843      	ldr	r3, [r0, #4]
 80002fc:	4798      	blx	r3
 80002fe:	bd10      	pop	{r4, pc}

08000300 <filter_no_operation.lto_priv.167>:
 8000300:	4770      	bx	lr

08000302 <validate.lto_priv.254>:
 8000302:	6983      	ldr	r3, [r0, #24]
 8000304:	b510      	push	{r4, lr}
 8000306:	0004      	movs	r4, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d00a      	beq.n	8000322 <validate.lto_priv.254+0x20>
 800030c:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <validate.lto_priv.254+0x46>)
 800030e:	001a      	movs	r2, r3
 8000310:	3230      	adds	r2, #48	; 0x30
 8000312:	7812      	ldrb	r2, [r2, #0]
 8000314:	2a00      	cmp	r2, #0
 8000316:	d004      	beq.n	8000322 <validate.lto_priv.254+0x20>
 8000318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800031a:	4a0c      	ldr	r2, [pc, #48]	; (800034c <validate.lto_priv.254+0x4a>)
 800031c:	490c      	ldr	r1, [pc, #48]	; (8000350 <validate.lto_priv.254+0x4e>)
 800031e:	2001      	movs	r0, #1
 8000320:	4798      	blx	r3
 8000322:	69e3      	ldr	r3, [r4, #28]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d00a      	beq.n	800033e <validate.lto_priv.254+0x3c>
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <validate.lto_priv.254+0x46>)
 800032a:	001a      	movs	r2, r3
 800032c:	3230      	adds	r2, #48	; 0x30
 800032e:	7812      	ldrb	r2, [r2, #0]
 8000330:	2a00      	cmp	r2, #0
 8000332:	d004      	beq.n	800033e <validate.lto_priv.254+0x3c>
 8000334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <validate.lto_priv.254+0x52>)
 8000338:	4905      	ldr	r1, [pc, #20]	; (8000350 <validate.lto_priv.254+0x4e>)
 800033a:	2001      	movs	r0, #1
 800033c:	4798      	blx	r3
 800033e:	6820      	ldr	r0, [r4, #0]
 8000340:	6883      	ldr	r3, [r0, #8]
 8000342:	4798      	blx	r3
 8000344:	bd10      	pop	{r4, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	200003e8 	.word	0x200003e8
 800034c:	0801ab40 	.word	0x0801ab40
 8000350:	0801ac1d 	.word	0x0801ac1d
 8000354:	0801ab73 	.word	0x0801ab73

08000358 <event.lto_priv.267>:
 8000358:	b510      	push	{r4, lr}
 800035a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800035c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800035e:	6800      	ldr	r0, [r0, #0]
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	6843      	ldr	r3, [r0, #4]
 8000364:	4798      	blx	r3
 8000366:	bd10      	pop	{r4, pc}

08000368 <validate.lto_priv.253>:
 8000368:	6983      	ldr	r3, [r0, #24]
 800036a:	b510      	push	{r4, lr}
 800036c:	0004      	movs	r4, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d00a      	beq.n	8000388 <validate.lto_priv.253+0x20>
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <validate.lto_priv.253+0x44>)
 8000374:	001a      	movs	r2, r3
 8000376:	3230      	adds	r2, #48	; 0x30
 8000378:	7812      	ldrb	r2, [r2, #0]
 800037a:	2a00      	cmp	r2, #0
 800037c:	d004      	beq.n	8000388 <validate.lto_priv.253+0x20>
 800037e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000380:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <validate.lto_priv.253+0x48>)
 8000382:	490c      	ldr	r1, [pc, #48]	; (80003b4 <validate.lto_priv.253+0x4c>)
 8000384:	2001      	movs	r0, #1
 8000386:	4798      	blx	r3
 8000388:	69e3      	ldr	r3, [r4, #28]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00a      	beq.n	80003a4 <validate.lto_priv.253+0x3c>
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <validate.lto_priv.253+0x44>)
 8000390:	001a      	movs	r2, r3
 8000392:	3230      	adds	r2, #48	; 0x30
 8000394:	7812      	ldrb	r2, [r2, #0]
 8000396:	2a00      	cmp	r2, #0
 8000398:	d004      	beq.n	80003a4 <validate.lto_priv.253+0x3c>
 800039a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800039c:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <validate.lto_priv.253+0x50>)
 800039e:	4905      	ldr	r1, [pc, #20]	; (80003b4 <validate.lto_priv.253+0x4c>)
 80003a0:	2001      	movs	r0, #1
 80003a2:	4798      	blx	r3
 80003a4:	6820      	ldr	r0, [r4, #0]
 80003a6:	6883      	ldr	r3, [r0, #8]
 80003a8:	4798      	blx	r3
 80003aa:	bd10      	pop	{r4, pc}
 80003ac:	200003e8 	.word	0x200003e8
 80003b0:	0801ab40 	.word	0x0801ab40
 80003b4:	0801ac2a 	.word	0x0801ac2a
 80003b8:	0801ab73 	.word	0x0801ab73

080003bc <convert_q12_4_to_q3_12_complex>:
 80003bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003be:	2600      	movs	r6, #0
 80003c0:	0852      	lsrs	r2, r2, #1
 80003c2:	0004      	movs	r4, r0
 80003c4:	4d06      	ldr	r5, [pc, #24]	; (80003e0 <convert_q12_4_to_q3_12_complex+0x24>)
 80003c6:	0090      	lsls	r0, r2, #2
 80003c8:	1809      	adds	r1, r1, r0
 80003ca:	3904      	subs	r1, #4
 80003cc:	3a01      	subs	r2, #1
 80003ce:	d200      	bcs.n	80003d2 <convert_q12_4_to_q3_12_complex+0x16>
 80003d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d2:	0053      	lsls	r3, r2, #1
 80003d4:	5ee3      	ldrsh	r3, [r4, r3]
 80003d6:	804e      	strh	r6, [r1, #2]
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	406b      	eors	r3, r5
 80003dc:	800b      	strh	r3, [r1, #0]
 80003de:	e7f4      	b.n	80003ca <convert_q12_4_to_q3_12_complex+0xe>
 80003e0:	ffffc000 	.word	0xffffc000

080003e4 <convert_q12_4_to_q3_12>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	0853      	lsrs	r3, r2, #1
 80003e8:	4d06      	ldr	r5, [pc, #24]	; (8000404 <convert_q12_4_to_q3_12+0x20>)
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	3b02      	subs	r3, #2
 80003ee:	1c9c      	adds	r4, r3, #2
 80003f0:	d103      	bne.n	80003fa <convert_q12_4_to_q3_12+0x16>
 80003f2:	3303      	adds	r3, #3
 80003f4:	439a      	bics	r2, r3
 80003f6:	0010      	movs	r0, r2
 80003f8:	bd70      	pop	{r4, r5, r6, pc}
 80003fa:	5ec4      	ldrsh	r4, [r0, r3]
 80003fc:	1064      	asrs	r4, r4, #1
 80003fe:	406c      	eors	r4, r5
 8000400:	52cc      	strh	r4, [r1, r3]
 8000402:	e7f3      	b.n	80003ec <convert_q12_4_to_q3_12+0x8>
 8000404:	ffffc000 	.word	0xffffc000

08000408 <convert_q12_4_to_q15_16>:
 8000408:	0852      	lsrs	r2, r2, #1
 800040a:	0013      	movs	r3, r2
 800040c:	b530      	push	{r4, r5, lr}
 800040e:	3b01      	subs	r3, #1
 8000410:	d201      	bcs.n	8000416 <convert_q12_4_to_q15_16+0xe>
 8000412:	0090      	lsls	r0, r2, #2
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	005c      	lsls	r4, r3, #1
 8000418:	5b04      	ldrh	r4, [r0, r4]
 800041a:	009d      	lsls	r5, r3, #2
 800041c:	0324      	lsls	r4, r4, #12
 800041e:	514c      	str	r4, [r1, r5]
 8000420:	e7f5      	b.n	800040e <convert_q12_4_to_q15_16+0x6>

08000422 <convert_q3_12_complex_to_f32_complex>:
 8000422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000424:	0894      	lsrs	r4, r2, #2
 8000426:	00e7      	lsls	r7, r4, #3
 8000428:	9000      	str	r0, [sp, #0]
 800042a:	19cd      	adds	r5, r1, r7
 800042c:	00a4      	lsls	r4, r4, #2
 800042e:	3c04      	subs	r4, #4
 8000430:	3d08      	subs	r5, #8
 8000432:	1d23      	adds	r3, r4, #4
 8000434:	d101      	bne.n	800043a <convert_q3_12_complex_to_f32_complex+0x18>
 8000436:	0038      	movs	r0, r7
 8000438:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800043a:	9b00      	ldr	r3, [sp, #0]
 800043c:	191b      	adds	r3, r3, r4
 800043e:	2002      	movs	r0, #2
 8000440:	5e18      	ldrsh	r0, [r3, r0]
 8000442:	f00d f8cf 	bl	800d5e4 <__aeabi_i2f>
 8000446:	21e6      	movs	r1, #230	; 0xe6
 8000448:	0589      	lsls	r1, r1, #22
 800044a:	f00c f9b5 	bl	800c7b8 <__aeabi_fmul>
 800044e:	9b00      	ldr	r3, [sp, #0]
 8000450:	1c06      	adds	r6, r0, #0
 8000452:	5f18      	ldrsh	r0, [r3, r4]
 8000454:	f00d f8c6 	bl	800d5e4 <__aeabi_i2f>
 8000458:	21e6      	movs	r1, #230	; 0xe6
 800045a:	0589      	lsls	r1, r1, #22
 800045c:	f00c f9ac 	bl	800c7b8 <__aeabi_fmul>
 8000460:	2100      	movs	r1, #0
 8000462:	9001      	str	r0, [sp, #4]
 8000464:	1c30      	adds	r0, r6, #0
 8000466:	f00c f9a7 	bl	800c7b8 <__aeabi_fmul>
 800046a:	1c01      	adds	r1, r0, #0
 800046c:	9801      	ldr	r0, [sp, #4]
 800046e:	f00b fef7 	bl	800c260 <__aeabi_fadd>
 8000472:	606e      	str	r6, [r5, #4]
 8000474:	6028      	str	r0, [r5, #0]
 8000476:	e7da      	b.n	800042e <convert_q3_12_complex_to_f32_complex+0xc>

08000478 <convert_q15_16_to_f32>:
 8000478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800047a:	0016      	movs	r6, r2
 800047c:	0894      	lsrs	r4, r2, #2
 800047e:	9000      	str	r0, [sp, #0]
 8000480:	9101      	str	r1, [sp, #4]
 8000482:	00a4      	lsls	r4, r4, #2
 8000484:	3c04      	subs	r4, #4
 8000486:	1d23      	adds	r3, r4, #4
 8000488:	d103      	bne.n	8000492 <convert_q15_16_to_f32+0x1a>
 800048a:	0030      	movs	r0, r6
 800048c:	2303      	movs	r3, #3
 800048e:	4398      	bics	r0, r3
 8000490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000492:	9b00      	ldr	r3, [sp, #0]
 8000494:	591d      	ldr	r5, [r3, r4]
 8000496:	b2a8      	uxth	r0, r5
 8000498:	f00d f8a4 	bl	800d5e4 <__aeabi_i2f>
 800049c:	21de      	movs	r1, #222	; 0xde
 800049e:	0589      	lsls	r1, r1, #22
 80004a0:	f00c f98a 	bl	800c7b8 <__aeabi_fmul>
 80004a4:	1c07      	adds	r7, r0, #0
 80004a6:	1428      	asrs	r0, r5, #16
 80004a8:	f00d f89c 	bl	800d5e4 <__aeabi_i2f>
 80004ac:	1c01      	adds	r1, r0, #0
 80004ae:	1c38      	adds	r0, r7, #0
 80004b0:	f00b fed6 	bl	800c260 <__aeabi_fadd>
 80004b4:	9b01      	ldr	r3, [sp, #4]
 80004b6:	5118      	str	r0, [r3, r4]
 80004b8:	e7e4      	b.n	8000484 <convert_q15_16_to_f32+0xc>

080004ba <convert_q3_12_to_u16>:
 80004ba:	b510      	push	{r4, lr}
 80004bc:	0853      	lsrs	r3, r2, #1
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	3b02      	subs	r3, #2
 80004c2:	1c9c      	adds	r4, r3, #2
 80004c4:	d103      	bne.n	80004ce <convert_q3_12_to_u16+0x14>
 80004c6:	3303      	adds	r3, #3
 80004c8:	439a      	bics	r2, r3
 80004ca:	0010      	movs	r0, r2
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	5ac4      	ldrh	r4, [r0, r3]
 80004d0:	0064      	lsls	r4, r4, #1
 80004d2:	52cc      	strh	r4, [r1, r3]
 80004d4:	e7f4      	b.n	80004c0 <convert_q3_12_to_u16+0x6>

080004d6 <validate.lto_priv.252>:
 80004d6:	6983      	ldr	r3, [r0, #24]
 80004d8:	b510      	push	{r4, lr}
 80004da:	0004      	movs	r4, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d00a      	beq.n	80004f6 <validate.lto_priv.252+0x20>
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <validate.lto_priv.252+0x46>)
 80004e2:	001a      	movs	r2, r3
 80004e4:	3230      	adds	r2, #48	; 0x30
 80004e6:	7812      	ldrb	r2, [r2, #0]
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d004      	beq.n	80004f6 <validate.lto_priv.252+0x20>
 80004ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ee:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <validate.lto_priv.252+0x4a>)
 80004f0:	490c      	ldr	r1, [pc, #48]	; (8000524 <validate.lto_priv.252+0x4e>)
 80004f2:	2001      	movs	r0, #1
 80004f4:	4798      	blx	r3
 80004f6:	69e3      	ldr	r3, [r4, #28]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00a      	beq.n	8000512 <validate.lto_priv.252+0x3c>
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <validate.lto_priv.252+0x46>)
 80004fe:	001a      	movs	r2, r3
 8000500:	3230      	adds	r2, #48	; 0x30
 8000502:	7812      	ldrb	r2, [r2, #0]
 8000504:	2a00      	cmp	r2, #0
 8000506:	d004      	beq.n	8000512 <validate.lto_priv.252+0x3c>
 8000508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050a:	4a07      	ldr	r2, [pc, #28]	; (8000528 <validate.lto_priv.252+0x52>)
 800050c:	4905      	ldr	r1, [pc, #20]	; (8000524 <validate.lto_priv.252+0x4e>)
 800050e:	2001      	movs	r0, #1
 8000510:	4798      	blx	r3
 8000512:	6820      	ldr	r0, [r4, #0]
 8000514:	6883      	ldr	r3, [r0, #8]
 8000516:	4798      	blx	r3
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	200003e8 	.word	0x200003e8
 8000520:	0801ab40 	.word	0x0801ab40
 8000524:	0801ac3c 	.word	0x0801ac3c
 8000528:	0801ab73 	.word	0x0801ab73

0800052c <event.lto_priv.265>:
 800052c:	b510      	push	{r4, lr}
 800052e:	0004      	movs	r4, r0
 8000530:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000532:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8000534:	6819      	ldr	r1, [r3, #0]
 8000536:	6900      	ldr	r0, [r0, #16]
 8000538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800053a:	4798      	blx	r3
 800053c:	6820      	ldr	r0, [r4, #0]
 800053e:	6843      	ldr	r3, [r0, #4]
 8000540:	4798      	blx	r3
 8000542:	bd10      	pop	{r4, pc}

08000544 <validate.lto_priv.251>:
 8000544:	6983      	ldr	r3, [r0, #24]
 8000546:	b510      	push	{r4, lr}
 8000548:	0004      	movs	r4, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00a      	beq.n	8000564 <validate.lto_priv.251+0x20>
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <validate.lto_priv.251+0x44>)
 8000550:	001a      	movs	r2, r3
 8000552:	3230      	adds	r2, #48	; 0x30
 8000554:	7812      	ldrb	r2, [r2, #0]
 8000556:	2a00      	cmp	r2, #0
 8000558:	d004      	beq.n	8000564 <validate.lto_priv.251+0x20>
 800055a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055c:	4a0b      	ldr	r2, [pc, #44]	; (800058c <validate.lto_priv.251+0x48>)
 800055e:	490c      	ldr	r1, [pc, #48]	; (8000590 <validate.lto_priv.251+0x4c>)
 8000560:	2001      	movs	r0, #1
 8000562:	4798      	blx	r3
 8000564:	69e3      	ldr	r3, [r4, #28]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d00a      	beq.n	8000580 <validate.lto_priv.251+0x3c>
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <validate.lto_priv.251+0x44>)
 800056c:	001a      	movs	r2, r3
 800056e:	3230      	adds	r2, #48	; 0x30
 8000570:	7812      	ldrb	r2, [r2, #0]
 8000572:	2a00      	cmp	r2, #0
 8000574:	d004      	beq.n	8000580 <validate.lto_priv.251+0x3c>
 8000576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000578:	4a06      	ldr	r2, [pc, #24]	; (8000594 <validate.lto_priv.251+0x50>)
 800057a:	4905      	ldr	r1, [pc, #20]	; (8000590 <validate.lto_priv.251+0x4c>)
 800057c:	2001      	movs	r0, #1
 800057e:	4798      	blx	r3
 8000580:	6820      	ldr	r0, [r4, #0]
 8000582:	6883      	ldr	r3, [r0, #8]
 8000584:	4798      	blx	r3
 8000586:	bd10      	pop	{r4, pc}
 8000588:	200003e8 	.word	0x200003e8
 800058c:	0801ab40 	.word	0x0801ab40
 8000590:	0801ac4e 	.word	0x0801ac4e
 8000594:	0801ab73 	.word	0x0801ab73

08000598 <reset.lto_priv.162.lto_priv.249>:
 8000598:	b510      	push	{r4, lr}
 800059a:	6800      	ldr	r0, [r0, #0]
 800059c:	68c3      	ldr	r3, [r0, #12]
 800059e:	4798      	blx	r3
 80005a0:	bd10      	pop	{r4, pc}

080005a2 <reset.lto_priv.263>:
 80005a2:	b510      	push	{r4, lr}
 80005a4:	f7ff fff8 	bl	8000598 <reset.lto_priv.162.lto_priv.249>
 80005a8:	bd10      	pop	{r4, pc}

080005aa <reset.lto_priv.262>:
 80005aa:	b510      	push	{r4, lr}
 80005ac:	f7ff fff4 	bl	8000598 <reset.lto_priv.162.lto_priv.249>
 80005b0:	bd10      	pop	{r4, pc}

080005b2 <reset.lto_priv.261>:
 80005b2:	b510      	push	{r4, lr}
 80005b4:	f7ff fff0 	bl	8000598 <reset.lto_priv.162.lto_priv.249>
 80005b8:	bd10      	pop	{r4, pc}

080005ba <reset.lto_priv.260>:
 80005ba:	b510      	push	{r4, lr}
 80005bc:	f7ff ffec 	bl	8000598 <reset.lto_priv.162.lto_priv.249>
 80005c0:	bd10      	pop	{r4, pc}

080005c2 <reset.lto_priv.259>:
 80005c2:	b510      	push	{r4, lr}
 80005c4:	f7ff ffe8 	bl	8000598 <reset.lto_priv.162.lto_priv.249>
 80005c8:	bd10      	pop	{r4, pc}

080005ca <reset.lto_priv.258>:
 80005ca:	b510      	push	{r4, lr}
 80005cc:	f7ff ffe4 	bl	8000598 <reset.lto_priv.162.lto_priv.249>
 80005d0:	bd10      	pop	{r4, pc}

080005d2 <event.lto_priv.264>:
 80005d2:	b570      	push	{r4, r5, r6, lr}
 80005d4:	0004      	movs	r4, r0
 80005d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80005d8:	6941      	ldr	r1, [r0, #20]
 80005da:	682a      	ldr	r2, [r5, #0]
 80005dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80005de:	6900      	ldr	r0, [r0, #16]
 80005e0:	4798      	blx	r3
 80005e2:	6028      	str	r0, [r5, #0]
 80005e4:	6820      	ldr	r0, [r4, #0]
 80005e6:	6843      	ldr	r3, [r0, #4]
 80005e8:	4798      	blx	r3
 80005ea:	bd70      	pop	{r4, r5, r6, pc}

080005ec <event.lto_priv.266>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	f7ff fff0 	bl	80005d2 <event.lto_priv.264>
 80005f2:	bd10      	pop	{r4, pc}

080005f4 <acc_sweep_manager_release>:
 80005f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80005f6:	b510      	push	{r4, lr}
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <acc_sweep_manager_release+0xe>
 80005fc:	3014      	adds	r0, #20
 80005fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000600:	4798      	blx	r3
 8000602:	bd10      	pop	{r4, pc}

08000604 <acc_sensor_manager_release_measurement>:
 8000604:	6982      	ldr	r2, [r0, #24]
 8000606:	b510      	push	{r4, lr}
 8000608:	2a00      	cmp	r2, #0
 800060a:	d00f      	beq.n	800062c <acc_sensor_manager_release_measurement+0x28>
 800060c:	2348      	movs	r3, #72	; 0x48
 800060e:	435a      	muls	r2, r3
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <acc_sensor_manager_release_measurement+0x2c>)
 8000612:	3a48      	subs	r2, #72	; 0x48
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	189b      	adds	r3, r3, r2
 8000618:	001a      	movs	r2, r3
 800061a:	3240      	adds	r2, #64	; 0x40
 800061c:	7812      	ldrb	r2, [r2, #0]
 800061e:	2a00      	cmp	r2, #0
 8000620:	d101      	bne.n	8000626 <acc_sensor_manager_release_measurement+0x22>
 8000622:	3341      	adds	r3, #65	; 0x41
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	3004      	adds	r0, #4
 8000628:	f7ff ffe4 	bl	80005f4 <acc_sweep_manager_release>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	20000598 	.word	0x20000598

08000634 <measure_noise.lto_priv.278>:
 8000634:	2000      	movs	r0, #0
 8000636:	4770      	bx	lr

08000638 <acc_rss_integration_mem_free>:
 8000638:	b510      	push	{r4, lr}
 800063a:	4b02      	ldr	r3, [pc, #8]	; (8000644 <acc_rss_integration_mem_free+0xc>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	4798      	blx	r3
 8000640:	bd10      	pop	{r4, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	200003e8 	.word	0x200003e8

08000648 <destroy.lto_priv.309>:
 8000648:	b510      	push	{r4, lr}
 800064a:	0004      	movs	r4, r0
 800064c:	6940      	ldr	r0, [r0, #20]
 800064e:	2800      	cmp	r0, #0
 8000650:	d003      	beq.n	800065a <destroy.lto_priv.309+0x12>
 8000652:	f7ff fff1 	bl	8000638 <acc_rss_integration_mem_free>
 8000656:	2300      	movs	r3, #0
 8000658:	6163      	str	r3, [r4, #20]
 800065a:	bd10      	pop	{r4, pc}

0800065c <destroy.lto_priv.308>:
 800065c:	b510      	push	{r4, lr}
 800065e:	0004      	movs	r4, r0
 8000660:	6940      	ldr	r0, [r0, #20]
 8000662:	2800      	cmp	r0, #0
 8000664:	d003      	beq.n	800066e <destroy.lto_priv.308+0x12>
 8000666:	f7ff ffe7 	bl	8000638 <acc_rss_integration_mem_free>
 800066a:	2300      	movs	r3, #0
 800066c:	6163      	str	r3, [r4, #20]
 800066e:	bd10      	pop	{r4, pc}

08000670 <disassemble.lto_priv.314>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	6804      	ldr	r4, [r0, #0]
 8000674:	0005      	movs	r5, r0
 8000676:	2c00      	cmp	r4, #0
 8000678:	d00a      	beq.n	8000690 <disassemble.lto_priv.314+0x20>
 800067a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800067c:	f7ff ffc2 	bl	8000604 <acc_sensor_manager_release_measurement>
 8000680:	23ea      	movs	r3, #234	; 0xea
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	58e0      	ldr	r0, [r4, r3]
 8000686:	f7ff ffd7 	bl	8000638 <acc_rss_integration_mem_free>
 800068a:	0020      	movs	r0, r4
 800068c:	f7ff ffd4 	bl	8000638 <acc_rss_integration_mem_free>
 8000690:	0028      	movs	r0, r5
 8000692:	f7ff ffd1 	bl	8000638 <acc_rss_integration_mem_free>
 8000696:	bd70      	pop	{r4, r5, r6, pc}

08000698 <disassemble.lto_priv.313>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	6804      	ldr	r4, [r0, #0]
 800069c:	0005      	movs	r5, r0
 800069e:	2c00      	cmp	r4, #0
 80006a0:	d00a      	beq.n	80006b8 <disassemble.lto_priv.313+0x20>
 80006a2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80006a4:	f7ff ffae 	bl	8000604 <acc_sensor_manager_release_measurement>
 80006a8:	0023      	movs	r3, r4
 80006aa:	33fc      	adds	r3, #252	; 0xfc
 80006ac:	69d8      	ldr	r0, [r3, #28]
 80006ae:	f7ff ffc3 	bl	8000638 <acc_rss_integration_mem_free>
 80006b2:	0020      	movs	r0, r4
 80006b4:	f7ff ffc0 	bl	8000638 <acc_rss_integration_mem_free>
 80006b8:	0028      	movs	r0, r5
 80006ba:	f7ff ffbd 	bl	8000638 <acc_rss_integration_mem_free>
 80006be:	bd70      	pop	{r4, r5, r6, pc}

080006c0 <acc_rss_integration_sensor_device_power_on>:
 80006c0:	b510      	push	{r4, lr}
 80006c2:	4b02      	ldr	r3, [pc, #8]	; (80006cc <acc_rss_integration_sensor_device_power_on+0xc>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4798      	blx	r3
 80006c8:	bd10      	pop	{r4, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	200003e8 	.word	0x200003e8

080006d0 <acc_base_configuration_check.part.6>:
 80006d0:	b570      	push	{r4, r5, r6, lr}
 80006d2:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80006d4:	2d04      	cmp	r5, #4
 80006d6:	d907      	bls.n	80006e8 <acc_base_configuration_check.part.6+0x18>
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <acc_base_configuration_check.part.6+0xa8>)
 80006da:	4a28      	ldr	r2, [pc, #160]	; (800077c <acc_base_configuration_check.part.6+0xac>)
 80006dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006de:	4928      	ldr	r1, [pc, #160]	; (8000780 <acc_base_configuration_check.part.6+0xb0>)
 80006e0:	2000      	movs	r0, #0
 80006e2:	4798      	blx	r3
 80006e4:	2400      	movs	r4, #0
 80006e6:	e00a      	b.n	80006fe <acc_base_configuration_check.part.6+0x2e>
 80006e8:	2d04      	cmp	r5, #4
 80006ea:	d110      	bne.n	800070e <acc_base_configuration_check.part.6+0x3e>
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <acc_base_configuration_check.part.6+0xa8>)
 80006ee:	69dc      	ldr	r4, [r3, #28]
 80006f0:	2c00      	cmp	r4, #0
 80006f2:	d106      	bne.n	8000702 <acc_base_configuration_check.part.6+0x32>
 80006f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f6:	4a23      	ldr	r2, [pc, #140]	; (8000784 <acc_base_configuration_check.part.6+0xb4>)
 80006f8:	4921      	ldr	r1, [pc, #132]	; (8000780 <acc_base_configuration_check.part.6+0xb0>)
 80006fa:	0020      	movs	r0, r4
 80006fc:	4798      	blx	r3
 80006fe:	0020      	movs	r0, r4
 8000700:	bd70      	pop	{r4, r5, r6, pc}
 8000702:	7902      	ldrb	r2, [r0, #4]
 8000704:	2a03      	cmp	r2, #3
 8000706:	d102      	bne.n	800070e <acc_base_configuration_check.part.6+0x3e>
 8000708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070a:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <acc_base_configuration_check.part.6+0xb8>)
 800070c:	e7e7      	b.n	80006de <acc_base_configuration_check.part.6+0xe>
 800070e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000710:	2b16      	cmp	r3, #22
 8000712:	d903      	bls.n	800071c <acc_base_configuration_check.part.6+0x4c>
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <acc_base_configuration_check.part.6+0xa8>)
 8000716:	4a1d      	ldr	r2, [pc, #116]	; (800078c <acc_base_configuration_check.part.6+0xbc>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071a:	e7e0      	b.n	80006de <acc_base_configuration_check.part.6+0xe>
 800071c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800071e:	3b01      	subs	r3, #1
 8000720:	2b3e      	cmp	r3, #62	; 0x3e
 8000722:	d903      	bls.n	800072c <acc_base_configuration_check.part.6+0x5c>
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <acc_base_configuration_check.part.6+0xa8>)
 8000726:	4a1a      	ldr	r2, [pc, #104]	; (8000790 <acc_base_configuration_check.part.6+0xc0>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072a:	e7d8      	b.n	80006de <acc_base_configuration_check.part.6+0xe>
 800072c:	7903      	ldrb	r3, [r0, #4]
 800072e:	2d00      	cmp	r5, #0
 8000730:	d105      	bne.n	800073e <acc_base_configuration_check.part.6+0x6e>
 8000732:	2b03      	cmp	r3, #3
 8000734:	d10e      	bne.n	8000754 <acc_base_configuration_check.part.6+0x84>
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <acc_base_configuration_check.part.6+0xa8>)
 8000738:	4a16      	ldr	r2, [pc, #88]	; (8000794 <acc_base_configuration_check.part.6+0xc4>)
 800073a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073c:	e7cf      	b.n	80006de <acc_base_configuration_check.part.6+0xe>
 800073e:	2b03      	cmp	r3, #3
 8000740:	d108      	bne.n	8000754 <acc_base_configuration_check.part.6+0x84>
 8000742:	0003      	movs	r3, r0
 8000744:	334e      	adds	r3, #78	; 0x4e
 8000746:	781c      	ldrb	r4, [r3, #0]
 8000748:	2c00      	cmp	r4, #0
 800074a:	d103      	bne.n	8000754 <acc_base_configuration_check.part.6+0x84>
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <acc_base_configuration_check.part.6+0xa8>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <acc_base_configuration_check.part.6+0xc8>)
 8000750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000752:	e7d1      	b.n	80006f8 <acc_base_configuration_check.part.6+0x28>
 8000754:	2304      	movs	r3, #4
 8000756:	439d      	bics	r5, r3
 8000758:	d103      	bne.n	8000762 <acc_base_configuration_check.part.6+0x92>
 800075a:	0003      	movs	r3, r0
 800075c:	2201      	movs	r2, #1
 800075e:	334e      	adds	r3, #78	; 0x4e
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	3032      	adds	r0, #50	; 0x32
 8000764:	7803      	ldrb	r3, [r0, #0]
 8000766:	2401      	movs	r4, #1
 8000768:	2b06      	cmp	r3, #6
 800076a:	d0c8      	beq.n	80006fe <acc_base_configuration_check.part.6+0x2e>
 800076c:	2b09      	cmp	r3, #9
 800076e:	d0c6      	beq.n	80006fe <acc_base_configuration_check.part.6+0x2e>
 8000770:	4b01      	ldr	r3, [pc, #4]	; (8000778 <acc_base_configuration_check.part.6+0xa8>)
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <acc_base_configuration_check.part.6+0xcc>)
 8000774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000776:	e7b2      	b.n	80006de <acc_base_configuration_check.part.6+0xe>
 8000778:	200003e8 	.word	0x200003e8
 800077c:	0801ac5a 	.word	0x0801ac5a
 8000780:	0801ac72 	.word	0x0801ac72
 8000784:	0801ac85 	.word	0x0801ac85
 8000788:	0801acc4 	.word	0x0801acc4
 800078c:	0801ad06 	.word	0x0801ad06
 8000790:	0801ad3a 	.word	0x0801ad3a
 8000794:	0801ad8c 	.word	0x0801ad8c
 8000798:	0801adc8 	.word	0x0801adc8
 800079c:	0801ae08 	.word	0x0801ae08

080007a0 <configuration_is_valid>:
 80007a0:	b510      	push	{r4, lr}
 80007a2:	0004      	movs	r4, r0
 80007a4:	2001      	movs	r0, #1
 80007a6:	2c00      	cmp	r4, #0
 80007a8:	d10a      	bne.n	80007c0 <configuration_is_valid+0x20>
 80007aa:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <configuration_is_valid+0x28>)
 80007ac:	0013      	movs	r3, r2
 80007ae:	3330      	adds	r3, #48	; 0x30
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d005      	beq.n	80007c2 <configuration_is_valid+0x22>
 80007b6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80007b8:	4904      	ldr	r1, [pc, #16]	; (80007cc <configuration_is_valid+0x2c>)
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <configuration_is_valid+0x30>)
 80007bc:	4798      	blx	r3
 80007be:	0020      	movs	r0, r4
 80007c0:	bd10      	pop	{r4, pc}
 80007c2:	0018      	movs	r0, r3
 80007c4:	e7fc      	b.n	80007c0 <configuration_is_valid+0x20>
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	200003e8 	.word	0x200003e8
 80007cc:	0801ac72 	.word	0x0801ac72
 80007d0:	0801ae1c 	.word	0x0801ae1c

080007d4 <acc_base_configuration_asynchronous_measurement_get>:
 80007d4:	b510      	push	{r4, lr}
 80007d6:	0004      	movs	r4, r0
 80007d8:	f7ff ffe2 	bl	80007a0 <configuration_is_valid>
 80007dc:	2800      	cmp	r0, #0
 80007de:	d001      	beq.n	80007e4 <acc_base_configuration_asynchronous_measurement_get+0x10>
 80007e0:	344e      	adds	r4, #78	; 0x4e
 80007e2:	7820      	ldrb	r0, [r4, #0]
 80007e4:	bd10      	pop	{r4, pc}

080007e6 <acc_base_configuration_noise_level_normalization_get>:
 80007e6:	b510      	push	{r4, lr}
 80007e8:	0004      	movs	r4, r0
 80007ea:	f7ff ffd9 	bl	80007a0 <configuration_is_valid>
 80007ee:	2800      	cmp	r0, #0
 80007f0:	d001      	beq.n	80007f6 <acc_base_configuration_noise_level_normalization_get+0x10>
 80007f2:	3449      	adds	r4, #73	; 0x49
 80007f4:	7820      	ldrb	r0, [r4, #0]
 80007f6:	bd10      	pop	{r4, pc}

080007f8 <acc_base_configuration_downsampling_factor_set>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	0004      	movs	r4, r0
 80007fc:	000d      	movs	r5, r1
 80007fe:	f7ff ffcf 	bl	80007a0 <configuration_is_valid>
 8000802:	2800      	cmp	r0, #0
 8000804:	d001      	beq.n	800080a <acc_base_configuration_downsampling_factor_set+0x12>
 8000806:	3468      	adds	r4, #104	; 0x68
 8000808:	8025      	strh	r5, [r4, #0]
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <acc_base_configuration_downsampling_factor_get>:
 800080c:	b510      	push	{r4, lr}
 800080e:	0004      	movs	r4, r0
 8000810:	f7ff ffc6 	bl	80007a0 <configuration_is_valid>
 8000814:	2300      	movs	r3, #0
 8000816:	4298      	cmp	r0, r3
 8000818:	d001      	beq.n	800081e <acc_base_configuration_downsampling_factor_get+0x12>
 800081a:	3468      	adds	r4, #104	; 0x68
 800081c:	8823      	ldrh	r3, [r4, #0]
 800081e:	0018      	movs	r0, r3
 8000820:	bd10      	pop	{r4, pc}

08000822 <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8000822:	b510      	push	{r4, lr}
 8000824:	0004      	movs	r4, r0
 8000826:	f7ff ffbb 	bl	80007a0 <configuration_is_valid>
 800082a:	2300      	movs	r3, #0
 800082c:	4298      	cmp	r0, r3
 800082e:	d001      	beq.n	8000834 <acc_base_configuration_sparse_sweeps_per_frame_get+0x12>
 8000830:	3460      	adds	r4, #96	; 0x60
 8000832:	8823      	ldrh	r3, [r4, #0]
 8000834:	0018      	movs	r0, r3
 8000836:	bd10      	pop	{r4, pc}

08000838 <acc_base_configuration_integrator_ramp_up_set>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	0004      	movs	r4, r0
 800083c:	000d      	movs	r5, r1
 800083e:	f7ff ffaf 	bl	80007a0 <configuration_is_valid>
 8000842:	2800      	cmp	r0, #0
 8000844:	d001      	beq.n	800084a <acc_base_configuration_integrator_ramp_up_set+0x12>
 8000846:	3406      	adds	r4, #6
 8000848:	87e5      	strh	r5, [r4, #62]	; 0x3e
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <acc_base_configuration_wg_duration_set>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	0004      	movs	r4, r0
 8000850:	000d      	movs	r5, r1
 8000852:	f7ff ffa5 	bl	80007a0 <configuration_is_valid>
 8000856:	2800      	cmp	r0, #0
 8000858:	d001      	beq.n	800085e <acc_base_configuration_wg_duration_set+0x12>
 800085a:	3404      	adds	r4, #4
 800085c:	87e5      	strh	r5, [r4, #62]	; 0x3e
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <acc_base_configuration_wg_duration_get>:
 8000860:	b510      	push	{r4, lr}
 8000862:	0004      	movs	r4, r0
 8000864:	f7ff ff9c 	bl	80007a0 <configuration_is_valid>
 8000868:	2300      	movs	r3, #0
 800086a:	4298      	cmp	r0, r3
 800086c:	d001      	beq.n	8000872 <acc_base_configuration_wg_duration_get+0x12>
 800086e:	3404      	adds	r4, #4
 8000870:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000872:	0018      	movs	r0, r3
 8000874:	bd10      	pop	{r4, pc}

08000876 <acc_base_configuration_integrator_set>:
 8000876:	b570      	push	{r4, r5, r6, lr}
 8000878:	0004      	movs	r4, r0
 800087a:	000d      	movs	r5, r1
 800087c:	f7ff ff90 	bl	80007a0 <configuration_is_valid>
 8000880:	2800      	cmp	r0, #0
 8000882:	d001      	beq.n	8000888 <acc_base_configuration_integrator_set+0x12>
 8000884:	3402      	adds	r4, #2
 8000886:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000888:	bd70      	pop	{r4, r5, r6, pc}

0800088a <acc_base_configuration_integrator_get>:
 800088a:	b510      	push	{r4, lr}
 800088c:	0004      	movs	r4, r0
 800088e:	f7ff ff87 	bl	80007a0 <configuration_is_valid>
 8000892:	2300      	movs	r3, #0
 8000894:	4298      	cmp	r0, r3
 8000896:	d001      	beq.n	800089c <acc_base_configuration_integrator_get+0x12>
 8000898:	3402      	adds	r4, #2
 800089a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800089c:	0018      	movs	r0, r3
 800089e:	bd10      	pop	{r4, pc}

080008a0 <acc_base_configuration_update_rate_get>:
 80008a0:	b510      	push	{r4, lr}
 80008a2:	0004      	movs	r4, r0
 80008a4:	f7ff ff7c 	bl	80007a0 <configuration_is_valid>
 80008a8:	2800      	cmp	r0, #0
 80008aa:	d00b      	beq.n	80008c4 <acc_base_configuration_update_rate_get+0x24>
 80008ac:	7920      	ldrb	r0, [r4, #4]
 80008ae:	2803      	cmp	r0, #3
 80008b0:	d808      	bhi.n	80008c4 <acc_base_configuration_update_rate_get+0x24>
 80008b2:	f00c fa9f 	bl	800cdf4 <__gnu_thumb1_case_uqi>
 80008b6:	0202      	.short	0x0202
 80008b8:	0505      	.short	0x0505
 80008ba:	20ff      	movs	r0, #255	; 0xff
 80008bc:	05c0      	lsls	r0, r0, #23
 80008be:	bd10      	pop	{r4, pc}
 80008c0:	68a0      	ldr	r0, [r4, #8]
 80008c2:	e7fc      	b.n	80008be <acc_base_configuration_update_rate_get+0x1e>
 80008c4:	4800      	ldr	r0, [pc, #0]	; (80008c8 <acc_base_configuration_update_rate_get+0x28>)
 80008c6:	e7fa      	b.n	80008be <acc_base_configuration_update_rate_get+0x1e>
 80008c8:	7fc00000 	.word	0x7fc00000

080008cc <acc_base_configuration_repetition_mode_get>:
 80008cc:	b510      	push	{r4, lr}
 80008ce:	0004      	movs	r4, r0
 80008d0:	f7ff ff66 	bl	80007a0 <configuration_is_valid>
 80008d4:	2300      	movs	r3, #0
 80008d6:	4298      	cmp	r0, r3
 80008d8:	d000      	beq.n	80008dc <acc_base_configuration_repetition_mode_get+0x10>
 80008da:	7923      	ldrb	r3, [r4, #4]
 80008dc:	0018      	movs	r0, r3
 80008de:	bd10      	pop	{r4, pc}

080008e0 <acc_radar_engine_common_get_timeout_ms>:
 80008e0:	b510      	push	{r4, lr}
 80008e2:	0004      	movs	r4, r0
 80008e4:	f7ff fff2 	bl	80008cc <acc_base_configuration_repetition_mode_get>
 80008e8:	2801      	cmp	r0, #1
 80008ea:	d00c      	beq.n	8000906 <acc_radar_engine_common_get_timeout_ms+0x26>
 80008ec:	0020      	movs	r0, r4
 80008ee:	f7ff ffd7 	bl	80008a0 <acc_base_configuration_update_rate_get>
 80008f2:	1c01      	adds	r1, r0, #0
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <acc_radar_engine_common_get_timeout_ms+0x2c>)
 80008f6:	f00b fe4d 	bl	800c594 <__aeabi_fdiv>
 80008fa:	4904      	ldr	r1, [pc, #16]	; (800090c <acc_radar_engine_common_get_timeout_ms+0x2c>)
 80008fc:	f00b fcb0 	bl	800c260 <__aeabi_fadd>
 8000900:	f00c fc9a 	bl	800d238 <__aeabi_f2uiz>
 8000904:	bd10      	pop	{r4, pc}
 8000906:	20fa      	movs	r0, #250	; 0xfa
 8000908:	00c0      	lsls	r0, r0, #3
 800090a:	e7fb      	b.n	8000904 <acc_radar_engine_common_get_timeout_ms+0x24>
 800090c:	44fa0000 	.word	0x44fa0000

08000910 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8000910:	b510      	push	{r4, lr}
 8000912:	0004      	movs	r4, r0
 8000914:	f7ff ff44 	bl	80007a0 <configuration_is_valid>
 8000918:	2300      	movs	r3, #0
 800091a:	4298      	cmp	r0, r3
 800091c:	d001      	beq.n	8000922 <acc_base_configuration_hw_accelerated_average_samples_get+0x12>
 800091e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000920:	b2db      	uxtb	r3, r3
 8000922:	0018      	movs	r0, r3
 8000924:	bd10      	pop	{r4, pc}

08000926 <acc_base_configuration_decrease_tx_emission_get>:
 8000926:	b510      	push	{r4, lr}
 8000928:	0004      	movs	r4, r0
 800092a:	f7ff ff39 	bl	80007a0 <configuration_is_valid>
 800092e:	2800      	cmp	r0, #0
 8000930:	d001      	beq.n	8000936 <acc_base_configuration_decrease_tx_emission_get+0x10>
 8000932:	3448      	adds	r4, #72	; 0x48
 8000934:	7820      	ldrb	r0, [r4, #0]
 8000936:	bd10      	pop	{r4, pc}

08000938 <acc_base_configuration_tx_disable_get>:
 8000938:	b510      	push	{r4, lr}
 800093a:	0004      	movs	r4, r0
 800093c:	f7ff ff30 	bl	80007a0 <configuration_is_valid>
 8000940:	2800      	cmp	r0, #0
 8000942:	d001      	beq.n	8000948 <acc_base_configuration_tx_disable_get+0x10>
 8000944:	3447      	adds	r4, #71	; 0x47
 8000946:	7820      	ldrb	r0, [r4, #0]
 8000948:	bd10      	pop	{r4, pc}

0800094a <acc_base_configuration_power_save_mode_get>:
 800094a:	b510      	push	{r4, lr}
 800094c:	0004      	movs	r4, r0
 800094e:	f7ff ff27 	bl	80007a0 <configuration_is_valid>
 8000952:	2300      	movs	r3, #0
 8000954:	4298      	cmp	r0, r3
 8000956:	d000      	beq.n	800095a <acc_base_configuration_power_save_mode_get+0x10>
 8000958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800095a:	0018      	movs	r0, r3
 800095c:	bd10      	pop	{r4, pc}

0800095e <acc_base_configuration_repetition_mode_on_demand_set>:
 800095e:	b510      	push	{r4, lr}
 8000960:	0004      	movs	r4, r0
 8000962:	f7ff ff1d 	bl	80007a0 <configuration_is_valid>
 8000966:	2800      	cmp	r0, #0
 8000968:	d001      	beq.n	800096e <acc_base_configuration_repetition_mode_on_demand_set+0x10>
 800096a:	2301      	movs	r3, #1
 800096c:	7123      	strb	r3, [r4, #4]
 800096e:	bd10      	pop	{r4, pc}

08000970 <acc_base_configuration_sensor_get>:
 8000970:	b510      	push	{r4, lr}
 8000972:	0004      	movs	r4, r0
 8000974:	f7ff ff14 	bl	80007a0 <configuration_is_valid>
 8000978:	2300      	movs	r3, #0
 800097a:	4298      	cmp	r0, r3
 800097c:	d000      	beq.n	8000980 <acc_base_configuration_sensor_get+0x10>
 800097e:	68e3      	ldr	r3, [r4, #12]
 8000980:	0018      	movs	r0, r3
 8000982:	bd10      	pop	{r4, pc}

08000984 <acc_base_configuration_print.part.5>:
 8000984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000986:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <acc_base_configuration_print.part.5+0xc4>)
 8000988:	b093      	sub	sp, #76	; 0x4c
 800098a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098c:	0004      	movs	r4, r0
 800098e:	930b      	str	r3, [sp, #44]	; 0x2c
 8000990:	f7ff ffee 	bl	8000970 <acc_base_configuration_sensor_get>
 8000994:	900c      	str	r0, [sp, #48]	; 0x30
 8000996:	0020      	movs	r0, r4
 8000998:	f7ff ffba 	bl	8000910 <acc_base_configuration_hw_accelerated_average_samples_get>
 800099c:	900d      	str	r0, [sp, #52]	; 0x34
 800099e:	0020      	movs	r0, r4
 80009a0:	f7ff fefe 	bl	80007a0 <configuration_is_valid>
 80009a4:	2600      	movs	r6, #0
 80009a6:	42b0      	cmp	r0, r6
 80009a8:	d000      	beq.n	80009ac <acc_base_configuration_print.part.5+0x28>
 80009aa:	8fe6      	ldrh	r6, [r4, #62]	; 0x3e
 80009ac:	0020      	movs	r0, r4
 80009ae:	f7ff ff6c 	bl	800088a <acc_base_configuration_integrator_get>
 80009b2:	900e      	str	r0, [sp, #56]	; 0x38
 80009b4:	0020      	movs	r0, r4
 80009b6:	f7ff ff53 	bl	8000860 <acc_base_configuration_wg_duration_get>
 80009ba:	900f      	str	r0, [sp, #60]	; 0x3c
 80009bc:	0020      	movs	r0, r4
 80009be:	f7ff feef 	bl	80007a0 <configuration_is_valid>
 80009c2:	2700      	movs	r7, #0
 80009c4:	42b8      	cmp	r0, r7
 80009c6:	d001      	beq.n	80009cc <acc_base_configuration_print.part.5+0x48>
 80009c8:	1da3      	adds	r3, r4, #6
 80009ca:	8fdf      	ldrh	r7, [r3, #62]	; 0x3e
 80009cc:	0020      	movs	r0, r4
 80009ce:	f7ff ffbc 	bl	800094a <acc_base_configuration_power_save_mode_get>
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <acc_base_configuration_print.part.5+0xc8>)
 80009d4:	930a      	str	r3, [sp, #40]	; 0x28
 80009d6:	2804      	cmp	r0, #4
 80009d8:	d803      	bhi.n	80009e2 <acc_base_configuration_print.part.5+0x5e>
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <acc_base_configuration_print.part.5+0xcc>)
 80009dc:	0080      	lsls	r0, r0, #2
 80009de:	58c3      	ldr	r3, [r0, r3]
 80009e0:	930a      	str	r3, [sp, #40]	; 0x28
 80009e2:	0020      	movs	r0, r4
 80009e4:	f7ff fedc 	bl	80007a0 <configuration_is_valid>
 80009e8:	4d1a      	ldr	r5, [pc, #104]	; (8000a54 <acc_base_configuration_print.part.5+0xd0>)
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d008      	beq.n	8000a00 <acc_base_configuration_print.part.5+0x7c>
 80009ee:	0023      	movs	r3, r4
 80009f0:	336a      	adds	r3, #106	; 0x6a
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d003      	beq.n	8000a00 <acc_base_configuration_print.part.5+0x7c>
 80009f8:	4d17      	ldr	r5, [pc, #92]	; (8000a58 <acc_base_configuration_print.part.5+0xd4>)
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d000      	beq.n	8000a00 <acc_base_configuration_print.part.5+0x7c>
 80009fe:	4d13      	ldr	r5, [pc, #76]	; (8000a4c <acc_base_configuration_print.part.5+0xc8>)
 8000a00:	0020      	movs	r0, r4
 8000a02:	f7ff ff99 	bl	8000938 <acc_base_configuration_tx_disable_get>
 8000a06:	9010      	str	r0, [sp, #64]	; 0x40
 8000a08:	0020      	movs	r0, r4
 8000a0a:	f7ff ff0a 	bl	8000822 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8000a0e:	9011      	str	r0, [sp, #68]	; 0x44
 8000a10:	0020      	movs	r0, r4
 8000a12:	f7ff ff88 	bl	8000926 <acc_base_configuration_decrease_tx_emission_get>
 8000a16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000a18:	9009      	str	r0, [sp, #36]	; 0x24
 8000a1a:	9308      	str	r3, [sp, #32]
 8000a1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000a1e:	9506      	str	r5, [sp, #24]
 8000a20:	9307      	str	r3, [sp, #28]
 8000a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000a24:	9704      	str	r7, [sp, #16]
 8000a26:	9305      	str	r3, [sp, #20]
 8000a28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000a2a:	9601      	str	r6, [sp, #4]
 8000a2c:	9303      	str	r3, [sp, #12]
 8000a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <acc_base_configuration_print.part.5+0xd8>)
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000a36:	490a      	ldr	r1, [pc, #40]	; (8000a60 <acc_base_configuration_print.part.5+0xdc>)
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000a3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8000a40:	47a0      	blx	r4
 8000a42:	b013      	add	sp, #76	; 0x4c
 8000a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	200003e8 	.word	0x200003e8
 8000a4c:	0801bcc3 	.word	0x0801bcc3
 8000a50:	08014b00 	.word	0x08014b00
 8000a54:	0801ae37 	.word	0x0801ae37
 8000a58:	0801b746 	.word	0x0801b746
 8000a5c:	0801ae39 	.word	0x0801ae39
 8000a60:	0801ac72 	.word	0x0801ac72

08000a64 <acc_service_maximize_signal_attenuation_set.part.8>:
 8000a64:	b510      	push	{r4, lr}
 8000a66:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <acc_service_maximize_signal_attenuation_set.part.8+0x10>)
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <acc_service_maximize_signal_attenuation_set.part.8+0x14>)
 8000a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a6c:	4903      	ldr	r1, [pc, #12]	; (8000a7c <acc_service_maximize_signal_attenuation_set.part.8+0x18>)
 8000a6e:	2001      	movs	r0, #1
 8000a70:	4798      	blx	r3
 8000a72:	bd10      	pop	{r4, pc}
 8000a74:	200003e8 	.word	0x200003e8
 8000a78:	0801ae71 	.word	0x0801ae71
 8000a7c:	0801b921 	.word	0x0801b921

08000a80 <acc_service_configuration_valid>:
 8000a80:	b510      	push	{r4, lr}
 8000a82:	2800      	cmp	r0, #0
 8000a84:	d00a      	beq.n	8000a9c <acc_service_configuration_valid+0x1c>
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <acc_service_configuration_valid+0x2c>)
 8000a88:	6802      	ldr	r2, [r0, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d106      	bne.n	8000a9c <acc_service_configuration_valid+0x1c>
 8000a8e:	8b03      	ldrh	r3, [r0, #24]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <acc_service_configuration_valid+0x1c>
 8000a94:	6943      	ldr	r3, [r0, #20]
 8000a96:	2001      	movs	r0, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d106      	bne.n	8000aaa <acc_service_configuration_valid+0x2a>
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <acc_service_configuration_valid+0x30>)
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <acc_service_configuration_valid+0x34>)
 8000aa4:	4904      	ldr	r1, [pc, #16]	; (8000ab8 <acc_service_configuration_valid+0x38>)
 8000aa6:	4798      	blx	r3
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	bd10      	pop	{r4, pc}
 8000aac:	acc09dd7 	.word	0xacc09dd7
 8000ab0:	200003e8 	.word	0x200003e8
 8000ab4:	0801ae71 	.word	0x0801ae71
 8000ab8:	0801b921 	.word	0x0801b921

08000abc <acc_service_configuration_check>:
 8000abc:	b510      	push	{r4, lr}
 8000abe:	0004      	movs	r4, r0
 8000ac0:	f7ff ffde 	bl	8000a80 <acc_service_configuration_valid>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d00a      	beq.n	8000ade <acc_service_configuration_check+0x22>
 8000ac8:	7963      	ldrb	r3, [r4, #5]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d906      	bls.n	8000ade <acc_service_configuration_check+0x22>
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <acc_service_configuration_check+0x24>)
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <acc_service_configuration_check+0x28>)
 8000ad8:	4903      	ldr	r1, [pc, #12]	; (8000ae8 <acc_service_configuration_check+0x2c>)
 8000ada:	4798      	blx	r3
 8000adc:	2000      	movs	r0, #0
 8000ade:	bd10      	pop	{r4, pc}
 8000ae0:	200003e8 	.word	0x200003e8
 8000ae4:	0801ae87 	.word	0x0801ae87
 8000ae8:	0801b921 	.word	0x0801b921

08000aec <acc_service_handle_valid>:
 8000aec:	b510      	push	{r4, lr}
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d004      	beq.n	8000afc <acc_service_handle_valid+0x10>
 8000af2:	6802      	ldr	r2, [r0, #0]
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <acc_service_handle_valid+0x20>)
 8000af6:	2001      	movs	r0, #1
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d006      	beq.n	8000b0a <acc_service_handle_valid+0x1e>
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <acc_service_handle_valid+0x24>)
 8000afe:	2000      	movs	r0, #0
 8000b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <acc_service_handle_valid+0x28>)
 8000b04:	4904      	ldr	r1, [pc, #16]	; (8000b18 <acc_service_handle_valid+0x2c>)
 8000b06:	4798      	blx	r3
 8000b08:	2000      	movs	r0, #0
 8000b0a:	bd10      	pop	{r4, pc}
 8000b0c:	acc09ee8 	.word	0xacc09ee8
 8000b10:	200003e8 	.word	0x200003e8
 8000b14:	0801ae9f 	.word	0x0801ae9f
 8000b18:	0801b921 	.word	0x0801b921

08000b1c <acc_service_pipeline_destroy>:
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	0004      	movs	r4, r0
 8000b20:	6900      	ldr	r0, [r0, #16]
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d003      	beq.n	8000b2e <acc_service_pipeline_destroy+0x12>
 8000b26:	68c3      	ldr	r3, [r0, #12]
 8000b28:	4798      	blx	r3
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	6123      	str	r3, [r4, #16]
 8000b2e:	bd10      	pop	{r4, pc}

08000b30 <acc_service_get_base_configuration>:
 8000b30:	b510      	push	{r4, lr}
 8000b32:	1e04      	subs	r4, r0, #0
 8000b34:	d001      	beq.n	8000b3a <acc_service_get_base_configuration+0xa>
 8000b36:	6900      	ldr	r0, [r0, #16]
 8000b38:	bd10      	pop	{r4, pc}
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <acc_service_get_base_configuration+0x24>)
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	3230      	adds	r2, #48	; 0x30
 8000b40:	7812      	ldrb	r2, [r2, #0]
 8000b42:	1e10      	subs	r0, r2, #0
 8000b44:	d0f8      	beq.n	8000b38 <acc_service_get_base_configuration+0x8>
 8000b46:	2001      	movs	r0, #1
 8000b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4a:	4a03      	ldr	r2, [pc, #12]	; (8000b58 <acc_service_get_base_configuration+0x28>)
 8000b4c:	4903      	ldr	r1, [pc, #12]	; (8000b5c <acc_service_get_base_configuration+0x2c>)
 8000b4e:	4798      	blx	r3
 8000b50:	0020      	movs	r0, r4
 8000b52:	e7f1      	b.n	8000b38 <acc_service_get_base_configuration+0x8>
 8000b54:	200003e8 	.word	0x200003e8
 8000b58:	0801ae71 	.word	0x0801ae71
 8000b5c:	0801b921 	.word	0x0801b921

08000b60 <set_maximize_signal_attenuation>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	0005      	movs	r5, r0
 8000b64:	000e      	movs	r6, r1
 8000b66:	f7ff ffe3 	bl	8000b30 <acc_service_get_base_configuration>
 8000b6a:	1e04      	subs	r4, r0, #0
 8000b6c:	d010      	beq.n	8000b90 <set_maximize_signal_attenuation+0x30>
 8000b6e:	f7ff fe17 	bl	80007a0 <configuration_is_valid>
 8000b72:	2800      	cmp	r0, #0
 8000b74:	d002      	beq.n	8000b7c <set_maximize_signal_attenuation+0x1c>
 8000b76:	0023      	movs	r3, r4
 8000b78:	334a      	adds	r3, #74	; 0x4a
 8000b7a:	701e      	strb	r6, [r3, #0]
 8000b7c:	2e00      	cmp	r6, #0
 8000b7e:	d008      	beq.n	8000b92 <set_maximize_signal_attenuation+0x32>
 8000b80:	210f      	movs	r1, #15
 8000b82:	0020      	movs	r0, r4
 8000b84:	f7ff fe77 	bl	8000876 <acc_base_configuration_integrator_set>
 8000b88:	2101      	movs	r1, #1
 8000b8a:	0020      	movs	r0, r4
 8000b8c:	f7ff fe54 	bl	8000838 <acc_base_configuration_integrator_ramp_up_set>
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	68ab      	ldr	r3, [r5, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d0fb      	beq.n	8000b90 <set_maximize_signal_attenuation+0x30>
 8000b98:	7969      	ldrb	r1, [r5, #5]
 8000b9a:	0028      	movs	r0, r5
 8000b9c:	4798      	blx	r3
 8000b9e:	e7f7      	b.n	8000b90 <set_maximize_signal_attenuation+0x30>

08000ba0 <acc_service_maximize_signal_attenuation_set>:
 8000ba0:	b510      	push	{r4, lr}
 8000ba2:	2800      	cmp	r0, #0
 8000ba4:	d003      	beq.n	8000bae <acc_service_maximize_signal_attenuation_set+0xe>
 8000ba6:	7301      	strb	r1, [r0, #12]
 8000ba8:	f7ff ffda 	bl	8000b60 <set_maximize_signal_attenuation>
 8000bac:	bd10      	pop	{r4, pc}
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <acc_service_maximize_signal_attenuation_set+0x20>)
 8000bb0:	3330      	adds	r3, #48	; 0x30
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0f9      	beq.n	8000bac <acc_service_maximize_signal_attenuation_set+0xc>
 8000bb8:	f7ff ff54 	bl	8000a64 <acc_service_maximize_signal_attenuation_set.part.8>
 8000bbc:	e7f6      	b.n	8000bac <acc_service_maximize_signal_attenuation_set+0xc>
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	200003e8 	.word	0x200003e8

08000bc4 <acc_service_profile_set>:
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	1e04      	subs	r4, r0, #0
 8000bc8:	d00c      	beq.n	8000be4 <acc_service_profile_set+0x20>
 8000bca:	6883      	ldr	r3, [r0, #8]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d009      	beq.n	8000be4 <acc_service_profile_set+0x20>
 8000bd0:	7141      	strb	r1, [r0, #5]
 8000bd2:	4798      	blx	r3
 8000bd4:	7b23      	ldrb	r3, [r4, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <acc_service_profile_set+0x1e>
 8000bda:	2101      	movs	r1, #1
 8000bdc:	0020      	movs	r0, r4
 8000bde:	f7ff ffbf 	bl	8000b60 <set_maximize_signal_attenuation>
 8000be2:	bd10      	pop	{r4, pc}
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <acc_service_profile_set+0x30>)
 8000be6:	3330      	adds	r3, #48	; 0x30
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f9      	beq.n	8000be2 <acc_service_profile_set+0x1e>
 8000bee:	f7ff ff39 	bl	8000a64 <acc_service_maximize_signal_attenuation_set.part.8>
 8000bf2:	e7f6      	b.n	8000be2 <acc_service_profile_set+0x1e>
 8000bf4:	200003e8 	.word	0x200003e8

08000bf8 <acc_service_receiver_gain_set>:
 8000bf8:	b570      	push	{r4, r5, r6, lr}
 8000bfa:	1c0d      	adds	r5, r1, #0
 8000bfc:	f7ff ff98 	bl	8000b30 <acc_service_get_base_configuration>
 8000c00:	0004      	movs	r4, r0
 8000c02:	f7ff fdcd 	bl	80007a0 <configuration_is_valid>
 8000c06:	2800      	cmp	r0, #0
 8000c08:	d00e      	beq.n	8000c28 <acc_service_receiver_gain_set+0x30>
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <acc_service_receiver_gain_set+0x34>)
 8000c0c:	1c28      	adds	r0, r5, #0
 8000c0e:	f00b fdd3 	bl	800c7b8 <__aeabi_fmul>
 8000c12:	1c01      	adds	r1, r0, #0
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <acc_service_receiver_gain_set+0x34>)
 8000c16:	f00b ff01 	bl	800ca1c <__aeabi_fsub>
 8000c1a:	21fc      	movs	r1, #252	; 0xfc
 8000c1c:	0589      	lsls	r1, r1, #22
 8000c1e:	f00b fb1f 	bl	800c260 <__aeabi_fadd>
 8000c22:	f00c fcbf 	bl	800d5a4 <__aeabi_f2iz>
 8000c26:	87e0      	strh	r0, [r4, #62]	; 0x3e
 8000c28:	bd70      	pop	{r4, r5, r6, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	41b00000 	.word	0x41b00000

08000c30 <get_sparse_configuration>:
 8000c30:	b510      	push	{r4, lr}
 8000c32:	1e04      	subs	r4, r0, #0
 8000c34:	d004      	beq.n	8000c40 <get_sparse_configuration+0x10>
 8000c36:	7903      	ldrb	r3, [r0, #4]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d10d      	bne.n	8000c58 <get_sparse_configuration+0x28>
 8000c3c:	0020      	movs	r0, r4
 8000c3e:	bd10      	pop	{r4, pc}
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <get_sparse_configuration+0x2c>)
 8000c42:	001a      	movs	r2, r3
 8000c44:	3230      	adds	r2, #48	; 0x30
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	d0f7      	beq.n	8000c3c <get_sparse_configuration+0xc>
 8000c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <get_sparse_configuration+0x30>)
 8000c50:	4904      	ldr	r1, [pc, #16]	; (8000c64 <get_sparse_configuration+0x34>)
 8000c52:	2001      	movs	r0, #1
 8000c54:	4798      	blx	r3
 8000c56:	e7f1      	b.n	8000c3c <get_sparse_configuration+0xc>
 8000c58:	2400      	movs	r4, #0
 8000c5a:	e7ef      	b.n	8000c3c <get_sparse_configuration+0xc>
 8000c5c:	200003e8 	.word	0x200003e8
 8000c60:	0801ae71 	.word	0x0801ae71
 8000c64:	0801aeae 	.word	0x0801aeae

08000c68 <set_configuration_for_profile.lto_priv.322>:
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	000d      	movs	r5, r1
 8000c6c:	f7ff ffe0 	bl	8000c30 <get_sparse_configuration>
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d011      	beq.n	8000c98 <set_configuration_for_profile.lto_priv.322+0x30>
 8000c74:	301c      	adds	r0, #28
 8000c76:	0004      	movs	r4, r0
 8000c78:	1e68      	subs	r0, r5, #1
 8000c7a:	2804      	cmp	r0, #4
 8000c7c:	d80c      	bhi.n	8000c98 <set_configuration_for_profile.lto_priv.322+0x30>
 8000c7e:	f00c f8b9 	bl	800cdf4 <__gnu_thumb1_case_uqi>
 8000c82:	0c03      	.short	0x0c03
 8000c84:	140e      	.short	0x140e
 8000c86:	1a          	.byte	0x1a
 8000c87:	00          	.byte	0x00
 8000c88:	2100      	movs	r1, #0
 8000c8a:	0020      	movs	r0, r4
 8000c8c:	f7ff fdde 	bl	800084c <acc_base_configuration_wg_duration_set>
 8000c90:	2100      	movs	r1, #0
 8000c92:	0020      	movs	r0, r4
 8000c94:	f7ff fdef 	bl	8000876 <acc_base_configuration_integrator_set>
 8000c98:	bd70      	pop	{r4, r5, r6, pc}
 8000c9a:	2107      	movs	r1, #7
 8000c9c:	e7f5      	b.n	8000c8a <set_configuration_for_profile.lto_priv.322+0x22>
 8000c9e:	2109      	movs	r1, #9
 8000ca0:	0020      	movs	r0, r4
 8000ca2:	f7ff fdd3 	bl	800084c <acc_base_configuration_wg_duration_set>
 8000ca6:	2103      	movs	r1, #3
 8000ca8:	e7f3      	b.n	8000c92 <set_configuration_for_profile.lto_priv.322+0x2a>
 8000caa:	210c      	movs	r1, #12
 8000cac:	0020      	movs	r0, r4
 8000cae:	f7ff fdcd 	bl	800084c <acc_base_configuration_wg_duration_set>
 8000cb2:	2106      	movs	r1, #6
 8000cb4:	e7ed      	b.n	8000c92 <set_configuration_for_profile.lto_priv.322+0x2a>
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	e7f8      	b.n	8000cac <set_configuration_for_profile.lto_priv.322+0x44>

08000cba <acc_service_sparse_get_metadata>:
 8000cba:	b510      	push	{r4, lr}
 8000cbc:	000c      	movs	r4, r1
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	d015      	beq.n	8000cee <acc_service_sparse_get_metadata+0x34>
 8000cc2:	7a03      	ldrb	r3, [r0, #8]
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d112      	bne.n	8000cee <acc_service_sparse_get_metadata+0x34>
 8000cc8:	6903      	ldr	r3, [r0, #16]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	699a      	ldr	r2, [r3, #24]
 8000cce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000cd0:	600a      	str	r2, [r1, #0]
 8000cd2:	69da      	ldr	r2, [r3, #28]
 8000cd4:	604a      	str	r2, [r1, #4]
 8000cd6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8000cd8:	810a      	strh	r2, [r1, #8]
 8000cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cdc:	60ca      	str	r2, [r1, #12]
 8000cde:	4904      	ldr	r1, [pc, #16]	; (8000cf0 <acc_service_sparse_get_metadata+0x36>)
 8000ce0:	f00b fd6a 	bl	800c7b8 <__aeabi_fmul>
 8000ce4:	21fc      	movs	r1, #252	; 0xfc
 8000ce6:	0589      	lsls	r1, r1, #22
 8000ce8:	f00b fd66 	bl	800c7b8 <__aeabi_fmul>
 8000cec:	6120      	str	r0, [r4, #16]
 8000cee:	bd10      	pop	{r4, pc}
 8000cf0:	4d8ef3c2 	.word	0x4d8ef3c2

08000cf4 <destroy_handle>:
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <destroy_handle+0x54>)
 8000cf8:	4e14      	ldr	r6, [pc, #80]	; (8000d4c <destroy_handle+0x58>)
 8000cfa:	685c      	ldr	r4, [r3, #4]
 8000cfc:	0033      	movs	r3, r6
 8000cfe:	3330      	adds	r3, #48	; 0x30
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	0005      	movs	r5, r0
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d905      	bls.n	8000d14 <destroy_handle+0x20>
 8000d08:	6843      	ldr	r3, [r0, #4]
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <destroy_handle+0x5c>)
 8000d0c:	4911      	ldr	r1, [pc, #68]	; (8000d54 <destroy_handle+0x60>)
 8000d0e:	2004      	movs	r0, #4
 8000d10:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8000d12:	47b8      	blx	r7
 8000d14:	2300      	movs	r3, #0
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d00d      	beq.n	8000d36 <destroy_handle+0x42>
 8000d1a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d1c:	42ac      	cmp	r4, r5
 8000d1e:	d107      	bne.n	8000d30 <destroy_handle+0x3c>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10f      	bne.n	8000d44 <destroy_handle+0x50>
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <destroy_handle+0x54>)
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	0020      	movs	r0, r4
 8000d2a:	f7ff fc85 	bl	8000638 <acc_rss_integration_mem_free>
 8000d2e:	e008      	b.n	8000d42 <destroy_handle+0x4e>
 8000d30:	0023      	movs	r3, r4
 8000d32:	0014      	movs	r4, r2
 8000d34:	e7ef      	b.n	8000d16 <destroy_handle+0x22>
 8000d36:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8000d38:	686b      	ldr	r3, [r5, #4]
 8000d3a:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <destroy_handle+0x64>)
 8000d3c:	4905      	ldr	r1, [pc, #20]	; (8000d54 <destroy_handle+0x60>)
 8000d3e:	0020      	movs	r0, r4
 8000d40:	47b0      	blx	r6
 8000d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d44:	655a      	str	r2, [r3, #84]	; 0x54
 8000d46:	e7ef      	b.n	8000d28 <destroy_handle+0x34>
 8000d48:	2000008c 	.word	0x2000008c
 8000d4c:	200003e8 	.word	0x200003e8
 8000d50:	0801aebd 	.word	0x0801aebd
 8000d54:	0801aede 	.word	0x0801aede
 8000d58:	0801aeee 	.word	0x0801aeee

08000d5c <get_and_validate_envelope_configuration>:
 8000d5c:	b510      	push	{r4, lr}
 8000d5e:	0004      	movs	r4, r0
 8000d60:	f7ff fe8e 	bl	8000a80 <acc_service_configuration_valid>
 8000d64:	2800      	cmp	r0, #0
 8000d66:	d002      	beq.n	8000d6e <get_and_validate_envelope_configuration+0x12>
 8000d68:	7923      	ldrb	r3, [r4, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00b      	beq.n	8000d86 <get_and_validate_envelope_configuration+0x2a>
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <get_and_validate_envelope_configuration+0x30>)
 8000d70:	001a      	movs	r2, r3
 8000d72:	3230      	adds	r2, #48	; 0x30
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	1e14      	subs	r4, r2, #0
 8000d78:	d005      	beq.n	8000d86 <get_and_validate_envelope_configuration+0x2a>
 8000d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <get_and_validate_envelope_configuration+0x34>)
 8000d7e:	4905      	ldr	r1, [pc, #20]	; (8000d94 <get_and_validate_envelope_configuration+0x38>)
 8000d80:	2001      	movs	r0, #1
 8000d82:	4798      	blx	r3
 8000d84:	2400      	movs	r4, #0
 8000d86:	0020      	movs	r0, r4
 8000d88:	bd10      	pop	{r4, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	200003e8 	.word	0x200003e8
 8000d90:	0801ae71 	.word	0x0801ae71
 8000d94:	0801af22 	.word	0x0801af22

08000d98 <set_configuration_for_profile.lto_priv.321>:
 8000d98:	b570      	push	{r4, r5, r6, lr}
 8000d9a:	000e      	movs	r6, r1
 8000d9c:	f7ff ffde 	bl	8000d5c <get_and_validate_envelope_configuration>
 8000da0:	1e05      	subs	r5, r0, #0
 8000da2:	d018      	beq.n	8000dd6 <set_configuration_for_profile.lto_priv.321+0x3e>
 8000da4:	0004      	movs	r4, r0
 8000da6:	1e70      	subs	r0, r6, #1
 8000da8:	341c      	adds	r4, #28
 8000daa:	2804      	cmp	r0, #4
 8000dac:	d813      	bhi.n	8000dd6 <set_configuration_for_profile.lto_priv.321+0x3e>
 8000dae:	358c      	adds	r5, #140	; 0x8c
 8000db0:	f00c f820 	bl	800cdf4 <__gnu_thumb1_case_uqi>
 8000db4:	22201203 	.word	0x22201203
 8000db8:	2c          	.byte	0x2c
 8000db9:	00          	.byte	0x00
 8000dba:	2100      	movs	r1, #0
 8000dbc:	0020      	movs	r0, r4
 8000dbe:	f7ff fd45 	bl	800084c <acc_base_configuration_wg_duration_set>
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	0020      	movs	r0, r4
 8000dc6:	f7ff fd56 	bl	8000876 <acc_base_configuration_integrator_set>
 8000dca:	2103      	movs	r1, #3
 8000dcc:	0020      	movs	r0, r4
 8000dce:	f7ff fd33 	bl	8000838 <acc_base_configuration_integrator_ramp_up_set>
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <set_configuration_for_profile.lto_priv.321+0x78>)
 8000dd4:	602b      	str	r3, [r5, #0]
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 8000dd8:	2107      	movs	r1, #7
 8000dda:	0020      	movs	r0, r4
 8000ddc:	f7ff fd36 	bl	800084c <acc_base_configuration_wg_duration_set>
 8000de0:	2106      	movs	r1, #6
 8000de2:	0020      	movs	r0, r4
 8000de4:	f7ff fd47 	bl	8000876 <acc_base_configuration_integrator_set>
 8000de8:	2109      	movs	r1, #9
 8000dea:	0020      	movs	r0, r4
 8000dec:	f7ff fd24 	bl	8000838 <acc_base_configuration_integrator_ramp_up_set>
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <set_configuration_for_profile.lto_priv.321+0x7c>)
 8000df2:	e7ef      	b.n	8000dd4 <set_configuration_for_profile.lto_priv.321+0x3c>
 8000df4:	2109      	movs	r1, #9
 8000df6:	e7f0      	b.n	8000dda <set_configuration_for_profile.lto_priv.321+0x42>
 8000df8:	210c      	movs	r1, #12
 8000dfa:	0020      	movs	r0, r4
 8000dfc:	f7ff fd26 	bl	800084c <acc_base_configuration_wg_duration_set>
 8000e00:	2106      	movs	r1, #6
 8000e02:	0020      	movs	r0, r4
 8000e04:	f7ff fd37 	bl	8000876 <acc_base_configuration_integrator_set>
 8000e08:	2101      	movs	r1, #1
 8000e0a:	e7ee      	b.n	8000dea <set_configuration_for_profile.lto_priv.321+0x52>
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	e7f4      	b.n	8000dfa <set_configuration_for_profile.lto_priv.321+0x62>
 8000e10:	3c8461fa 	.word	0x3c8461fa
 8000e14:	3b843809 	.word	0x3b843809

08000e18 <setdata>:
	}else{
		return 0;
	}
}

void setdata(int16_t sweep, int16_t bin, uint16_t val){
 8000e18:	b510      	push	{r4, lr}
	if(
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	db0d      	blt.n	8000e3a <setdata+0x22>
		(sweep >= 0) && (sweep < _sweeps) &&
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <setdata+0x24>)
 8000e20:	7a1c      	ldrb	r4, [r3, #8]
 8000e22:	42a0      	cmp	r0, r4
 8000e24:	da09      	bge.n	8000e3a <setdata+0x22>
 8000e26:	2900      	cmp	r1, #0
 8000e28:	db07      	blt.n	8000e3a <setdata+0x22>
		(bin >= 0) && (bin < _bins)
 8000e2a:	7a5c      	ldrb	r4, [r3, #9]
 8000e2c:	42a1      	cmp	r1, r4
 8000e2e:	da04      	bge.n	8000e3a <setdata+0x22>
	){
		_conv_data[sweep][bin] = val;
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	0080      	lsls	r0, r0, #2
 8000e34:	58c3      	ldr	r3, [r0, r3]
 8000e36:	0049      	lsls	r1, r1, #1
 8000e38:	52ca      	strh	r2, [r1, r3]
	}
}
 8000e3a:	bd10      	pop	{r4, pc}
 8000e3c:	2000008c 	.word	0x2000008c

08000e40 <getdata>:
		return 0;
 8000e40:	2300      	movs	r3, #0
uint16_t getdata(int16_t sweep, int16_t bin){
 8000e42:	b510      	push	{r4, lr}
	if(
 8000e44:	4298      	cmp	r0, r3
 8000e46:	db0d      	blt.n	8000e64 <getdata+0x24>
		(sweep >= 0) && (sweep < _sweeps) &&
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <getdata+0x28>)
 8000e4a:	7a14      	ldrb	r4, [r2, #8]
 8000e4c:	42a0      	cmp	r0, r4
 8000e4e:	da09      	bge.n	8000e64 <getdata+0x24>
 8000e50:	4299      	cmp	r1, r3
 8000e52:	db07      	blt.n	8000e64 <getdata+0x24>
		(bin >= 0) && (bin < _bins)
 8000e54:	7a54      	ldrb	r4, [r2, #9]
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	da04      	bge.n	8000e64 <getdata+0x24>
		return _conv_data[sweep][bin];
 8000e5a:	68d3      	ldr	r3, [r2, #12]
 8000e5c:	0080      	lsls	r0, r0, #2
 8000e5e:	58c3      	ldr	r3, [r0, r3]
 8000e60:	0049      	lsls	r1, r1, #1
 8000e62:	5acb      	ldrh	r3, [r1, r3]
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	bd10      	pop	{r4, pc}
 8000e68:	2000008c 	.word	0x2000008c

08000e6c <RegInt_regmap>:
//0xD6 :: Data Eval Mode
//0xD7 :: Focus weight Radius
//0xD8 :: Data zeroing threshold
//0xD9 :: Bandstop velocity filter
uint32_t* RegInt_regmap(uint8_t reg){
	REGADRERR = -1;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <RegInt_regmap+0x60>)
 8000e70:	4252      	negs	r2, r2
uint32_t* RegInt_regmap(uint8_t reg){
 8000e72:	b510      	push	{r4, lr}
 8000e74:	0001      	movs	r1, r0
	REGADRERR = -1;
 8000e76:	615a      	str	r2, [r3, #20]
	uint32_t* ptr = &REGADRERR;
	
	if (reg <= 0x12){
 8000e78:	2812      	cmp	r0, #18
 8000e7a:	d820      	bhi.n	8000ebe <RegInt_regmap+0x52>
		ptr = &GENERAL_REGISTERS[reg];
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	0080      	lsls	r0, r0, #2
 8000e80:	3218      	adds	r2, #24
 8000e82:	1810      	adds	r0, r2, r0
	}
	if (reg == 0xE9){
		ptr = &OUTPUT_BUFFER_LENGTH;
	}
	if (0x20 <= reg && reg <= 0x42){
 8000e84:	000a      	movs	r2, r1
 8000e86:	3a20      	subs	r2, #32
 8000e88:	b2d4      	uxtb	r4, r2
 8000e8a:	2c22      	cmp	r4, #34	; 0x22
 8000e8c:	d802      	bhi.n	8000e94 <RegInt_regmap+0x28>
		ptr = &SERVICE_REGISTERS[reg - 0x20];
 8000e8e:	0090      	lsls	r0, r2, #2
 8000e90:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <RegInt_regmap+0x64>)
 8000e92:	1880      	adds	r0, r0, r2
	}
	if (0x81 <= reg && reg <= 0x85){
 8000e94:	000a      	movs	r2, r1
 8000e96:	327f      	adds	r2, #127	; 0x7f
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	2a04      	cmp	r2, #4
 8000e9c:	d805      	bhi.n	8000eaa <RegInt_regmap+0x3e>
		ptr = &META_REGISTERS[reg - 0x81];
 8000e9e:	0008      	movs	r0, r1
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	3881      	subs	r0, #129	; 0x81
 8000ea4:	3264      	adds	r2, #100	; 0x64
 8000ea6:	0080      	lsls	r0, r0, #2
 8000ea8:	1810      	adds	r0, r2, r0
	}	
	if (0xD0 <= reg && reg <= 0xD9){
 8000eaa:	000a      	movs	r2, r1
 8000eac:	3230      	adds	r2, #48	; 0x30
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	2a09      	cmp	r2, #9
 8000eb2:	d803      	bhi.n	8000ebc <RegInt_regmap+0x50>
		ptr = &EVAL_REGISTERS[reg - 0xD0];
 8000eb4:	39d0      	subs	r1, #208	; 0xd0
 8000eb6:	3378      	adds	r3, #120	; 0x78
 8000eb8:	0088      	lsls	r0, r1, #2
 8000eba:	1818      	adds	r0, r3, r0
	}
	return ptr;
}
 8000ebc:	bd10      	pop	{r4, pc}
	uint32_t* ptr = &REGADRERR;
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	3014      	adds	r0, #20
	if (reg == 0xE9){
 8000ec2:	29e9      	cmp	r1, #233	; 0xe9
 8000ec4:	d1de      	bne.n	8000e84 <RegInt_regmap+0x18>
		ptr = &OUTPUT_BUFFER_LENGTH;
 8000ec6:	3804      	subs	r0, #4
 8000ec8:	e7dc      	b.n	8000e84 <RegInt_regmap+0x18>
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	2000008c 	.word	0x2000008c
 8000ed0:	2000032c 	.word	0x2000032c

08000ed4 <acc_integration_get_time>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ed4:	4b01      	ldr	r3, [pc, #4]	; (8000edc <acc_integration_get_time+0x8>)
 8000ed6:	6818      	ldr	r0, [r3, #0]


uint32_t acc_integration_get_time(void)
{
	return HAL_GetTick();
}
 8000ed8:	4770      	bx	lr
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	200003e4 	.word	0x200003e4

08000ee0 <pulse_hibernate_pin>:
}


static void pulse_hibernate_pin(uint32_t nbr_pulses)
{
	for (uint32_t i = 0; i < nbr_pulses; i++)
 8000ee0:	2100      	movs	r1, #0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ee2:	2210      	movs	r2, #16
{
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <pulse_hibernate_pin+0x24>)
 8000ee8:	691c      	ldr	r4, [r3, #16]
 8000eea:	4214      	tst	r4, r2
 8000eec:	d102      	bne.n	8000ef4 <pulse_hibernate_pin+0x14>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eee:	619a      	str	r2, [r3, #24]
 8000ef0:	e7fa      	b.n	8000ee8 <pulse_hibernate_pin+0x8>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ef4:	691c      	ldr	r4, [r3, #16]
 8000ef6:	4214      	tst	r4, r2
 8000ef8:	d1fb      	bne.n	8000ef2 <pulse_hibernate_pin+0x12>
	for (uint32_t i = 0; i < nbr_pulses; i++)
 8000efa:	3101      	adds	r1, #1
 8000efc:	4288      	cmp	r0, r1
 8000efe:	d1f3      	bne.n	8000ee8 <pulse_hibernate_pin+0x8>
		while (HAL_GPIO_ReadPin(A111_CTRL_GPIO_Port, A111_CTRL_Pin) != GPIO_PIN_RESET)
		{
			HAL_GPIO_WritePin(A111_CTRL_GPIO_Port, A111_CTRL_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	50000400 	.word	0x50000400

08000f08 <acc_hal_integration_sensor_hibernate_enter>:


static void acc_hal_integration_sensor_hibernate_enter(acc_sensor_id_t sensor_id)
{
 8000f08:	b510      	push	{r4, lr}
	(void)sensor_id;  // Ignore parameter sensor_id

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_HIBERNATE_ENTER);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f7ff ffe8 	bl	8000ee0 <pulse_hibernate_pin>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <acc_hal_integration_sensor_hibernate_enter+0x14>)
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28

	// Turn off sensor supplies VIO_1 and VIO_2
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_RESET);
}
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	50000400 	.word	0x50000400

08000f20 <acc_hal_integration_get_reference_frequency>:
}
 8000f20:	4800      	ldr	r0, [pc, #0]	; (8000f24 <acc_hal_integration_get_reference_frequency+0x4>)
 8000f22:	4770      	bx	lr
 8000f24:	4bb71b00 	.word	0x4bb71b00

08000f28 <acc_hal_integration_wait_for_sensor_interrupt>:
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <acc_hal_integration_wait_for_sensor_interrupt+0x34>)
{
 8000f2a:	b570      	push	{r4, r5, r6, lr}
 8000f2c:	2408      	movs	r4, #8
 8000f2e:	0015      	movs	r5, r2
 8000f30:	480b      	ldr	r0, [pc, #44]	; (8000f60 <acc_hal_integration_wait_for_sensor_interrupt+0x38>)
 8000f32:	6806      	ldr	r6, [r0, #0]
 8000f34:	6913      	ldr	r3, [r2, #16]
 8000f36:	4223      	tst	r3, r4
 8000f38:	d103      	bne.n	8000f42 <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
 8000f3a:	6803      	ldr	r3, [r0, #0]
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8000f3c:	1b9b      	subs	r3, r3, r6
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d303      	bcc.n	8000f4a <acc_hal_integration_wait_for_sensor_interrupt+0x22>
 8000f42:	6928      	ldr	r0, [r5, #16]
 8000f44:	0700      	lsls	r0, r0, #28
	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 8000f46:	0fc0      	lsrs	r0, r0, #31
}
 8000f48:	bd70      	pop	{r4, r5, r6, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4a:	b672      	cpsid	i
 8000f4c:	6913      	ldr	r3, [r2, #16]
 8000f4e:	4223      	tst	r3, r4
 8000f50:	d100      	bne.n	8000f54 <acc_hal_integration_wait_for_sensor_interrupt+0x2c>
			__WFI();
 8000f52:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 8000f54:	b662      	cpsie	i
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000f56:	f3bf 8f6f 	isb	sy
 8000f5a:	e7eb      	b.n	8000f34 <acc_hal_integration_wait_for_sensor_interrupt+0xc>
 8000f5c:	50000400 	.word	0x50000400
 8000f60:	200003e4 	.word	0x200003e4

08000f64 <data_free>:
	}
	
	return 0;
}

void data_free(void){
 8000f64:	b510      	push	{r4, lr}
	free(data);
 8000f66:	4c04      	ldr	r4, [pc, #16]	; (8000f78 <data_free+0x14>)
 8000f68:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000f6a:	f013 fd97 	bl	8014a9c <free>
	data = NULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	63a3      	str	r3, [r4, #56]	; 0x38
	sweeps = 0;
 8000f72:	87a3      	strh	r3, [r4, #60]	; 0x3c
	bins = 0;
 8000f74:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
 8000f76:	bd10      	pop	{r4, pc}
 8000f78:	2000010c 	.word	0x2000010c

08000f7c <acc_service_send_data>:
 8000f7c:	b570      	push	{r4, r5, r6, lr}
 8000f7e:	9e04      	ldr	r6, [sp, #16]
 8000f80:	001d      	movs	r5, r3
 8000f82:	7833      	ldrb	r3, [r6, #0]
 8000f84:	6944      	ldr	r4, [r0, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10a      	bne.n	8000fa0 <acc_service_send_data+0x24>
 8000f8a:	7ea3      	ldrb	r3, [r4, #26]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d011      	beq.n	8000fb4 <acc_service_send_data+0x38>
 8000f90:	68e3      	ldr	r3, [r4, #12]
 8000f92:	6860      	ldr	r0, [r4, #4]
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d900      	bls.n	8000f9a <acc_service_send_data+0x1e>
 8000f98:	0013      	movs	r3, r2
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	f013 fd88 	bl	8014ab0 <memcpy>
 8000fa0:	7833      	ldrb	r3, [r6, #0]
 8000fa2:	6920      	ldr	r0, [r4, #16]
 8000fa4:	7663      	strb	r3, [r4, #25]
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d003      	beq.n	8000fb2 <acc_service_send_data+0x36>
 8000faa:	6962      	ldr	r2, [r4, #20]
 8000fac:	0029      	movs	r1, r5
 8000fae:	f013 fd7f 	bl	8014ab0 <memcpy>
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
 8000fb4:	68a3      	ldr	r3, [r4, #8]
 8000fb6:	6019      	str	r1, [r3, #0]
 8000fb8:	e7f2      	b.n	8000fa0 <acc_service_send_data+0x24>

08000fba <sparse_send_data>:
 8000fba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000fbc:	0005      	movs	r5, r0
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	798a      	ldrb	r2, [r1, #6]
 8000fc2:	790e      	ldrb	r6, [r1, #4]
 8000fc4:	794c      	ldrb	r4, [r1, #5]
 8000fc6:	ab03      	add	r3, sp, #12
 8000fc8:	709a      	strb	r2, [r3, #2]
 8000fca:	aa02      	add	r2, sp, #8
 8000fcc:	705e      	strb	r6, [r3, #1]
 8000fce:	7014      	strb	r4, [r2, #0]
 8000fd0:	701c      	strb	r4, [r3, #0]
 8000fd2:	9200      	str	r2, [sp, #0]
 8000fd4:	694a      	ldr	r2, [r1, #20]
 8000fd6:	0029      	movs	r1, r5
 8000fd8:	f7ff ffd0 	bl	8000f7c <acc_service_send_data>
 8000fdc:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

08000fde <envelope_send_data>:
 8000fde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe0:	0005      	movs	r5, r0
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	0010      	movs	r0, r2
 8000fe6:	79ca      	ldrb	r2, [r1, #7]
 8000fe8:	794c      	ldrb	r4, [r1, #5]
 8000fea:	ab03      	add	r3, sp, #12
 8000fec:	790e      	ldrb	r6, [r1, #4]
 8000fee:	798f      	ldrb	r7, [r1, #6]
 8000ff0:	70da      	strb	r2, [r3, #3]
 8000ff2:	aa02      	add	r2, sp, #8
 8000ff4:	7014      	strb	r4, [r2, #0]
 8000ff6:	701f      	strb	r7, [r3, #0]
 8000ff8:	705c      	strb	r4, [r3, #1]
 8000ffa:	709e      	strb	r6, [r3, #2]
 8000ffc:	9200      	str	r2, [sp, #0]
 8000ffe:	694a      	ldr	r2, [r1, #20]
 8001000:	0029      	movs	r1, r5
 8001002:	f7ff ffbb 	bl	8000f7c <acc_service_send_data>
 8001006:	b005      	add	sp, #20
 8001008:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800100a <abs_q3_12_complex>:
 800100a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100c:	0004      	movs	r4, r0
 800100e:	000e      	movs	r6, r1
 8001010:	0895      	lsrs	r5, r2, #2
 8001012:	00af      	lsls	r7, r5, #2
 8001014:	19c7      	adds	r7, r0, r7
 8001016:	42bc      	cmp	r4, r7
 8001018:	d101      	bne.n	800101e <abs_q3_12_complex+0x14>
 800101a:	0068      	lsls	r0, r5, #1
 800101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800101e:	8860      	ldrh	r0, [r4, #2]
 8001020:	8823      	ldrh	r3, [r4, #0]
 8001022:	0400      	lsls	r0, r0, #16
 8001024:	4318      	orrs	r0, r3
 8001026:	f009 fe39 	bl	800ac9c <acc_alg_basic_math_q3_12_complex_scalar_abs>
 800102a:	3404      	adds	r4, #4
 800102c:	8030      	strh	r0, [r6, #0]
 800102e:	3602      	adds	r6, #2
 8001030:	e7f1      	b.n	8001016 <abs_q3_12_complex+0xc>

08001032 <iq_mix_q3_12_complex>:
 8001032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001034:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8001036:	b085      	sub	sp, #20
 8001038:	6833      	ldr	r3, [r6, #0]
 800103a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001040:	0004      	movs	r4, r0
 8001042:	681f      	ldr	r7, [r3, #0]
 8001044:	1c38      	adds	r0, r7, #0
 8001046:	f00b fbb7 	bl	800c7b8 <__aeabi_fmul>
 800104a:	f009 fd85 	bl	800ab58 <accumulator_mod.lto_priv.638>
 800104e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001050:	0005      	movs	r5, r0
 8001052:	1c38      	adds	r0, r7, #0
 8001054:	f00b fbb0 	bl	800c7b8 <__aeabi_fmul>
 8001058:	f009 fd7e 	bl	800ab58 <accumulator_mod.lto_priv.638>
 800105c:	9b00      	ldr	r3, [sp, #0]
 800105e:	6924      	ldr	r4, [r4, #16]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	191b      	adds	r3, r3, r4
 8001066:	9002      	str	r0, [sp, #8]
 8001068:	9303      	str	r3, [sp, #12]
 800106a:	9b03      	ldr	r3, [sp, #12]
 800106c:	429c      	cmp	r4, r3
 800106e:	d105      	bne.n	800107c <iq_mix_q3_12_complex+0x4a>
 8001070:	2303      	movs	r3, #3
 8001072:	9a00      	ldr	r2, [sp, #0]
 8001074:	439a      	bics	r2, r3
 8001076:	6032      	str	r2, [r6, #0]
 8001078:	b005      	add	sp, #20
 800107a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	18e8      	adds	r0, r5, r3
 8001082:	f009 fdf5 	bl	800ac70 <acc_alg_basic_math_q3_12_sin>
 8001086:	0007      	movs	r7, r0
 8001088:	0028      	movs	r0, r5
 800108a:	f009 fdf1 	bl	800ac70 <acc_alg_basic_math_q3_12_sin>
 800108e:	2200      	movs	r2, #0
 8001090:	5ea3      	ldrsh	r3, [r4, r2]
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	9a01      	ldr	r2, [sp, #4]
 8001096:	2302      	movs	r3, #2
 8001098:	5ee1      	ldrsh	r1, [r4, r3]
 800109a:	437a      	muls	r2, r7
 800109c:	17d3      	asrs	r3, r2, #31
 800109e:	051b      	lsls	r3, r3, #20
 80010a0:	0d1b      	lsrs	r3, r3, #20
 80010a2:	189b      	adds	r3, r3, r2
 80010a4:	0002      	movs	r2, r0
 80010a6:	434a      	muls	r2, r1
 80010a8:	4694      	mov	ip, r2
 80010aa:	4379      	muls	r1, r7
 80010ac:	17cf      	asrs	r7, r1, #31
 80010ae:	053f      	lsls	r7, r7, #20
 80010b0:	0d3f      	lsrs	r7, r7, #20
 80010b2:	187f      	adds	r7, r7, r1
 80010b4:	9901      	ldr	r1, [sp, #4]
 80010b6:	17d2      	asrs	r2, r2, #31
 80010b8:	4341      	muls	r1, r0
 80010ba:	0512      	lsls	r2, r2, #20
 80010bc:	17c8      	asrs	r0, r1, #31
 80010be:	0d12      	lsrs	r2, r2, #20
 80010c0:	0500      	lsls	r0, r0, #20
 80010c2:	4462      	add	r2, ip
 80010c4:	0d00      	lsrs	r0, r0, #20
 80010c6:	131b      	asrs	r3, r3, #12
 80010c8:	1312      	asrs	r2, r2, #12
 80010ca:	1840      	adds	r0, r0, r1
 80010cc:	1a9a      	subs	r2, r3, r2
 80010ce:	133f      	asrs	r7, r7, #12
 80010d0:	1300      	asrs	r0, r0, #12
 80010d2:	9b02      	ldr	r3, [sp, #8]
 80010d4:	183f      	adds	r7, r7, r0
 80010d6:	8022      	strh	r2, [r4, #0]
 80010d8:	8067      	strh	r7, [r4, #2]
 80010da:	18ed      	adds	r5, r5, r3
 80010dc:	3404      	adds	r4, #4
 80010de:	e7c4      	b.n	800106a <iq_mix_q3_12_complex+0x38>

080010e0 <iq_mix_q3_12>:
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80010e4:	b085      	sub	sp, #20
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	0005      	movs	r5, r0
 80010ea:	085b      	lsrs	r3, r3, #1
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80010f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80010f2:	681c      	ldr	r4, [r3, #0]
 80010f4:	1c20      	adds	r0, r4, #0
 80010f6:	f00b fb5f 	bl	800c7b8 <__aeabi_fmul>
 80010fa:	f009 fd2d 	bl	800ab58 <accumulator_mod.lto_priv.638>
 80010fe:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8001100:	0006      	movs	r6, r0
 8001102:	1c20      	adds	r0, r4, #0
 8001104:	f00b fb58 	bl	800c7b8 <__aeabi_fmul>
 8001108:	f009 fd26 	bl	800ab58 <accumulator_mod.lto_priv.638>
 800110c:	9b00      	ldr	r3, [sp, #0]
 800110e:	692c      	ldr	r4, [r5, #16]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	191b      	adds	r3, r3, r4
 8001114:	696d      	ldr	r5, [r5, #20]
 8001116:	9002      	str	r0, [sp, #8]
 8001118:	9303      	str	r3, [sp, #12]
 800111a:	9b03      	ldr	r3, [sp, #12]
 800111c:	429c      	cmp	r4, r3
 800111e:	d104      	bne.n	800112a <iq_mix_q3_12+0x4a>
 8001120:	9b00      	ldr	r3, [sp, #0]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	b005      	add	sp, #20
 8001128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800112a:	2200      	movs	r2, #0
 800112c:	5ea3      	ldrsh	r3, [r4, r2]
 800112e:	3402      	adds	r4, #2
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	18f0      	adds	r0, r6, r3
 8001138:	f009 fd9a 	bl	800ac70 <acc_alg_basic_math_q3_12_sin>
 800113c:	9b01      	ldr	r3, [sp, #4]
 800113e:	4343      	muls	r3, r0
 8001140:	17d8      	asrs	r0, r3, #31
 8001142:	0500      	lsls	r0, r0, #20
 8001144:	0d00      	lsrs	r0, r0, #20
 8001146:	18c0      	adds	r0, r0, r3
 8001148:	1300      	asrs	r0, r0, #12
 800114a:	8028      	strh	r0, [r5, #0]
 800114c:	0030      	movs	r0, r6
 800114e:	f009 fd8f 	bl	800ac70 <acc_alg_basic_math_q3_12_sin>
 8001152:	9b01      	ldr	r3, [sp, #4]
 8001154:	4343      	muls	r3, r0
 8001156:	17d8      	asrs	r0, r3, #31
 8001158:	0500      	lsls	r0, r0, #20
 800115a:	0d00      	lsrs	r0, r0, #20
 800115c:	18c0      	adds	r0, r0, r3
 800115e:	9b02      	ldr	r3, [sp, #8]
 8001160:	1300      	asrs	r0, r0, #12
 8001162:	8068      	strh	r0, [r5, #2]
 8001164:	18f6      	adds	r6, r6, r3
 8001166:	3504      	adds	r5, #4
 8001168:	e7d7      	b.n	800111a <iq_mix_q3_12+0x3a>

0800116a <filter_q3_12_complex.lto_priv.273>:
 800116a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800116c:	2200      	movs	r2, #0
 800116e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001170:	6906      	ldr	r6, [r0, #16]
 8001172:	681d      	ldr	r5, [r3, #0]
 8001174:	ab03      	add	r3, sp, #12
 8001176:	801a      	strh	r2, [r3, #0]
 8001178:	805a      	strh	r2, [r3, #2]
 800117a:	9b03      	ldr	r3, [sp, #12]
 800117c:	08ad      	lsrs	r5, r5, #2
 800117e:	002a      	movs	r2, r5
 8001180:	0031      	movs	r1, r6
 8001182:	3040      	adds	r0, #64	; 0x40
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	0004      	movs	r4, r0
 800118a:	f009 fb87 	bl	800a89c <biquad_q3_12_complex_direct_form_1.lto_priv.639>
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <filter_q3_12_complex.lto_priv.273+0x4e>)
 8001190:	0020      	movs	r0, r4
 8001192:	18eb      	adds	r3, r5, r3
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	18f3      	adds	r3, r6, r3
 8001198:	2202      	movs	r2, #2
 800119a:	5e99      	ldrsh	r1, [r3, r2]
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	aa02      	add	r2, sp, #8
 80011a0:	8013      	strh	r3, [r2, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	8051      	strh	r1, [r2, #2]
 80011a6:	9a02      	ldr	r2, [sp, #8]
 80011a8:	0031      	movs	r1, r6
 80011aa:	9200      	str	r2, [sp, #0]
 80011ac:	425b      	negs	r3, r3
 80011ae:	002a      	movs	r2, r5
 80011b0:	f009 fb74 	bl	800a89c <biquad_q3_12_complex_direct_form_1.lto_priv.639>
 80011b4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	3fffffff 	.word	0x3fffffff

080011bc <centering_q12_4>:
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011be:	0849      	lsrs	r1, r1, #1
 80011c0:	0852      	lsrs	r2, r2, #1
 80011c2:	b085      	sub	sp, #20
 80011c4:	b28b      	uxth	r3, r1
 80011c6:	b295      	uxth	r5, r2
 80011c8:	9002      	str	r0, [sp, #8]
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	2d00      	cmp	r5, #0
 80011ce:	d100      	bne.n	80011d2 <centering_q12_4+0x16>
 80011d0:	001d      	movs	r5, r3
 80011d2:	002f      	movs	r7, r5
 80011d4:	2600      	movs	r6, #0
 80011d6:	b28b      	uxth	r3, r1
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	9303      	str	r3, [sp, #12]
 80011dc:	9b01      	ldr	r3, [sp, #4]
 80011de:	42b3      	cmp	r3, r6
 80011e0:	d801      	bhi.n	80011e6 <centering_q12_4+0x2a>
 80011e2:	b005      	add	sp, #20
 80011e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e6:	9a03      	ldr	r2, [sp, #12]
 80011e8:	19f3      	adds	r3, r6, r7
 80011ea:	4293      	cmp	r3, r2
 80011ec:	dd00      	ble.n	80011f0 <centering_q12_4+0x34>
 80011ee:	9f00      	ldr	r7, [sp, #0]
 80011f0:	2f00      	cmp	r7, #0
 80011f2:	d01f      	beq.n	8001234 <centering_q12_4+0x78>
 80011f4:	2200      	movs	r2, #0
 80011f6:	0010      	movs	r0, r2
 80011f8:	9b02      	ldr	r3, [sp, #8]
 80011fa:	0074      	lsls	r4, r6, #1
 80011fc:	191c      	adds	r4, r3, r4
 80011fe:	42ba      	cmp	r2, r7
 8001200:	d31f      	bcc.n	8001242 <centering_q12_4+0x86>
 8001202:	2301      	movs	r3, #1
 8001204:	2800      	cmp	r0, #0
 8001206:	da00      	bge.n	800120a <centering_q12_4+0x4e>
 8001208:	3b02      	subs	r3, #2
 800120a:	087a      	lsrs	r2, r7, #1
 800120c:	b292      	uxth	r2, r2
 800120e:	4353      	muls	r3, r2
 8001210:	0039      	movs	r1, r7
 8001212:	1818      	adds	r0, r3, r0
 8001214:	f00b fe8c 	bl	800cf30 <__divsi3>
 8001218:	007b      	lsls	r3, r7, #1
 800121a:	b202      	sxth	r2, r0
 800121c:	18e3      	adds	r3, r4, r3
 800121e:	2a00      	cmp	r2, #0
 8001220:	dd19      	ble.n	8001256 <centering_q12_4+0x9a>
 8001222:	2100      	movs	r1, #0
 8001224:	b280      	uxth	r0, r0
 8001226:	8822      	ldrh	r2, [r4, #0]
 8001228:	4282      	cmp	r2, r0
 800122a:	d211      	bcs.n	8001250 <centering_q12_4+0x94>
 800122c:	8021      	strh	r1, [r4, #0]
 800122e:	3402      	adds	r4, #2
 8001230:	42a3      	cmp	r3, r4
 8001232:	d1f8      	bne.n	8001226 <centering_q12_4+0x6a>
 8001234:	9b00      	ldr	r3, [sp, #0]
 8001236:	1976      	adds	r6, r6, r5
 8001238:	1b5b      	subs	r3, r3, r5
 800123a:	b29b      	uxth	r3, r3
 800123c:	b2b6      	uxth	r6, r6
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	e7cc      	b.n	80011dc <centering_q12_4+0x20>
 8001242:	0053      	lsls	r3, r2, #1
 8001244:	5ae3      	ldrh	r3, [r4, r3]
 8001246:	490b      	ldr	r1, [pc, #44]	; (8001274 <centering_q12_4+0xb8>)
 8001248:	3201      	adds	r2, #1
 800124a:	185b      	adds	r3, r3, r1
 800124c:	18c0      	adds	r0, r0, r3
 800124e:	e7d6      	b.n	80011fe <centering_q12_4+0x42>
 8001250:	1a12      	subs	r2, r2, r0
 8001252:	8022      	strh	r2, [r4, #0]
 8001254:	e7eb      	b.n	800122e <centering_q12_4+0x72>
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <centering_q12_4+0xbc>)
 8001258:	1852      	adds	r2, r2, r1
 800125a:	8821      	ldrh	r1, [r4, #0]
 800125c:	4291      	cmp	r1, r2
 800125e:	dd06      	ble.n	800126e <centering_q12_4+0xb2>
 8001260:	2101      	movs	r1, #1
 8001262:	4249      	negs	r1, r1
 8001264:	8021      	strh	r1, [r4, #0]
 8001266:	3402      	adds	r4, #2
 8001268:	42a3      	cmp	r3, r4
 800126a:	d1f6      	bne.n	800125a <centering_q12_4+0x9e>
 800126c:	e7e2      	b.n	8001234 <centering_q12_4+0x78>
 800126e:	1a09      	subs	r1, r1, r0
 8001270:	e7f8      	b.n	8001264 <centering_q12_4+0xa8>
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	ffff8000 	.word	0xffff8000
 8001278:	0000ffff 	.word	0x0000ffff

0800127c <acc_alg_cca_calculate>:
 800127c:	b570      	push	{r4, r5, r6, lr}
 800127e:	0003      	movs	r3, r0
 8001280:	000c      	movs	r4, r1
 8001282:	2201      	movs	r2, #1
 8001284:	2000      	movs	r0, #0
 8001286:	42a2      	cmp	r2, r4
 8001288:	d30f      	bcc.n	80012aa <acc_alg_cca_calculate+0x2e>
 800128a:	f00c f9ab 	bl	800d5e4 <__aeabi_i2f>
 800128e:	1c05      	adds	r5, r0, #0
 8001290:	1e60      	subs	r0, r4, #1
 8001292:	f00c f9a7 	bl	800d5e4 <__aeabi_i2f>
 8001296:	1c01      	adds	r1, r0, #0
 8001298:	1c28      	adds	r0, r5, #0
 800129a:	f00b f97b 	bl	800c594 <__aeabi_fdiv>
 800129e:	f011 facb 	bl	8012838 <log10f>
 80012a2:	4907      	ldr	r1, [pc, #28]	; (80012c0 <acc_alg_cca_calculate+0x44>)
 80012a4:	f00b fa88 	bl	800c7b8 <__aeabi_fmul>
 80012a8:	bd70      	pop	{r4, r5, r6, pc}
 80012aa:	881d      	ldrh	r5, [r3, #0]
 80012ac:	8859      	ldrh	r1, [r3, #2]
 80012ae:	3201      	adds	r2, #1
 80012b0:	1b49      	subs	r1, r1, r5
 80012b2:	17cd      	asrs	r5, r1, #31
 80012b4:	1949      	adds	r1, r1, r5
 80012b6:	4069      	eors	r1, r5
 80012b8:	1840      	adds	r0, r0, r1
 80012ba:	b292      	uxth	r2, r2
 80012bc:	3302      	adds	r3, #2
 80012be:	e7e2      	b.n	8001286 <acc_alg_cca_calculate+0xa>
 80012c0:	41a00000 	.word	0x41a00000

080012c4 <acc_sensor_protocol_r2_check_asic_id>:
 80012c4:	b530      	push	{r4, r5, lr}
 80012c6:	250e      	movs	r5, #14
 80012c8:	2400      	movs	r4, #0
 80012ca:	b085      	sub	sp, #20
 80012cc:	446d      	add	r5, sp
 80012ce:	002a      	movs	r2, r5
 80012d0:	0021      	movs	r1, r4
 80012d2:	802c      	strh	r4, [r5, #0]
 80012d4:	f009 fd14 	bl	800ad00 <internal_reg_read.lto_priv.640>
 80012d8:	882a      	ldrh	r2, [r5, #0]
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <acc_sensor_protocol_r2_check_asic_id+0x34>)
 80012dc:	2001      	movs	r0, #1
 80012de:	429a      	cmp	r2, r3
 80012e0:	d007      	beq.n	80012f2 <acc_sensor_protocol_r2_check_asic_id+0x2e>
 80012e2:	9200      	str	r2, [sp, #0]
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <acc_sensor_protocol_r2_check_asic_id+0x38>)
 80012e6:	0020      	movs	r0, r4
 80012e8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80012ea:	4905      	ldr	r1, [pc, #20]	; (8001300 <acc_sensor_protocol_r2_check_asic_id+0x3c>)
 80012ec:	4a05      	ldr	r2, [pc, #20]	; (8001304 <acc_sensor_protocol_r2_check_asic_id+0x40>)
 80012ee:	47a8      	blx	r5
 80012f0:	0020      	movs	r0, r4
 80012f2:	b005      	add	sp, #20
 80012f4:	bd30      	pop	{r4, r5, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	00001112 	.word	0x00001112
 80012fc:	200003e8 	.word	0x200003e8
 8001300:	0801af61 	.word	0x0801af61
 8001304:	0801af33 	.word	0x0801af33

08001308 <process_data.lto_priv.287>:
 8001308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800130a:	6944      	ldr	r4, [r0, #20]
 800130c:	001e      	movs	r6, r3
 800130e:	0023      	movs	r3, r4
 8001310:	33b8      	adds	r3, #184	; 0xb8
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	0017      	movs	r7, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d027      	beq.n	800136c <process_data.lto_priv.287+0x64>
 800131c:	0022      	movs	r2, r4
 800131e:	32b4      	adds	r2, #180	; 0xb4
 8001320:	9201      	str	r2, [sp, #4]
 8001322:	8815      	ldrh	r5, [r2, #0]
 8001324:	680a      	ldr	r2, [r1, #0]
 8001326:	006d      	lsls	r5, r5, #1
 8001328:	1955      	adds	r5, r2, r5
 800132a:	002a      	movs	r2, r5
 800132c:	6801      	ldr	r1, [r0, #0]
 800132e:	2001      	movs	r0, #1
 8001330:	f00a fd36 	bl	800bda0 <acc_probes_execute_uint16>
 8001334:	9b00      	ldr	r3, [sp, #0]
 8001336:	0028      	movs	r0, r5
 8001338:	8819      	ldrh	r1, [r3, #0]
 800133a:	f7ff ff9f 	bl	800127c <acc_alg_cca_calculate>
 800133e:	490c      	ldr	r1, [pc, #48]	; (8001370 <process_data.lto_priv.287+0x68>)
 8001340:	6070      	str	r0, [r6, #4]
 8001342:	2501      	movs	r5, #1
 8001344:	f00b ff44 	bl	800d1d0 <__aeabi_fcmpgt>
 8001348:	2800      	cmp	r0, #0
 800134a:	d100      	bne.n	800134e <process_data.lto_priv.287+0x46>
 800134c:	1c05      	adds	r5, r0, #0
 800134e:	2300      	movs	r3, #0
 8001350:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001352:	7035      	strb	r5, [r6, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d103      	bne.n	8001360 <process_data.lto_priv.287+0x58>
 8001358:	34ba      	adds	r4, #186	; 0xba
 800135a:	7822      	ldrb	r2, [r4, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4053      	eors	r3, r2
 8001360:	2201      	movs	r2, #1
 8001362:	4013      	ands	r3, r2
 8001364:	7233      	strb	r3, [r6, #8]
 8001366:	9b01      	ldr	r3, [sp, #4]
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	2001      	movs	r0, #1
 800136e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001370:	42640000 	.word	0x42640000

08001374 <process_data.lto_priv.286>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	6944      	ldr	r4, [r0, #20]
 8001378:	b085      	sub	sp, #20
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	0023      	movs	r3, r4
 800137e:	33ce      	adds	r3, #206	; 0xce
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	0007      	movs	r7, r0
 8001386:	000d      	movs	r5, r1
 8001388:	0016      	movs	r6, r2
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d039      	beq.n	8001404 <process_data.lto_priv.286+0x90>
 8001390:	0023      	movs	r3, r4
 8001392:	33c8      	adds	r3, #200	; 0xc8
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	b280      	uxth	r0, r0
 8001398:	0043      	lsls	r3, r0, #1
 800139a:	9303      	str	r3, [sp, #12]
 800139c:	0023      	movs	r3, r4
 800139e:	33cc      	adds	r3, #204	; 0xcc
 80013a0:	8819      	ldrh	r1, [r3, #0]
 80013a2:	207c      	movs	r0, #124	; 0x7c
 80013a4:	f00b fd3a 	bl	800ce1c <__udivsi3>
 80013a8:	9b03      	ldr	r3, [sp, #12]
 80013aa:	682d      	ldr	r5, [r5, #0]
 80013ac:	4358      	muls	r0, r3
 80013ae:	0023      	movs	r3, r4
 80013b0:	33c4      	adds	r3, #196	; 0xc4
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	18c0      	adds	r0, r0, r3
 80013b8:	182d      	adds	r5, r5, r0
 80013ba:	002a      	movs	r2, r5
 80013bc:	9b01      	ldr	r3, [sp, #4]
 80013be:	2001      	movs	r0, #1
 80013c0:	f00a fcee 	bl	800bda0 <acc_probes_execute_uint16>
 80013c4:	9b02      	ldr	r3, [sp, #8]
 80013c6:	0028      	movs	r0, r5
 80013c8:	881f      	ldrh	r7, [r3, #0]
 80013ca:	2501      	movs	r5, #1
 80013cc:	0039      	movs	r1, r7
 80013ce:	f7ff ff55 	bl	800127c <acc_alg_cca_calculate>
 80013d2:	9b00      	ldr	r3, [sp, #0]
 80013d4:	490d      	ldr	r1, [pc, #52]	; (800140c <process_data.lto_priv.286+0x98>)
 80013d6:	6058      	str	r0, [r3, #4]
 80013d8:	f00b fefa 	bl	800d1d0 <__aeabi_fcmpgt>
 80013dc:	2800      	cmp	r0, #0
 80013de:	d100      	bne.n	80013e2 <process_data.lto_priv.286+0x6e>
 80013e0:	1c05      	adds	r5, r0, #0
 80013e2:	9b00      	ldr	r3, [sp, #0]
 80013e4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80013e6:	701d      	strb	r5, [r3, #0]
 80013e8:	2300      	movs	r3, #0
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d103      	bne.n	80013f6 <process_data.lto_priv.286+0x82>
 80013ee:	34c0      	adds	r4, #192	; 0xc0
 80013f0:	7822      	ldrb	r2, [r4, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4053      	eors	r3, r2
 80013f6:	2201      	movs	r2, #1
 80013f8:	4013      	ands	r3, r2
 80013fa:	9a00      	ldr	r2, [sp, #0]
 80013fc:	7213      	strb	r3, [r2, #8]
 80013fe:	6833      	ldr	r3, [r6, #0]
 8001400:	1bdf      	subs	r7, r3, r7
 8001402:	6037      	str	r7, [r6, #0]
 8001404:	2001      	movs	r0, #1
 8001406:	b005      	add	sp, #20
 8001408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	42640000 	.word	0x42640000

08001410 <acc_sensor_protocol_r2_transfer_data>:
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	0016      	movs	r6, r2
 8001414:	0005      	movs	r5, r0
 8001416:	f007 febb 	bl	8009190 <internal_buffer_processed_read.constprop.30>
 800141a:	0004      	movs	r4, r0
 800141c:	0033      	movs	r3, r6
 800141e:	0002      	movs	r2, r0
 8001420:	0029      	movs	r1, r5
 8001422:	2000      	movs	r0, #0
 8001424:	f00a fcbc 	bl	800bda0 <acc_probes_execute_uint16>
 8001428:	0020      	movs	r0, r4
 800142a:	bd70      	pop	{r4, r5, r6, pc}

0800142c <acc_sensor_protocol_r2_wait_for_sync_start>:
 800142c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800142e:	ae03      	add	r6, sp, #12
 8001430:	0032      	movs	r2, r6
 8001432:	0005      	movs	r5, r0
 8001434:	f009 fe86 	bl	800b144 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8001438:	1e04      	subs	r4, r0, #0
 800143a:	d108      	bne.n	800144e <acc_sensor_protocol_r2_wait_for_sync_start+0x22>
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <acc_sensor_protocol_r2_wait_for_sync_start+0x40>)
 8001440:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8001442:	490b      	ldr	r1, [pc, #44]	; (8001470 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8001444:	002b      	movs	r3, r5
 8001446:	47b0      	blx	r6
 8001448:	0020      	movs	r0, r4
 800144a:	b004      	add	sp, #16
 800144c:	bd70      	pop	{r4, r5, r6, pc}
 800144e:	8873      	ldrh	r3, [r6, #2]
 8001450:	2b06      	cmp	r3, #6
 8001452:	d0f9      	beq.n	8001448 <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 800145a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800145c:	4904      	ldr	r1, [pc, #16]	; (8001470 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 800145e:	002b      	movs	r3, r5
 8001460:	2000      	movs	r0, #0
 8001462:	47a0      	blx	r4
 8001464:	2400      	movs	r4, #0
 8001466:	e7ef      	b.n	8001448 <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 8001468:	200003e8 	.word	0x200003e8
 800146c:	0801af71 	.word	0x0801af71
 8001470:	0801af61 	.word	0x0801af61
 8001474:	0801afa3 	.word	0x0801afa3

08001478 <acc_sensor_protocol_r2_wait_for_radar_data>:
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	ac03      	add	r4, sp, #12
 800147e:	0017      	movs	r7, r2
 8001480:	0022      	movs	r2, r4
 8001482:	0006      	movs	r6, r0
 8001484:	f009 fe5e 	bl	800b144 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8001488:	1e05      	subs	r5, r0, #0
 800148a:	d032      	beq.n	80014f2 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 800148c:	7822      	ldrb	r2, [r4, #0]
 800148e:	8863      	ldrh	r3, [r4, #2]
 8001490:	2a06      	cmp	r2, #6
 8001492:	d125      	bne.n	80014e0 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 8001494:	051a      	lsls	r2, r3, #20
 8001496:	d523      	bpl.n	80014e0 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	4013      	ands	r3, r2
 800149e:	d12b      	bne.n	80014f8 <acc_sensor_protocol_r2_wait_for_radar_data+0x80>
 80014a0:	2f00      	cmp	r7, #0
 80014a2:	d000      	beq.n	80014a6 <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 80014a4:	703b      	strb	r3, [r7, #0]
 80014a6:	8863      	ldrh	r3, [r4, #2]
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	d50a      	bpl.n	80014c2 <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 80014ae:	001a      	movs	r2, r3
 80014b0:	3230      	adds	r2, #48	; 0x30
 80014b2:	7812      	ldrb	r2, [r2, #0]
 80014b4:	2a03      	cmp	r2, #3
 80014b6:	d904      	bls.n	80014c2 <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 80014b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ba:	4a13      	ldr	r2, [pc, #76]	; (8001508 <acc_sensor_protocol_r2_wait_for_radar_data+0x90>)
 80014bc:	4913      	ldr	r1, [pc, #76]	; (800150c <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 80014be:	2004      	movs	r0, #4
 80014c0:	4798      	blx	r3
 80014c2:	8863      	ldrh	r3, [r4, #2]
 80014c4:	059b      	lsls	r3, r3, #22
 80014c6:	d514      	bpl.n	80014f2 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 80014ca:	001a      	movs	r2, r3
 80014cc:	3230      	adds	r2, #48	; 0x30
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	2a03      	cmp	r2, #3
 80014d2:	d90e      	bls.n	80014f2 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 80014da:	2004      	movs	r0, #4
 80014dc:	4798      	blx	r3
 80014de:	e008      	b.n	80014f2 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 80014e4:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 80014e6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80014e8:	4908      	ldr	r1, [pc, #32]	; (800150c <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 80014ea:	0033      	movs	r3, r6
 80014ec:	2000      	movs	r0, #0
 80014ee:	47a0      	blx	r4
 80014f0:	2500      	movs	r5, #0
 80014f2:	0028      	movs	r0, r5
 80014f4:	b005      	add	sp, #20
 80014f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f8:	0031      	movs	r1, r6
 80014fa:	200f      	movs	r0, #15
 80014fc:	f00a fc44 	bl	800bd88 <acc_probes_execute_primitive_probe>
 8001500:	002b      	movs	r3, r5
 8001502:	e7cd      	b.n	80014a0 <acc_sensor_protocol_r2_wait_for_radar_data+0x28>
 8001504:	200003e8 	.word	0x200003e8
 8001508:	0801b00d 	.word	0x0801b00d
 800150c:	0801af61 	.word	0x0801af61
 8001510:	0801b026 	.word	0x0801b026
 8001514:	0801afdd 	.word	0x0801afdd

08001518 <acc_sensor_protocol_r2_ack_event>:
 8001518:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800151a:	466b      	mov	r3, sp
 800151c:	1d9c      	adds	r4, r3, #6
 800151e:	2300      	movs	r3, #0
 8001520:	0022      	movs	r2, r4
 8001522:	2138      	movs	r1, #56	; 0x38
 8001524:	0005      	movs	r5, r0
 8001526:	8023      	strh	r3, [r4, #0]
 8001528:	f009 fbea 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800152c:	8824      	ldrh	r4, [r4, #0]
 800152e:	2001      	movs	r0, #1
 8001530:	2c00      	cmp	r4, #0
 8001532:	d10a      	bne.n	800154a <acc_sensor_protocol_r2_ack_event+0x32>
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <acc_sensor_protocol_r2_ack_event+0x34>)
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <acc_sensor_protocol_r2_ack_event+0x38>)
 8001538:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800153a:	4906      	ldr	r1, [pc, #24]	; (8001554 <acc_sensor_protocol_r2_ack_event+0x3c>)
 800153c:	002b      	movs	r3, r5
 800153e:	0020      	movs	r0, r4
 8001540:	47b0      	blx	r6
 8001542:	0028      	movs	r0, r5
 8001544:	f009 fc03 	bl	800ad4e <acc_sensor_diagnostics_r2_sensor_status>
 8001548:	0020      	movs	r0, r4
 800154a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800154c:	200003e8 	.word	0x200003e8
 8001550:	0801b03e 	.word	0x0801b03e
 8001554:	0801af61 	.word	0x0801af61

08001558 <acc_sensor_manager_prepare_radar_engine>:
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	1d07      	adds	r7, r0, #4
 800155c:	b095      	sub	sp, #84	; 0x54
 800155e:	9201      	str	r2, [sp, #4]
 8001560:	0005      	movs	r5, r0
 8001562:	000c      	movs	r4, r1
 8001564:	2234      	movs	r2, #52	; 0x34
 8001566:	2100      	movs	r1, #0
 8001568:	0038      	movs	r0, r7
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	f010 fe7c 	bl	8012268 <memset>
 8001570:	4b52      	ldr	r3, [pc, #328]	; (80016bc <acc_sensor_manager_prepare_radar_engine+0x164>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <acc_sensor_manager_prepare_radar_engine+0x28>
 8001578:	681e      	ldr	r6, [r3, #0]
 800157a:	2e00      	cmp	r6, #0
 800157c:	d000      	beq.n	8001580 <acc_sensor_manager_prepare_radar_engine+0x28>
 800157e:	e095      	b.n	80016ac <acc_sensor_manager_prepare_radar_engine+0x154>
 8001580:	0020      	movs	r0, r4
 8001582:	f7ff f9f5 	bl	8000970 <acc_base_configuration_sensor_get>
 8001586:	0007      	movs	r7, r0
 8001588:	0020      	movs	r0, r4
 800158a:	f7ff f969 	bl	8000860 <acc_base_configuration_wg_duration_get>
 800158e:	ae03      	add	r6, sp, #12
 8001590:	8030      	strh	r0, [r6, #0]
 8001592:	0020      	movs	r0, r4
 8001594:	f7ff f979 	bl	800088a <acc_base_configuration_integrator_get>
 8001598:	8070      	strh	r0, [r6, #2]
 800159a:	0020      	movs	r0, r4
 800159c:	f7ff f900 	bl	80007a0 <configuration_is_valid>
 80015a0:	2300      	movs	r3, #0
 80015a2:	4298      	cmp	r0, r3
 80015a4:	d001      	beq.n	80015aa <acc_sensor_manager_prepare_radar_engine+0x52>
 80015a6:	1da3      	adds	r3, r4, #6
 80015a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015aa:	0020      	movs	r0, r4
 80015ac:	80b3      	strh	r3, [r6, #4]
 80015ae:	f7ff f9ba 	bl	8000926 <acc_base_configuration_decrease_tx_emission_get>
 80015b2:	0039      	movs	r1, r7
 80015b4:	002f      	movs	r7, r5
 80015b6:	80f0      	strh	r0, [r6, #6]
 80015b8:	2304      	movs	r3, #4
 80015ba:	0032      	movs	r2, r6
 80015bc:	2012      	movs	r0, #18
 80015be:	3718      	adds	r7, #24
 80015c0:	f00a fbee 	bl	800bda0 <acc_probes_execute_uint16>
 80015c4:	2220      	movs	r2, #32
 80015c6:	2100      	movs	r1, #0
 80015c8:	0038      	movs	r0, r7
 80015ca:	f010 fe4d 	bl	8012268 <memset>
 80015ce:	0021      	movs	r1, r4
 80015d0:	0038      	movs	r0, r7
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	4798      	blx	r3
 80015d6:	1e06      	subs	r6, r0, #0
 80015d8:	d016      	beq.n	8001608 <acc_sensor_manager_prepare_radar_engine+0xb0>
 80015da:	2220      	movs	r2, #32
 80015dc:	2100      	movs	r1, #0
 80015de:	a80c      	add	r0, sp, #48	; 0x30
 80015e0:	f010 fe42 	bl	8012268 <memset>
 80015e4:	221c      	movs	r2, #28
 80015e6:	2100      	movs	r1, #0
 80015e8:	a805      	add	r0, sp, #20
 80015ea:	f010 fe3d 	bl	8012268 <memset>
 80015ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80015f0:	aa0c      	add	r2, sp, #48	; 0x30
 80015f2:	681e      	ldr	r6, [r3, #0]
 80015f4:	0021      	movs	r1, r4
 80015f6:	ab05      	add	r3, sp, #20
 80015f8:	0038      	movs	r0, r7
 80015fa:	47b0      	blx	r6
 80015fc:	1e06      	subs	r6, r0, #0
 80015fe:	d129      	bne.n	8001654 <acc_sensor_manager_prepare_radar_engine+0xfc>
 8001600:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001602:	0038      	movs	r0, r7
 8001604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001606:	4798      	blx	r3
 8001608:	0020      	movs	r0, r4
 800160a:	f7ff f99e 	bl	800094a <acc_base_configuration_power_save_mode_get>
 800160e:	2302      	movs	r3, #2
 8001610:	2800      	cmp	r0, #0
 8001612:	d003      	beq.n	800161c <acc_sensor_manager_prepare_radar_engine+0xc4>
 8001614:	2301      	movs	r3, #1
 8001616:	2804      	cmp	r0, #4
 8001618:	d000      	beq.n	800161c <acc_sensor_manager_prepare_radar_engine+0xc4>
 800161a:	2300      	movs	r3, #0
 800161c:	702b      	strb	r3, [r5, #0]
 800161e:	0020      	movs	r0, r4
 8001620:	f7ff f954 	bl	80008cc <acc_base_configuration_repetition_mode_get>
 8001624:	4243      	negs	r3, r0
 8001626:	4158      	adcs	r0, r3
 8001628:	7068      	strb	r0, [r5, #1]
 800162a:	0020      	movs	r0, r4
 800162c:	f7ff f8d2 	bl	80007d4 <acc_base_configuration_asynchronous_measurement_get>
 8001630:	70a8      	strb	r0, [r5, #2]
 8001632:	0020      	movs	r0, r4
 8001634:	f7ff f99c 	bl	8000970 <acc_base_configuration_sensor_get>
 8001638:	2205      	movs	r2, #5
 800163a:	ab0c      	add	r3, sp, #48	; 0x30
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	3202      	adds	r2, #2
 8001640:	900d      	str	r0, [sp, #52]	; 0x34
 8001642:	920e      	str	r2, [sp, #56]	; 0x38
 8001644:	0018      	movs	r0, r3
 8001646:	3215      	adds	r2, #21
 8001648:	9900      	ldr	r1, [sp, #0]
 800164a:	f009 ff23 	bl	800b494 <acc_probes_execute>
 800164e:	0030      	movs	r0, r6
 8001650:	b015      	add	sp, #84	; 0x54
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001654:	9b01      	ldr	r3, [sp, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <acc_sensor_manager_prepare_radar_engine+0x112>
 800165a:	001a      	movs	r2, r3
 800165c:	ab0c      	add	r3, sp, #48	; 0x30
 800165e:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001660:	c283      	stmia	r2!, {r0, r1, r7}
 8001662:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001664:	c283      	stmia	r2!, {r0, r1, r7}
 8001666:	cb03      	ldmia	r3!, {r0, r1}
 8001668:	c203      	stmia	r2!, {r0, r1}
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <acc_sensor_manager_prepare_radar_engine+0x122>
 8001670:	221c      	movs	r2, #28
 8001672:	a905      	add	r1, sp, #20
 8001674:	0018      	movs	r0, r3
 8001676:	f013 fa1b 	bl	8014ab0 <memcpy>
 800167a:	0020      	movs	r0, r4
 800167c:	f7ff f926 	bl	80008cc <acc_base_configuration_repetition_mode_get>
 8001680:	2801      	cmp	r0, #1
 8001682:	d010      	beq.n	80016a6 <acc_sensor_manager_prepare_radar_engine+0x14e>
 8001684:	0020      	movs	r0, r4
 8001686:	f7ff f90b 	bl	80008a0 <acc_base_configuration_update_rate_get>
 800168a:	1c01      	adds	r1, r0, #0
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <acc_sensor_manager_prepare_radar_engine+0x168>)
 800168e:	f00a ff81 	bl	800c594 <__aeabi_fdiv>
 8001692:	490b      	ldr	r1, [pc, #44]	; (80016c0 <acc_sensor_manager_prepare_radar_engine+0x168>)
 8001694:	f00a fde4 	bl	800c260 <__aeabi_fadd>
 8001698:	f00b fdce 	bl	800d238 <__aeabi_f2uiz>
 800169c:	2300      	movs	r3, #0
 800169e:	6068      	str	r0, [r5, #4]
 80016a0:	60eb      	str	r3, [r5, #12]
 80016a2:	816b      	strh	r3, [r5, #10]
 80016a4:	e7b0      	b.n	8001608 <acc_sensor_manager_prepare_radar_engine+0xb0>
 80016a6:	20fa      	movs	r0, #250	; 0xfa
 80016a8:	00c0      	lsls	r0, r0, #3
 80016aa:	e7f7      	b.n	800169c <acc_sensor_manager_prepare_radar_engine+0x144>
 80016ac:	9b00      	ldr	r3, [sp, #0]
 80016ae:	9a01      	ldr	r2, [sp, #4]
 80016b0:	0021      	movs	r1, r4
 80016b2:	0038      	movs	r0, r7
 80016b4:	47b0      	blx	r6
 80016b6:	0006      	movs	r6, r0
 80016b8:	e7a6      	b.n	8001608 <acc_sensor_manager_prepare_radar_engine+0xb0>
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	2000059c 	.word	0x2000059c
 80016c0:	44fa0000 	.word	0x44fa0000

080016c4 <acc_radar_engine_acquire_adc_data>:
 80016c4:	2300      	movs	r3, #0
 80016c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c8:	0014      	movs	r4, r2
 80016ca:	0005      	movs	r5, r0
 80016cc:	b08f      	sub	sp, #60	; 0x3c
 80016ce:	9101      	str	r1, [sp, #4]
 80016d0:	a908      	add	r1, sp, #32
 80016d2:	71cb      	strb	r3, [r1, #7]
 80016d4:	a908      	add	r1, sp, #32
 80016d6:	7093      	strb	r3, [r2, #2]
 80016d8:	70d3      	strb	r3, [r2, #3]
 80016da:	8013      	strh	r3, [r2, #0]
 80016dc:	7313      	strb	r3, [r2, #12]
 80016de:	7113      	strb	r3, [r2, #4]
 80016e0:	718b      	strb	r3, [r1, #6]
 80016e2:	4a3e      	ldr	r2, [pc, #248]	; (80017dc <acc_radar_engine_acquire_adc_data+0x118>)
 80016e4:	6801      	ldr	r1, [r0, #0]
 80016e6:	60a2      	str	r2, [r4, #8]
 80016e8:	9102      	str	r1, [sp, #8]
 80016ea:	7b81      	ldrb	r1, [r0, #14]
 80016ec:	9103      	str	r1, [sp, #12]
 80016ee:	7bc1      	ldrb	r1, [r0, #15]
 80016f0:	9105      	str	r1, [sp, #20]
 80016f2:	8981      	ldrh	r1, [r0, #12]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	9104      	str	r1, [sp, #16]
 80016f8:	6901      	ldr	r1, [r0, #16]
 80016fa:	9207      	str	r2, [sp, #28]
 80016fc:	9106      	str	r1, [sp, #24]
 80016fe:	466b      	mov	r3, sp
 8001700:	9a04      	ldr	r2, [sp, #16]
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d958      	bls.n	80017ba <acc_radar_engine_acquire_adc_data+0xf6>
 8001708:	9b03      	ldr	r3, [sp, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00c      	beq.n	8001728 <acc_radar_engine_acquire_adc_data+0x64>
 800170e:	ab08      	add	r3, sp, #32
 8001710:	1dde      	adds	r6, r3, #7
 8001712:	69ab      	ldr	r3, [r5, #24]
 8001714:	0032      	movs	r2, r6
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	9906      	ldr	r1, [sp, #24]
 800171a:	9802      	ldr	r0, [sp, #8]
 800171c:	4798      	blx	r3
 800171e:	2800      	cmp	r0, #0
 8001720:	d109      	bne.n	8001736 <acc_radar_engine_acquire_adc_data+0x72>
 8001722:	2000      	movs	r0, #0
 8001724:	b00f      	add	sp, #60	; 0x3c
 8001726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001728:	69ab      	ldr	r3, [r5, #24]
 800172a:	9802      	ldr	r0, [sp, #8]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	4798      	blx	r3
 8001730:	2800      	cmp	r0, #0
 8001732:	d1ec      	bne.n	800170e <acc_radar_engine_acquire_adc_data+0x4a>
 8001734:	e7f5      	b.n	8001722 <acc_radar_engine_acquire_adc_data+0x5e>
 8001736:	7833      	ldrb	r3, [r6, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d100      	bne.n	800173e <acc_radar_engine_acquire_adc_data+0x7a>
 800173c:	78a3      	ldrb	r3, [r4, #2]
 800173e:	70a3      	strb	r3, [r4, #2]
 8001740:	69ab      	ldr	r3, [r5, #24]
 8001742:	aa08      	add	r2, sp, #32
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	3206      	adds	r2, #6
 8001748:	9901      	ldr	r1, [sp, #4]
 800174a:	0028      	movs	r0, r5
 800174c:	4798      	blx	r3
 800174e:	2300      	movs	r3, #0
 8001750:	ae0b      	add	r6, sp, #44	; 0x2c
 8001752:	7033      	strb	r3, [r6, #0]
 8001754:	7233      	strb	r3, [r6, #8]
 8001756:	69ab      	ldr	r3, [r5, #24]
 8001758:	9a07      	ldr	r2, [sp, #28]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	900a      	str	r0, [sp, #40]	; 0x28
 800175e:	6072      	str	r2, [r6, #4]
 8001760:	001f      	movs	r7, r3
 8001762:	aa0a      	add	r2, sp, #40	; 0x28
 8001764:	0033      	movs	r3, r6
 8001766:	9901      	ldr	r1, [sp, #4]
 8001768:	0028      	movs	r0, r5
 800176a:	47b8      	blx	r7
 800176c:	7a33      	ldrb	r3, [r6, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d100      	bne.n	8001774 <acc_radar_engine_acquire_adc_data+0xb0>
 8001772:	7b23      	ldrb	r3, [r4, #12]
 8001774:	7836      	ldrb	r6, [r6, #0]
 8001776:	7323      	strb	r3, [r4, #12]
 8001778:	1e33      	subs	r3, r6, #0
 800177a:	d100      	bne.n	800177e <acc_radar_engine_acquire_adc_data+0xba>
 800177c:	7923      	ldrb	r3, [r4, #4]
 800177e:	7123      	strb	r3, [r4, #4]
 8001780:	68a1      	ldr	r1, [r4, #8]
 8001782:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001784:	f010 ff2c 	bl	80125e0 <fmaxf>
 8001788:	ab08      	add	r3, sp, #32
 800178a:	3306      	adds	r3, #6
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	60a0      	str	r0, [r4, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d100      	bne.n	8001796 <acc_radar_engine_acquire_adc_data+0xd2>
 8001794:	78e3      	ldrb	r3, [r4, #3]
 8001796:	70e3      	strb	r3, [r4, #3]
 8001798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800179a:	8823      	ldrh	r3, [r4, #0]
 800179c:	0031      	movs	r1, r6
 800179e:	18d3      	adds	r3, r2, r3
 80017a0:	8023      	strh	r3, [r4, #0]
 80017a2:	69ab      	ldr	r3, [r5, #24]
 80017a4:	0028      	movs	r0, r5
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	4798      	blx	r3
 80017aa:	9b05      	ldr	r3, [sp, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <acc_radar_engine_acquire_adc_data+0xfc>
 80017b0:	9b04      	ldr	r3, [sp, #16]
 80017b2:	9a00      	ldr	r2, [sp, #0]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d102      	bne.n	80017c0 <acc_radar_engine_acquire_adc_data+0xfc>
 80017ba:	9b01      	ldr	r3, [sp, #4]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	e7b1      	b.n	8001724 <acc_radar_engine_acquire_adc_data+0x60>
 80017c0:	9b03      	ldr	r3, [sp, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d103      	bne.n	80017ce <acc_radar_engine_acquire_adc_data+0x10a>
 80017c6:	9b00      	ldr	r3, [sp, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	e797      	b.n	80016fe <acc_radar_engine_acquire_adc_data+0x3a>
 80017ce:	69ab      	ldr	r3, [r5, #24]
 80017d0:	9802      	ldr	r0, [sp, #8]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	4798      	blx	r3
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d1f5      	bne.n	80017c6 <acc_radar_engine_acquire_adc_data+0x102>
 80017da:	e7a2      	b.n	8001722 <acc_radar_engine_acquire_adc_data+0x5e>
 80017dc:	ff800000 	.word	0xff800000

080017e0 <update_program.lto_priv.285>:
 80017e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80017e2:	6945      	ldr	r5, [r0, #20]
 80017e4:	2401      	movs	r4, #1
 80017e6:	002b      	movs	r3, r5
 80017e8:	33ba      	adds	r3, #186	; 0xba
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4319      	orrs	r1, r3
 80017ee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80017f0:	404c      	eors	r4, r1
 80017f2:	425a      	negs	r2, r3
 80017f4:	4153      	adcs	r3, r2
 80017f6:	428b      	cmp	r3, r1
 80017f8:	d006      	beq.n	8001808 <update_program.lto_priv.285+0x28>
 80017fa:	9400      	str	r4, [sp, #0]
 80017fc:	23ef      	movs	r3, #239	; 0xef
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <update_program.lto_priv.285+0x30>)
 8001800:	4904      	ldr	r1, [pc, #16]	; (8001814 <update_program.lto_priv.285+0x34>)
 8001802:	6800      	ldr	r0, [r0, #0]
 8001804:	f007 fd18 	bl	8009238 <acc_confprogram_live_patch.constprop.16>
 8001808:	642c      	str	r4, [r5, #64]	; 0x40
 800180a:	2001      	movs	r0, #1
 800180c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	08015b48 	.word	0x08015b48
 8001814:	08017088 	.word	0x08017088

08001818 <transfer_data.lto_priv.289>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	000d      	movs	r5, r1
 800181c:	2100      	movs	r1, #0
 800181e:	6943      	ldr	r3, [r0, #20]
 8001820:	7011      	strb	r1, [r2, #0]
 8001822:	001a      	movs	r2, r3
 8001824:	33b8      	adds	r3, #184	; 0xb8
 8001826:	32b4      	adds	r2, #180	; 0xb4
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	8814      	ldrh	r4, [r2, #0]
 800182c:	6829      	ldr	r1, [r5, #0]
 800182e:	18e4      	adds	r4, r4, r3
 8001830:	0022      	movs	r2, r4
 8001832:	6800      	ldr	r0, [r0, #0]
 8001834:	f7ff fdec 	bl	8001410 <acc_sensor_protocol_r2_transfer_data>
 8001838:	0062      	lsls	r2, r4, #1
 800183a:	0001      	movs	r1, r0
 800183c:	6828      	ldr	r0, [r5, #0]
 800183e:	f013 f940 	bl	8014ac2 <memmove>
 8001842:	0020      	movs	r0, r4
 8001844:	bd70      	pop	{r4, r5, r6, pc}

08001846 <acc_radar_engine_sparse_create>:
 8001846:	22cd      	movs	r2, #205	; 0xcd
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	0052      	lsls	r2, r2, #1
 800184c:	0004      	movs	r4, r0
 800184e:	000d      	movs	r5, r1
 8001850:	20bc      	movs	r0, #188	; 0xbc
 8001852:	490f      	ldr	r1, [pc, #60]	; (8001890 <acc_radar_engine_sparse_create+0x4a>)
 8001854:	f007 fc90 	bl	8009178 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8001858:	2300      	movs	r3, #0
 800185a:	6160      	str	r0, [r4, #20]
 800185c:	4298      	cmp	r0, r3
 800185e:	d015      	beq.n	800188c <acc_radar_engine_sparse_create+0x46>
 8001860:	0028      	movs	r0, r5
 8001862:	f7ff f885 	bl	8000970 <acc_base_configuration_sensor_get>
 8001866:	6020      	str	r0, [r4, #0]
 8001868:	0028      	movs	r0, r5
 800186a:	f7fe ffb3 	bl	80007d4 <acc_base_configuration_asynchronous_measurement_get>
 800186e:	73a0      	strb	r0, [r4, #14]
 8001870:	0028      	movs	r0, r5
 8001872:	f7ff f86a 	bl	800094a <acc_base_configuration_power_save_mode_get>
 8001876:	4243      	negs	r3, r0
 8001878:	4158      	adcs	r0, r3
 800187a:	73e0      	strb	r0, [r4, #15]
 800187c:	0028      	movs	r0, r5
 800187e:	f7ff f82f 	bl	80008e0 <acc_radar_engine_common_get_timeout_ms>
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <acc_radar_engine_sparse_create+0x4e>)
 8001884:	6120      	str	r0, [r4, #16]
 8001886:	3314      	adds	r3, #20
 8001888:	61a3      	str	r3, [r4, #24]
 800188a:	2301      	movs	r3, #1
 800188c:	0018      	movs	r0, r3
 800188e:	bd70      	pop	{r4, r5, r6, pc}
 8001890:	0801b06f 	.word	0x0801b06f
 8001894:	08014b00 	.word	0x08014b00

08001898 <acc_radar_engine_linear_create>:
 8001898:	222c      	movs	r2, #44	; 0x2c
 800189a:	b570      	push	{r4, r5, r6, lr}
 800189c:	32ff      	adds	r2, #255	; 0xff
 800189e:	0004      	movs	r4, r0
 80018a0:	000d      	movs	r5, r1
 80018a2:	20d4      	movs	r0, #212	; 0xd4
 80018a4:	490f      	ldr	r1, [pc, #60]	; (80018e4 <acc_radar_engine_linear_create+0x4c>)
 80018a6:	f007 fc67 	bl	8009178 <acc_rss_integration_mem_calloc_debug.constprop.75>
 80018aa:	2300      	movs	r3, #0
 80018ac:	6160      	str	r0, [r4, #20]
 80018ae:	4298      	cmp	r0, r3
 80018b0:	d015      	beq.n	80018de <acc_radar_engine_linear_create+0x46>
 80018b2:	0028      	movs	r0, r5
 80018b4:	f7ff f85c 	bl	8000970 <acc_base_configuration_sensor_get>
 80018b8:	6020      	str	r0, [r4, #0]
 80018ba:	0028      	movs	r0, r5
 80018bc:	f7fe ff8a 	bl	80007d4 <acc_base_configuration_asynchronous_measurement_get>
 80018c0:	73a0      	strb	r0, [r4, #14]
 80018c2:	0028      	movs	r0, r5
 80018c4:	f7ff f841 	bl	800094a <acc_base_configuration_power_save_mode_get>
 80018c8:	4243      	negs	r3, r0
 80018ca:	4158      	adcs	r0, r3
 80018cc:	73e0      	strb	r0, [r4, #15]
 80018ce:	0028      	movs	r0, r5
 80018d0:	f7ff f806 	bl	80008e0 <acc_radar_engine_common_get_timeout_ms>
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <acc_radar_engine_linear_create+0x50>)
 80018d6:	6120      	str	r0, [r4, #16]
 80018d8:	334c      	adds	r3, #76	; 0x4c
 80018da:	61a3      	str	r3, [r4, #24]
 80018dc:	2301      	movs	r3, #1
 80018de:	0018      	movs	r0, r3
 80018e0:	bd70      	pop	{r4, r5, r6, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	0801b0a1 	.word	0x0801b0a1
 80018e8:	08014b00 	.word	0x08014b00

080018ec <acc_service_sparse_configuration_create>:
 80018ec:	b570      	push	{r4, r5, r6, lr}
 80018ee:	2260      	movs	r2, #96	; 0x60
 80018f0:	4972      	ldr	r1, [pc, #456]	; (8001abc <acc_service_sparse_configuration_create+0x1d0>)
 80018f2:	208c      	movs	r0, #140	; 0x8c
 80018f4:	f007 fc40 	bl	8009178 <acc_rss_integration_mem_calloc_debug.constprop.75>
 80018f8:	1e04      	subs	r4, r0, #0
 80018fa:	d100      	bne.n	80018fe <acc_service_sparse_configuration_create+0x12>
 80018fc:	e0db      	b.n	8001ab6 <acc_service_sparse_configuration_create+0x1ca>
 80018fe:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <acc_service_sparse_configuration_create+0x1d4>)
 8001900:	0005      	movs	r5, r0
 8001902:	6003      	str	r3, [r0, #0]
 8001904:	2303      	movs	r3, #3
 8001906:	7103      	strb	r3, [r0, #4]
 8001908:	4b6e      	ldr	r3, [pc, #440]	; (8001ac4 <acc_service_sparse_configuration_create+0x1d8>)
 800190a:	351c      	adds	r5, #28
 800190c:	6083      	str	r3, [r0, #8]
 800190e:	4b6e      	ldr	r3, [pc, #440]	; (8001ac8 <acc_service_sparse_configuration_create+0x1dc>)
 8001910:	6105      	str	r5, [r0, #16]
 8001912:	6143      	str	r3, [r0, #20]
 8001914:	2358      	movs	r3, #88	; 0x58
 8001916:	2102      	movs	r1, #2
 8001918:	8303      	strh	r3, [r0, #24]
 800191a:	f7ff f953 	bl	8000bc4 <acc_service_profile_set>
 800191e:	0020      	movs	r0, r4
 8001920:	2100      	movs	r1, #0
 8001922:	f7ff f93d 	bl	8000ba0 <acc_service_maximize_signal_attenuation_set>
 8001926:	0028      	movs	r0, r5
 8001928:	f7fe ff3a 	bl	80007a0 <configuration_is_valid>
 800192c:	2800      	cmp	r0, #0
 800192e:	d001      	beq.n	8001934 <acc_service_sparse_configuration_create+0x48>
 8001930:	4b66      	ldr	r3, [pc, #408]	; (8001acc <acc_service_sparse_configuration_create+0x1e0>)
 8001932:	6423      	str	r3, [r4, #64]	; 0x40
 8001934:	0028      	movs	r0, r5
 8001936:	f7fe ff33 	bl	80007a0 <configuration_is_valid>
 800193a:	2800      	cmp	r0, #0
 800193c:	d001      	beq.n	8001942 <acc_service_sparse_configuration_create+0x56>
 800193e:	4b64      	ldr	r3, [pc, #400]	; (8001ad0 <acc_service_sparse_configuration_create+0x1e4>)
 8001940:	6463      	str	r3, [r4, #68]	; 0x44
 8001942:	0028      	movs	r0, r5
 8001944:	f7fe ff2c 	bl	80007a0 <configuration_is_valid>
 8001948:	2800      	cmp	r0, #0
 800194a:	d003      	beq.n	8001954 <acc_service_sparse_configuration_create+0x68>
 800194c:	0023      	movs	r3, r4
 800194e:	2206      	movs	r2, #6
 8001950:	334e      	adds	r3, #78	; 0x4e
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	0028      	movs	r0, r5
 8001956:	f7fe ff23 	bl	80007a0 <configuration_is_valid>
 800195a:	2800      	cmp	r0, #0
 800195c:	d001      	beq.n	8001962 <acc_service_sparse_configuration_create+0x76>
 800195e:	2301      	movs	r3, #1
 8001960:	62a3      	str	r3, [r4, #40]	; 0x28
 8001962:	0028      	movs	r0, r5
 8001964:	f7fe fffb 	bl	800095e <acc_base_configuration_repetition_mode_on_demand_set>
 8001968:	0028      	movs	r0, r5
 800196a:	f7fe ff19 	bl	80007a0 <configuration_is_valid>
 800196e:	2800      	cmp	r0, #0
 8001970:	d001      	beq.n	8001976 <acc_service_sparse_configuration_create+0x8a>
 8001972:	2302      	movs	r3, #2
 8001974:	6563      	str	r3, [r4, #84]	; 0x54
 8001976:	0028      	movs	r0, r5
 8001978:	f7fe ff12 	bl	80007a0 <configuration_is_valid>
 800197c:	2800      	cmp	r0, #0
 800197e:	d003      	beq.n	8001988 <acc_service_sparse_configuration_create+0x9c>
 8001980:	0023      	movs	r3, r4
 8001982:	2200      	movs	r2, #0
 8001984:	3348      	adds	r3, #72	; 0x48
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	0028      	movs	r0, r5
 800198a:	f7fe ff09 	bl	80007a0 <configuration_is_valid>
 800198e:	2800      	cmp	r0, #0
 8001990:	d003      	beq.n	800199a <acc_service_sparse_configuration_create+0xae>
 8001992:	0023      	movs	r3, r4
 8001994:	2210      	movs	r2, #16
 8001996:	337c      	adds	r3, #124	; 0x7c
 8001998:	801a      	strh	r2, [r3, #0]
 800199a:	0028      	movs	r0, r5
 800199c:	f7fe ff00 	bl	80007a0 <configuration_is_valid>
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d002      	beq.n	80019aa <acc_service_sparse_configuration_create+0xbe>
 80019a4:	2200      	movs	r2, #0
 80019a6:	1d23      	adds	r3, r4, #4
 80019a8:	67da      	str	r2, [r3, #124]	; 0x7c
 80019aa:	0028      	movs	r0, r5
 80019ac:	f7fe fef8 	bl	80007a0 <configuration_is_valid>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d003      	beq.n	80019bc <acc_service_sparse_configuration_create+0xd0>
 80019b4:	0023      	movs	r3, r4
 80019b6:	2200      	movs	r2, #0
 80019b8:	3362      	adds	r3, #98	; 0x62
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	0028      	movs	r0, r5
 80019be:	f7fe feef 	bl	80007a0 <configuration_is_valid>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d003      	beq.n	80019ce <acc_service_sparse_configuration_create+0xe2>
 80019c6:	0023      	movs	r3, r4
 80019c8:	2200      	movs	r2, #0
 80019ca:	3363      	adds	r3, #99	; 0x63
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	0028      	movs	r0, r5
 80019d0:	f7fe fee6 	bl	80007a0 <configuration_is_valid>
 80019d4:	2800      	cmp	r0, #0
 80019d6:	d003      	beq.n	80019e0 <acc_service_sparse_configuration_create+0xf4>
 80019d8:	0023      	movs	r3, r4
 80019da:	2200      	movs	r2, #0
 80019dc:	3364      	adds	r3, #100	; 0x64
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	0028      	movs	r0, r5
 80019e2:	f7fe fedd 	bl	80007a0 <configuration_is_valid>
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d007      	beq.n	80019fa <acc_service_sparse_configuration_create+0x10e>
 80019ea:	0023      	movs	r3, r4
 80019ec:	2200      	movs	r2, #0
 80019ee:	336b      	adds	r3, #107	; 0x6b
 80019f0:	705a      	strb	r2, [r3, #1]
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	3240      	adds	r2, #64	; 0x40
 80019f8:	805a      	strh	r2, [r3, #2]
 80019fa:	0028      	movs	r0, r5
 80019fc:	f7fe fed0 	bl	80007a0 <configuration_is_valid>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d003      	beq.n	8001a0c <acc_service_sparse_configuration_create+0x120>
 8001a04:	0023      	movs	r3, r4
 8001a06:	22ff      	movs	r2, #255	; 0xff
 8001a08:	3372      	adds	r3, #114	; 0x72
 8001a0a:	801a      	strh	r2, [r3, #0]
 8001a0c:	0028      	movs	r0, r5
 8001a0e:	f7fe fec7 	bl	80007a0 <configuration_is_valid>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d003      	beq.n	8001a1e <acc_service_sparse_configuration_create+0x132>
 8001a16:	0023      	movs	r3, r4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	3374      	adds	r3, #116	; 0x74
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	0028      	movs	r0, r5
 8001a20:	f7fe febe 	bl	80007a0 <configuration_is_valid>
 8001a24:	2800      	cmp	r0, #0
 8001a26:	d004      	beq.n	8001a32 <acc_service_sparse_configuration_create+0x146>
 8001a28:	0023      	movs	r3, r4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	3376      	adds	r3, #118	; 0x76
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	67a2      	str	r2, [r4, #120]	; 0x78
 8001a32:	0028      	movs	r0, r5
 8001a34:	2101      	movs	r1, #1
 8001a36:	f7fe fedf 	bl	80007f8 <acc_base_configuration_downsampling_factor_set>
 8001a3a:	0028      	movs	r0, r5
 8001a3c:	f7fe feb0 	bl	80007a0 <configuration_is_valid>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d003      	beq.n	8001a4c <acc_service_sparse_configuration_create+0x160>
 8001a44:	0023      	movs	r3, r4
 8001a46:	2201      	movs	r2, #1
 8001a48:	3386      	adds	r3, #134	; 0x86
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	0028      	movs	r0, r5
 8001a4e:	f7fe fea7 	bl	80007a0 <configuration_is_valid>
 8001a52:	2800      	cmp	r0, #0
 8001a54:	d003      	beq.n	8001a5e <acc_service_sparse_configuration_create+0x172>
 8001a56:	0023      	movs	r3, r4
 8001a58:	220b      	movs	r2, #11
 8001a5a:	335a      	adds	r3, #90	; 0x5a
 8001a5c:	801a      	strh	r2, [r3, #0]
 8001a5e:	0028      	movs	r0, r5
 8001a60:	f7fe fe9e 	bl	80007a0 <configuration_is_valid>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d003      	beq.n	8001a70 <acc_service_sparse_configuration_create+0x184>
 8001a68:	0023      	movs	r3, r4
 8001a6a:	220a      	movs	r2, #10
 8001a6c:	3358      	adds	r3, #88	; 0x58
 8001a6e:	801a      	strh	r2, [r3, #0]
 8001a70:	0028      	movs	r0, r5
 8001a72:	f7fe fe95 	bl	80007a0 <configuration_is_valid>
 8001a76:	2800      	cmp	r0, #0
 8001a78:	d003      	beq.n	8001a82 <acc_service_sparse_configuration_create+0x196>
 8001a7a:	0023      	movs	r3, r4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	3365      	adds	r3, #101	; 0x65
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	0028      	movs	r0, r5
 8001a84:	f7fe fe8c 	bl	80007a0 <configuration_is_valid>
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d003      	beq.n	8001a94 <acc_service_sparse_configuration_create+0x1a8>
 8001a8c:	0023      	movs	r3, r4
 8001a8e:	2201      	movs	r2, #1
 8001a90:	336a      	adds	r3, #106	; 0x6a
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	0028      	movs	r0, r5
 8001a96:	f7fe fe83 	bl	80007a0 <configuration_is_valid>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d004      	beq.n	8001aa8 <acc_service_sparse_configuration_create+0x1bc>
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	0023      	movs	r3, r4
 8001aa2:	0152      	lsls	r2, r2, #5
 8001aa4:	3370      	adds	r3, #112	; 0x70
 8001aa6:	801a      	strh	r2, [r3, #0]
 8001aa8:	0028      	movs	r0, r5
 8001aaa:	f7fe fe79 	bl	80007a0 <configuration_is_valid>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <acc_service_sparse_configuration_create+0x1ca>
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <acc_service_sparse_configuration_create+0x1e8>)
 8001ab4:	61e3      	str	r3, [r4, #28]
 8001ab6:	0020      	movs	r0, r4
 8001ab8:	bd70      	pop	{r4, r5, r6, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	0801b0d3 	.word	0x0801b0d3
 8001ac0:	acc09dd7 	.word	0xacc09dd7
 8001ac4:	08000c69 	.word	0x08000c69
 8001ac8:	08003b29 	.word	0x08003b29
 8001acc:	3e4ccccd 	.word	0x3e4ccccd
 8001ad0:	3e99999a 	.word	0x3e99999a
 8001ad4:	08001847 	.word	0x08001847

08001ad8 <acc_service_create>:
 8001ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ada:	4d2e      	ldr	r5, [pc, #184]	; (8001b94 <acc_service_create+0xbc>)
 8001adc:	0004      	movs	r4, r0
 8001ade:	782f      	ldrb	r7, [r5, #0]
 8001ae0:	2f00      	cmp	r7, #0
 8001ae2:	d049      	beq.n	8001b78 <acc_service_create+0xa0>
 8001ae4:	f7fe ffcc 	bl	8000a80 <acc_service_configuration_valid>
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	d101      	bne.n	8001af0 <acc_service_create+0x18>
 8001aec:	2700      	movs	r7, #0
 8001aee:	e041      	b.n	8001b74 <acc_service_create+0x9c>
 8001af0:	6923      	ldr	r3, [r4, #16]
 8001af2:	68de      	ldr	r6, [r3, #12]
 8001af4:	2e2a      	cmp	r6, #42	; 0x2a
 8001af6:	d907      	bls.n	8001b08 <acc_service_create+0x30>
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <acc_service_create+0xc0>)
 8001afa:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <acc_service_create+0xc4>)
 8001afc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001afe:	4928      	ldr	r1, [pc, #160]	; (8001ba0 <acc_service_create+0xc8>)
 8001b00:	232a      	movs	r3, #42	; 0x2a
 8001b02:	2000      	movs	r0, #0
 8001b04:	47a0      	blx	r4
 8001b06:	e7f1      	b.n	8001aec <acc_service_create+0x14>
 8001b08:	786b      	ldrb	r3, [r5, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <acc_service_create+0x3c>
 8001b0e:	686b      	ldr	r3, [r5, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d128      	bne.n	8001b66 <acc_service_create+0x8e>
 8001b14:	8b23      	ldrh	r3, [r4, #24]
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <acc_service_create+0xc0>)
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	3230      	adds	r2, #48	; 0x30
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	2a03      	cmp	r2, #3
 8001b22:	d905      	bls.n	8001b30 <acc_service_create+0x58>
 8001b24:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <acc_service_create+0xcc>)
 8001b28:	0033      	movs	r3, r6
 8001b2a:	491d      	ldr	r1, [pc, #116]	; (8001ba0 <acc_service_create+0xc8>)
 8001b2c:	2004      	movs	r0, #4
 8001b2e:	47b8      	blx	r7
 8001b30:	22bd      	movs	r2, #189	; 0xbd
 8001b32:	491d      	ldr	r1, [pc, #116]	; (8001ba8 <acc_service_create+0xd0>)
 8001b34:	9801      	ldr	r0, [sp, #4]
 8001b36:	f007 fb1f 	bl	8009178 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8001b3a:	1e07      	subs	r7, r0, #0
 8001b3c:	d0d6      	beq.n	8001aec <acc_service_create+0x14>
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <acc_service_create+0xd4>)
 8001b40:	6046      	str	r6, [r0, #4]
 8001b42:	6003      	str	r3, [r0, #0]
 8001b44:	686b      	ldr	r3, [r5, #4]
 8001b46:	0021      	movs	r1, r4
 8001b48:	6543      	str	r3, [r0, #84]	; 0x54
 8001b4a:	6963      	ldr	r3, [r4, #20]
 8001b4c:	6068      	str	r0, [r5, #4]
 8001b4e:	4798      	blx	r3
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d10d      	bne.n	8001b70 <acc_service_create+0x98>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <acc_service_create+0x86>
 8001b5a:	0038      	movs	r0, r7
 8001b5c:	4798      	blx	r3
 8001b5e:	0038      	movs	r0, r7
 8001b60:	f7ff f8c8 	bl	8000cf4 <destroy_handle>
 8001b64:	e7c2      	b.n	8001aec <acc_service_create+0x14>
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	4296      	cmp	r6, r2
 8001b6a:	d00c      	beq.n	8001b86 <acc_service_create+0xae>
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	e7cf      	b.n	8001b10 <acc_service_create+0x38>
 8001b70:	2301      	movs	r3, #1
 8001b72:	727b      	strb	r3, [r7, #9]
 8001b74:	0038      	movs	r0, r7
 8001b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <acc_service_create+0xc0>)
 8001b7a:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <acc_service_create+0xd8>)
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7e:	4908      	ldr	r1, [pc, #32]	; (8001ba0 <acc_service_create+0xc8>)
 8001b80:	0038      	movs	r0, r7
 8001b82:	4798      	blx	r3
 8001b84:	e7f6      	b.n	8001b74 <acc_service_create+0x9c>
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <acc_service_create+0xc0>)
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <acc_service_create+0xdc>)
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	4904      	ldr	r1, [pc, #16]	; (8001ba0 <acc_service_create+0xc8>)
 8001b8e:	2000      	movs	r0, #0
 8001b90:	4798      	blx	r3
 8001b92:	e7ab      	b.n	8001aec <acc_service_create+0x14>
 8001b94:	2000008c 	.word	0x2000008c
 8001b98:	200003e8 	.word	0x200003e8
 8001b9c:	0801b0f4 	.word	0x0801b0f4
 8001ba0:	0801aede 	.word	0x0801aede
 8001ba4:	0801b10d 	.word	0x0801b10d
 8001ba8:	0801b12c 	.word	0x0801b12c
 8001bac:	acc09ee8 	.word	0xacc09ee8
 8001bb0:	0801b14e 	.word	0x0801b14e
 8001bb4:	0801b160 	.word	0x0801b160

08001bb8 <transfer_data.lto_priv.288>:
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bba:	6944      	ldr	r4, [r0, #20]
 8001bbc:	b08d      	sub	sp, #52	; 0x34
 8001bbe:	0023      	movs	r3, r4
 8001bc0:	0027      	movs	r7, r4
 8001bc2:	9204      	str	r2, [sp, #16]
 8001bc4:	33c2      	adds	r3, #194	; 0xc2
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	0005      	movs	r5, r0
 8001bca:	000e      	movs	r6, r1
 8001bcc:	37c6      	adds	r7, #198	; 0xc6
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d100      	bne.n	8001bd4 <transfer_data.lto_priv.288+0x1c>
 8001bd2:	803b      	strh	r3, [r7, #0]
 8001bd4:	0023      	movs	r3, r4
 8001bd6:	33cc      	adds	r3, #204	; 0xcc
 8001bd8:	8819      	ldrh	r1, [r3, #0]
 8001bda:	207c      	movs	r0, #124	; 0x7c
 8001bdc:	f00b f91e 	bl	800ce1c <__udivsi3>
 8001be0:	0023      	movs	r3, r4
 8001be2:	33c8      	adds	r3, #200	; 0xc8
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	a906      	add	r1, sp, #24
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4358      	muls	r0, r3
 8001bec:	0023      	movs	r3, r4
 8001bee:	33ce      	adds	r3, #206	; 0xce
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	18c3      	adds	r3, r0, r3
 8001bf4:	0020      	movs	r0, r4
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	f009 fc0c 	bl	800b414 <acc_cpd_linear_sweep_get_info>
 8001bfc:	9b02      	ldr	r3, [sp, #8]
 8001bfe:	9a06      	ldr	r2, [sp, #24]
 8001c00:	8839      	ldrh	r1, [r7, #0]
 8001c02:	189a      	adds	r2, r3, r2
 8001c04:	6833      	ldr	r3, [r6, #0]
 8001c06:	6828      	ldr	r0, [r5, #0]
 8001c08:	1859      	adds	r1, r3, r1
 8001c0a:	f7ff fc01 	bl	8001410 <acc_sensor_protocol_r2_transfer_data>
 8001c0e:	0023      	movs	r3, r4
 8001c10:	33ad      	adds	r3, #173	; 0xad
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	0007      	movs	r7, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d124      	bne.n	8001c64 <transfer_data.lto_priv.288+0xac>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9a04      	ldr	r2, [sp, #16]
 8001c1e:	a906      	add	r1, sp, #24
 8001c20:	7013      	strb	r3, [r2, #0]
 8001c22:	0020      	movs	r0, r4
 8001c24:	f009 fbf6 	bl	800b414 <acc_cpd_linear_sweep_get_info>
 8001c28:	9b02      	ldr	r3, [sp, #8]
 8001c2a:	6830      	ldr	r0, [r6, #0]
 8001c2c:	005a      	lsls	r2, r3, #1
 8001c2e:	9b06      	ldr	r3, [sp, #24]
 8001c30:	0059      	lsls	r1, r3, #1
 8001c32:	1879      	adds	r1, r7, r1
 8001c34:	0027      	movs	r7, r4
 8001c36:	37c6      	adds	r7, #198	; 0xc6
 8001c38:	883b      	ldrh	r3, [r7, #0]
 8001c3a:	18c0      	adds	r0, r0, r3
 8001c3c:	f012 ff41 	bl	8014ac2 <memmove>
 8001c40:	0023      	movs	r3, r4
 8001c42:	883e      	ldrh	r6, [r7, #0]
 8001c44:	33c4      	adds	r3, #196	; 0xc4
 8001c46:	801e      	strh	r6, [r3, #0]
 8001c48:	34cc      	adds	r4, #204	; 0xcc
 8001c4a:	8821      	ldrh	r1, [r4, #0]
 8001c4c:	207c      	movs	r0, #124	; 0x7c
 8001c4e:	685d      	ldr	r5, [r3, #4]
 8001c50:	f00b f8e4 	bl	800ce1c <__udivsi3>
 8001c54:	b2ad      	uxth	r5, r5
 8001c56:	006d      	lsls	r5, r5, #1
 8001c58:	4345      	muls	r5, r0
 8001c5a:	9802      	ldr	r0, [sp, #8]
 8001c5c:	1976      	adds	r6, r6, r5
 8001c5e:	803e      	strh	r6, [r7, #0]
 8001c60:	b00d      	add	sp, #52	; 0x34
 8001c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c64:	0022      	movs	r2, r4
 8001c66:	211f      	movs	r1, #31
 8001c68:	32bc      	adds	r2, #188	; 0xbc
 8001c6a:	6813      	ldr	r3, [r2, #0]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	400b      	ands	r3, r1
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4a40      	ldr	r2, [pc, #256]	; (8001d74 <transfer_data.lto_priv.288+0x1bc>)
 8001c74:	0011      	movs	r1, r2
 8001c76:	3130      	adds	r1, #48	; 0x30
 8001c78:	7809      	ldrb	r1, [r1, #0]
 8001c7a:	2903      	cmp	r1, #3
 8001c7c:	d904      	bls.n	8001c88 <transfer_data.lto_priv.288+0xd0>
 8001c7e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001c80:	493d      	ldr	r1, [pc, #244]	; (8001d78 <transfer_data.lto_priv.288+0x1c0>)
 8001c82:	4a3e      	ldr	r2, [pc, #248]	; (8001d7c <transfer_data.lto_priv.288+0x1c4>)
 8001c84:	2004      	movs	r0, #4
 8001c86:	47a8      	blx	r5
 8001c88:	6a23      	ldr	r3, [r4, #32]
 8001c8a:	4a3d      	ldr	r2, [pc, #244]	; (8001d80 <transfer_data.lto_priv.288+0x1c8>)
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	18d3      	adds	r3, r2, r3
 8001c92:	2004      	movs	r0, #4
 8001c94:	5e18      	ldrsh	r0, [r3, r0]
 8001c96:	f00b fca5 	bl	800d5e4 <__aeabi_i2f>
 8001c9a:	1c05      	adds	r5, r0, #0
 8001c9c:	8838      	ldrh	r0, [r7, #0]
 8001c9e:	f00b fceb 	bl	800d678 <__aeabi_ui2f>
 8001ca2:	21de      	movs	r1, #222	; 0xde
 8001ca4:	0589      	lsls	r1, r1, #22
 8001ca6:	f00a fd87 	bl	800c7b8 <__aeabi_fmul>
 8001caa:	21fc      	movs	r1, #252	; 0xfc
 8001cac:	0589      	lsls	r1, r1, #22
 8001cae:	f00a feb5 	bl	800ca1c <__aeabi_fsub>
 8001cb2:	4934      	ldr	r1, [pc, #208]	; (8001d84 <transfer_data.lto_priv.288+0x1cc>)
 8001cb4:	f00a fd80 	bl	800c7b8 <__aeabi_fmul>
 8001cb8:	4933      	ldr	r1, [pc, #204]	; (8001d88 <transfer_data.lto_priv.288+0x1d0>)
 8001cba:	f00a fd7d 	bl	800c7b8 <__aeabi_fmul>
 8001cbe:	1c01      	adds	r1, r0, #0
 8001cc0:	1c28      	adds	r0, r5, #0
 8001cc2:	f00a feab 	bl	800ca1c <__aeabi_fsub>
 8001cc6:	f00b fc6d 	bl	800d5a4 <__aeabi_f2iz>
 8001cca:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <transfer_data.lto_priv.288+0x1d4>)
 8001ccc:	b205      	sxth	r5, r0
 8001cce:	b2ab      	uxth	r3, r5
 8001cd0:	189a      	adds	r2, r3, r2
 8001cd2:	492f      	ldr	r1, [pc, #188]	; (8001d90 <transfer_data.lto_priv.288+0x1d8>)
 8001cd4:	b292      	uxth	r2, r2
 8001cd6:	428a      	cmp	r2, r1
 8001cd8:	d829      	bhi.n	8001d2e <transfer_data.lto_priv.288+0x176>
 8001cda:	2126      	movs	r1, #38	; 0x26
 8001cdc:	5e62      	ldrsh	r2, [r4, r1]
 8001cde:	8878      	ldrh	r0, [r7, #2]
 8001ce0:	9203      	str	r2, [sp, #12]
 8001ce2:	4a2c      	ldr	r2, [pc, #176]	; (8001d94 <transfer_data.lto_priv.288+0x1dc>)
 8001ce4:	189b      	adds	r3, r3, r2
 8001ce6:	22e6      	movs	r2, #230	; 0xe6
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	0052      	lsls	r2, r2, #1
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d924      	bls.n	8001d3a <transfer_data.lto_priv.288+0x182>
 8001cf0:	f00b fcc2 	bl	800d678 <__aeabi_ui2f>
 8001cf4:	21de      	movs	r1, #222	; 0xde
 8001cf6:	0589      	lsls	r1, r1, #22
 8001cf8:	f00a fd5e 	bl	800c7b8 <__aeabi_fmul>
 8001cfc:	21fc      	movs	r1, #252	; 0xfc
 8001cfe:	0589      	lsls	r1, r1, #22
 8001d00:	f00a fe8c 	bl	800ca1c <__aeabi_fsub>
 8001d04:	491f      	ldr	r1, [pc, #124]	; (8001d84 <transfer_data.lto_priv.288+0x1cc>)
 8001d06:	f00a fd57 	bl	800c7b8 <__aeabi_fmul>
 8001d0a:	491f      	ldr	r1, [pc, #124]	; (8001d88 <transfer_data.lto_priv.288+0x1d0>)
 8001d0c:	f00a fd54 	bl	800c7b8 <__aeabi_fmul>
 8001d10:	9005      	str	r0, [sp, #20]
 8001d12:	0028      	movs	r0, r5
 8001d14:	f00b fc66 	bl	800d5e4 <__aeabi_i2f>
 8001d18:	1c01      	adds	r1, r0, #0
 8001d1a:	9805      	ldr	r0, [sp, #20]
 8001d1c:	f00a faa0 	bl	800c260 <__aeabi_fadd>
 8001d20:	f00b fc40 	bl	800d5a4 <__aeabi_f2iz>
 8001d24:	9b03      	ldr	r3, [sp, #12]
 8001d26:	b200      	sxth	r0, r0
 8001d28:	3364      	adds	r3, #100	; 0x64
 8001d2a:	4298      	cmp	r0, r3
 8001d2c:	dd05      	ble.n	8001d3a <transfer_data.lto_priv.288+0x182>
 8001d2e:	0022      	movs	r2, r4
 8001d30:	2301      	movs	r3, #1
 8001d32:	32bc      	adds	r2, #188	; 0xbc
 8001d34:	6811      	ldr	r1, [r2, #0]
 8001d36:	430b      	orrs	r3, r1
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	0023      	movs	r3, r4
 8001d3c:	33bc      	adds	r3, #188	; 0xbc
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2300      	movs	r3, #0
 8001d42:	2a00      	cmp	r2, #0
 8001d44:	d111      	bne.n	8001d6a <transfer_data.lto_priv.288+0x1b2>
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d800      	bhi.n	8001d4c <transfer_data.lto_priv.288+0x194>
 8001d4a:	e766      	b.n	8001c1a <transfer_data.lto_priv.288+0x62>
 8001d4c:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <transfer_data.lto_priv.288+0x1bc>)
 8001d4e:	0011      	movs	r1, r2
 8001d50:	3130      	adds	r1, #48	; 0x30
 8001d52:	7809      	ldrb	r1, [r1, #0]
 8001d54:	2900      	cmp	r1, #0
 8001d56:	d006      	beq.n	8001d66 <transfer_data.lto_priv.288+0x1ae>
 8001d58:	2105      	movs	r1, #5
 8001d5a:	9100      	str	r1, [sp, #0]
 8001d5c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001d5e:	4906      	ldr	r1, [pc, #24]	; (8001d78 <transfer_data.lto_priv.288+0x1c0>)
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <transfer_data.lto_priv.288+0x1e0>)
 8001d62:	2001      	movs	r0, #1
 8001d64:	47a8      	blx	r5
 8001d66:	2301      	movs	r3, #1
 8001d68:	e758      	b.n	8001c1c <transfer_data.lto_priv.288+0x64>
 8001d6a:	1e51      	subs	r1, r2, #1
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	3301      	adds	r3, #1
 8001d70:	e7e7      	b.n	8001d42 <transfer_data.lto_priv.288+0x18a>
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	200003e8 	.word	0x200003e8
 8001d78:	0801b19e 	.word	0x0801b19e
 8001d7c:	0801b187 	.word	0x0801b187
 8001d80:	08014b80 	.word	0x08014b80
 8001d84:	3f99999a 	.word	0x3f99999a
 8001d88:	447a0000 	.word	0x447a0000
 8001d8c:	fffffd12 	.word	0xfffffd12
 8001d90:	00000217 	.word	0x00000217
 8001d94:	fffffcf4 	.word	0xfffffcf4
 8001d98:	0801b1af 	.word	0x0801b1af

08001d9c <inject_data.lto_priv.316>:
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	3038      	adds	r0, #56	; 0x38
 8001da0:	f00a f98a 	bl	800c0b8 <acc_element_source_adc_inject_data>
 8001da4:	bd10      	pop	{r4, pc}

08001da6 <inject_data.lto_priv.315>:
 8001da6:	b510      	push	{r4, lr}
 8001da8:	3038      	adds	r0, #56	; 0x38
 8001daa:	f00a f985 	bl	800c0b8 <acc_element_source_adc_inject_data>
 8001dae:	bd10      	pop	{r4, pc}

08001db0 <produce.lto_priv.318>:
 8001db0:	b510      	push	{r4, lr}
 8001db2:	0004      	movs	r4, r0
 8001db4:	3038      	adds	r0, #56	; 0x38
 8001db6:	f00a f993 	bl	800c0e0 <acc_element_source_adc_produce>
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	d10c      	bne.n	8001dd8 <produce.lto_priv.318+0x28>
 8001dbe:	23e0      	movs	r3, #224	; 0xe0
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	58e3      	ldr	r3, [r4, r3]
 8001dc6:	6158      	str	r0, [r3, #20]
 8001dc8:	7198      	strb	r0, [r3, #6]
 8001dca:	715a      	strb	r2, [r3, #5]
 8001dcc:	23d2      	movs	r3, #210	; 0xd2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	18e0      	adds	r0, r4, r3
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	58e3      	ldr	r3, [r4, r3]
 8001dd6:	4798      	blx	r3
 8001dd8:	bd10      	pop	{r4, pc}

08001dda <produce.lto_priv.317>:
 8001dda:	b510      	push	{r4, lr}
 8001ddc:	0004      	movs	r4, r0
 8001dde:	3038      	adds	r0, #56	; 0x38
 8001de0:	f00a f97e 	bl	800c0e0 <acc_element_source_adc_produce>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d10b      	bne.n	8001e00 <produce.lto_priv.317+0x26>
 8001de8:	0023      	movs	r3, r4
 8001dea:	33f0      	adds	r3, #240	; 0xf0
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2201      	movs	r2, #1
 8001df0:	6158      	str	r0, [r3, #20]
 8001df2:	7198      	strb	r0, [r3, #6]
 8001df4:	0020      	movs	r0, r4
 8001df6:	34bc      	adds	r4, #188	; 0xbc
 8001df8:	715a      	strb	r2, [r3, #5]
 8001dfa:	30b8      	adds	r0, #184	; 0xb8
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	4798      	blx	r3
 8001e00:	bd10      	pop	{r4, pc}

08001e02 <data_malloc>:
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8001e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e04:	9000      	str	r0, [sp, #0]
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 8001e06:	4831      	ldr	r0, [pc, #196]	; (8001ecc <data_malloc+0xca>)
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8001e08:	9101      	str	r1, [sp, #4]
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 8001e0a:	f012 fa81 	bl	8014310 <__wrap_printf>
 8001e0e:	9900      	ldr	r1, [sp, #0]
 8001e10:	482f      	ldr	r0, [pc, #188]	; (8001ed0 <data_malloc+0xce>)
 8001e12:	f012 fa7d 	bl	8014310 <__wrap_printf>
 8001e16:	2288      	movs	r2, #136	; 0x88
 8001e18:	4e2e      	ldr	r6, [pc, #184]	; (8001ed4 <data_malloc+0xd2>)
 8001e1a:	4d2f      	ldr	r5, [pc, #188]	; (8001ed8 <data_malloc+0xd6>)
 8001e1c:	32ff      	adds	r2, #255	; 0xff
 8001e1e:	0031      	movs	r1, r6
 8001e20:	0028      	movs	r0, r5
 8001e22:	f012 fa75 	bl	8014310 <__wrap_printf>
	DBG_PRINTLN("malloc bins: %d", bins);
 8001e26:	4829      	ldr	r0, [pc, #164]	; (8001ecc <data_malloc+0xca>)
 8001e28:	f012 fa72 	bl	8014310 <__wrap_printf>
 8001e2c:	9901      	ldr	r1, [sp, #4]
 8001e2e:	482b      	ldr	r0, [pc, #172]	; (8001edc <data_malloc+0xda>)
 8001e30:	f012 fa6e 	bl	8014310 <__wrap_printf>
 8001e34:	22c4      	movs	r2, #196	; 0xc4
 8001e36:	0031      	movs	r1, r6
 8001e38:	0052      	lsls	r2, r2, #1
 8001e3a:	0028      	movs	r0, r5
 8001e3c:	f012 fa68 	bl	8014310 <__wrap_printf>
    len = sizeof(uint16_t *) * r + sizeof(uint16_t) * c * r;
 8001e40:	9b01      	ldr	r3, [sp, #4]
 8001e42:	1c9c      	adds	r4, r3, #2
 8001e44:	9b00      	ldr	r3, [sp, #0]
 8001e46:	435c      	muls	r4, r3
 8001e48:	0064      	lsls	r4, r4, #1
    data = (uint16_t **)malloc(len);
 8001e4a:	0020      	movs	r0, r4
 8001e4c:	f012 fe1c 	bl	8014a88 <malloc>
 8001e50:	4f23      	ldr	r7, [pc, #140]	; (8001ee0 <data_malloc+0xde>)
 8001e52:	63b8      	str	r0, [r7, #56]	; 0x38
	if (data == NULL){
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d10e      	bne.n	8001e76 <data_malloc+0x74>
		ERR_PRINTLN("data buffer allociation failed");
 8001e58:	4822      	ldr	r0, [pc, #136]	; (8001ee4 <data_malloc+0xe2>)
 8001e5a:	f012 fa59 	bl	8014310 <__wrap_printf>
 8001e5e:	4822      	ldr	r0, [pc, #136]	; (8001ee8 <data_malloc+0xe6>)
 8001e60:	f012 fa56 	bl	8014310 <__wrap_printf>
 8001e64:	22c9      	movs	r2, #201	; 0xc9
 8001e66:	0031      	movs	r1, r6
 8001e68:	0052      	lsls	r2, r2, #1
 8001e6a:	0028      	movs	r0, r5
 8001e6c:	f012 fa50 	bl	8014310 <__wrap_printf>
		return -1;
 8001e70:	2001      	movs	r0, #1
 8001e72:	4240      	negs	r0, r0
}
 8001e74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		DBG_PRINTLN("data buffer allociation success");
 8001e76:	4815      	ldr	r0, [pc, #84]	; (8001ecc <data_malloc+0xca>)
 8001e78:	f012 fa4a 	bl	8014310 <__wrap_printf>
 8001e7c:	481b      	ldr	r0, [pc, #108]	; (8001eec <data_malloc+0xea>)
 8001e7e:	f012 fa47 	bl	8014310 <__wrap_printf>
 8001e82:	2296      	movs	r2, #150	; 0x96
 8001e84:	0031      	movs	r1, r6
 8001e86:	32ff      	adds	r2, #255	; 0xff
 8001e88:	0028      	movs	r0, r5
 8001e8a:	f012 fa41 	bl	8014310 <__wrap_printf>
		DBG_PRINTLN("data buffer len: %ld", len);
 8001e8e:	480f      	ldr	r0, [pc, #60]	; (8001ecc <data_malloc+0xca>)
 8001e90:	f012 fa3e 	bl	8014310 <__wrap_printf>
 8001e94:	0021      	movs	r1, r4
 8001e96:	4816      	ldr	r0, [pc, #88]	; (8001ef0 <data_malloc+0xee>)
 8001e98:	f012 fa3a 	bl	8014310 <__wrap_printf>
 8001e9c:	22cb      	movs	r2, #203	; 0xcb
 8001e9e:	0031      	movs	r1, r6
 8001ea0:	0052      	lsls	r2, r2, #1
 8001ea2:	0028      	movs	r0, r5
 8001ea4:	f012 fa34 	bl	8014310 <__wrap_printf>
    ptr = (uint16_t *)(data + r);
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	9b01      	ldr	r3, [sp, #4]
 8001eac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001eae:	005a      	lsls	r2, r3, #1
 8001eb0:	9b00      	ldr	r3, [sp, #0]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	18c3      	adds	r3, r0, r3
    for(uint16_t i = 0; i < r; i++){
 8001eb6:	9d00      	ldr	r5, [sp, #0]
 8001eb8:	b28c      	uxth	r4, r1
 8001eba:	42a5      	cmp	r5, r4
 8001ebc:	d801      	bhi.n	8001ec2 <data_malloc+0xc0>
	return 0;
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	e7d8      	b.n	8001e74 <data_malloc+0x72>
        data[i] = (ptr + c * i);
 8001ec2:	008c      	lsls	r4, r1, #2
 8001ec4:	5103      	str	r3, [r0, r4]
 8001ec6:	3101      	adds	r1, #1
 8001ec8:	189b      	adds	r3, r3, r2
 8001eca:	e7f4      	b.n	8001eb6 <data_malloc+0xb4>
 8001ecc:	0801b1ea 	.word	0x0801b1ea
 8001ed0:	0801b1f0 	.word	0x0801b1f0
 8001ed4:	0801b202 	.word	0x0801b202
 8001ed8:	0801bcb9 	.word	0x0801bcb9
 8001edc:	0801b216 	.word	0x0801b216
 8001ee0:	2000010c 	.word	0x2000010c
 8001ee4:	0801b226 	.word	0x0801b226
 8001ee8:	0801b22c 	.word	0x0801b22c
 8001eec:	0801b24b 	.word	0x0801b24b
 8001ef0:	0801b26b 	.word	0x0801b26b

08001ef4 <sparse_data_malloc>:
int8_t sparse_data_malloc(void){
 8001ef4:	b570      	push	{r4, r5, r6, lr}
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 8001ef6:	4c14      	ldr	r4, [pc, #80]	; (8001f48 <sparse_data_malloc+0x54>)
 8001ef8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8001efa:	0028      	movs	r0, r5
 8001efc:	f7fe fdc0 	bl	8000a80 <acc_service_configuration_valid>
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d01e      	beq.n	8001f42 <sparse_data_malloc+0x4e>
 8001f04:	6928      	ldr	r0, [r5, #16]
 8001f06:	f7fe fc8c 	bl	8000822 <acc_base_configuration_sparse_sweeps_per_frame_get>
	bins = sparse_metadata.data_length/sweeps;
 8001f0a:	0023      	movs	r3, r4
 8001f0c:	0006      	movs	r6, r0
 8001f0e:	330e      	adds	r3, #14
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 8001f10:	87a0      	strh	r0, [r4, #60]	; 0x3c
	bins = sparse_metadata.data_length/sweeps;
 8001f12:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8001f14:	0031      	movs	r1, r6
 8001f16:	f00a ff81 	bl	800ce1c <__udivsi3>
	if(far_active){
 8001f1a:	0023      	movs	r3, r4
 8001f1c:	3358      	adds	r3, #88	; 0x58
 8001f1e:	781b      	ldrb	r3, [r3, #0]
	bins = sparse_metadata.data_length/sweeps;
 8001f20:	b285      	uxth	r5, r0
 8001f22:	87e5      	strh	r5, [r4, #62]	; 0x3e
	if(far_active){
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <sparse_data_malloc+0x44>
		bins += sparse_metadata_far.data_length/sweeps;
 8001f28:	0023      	movs	r3, r4
 8001f2a:	335c      	adds	r3, #92	; 0x5c
 8001f2c:	8918      	ldrh	r0, [r3, #8]
 8001f2e:	0031      	movs	r1, r6
 8001f30:	f00a ff74 	bl	800ce1c <__udivsi3>
 8001f34:	182d      	adds	r5, r5, r0
 8001f36:	87e5      	strh	r5, [r4, #62]	; 0x3e
	return data_malloc(sweeps,bins);
 8001f38:	0030      	movs	r0, r6
 8001f3a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001f3c:	f7ff ff61 	bl	8001e02 <data_malloc>
}
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 8001f42:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8001f44:	deff      	udf	#255	; 0xff
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	2000010c 	.word	0x2000010c

08001f4c <printf_sparse_metadata>:
	filldata_envelope();
	INF_PRINTLN("Envelope measurement complete");
	
}

void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	b510      	push	{r4, lr}
 8001f50:	9103      	str	r1, [sp, #12]
 8001f52:	9002      	str	r0, [sp, #8]
    printf("Sparse* Serivce Metadata\n");
 8001f54:	4824      	ldr	r0, [pc, #144]	; (8001fe8 <printf_sparse_metadata+0x9c>)
void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 8001f56:	9204      	str	r2, [sp, #16]
 8001f58:	9305      	str	r3, [sp, #20]
 8001f5a:	9c03      	ldr	r4, [sp, #12]
    printf("Sparse* Serivce Metadata\n");
 8001f5c:	f012 f9c6 	bl	80142ec <__wrap_puts>
	printf("Start: %ld mm\n", (int32_t)(metadata.start_m * 1000.0f));
 8001f60:	4922      	ldr	r1, [pc, #136]	; (8001fec <printf_sparse_metadata+0xa0>)
 8001f62:	9802      	ldr	r0, [sp, #8]
 8001f64:	f00a fc28 	bl	800c7b8 <__aeabi_fmul>
 8001f68:	f00b fb1c 	bl	800d5a4 <__aeabi_f2iz>
 8001f6c:	0001      	movs	r1, r0
 8001f6e:	4820      	ldr	r0, [pc, #128]	; (8001ff0 <printf_sparse_metadata+0xa4>)
 8001f70:	f012 f9ce 	bl	8014310 <__wrap_printf>
    if(! far_active){
 8001f74:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <printf_sparse_metadata+0xa8>)
 8001f76:	001a      	movs	r2, r3
 8001f78:	3258      	adds	r2, #88	; 0x58
 8001f7a:	7812      	ldrb	r2, [r2, #0]
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d126      	bne.n	8001fce <printf_sparse_metadata+0x82>
        printf("Length: %lu mm\n", (uint32_t)(metadata.length_m * 1000.0f));
 8001f80:	491a      	ldr	r1, [pc, #104]	; (8001fec <printf_sparse_metadata+0xa0>)
 8001f82:	1c20      	adds	r0, r4, #0
 8001f84:	f00a fc18 	bl	800c7b8 <__aeabi_fmul>
 8001f88:	f00b f956 	bl	800d238 <__aeabi_f2uiz>
 8001f8c:	0001      	movs	r1, r0
 8001f8e:	481a      	ldr	r0, [pc, #104]	; (8001ff8 <printf_sparse_metadata+0xac>)
    }else{
       printf("Length (far): %lu mm\n", (uint32_t)((metadata.length_m+ sparse_metadata_far.length_m) * 1000.0f)); 
 8001f90:	f012 f9be 	bl	8014310 <__wrap_printf>
    }
    printf("Data length: %lu\n", (uint32_t)metadata.data_length);
 8001f94:	ab02      	add	r3, sp, #8
 8001f96:	8919      	ldrh	r1, [r3, #8]
 8001f98:	4818      	ldr	r0, [pc, #96]	; (8001ffc <printf_sparse_metadata+0xb0>)
 8001f9a:	f012 f9b9 	bl	8014310 <__wrap_printf>
    printf("Sweep rate: %lu mHz\n", (uint32_t)(metadata.sweep_rate * 1000.0f));
 8001f9e:	4913      	ldr	r1, [pc, #76]	; (8001fec <printf_sparse_metadata+0xa0>)
 8001fa0:	9805      	ldr	r0, [sp, #20]
 8001fa2:	f00a fc09 	bl	800c7b8 <__aeabi_fmul>
 8001fa6:	f00b f947 	bl	800d238 <__aeabi_f2uiz>
 8001faa:	0001      	movs	r1, r0
 8001fac:	4814      	ldr	r0, [pc, #80]	; (8002000 <printf_sparse_metadata+0xb4>)
 8001fae:	f012 f9af 	bl	8014310 <__wrap_printf>
    printf("Step length: %lu mm\n", (uint32_t)(metadata.step_length_m * 1000.0f));
 8001fb2:	490e      	ldr	r1, [pc, #56]	; (8001fec <printf_sparse_metadata+0xa0>)
 8001fb4:	9806      	ldr	r0, [sp, #24]
 8001fb6:	f00a fbff 	bl	800c7b8 <__aeabi_fmul>
 8001fba:	f00b f93d 	bl	800d238 <__aeabi_f2uiz>
 8001fbe:	0001      	movs	r1, r0
 8001fc0:	4810      	ldr	r0, [pc, #64]	; (8002004 <printf_sparse_metadata+0xb8>)
 8001fc2:	f012 f9a5 	bl	8014310 <__wrap_printf>
}
 8001fc6:	bc10      	pop	{r4}
 8001fc8:	bc08      	pop	{r3}
 8001fca:	b004      	add	sp, #16
 8001fcc:	4718      	bx	r3
       printf("Length (far): %lu mm\n", (uint32_t)((metadata.length_m+ sparse_metadata_far.length_m) * 1000.0f)); 
 8001fce:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001fd0:	1c20      	adds	r0, r4, #0
 8001fd2:	f00a f945 	bl	800c260 <__aeabi_fadd>
 8001fd6:	4905      	ldr	r1, [pc, #20]	; (8001fec <printf_sparse_metadata+0xa0>)
 8001fd8:	f00a fbee 	bl	800c7b8 <__aeabi_fmul>
 8001fdc:	f00b f92c 	bl	800d238 <__aeabi_f2uiz>
 8001fe0:	0001      	movs	r1, r0
 8001fe2:	4809      	ldr	r0, [pc, #36]	; (8002008 <printf_sparse_metadata+0xbc>)
 8001fe4:	e7d4      	b.n	8001f90 <printf_sparse_metadata+0x44>
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	0801b280 	.word	0x0801b280
 8001fec:	447a0000 	.word	0x447a0000
 8001ff0:	0801b299 	.word	0x0801b299
 8001ff4:	2000010c 	.word	0x2000010c
 8001ff8:	0801b2a8 	.word	0x0801b2a8
 8001ffc:	0801b2ce 	.word	0x0801b2ce
 8002000:	0801b2e0 	.word	0x0801b2e0
 8002004:	0801b2f5 	.word	0x0801b2f5
 8002008:	0801b2b8 	.word	0x0801b2b8

0800200c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(uint32_t baudrate)
{
 800200c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800200e:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <MX_USART1_UART_Init+0xa4>)
 8002010:	4c28      	ldr	r4, [pc, #160]	; (80020b4 <MX_USART1_UART_Init+0xa8>)
  huart1.Init.BaudRate = baudrate;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	2500      	movs	r5, #0
  huart1.Instance = USART1;
 8002014:	6023      	str	r3, [r4, #0]
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002016:	230c      	movs	r3, #12
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002018:	0026      	movs	r6, r4
 800201a:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800201c:	23c0      	movs	r3, #192	; 0xc0
  huart1.Init.BaudRate = baudrate;
 800201e:	6060      	str	r0, [r4, #4]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002020:	009b      	lsls	r3, r3, #2
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002022:	0020      	movs	r0, r4
 8002024:	367c      	adds	r6, #124	; 0x7c
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002026:	61a3      	str	r3, [r4, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002028:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800202a:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800202c:	6125      	str	r5, [r4, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800202e:	61e5      	str	r5, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002030:	6225      	str	r5, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002032:	6265      	str	r5, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002034:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002036:	f007 febf 	bl	8009db8 <HAL_UART_Init.constprop.94>
 800203a:	7833      	ldrb	r3, [r6, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d017      	beq.n	8002070 <MX_USART1_UART_Init+0x64>

  huart->gState = HAL_UART_STATE_BUSY;
 8002040:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8002042:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002044:	1d27      	adds	r7, r4, #4
 8002046:	67fb      	str	r3, [r7, #124]	; 0x7c

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002048:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(huart);
 800204a:	7031      	strb	r1, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800204c:	681a      	ldr	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800204e:	0020      	movs	r0, r4
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002050:	9201      	str	r2, [sp, #4]
  __HAL_UART_DISABLE(huart);
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	438a      	bics	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	00d2      	lsls	r2, r2, #3
 800205c:	08d2      	lsrs	r2, r2, #3
 800205e:	609a      	str	r2, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002060:	f007 f9b4 	bl	80093cc <UARTEx_SetNbDataToProcess.lto_priv.643>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	9a01      	ldr	r2, [sp, #4]
 8002068:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800206a:	2320      	movs	r3, #32

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800206c:	7035      	strb	r5, [r6, #0]
  huart->gState = HAL_UART_STATE_READY;
 800206e:	67fb      	str	r3, [r7, #124]	; 0x7c
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002070:	0025      	movs	r5, r4
 8002072:	357c      	adds	r5, #124	; 0x7c
 8002074:	782b      	ldrb	r3, [r5, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d016      	beq.n	80020a8 <MX_USART1_UART_Init+0x9c>

  huart->gState = HAL_UART_STATE_BUSY;
 800207a:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800207c:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800207e:	1d26      	adds	r6, r4, #4
 8002080:	67f3      	str	r3, [r6, #124]	; 0x7c

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002082:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(huart);
 8002084:	7029      	strb	r1, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002086:	681f      	ldr	r7, [r3, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002088:	681a      	ldr	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800208a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800208c:	438a      	bics	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	4909      	ldr	r1, [pc, #36]	; (80020b8 <MX_USART1_UART_Init+0xac>)
 8002094:	400a      	ands	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002098:	f007 f998 	bl	80093cc <UARTEx_SetNbDataToProcess.lto_priv.643>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	601f      	str	r7, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80020a0:	2320      	movs	r3, #32
 80020a2:	67f3      	str	r3, [r6, #124]	; 0x7c

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80020a4:	2300      	movs	r3, #0
 80020a6:	702b      	strb	r3, [r5, #0]
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020a8:	0020      	movs	r0, r4
 80020aa:	f007 f9c1 	bl	8009430 <HAL_UARTEx_DisableFifoMode>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80020b0:	40013800 	.word	0x40013800
 80020b4:	200005a0 	.word	0x200005a0
 80020b8:	f1ffffff 	.word	0xf1ffffff

080020bc <changeUART1baud>:
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80020bc:	2224      	movs	r2, #36	; 0x24

  __HAL_UART_DISABLE(huart);
 80020be:	2101      	movs	r1, #1
void changeUART1baud(uint32_t baudrate){
 80020c0:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80020c2:	4c25      	ldr	r4, [pc, #148]	; (8002158 <changeUART1baud+0x9c>)
 80020c4:	0005      	movs	r5, r0
 80020c6:	1d23      	adds	r3, r4, #4
 80020c8:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	438a      	bics	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80020d6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80020d8:	609a      	str	r2, [r3, #8]
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 80020da:	4a20      	ldr	r2, [pc, #128]	; (800215c <changeUART1baud+0xa0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d12e      	bne.n	800213e <changeUART1baud+0x82>
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11 [PA9]     ------> USART1_CTS
    PA12 [PA10]     ------> USART1_RTS 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80020e0:	20f0      	movs	r0, #240	; 0xf0
    __HAL_RCC_USART1_CLK_DISABLE();
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <changeUART1baud+0xa4>)
 80020e4:	491f      	ldr	r1, [pc, #124]	; (8002164 <changeUART1baud+0xa8>)
 80020e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80020e8:	0140      	lsls	r0, r0, #5
    __HAL_RCC_USART1_CLK_DISABLE();
 80020ea:	400b      	ands	r3, r1
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80020ee:	f006 fe65 	bl	8008dbc <HAL_GPIO_DeInit.constprop.142>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80020f2:	6f60      	ldr	r0, [r4, #116]	; 0x74
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d001      	beq.n	80020fc <changeUART1baud+0x40>
 80020f8:	f007 faf8 	bl	80096ec <HAL_DMA_DeInit.part.1>
    HAL_DMA_DeInit(huart->hdmarx);
 80020fc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80020fe:	2800      	cmp	r0, #0
 8002100:	d001      	beq.n	8002106 <changeUART1baud+0x4a>
 8002102:	f007 faf3 	bl	80096ec <HAL_DMA_DeInit.part.1>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <changeUART1baud+0xac>)
 800210a:	0512      	lsls	r2, r2, #20
 800210c:	67da      	str	r2, [r3, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800210e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002112:	f3bf 8f6f 	isb	sy
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002116:	0021      	movs	r1, r4
 8002118:	2300      	movs	r3, #0
 800211a:	0022      	movs	r2, r4
 800211c:	3188      	adds	r1, #136	; 0x88
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	3208      	adds	r2, #8
  huart->gState = HAL_UART_STATE_RESET;
 8002122:	1d21      	adds	r1, r4, #4
 8002124:	67cb      	str	r3, [r1, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8002126:	67d3      	str	r3, [r2, #124]	; 0x7c

  __HAL_UNLOCK(huart);
 8002128:	0022      	movs	r2, r4
	MX_USART1_UART_Init(baudrate);
 800212a:	0028      	movs	r0, r5
 800212c:	327c      	adds	r2, #124	; 0x7c
 800212e:	7013      	strb	r3, [r2, #0]
 8002130:	f7ff ff6c 	bl	800200c <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8002134:	2101      	movs	r1, #1
 8002136:	0020      	movs	r0, r4
 8002138:	f006 ff84 	bl	8009044 <HAL_UART_Receive_IT.constprop.83>
}
 800213c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <changeUART1baud+0xb0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d1e8      	bne.n	8002116 <changeUART1baud+0x5a>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002144:	4a06      	ldr	r2, [pc, #24]	; (8002160 <changeUART1baud+0xa4>)
 8002146:	490a      	ldr	r1, [pc, #40]	; (8002170 <changeUART1baud+0xb4>)
 8002148:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800214a:	200c      	movs	r0, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 800214c:	400b      	ands	r3, r1
 800214e:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002150:	f006 fe34 	bl	8008dbc <HAL_GPIO_DeInit.constprop.142>
 8002154:	e7df      	b.n	8002116 <changeUART1baud+0x5a>
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	200005a0 	.word	0x200005a0
 800215c:	40013800 	.word	0x40013800
 8002160:	40021000 	.word	0x40021000
 8002164:	ffffbfff 	.word	0xffffbfff
 8002168:	e000e104 	.word	0xe000e104
 800216c:	40004400 	.word	0x40004400
 8002170:	fffdffff 	.word	0xfffdffff

08002174 <SystemClock_Config>:
{
 8002174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002176:	4eb5      	ldr	r6, [pc, #724]	; (800244c <SystemClock_Config+0x2d8>)
 8002178:	4ab5      	ldr	r2, [pc, #724]	; (8002450 <SystemClock_Config+0x2dc>)
 800217a:	6833      	ldr	r3, [r6, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800217c:	2006      	movs	r0, #6
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800217e:	401a      	ands	r2, r3
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4313      	orrs	r3, r2
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002186:	4fb3      	ldr	r7, [pc, #716]	; (8002454 <SystemClock_Config+0x2e0>)
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002188:	6033      	str	r3, [r6, #0]
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	49b2      	ldr	r1, [pc, #712]	; (8002458 <SystemClock_Config+0x2e4>)
 800218e:	4358      	muls	r0, r3
 8002190:	f00a fe44 	bl	800ce1c <__udivsi3>

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002194:	2380      	movs	r3, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002196:	3001      	adds	r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	6972      	ldr	r2, [r6, #20]
 800219c:	421a      	tst	r2, r3
 800219e:	d000      	beq.n	80021a2 <SystemClock_Config+0x2e>
 80021a0:	e086      	b.n	80022b0 <SystemClock_Config+0x13c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a2:	2338      	movs	r3, #56	; 0x38
 80021a4:	4cad      	ldr	r4, [pc, #692]	; (800245c <SystemClock_Config+0x2e8>)
 80021a6:	4dae      	ldr	r5, [pc, #696]	; (8002460 <SystemClock_Config+0x2ec>)
 80021a8:	68a2      	ldr	r2, [r4, #8]
 80021aa:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ac:	68e2      	ldr	r2, [r4, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d000      	beq.n	80021b4 <SystemClock_Config+0x40>
 80021b2:	e082      	b.n	80022ba <SystemClock_Config+0x146>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b4:	2103      	movs	r1, #3
 80021b6:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021b8:	2a02      	cmp	r2, #2
 80021ba:	d000      	beq.n	80021be <SystemClock_Config+0x4a>
 80021bc:	e080      	b.n	80022c0 <SystemClock_Config+0x14c>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021be:	6822      	ldr	r2, [r4, #0]
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c0:	49a8      	ldr	r1, [pc, #672]	; (8002464 <SystemClock_Config+0x2f0>)
 80021c2:	6862      	ldr	r2, [r4, #4]
 80021c4:	4011      	ands	r1, r2
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	01d2      	lsls	r2, r2, #7
 80021ca:	430a      	orrs	r2, r1
 80021cc:	6062      	str	r2, [r4, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <SystemClock_Config+0x72>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	4aa4      	ldr	r2, [pc, #656]	; (8002468 <SystemClock_Config+0x2f4>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	6023      	str	r3, [r4, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	4aa3      	ldr	r2, [pc, #652]	; (800246c <SystemClock_Config+0x2f8>)
 80021de:	049b      	lsls	r3, r3, #18
 80021e0:	0f5b      	lsrs	r3, r3, #29
 80021e2:	40da      	lsrs	r2, r3
 80021e4:	603a      	str	r2, [r7, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021e6:	4ba2      	ldr	r3, [pc, #648]	; (8002470 <SystemClock_Config+0x2fc>)
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	f007 fa51 	bl	8009690 <HAL_InitTick>
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d07c      	beq.n	80022ec <SystemClock_Config+0x178>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f2:	2207      	movs	r2, #7
 80021f4:	4b9f      	ldr	r3, [pc, #636]	; (8002474 <SystemClock_Config+0x300>)
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	4011      	ands	r1, r2
 80021fa:	2901      	cmp	r1, #1
 80021fc:	d80c      	bhi.n	8002218 <SystemClock_Config+0xa4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	2102      	movs	r1, #2
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	4390      	bics	r0, r2
 8002204:	4301      	orrs	r1, r0
 8002206:	6019      	str	r1, [r3, #0]
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	499b      	ldr	r1, [pc, #620]	; (8002478 <SystemClock_Config+0x304>)
 800220a:	6828      	ldr	r0, [r5, #0]
 800220c:	468c      	mov	ip, r1
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	4011      	ands	r1, r2
 8002212:	2902      	cmp	r1, #2
 8002214:	d000      	beq.n	8002218 <SystemClock_Config+0xa4>
 8002216:	e0b4      	b.n	8002382 <SystemClock_Config+0x20e>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002218:	22e0      	movs	r2, #224	; 0xe0
 800221a:	68a1      	ldr	r1, [r4, #8]
 800221c:	01d2      	lsls	r2, r2, #7
 800221e:	430a      	orrs	r2, r1
 8002220:	60a2      	str	r2, [r4, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002222:	68a2      	ldr	r2, [r4, #8]
 8002224:	4995      	ldr	r1, [pc, #596]	; (800247c <SystemClock_Config+0x308>)
 8002226:	400a      	ands	r2, r1
 8002228:	60a2      	str	r2, [r4, #8]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	6822      	ldr	r2, [r4, #0]
 800222c:	0192      	lsls	r2, r2, #6
 800222e:	d500      	bpl.n	8002232 <SystemClock_Config+0xbe>
 8002230:	e0ad      	b.n	800238e <SystemClock_Config+0x21a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002232:	2180      	movs	r1, #128	; 0x80
 8002234:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002236:	0549      	lsls	r1, r1, #21
    FlagStatus       pwrclkchanged = RESET;
 8002238:	2200      	movs	r2, #0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223a:	420b      	tst	r3, r1
 800223c:	d107      	bne.n	800224e <SystemClock_Config+0xda>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      pwrclkchanged = SET;
 8002240:	3201      	adds	r2, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	430b      	orrs	r3, r1
 8002244:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002246:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002248:	400b      	ands	r3, r1
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	9b01      	ldr	r3, [sp, #4]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	6831      	ldr	r1, [r6, #0]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4319      	orrs	r1, r3
 8002256:	6031      	str	r1, [r6, #0]
 8002258:	6828      	ldr	r0, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800225a:	6831      	ldr	r1, [r6, #0]
 800225c:	4219      	tst	r1, r3
 800225e:	d100      	bne.n	8002262 <SystemClock_Config+0xee>
 8002260:	e0d5      	b.n	800240e <SystemClock_Config+0x29a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002262:	23c0      	movs	r3, #192	; 0xc0
 8002264:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	400b      	ands	r3, r1

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800226a:	d010      	beq.n	800228e <SystemClock_Config+0x11a>
 800226c:	2180      	movs	r1, #128	; 0x80
 800226e:	0089      	lsls	r1, r1, #2
 8002270:	428b      	cmp	r3, r1
 8002272:	d00c      	beq.n	800228e <SystemClock_Config+0x11a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002274:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002276:	4b82      	ldr	r3, [pc, #520]	; (8002480 <SystemClock_Config+0x30c>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002278:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800227a:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_FORCE();
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	0249      	lsls	r1, r1, #9
 8002280:	4301      	orrs	r1, r0
 8002282:	65e1      	str	r1, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002284:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002286:	487f      	ldr	r0, [pc, #508]	; (8002484 <SystemClock_Config+0x310>)
 8002288:	4001      	ands	r1, r0
 800228a:	65e1      	str	r1, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800228c:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800228e:	07db      	lsls	r3, r3, #31
 8002290:	d506      	bpl.n	80022a0 <SystemClock_Config+0x12c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002292:	2102      	movs	r1, #2
 8002294:	6828      	ldr	r0, [r5, #0]
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	4e78      	ldr	r6, [pc, #480]	; (8002478 <SystemClock_Config+0x304>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002298:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800229a:	420b      	tst	r3, r1
 800229c:	d100      	bne.n	80022a0 <SystemClock_Config+0x12c>
 800229e:	e0ce      	b.n	800243e <SystemClock_Config+0x2ca>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80022a2:	4977      	ldr	r1, [pc, #476]	; (8002480 <SystemClock_Config+0x30c>)
 80022a4:	4019      	ands	r1, r3
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	430b      	orrs	r3, r1
 80022ac:	65e3      	str	r3, [r4, #92]	; 0x5c
 80022ae:	e0b3      	b.n	8002418 <SystemClock_Config+0x2a4>
    {
      if(wait_loop_index != 0U)
 80022b0:	2800      	cmp	r0, #0
 80022b2:	d100      	bne.n	80022b6 <SystemClock_Config+0x142>
 80022b4:	e775      	b.n	80021a2 <SystemClock_Config+0x2e>
      {
        wait_loop_index--;
 80022b6:	3801      	subs	r0, #1
 80022b8:	e76f      	b.n	800219a <SystemClock_Config+0x26>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d100      	bne.n	80022c0 <SystemClock_Config+0x14c>
 80022be:	e77e      	b.n	80021be <SystemClock_Config+0x4a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	4a69      	ldr	r2, [pc, #420]	; (8002468 <SystemClock_Config+0x2f4>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_HSI_ENABLE();
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	6822      	ldr	r2, [r4, #0]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d0:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_HSI_ENABLE();
 80022d2:	6023      	str	r3, [r4, #0]
 80022d4:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d6:	00d2      	lsls	r2, r2, #3
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	4213      	tst	r3, r2
 80022dc:	d037      	beq.n	800234e <SystemClock_Config+0x1da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	4a60      	ldr	r2, [pc, #384]	; (8002464 <SystemClock_Config+0x2f0>)
 80022e2:	401a      	ands	r2, r3
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	01db      	lsls	r3, r3, #7
 80022e8:	4313      	orrs	r3, r2
 80022ea:	6063      	str	r3, [r4, #4]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	68a3      	ldr	r3, [r4, #8]
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b18      	cmp	r3, #24
 80022f4:	d130      	bne.n	8002358 <SystemClock_Config+0x1e4>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80022f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022f8:	2238      	movs	r2, #56	; 0x38
 80022fa:	68a3      	ldr	r3, [r4, #8]
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d03d      	beq.n	800237e <SystemClock_Config+0x20a>
        __HAL_RCC_PLL_DISABLE();
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	4a60      	ldr	r2, [pc, #384]	; (8002488 <SystemClock_Config+0x314>)
 8002306:	4013      	ands	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002308:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800230a:	6023      	str	r3, [r4, #0]
 800230c:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230e:	0492      	lsls	r2, r2, #18
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	4213      	tst	r3, r2
 8002314:	d12e      	bne.n	8002374 <SystemClock_Config+0x200>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002316:	68e3      	ldr	r3, [r4, #12]
 8002318:	4a5c      	ldr	r2, [pc, #368]	; (800248c <SystemClock_Config+0x318>)
 800231a:	401a      	ands	r2, r3
 800231c:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <SystemClock_Config+0x31c>)
 800231e:	4313      	orrs	r3, r2
 8002320:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	6822      	ldr	r2, [r4, #0]
 8002326:	045b      	lsls	r3, r3, #17
 8002328:	4313      	orrs	r3, r2
 800232a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	68e2      	ldr	r2, [r4, #12]
 8002330:	055b      	lsls	r3, r3, #21
 8002332:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002334:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002336:	60e3      	str	r3, [r4, #12]
 8002338:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233a:	0492      	lsls	r2, r2, #18
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	4213      	tst	r3, r2
 8002340:	d000      	beq.n	8002344 <SystemClock_Config+0x1d0>
 8002342:	e756      	b.n	80021f2 <SystemClock_Config+0x7e>
 8002344:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	1a5b      	subs	r3, r3, r1
 8002348:	2b02      	cmp	r3, #2
 800234a:	d9f7      	bls.n	800233c <SystemClock_Config+0x1c8>
 800234c:	e751      	b.n	80021f2 <SystemClock_Config+0x7e>
 800234e:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002350:	1a5b      	subs	r3, r3, r1
 8002352:	2b02      	cmp	r3, #2
 8002354:	d9c0      	bls.n	80022d8 <SystemClock_Config+0x164>
 8002356:	e74c      	b.n	80021f2 <SystemClock_Config+0x7e>
        __HAL_RCC_LSI_ENABLE();
 8002358:	2301      	movs	r3, #1
 800235a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800235c:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800235e:	2202      	movs	r2, #2
        __HAL_RCC_LSI_ENABLE();
 8002360:	6623      	str	r3, [r4, #96]	; 0x60
 8002362:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002364:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002366:	4213      	tst	r3, r2
 8002368:	d1c6      	bne.n	80022f8 <SystemClock_Config+0x184>
 800236a:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	1a5b      	subs	r3, r3, r1
 800236e:	2b02      	cmp	r3, #2
 8002370:	d9f8      	bls.n	8002364 <SystemClock_Config+0x1f0>
 8002372:	e73e      	b.n	80021f2 <SystemClock_Config+0x7e>
 8002374:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	1a5b      	subs	r3, r3, r1
 8002378:	2b02      	cmp	r3, #2
 800237a:	d9c9      	bls.n	8002310 <SystemClock_Config+0x19c>
 800237c:	e739      	b.n	80021f2 <SystemClock_Config+0x7e>
        temp_pllckcfg = RCC->PLLCFGR;
 800237e:	68e3      	ldr	r3, [r4, #12]
 8002380:	e737      	b.n	80021f2 <SystemClock_Config+0x7e>
 8002382:	6829      	ldr	r1, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	1a09      	subs	r1, r1, r0
 8002386:	4561      	cmp	r1, ip
 8002388:	d800      	bhi.n	800238c <SystemClock_Config+0x218>
 800238a:	e740      	b.n	800220e <SystemClock_Config+0x9a>
 800238c:	e751      	b.n	8002232 <SystemClock_Config+0xbe>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800238e:	2107      	movs	r1, #7
 8002390:	68a2      	ldr	r2, [r4, #8]
 8002392:	438a      	bics	r2, r1
 8002394:	0011      	movs	r1, r2
 8002396:	2202      	movs	r2, #2
 8002398:	430a      	orrs	r2, r1
 800239a:	60a2      	str	r2, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	4a36      	ldr	r2, [pc, #216]	; (8002478 <SystemClock_Config+0x304>)
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	2138      	movs	r1, #56	; 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	4694      	mov	ip, r2
 80023a2:	6828      	ldr	r0, [r5, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a4:	68a2      	ldr	r2, [r4, #8]
 80023a6:	400a      	ands	r2, r1
 80023a8:	2a10      	cmp	r2, #16
 80023aa:	d11a      	bne.n	80023e2 <SystemClock_Config+0x26e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	3a09      	subs	r2, #9
 80023b0:	4011      	ands	r1, r2
 80023b2:	2902      	cmp	r1, #2
 80023b4:	d81a      	bhi.n	80023ec <SystemClock_Config+0x278>

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023b6:	68a3      	ldr	r3, [r4, #8]
 80023b8:	4a36      	ldr	r2, [pc, #216]	; (8002494 <SystemClock_Config+0x320>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023be:	f007 fc01 	bl	8009bc4 <HAL_RCC_GetSysClockFreq>
 80023c2:	68a3      	ldr	r3, [r4, #8]
 80023c4:	4a34      	ldr	r2, [pc, #208]	; (8002498 <SystemClock_Config+0x324>)
 80023c6:	051b      	lsls	r3, r3, #20
 80023c8:	0f1b      	lsrs	r3, r3, #28
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	18d3      	adds	r3, r2, r3
 80023ce:	221f      	movs	r2, #31
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4013      	ands	r3, r2
 80023d4:	40d8      	lsrs	r0, r3

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <SystemClock_Config+0x2fc>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023d8:	6038      	str	r0, [r7, #0]
  return HAL_InitTick(uwTickPrio);
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	f007 f958 	bl	8009690 <HAL_InitTick>
 80023e0:	e727      	b.n	8002232 <SystemClock_Config+0xbe>
 80023e2:	682a      	ldr	r2, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	1a12      	subs	r2, r2, r0
 80023e6:	4562      	cmp	r2, ip
 80023e8:	d9dc      	bls.n	80023a4 <SystemClock_Config+0x230>
 80023ea:	e722      	b.n	8002232 <SystemClock_Config+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ec:	2102      	movs	r1, #2
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	4390      	bics	r0, r2
 80023f2:	4301      	orrs	r1, r0
 80023f4:	6019      	str	r1, [r3, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f6:	4920      	ldr	r1, [pc, #128]	; (8002478 <SystemClock_Config+0x304>)
 80023f8:	6828      	ldr	r0, [r5, #0]
 80023fa:	468c      	mov	ip, r1
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	4011      	ands	r1, r2
 8002400:	2902      	cmp	r1, #2
 8002402:	d0d8      	beq.n	80023b6 <SystemClock_Config+0x242>
 8002404:	6829      	ldr	r1, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002406:	1a09      	subs	r1, r1, r0
 8002408:	4561      	cmp	r1, ip
 800240a:	d9f7      	bls.n	80023fc <SystemClock_Config+0x288>
 800240c:	e711      	b.n	8002232 <SystemClock_Config+0xbe>
 800240e:	6829      	ldr	r1, [r5, #0]
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002410:	1a09      	subs	r1, r1, r0
 8002412:	2902      	cmp	r1, #2
 8002414:	d800      	bhi.n	8002418 <SystemClock_Config+0x2a4>
 8002416:	e720      	b.n	800225a <SystemClock_Config+0xe6>
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002418:	2a01      	cmp	r2, #1
 800241a:	d103      	bne.n	8002424 <SystemClock_Config+0x2b0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800241e:	4a1f      	ldr	r2, [pc, #124]	; (800249c <SystemClock_Config+0x328>)
 8002420:	4013      	ands	r3, r2
 8002422:	63e3      	str	r3, [r4, #60]	; 0x3c
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002424:	2203      	movs	r2, #3
 8002426:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002428:	4393      	bics	r3, r2
 800242a:	6563      	str	r3, [r4, #84]	; 0x54
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800242c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800242e:	3209      	adds	r2, #9
 8002430:	4393      	bics	r3, r2
 8002432:	6563      	str	r3, [r4, #84]	; 0x54
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002434:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002436:	4a1a      	ldr	r2, [pc, #104]	; (80024a0 <SystemClock_Config+0x32c>)
 8002438:	4013      	ands	r3, r2
 800243a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800243c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800243e:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	1a1b      	subs	r3, r3, r0
 8002442:	42b3      	cmp	r3, r6
 8002444:	d800      	bhi.n	8002448 <SystemClock_Config+0x2d4>
 8002446:	e727      	b.n	8002298 <SystemClock_Config+0x124>
 8002448:	e7e6      	b.n	8002418 <SystemClock_Config+0x2a4>
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	40007000 	.word	0x40007000
 8002450:	fffff9ff 	.word	0xfffff9ff
 8002454:	20000000 	.word	0x20000000
 8002458:	000f4240 	.word	0x000f4240
 800245c:	40021000 	.word	0x40021000
 8002460:	200003e4 	.word	0x200003e4
 8002464:	ffff80ff 	.word	0xffff80ff
 8002468:	ffffc7ff 	.word	0xffffc7ff
 800246c:	00f42400 	.word	0x00f42400
 8002470:	20000004 	.word	0x20000004
 8002474:	40022000 	.word	0x40022000
 8002478:	00001388 	.word	0x00001388
 800247c:	fffff0ff 	.word	0xfffff0ff
 8002480:	fffffcff 	.word	0xfffffcff
 8002484:	fffeffff 	.word	0xfffeffff
 8002488:	feffffff 	.word	0xfeffffff
 800248c:	11c1808c 	.word	0x11c1808c
 8002490:	22020802 	.word	0x22020802
 8002494:	ffff8fff 	.word	0xffff8fff
 8002498:	08014b80 	.word	0x08014b80
 800249c:	efffffff 	.word	0xefffffff
 80024a0:	ffffcfff 	.word	0xffffcfff

080024a4 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 80024a4:	b40c      	push	{r2, r3}
 80024a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a8:	b0b1      	sub	sp, #196	; 0xc4
 80024aa:	ab36      	add	r3, sp, #216	; 0xd8
 80024ac:	cb04      	ldmia	r3!, {r2}
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80024ae:	ad0a      	add	r5, sp, #40	; 0x28
{
 80024b0:	0006      	movs	r6, r0
 80024b2:	000f      	movs	r7, r1
	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80024b4:	0028      	movs	r0, r5
 80024b6:	2196      	movs	r1, #150	; 0x96
	va_start(ap, format);
 80024b8:	9309      	str	r3, [sp, #36]	; 0x24
	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80024ba:	f011 ff4b 	bl	8014354 <__wrap_vsnprintf>
	if (ret >= LOG_BUFFER_MAX_SIZE)
 80024be:	2895      	cmp	r0, #149	; 0x95
 80024c0:	dd07      	ble.n	80024d2 <acc_integration_log+0x2e>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 80024c2:	23aa      	movs	r3, #170	; 0xaa
 80024c4:	aa04      	add	r2, sp, #16
 80024c6:	189b      	adds	r3, r3, r2
 80024c8:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <acc_integration_log+0x9c>)
 80024ca:	801a      	strh	r2, [r3, #0]
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 80024cc:	222e      	movs	r2, #46	; 0x2e
 80024ce:	ab2f      	add	r3, sp, #188	; 0xbc
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <acc_integration_log+0xa0>)

	uint32_t time_ms = acc_integration_get_time();
	char     level_ch;

	unsigned int timestamp    = time_ms;
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 80024d4:	491c      	ldr	r1, [pc, #112]	; (8002548 <acc_integration_log+0xa4>)
 80024d6:	681c      	ldr	r4, [r3, #0]
 80024d8:	0020      	movs	r0, r4
 80024da:	f00a fc9f 	bl	800ce1c <__udivsi3>
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 80024de:	491b      	ldr	r1, [pc, #108]	; (800254c <acc_integration_log+0xa8>)
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 80024e0:	9005      	str	r0, [sp, #20]
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 80024e2:	0020      	movs	r0, r4
 80024e4:	f00a fc9a 	bl	800ce1c <__udivsi3>
 80024e8:	213c      	movs	r1, #60	; 0x3c
 80024ea:	f00a fd1d 	bl	800cf28 <__aeabi_uidivmod>
 80024ee:	9106      	str	r1, [sp, #24]
	unsigned int seconds      = timestamp / 1000 % 60;
 80024f0:	21fa      	movs	r1, #250	; 0xfa
 80024f2:	0020      	movs	r0, r4
 80024f4:	0089      	lsls	r1, r1, #2
 80024f6:	f00a fc91 	bl	800ce1c <__udivsi3>
 80024fa:	213c      	movs	r1, #60	; 0x3c
 80024fc:	f00a fd14 	bl	800cf28 <__aeabi_uidivmod>
 8002500:	9107      	str	r1, [sp, #28]
	unsigned int milliseconds = timestamp % 1000;
 8002502:	21fa      	movs	r1, #250	; 0xfa
 8002504:	0020      	movs	r0, r4
 8002506:	0089      	lsls	r1, r1, #2
 8002508:	f00a fd0e 	bl	800cf28 <__aeabi_uidivmod>

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 800250c:	233f      	movs	r3, #63	; 0x3f
 800250e:	2e04      	cmp	r6, #4
 8002510:	d801      	bhi.n	8002516 <acc_integration_log+0x72>
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <acc_integration_log+0xac>)
 8002514:	5d9b      	ldrb	r3, [r3, r6]

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	9100      	str	r1, [sp, #0]
 800251a:	9b07      	ldr	r3, [sp, #28]
 800251c:	9a06      	ldr	r2, [sp, #24]
 800251e:	9905      	ldr	r1, [sp, #20]
 8002520:	9503      	str	r5, [sp, #12]
 8002522:	9702      	str	r7, [sp, #8]
 8002524:	480b      	ldr	r0, [pc, #44]	; (8002554 <acc_integration_log+0xb0>)
 8002526:	f011 fef3 	bl	8014310 <__wrap_printf>

	fflush(stdout);
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <acc_integration_log+0xb4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6898      	ldr	r0, [r3, #8]
 8002530:	f00f fd8c 	bl	801204c <fflush>

	va_end(ap);
}
 8002534:	b031      	add	sp, #196	; 0xc4
 8002536:	bcf0      	pop	{r4, r5, r6, r7}
 8002538:	bc08      	pop	{r3}
 800253a:	b002      	add	sp, #8
 800253c:	4718      	bx	r3
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	00002e2e 	.word	0x00002e2e
 8002544:	200003e4 	.word	0x200003e4
 8002548:	0036ee80 	.word	0x0036ee80
 800254c:	0000ea60 	.word	0x0000ea60
 8002550:	0801b32c 	.word	0x0801b32c
 8002554:	0801b30a 	.word	0x0801b30a
 8002558:	20000008 	.word	0x20000008

0800255c <acc_hal_integration_sensor_hibernate_exit>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800255c:	2280      	movs	r2, #128	; 0x80


static void acc_hal_integration_sensor_hibernate_exit(acc_sensor_id_t sensor_id)
{
 800255e:	b510      	push	{r4, lr}
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <acc_hal_integration_sensor_hibernate_exit+0x1c>)
 8002562:	0092      	lsls	r2, r2, #2
 8002564:	619a      	str	r2, [r3, #24]
	(void)sensor_id;  // Ignore parameter sensor_id

	// Turn on sensor supplies VIO_1 and VIO_2
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_SET);

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_1_HIBERNATE_EXIT);
 8002566:	2003      	movs	r0, #3
 8002568:	f7fe fcba 	bl	8000ee0 <pulse_hibernate_pin>

	acc_integration_sleep_us(ACC_WAIT_TIME_HIBERNATE_EXIT_MS * 1000);
 800256c:	f006 fc04 	bl	8008d78 <acc_integration_sleep_us.constprop.145>

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_2_HIBERNATE_EXIT);
 8002570:	200a      	movs	r0, #10
 8002572:	f7fe fcb5 	bl	8000ee0 <pulse_hibernate_pin>
}
 8002576:	bd10      	pop	{r4, pc}
 8002578:	50000400 	.word	0x50000400

0800257c <acc_hal_integration_sensor_power_off>:
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800257c:	2201      	movs	r2, #1
 800257e:	4b07      	ldr	r3, [pc, #28]	; (800259c <acc_hal_integration_sensor_power_off+0x20>)
{
 8002580:	b510      	push	{r4, lr}
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
 8002586:	22a0      	movs	r2, #160	; 0xa0
 8002588:	0049      	lsls	r1, r1, #1
 800258a:	05d2      	lsls	r2, r2, #23
 800258c:	6291      	str	r1, [r2, #40]	; 0x28
 800258e:	2280      	movs	r2, #128	; 0x80
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
	acc_integration_sleep_us(2000);
 8002594:	f006 fbf0 	bl	8008d78 <acc_integration_sleep_us.constprop.145>
}
 8002598:	bd10      	pop	{r4, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	50000400 	.word	0x50000400

080025a0 <acc_hal_integration_sensor_power_on>:
 80025a0:	2210      	movs	r2, #16
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <acc_hal_integration_sensor_power_on+0x24>)
{
 80025a4:	b510      	push	{r4, lr}
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025a8:	32f1      	adds	r2, #241	; 0xf1
 80025aa:	32ff      	adds	r2, #255	; 0xff
 80025ac:	619a      	str	r2, [r3, #24]
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	22a0      	movs	r2, #160	; 0xa0
 80025b2:	0049      	lsls	r1, r1, #1
 80025b4:	05d2      	lsls	r2, r2, #23
 80025b6:	6191      	str	r1, [r2, #24]
 80025b8:	2201      	movs	r2, #1
 80025ba:	619a      	str	r2, [r3, #24]
	acc_integration_sleep_us(2000);
 80025bc:	f006 fbdc 	bl	8008d78 <acc_integration_sleep_us.constprop.145>
}
 80025c0:	bd10      	pop	{r4, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	50000400 	.word	0x50000400

080025c8 <acc_hal_integration_sensor_transfer>:

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025c8:	48b4      	ldr	r0, [pc, #720]	; (800289c <acc_hal_integration_sensor_transfer+0x2d4>)
{
 80025ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025cc:	0003      	movs	r3, r0
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ce:	2401      	movs	r4, #1
 80025d0:	4db3      	ldr	r5, [pc, #716]	; (80028a0 <acc_hal_integration_sensor_transfer+0x2d8>)
 80025d2:	b085      	sub	sp, #20
 80025d4:	9101      	str	r1, [sp, #4]
 80025d6:	335c      	adds	r3, #92	; 0x5c
 80025d8:	62ac      	str	r4, [r5, #40]	; 0x28
 80025da:	781e      	ldrb	r6, [r3, #0]
 80025dc:	9503      	str	r5, [sp, #12]
 80025de:	42a6      	cmp	r6, r4
 80025e0:	d100      	bne.n	80025e4 <acc_hal_integration_sensor_transfer+0x1c>
 80025e2:	e0ec      	b.n	80027be <acc_hal_integration_sensor_transfer+0x1f6>
 80025e4:	4eaf      	ldr	r6, [pc, #700]	; (80028a4 <acc_hal_integration_sensor_transfer+0x2dc>)
 80025e6:	701c      	strb	r4, [r3, #0]
 80025e8:	6833      	ldr	r3, [r6, #0]
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  /* Init temporary variables */
  tmp_state           = hspi->State;
  tmp_mode            = hspi->Init.Mode;
 80025ea:	6845      	ldr	r5, [r0, #4]
 80025ec:	9302      	str	r3, [sp, #8]
  tmp_state           = hspi->State;
 80025ee:	0003      	movs	r3, r0
 80025f0:	335d      	adds	r3, #93	; 0x5d
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b2db      	uxtb	r3, r3
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025f6:	42a3      	cmp	r3, r4
 80025f8:	d00b      	beq.n	8002612 <acc_hal_integration_sensor_transfer+0x4a>
 80025fa:	3404      	adds	r4, #4
 80025fc:	34ff      	adds	r4, #255	; 0xff
 80025fe:	42a5      	cmp	r5, r4
 8002600:	d000      	beq.n	8002604 <acc_hal_integration_sensor_transfer+0x3c>
 8002602:	e0d4      	b.n	80027ae <acc_hal_integration_sensor_transfer+0x1e6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002604:	6884      	ldr	r4, [r0, #8]
 8002606:	2c00      	cmp	r4, #0
 8002608:	d000      	beq.n	800260c <acc_hal_integration_sensor_transfer+0x44>
 800260a:	e0d0      	b.n	80027ae <acc_hal_integration_sensor_transfer+0x1e6>
 800260c:	2b04      	cmp	r3, #4
 800260e:	d000      	beq.n	8002612 <acc_hal_integration_sensor_transfer+0x4a>
 8002610:	e0cd      	b.n	80027ae <acc_hal_integration_sensor_transfer+0x1e6>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002612:	9b01      	ldr	r3, [sp, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d100      	bne.n	800261a <acc_hal_integration_sensor_transfer+0x52>
 8002618:	e0c9      	b.n	80027ae <acc_hal_integration_sensor_transfer+0x1e6>
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 800261a:	b292      	uxth	r2, r2
 800261c:	2a00      	cmp	r2, #0
 800261e:	d100      	bne.n	8002622 <acc_hal_integration_sensor_transfer+0x5a>
 8002620:	e0c5      	b.n	80027ae <acc_hal_integration_sensor_transfer+0x1e6>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002622:	0003      	movs	r3, r0
 8002624:	335d      	adds	r3, #93	; 0x5d
 8002626:	781c      	ldrb	r4, [r3, #0]
 8002628:	2c04      	cmp	r4, #4
 800262a:	d001      	beq.n	8002630 <acc_hal_integration_sensor_transfer+0x68>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800262c:	2405      	movs	r4, #5
 800262e:	701c      	strb	r4, [r3, #0]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
 8002630:	0004      	movs	r4, r0
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002632:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8002634:	3408      	adds	r4, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002636:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 8002638:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800263a:	1d84      	adds	r4, r0, #6
 800263c:	87e2      	strh	r2, [r4, #62]	; 0x3e
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800263e:	24e0      	movs	r4, #224	; 0xe0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002640:	9901      	ldr	r1, [sp, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002642:	68c7      	ldr	r7, [r0, #12]
  hspi->RxISR       = NULL;
 8002644:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002646:	6503      	str	r3, [r0, #80]	; 0x50
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002648:	6401      	str	r1, [r0, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800264a:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount = Size;
 800264c:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800264e:	8782      	strh	r2, [r0, #60]	; 0x3c
 8002650:	6803      	ldr	r3, [r0, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002652:	00e4      	lsls	r4, r4, #3
 8002654:	42a7      	cmp	r7, r4
 8002656:	d801      	bhi.n	800265c <acc_hal_integration_sensor_transfer+0x94>
 8002658:	2a01      	cmp	r2, #1
 800265a:	d06c      	beq.n	8002736 <acc_hal_integration_sensor_transfer+0x16e>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800265c:	685c      	ldr	r4, [r3, #4]
 800265e:	4992      	ldr	r1, [pc, #584]	; (80028a8 <acc_hal_integration_sensor_transfer+0x2e0>)
 8002660:	400c      	ands	r4, r1
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002662:	605c      	str	r4, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002664:	2440      	movs	r4, #64	; 0x40
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	4221      	tst	r1, r4
 800266a:	d102      	bne.n	8002672 <acc_hal_integration_sensor_transfer+0xaa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	430c      	orrs	r4, r1
 8002670:	601c      	str	r4, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002672:	24e0      	movs	r4, #224	; 0xe0
 8002674:	00e4      	lsls	r4, r4, #3
 8002676:	42a7      	cmp	r7, r4
 8002678:	d800      	bhi.n	800267c <acc_hal_integration_sensor_transfer+0xb4>
 800267a:	e0a5      	b.n	80027c8 <acc_hal_integration_sensor_transfer+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800267c:	2d00      	cmp	r5, #0
 800267e:	d001      	beq.n	8002684 <acc_hal_integration_sensor_transfer+0xbc>
 8002680:	2a01      	cmp	r2, #1
 8002682:	d109      	bne.n	8002698 <acc_hal_integration_sensor_transfer+0xd0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002684:	9a01      	ldr	r2, [sp, #4]
 8002686:	8812      	ldrh	r2, [r2, #0]
 8002688:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800268a:	9a01      	ldr	r2, [sp, #4]
 800268c:	3202      	adds	r2, #2
 800268e:	6382      	str	r2, [r0, #56]	; 0x38
      hspi->TxXferCount--;
 8002690:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8002692:	3a01      	subs	r2, #1
 8002694:	b292      	uxth	r2, r2
 8002696:	87c2      	strh	r2, [r0, #62]	; 0x3e
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
        hspi->pRxBuffPtr += sizeof(uint16_t);
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002698:	2600      	movs	r6, #0
 800269a:	2201      	movs	r2, #1
 800269c:	0037      	movs	r7, r6
 800269e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a0:	4d7e      	ldr	r5, [pc, #504]	; (800289c <acc_hal_integration_sensor_transfer+0x2d4>)
 80026a2:	8fec      	ldrh	r4, [r5, #62]	; 0x3e
 80026a4:	2c00      	cmp	r4, #0
 80026a6:	d14b      	bne.n	8002740 <acc_hal_integration_sensor_transfer+0x178>
 80026a8:	002c      	movs	r4, r5
 80026aa:	3408      	adds	r4, #8
 80026ac:	8fe4      	ldrh	r4, [r4, #62]	; 0x3e
 80026ae:	2c00      	cmp	r4, #0
 80026b0:	d146      	bne.n	8002740 <acc_hal_integration_sensor_transfer+0x178>
 80026b2:	2f00      	cmp	r7, #0
 80026b4:	d000      	beq.n	80026b8 <acc_hal_integration_sensor_transfer+0xf0>
 80026b6:	63a8      	str	r0, [r5, #56]	; 0x38
 80026b8:	2e00      	cmp	r6, #0
 80026ba:	d001      	beq.n	80026c0 <acc_hal_integration_sensor_transfer+0xf8>
 80026bc:	9b01      	ldr	r3, [sp, #4]
 80026be:	642b      	str	r3, [r5, #64]	; 0x40
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 80026c0:	22c0      	movs	r2, #192	; 0xc0
 80026c2:	4c76      	ldr	r4, [pc, #472]	; (800289c <acc_hal_integration_sensor_transfer+0x2d4>)
 80026c4:	4877      	ldr	r0, [pc, #476]	; (80028a4 <acc_hal_integration_sensor_transfer+0x2dc>)
 80026c6:	6821      	ldr	r1, [r4, #0]
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80026c8:	4d78      	ldr	r5, [pc, #480]	; (80028ac <acc_hal_integration_sensor_transfer+0x2e4>)
  while ((hspi->Instance->SR & Fifo) != State)
 80026ca:	0152      	lsls	r2, r2, #5
 80026cc:	688b      	ldr	r3, [r1, #8]
 80026ce:	4213      	tst	r3, r2
 80026d0:	d008      	beq.n	80026e4 <acc_hal_integration_sensor_transfer+0x11c>
 80026d2:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80026d4:	9e02      	ldr	r6, [sp, #8]
 80026d6:	1b9b      	subs	r3, r3, r6
 80026d8:	42ab      	cmp	r3, r5
 80026da:	d9f7      	bls.n	80026cc <acc_hal_integration_sensor_transfer+0x104>
 80026dc:	f006 fa79 	bl	8008bd2 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.157>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026e0:	2800      	cmp	r0, #0
 80026e2:	d121      	bne.n	8002728 <acc_hal_integration_sensor_transfer+0x160>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026e4:	2280      	movs	r2, #128	; 0x80
 80026e6:	6821      	ldr	r1, [r4, #0]
 80026e8:	486e      	ldr	r0, [pc, #440]	; (80028a4 <acc_hal_integration_sensor_transfer+0x2dc>)
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80026ea:	4d70      	ldr	r5, [pc, #448]	; (80028ac <acc_hal_integration_sensor_transfer+0x2e4>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ec:	688b      	ldr	r3, [r1, #8]
 80026ee:	4213      	tst	r3, r2
 80026f0:	d008      	beq.n	8002704 <acc_hal_integration_sensor_transfer+0x13c>
 80026f2:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80026f4:	9e02      	ldr	r6, [sp, #8]
 80026f6:	1b9b      	subs	r3, r3, r6
 80026f8:	42ab      	cmp	r3, r5
 80026fa:	d9f7      	bls.n	80026ec <acc_hal_integration_sensor_transfer+0x124>
 80026fc:	f006 fa69 	bl	8008bd2 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.157>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002700:	2800      	cmp	r0, #0
 8002702:	d111      	bne.n	8002728 <acc_hal_integration_sensor_transfer+0x160>
  while ((hspi->Instance->SR & Fifo) != State)
 8002704:	21c0      	movs	r1, #192	; 0xc0
 8002706:	6822      	ldr	r2, [r4, #0]
 8002708:	4866      	ldr	r0, [pc, #408]	; (80028a4 <acc_hal_integration_sensor_transfer+0x2dc>)
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800270a:	4d68      	ldr	r5, [pc, #416]	; (80028ac <acc_hal_integration_sensor_transfer+0x2e4>)
  while ((hspi->Instance->SR & Fifo) != State)
 800270c:	00c9      	lsls	r1, r1, #3
 800270e:	6893      	ldr	r3, [r2, #8]
 8002710:	420b      	tst	r3, r1
 8002712:	d04c      	beq.n	80027ae <acc_hal_integration_sensor_transfer+0x1e6>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002714:	7b13      	ldrb	r3, [r2, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002716:	9e02      	ldr	r6, [sp, #8]
 8002718:	6803      	ldr	r3, [r0, #0]
 800271a:	1b9b      	subs	r3, r3, r6
 800271c:	42ab      	cmp	r3, r5
 800271e:	d9f6      	bls.n	800270e <acc_hal_integration_sensor_transfer+0x146>
 8002720:	f006 fa57 	bl	8008bd2 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.157>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002724:	2800      	cmp	r0, #0
 8002726:	d042      	beq.n	80027ae <acc_hal_integration_sensor_transfer+0x1e6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002728:	2320      	movs	r3, #32
 800272a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800272c:	4313      	orrs	r3, r2
 800272e:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002730:	2320      	movs	r3, #32
 8002732:	6623      	str	r3, [r4, #96]	; 0x60
 8002734:	e03b      	b.n	80027ae <acc_hal_integration_sensor_transfer+0x1e6>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002736:	2480      	movs	r4, #128	; 0x80
 8002738:	6859      	ldr	r1, [r3, #4]
 800273a:	0164      	lsls	r4, r4, #5
 800273c:	430c      	orrs	r4, r1
 800273e:	e790      	b.n	8002662 <acc_hal_integration_sensor_transfer+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002740:	689c      	ldr	r4, [r3, #8]
 8002742:	07a1      	lsls	r1, r4, #30
 8002744:	d50e      	bpl.n	8002764 <acc_hal_integration_sensor_transfer+0x19c>
 8002746:	4c55      	ldr	r4, [pc, #340]	; (800289c <acc_hal_integration_sensor_transfer+0x2d4>)
 8002748:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800274a:	2900      	cmp	r1, #0
 800274c:	d00a      	beq.n	8002764 <acc_hal_integration_sensor_transfer+0x19c>
 800274e:	2a01      	cmp	r2, #1
 8002750:	d108      	bne.n	8002764 <acc_hal_integration_sensor_transfer+0x19c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002752:	8807      	ldrh	r7, [r0, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002754:	3002      	adds	r0, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002756:	60df      	str	r7, [r3, #12]
        hspi->TxXferCount--;
 8002758:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
 800275a:	3f01      	subs	r7, #1
 800275c:	b2bf      	uxth	r7, r7
 800275e:	87e7      	strh	r7, [r4, #62]	; 0x3e
 8002760:	0017      	movs	r7, r2
        txallowed = 0U;
 8002762:	2200      	movs	r2, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002764:	2101      	movs	r1, #1
 8002766:	689c      	ldr	r4, [r3, #8]
 8002768:	420c      	tst	r4, r1
 800276a:	d010      	beq.n	800278e <acc_hal_integration_sensor_transfer+0x1c6>
 800276c:	4c4b      	ldr	r4, [pc, #300]	; (800289c <acc_hal_integration_sensor_transfer+0x2d4>)
 800276e:	3408      	adds	r4, #8
 8002770:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002772:	2900      	cmp	r1, #0
 8002774:	d00b      	beq.n	800278e <acc_hal_integration_sensor_transfer+0x1c6>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	9901      	ldr	r1, [sp, #4]
        hspi->RxXferCount--;
 800277a:	2601      	movs	r6, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800277c:	800a      	strh	r2, [r1, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800277e:	000a      	movs	r2, r1
 8002780:	3202      	adds	r2, #2
 8002782:	9201      	str	r2, [sp, #4]
        hspi->RxXferCount--;
 8002784:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002786:	3a01      	subs	r2, #1
 8002788:	b292      	uxth	r2, r2
 800278a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 800278c:	0032      	movs	r2, r6
 800278e:	4c45      	ldr	r4, [pc, #276]	; (80028a4 <acc_hal_integration_sensor_transfer+0x2dc>)
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002790:	9902      	ldr	r1, [sp, #8]
 8002792:	6824      	ldr	r4, [r4, #0]
 8002794:	1a64      	subs	r4, r4, r1
 8002796:	4945      	ldr	r1, [pc, #276]	; (80028ac <acc_hal_integration_sensor_transfer+0x2e4>)
 8002798:	428c      	cmp	r4, r1
 800279a:	d800      	bhi.n	800279e <acc_hal_integration_sensor_transfer+0x1d6>
 800279c:	e781      	b.n	80026a2 <acc_hal_integration_sensor_transfer+0xda>
 800279e:	4b3f      	ldr	r3, [pc, #252]	; (800289c <acc_hal_integration_sensor_transfer+0x2d4>)
 80027a0:	2f00      	cmp	r7, #0
 80027a2:	d000      	beq.n	80027a6 <acc_hal_integration_sensor_transfer+0x1de>
 80027a4:	6398      	str	r0, [r3, #56]	; 0x38
 80027a6:	2e00      	cmp	r6, #0
 80027a8:	d001      	beq.n	80027ae <acc_hal_integration_sensor_transfer+0x1e6>
 80027aa:	9a01      	ldr	r2, [sp, #4]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->State = HAL_SPI_STATE_READY;
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <acc_hal_integration_sensor_transfer+0x2d4>)
 80027b0:	2101      	movs	r1, #1
 80027b2:	001a      	movs	r2, r3
 80027b4:	325d      	adds	r2, #93	; 0x5d
 80027b6:	7011      	strb	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 80027b8:	2200      	movs	r2, #0
 80027ba:	335c      	adds	r3, #92	; 0x5c
 80027bc:	701a      	strb	r2, [r3, #0]
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027be:	2301      	movs	r3, #1
 80027c0:	9a03      	ldr	r2, [sp, #12]
 80027c2:	6193      	str	r3, [r2, #24]
}
 80027c4:	b005      	add	sp, #20
 80027c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027c8:	2d00      	cmp	r5, #0
 80027ca:	d001      	beq.n	80027d0 <acc_hal_integration_sensor_transfer+0x208>
 80027cc:	2a01      	cmp	r2, #1
 80027ce:	d10c      	bne.n	80027ea <acc_hal_integration_sensor_transfer+0x222>
      if (hspi->TxXferCount > 1U)
 80027d0:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 80027d2:	2a01      	cmp	r2, #1
 80027d4:	d951      	bls.n	800287a <acc_hal_integration_sensor_transfer+0x2b2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027d6:	9a01      	ldr	r2, [sp, #4]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d8:	9901      	ldr	r1, [sp, #4]
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027da:	8812      	ldrh	r2, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027dc:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027de:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80027e0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e2:	6381      	str	r1, [r0, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80027e4:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	87c3      	strh	r3, [r0, #62]	; 0x3e
        txallowed = 1U;
 80027ea:	2101      	movs	r1, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027ec:	2202      	movs	r2, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ee:	0003      	movs	r3, r0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027f0:	4694      	mov	ip, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027f2:	000c      	movs	r4, r1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027f4:	3308      	adds	r3, #8
 80027f6:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 80027f8:	2a00      	cmp	r2, #0
 80027fa:	d103      	bne.n	8002804 <acc_hal_integration_sensor_transfer+0x23c>
 80027fc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d100      	bne.n	8002804 <acc_hal_integration_sensor_transfer+0x23c>
 8002802:	e75d      	b.n	80026c0 <acc_hal_integration_sensor_transfer+0xf8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002804:	4665      	mov	r5, ip
 8002806:	6802      	ldr	r2, [r0, #0]
 8002808:	6897      	ldr	r7, [r2, #8]
 800280a:	422f      	tst	r7, r5
 800280c:	d011      	beq.n	8002832 <acc_hal_integration_sensor_transfer+0x26a>
 800280e:	8fc7      	ldrh	r7, [r0, #62]	; 0x3e
 8002810:	2f00      	cmp	r7, #0
 8002812:	d00e      	beq.n	8002832 <acc_hal_integration_sensor_transfer+0x26a>
 8002814:	2901      	cmp	r1, #1
 8002816:	d10c      	bne.n	8002832 <acc_hal_integration_sensor_transfer+0x26a>
        if (hspi->TxXferCount > 1U)
 8002818:	8fc7      	ldrh	r7, [r0, #62]	; 0x3e
 800281a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800281c:	2f01      	cmp	r7, #1
 800281e:	d935      	bls.n	800288c <acc_hal_integration_sensor_transfer+0x2c4>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002820:	880f      	ldrh	r7, [r1, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002822:	3102      	adds	r1, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002824:	60d7      	str	r7, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002826:	6381      	str	r1, [r0, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002828:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800282a:	3902      	subs	r1, #2
          hspi->TxXferCount--;
 800282c:	b289      	uxth	r1, r1
 800282e:	87c1      	strh	r1, [r0, #62]	; 0x3e
        txallowed = 0U;
 8002830:	2100      	movs	r1, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002832:	6897      	ldr	r7, [r2, #8]
 8002834:	4227      	tst	r7, r4
 8002836:	d018      	beq.n	800286a <acc_hal_integration_sensor_transfer+0x2a2>
 8002838:	8fdf      	ldrh	r7, [r3, #62]	; 0x3e
 800283a:	2f00      	cmp	r7, #0
 800283c:	d015      	beq.n	800286a <acc_hal_integration_sensor_transfer+0x2a2>
        if (hspi->RxXferCount > 1U)
 800283e:	8fdf      	ldrh	r7, [r3, #62]	; 0x3e
 8002840:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002842:	2f01      	cmp	r7, #1
 8002844:	d934      	bls.n	80028b0 <acc_hal_integration_sensor_transfer+0x2e8>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002846:	68d7      	ldr	r7, [r2, #12]
 8002848:	800f      	strh	r7, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800284a:	3102      	adds	r1, #2
 800284c:	6401      	str	r1, [r0, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800284e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8002850:	3902      	subs	r1, #2
 8002852:	b289      	uxth	r1, r1
 8002854:	87d9      	strh	r1, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8002856:	8fdf      	ldrh	r7, [r3, #62]	; 0x3e
        txallowed = 1U;
 8002858:	0021      	movs	r1, r4
          if (hspi->RxXferCount <= 1U)
 800285a:	2f01      	cmp	r7, #1
 800285c:	d805      	bhi.n	800286a <acc_hal_integration_sensor_transfer+0x2a2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800285e:	2580      	movs	r5, #128	; 0x80
 8002860:	6851      	ldr	r1, [r2, #4]
 8002862:	016d      	lsls	r5, r5, #5
 8002864:	4329      	orrs	r1, r5
 8002866:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 8002868:	0021      	movs	r1, r4
 800286a:	6832      	ldr	r2, [r6, #0]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800286c:	9d02      	ldr	r5, [sp, #8]
 800286e:	4f0f      	ldr	r7, [pc, #60]	; (80028ac <acc_hal_integration_sensor_transfer+0x2e4>)
 8002870:	1b52      	subs	r2, r2, r5
 8002872:	42ba      	cmp	r2, r7
 8002874:	d900      	bls.n	8002878 <acc_hal_integration_sensor_transfer+0x2b0>
 8002876:	e79a      	b.n	80027ae <acc_hal_integration_sensor_transfer+0x1e6>
 8002878:	e7bd      	b.n	80027f6 <acc_hal_integration_sensor_transfer+0x22e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800287a:	9a01      	ldr	r2, [sp, #4]
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002880:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002882:	3301      	adds	r3, #1
 8002884:	6383      	str	r3, [r0, #56]	; 0x38
        hspi->TxXferCount--;
 8002886:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8002888:	3b01      	subs	r3, #1
 800288a:	e7ac      	b.n	80027e6 <acc_hal_integration_sensor_transfer+0x21e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800288c:	7809      	ldrb	r1, [r1, #0]
 800288e:	7311      	strb	r1, [r2, #12]
          hspi->pTxBuffPtr++;
 8002890:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002892:	3101      	adds	r1, #1
 8002894:	6381      	str	r1, [r0, #56]	; 0x38
          hspi->TxXferCount--;
 8002896:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8002898:	3901      	subs	r1, #1
 800289a:	e7c7      	b.n	800282c <acc_hal_integration_sensor_transfer+0x264>
 800289c:	20000420 	.word	0x20000420
 80028a0:	50000400 	.word	0x50000400
 80028a4:	200003e4 	.word	0x200003e4
 80028a8:	ffffefff 	.word	0xffffefff
 80028ac:	00001387 	.word	0x00001387
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028b0:	7b12      	ldrb	r2, [r2, #12]
 80028b2:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 80028b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80028b6:	3201      	adds	r2, #1
 80028b8:	6402      	str	r2, [r0, #64]	; 0x40
          hspi->RxXferCount--;
 80028ba:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80028bc:	3a01      	subs	r2, #1
 80028be:	b292      	uxth	r2, r2
 80028c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028c2:	e7d1      	b.n	8002868 <acc_hal_integration_sensor_transfer+0x2a0>

080028c4 <acc_assert_fail>:
 80028c4:	b513      	push	{r0, r1, r4, lr}
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <acc_assert_fail+0x14>)
 80028c8:	9100      	str	r1, [sp, #0]
 80028ca:	0003      	movs	r3, r0
 80028cc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80028ce:	4903      	ldr	r1, [pc, #12]	; (80028dc <acc_assert_fail+0x18>)
 80028d0:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <acc_assert_fail+0x1c>)
 80028d2:	2000      	movs	r0, #0
 80028d4:	47a0      	blx	r4
 80028d6:	e7fe      	b.n	80028d6 <acc_assert_fail+0x12>
 80028d8:	200003e8 	.word	0x200003e8
 80028dc:	0801b347 	.word	0x0801b347
 80028e0:	0801b332 	.word	0x0801b332

080028e4 <do_phase_compensation_q3_12.lto_priv.250>:
 80028e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e6:	4c60      	ldr	r4, [pc, #384]	; (8002a68 <do_phase_compensation_q3_12.lto_priv.250+0x184>)
 80028e8:	44a5      	add	sp, r4
 80028ea:	9107      	str	r1, [sp, #28]
 80028ec:	9201      	str	r2, [sp, #4]
 80028ee:	9302      	str	r3, [sp, #8]
 80028f0:	2a7c      	cmp	r2, #124	; 0x7c
 80028f2:	d812      	bhi.n	800291a <do_phase_compensation_q3_12.lto_priv.250+0x36>
 80028f4:	0093      	lsls	r3, r2, #2
 80028f6:	9304      	str	r3, [sp, #16]
 80028f8:	9a04      	ldr	r2, [sp, #16]
 80028fa:	ab84      	add	r3, sp, #528	; 0x210
 80028fc:	189b      	adds	r3, r3, r2
 80028fe:	3bf7      	subs	r3, #247	; 0xf7
 8002900:	3bff      	subs	r3, #255	; 0xff
 8002902:	9306      	str	r3, [sp, #24]
 8002904:	2300      	movs	r3, #0
 8002906:	0007      	movs	r7, r0
 8002908:	9303      	str	r3, [sp, #12]
 800290a:	9b03      	ldr	r3, [sp, #12]
 800290c:	9a07      	ldr	r2, [sp, #28]
 800290e:	4293      	cmp	r3, r2
 8002910:	d107      	bne.n	8002922 <do_phase_compensation_q3_12.lto_priv.250+0x3e>
 8002912:	2385      	movs	r3, #133	; 0x85
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	449d      	add	sp, r3
 8002918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800291a:	217d      	movs	r1, #125	; 0x7d
 800291c:	4853      	ldr	r0, [pc, #332]	; (8002a6c <do_phase_compensation_q3_12.lto_priv.250+0x188>)
 800291e:	f7ff ffd1 	bl	80028c4 <acc_assert_fail>
 8002922:	9a04      	ldr	r2, [sp, #16]
 8002924:	0039      	movs	r1, r7
 8002926:	a808      	add	r0, sp, #32
 8002928:	f012 f8c2 	bl	8014ab0 <memcpy>
 800292c:	2200      	movs	r2, #0
 800292e:	2401      	movs	r4, #1
 8002930:	9b01      	ldr	r3, [sp, #4]
 8002932:	a984      	add	r1, sp, #528	; 0x210
 8002934:	1e58      	subs	r0, r3, #1
 8002936:	0083      	lsls	r3, r0, #2
 8002938:	18cb      	adds	r3, r1, r3
 800293a:	3bf1      	subs	r3, #241	; 0xf1
 800293c:	3bff      	subs	r3, #255	; 0xff
 800293e:	9208      	str	r2, [sp, #32]
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	aa08      	add	r2, sp, #32
 8002944:	9b01      	ldr	r3, [sp, #4]
 8002946:	42a3      	cmp	r3, r4
 8002948:	d810      	bhi.n	800296c <do_phase_compensation_q3_12.lto_priv.250+0x88>
 800294a:	9a06      	ldr	r2, [sp, #24]
 800294c:	3a04      	subs	r2, #4
 800294e:	3801      	subs	r0, #1
 8002950:	d22b      	bcs.n	80029aa <do_phase_compensation_q3_12.lto_priv.250+0xc6>
 8002952:	2400      	movs	r4, #0
 8002954:	9b04      	ldr	r3, [sp, #16]
 8002956:	42a3      	cmp	r3, r4
 8002958:	d144      	bne.n	80029e4 <do_phase_compensation_q3_12.lto_priv.250+0x100>
 800295a:	0039      	movs	r1, r7
 800295c:	2200      	movs	r2, #0
 800295e:	42a2      	cmp	r2, r4
 8002960:	d163      	bne.n	8002a2a <do_phase_compensation_q3_12.lto_priv.250+0x146>
 8002962:	9b03      	ldr	r3, [sp, #12]
 8002964:	18bf      	adds	r7, r7, r2
 8002966:	3301      	adds	r3, #1
 8002968:	9303      	str	r3, [sp, #12]
 800296a:	e7ce      	b.n	800290a <do_phase_compensation_q3_12.lto_priv.250+0x26>
 800296c:	2300      	movs	r3, #0
 800296e:	5ed5      	ldrsh	r5, [r2, r3]
 8002970:	2304      	movs	r3, #4
 8002972:	5ed1      	ldrsh	r1, [r2, r3]
 8002974:	9b02      	ldr	r3, [sp, #8]
 8002976:	1b49      	subs	r1, r1, r5
 8002978:	4359      	muls	r1, r3
 800297a:	17cb      	asrs	r3, r1, #31
 800297c:	051b      	lsls	r3, r3, #20
 800297e:	0d1b      	lsrs	r3, r3, #20
 8002980:	185b      	adds	r3, r3, r1
 8002982:	131b      	asrs	r3, r3, #12
 8002984:	195d      	adds	r5, r3, r5
 8002986:	8095      	strh	r5, [r2, #4]
 8002988:	2306      	movs	r3, #6
 800298a:	5ed1      	ldrsh	r1, [r2, r3]
 800298c:	2302      	movs	r3, #2
 800298e:	5ed5      	ldrsh	r5, [r2, r3]
 8002990:	9b02      	ldr	r3, [sp, #8]
 8002992:	1b49      	subs	r1, r1, r5
 8002994:	4359      	muls	r1, r3
 8002996:	17cb      	asrs	r3, r1, #31
 8002998:	051b      	lsls	r3, r3, #20
 800299a:	0d1b      	lsrs	r3, r3, #20
 800299c:	185b      	adds	r3, r3, r1
 800299e:	131b      	asrs	r3, r3, #12
 80029a0:	195d      	adds	r5, r3, r5
 80029a2:	80d5      	strh	r5, [r2, #6]
 80029a4:	3401      	adds	r4, #1
 80029a6:	3204      	adds	r2, #4
 80029a8:	e7cc      	b.n	8002944 <do_phase_compensation_q3_12.lto_priv.250+0x60>
 80029aa:	2306      	movs	r3, #6
 80029ac:	5ed1      	ldrsh	r1, [r2, r3]
 80029ae:	2302      	movs	r3, #2
 80029b0:	5ed4      	ldrsh	r4, [r2, r3]
 80029b2:	9b02      	ldr	r3, [sp, #8]
 80029b4:	1a64      	subs	r4, r4, r1
 80029b6:	435c      	muls	r4, r3
 80029b8:	17e3      	asrs	r3, r4, #31
 80029ba:	051b      	lsls	r3, r3, #20
 80029bc:	0d1b      	lsrs	r3, r3, #20
 80029be:	191b      	adds	r3, r3, r4
 80029c0:	131b      	asrs	r3, r3, #12
 80029c2:	185b      	adds	r3, r3, r1
 80029c4:	8053      	strh	r3, [r2, #2]
 80029c6:	2308      	movs	r3, #8
 80029c8:	5ed1      	ldrsh	r1, [r2, r3]
 80029ca:	2304      	movs	r3, #4
 80029cc:	5ed4      	ldrsh	r4, [r2, r3]
 80029ce:	9b02      	ldr	r3, [sp, #8]
 80029d0:	1a64      	subs	r4, r4, r1
 80029d2:	435c      	muls	r4, r3
 80029d4:	17e3      	asrs	r3, r4, #31
 80029d6:	051b      	lsls	r3, r3, #20
 80029d8:	0d1b      	lsrs	r3, r3, #20
 80029da:	191b      	adds	r3, r3, r4
 80029dc:	131b      	asrs	r3, r3, #12
 80029de:	185b      	adds	r3, r3, r1
 80029e0:	8093      	strh	r3, [r2, #4]
 80029e2:	e7b3      	b.n	800294c <do_phase_compensation_q3_12.lto_priv.250+0x68>
 80029e4:	a908      	add	r1, sp, #32
 80029e6:	1862      	adds	r2, r4, r1
 80029e8:	8850      	ldrh	r0, [r2, #2]
 80029ea:	ab08      	add	r3, sp, #32
 80029ec:	5b1b      	ldrh	r3, [r3, r4]
 80029ee:	0400      	lsls	r0, r0, #16
 80029f0:	4318      	orrs	r0, r3
 80029f2:	f008 f953 	bl	800ac9c <acc_alg_basic_math_q3_12_complex_scalar_abs>
 80029f6:	ab08      	add	r3, sp, #32
 80029f8:	1e05      	subs	r5, r0, #0
 80029fa:	d105      	bne.n	8002a08 <do_phase_compensation_q3_12.lto_priv.250+0x124>
 80029fc:	aa08      	add	r2, sp, #32
 80029fe:	5318      	strh	r0, [r3, r4]
 8002a00:	18a3      	adds	r3, r4, r2
 8002a02:	8058      	strh	r0, [r3, #2]
 8002a04:	3404      	adds	r4, #4
 8002a06:	e7a5      	b.n	8002954 <do_phase_compensation_q3_12.lto_priv.250+0x70>
 8002a08:	5f18      	ldrsh	r0, [r3, r4]
 8002a0a:	0029      	movs	r1, r5
 8002a0c:	0300      	lsls	r0, r0, #12
 8002a0e:	f00a fa8f 	bl	800cf30 <__divsi3>
 8002a12:	ab08      	add	r3, sp, #32
 8002a14:	18e6      	adds	r6, r4, r3
 8002a16:	5318      	strh	r0, [r3, r4]
 8002a18:	2302      	movs	r3, #2
 8002a1a:	5ef0      	ldrsh	r0, [r6, r3]
 8002a1c:	0029      	movs	r1, r5
 8002a1e:	0300      	lsls	r0, r0, #12
 8002a20:	4240      	negs	r0, r0
 8002a22:	f00a fa85 	bl	800cf30 <__divsi3>
 8002a26:	8070      	strh	r0, [r6, #2]
 8002a28:	e7ec      	b.n	8002a04 <do_phase_compensation_q3_12.lto_priv.250+0x120>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	5ece      	ldrsh	r6, [r1, r3]
 8002a2e:	ab08      	add	r3, sp, #32
 8002a30:	5ed3      	ldrsh	r3, [r2, r3]
 8002a32:	2502      	movs	r5, #2
 8002a34:	5f48      	ldrsh	r0, [r1, r5]
 8002a36:	9305      	str	r3, [sp, #20]
 8002a38:	4684      	mov	ip, r0
 8002a3a:	ab08      	add	r3, sp, #32
 8002a3c:	18d0      	adds	r0, r2, r3
 8002a3e:	2502      	movs	r5, #2
 8002a40:	5f45      	ldrsh	r5, [r0, r5]
 8002a42:	9805      	ldr	r0, [sp, #20]
 8002a44:	3204      	adds	r2, #4
 8002a46:	4370      	muls	r0, r6
 8002a48:	0003      	movs	r3, r0
 8002a4a:	4660      	mov	r0, ip
 8002a4c:	4368      	muls	r0, r5
 8002a4e:	1a18      	subs	r0, r3, r0
 8002a50:	1300      	asrs	r0, r0, #12
 8002a52:	8008      	strh	r0, [r1, #0]
 8002a54:	4660      	mov	r0, ip
 8002a56:	9b05      	ldr	r3, [sp, #20]
 8002a58:	4375      	muls	r5, r6
 8002a5a:	4343      	muls	r3, r0
 8002a5c:	195b      	adds	r3, r3, r5
 8002a5e:	131b      	asrs	r3, r3, #12
 8002a60:	804b      	strh	r3, [r1, #2]
 8002a62:	3104      	adds	r1, #4
 8002a64:	e77b      	b.n	800295e <do_phase_compensation_q3_12.lto_priv.250+0x7a>
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	fffffdec 	.word	0xfffffdec
 8002a6c:	0801b352 	.word	0x0801b352

08002a70 <get_package_range_coarse_max>:
 8002a70:	0003      	movs	r3, r0
 8002a72:	b570      	push	{r4, r5, r6, lr}
 8002a74:	33cc      	adds	r3, #204	; 0xcc
 8002a76:	881d      	ldrh	r5, [r3, #0]
 8002a78:	b086      	sub	sp, #24
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	d104      	bne.n	8002a88 <get_package_range_coarse_max+0x18>
 8002a7e:	2158      	movs	r1, #88	; 0x58
 8002a80:	480c      	ldr	r0, [pc, #48]	; (8002ab4 <get_package_range_coarse_max+0x44>)
 8002a82:	31ff      	adds	r1, #255	; 0xff
 8002a84:	f7ff ff1e 	bl	80028c4 <acc_assert_fail>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	2480      	movs	r4, #128	; 0x80
 8002a8c:	33ce      	adds	r3, #206	; 0xce
 8002a8e:	4669      	mov	r1, sp
 8002a90:	881e      	ldrh	r6, [r3, #0]
 8002a92:	f008 fcbf 	bl	800b414 <acc_cpd_linear_sweep_get_info>
 8002a96:	9b00      	ldr	r3, [sp, #0]
 8002a98:	0029      	movs	r1, r5
 8002a9a:	0124      	lsls	r4, r4, #4
 8002a9c:	207c      	movs	r0, #124	; 0x7c
 8002a9e:	1ae4      	subs	r4, r4, r3
 8002aa0:	f00a f9bc 	bl	800ce1c <__udivsi3>
 8002aa4:	1ba4      	subs	r4, r4, r6
 8002aa6:	0001      	movs	r1, r0
 8002aa8:	0020      	movs	r0, r4
 8002aaa:	f00a f9b7 	bl	800ce1c <__udivsi3>
 8002aae:	b006      	add	sp, #24
 8002ab0:	bd70      	pop	{r4, r5, r6, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	0801b0a1 	.word	0x0801b0a1

08002ab8 <coarse_count_for_next_package>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	0004      	movs	r4, r0
 8002abc:	6940      	ldr	r0, [r0, #20]
 8002abe:	89a3      	ldrh	r3, [r4, #12]
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	32c2      	adds	r2, #194	; 0xc2
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	8812      	ldrh	r2, [r2, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d002      	beq.n	8002ad4 <coarse_count_for_next_package+0x1c>
 8002ace:	f7ff ffcf 	bl	8002a70 <get_package_range_coarse_max>
 8002ad2:	bd70      	pop	{r4, r5, r6, pc}
 8002ad4:	8965      	ldrh	r5, [r4, #10]
 8002ad6:	f7ff ffcb 	bl	8002a70 <get_package_range_coarse_max>
 8002ada:	0001      	movs	r1, r0
 8002adc:	0028      	movs	r0, r5
 8002ade:	f00a fa23 	bl	800cf28 <__aeabi_uidivmod>
 8002ae2:	1e08      	subs	r0, r1, #0
 8002ae4:	d1f5      	bne.n	8002ad2 <coarse_count_for_next_package+0x1a>
 8002ae6:	6960      	ldr	r0, [r4, #20]
 8002ae8:	e7f1      	b.n	8002ace <coarse_count_for_next_package+0x16>

08002aea <update_program.lto_priv.284>:
 8002aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aec:	b089      	sub	sp, #36	; 0x24
 8002aee:	9101      	str	r1, [sp, #4]
 8002af0:	8981      	ldrh	r1, [r0, #12]
 8002af2:	6944      	ldr	r4, [r0, #20]
 8002af4:	0005      	movs	r5, r0
 8002af6:	2001      	movs	r0, #1
 8002af8:	4288      	cmp	r0, r1
 8002afa:	419b      	sbcs	r3, r3
 8002afc:	425b      	negs	r3, r3
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002b02:	9e01      	ldr	r6, [sp, #4]
 8002b04:	425a      	negs	r2, r3
 8002b06:	4153      	adcs	r3, r2
 8002b08:	0022      	movs	r2, r4
 8002b0a:	32c0      	adds	r2, #192	; 0xc0
 8002b0c:	9202      	str	r2, [sp, #8]
 8002b0e:	7812      	ldrb	r2, [r2, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	4332      	orrs	r2, r6
 8002b14:	001e      	movs	r6, r3
 8002b16:	4056      	eors	r6, r2
 8002b18:	9603      	str	r6, [sp, #12]
 8002b1a:	4281      	cmp	r1, r0
 8002b1c:	d803      	bhi.n	8002b26 <update_program.lto_priv.284+0x3c>
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d131      	bne.n	8002b86 <update_program.lto_priv.284+0x9c>
 8002b22:	b009      	add	sp, #36	; 0x24
 8002b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b26:	0027      	movs	r7, r4
 8002b28:	37c2      	adds	r7, #194	; 0xc2
 8002b2a:	8838      	ldrh	r0, [r7, #0]
 8002b2c:	3001      	adds	r0, #1
 8002b2e:	b280      	uxth	r0, r0
 8002b30:	f00a f9fa 	bl	800cf28 <__aeabi_uidivmod>
 8002b34:	b28e      	uxth	r6, r1
 8002b36:	803e      	strh	r6, [r7, #0]
 8002b38:	0020      	movs	r0, r4
 8002b3a:	2308      	movs	r3, #8
 8002b3c:	5eef      	ldrsh	r7, [r5, r3]
 8002b3e:	f7ff ff97 	bl	8002a70 <get_package_range_coarse_max>
 8002b42:	4346      	muls	r6, r0
 8002b44:	0028      	movs	r0, r5
 8002b46:	f7ff ffb7 	bl	8002ab8 <coarse_count_for_next_package>
 8002b4a:	0023      	movs	r3, r4
 8002b4c:	33c8      	adds	r3, #200	; 0xc8
 8002b4e:	19f7      	adds	r7, r6, r7
 8002b50:	6018      	str	r0, [r3, #0]
 8002b52:	9a00      	ldr	r2, [sp, #0]
 8002b54:	ab04      	add	r3, sp, #16
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	705a      	strb	r2, [r3, #1]
 8002b5a:	9a03      	ldr	r2, [sp, #12]
 8002b5c:	3801      	subs	r0, #1
 8002b5e:	709a      	strb	r2, [r3, #2]
 8002b60:	9b02      	ldr	r3, [sp, #8]
 8002b62:	9005      	str	r0, [sp, #20]
 8002b64:	9706      	str	r7, [sp, #24]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	9a01      	ldr	r2, [sp, #4]
 8002b6a:	a904      	add	r1, sp, #16
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	0013      	movs	r3, r2
 8002b70:	2201      	movs	r2, #1
 8002b72:	6828      	ldr	r0, [r5, #0]
 8002b74:	4053      	eors	r3, r2
 8002b76:	9307      	str	r3, [sp, #28]
 8002b78:	f008 fc61 	bl	800b43e <acc_cpd_linear_sweep_update_program>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d0d0      	beq.n	8002b22 <update_program.lto_priv.284+0x38>
 8002b80:	9b07      	ldr	r3, [sp, #28]
 8002b82:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002b84:	e7cd      	b.n	8002b22 <update_program.lto_priv.284+0x38>
 8002b86:	2000      	movs	r0, #0
 8002b88:	0007      	movs	r7, r0
 8002b8a:	e7e2      	b.n	8002b52 <update_program.lto_priv.284+0x68>

08002b8c <acc_sensor_protocol_r2_wait_for_specific_event>:
 8002b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	ae03      	add	r6, sp, #12
 8002b92:	0015      	movs	r5, r2
 8002b94:	0032      	movs	r2, r6
 8002b96:	0004      	movs	r4, r0
 8002b98:	001f      	movs	r7, r3
 8002b9a:	f008 fad3 	bl	800b144 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d00d      	beq.n	8002bbe <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8002ba2:	7832      	ldrb	r2, [r6, #0]
 8002ba4:	42aa      	cmp	r2, r5
 8002ba6:	d00c      	beq.n	8002bc2 <acc_sensor_protocol_r2_wait_for_specific_event+0x36>
 8002ba8:	9200      	str	r2, [sp, #0]
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8002bac:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8002bae:	9501      	str	r5, [sp, #4]
 8002bb0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	334c      	adds	r3, #76	; 0x4c
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8002bb8:	4908      	ldr	r1, [pc, #32]	; (8002bdc <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 8002bba:	47a0      	blx	r4
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	b005      	add	sp, #20
 8002bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc2:	2f00      	cmp	r7, #0
 8002bc4:	d0fb      	beq.n	8002bbe <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8002bc6:	0020      	movs	r0, r4
 8002bc8:	f7fe fca6 	bl	8001518 <acc_sensor_protocol_r2_ack_event>
 8002bcc:	e7f7      	b.n	8002bbe <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	08014b80 	.word	0x08014b80
 8002bd4:	200003e8 	.word	0x200003e8
 8002bd8:	0801b385 	.word	0x0801b385
 8002bdc:	0801af61 	.word	0x0801af61

08002be0 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8002be0:	b510      	push	{r4, lr}
 8002be2:	2301      	movs	r3, #1
 8002be4:	220b      	movs	r2, #11
 8002be6:	f7ff ffd1 	bl	8002b8c <acc_sensor_protocol_r2_wait_for_specific_event>
 8002bea:	bd10      	pop	{r4, pc}

08002bec <acc_sensor_protocol_r2_is_sensor_running>:
 8002bec:	b513      	push	{r0, r1, r4, lr}
 8002bee:	466b      	mov	r3, sp
 8002bf0:	1d9c      	adds	r4, r3, #6
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	0022      	movs	r2, r4
 8002bf6:	2111      	movs	r1, #17
 8002bf8:	8023      	strh	r3, [r4, #0]
 8002bfa:	f008 f881 	bl	800ad00 <internal_reg_read.lto_priv.640>
 8002bfe:	8820      	ldrh	r0, [r4, #0]
 8002c00:	0540      	lsls	r0, r0, #21
 8002c02:	0fc0      	lsrs	r0, r0, #31
 8002c04:	bd16      	pop	{r1, r2, r4, pc}

08002c06 <acc_sensor_protocol_r2_run_program>:
 8002c06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c08:	4d15      	ldr	r5, [pc, #84]	; (8002c60 <acc_sensor_protocol_r2_run_program+0x5a>)
 8002c0a:	0004      	movs	r4, r0
 8002c0c:	002b      	movs	r3, r5
 8002c0e:	3330      	adds	r3, #48	; 0x30
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	000e      	movs	r6, r1
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d906      	bls.n	8002c26 <acc_sensor_protocol_r2_run_program+0x20>
 8002c18:	9100      	str	r1, [sp, #0]
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	4a11      	ldr	r2, [pc, #68]	; (8002c64 <acc_sensor_protocol_r2_run_program+0x5e>)
 8002c1e:	4912      	ldr	r1, [pc, #72]	; (8002c68 <acc_sensor_protocol_r2_run_program+0x62>)
 8002c20:	2004      	movs	r0, #4
 8002c22:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8002c24:	47b8      	blx	r7
 8002c26:	0020      	movs	r0, r4
 8002c28:	f7ff ffe0 	bl	8002bec <acc_sensor_protocol_r2_is_sensor_running>
 8002c2c:	1e02      	subs	r2, r0, #0
 8002c2e:	d00a      	beq.n	8002c46 <acc_sensor_protocol_r2_run_program+0x40>
 8002c30:	0023      	movs	r3, r4
 8002c32:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <acc_sensor_protocol_r2_run_program+0x66>)
 8002c34:	490c      	ldr	r1, [pc, #48]	; (8002c68 <acc_sensor_protocol_r2_run_program+0x62>)
 8002c36:	2000      	movs	r0, #0
 8002c38:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8002c3a:	47a8      	blx	r5
 8002c3c:	0020      	movs	r0, r4
 8002c3e:	f008 f886 	bl	800ad4e <acc_sensor_diagnostics_r2_sensor_status>
 8002c42:	2000      	movs	r0, #0
 8002c44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c46:	2110      	movs	r1, #16
 8002c48:	0020      	movs	r0, r4
 8002c4a:	f006 fae7 	bl	800921c <acc_sensor_reg_write>
 8002c4e:	2280      	movs	r2, #128	; 0x80
 8002c50:	00d2      	lsls	r2, r2, #3
 8002c52:	0020      	movs	r0, r4
 8002c54:	4332      	orrs	r2, r6
 8002c56:	2110      	movs	r1, #16
 8002c58:	f006 fae0 	bl	800921c <acc_sensor_reg_write>
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	e7f1      	b.n	8002c44 <acc_sensor_protocol_r2_run_program+0x3e>
 8002c60:	200003e8 	.word	0x200003e8
 8002c64:	0801b3b0 	.word	0x0801b3b0
 8002c68:	0801af61 	.word	0x0801af61
 8002c6c:	0801b3d3 	.word	0x0801b3d3

08002c70 <start.lto_priv.290>:
 8002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c72:	6944      	ldr	r4, [r0, #20]
 8002c74:	2300      	movs	r3, #0
 8002c76:	0022      	movs	r2, r4
 8002c78:	32c2      	adds	r2, #194	; 0xc2
 8002c7a:	8013      	strh	r3, [r2, #0]
 8002c7c:	8053      	strh	r3, [r2, #2]
 8002c7e:	8093      	strh	r3, [r2, #4]
 8002c80:	3a16      	subs	r2, #22
 8002c82:	7817      	ldrb	r7, [r2, #0]
 8002c84:	3208      	adds	r2, #8
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	b087      	sub	sp, #28
 8002c8a:	9200      	str	r2, [sp, #0]
 8002c8c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002c8e:	0006      	movs	r6, r0
 8002c90:	9201      	str	r2, [sp, #4]
 8002c92:	9a00      	ldr	r2, [sp, #0]
 8002c94:	000d      	movs	r5, r1
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d002      	beq.n	8002ca0 <start.lto_priv.290+0x30>
 8002c9a:	429f      	cmp	r7, r3
 8002c9c:	d000      	beq.n	8002ca0 <start.lto_priv.290+0x30>
 8002c9e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002ca0:	0030      	movs	r0, r6
 8002ca2:	f7ff ff09 	bl	8002ab8 <coarse_count_for_next_package>
 8002ca6:	0023      	movs	r3, r4
 8002ca8:	33c8      	adds	r3, #200	; 0xc8
 8002caa:	6018      	str	r0, [r3, #0]
 8002cac:	4b29      	ldr	r3, [pc, #164]	; (8002d54 <start.lto_priv.290+0xe4>)
 8002cae:	001a      	movs	r2, r3
 8002cb0:	3230      	adds	r2, #48	; 0x30
 8002cb2:	7812      	ldrb	r2, [r2, #0]
 8002cb4:	2a03      	cmp	r2, #3
 8002cb6:	d904      	bls.n	8002cc2 <start.lto_priv.290+0x52>
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cba:	4a27      	ldr	r2, [pc, #156]	; (8002d58 <start.lto_priv.290+0xe8>)
 8002cbc:	4927      	ldr	r1, [pc, #156]	; (8002d5c <start.lto_priv.290+0xec>)
 8002cbe:	2004      	movs	r0, #4
 8002cc0:	4798      	blx	r3
 8002cc2:	cd06      	ldmia	r5!, {r1, r2}
 8002cc4:	0023      	movs	r3, r4
 8002cc6:	6830      	ldr	r0, [r6, #0]
 8002cc8:	f008 fbf2 	bl	800b4b0 <acc_cpd_linear_sweep_load_program>
 8002ccc:	1e05      	subs	r5, r0, #0
 8002cce:	d105      	bne.n	8002cdc <start.lto_priv.290+0x6c>
 8002cd0:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <start.lto_priv.290+0xe4>)
 8002cd2:	4a23      	ldr	r2, [pc, #140]	; (8002d60 <start.lto_priv.290+0xf0>)
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd6:	4921      	ldr	r1, [pc, #132]	; (8002d5c <start.lto_priv.290+0xec>)
 8002cd8:	4798      	blx	r3
 8002cda:	e006      	b.n	8002cea <start.lto_priv.290+0x7a>
 8002cdc:	4921      	ldr	r1, [pc, #132]	; (8002d64 <start.lto_priv.290+0xf4>)
 8002cde:	6830      	ldr	r0, [r6, #0]
 8002ce0:	f7ff ff91 	bl	8002c06 <acc_sensor_protocol_r2_run_program>
 8002ce4:	1e05      	subs	r5, r0, #0
 8002ce6:	d103      	bne.n	8002cf0 <start.lto_priv.290+0x80>
 8002ce8:	2500      	movs	r5, #0
 8002cea:	0028      	movs	r0, r5
 8002cec:	b007      	add	sp, #28
 8002cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf0:	2f00      	cmp	r7, #0
 8002cf2:	d024      	beq.n	8002d3e <start.lto_priv.290+0xce>
 8002cf4:	6931      	ldr	r1, [r6, #16]
 8002cf6:	6830      	ldr	r0, [r6, #0]
 8002cf8:	f7fe fb98 	bl	800142c <acc_sensor_protocol_r2_wait_for_sync_start>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d0f3      	beq.n	8002ce8 <start.lto_priv.290+0x78>
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <start.lto_priv.290+0xe4>)
 8002d02:	001a      	movs	r2, r3
 8002d04:	3230      	adds	r2, #48	; 0x30
 8002d06:	7812      	ldrb	r2, [r2, #0]
 8002d08:	2a01      	cmp	r2, #1
 8002d0a:	d904      	bls.n	8002d16 <start.lto_priv.290+0xa6>
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <start.lto_priv.290+0xf8>)
 8002d10:	4912      	ldr	r1, [pc, #72]	; (8002d5c <start.lto_priv.290+0xec>)
 8002d12:	2002      	movs	r0, #2
 8002d14:	4798      	blx	r3
 8002d16:	9b00      	ldr	r3, [sp, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d010      	beq.n	8002d3e <start.lto_priv.290+0xce>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	aa02      	add	r2, sp, #8
 8002d20:	7013      	strb	r3, [r2, #0]
 8002d22:	7053      	strb	r3, [r2, #1]
 8002d24:	2201      	movs	r2, #1
 8002d26:	9303      	str	r3, [sp, #12]
 8002d28:	9304      	str	r3, [sp, #16]
 8002d2a:	9b01      	ldr	r3, [sp, #4]
 8002d2c:	a902      	add	r1, sp, #8
 8002d2e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002d30:	6830      	ldr	r0, [r6, #0]
 8002d32:	708a      	strb	r2, [r1, #2]
 8002d34:	9305      	str	r3, [sp, #20]
 8002d36:	f008 fb82 	bl	800b43e <acc_cpd_linear_sweep_update_program>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d0d4      	beq.n	8002ce8 <start.lto_priv.290+0x78>
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <start.lto_priv.290+0xe4>)
 8002d40:	001a      	movs	r2, r3
 8002d42:	3230      	adds	r2, #48	; 0x30
 8002d44:	7812      	ldrb	r2, [r2, #0]
 8002d46:	2a03      	cmp	r2, #3
 8002d48:	d9cf      	bls.n	8002cea <start.lto_priv.290+0x7a>
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <start.lto_priv.290+0xfc>)
 8002d4e:	4903      	ldr	r1, [pc, #12]	; (8002d5c <start.lto_priv.290+0xec>)
 8002d50:	2004      	movs	r0, #4
 8002d52:	e7c1      	b.n	8002cd8 <start.lto_priv.290+0x68>
 8002d54:	200003e8 	.word	0x200003e8
 8002d58:	0801b402 	.word	0x0801b402
 8002d5c:	0801b427 	.word	0x0801b427
 8002d60:	0801b43b 	.word	0x0801b43b
 8002d64:	0000023a 	.word	0x0000023a
 8002d68:	0801b455 	.word	0x0801b455
 8002d6c:	0801b479 	.word	0x0801b479

08002d70 <measure_noise.lto_priv.277>:
 8002d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d72:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <measure_noise.lto_priv.277+0x114>)
 8002d74:	b0bb      	sub	sp, #236	; 0xec
 8002d76:	9203      	str	r2, [sp, #12]
 8002d78:	001a      	movs	r2, r3
 8002d7a:	3230      	adds	r2, #48	; 0x30
 8002d7c:	7812      	ldrb	r2, [r2, #0]
 8002d7e:	0004      	movs	r4, r0
 8002d80:	000e      	movs	r6, r1
 8002d82:	2a03      	cmp	r2, #3
 8002d84:	d904      	bls.n	8002d90 <measure_noise.lto_priv.277+0x20>
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	4a3f      	ldr	r2, [pc, #252]	; (8002e88 <measure_noise.lto_priv.277+0x118>)
 8002d8a:	4940      	ldr	r1, [pc, #256]	; (8002e8c <measure_noise.lto_priv.277+0x11c>)
 8002d8c:	2004      	movs	r0, #4
 8002d8e:	4798      	blx	r3
 8002d90:	6963      	ldr	r3, [r4, #20]
 8002d92:	22bc      	movs	r2, #188	; 0xbc
 8002d94:	0019      	movs	r1, r3
 8002d96:	a80b      	add	r0, sp, #44	; 0x2c
 8002d98:	6825      	ldr	r5, [r4, #0]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	f011 fe88 	bl	8014ab0 <memcpy>
 8002da0:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 8002da2:	2700      	movs	r7, #0
 8002da4:	00a3      	lsls	r3, r4, #2
 8002da6:	3b01      	subs	r3, #1
 8002da8:	9330      	str	r3, [sp, #192]	; 0xc0
 8002daa:	2301      	movs	r3, #1
 8002dac:	2202      	movs	r2, #2
 8002dae:	9321      	str	r3, [sp, #132]	; 0x84
 8002db0:	ab36      	add	r3, sp, #216	; 0xd8
 8002db2:	701f      	strb	r7, [r3, #0]
 8002db4:	9b00      	ldr	r3, [sp, #0]
 8002db6:	9231      	str	r2, [sp, #196]	; 0xc4
 8002db8:	9726      	str	r7, [sp, #152]	; 0x98
 8002dba:	9720      	str	r7, [sp, #128]	; 0x80
 8002dbc:	9738      	str	r7, [sp, #224]	; 0xe0
 8002dbe:	33cc      	adds	r3, #204	; 0xcc
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	6872      	ldr	r2, [r6, #4]
 8002dc4:	9302      	str	r3, [sp, #8]
 8002dc6:	6831      	ldr	r1, [r6, #0]
 8002dc8:	ab0b      	add	r3, sp, #44	; 0x2c
 8002dca:	0028      	movs	r0, r5
 8002dcc:	f008 fb70 	bl	800b4b0 <acc_cpd_linear_sweep_load_program>
 8002dd0:	492f      	ldr	r1, [pc, #188]	; (8002e90 <measure_noise.lto_priv.277+0x120>)
 8002dd2:	0028      	movs	r0, r5
 8002dd4:	f7ff ff17 	bl	8002c06 <acc_sensor_protocol_r2_run_program>
 8002dd8:	21fa      	movs	r1, #250	; 0xfa
 8002dda:	aa04      	add	r2, sp, #16
 8002ddc:	00c9      	lsls	r1, r1, #3
 8002dde:	0028      	movs	r0, r5
 8002de0:	f008 f9b0 	bl	800b144 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8002de4:	9001      	str	r0, [sp, #4]
 8002de6:	42b8      	cmp	r0, r7
 8002de8:	d03a      	beq.n	8002e60 <measure_noise.lto_priv.277+0xf0>
 8002dea:	9902      	ldr	r1, [sp, #8]
 8002dec:	207c      	movs	r0, #124	; 0x7c
 8002dee:	f00a f815 	bl	800ce1c <__udivsi3>
 8002df2:	04a4      	lsls	r4, r4, #18
 8002df4:	0c24      	lsrs	r4, r4, #16
 8002df6:	4344      	muls	r4, r0
 8002df8:	a905      	add	r1, sp, #20
 8002dfa:	9800      	ldr	r0, [sp, #0]
 8002dfc:	6836      	ldr	r6, [r6, #0]
 8002dfe:	f008 fb09 	bl	800b414 <acc_cpd_linear_sweep_get_info>
 8002e02:	9b05      	ldr	r3, [sp, #20]
 8002e04:	0031      	movs	r1, r6
 8002e06:	18e2      	adds	r2, r4, r3
 8002e08:	0028      	movs	r0, r5
 8002e0a:	f7fe fb01 	bl	8001410 <acc_sensor_protocol_r2_transfer_data>
 8002e0e:	0006      	movs	r6, r0
 8002e10:	0028      	movs	r0, r5
 8002e12:	f008 fa41 	bl	800b298 <acc_sensor_protocol_r2_stop.constprop.25>
 8002e16:	9800      	ldr	r0, [sp, #0]
 8002e18:	a905      	add	r1, sp, #20
 8002e1a:	f008 fafb 	bl	800b414 <acc_cpd_linear_sweep_get_info>
 8002e1e:	9b05      	ldr	r3, [sp, #20]
 8002e20:	0038      	movs	r0, r7
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	18f6      	adds	r6, r6, r3
 8002e26:	230e      	movs	r3, #14
 8002e28:	429c      	cmp	r4, r3
 8002e2a:	d81c      	bhi.n	8002e66 <measure_noise.lto_priv.277+0xf6>
 8002e2c:	0025      	movs	r5, r4
 8002e2e:	3d0e      	subs	r5, #14
 8002e30:	0029      	movs	r1, r5
 8002e32:	f009 fff3 	bl	800ce1c <__udivsi3>
 8002e36:	220e      	movs	r2, #14
 8002e38:	0001      	movs	r1, r0
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	4294      	cmp	r4, r2
 8002e3e:	d817      	bhi.n	8002e70 <measure_noise.lto_priv.277+0x100>
 8002e40:	0029      	movs	r1, r5
 8002e42:	f009 ffeb 	bl	800ce1c <__udivsi3>
 8002e46:	9b03      	ldr	r3, [sp, #12]
 8002e48:	8018      	strh	r0, [r3, #0]
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <measure_noise.lto_priv.277+0x114>)
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	3230      	adds	r2, #48	; 0x30
 8002e50:	7812      	ldrb	r2, [r2, #0]
 8002e52:	2a03      	cmp	r2, #3
 8002e54:	d904      	bls.n	8002e60 <measure_noise.lto_priv.277+0xf0>
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <measure_noise.lto_priv.277+0x124>)
 8002e5a:	490c      	ldr	r1, [pc, #48]	; (8002e8c <measure_noise.lto_priv.277+0x11c>)
 8002e5c:	2004      	movs	r0, #4
 8002e5e:	4798      	blx	r3
 8002e60:	9801      	ldr	r0, [sp, #4]
 8002e62:	b03b      	add	sp, #236	; 0xec
 8002e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e66:	005a      	lsls	r2, r3, #1
 8002e68:	5ab2      	ldrh	r2, [r6, r2]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	1880      	adds	r0, r0, r2
 8002e6e:	e7db      	b.n	8002e28 <measure_noise.lto_priv.277+0xb8>
 8002e70:	0053      	lsls	r3, r2, #1
 8002e72:	5af3      	ldrh	r3, [r6, r3]
 8002e74:	3201      	adds	r2, #1
 8002e76:	1a5b      	subs	r3, r3, r1
 8002e78:	17df      	asrs	r7, r3, #31
 8002e7a:	19db      	adds	r3, r3, r7
 8002e7c:	407b      	eors	r3, r7
 8002e7e:	18c0      	adds	r0, r0, r3
 8002e80:	e7dc      	b.n	8002e3c <measure_noise.lto_priv.277+0xcc>
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	200003e8 	.word	0x200003e8
 8002e88:	0801b49c 	.word	0x0801b49c
 8002e8c:	0801b427 	.word	0x0801b427
 8002e90:	0000023a 	.word	0x0000023a
 8002e94:	0801b4bd 	.word	0x0801b4bd

08002e98 <acc_sensor_manager_hibernate_enter.lto_priv.247>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002e9c:	6985      	ldr	r5, [r0, #24]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	6841      	ldr	r1, [r0, #4]
 8002ea2:	0028      	movs	r0, r5
 8002ea4:	4798      	blx	r3
 8002ea6:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <acc_sensor_manager_hibernate_enter.lto_priv.247+0x2c>)
 8002ea8:	1e04      	subs	r4, r0, #0
 8002eaa:	d105      	bne.n	8002eb8 <acc_sensor_manager_hibernate_enter.lto_priv.247+0x20>
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <acc_sensor_manager_hibernate_enter.lto_priv.247+0x30>)
 8002eb0:	4906      	ldr	r1, [pc, #24]	; (8002ecc <acc_sensor_manager_hibernate_enter.lto_priv.247+0x34>)
 8002eb2:	4798      	blx	r3
 8002eb4:	0020      	movs	r0, r4
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0fa      	beq.n	8002eb4 <acc_sensor_manager_hibernate_enter.lto_priv.247+0x1c>
 8002ebe:	0028      	movs	r0, r5
 8002ec0:	4798      	blx	r3
 8002ec2:	e7f7      	b.n	8002eb4 <acc_sensor_manager_hibernate_enter.lto_priv.247+0x1c>
 8002ec4:	200003e8 	.word	0x200003e8
 8002ec8:	0801b4dc 	.word	0x0801b4dc
 8002ecc:	0801b4fc 	.word	0x0801b4fc

08002ed0 <acc_rss_integration_mem_alloc_debug>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	4d05      	ldr	r5, [pc, #20]	; (8002ee8 <acc_rss_integration_mem_alloc_debug+0x18>)
 8002ed4:	68ab      	ldr	r3, [r5, #8]
 8002ed6:	4798      	blx	r3
 8002ed8:	1e04      	subs	r4, r0, #0
 8002eda:	d103      	bne.n	8002ee4 <acc_rss_integration_mem_alloc_debug+0x14>
 8002edc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002ede:	4a03      	ldr	r2, [pc, #12]	; (8002eec <acc_rss_integration_mem_alloc_debug+0x1c>)
 8002ee0:	4903      	ldr	r1, [pc, #12]	; (8002ef0 <acc_rss_integration_mem_alloc_debug+0x20>)
 8002ee2:	4798      	blx	r3
 8002ee4:	0020      	movs	r0, r4
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	200003e8 	.word	0x200003e8
 8002eec:	0801b50b 	.word	0x0801b50b
 8002ef0:	0801c1d9 	.word	0x0801c1d9

08002ef4 <acc_rss_integration_sensor_device_transfer>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	001e      	movs	r6, r3
 8002ef8:	000c      	movs	r4, r1
 8002efa:	0015      	movs	r5, r2
 8002efc:	000b      	movs	r3, r1
 8002efe:	3a01      	subs	r2, #1
 8002f00:	d209      	bcs.n	8002f16 <acc_rss_integration_sensor_device_transfer+0x22>
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <acc_rss_integration_sensor_device_transfer+0x38>)
 8002f04:	006a      	lsls	r2, r5, #1
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	0021      	movs	r1, r4
 8002f0a:	4798      	blx	r3
 8002f0c:	2e00      	cmp	r6, #0
 8002f0e:	d001      	beq.n	8002f14 <acc_rss_integration_sensor_device_transfer+0x20>
 8002f10:	3d01      	subs	r5, #1
 8002f12:	d205      	bcs.n	8002f20 <acc_rss_integration_sensor_device_transfer+0x2c>
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
 8002f16:	8819      	ldrh	r1, [r3, #0]
 8002f18:	ba49      	rev16	r1, r1
 8002f1a:	8019      	strh	r1, [r3, #0]
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	e7ee      	b.n	8002efe <acc_rss_integration_sensor_device_transfer+0xa>
 8002f20:	8823      	ldrh	r3, [r4, #0]
 8002f22:	ba5b      	rev16	r3, r3
 8002f24:	8023      	strh	r3, [r4, #0]
 8002f26:	3402      	adds	r4, #2
 8002f28:	e7f2      	b.n	8002f10 <acc_rss_integration_sensor_device_transfer+0x1c>
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	200003e8 	.word	0x200003e8

08002f30 <acc_sensor_r2_load_confmem>:
 8002f30:	3301      	adds	r3, #1
 8002f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f34:	005f      	lsls	r7, r3, #1
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <acc_sensor_r2_load_confmem+0x58>)
 8002f38:	0015      	movs	r5, r2
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	9003      	str	r0, [sp, #12]
 8002f40:	3230      	adds	r2, #48	; 0x30
 8002f42:	7812      	ldrb	r2, [r2, #0]
 8002f44:	000e      	movs	r6, r1
 8002f46:	2a03      	cmp	r2, #3
 8002f48:	d907      	bls.n	8002f5a <acc_sensor_r2_load_confmem+0x2a>
 8002f4a:	9100      	str	r1, [sp, #0]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <acc_sensor_r2_load_confmem+0x5c>)
 8002f50:	001c      	movs	r4, r3
 8002f52:	490f      	ldr	r1, [pc, #60]	; (8002f90 <acc_sensor_r2_load_confmem+0x60>)
 8002f54:	0003      	movs	r3, r0
 8002f56:	2004      	movs	r0, #4
 8002f58:	47a0      	blx	r4
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <acc_sensor_r2_load_confmem+0x58>)
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	4297      	cmp	r7, r2
 8002f60:	d906      	bls.n	8002f70 <acc_sensor_r2_load_confmem+0x40>
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <acc_sensor_r2_load_confmem+0x64>)
 8002f66:	490a      	ldr	r1, [pc, #40]	; (8002f90 <acc_sensor_r2_load_confmem+0x60>)
 8002f68:	2000      	movs	r0, #0
 8002f6a:	4798      	blx	r3
 8002f6c:	b005      	add	sp, #20
 8002f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f70:	23a0      	movs	r3, #160	; 0xa0
 8002f72:	01db      	lsls	r3, r3, #7
 8002f74:	431e      	orrs	r6, r3
 8002f76:	802e      	strh	r6, [r5, #0]
 8002f78:	087a      	lsrs	r2, r7, #1
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	0029      	movs	r1, r5
 8002f7e:	9803      	ldr	r0, [sp, #12]
 8002f80:	f7ff ffb8 	bl	8002ef4 <acc_rss_integration_sensor_device_transfer>
 8002f84:	e7f2      	b.n	8002f6c <acc_sensor_r2_load_confmem+0x3c>
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	200003e8 	.word	0x200003e8
 8002f8c:	0801b519 	.word	0x0801b519
 8002f90:	0801b53f 	.word	0x0801b53f
 8002f94:	0801b549 	.word	0x0801b549

08002f98 <acc_rss_integration_sensor_device_power_off>:
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	4b02      	ldr	r3, [pc, #8]	; (8002fa4 <acc_rss_integration_sensor_device_power_off+0xc>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	4798      	blx	r3
 8002fa0:	bd10      	pop	{r4, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	200003e8 	.word	0x200003e8

08002fa8 <acc_sensor_manager_prepare_measurement>:
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	0006      	movs	r6, r0
 8002fac:	b08b      	sub	sp, #44	; 0x2c
 8002fae:	0008      	movs	r0, r1
 8002fb0:	9304      	str	r3, [sp, #16]
 8002fb2:	9100      	str	r1, [sp, #0]
 8002fb4:	9203      	str	r2, [sp, #12]
 8002fb6:	f7fd fcdb 	bl	8000970 <acc_base_configuration_sensor_get>
 8002fba:	0007      	movs	r7, r0
 8002fbc:	9800      	ldr	r0, [sp, #0]
 8002fbe:	f7fd fbef 	bl	80007a0 <configuration_is_valid>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9302      	str	r3, [sp, #8]
 8002fc6:	4298      	cmp	r0, r3
 8002fc8:	d003      	beq.n	8002fd2 <acc_sensor_manager_prepare_measurement+0x2a>
 8002fca:	9b00      	ldr	r3, [sp, #0]
 8002fcc:	334c      	adds	r3, #76	; 0x4c
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	9302      	str	r3, [sp, #8]
 8002fd2:	2348      	movs	r3, #72	; 0x48
 8002fd4:	437b      	muls	r3, r7
 8002fd6:	3b48      	subs	r3, #72	; 0x48
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	4b59      	ldr	r3, [pc, #356]	; (8003140 <acc_sensor_manager_prepare_measurement+0x198>)
 8002fdc:	2100      	movs	r1, #0
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	9b01      	ldr	r3, [sp, #4]
 8002fe2:	18d2      	adds	r2, r2, r3
 8002fe4:	0013      	movs	r3, r2
 8002fe6:	3342      	adds	r3, #66	; 0x42
 8002fe8:	7019      	strb	r1, [r3, #0]
 8002fea:	4b56      	ldr	r3, [pc, #344]	; (8003144 <acc_sensor_manager_prepare_measurement+0x19c>)
 8002fec:	4956      	ldr	r1, [pc, #344]	; (8003148 <acc_sensor_manager_prepare_measurement+0x1a0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6451      	str	r1, [r2, #68]	; 0x44
 8002ff2:	9105      	str	r1, [sp, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <acc_sensor_manager_prepare_measurement+0x58>
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d000      	beq.n	8003000 <acc_sensor_manager_prepare_measurement+0x58>
 8002ffe:	e094      	b.n	800312a <acc_sensor_manager_prepare_measurement+0x182>
 8003000:	9b04      	ldr	r3, [sp, #16]
 8003002:	63b3      	str	r3, [r6, #56]	; 0x38
 8003004:	0013      	movs	r3, r2
 8003006:	3341      	adds	r3, #65	; 0x41
 8003008:	781d      	ldrb	r5, [r3, #0]
 800300a:	2d00      	cmp	r5, #0
 800300c:	d151      	bne.n	80030b2 <acc_sensor_manager_prepare_measurement+0x10a>
 800300e:	705d      	strb	r5, [r3, #1]
 8003010:	9b05      	ldr	r3, [sp, #20]
 8003012:	0038      	movs	r0, r7
 8003014:	6453      	str	r3, [r2, #68]	; 0x44
 8003016:	f7fd fb53 	bl	80006c0 <acc_rss_integration_sensor_device_power_on>
 800301a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800301c:	69b0      	ldr	r0, [r6, #24]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4798      	blx	r3
 8003022:	1e04      	subs	r4, r0, #0
 8003024:	d02d      	beq.n	8003082 <acc_sensor_manager_prepare_measurement+0xda>
 8003026:	0039      	movs	r1, r7
 8003028:	200b      	movs	r0, #11
 800302a:	f008 fead 	bl	800bd88 <acc_probes_execute_primitive_probe>
 800302e:	0029      	movs	r1, r5
 8003030:	220c      	movs	r2, #12
 8003032:	a807      	add	r0, sp, #28
 8003034:	f00f f918 	bl	8012268 <memset>
 8003038:	0030      	movs	r0, r6
 800303a:	9b05      	ldr	r3, [sp, #20]
 800303c:	4d40      	ldr	r5, [pc, #256]	; (8003140 <acc_sensor_manager_prepare_measurement+0x198>)
 800303e:	9308      	str	r3, [sp, #32]
 8003040:	9a01      	ldr	r2, [sp, #4]
 8003042:	682b      	ldr	r3, [r5, #0]
 8003044:	9904      	ldr	r1, [sp, #16]
 8003046:	189a      	adds	r2, r3, r2
 8003048:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800304a:	3018      	adds	r0, #24
 800304c:	68dc      	ldr	r4, [r3, #12]
 800304e:	ab07      	add	r3, sp, #28
 8003050:	47a0      	blx	r4
 8003052:	1e04      	subs	r4, r0, #0
 8003054:	d026      	beq.n	80030a4 <acc_sensor_manager_prepare_measurement+0xfc>
 8003056:	9a01      	ldr	r2, [sp, #4]
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	189b      	adds	r3, r3, r2
 800305c:	2201      	movs	r2, #1
 800305e:	3341      	adds	r3, #65	; 0x41
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	4b37      	ldr	r3, [pc, #220]	; (8003140 <acc_sensor_manager_prepare_measurement+0x198>)
 8003064:	9a01      	ldr	r2, [sp, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	189b      	adds	r3, r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	aa07      	add	r2, sp, #28
 800306e:	7810      	ldrb	r0, [r2, #0]
 8003070:	9a08      	ldr	r2, [sp, #32]
 8003072:	3142      	adds	r1, #66	; 0x42
 8003074:	7008      	strb	r0, [r1, #0]
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
 8003078:	0039      	movs	r1, r7
 800307a:	200c      	movs	r0, #12
 800307c:	f008 fe84 	bl	800bd88 <acc_probes_execute_primitive_probe>
 8003080:	e005      	b.n	800308e <acc_sensor_manager_prepare_measurement+0xe6>
 8003082:	4b32      	ldr	r3, [pc, #200]	; (800314c <acc_sensor_manager_prepare_measurement+0x1a4>)
 8003084:	4a32      	ldr	r2, [pc, #200]	; (8003150 <acc_sensor_manager_prepare_measurement+0x1a8>)
 8003086:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8003088:	4932      	ldr	r1, [pc, #200]	; (8003154 <acc_sensor_manager_prepare_measurement+0x1ac>)
 800308a:	003b      	movs	r3, r7
 800308c:	47a8      	blx	r5
 800308e:	0038      	movs	r0, r7
 8003090:	f7ff ff82 	bl	8002f98 <acc_rss_integration_sensor_device_power_off>
 8003094:	2c00      	cmp	r4, #0
 8003096:	d10c      	bne.n	80030b2 <acc_sensor_manager_prepare_measurement+0x10a>
 8003098:	1d30      	adds	r0, r6, #4
 800309a:	f7fd faab 	bl	80005f4 <acc_sweep_manager_release>
 800309e:	0020      	movs	r0, r4
 80030a0:	b00b      	add	sp, #44	; 0x2c
 80030a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a4:	4b29      	ldr	r3, [pc, #164]	; (800314c <acc_sensor_manager_prepare_measurement+0x1a4>)
 80030a6:	4a2c      	ldr	r2, [pc, #176]	; (8003158 <acc_sensor_manager_prepare_measurement+0x1b0>)
 80030a8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80030aa:	492a      	ldr	r1, [pc, #168]	; (8003154 <acc_sensor_manager_prepare_measurement+0x1ac>)
 80030ac:	003b      	movs	r3, r7
 80030ae:	47a8      	blx	r5
 80030b0:	e7d7      	b.n	8003062 <acc_sensor_manager_prepare_measurement+0xba>
 80030b2:	9b02      	ldr	r3, [sp, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <acc_sensor_manager_prepare_measurement+0x12e>
 80030b8:	9b03      	ldr	r3, [sp, #12]
 80030ba:	9a02      	ldr	r2, [sp, #8]
 80030bc:	829a      	strh	r2, [r3, #20]
 80030be:	230e      	movs	r3, #14
 80030c0:	a807      	add	r0, sp, #28
 80030c2:	7003      	strb	r3, [r0, #0]
 80030c4:	2220      	movs	r2, #32
 80030c6:	3b07      	subs	r3, #7
 80030c8:	9903      	ldr	r1, [sp, #12]
 80030ca:	6047      	str	r7, [r0, #4]
 80030cc:	6083      	str	r3, [r0, #8]
 80030ce:	2401      	movs	r4, #1
 80030d0:	f008 f9e0 	bl	800b494 <acc_probes_execute>
 80030d4:	e7e3      	b.n	800309e <acc_sensor_manager_prepare_measurement+0xf6>
 80030d6:	9800      	ldr	r0, [sp, #0]
 80030d8:	f7fd fb85 	bl	80007e6 <acc_base_configuration_noise_level_normalization_get>
 80030dc:	2800      	cmp	r0, #0
 80030de:	d0ee      	beq.n	80030be <acc_sensor_manager_prepare_measurement+0x116>
 80030e0:	69b5      	ldr	r5, [r6, #24]
 80030e2:	9b03      	ldr	r3, [sp, #12]
 80030e4:	0028      	movs	r0, r5
 80030e6:	3314      	adds	r3, #20
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	f7fd fae9 	bl	80006c0 <acc_rss_integration_sensor_device_power_on>
 80030ee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80030f0:	2148      	movs	r1, #72	; 0x48
 80030f2:	9301      	str	r3, [sp, #4]
 80030f4:	0033      	movs	r3, r6
 80030f6:	4369      	muls	r1, r5
 80030f8:	3318      	adds	r3, #24
 80030fa:	9302      	str	r3, [sp, #8]
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <acc_sensor_manager_prepare_measurement+0x198>)
 80030fe:	3948      	subs	r1, #72	; 0x48
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003104:	1859      	adds	r1, r3, r1
 8003106:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	4798      	blx	r3
 800310c:	1e04      	subs	r4, r0, #0
 800310e:	d006      	beq.n	800311e <acc_sensor_manager_prepare_measurement+0x176>
 8003110:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003112:	9a00      	ldr	r2, [sp, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	9901      	ldr	r1, [sp, #4]
 8003118:	9802      	ldr	r0, [sp, #8]
 800311a:	4798      	blx	r3
 800311c:	0004      	movs	r4, r0
 800311e:	0028      	movs	r0, r5
 8003120:	f7ff ff3a 	bl	8002f98 <acc_rss_integration_sensor_device_power_off>
 8003124:	2c00      	cmp	r4, #0
 8003126:	d1ca      	bne.n	80030be <acc_sensor_manager_prepare_measurement+0x116>
 8003128:	e7b6      	b.n	8003098 <acc_sensor_manager_prepare_measurement+0xf0>
 800312a:	9a04      	ldr	r2, [sp, #16]
 800312c:	9903      	ldr	r1, [sp, #12]
 800312e:	9800      	ldr	r0, [sp, #0]
 8003130:	4798      	blx	r3
 8003132:	1e04      	subs	r4, r0, #0
 8003134:	d0b3      	beq.n	800309e <acc_sensor_manager_prepare_measurement+0xf6>
 8003136:	9b02      	ldr	r3, [sp, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0c0      	beq.n	80030be <acc_sensor_manager_prepare_measurement+0x116>
 800313c:	e7bc      	b.n	80030b8 <acc_sensor_manager_prepare_measurement+0x110>
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	20000598 	.word	0x20000598
 8003144:	2000059c 	.word	0x2000059c
 8003148:	ff800000 	.word	0xff800000
 800314c:	200003e8 	.word	0x200003e8
 8003150:	0801b569 	.word	0x0801b569
 8003154:	0801b4fc 	.word	0x0801b4fc
 8003158:	0801b5a4 	.word	0x0801b5a4

0800315c <envelope_create_service>:
 800315c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315e:	b0ad      	sub	sp, #180	; 0xb4
 8003160:	9004      	str	r0, [sp, #16]
 8003162:	2290      	movs	r2, #144	; 0x90
 8003164:	a808      	add	r0, sp, #32
 8003166:	000d      	movs	r5, r1
 8003168:	f011 fca2 	bl	8014ab0 <memcpy>
 800316c:	a80f      	add	r0, sp, #60	; 0x3c
 800316e:	f7fd fb4d 	bl	800080c <acc_base_configuration_downsampling_factor_get>
 8003172:	0006      	movs	r6, r0
 8003174:	a80f      	add	r0, sp, #60	; 0x3c
 8003176:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8003178:	f7fd fb12 	bl	80007a0 <configuration_is_valid>
 800317c:	2800      	cmp	r0, #0
 800317e:	d006      	beq.n	800318e <envelope_create_service+0x32>
 8003180:	0030      	movs	r0, r6
 8003182:	f00a fa2f 	bl	800d5e4 <__aeabi_i2f>
 8003186:	1c21      	adds	r1, r4, #0
 8003188:	f009 fb16 	bl	800c7b8 <__aeabi_fmul>
 800318c:	9017      	str	r0, [sp, #92]	; 0x5c
 800318e:	a808      	add	r0, sp, #32
 8003190:	f7fd fc94 	bl	8000abc <acc_service_configuration_check>
 8003194:	2800      	cmp	r0, #0
 8003196:	d102      	bne.n	800319e <envelope_create_service+0x42>
 8003198:	2000      	movs	r0, #0
 800319a:	b02d      	add	sp, #180	; 0xb4
 800319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800319e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d106      	bne.n	80031b2 <envelope_create_service+0x56>
 80031a4:	4b41      	ldr	r3, [pc, #260]	; (80032ac <envelope_create_service+0x150>)
 80031a6:	4a42      	ldr	r2, [pc, #264]	; (80032b0 <envelope_create_service+0x154>)
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	4942      	ldr	r1, [pc, #264]	; (80032b4 <envelope_create_service+0x158>)
 80031ac:	2000      	movs	r0, #0
 80031ae:	4798      	blx	r3
 80031b0:	e7f2      	b.n	8003198 <envelope_create_service+0x3c>
 80031b2:	a80f      	add	r0, sp, #60	; 0x3c
 80031b4:	f7fd faf4 	bl	80007a0 <configuration_is_valid>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d0ed      	beq.n	8003198 <envelope_create_service+0x3c>
 80031bc:	a80f      	add	r0, sp, #60	; 0x3c
 80031be:	f7fd fa87 	bl	80006d0 <acc_base_configuration_check.part.6>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d0e8      	beq.n	8003198 <envelope_create_service+0x3c>
 80031c6:	a80f      	add	r0, sp, #60	; 0x3c
 80031c8:	f7fd fb20 	bl	800080c <acc_base_configuration_downsampling_factor_get>
 80031cc:	1e43      	subs	r3, r0, #1
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d905      	bls.n	80031e0 <envelope_create_service+0x84>
 80031d4:	2804      	cmp	r0, #4
 80031d6:	d003      	beq.n	80031e0 <envelope_create_service+0x84>
 80031d8:	4b34      	ldr	r3, [pc, #208]	; (80032ac <envelope_create_service+0x150>)
 80031da:	4a37      	ldr	r2, [pc, #220]	; (80032b8 <envelope_create_service+0x15c>)
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	e7e4      	b.n	80031aa <envelope_create_service+0x4e>
 80031e0:	a80f      	add	r0, sp, #60	; 0x3c
 80031e2:	f7fd fadd 	bl	80007a0 <configuration_is_valid>
 80031e6:	1e04      	subs	r4, r0, #0
 80031e8:	d003      	beq.n	80031f2 <envelope_create_service+0x96>
 80031ea:	236b      	movs	r3, #107	; 0x6b
 80031ec:	aa08      	add	r2, sp, #32
 80031ee:	189b      	adds	r3, r3, r2
 80031f0:	781c      	ldrb	r4, [r3, #0]
 80031f2:	a80f      	add	r0, sp, #60	; 0x3c
 80031f4:	f7fd fad4 	bl	80007a0 <configuration_is_valid>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d010      	beq.n	800321e <envelope_create_service+0xc2>
 80031fc:	2c00      	cmp	r4, #0
 80031fe:	d00e      	beq.n	800321e <envelope_create_service+0xc2>
 8003200:	ab15      	add	r3, sp, #84	; 0x54
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <envelope_create_service+0xc2>
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <envelope_create_service+0x150>)
 800320a:	001a      	movs	r2, r3
 800320c:	3230      	adds	r2, #48	; 0x30
 800320e:	7812      	ldrb	r2, [r2, #0]
 8003210:	2a00      	cmp	r2, #0
 8003212:	d004      	beq.n	800321e <envelope_create_service+0xc2>
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	4a29      	ldr	r2, [pc, #164]	; (80032bc <envelope_create_service+0x160>)
 8003218:	4926      	ldr	r1, [pc, #152]	; (80032b4 <envelope_create_service+0x158>)
 800321a:	2001      	movs	r0, #1
 800321c:	4798      	blx	r3
 800321e:	792b      	ldrb	r3, [r5, #4]
 8003220:	9a04      	ldr	r2, [sp, #16]
 8003222:	4c27      	ldr	r4, [pc, #156]	; (80032c0 <envelope_create_service+0x164>)
 8003224:	7213      	strb	r3, [r2, #8]
 8003226:	2280      	movs	r2, #128	; 0x80
 8003228:	0021      	movs	r1, r4
 800322a:	0052      	lsls	r2, r2, #1
 800322c:	2010      	movs	r0, #16
 800322e:	f005 ffa3 	bl	8009178 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8003232:	2202      	movs	r2, #2
 8003234:	9001      	str	r0, [sp, #4]
 8003236:	20ec      	movs	r0, #236	; 0xec
 8003238:	32ff      	adds	r2, #255	; 0xff
 800323a:	0021      	movs	r1, r4
 800323c:	0080      	lsls	r0, r0, #2
 800323e:	f005 ff9b 	bl	8009178 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8003242:	9b01      	ldr	r3, [sp, #4]
 8003244:	0007      	movs	r7, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <envelope_create_service+0xf2>
 800324a:	2800      	cmp	r0, #0
 800324c:	d112      	bne.n	8003274 <envelope_create_service+0x118>
 800324e:	9801      	ldr	r0, [sp, #4]
 8003250:	f7fd f9f2 	bl	8000638 <acc_rss_integration_mem_free>
 8003254:	0038      	movs	r0, r7
 8003256:	f7fd f9ef 	bl	8000638 <acc_rss_integration_mem_free>
 800325a:	2300      	movs	r3, #0
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	9b04      	ldr	r3, [sp, #16]
 8003260:	9a01      	ldr	r2, [sp, #4]
 8003262:	9801      	ldr	r0, [sp, #4]
 8003264:	611a      	str	r2, [r3, #16]
 8003266:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <envelope_create_service+0x168>)
 8003268:	9a04      	ldr	r2, [sp, #16]
 800326a:	60d3      	str	r3, [r2, #12]
 800326c:	1e43      	subs	r3, r0, #1
 800326e:	4198      	sbcs	r0, r3
 8003270:	b2c0      	uxtb	r0, r0
 8003272:	e792      	b.n	800319a <envelope_create_service+0x3e>
 8003274:	9b01      	ldr	r3, [sp, #4]
 8003276:	a90f      	add	r1, sp, #60	; 0x3c
 8003278:	6018      	str	r0, [r3, #0]
 800327a:	0003      	movs	r3, r0
 800327c:	3318      	adds	r3, #24
 800327e:	9306      	str	r3, [sp, #24]
 8003280:	23e3      	movs	r3, #227	; 0xe3
 8003282:	9804      	ldr	r0, [sp, #16]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3018      	adds	r0, #24
 8003288:	18fd      	adds	r5, r7, r3
 800328a:	002b      	movs	r3, r5
 800328c:	9a06      	ldr	r2, [sp, #24]
 800328e:	6778      	str	r0, [r7, #116]	; 0x74
 8003290:	f7fe f962 	bl	8001558 <acc_sensor_manager_prepare_radar_engine>
 8003294:	003b      	movs	r3, r7
 8003296:	896a      	ldrh	r2, [r5, #10]
 8003298:	3370      	adds	r3, #112	; 0x70
 800329a:	1e04      	subs	r4, r0, #0
 800329c:	801a      	strh	r2, [r3, #0]
 800329e:	d113      	bne.n	80032c8 <envelope_create_service+0x16c>
 80032a0:	9801      	ldr	r0, [sp, #4]
 80032a2:	f7fd f9e5 	bl	8000670 <disassemble.lto_priv.314>
 80032a6:	9401      	str	r4, [sp, #4]
 80032a8:	e7d9      	b.n	800325e <envelope_create_service+0x102>
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	200003e8 	.word	0x200003e8
 80032b0:	0801b5c7 	.word	0x0801b5c7
 80032b4:	0801af22 	.word	0x0801af22
 80032b8:	0801b602 	.word	0x0801b602
 80032bc:	0801b622 	.word	0x0801b622
 80032c0:	0801b667 	.word	0x0801b667
 80032c4:	08000b1d 	.word	0x08000b1d
 80032c8:	a80f      	add	r0, sp, #60	; 0x3c
 80032ca:	f7fd fa69 	bl	80007a0 <configuration_is_valid>
 80032ce:	9003      	str	r0, [sp, #12]
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d002      	beq.n	80032da <envelope_create_service+0x17e>
 80032d4:	ab15      	add	r3, sp, #84	; 0x54
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	9303      	str	r3, [sp, #12]
 80032da:	23e3      	movs	r3, #227	; 0xe3
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	5afa      	ldrh	r2, [r7, r3]
 80032e0:	89ab      	ldrh	r3, [r5, #12]
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d200      	bcs.n	80032ec <envelope_create_service+0x190>
 80032ea:	0013      	movs	r3, r2
 80032ec:	896c      	ldrh	r4, [r5, #10]
 80032ee:	89ea      	ldrh	r2, [r5, #14]
 80032f0:	18a4      	adds	r4, r4, r2
 80032f2:	0064      	lsls	r4, r4, #1
 80032f4:	429c      	cmp	r4, r3
 80032f6:	d200      	bcs.n	80032fa <envelope_create_service+0x19e>
 80032f8:	001c      	movs	r4, r3
 80032fa:	a80f      	add	r0, sp, #60	; 0x3c
 80032fc:	f7fd fa50 	bl	80007a0 <configuration_is_valid>
 8003300:	2600      	movs	r6, #0
 8003302:	42b0      	cmp	r0, r6
 8003304:	d001      	beq.n	800330a <envelope_create_service+0x1ae>
 8003306:	ab24      	add	r3, sp, #144	; 0x90
 8003308:	881e      	ldrh	r6, [r3, #0]
 800330a:	42a6      	cmp	r6, r4
 800330c:	d200      	bcs.n	8003310 <envelope_create_service+0x1b4>
 800330e:	0026      	movs	r6, r4
 8003310:	23eb      	movs	r3, #235	; 0xeb
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	50fe      	str	r6, [r7, r3]
 8003316:	9b03      	ldr	r3, [sp, #12]
 8003318:	0030      	movs	r0, r6
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <envelope_create_service+0x1ce>
 800331e:	23e3      	movs	r3, #227	; 0xe3
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	5af8      	ldrh	r0, [r7, r3]
 8003324:	0080      	lsls	r0, r0, #2
 8003326:	300a      	adds	r0, #10
 8003328:	1980      	adds	r0, r0, r6
 800332a:	2286      	movs	r2, #134	; 0x86
 800332c:	49e8      	ldr	r1, [pc, #928]	; (80036d0 <envelope_create_service+0x574>)
 800332e:	32ff      	adds	r2, #255	; 0xff
 8003330:	f7ff fdce 	bl	8002ed0 <acc_rss_integration_mem_alloc_debug>
 8003334:	23ea      	movs	r3, #234	; 0xea
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	1e04      	subs	r4, r0, #0
 800333a:	50f8      	str	r0, [r7, r3]
 800333c:	d0b0      	beq.n	80032a0 <envelope_create_service+0x144>
 800333e:	3b1c      	subs	r3, #28
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	885b      	ldrh	r3, [r3, #2]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	18c3      	adds	r3, r0, r3
 8003348:	9302      	str	r3, [sp, #8]
 800334a:	9305      	str	r3, [sp, #20]
 800334c:	9b03      	ldr	r3, [sp, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <envelope_create_service+0x1fc>
 8003352:	1d33      	adds	r3, r6, #4
 8003354:	18c3      	adds	r3, r0, r3
 8003356:	9305      	str	r3, [sp, #20]
 8003358:	003d      	movs	r5, r7
 800335a:	1dbb      	adds	r3, r7, #6
 800335c:	663b      	str	r3, [r7, #96]	; 0x60
 800335e:	1dfb      	adds	r3, r7, #7
 8003360:	667b      	str	r3, [r7, #100]	; 0x64
 8003362:	3305      	adds	r3, #5
 8003364:	66bb      	str	r3, [r7, #104]	; 0x68
 8003366:	9307      	str	r3, [sp, #28]
 8003368:	3b04      	subs	r3, #4
 800336a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800336c:	3514      	adds	r5, #20
 800336e:	3380      	adds	r3, #128	; 0x80
 8003370:	1d3a      	adds	r2, r7, #4
 8003372:	64fc      	str	r4, [r7, #76]	; 0x4c
 8003374:	65fd      	str	r5, [r7, #92]	; 0x5c
 8003376:	65bf      	str	r7, [r7, #88]	; 0x58
 8003378:	a80f      	add	r0, sp, #60	; 0x3c
 800337a:	601c      	str	r4, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	615d      	str	r5, [r3, #20]
 8003380:	641c      	str	r4, [r3, #64]	; 0x40
 8003382:	645c      	str	r4, [r3, #68]	; 0x44
 8003384:	655d      	str	r5, [r3, #84]	; 0x54
 8003386:	f7fd fa2e 	bl	80007e6 <acc_base_configuration_noise_level_normalization_get>
 800338a:	2800      	cmp	r0, #0
 800338c:	d004      	beq.n	8003398 <envelope_create_service+0x23c>
 800338e:	003b      	movs	r3, r7
 8003390:	33fc      	adds	r3, #252	; 0xfc
 8003392:	60dc      	str	r4, [r3, #12]
 8003394:	611c      	str	r4, [r3, #16]
 8003396:	621d      	str	r5, [r3, #32]
 8003398:	003b      	movs	r3, r7
 800339a:	33fc      	adds	r3, #252	; 0xfc
 800339c:	64dc      	str	r4, [r3, #76]	; 0x4c
 800339e:	651c      	str	r4, [r3, #80]	; 0x50
 80033a0:	661d      	str	r5, [r3, #96]	; 0x60
 80033a2:	23c2      	movs	r3, #194	; 0xc2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	50fc      	str	r4, [r7, r3]
 80033a8:	3304      	adds	r3, #4
 80033aa:	50fc      	str	r4, [r7, r3]
 80033ac:	9a07      	ldr	r2, [sp, #28]
 80033ae:	3310      	adds	r3, #16
 80033b0:	50fd      	str	r5, [r7, r3]
 80033b2:	330c      	adds	r3, #12
 80033b4:	50fa      	str	r2, [r7, r3]
 80033b6:	3324      	adds	r3, #36	; 0x24
 80033b8:	50fc      	str	r4, [r7, r3]
 80033ba:	3304      	adds	r3, #4
 80033bc:	50fc      	str	r4, [r7, r3]
 80033be:	3310      	adds	r3, #16
 80033c0:	50fd      	str	r5, [r7, r3]
 80033c2:	9a02      	ldr	r2, [sp, #8]
 80033c4:	3334      	adds	r3, #52	; 0x34
 80033c6:	50fc      	str	r4, [r7, r3]
 80033c8:	3304      	adds	r3, #4
 80033ca:	50fa      	str	r2, [r7, r3]
 80033cc:	3310      	adds	r3, #16
 80033ce:	50fd      	str	r5, [r7, r3]
 80033d0:	3328      	adds	r3, #40	; 0x28
 80033d2:	50fa      	str	r2, [r7, r3]
 80033d4:	3304      	adds	r3, #4
 80033d6:	50fa      	str	r2, [r7, r3]
 80033d8:	3310      	adds	r3, #16
 80033da:	50fd      	str	r5, [r7, r3]
 80033dc:	9b03      	ldr	r3, [sp, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <envelope_create_service+0x29c>
 80033e2:	23a8      	movs	r3, #168	; 0xa8
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	50fa      	str	r2, [r7, r3]
 80033e8:	19a6      	adds	r6, r4, r6
 80033ea:	330c      	adds	r3, #12
 80033ec:	9a05      	ldr	r2, [sp, #20]
 80033ee:	50fe      	str	r6, [r7, r3]
 80033f0:	3b08      	subs	r3, #8
 80033f2:	50fa      	str	r2, [r7, r3]
 80033f4:	3310      	adds	r3, #16
 80033f6:	50fd      	str	r5, [r7, r3]
 80033f8:	23b8      	movs	r3, #184	; 0xb8
 80033fa:	9a05      	ldr	r2, [sp, #20]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	50fa      	str	r2, [r7, r3]
 8003400:	3304      	adds	r3, #4
 8003402:	50fc      	str	r4, [r7, r3]
 8003404:	3310      	adds	r3, #16
 8003406:	50fd      	str	r5, [r7, r3]
 8003408:	3328      	adds	r3, #40	; 0x28
 800340a:	50fc      	str	r4, [r7, r3]
 800340c:	3304      	adds	r3, #4
 800340e:	50fc      	str	r4, [r7, r3]
 8003410:	3310      	adds	r3, #16
 8003412:	50fd      	str	r5, [r7, r3]
 8003414:	3328      	adds	r3, #40	; 0x28
 8003416:	50fc      	str	r4, [r7, r3]
 8003418:	3328      	adds	r3, #40	; 0x28
 800341a:	50ff      	str	r7, [r7, r3]
 800341c:	3328      	adds	r3, #40	; 0x28
 800341e:	18fc      	adds	r4, r7, r3
 8003420:	4bac      	ldr	r3, [pc, #688]	; (80036d4 <envelope_create_service+0x578>)
 8003422:	3330      	adds	r3, #48	; 0x30
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d900      	bls.n	800342c <envelope_create_service+0x2d0>
 800342a:	e202      	b.n	8003832 <envelope_create_service+0x6d6>
 800342c:	0023      	movs	r3, r4
 800342e:	9a06      	ldr	r2, [sp, #24]
 8003430:	a90f      	add	r1, sp, #60	; 0x3c
 8003432:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003434:	f7ff fdb8 	bl	8002fa8 <acc_sensor_manager_prepare_measurement>
 8003438:	1e04      	subs	r4, r0, #0
 800343a:	d100      	bne.n	800343e <envelope_create_service+0x2e2>
 800343c:	e730      	b.n	80032a0 <envelope_create_service+0x144>
 800343e:	003b      	movs	r3, r7
 8003440:	2400      	movs	r4, #0
 8003442:	4aa5      	ldr	r2, [pc, #660]	; (80036d8 <envelope_create_service+0x57c>)
 8003444:	33b0      	adds	r3, #176	; 0xb0
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	601c      	str	r4, [r3, #0]
 800344a:	4ba4      	ldr	r3, [pc, #656]	; (80036dc <envelope_create_service+0x580>)
 800344c:	4aa4      	ldr	r2, [pc, #656]	; (80036e0 <envelope_create_service+0x584>)
 800344e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	67da      	str	r2, [r3, #124]	; 0x7c
 8003454:	4aa3      	ldr	r2, [pc, #652]	; (80036e4 <envelope_create_service+0x588>)
 8003456:	3304      	adds	r3, #4
 8003458:	67da      	str	r2, [r3, #124]	; 0x7c
 800345a:	4aa3      	ldr	r2, [pc, #652]	; (80036e8 <envelope_create_service+0x58c>)
 800345c:	33b0      	adds	r3, #176	; 0xb0
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	4aa2      	ldr	r2, [pc, #648]	; (80036ec <envelope_create_service+0x590>)
 8003462:	a80f      	add	r0, sp, #60	; 0x3c
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	4aa2      	ldr	r2, [pc, #648]	; (80036f0 <envelope_create_service+0x594>)
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	4aa2      	ldr	r2, [pc, #648]	; (80036f4 <envelope_create_service+0x598>)
 800346c:	639a      	str	r2, [r3, #56]	; 0x38
 800346e:	2200      	movs	r2, #0
 8003470:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003472:	f7fd f9b8 	bl	80007e6 <acc_base_configuration_noise_level_normalization_get>
 8003476:	9403      	str	r4, [sp, #12]
 8003478:	2800      	cmp	r0, #0
 800347a:	d01a      	beq.n	80034b2 <envelope_create_service+0x356>
 800347c:	a80f      	add	r0, sp, #60	; 0x3c
 800347e:	f7fd f98f 	bl	80007a0 <configuration_is_valid>
 8003482:	2800      	cmp	r0, #0
 8003484:	d006      	beq.n	8003494 <envelope_create_service+0x338>
 8003486:	2366      	movs	r3, #102	; 0x66
 8003488:	aa08      	add	r2, sp, #32
 800348a:	189b      	adds	r3, r3, r2
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	221e      	movs	r2, #30
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <envelope_create_service+0x33c>
 8003494:	2296      	movs	r2, #150	; 0x96
 8003496:	0052      	lsls	r2, r2, #1
 8003498:	003b      	movs	r3, r7
 800349a:	33f8      	adds	r3, #248	; 0xf8
 800349c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800349e:	875a      	strh	r2, [r3, #58]	; 0x3a
 80034a0:	4a95      	ldr	r2, [pc, #596]	; (80036f8 <envelope_create_service+0x59c>)
 80034a2:	8719      	strh	r1, [r3, #56]	; 0x38
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80034a6:	4a95      	ldr	r2, [pc, #596]	; (80036fc <envelope_create_service+0x5a0>)
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	4a95      	ldr	r2, [pc, #596]	; (8003700 <envelope_create_service+0x5a4>)
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	4a95      	ldr	r2, [pc, #596]	; (8003704 <envelope_create_service+0x5a8>)
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	003b      	movs	r3, r7
 80034b4:	4a94      	ldr	r2, [pc, #592]	; (8003708 <envelope_create_service+0x5ac>)
 80034b6:	3339      	adds	r3, #57	; 0x39
 80034b8:	33ff      	adds	r3, #255	; 0xff
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38
 80034bc:	4a93      	ldr	r2, [pc, #588]	; (800370c <envelope_create_service+0x5b0>)
 80034be:	4994      	ldr	r1, [pc, #592]	; (8003710 <envelope_create_service+0x5b4>)
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	4a94      	ldr	r2, [pc, #592]	; (8003714 <envelope_create_service+0x5b8>)
 80034c4:	a80f      	add	r0, sp, #60	; 0x3c
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	4a93      	ldr	r2, [pc, #588]	; (8003718 <envelope_create_service+0x5bc>)
 80034ca:	60da      	str	r2, [r3, #12]
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	6419      	str	r1, [r3, #64]	; 0x40
 80034d0:	679a      	str	r2, [r3, #120]	; 0x78
 80034d2:	4992      	ldr	r1, [pc, #584]	; (800371c <envelope_create_service+0x5c0>)
 80034d4:	9a03      	ldr	r2, [sp, #12]
 80034d6:	6459      	str	r1, [r3, #68]	; 0x44
 80034d8:	67da      	str	r2, [r3, #124]	; 0x7c
 80034da:	4991      	ldr	r1, [pc, #580]	; (8003720 <envelope_create_service+0x5c4>)
 80034dc:	4a91      	ldr	r2, [pc, #580]	; (8003724 <envelope_create_service+0x5c8>)
 80034de:	6499      	str	r1, [r3, #72]	; 0x48
 80034e0:	675a      	str	r2, [r3, #116]	; 0x74
 80034e2:	23e3      	movs	r3, #227	; 0xe3
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	18fc      	adds	r4, r7, r3
 80034e8:	8923      	ldrh	r3, [r4, #8]
 80034ea:	9302      	str	r3, [sp, #8]
 80034ec:	88e6      	ldrh	r6, [r4, #6]
 80034ee:	f7fd f957 	bl	80007a0 <configuration_is_valid>
 80034f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80034f4:	2800      	cmp	r0, #0
 80034f6:	d100      	bne.n	80034fa <envelope_create_service+0x39e>
 80034f8:	2500      	movs	r5, #0
 80034fa:	003b      	movs	r3, r7
 80034fc:	218b      	movs	r1, #139	; 0x8b
 80034fe:	4a8a      	ldr	r2, [pc, #552]	; (8003728 <envelope_create_service+0x5cc>)
 8003500:	33b9      	adds	r3, #185	; 0xb9
 8003502:	33ff      	adds	r3, #255	; 0xff
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	4a89      	ldr	r2, [pc, #548]	; (800372c <envelope_create_service+0x5d0>)
 8003508:	641e      	str	r6, [r3, #64]	; 0x40
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	4a88      	ldr	r2, [pc, #544]	; (8003730 <envelope_create_service+0x5d4>)
 800350e:	05c9      	lsls	r1, r1, #23
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	9a02      	ldr	r2, [sp, #8]
 8003514:	1c28      	adds	r0, r5, #0
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c
 8003518:	f009 f94e 	bl	800c7b8 <__aeabi_fmul>
 800351c:	2100      	movs	r1, #0
 800351e:	1c06      	adds	r6, r0, #0
 8003520:	1c28      	adds	r0, r5, #0
 8003522:	f009 fe5f 	bl	800d1e4 <__aeabi_fcmpge>
 8003526:	2800      	cmp	r0, #0
 8003528:	d100      	bne.n	800352c <envelope_create_service+0x3d0>
 800352a:	e186      	b.n	800383a <envelope_create_service+0x6de>
 800352c:	21fc      	movs	r1, #252	; 0xfc
 800352e:	0589      	lsls	r1, r1, #22
 8003530:	1c30      	adds	r0, r6, #0
 8003532:	f008 fe95 	bl	800c260 <__aeabi_fadd>
 8003536:	f00a f835 	bl	800d5a4 <__aeabi_f2iz>
 800353a:	003b      	movs	r3, r7
 800353c:	33bf      	adds	r3, #191	; 0xbf
 800353e:	4a7d      	ldr	r2, [pc, #500]	; (8003734 <envelope_create_service+0x5d8>)
 8003540:	33ff      	adds	r3, #255	; 0xff
 8003542:	87d8      	strh	r0, [r3, #62]	; 0x3e
 8003544:	3b06      	subs	r3, #6
 8003546:	639a      	str	r2, [r3, #56]	; 0x38
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	88a2      	ldrh	r2, [r4, #4]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	0092      	lsls	r2, r2, #2
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
 8003554:	4a78      	ldr	r2, [pc, #480]	; (8003738 <envelope_create_service+0x5dc>)
 8003556:	a80f      	add	r0, sp, #60	; 0x3c
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	4a78      	ldr	r2, [pc, #480]	; (800373c <envelope_create_service+0x5e0>)
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	4a78      	ldr	r2, [pc, #480]	; (8003740 <envelope_create_service+0x5e4>)
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	f7fd f91d 	bl	80007a0 <configuration_is_valid>
 8003566:	1e06      	subs	r6, r0, #0
 8003568:	d001      	beq.n	800356e <envelope_create_service+0x412>
 800356a:	ab16      	add	r3, sp, #88	; 0x58
 800356c:	781e      	ldrb	r6, [r3, #0]
 800356e:	a80f      	add	r0, sp, #60	; 0x3c
 8003570:	f7fd f916 	bl	80007a0 <configuration_is_valid>
 8003574:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8003576:	2800      	cmp	r0, #0
 8003578:	d100      	bne.n	800357c <envelope_create_service+0x420>
 800357a:	2400      	movs	r4, #0
 800357c:	238f      	movs	r3, #143	; 0x8f
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	18fd      	adds	r5, r7, r3
 8003582:	4b70      	ldr	r3, [pc, #448]	; (8003744 <envelope_create_service+0x5e8>)
 8003584:	606b      	str	r3, [r5, #4]
 8003586:	4b70      	ldr	r3, [pc, #448]	; (8003748 <envelope_create_service+0x5ec>)
 8003588:	60ab      	str	r3, [r5, #8]
 800358a:	4b70      	ldr	r3, [pc, #448]	; (800374c <envelope_create_service+0x5f0>)
 800358c:	60eb      	str	r3, [r5, #12]
 800358e:	2e00      	cmp	r6, #0
 8003590:	d100      	bne.n	8003594 <envelope_create_service+0x438>
 8003592:	e155      	b.n	8003840 <envelope_create_service+0x6e4>
 8003594:	496e      	ldr	r1, [pc, #440]	; (8003750 <envelope_create_service+0x5f4>)
 8003596:	1c20      	adds	r0, r4, #0
 8003598:	f009 fe06 	bl	800d1a8 <__aeabi_fcmplt>
 800359c:	9002      	str	r0, [sp, #8]
 800359e:	2800      	cmp	r0, #0
 80035a0:	d000      	beq.n	80035a4 <envelope_create_service+0x448>
 80035a2:	e150      	b.n	8003846 <envelope_create_service+0x6ea>
 80035a4:	496b      	ldr	r1, [pc, #428]	; (8003754 <envelope_create_service+0x5f8>)
 80035a6:	1c20      	adds	r0, r4, #0
 80035a8:	f009 fe12 	bl	800d1d0 <__aeabi_fcmpgt>
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d000      	beq.n	80035b2 <envelope_create_service+0x456>
 80035b0:	e14b      	b.n	800384a <envelope_create_service+0x6ee>
 80035b2:	63ec      	str	r4, [r5, #60]	; 0x3c
 80035b4:	2e00      	cmp	r6, #0
 80035b6:	d100      	bne.n	80035ba <envelope_create_service+0x45e>
 80035b8:	e222      	b.n	8003a00 <envelope_create_service+0x8a4>
 80035ba:	4b67      	ldr	r3, [pc, #412]	; (8003758 <envelope_create_service+0x5fc>)
 80035bc:	0064      	lsls	r4, r4, #1
 80035be:	0864      	lsrs	r4, r4, #1
 80035c0:	63ab      	str	r3, [r5, #56]	; 0x38
 80035c2:	4966      	ldr	r1, [pc, #408]	; (800375c <envelope_create_service+0x600>)
 80035c4:	1c20      	adds	r0, r4, #0
 80035c6:	f009 fe03 	bl	800d1d0 <__aeabi_fcmpgt>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d000      	beq.n	80035d0 <envelope_create_service+0x474>
 80035ce:	4c63      	ldr	r4, [pc, #396]	; (800375c <envelope_create_service+0x600>)
 80035d0:	2191      	movs	r1, #145	; 0x91
 80035d2:	1c20      	adds	r0, r4, #0
 80035d4:	05c9      	lsls	r1, r1, #23
 80035d6:	f009 f8ef 	bl	800c7b8 <__aeabi_fmul>
 80035da:	f00f f837 	bl	801264c <roundf>
 80035de:	21da      	movs	r1, #218	; 0xda
 80035e0:	0589      	lsls	r1, r1, #22
 80035e2:	f009 f8e9 	bl	800c7b8 <__aeabi_fmul>
 80035e6:	495e      	ldr	r1, [pc, #376]	; (8003760 <envelope_create_service+0x604>)
 80035e8:	f009 f8e6 	bl	800c7b8 <__aeabi_fmul>
 80035ec:	1c01      	adds	r1, r0, #0
 80035ee:	1c04      	adds	r4, r0, #0
 80035f0:	485c      	ldr	r0, [pc, #368]	; (8003764 <envelope_create_service+0x608>)
 80035f2:	f009 fa13 	bl	800ca1c <__aeabi_fsub>
 80035f6:	495c      	ldr	r1, [pc, #368]	; (8003768 <envelope_create_service+0x60c>)
 80035f8:	f009 fa10 	bl	800ca1c <__aeabi_fsub>
 80035fc:	1c05      	adds	r5, r0, #0
 80035fe:	1c01      	adds	r1, r0, #0
 8003600:	1c20      	adds	r0, r4, #0
 8003602:	f009 fdd1 	bl	800d1a8 <__aeabi_fcmplt>
 8003606:	2800      	cmp	r0, #0
 8003608:	d100      	bne.n	800360c <envelope_create_service+0x4b0>
 800360a:	e122      	b.n	8003852 <envelope_create_service+0x6f6>
 800360c:	2100      	movs	r1, #0
 800360e:	1c20      	adds	r0, r4, #0
 8003610:	f007 fb0b 	bl	800ac2a <quarter_pi_cos_sin_f32.lto_priv.641>
 8003614:	2101      	movs	r1, #1
 8003616:	1c06      	adds	r6, r0, #0
 8003618:	1c20      	adds	r0, r4, #0
 800361a:	f007 fb06 	bl	800ac2a <quarter_pi_cos_sin_f32.lto_priv.641>
 800361e:	1c01      	adds	r1, r0, #0
 8003620:	1c30      	adds	r0, r6, #0
 8003622:	f008 ffb7 	bl	800c594 <__aeabi_fdiv>
 8003626:	4951      	ldr	r1, [pc, #324]	; (800376c <envelope_create_service+0x610>)
 8003628:	f009 f8c6 	bl	800c7b8 <__aeabi_fmul>
 800362c:	4950      	ldr	r1, [pc, #320]	; (8003770 <envelope_create_service+0x614>)
 800362e:	1c04      	adds	r4, r0, #0
 8003630:	f008 fe16 	bl	800c260 <__aeabi_fadd>
 8003634:	1c21      	adds	r1, r4, #0
 8003636:	f009 f8bf 	bl	800c7b8 <__aeabi_fmul>
 800363a:	494d      	ldr	r1, [pc, #308]	; (8003770 <envelope_create_service+0x614>)
 800363c:	1c05      	adds	r5, r0, #0
 800363e:	1c20      	adds	r0, r4, #0
 8003640:	f009 f8ba 	bl	800c7b8 <__aeabi_fmul>
 8003644:	21fe      	movs	r1, #254	; 0xfe
 8003646:	0589      	lsls	r1, r1, #22
 8003648:	f008 fe0a 	bl	800c260 <__aeabi_fadd>
 800364c:	1c01      	adds	r1, r0, #0
 800364e:	1c28      	adds	r0, r5, #0
 8003650:	f008 ffa0 	bl	800c594 <__aeabi_fdiv>
 8003654:	1c01      	adds	r1, r0, #0
 8003656:	1c04      	adds	r4, r0, #0
 8003658:	f009 f8ae 	bl	800c7b8 <__aeabi_fmul>
 800365c:	21fe      	movs	r1, #254	; 0xfe
 800365e:	0589      	lsls	r1, r1, #22
 8003660:	f008 fdfe 	bl	800c260 <__aeabi_fadd>
 8003664:	f00e fbdc 	bl	8011e20 <__ieee754_sqrtf>
 8003668:	1c01      	adds	r1, r0, #0
 800366a:	20fe      	movs	r0, #254	; 0xfe
 800366c:	0580      	lsls	r0, r0, #22
 800366e:	f008 ff91 	bl	800c594 <__aeabi_fdiv>
 8003672:	2181      	movs	r1, #129	; 0x81
 8003674:	1c05      	adds	r5, r0, #0
 8003676:	05c9      	lsls	r1, r1, #23
 8003678:	1c20      	adds	r0, r4, #0
 800367a:	f009 fd95 	bl	800d1a8 <__aeabi_fcmplt>
 800367e:	2800      	cmp	r0, #0
 8003680:	d100      	bne.n	8003684 <envelope_create_service+0x528>
 8003682:	e0fb      	b.n	800387c <envelope_create_service+0x720>
 8003684:	21fe      	movs	r1, #254	; 0xfe
 8003686:	1c20      	adds	r0, r4, #0
 8003688:	0589      	lsls	r1, r1, #22
 800368a:	f009 fda1 	bl	800d1d0 <__aeabi_fcmpgt>
 800368e:	2800      	cmp	r0, #0
 8003690:	d100      	bne.n	8003694 <envelope_create_service+0x538>
 8003692:	e0e6      	b.n	8003862 <envelope_create_service+0x706>
 8003694:	218a      	movs	r1, #138	; 0x8a
 8003696:	1c28      	adds	r0, r5, #0
 8003698:	05c9      	lsls	r1, r1, #23
 800369a:	f009 f88d 	bl	800c7b8 <__aeabi_fmul>
 800369e:	21fc      	movs	r1, #252	; 0xfc
 80036a0:	0589      	lsls	r1, r1, #22
 80036a2:	f008 fddd 	bl	800c260 <__aeabi_fadd>
 80036a6:	f009 ff7d 	bl	800d5a4 <__aeabi_f2iz>
 80036aa:	0044      	lsls	r4, r0, #1
 80036ac:	2080      	movs	r0, #128	; 0x80
 80036ae:	00a3      	lsls	r3, r4, #2
 80036b0:	4363      	muls	r3, r4
 80036b2:	04c0      	lsls	r0, r0, #19
 80036b4:	1ac0      	subs	r0, r0, r3
 80036b6:	f009 ffdf 	bl	800d678 <__aeabi_ui2f>
 80036ba:	f00e fbb1 	bl	8011e20 <__ieee754_sqrtf>
 80036be:	21fc      	movs	r1, #252	; 0xfc
 80036c0:	0589      	lsls	r1, r1, #22
 80036c2:	f008 fdcd 	bl	800c260 <__aeabi_fadd>
 80036c6:	f009 ff6d 	bl	800d5a4 <__aeabi_f2iz>
 80036ca:	9002      	str	r0, [sp, #8]
 80036cc:	e052      	b.n	8003774 <envelope_create_service+0x618>
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	0801b667 	.word	0x0801b667
 80036d4:	200003e8 	.word	0x200003e8
 80036d8:	0800abf1 	.word	0x0800abf1
 80036dc:	08008869 	.word	0x08008869
 80036e0:	08008815 	.word	0x08008815
 80036e4:	08008baf 	.word	0x08008baf
 80036e8:	0800052d 	.word	0x0800052d
 80036ec:	080004d7 	.word	0x080004d7
 80036f0:	080005cb 	.word	0x080005cb
 80036f4:	080011bd 	.word	0x080011bd
 80036f8:	08000173 	.word	0x08000173
 80036fc:	08000159 	.word	0x08000159
 8003700:	08000105 	.word	0x08000105
 8003704:	080005a3 	.word	0x080005a3
 8003708:	080003bd 	.word	0x080003bd
 800370c:	080005ed 	.word	0x080005ed
 8003710:	08000271 	.word	0x08000271
 8003714:	08000369 	.word	0x08000369
 8003718:	080005c3 	.word	0x080005c3
 800371c:	080001c9 	.word	0x080001c9
 8003720:	080005ab 	.word	0x080005ab
 8003724:	08001033 	.word	0x08001033
 8003728:	08008951 	.word	0x08008951
 800372c:	080088e1 	.word	0x080088e1
 8003730:	08008bb7 	.word	0x08008bb7
 8003734:	08008bbf 	.word	0x08008bbf
 8003738:	08000359 	.word	0x08000359
 800373c:	08000303 	.word	0x08000303
 8003740:	080005bb 	.word	0x080005bb
 8003744:	080002f1 	.word	0x080002f1
 8003748:	08000281 	.word	0x08000281
 800374c:	080005b3 	.word	0x080005b3
 8003750:	3b843809 	.word	0x3b843809
 8003754:	3efdca08 	.word	0x3efdca08
 8003758:	0800116b 	.word	0x0800116b
 800375c:	3effffde 	.word	0x3effffde
 8003760:	40490fdb 	.word	0x40490fdb
 8003764:	3fc90fdb 	.word	0x3fc90fdb
 8003768:	333bbd2e 	.word	0x333bbd2e
 800376c:	3f9f8d77 	.word	0x3f9f8d77
 8003770:	3fb504f3 	.word	0x3fb504f3
 8003774:	259f      	movs	r5, #159	; 0x9f
 8003776:	2680      	movs	r6, #128	; 0x80
 8003778:	00ad      	lsls	r5, r5, #2
 800377a:	0176      	lsls	r6, r6, #5
 800377c:	2c00      	cmp	r4, #0
 800377e:	d000      	beq.n	8003782 <envelope_create_service+0x626>
 8003780:	e0a0      	b.n	80038c4 <envelope_create_service+0x768>
 8003782:	239e      	movs	r3, #158	; 0x9e
 8003784:	22fc      	movs	r2, #252	; 0xfc
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	0592      	lsls	r2, r2, #22
 800378a:	50fa      	str	r2, [r7, r3]
 800378c:	3308      	adds	r3, #8
 800378e:	517e      	str	r6, [r7, r5]
 8003790:	50fc      	str	r4, [r7, r3]
 8003792:	3304      	adds	r3, #4
 8003794:	52fc      	strh	r4, [r7, r3]
 8003796:	4bc1      	ldr	r3, [pc, #772]	; (8003a9c <envelope_create_service+0x940>)
 8003798:	4ac1      	ldr	r2, [pc, #772]	; (8003aa0 <envelope_create_service+0x944>)
 800379a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379c:	49c1      	ldr	r1, [pc, #772]	; (8003aa4 <envelope_create_service+0x948>)
 800379e:	2000      	movs	r0, #0
 80037a0:	4798      	blx	r3
 80037a2:	a80f      	add	r0, sp, #60	; 0x3c
 80037a4:	f7fc fffc 	bl	80007a0 <configuration_is_valid>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d010      	beq.n	80037ce <envelope_create_service+0x672>
 80037ac:	ab15      	add	r3, sp, #84	; 0x54
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <envelope_create_service+0x672>
 80037b4:	23a4      	movs	r3, #164	; 0xa4
 80037b6:	49bc      	ldr	r1, [pc, #752]	; (8003aa8 <envelope_create_service+0x94c>)
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80037be:	6059      	str	r1, [r3, #4]
 80037c0:	49ba      	ldr	r1, [pc, #744]	; (8003aac <envelope_create_service+0x950>)
 80037c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80037c4:	6099      	str	r1, [r3, #8]
 80037c6:	4aba      	ldr	r2, [pc, #744]	; (8003ab0 <envelope_create_service+0x954>)
 80037c8:	49ba      	ldr	r1, [pc, #744]	; (8003ab4 <envelope_create_service+0x958>)
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
 80037cc:	60d9      	str	r1, [r3, #12]
 80037ce:	23b4      	movs	r3, #180	; 0xb4
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	18fc      	adds	r4, r7, r3
 80037d4:	4bb8      	ldr	r3, [pc, #736]	; (8003ab8 <envelope_create_service+0x95c>)
 80037d6:	a80f      	add	r0, sp, #60	; 0x3c
 80037d8:	6063      	str	r3, [r4, #4]
 80037da:	4bb8      	ldr	r3, [pc, #736]	; (8003abc <envelope_create_service+0x960>)
 80037dc:	60a3      	str	r3, [r4, #8]
 80037de:	4bb8      	ldr	r3, [pc, #736]	; (8003ac0 <envelope_create_service+0x964>)
 80037e0:	60e3      	str	r3, [r4, #12]
 80037e2:	4bb8      	ldr	r3, [pc, #736]	; (8003ac4 <envelope_create_service+0x968>)
 80037e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80037e6:	23c3      	movs	r3, #195	; 0xc3
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	18fe      	adds	r6, r7, r3
 80037ec:	4bb6      	ldr	r3, [pc, #728]	; (8003ac8 <envelope_create_service+0x96c>)
 80037ee:	63b3      	str	r3, [r6, #56]	; 0x38
 80037f0:	4bb6      	ldr	r3, [pc, #728]	; (8003acc <envelope_create_service+0x970>)
 80037f2:	6073      	str	r3, [r6, #4]
 80037f4:	4bb6      	ldr	r3, [pc, #728]	; (8003ad0 <envelope_create_service+0x974>)
 80037f6:	60b3      	str	r3, [r6, #8]
 80037f8:	4bb6      	ldr	r3, [pc, #728]	; (8003ad4 <envelope_create_service+0x978>)
 80037fa:	60f3      	str	r3, [r6, #12]
 80037fc:	23d2      	movs	r3, #210	; 0xd2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	18fd      	adds	r5, r7, r3
 8003802:	4bb5      	ldr	r3, [pc, #724]	; (8003ad8 <envelope_create_service+0x97c>)
 8003804:	642b      	str	r3, [r5, #64]	; 0x40
 8003806:	4bb5      	ldr	r3, [pc, #724]	; (8003adc <envelope_create_service+0x980>)
 8003808:	606b      	str	r3, [r5, #4]
 800380a:	4bb5      	ldr	r3, [pc, #724]	; (8003ae0 <envelope_create_service+0x984>)
 800380c:	60ab      	str	r3, [r5, #8]
 800380e:	4bb5      	ldr	r3, [pc, #724]	; (8003ae4 <envelope_create_service+0x988>)
 8003810:	60eb      	str	r3, [r5, #12]
 8003812:	003b      	movs	r3, r7
 8003814:	3378      	adds	r3, #120	; 0x78
 8003816:	63bb      	str	r3, [r7, #56]	; 0x38
 8003818:	3340      	adds	r3, #64	; 0x40
 800381a:	67bb      	str	r3, [r7, #120]	; 0x78
 800381c:	9302      	str	r3, [sp, #8]
 800381e:	f7fc ffe2 	bl	80007e6 <acc_base_configuration_noise_level_normalization_get>
 8003822:	003b      	movs	r3, r7
 8003824:	3339      	adds	r3, #57	; 0x39
 8003826:	33ff      	adds	r3, #255	; 0xff
 8003828:	2800      	cmp	r0, #0
 800382a:	d000      	beq.n	800382e <envelope_create_service+0x6d2>
 800382c:	e0eb      	b.n	8003a06 <envelope_create_service+0x8aa>
 800382e:	9a02      	ldr	r2, [sp, #8]
 8003830:	e0ed      	b.n	8003a0e <envelope_create_service+0x8b2>
 8003832:	a80f      	add	r0, sp, #60	; 0x3c
 8003834:	f7fd f8a6 	bl	8000984 <acc_base_configuration_print.part.5>
 8003838:	e5f8      	b.n	800342c <envelope_create_service+0x2d0>
 800383a:	21bf      	movs	r1, #191	; 0xbf
 800383c:	0609      	lsls	r1, r1, #24
 800383e:	e677      	b.n	8003530 <envelope_create_service+0x3d4>
 8003840:	24fc      	movs	r4, #252	; 0xfc
 8003842:	05a4      	lsls	r4, r4, #22
 8003844:	e6b5      	b.n	80035b2 <envelope_create_service+0x456>
 8003846:	4ca8      	ldr	r4, [pc, #672]	; (8003ae8 <envelope_create_service+0x98c>)
 8003848:	e6b3      	b.n	80035b2 <envelope_create_service+0x456>
 800384a:	24fc      	movs	r4, #252	; 0xfc
 800384c:	9e02      	ldr	r6, [sp, #8]
 800384e:	05a4      	lsls	r4, r4, #22
 8003850:	e6af      	b.n	80035b2 <envelope_create_service+0x456>
 8003852:	2101      	movs	r1, #1
 8003854:	1c28      	adds	r0, r5, #0
 8003856:	f007 f9e8 	bl	800ac2a <quarter_pi_cos_sin_f32.lto_priv.641>
 800385a:	2100      	movs	r1, #0
 800385c:	1c06      	adds	r6, r0, #0
 800385e:	1c28      	adds	r0, r5, #0
 8003860:	e6db      	b.n	800361a <envelope_create_service+0x4be>
 8003862:	218b      	movs	r1, #139	; 0x8b
 8003864:	1c28      	adds	r0, r5, #0
 8003866:	05c9      	lsls	r1, r1, #23
 8003868:	f008 ffa6 	bl	800c7b8 <__aeabi_fmul>
 800386c:	21fc      	movs	r1, #252	; 0xfc
 800386e:	0589      	lsls	r1, r1, #22
 8003870:	f008 fcf6 	bl	800c260 <__aeabi_fadd>
 8003874:	f009 fe96 	bl	800d5a4 <__aeabi_f2iz>
 8003878:	0004      	movs	r4, r0
 800387a:	e717      	b.n	80036ac <envelope_create_service+0x550>
 800387c:	218c      	movs	r1, #140	; 0x8c
 800387e:	1c20      	adds	r0, r4, #0
 8003880:	05c9      	lsls	r1, r1, #23
 8003882:	f008 ff99 	bl	800c7b8 <__aeabi_fmul>
 8003886:	1c29      	adds	r1, r5, #0
 8003888:	f008 ff96 	bl	800c7b8 <__aeabi_fmul>
 800388c:	21fc      	movs	r1, #252	; 0xfc
 800388e:	0589      	lsls	r1, r1, #22
 8003890:	f008 fce6 	bl	800c260 <__aeabi_fadd>
 8003894:	f009 fe86 	bl	800d5a4 <__aeabi_f2iz>
 8003898:	0003      	movs	r3, r0
 800389a:	9002      	str	r0, [sp, #8]
 800389c:	4343      	muls	r3, r0
 800389e:	2080      	movs	r0, #128	; 0x80
 80038a0:	04c0      	lsls	r0, r0, #19
 80038a2:	1ac0      	subs	r0, r0, r3
 80038a4:	f009 fee8 	bl	800d678 <__aeabi_ui2f>
 80038a8:	f00e faba 	bl	8011e20 <__ieee754_sqrtf>
 80038ac:	21fc      	movs	r1, #252	; 0xfc
 80038ae:	0589      	lsls	r1, r1, #22
 80038b0:	f008 ff82 	bl	800c7b8 <__aeabi_fmul>
 80038b4:	21fc      	movs	r1, #252	; 0xfc
 80038b6:	0589      	lsls	r1, r1, #22
 80038b8:	f008 fcd2 	bl	800c260 <__aeabi_fadd>
 80038bc:	f009 fe72 	bl	800d5a4 <__aeabi_f2iz>
 80038c0:	0004      	movs	r4, r0
 80038c2:	e757      	b.n	8003774 <envelope_create_service+0x618>
 80038c4:	b2a3      	uxth	r3, r4
 80038c6:	1af2      	subs	r2, r6, r3
 80038c8:	b292      	uxth	r2, r2
 80038ca:	b210      	sxth	r0, r2
 80038cc:	4669      	mov	r1, sp
 80038ce:	5378      	strh	r0, [r7, r5]
 80038d0:	259f      	movs	r5, #159	; 0x9f
 80038d2:	8909      	ldrh	r1, [r1, #8]
 80038d4:	00ad      	lsls	r5, r5, #2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	197d      	adds	r5, r7, r5
 80038da:	1acb      	subs	r3, r1, r3
 80038dc:	80eb      	strh	r3, [r5, #6]
 80038de:	23c0      	movs	r3, #192	; 0xc0
 80038e0:	015b      	lsls	r3, r3, #5
 80038e2:	1b1b      	subs	r3, r3, r4
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	1a59      	subs	r1, r3, r1
 80038e8:	9b02      	ldr	r3, [sp, #8]
 80038ea:	0052      	lsls	r2, r2, #1
 80038ec:	806a      	strh	r2, [r5, #2]
 80038ee:	80a8      	strh	r0, [r5, #4]
 80038f0:	8129      	strh	r1, [r5, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <envelope_create_service+0x7a4>
 80038f6:	239e      	movs	r3, #158	; 0x9e
 80038f8:	9a03      	ldr	r2, [sp, #12]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	50fa      	str	r2, [r7, r3]
 80038fe:	e74a      	b.n	8003796 <envelope_create_service+0x63a>
 8003900:	9b02      	ldr	r3, [sp, #8]
 8003902:	1b36      	subs	r6, r6, r4
 8003904:	0076      	lsls	r6, r6, #1
 8003906:	1af0      	subs	r0, r6, r3
 8003908:	00a3      	lsls	r3, r4, #2
 800390a:	435c      	muls	r4, r3
 800390c:	9b02      	ldr	r3, [sp, #8]
 800390e:	4340      	muls	r0, r0
 8003910:	435b      	muls	r3, r3
 8003912:	18e4      	adds	r4, r4, r3
 8003914:	23fc      	movs	r3, #252	; 0xfc
 8003916:	061b      	lsls	r3, r3, #24
 8003918:	18e4      	adds	r4, r4, r3
 800391a:	0064      	lsls	r4, r4, #1
 800391c:	1b00      	subs	r0, r0, r4
 800391e:	f009 fe61 	bl	800d5e4 <__aeabi_i2f>
 8003922:	1c06      	adds	r6, r0, #0
 8003924:	0020      	movs	r0, r4
 8003926:	f009 fe5d 	bl	800d5e4 <__aeabi_i2f>
 800392a:	1c31      	adds	r1, r6, #0
 800392c:	f008 fe32 	bl	800c594 <__aeabi_fdiv>
 8003930:	496e      	ldr	r1, [pc, #440]	; (8003aec <envelope_create_service+0x990>)
 8003932:	1c04      	adds	r4, r0, #0
 8003934:	f008 fc94 	bl	800c260 <__aeabi_fadd>
 8003938:	1c05      	adds	r5, r0, #0
 800393a:	1c30      	adds	r0, r6, #0
 800393c:	f00e fa70 	bl	8011e20 <__ieee754_sqrtf>
 8003940:	1c06      	adds	r6, r0, #0
 8003942:	2080      	movs	r0, #128	; 0x80
 8003944:	9b02      	ldr	r3, [sp, #8]
 8003946:	0180      	lsls	r0, r0, #6
 8003948:	1ac0      	subs	r0, r0, r3
 800394a:	0040      	lsls	r0, r0, #1
 800394c:	f009 fe4a 	bl	800d5e4 <__aeabi_i2f>
 8003950:	1c01      	adds	r1, r0, #0
 8003952:	1c30      	adds	r0, r6, #0
 8003954:	f008 fe1e 	bl	800c594 <__aeabi_fdiv>
 8003958:	4965      	ldr	r1, [pc, #404]	; (8003af0 <envelope_create_service+0x994>)
 800395a:	1c06      	adds	r6, r0, #0
 800395c:	1c28      	adds	r0, r5, #0
 800395e:	f008 ff2b 	bl	800c7b8 <__aeabi_fmul>
 8003962:	1c29      	adds	r1, r5, #0
 8003964:	f008 ff28 	bl	800c7b8 <__aeabi_fmul>
 8003968:	4962      	ldr	r1, [pc, #392]	; (8003af4 <envelope_create_service+0x998>)
 800396a:	f008 fc79 	bl	800c260 <__aeabi_fadd>
 800396e:	f00e fa57 	bl	8011e20 <__ieee754_sqrtf>
 8003972:	1c21      	adds	r1, r4, #0
 8003974:	f009 f852 	bl	800ca1c <__aeabi_fsub>
 8003978:	f00e fa52 	bl	8011e20 <__ieee754_sqrtf>
 800397c:	1c01      	adds	r1, r0, #0
 800397e:	1c30      	adds	r0, r6, #0
 8003980:	f008 ff1a 	bl	800c7b8 <__aeabi_fmul>
 8003984:	495c      	ldr	r1, [pc, #368]	; (8003af8 <envelope_create_service+0x99c>)
 8003986:	1c05      	adds	r5, r0, #0
 8003988:	f009 fc0e 	bl	800d1a8 <__aeabi_fcmplt>
 800398c:	2800      	cmp	r0, #0
 800398e:	d135      	bne.n	80039fc <envelope_create_service+0x8a0>
 8003990:	21fe      	movs	r1, #254	; 0xfe
 8003992:	1c28      	adds	r0, r5, #0
 8003994:	0589      	lsls	r1, r1, #22
 8003996:	f009 fc1b 	bl	800d1d0 <__aeabi_fcmpgt>
 800399a:	4c58      	ldr	r4, [pc, #352]	; (8003afc <envelope_create_service+0x9a0>)
 800399c:	2800      	cmp	r0, #0
 800399e:	d022      	beq.n	80039e6 <envelope_create_service+0x88a>
 80039a0:	20fe      	movs	r0, #254	; 0xfe
 80039a2:	1c29      	adds	r1, r5, #0
 80039a4:	0580      	lsls	r0, r0, #22
 80039a6:	f008 fdf5 	bl	800c594 <__aeabi_fdiv>
 80039aa:	1c05      	adds	r5, r0, #0
 80039ac:	0020      	movs	r0, r4
 80039ae:	1c2a      	adds	r2, r5, #0
 80039b0:	2109      	movs	r1, #9
 80039b2:	307c      	adds	r0, #124	; 0x7c
 80039b4:	f007 f920 	bl	800abf8 <eval_even_poly_f32.lto_priv.642>
 80039b8:	1c01      	adds	r1, r0, #0
 80039ba:	1c28      	adds	r0, r5, #0
 80039bc:	f008 fefc 	bl	800c7b8 <__aeabi_fmul>
 80039c0:	1c01      	adds	r1, r0, #0
 80039c2:	484f      	ldr	r0, [pc, #316]	; (8003b00 <envelope_create_service+0x9a4>)
 80039c4:	f009 f82a 	bl	800ca1c <__aeabi_fsub>
 80039c8:	494e      	ldr	r1, [pc, #312]	; (8003b04 <envelope_create_service+0x9a8>)
 80039ca:	f009 f827 	bl	800ca1c <__aeabi_fsub>
 80039ce:	494e      	ldr	r1, [pc, #312]	; (8003b08 <envelope_create_service+0x9ac>)
 80039d0:	f008 fde0 	bl	800c594 <__aeabi_fdiv>
 80039d4:	239e      	movs	r3, #158	; 0x9e
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	50f8      	str	r0, [r7, r3]
 80039da:	238f      	movs	r3, #143	; 0x8f
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
 80039e4:	e6dd      	b.n	80037a2 <envelope_create_service+0x646>
 80039e6:	0020      	movs	r0, r4
 80039e8:	1c2a      	adds	r2, r5, #0
 80039ea:	2109      	movs	r1, #9
 80039ec:	307c      	adds	r0, #124	; 0x7c
 80039ee:	f007 f903 	bl	800abf8 <eval_even_poly_f32.lto_priv.642>
 80039f2:	1c01      	adds	r1, r0, #0
 80039f4:	1c28      	adds	r0, r5, #0
 80039f6:	f008 fedf 	bl	800c7b8 <__aeabi_fmul>
 80039fa:	e7e8      	b.n	80039ce <envelope_create_service+0x872>
 80039fc:	4843      	ldr	r0, [pc, #268]	; (8003b0c <envelope_create_service+0x9b0>)
 80039fe:	e7e6      	b.n	80039ce <envelope_create_service+0x872>
 8003a00:	4b43      	ldr	r3, [pc, #268]	; (8003b10 <envelope_create_service+0x9b4>)
 8003a02:	63ab      	str	r3, [r5, #56]	; 0x38
 8003a04:	e7e9      	b.n	80039da <envelope_create_service+0x87e>
 8003a06:	003a      	movs	r2, r7
 8003a08:	9902      	ldr	r1, [sp, #8]
 8003a0a:	32f8      	adds	r2, #248	; 0xf8
 8003a0c:	600a      	str	r2, [r1, #0]
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	003b      	movs	r3, r7
 8003a12:	229c      	movs	r2, #156	; 0x9c
 8003a14:	3375      	adds	r3, #117	; 0x75
 8003a16:	0052      	lsls	r2, r2, #1
 8003a18:	33ff      	adds	r3, #255	; 0xff
 8003a1a:	50bb      	str	r3, [r7, r2]
 8003a1c:	323c      	adds	r2, #60	; 0x3c
 8003a1e:	3344      	adds	r3, #68	; 0x44
 8003a20:	50bb      	str	r3, [r7, r2]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	3244      	adds	r2, #68	; 0x44
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	50bb      	str	r3, [r7, r2]
 8003a2c:	238f      	movs	r3, #143	; 0x8f
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	3248      	adds	r2, #72	; 0x48
 8003a34:	50bb      	str	r3, [r7, r2]
 8003a36:	a80f      	add	r0, sp, #60	; 0x3c
 8003a38:	f7fc feb2 	bl	80007a0 <configuration_is_valid>
 8003a3c:	238f      	movs	r3, #143	; 0x8f
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d008      	beq.n	8003a56 <envelope_create_service+0x8fa>
 8003a44:	aa15      	add	r2, sp, #84	; 0x54
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	2a00      	cmp	r2, #0
 8003a4a:	d004      	beq.n	8003a56 <envelope_create_service+0x8fa>
 8003a4c:	22a4      	movs	r2, #164	; 0xa4
 8003a4e:	0092      	lsls	r2, r2, #2
 8003a50:	18ba      	adds	r2, r7, r2
 8003a52:	50fa      	str	r2, [r7, r3]
 8003a54:	3354      	adds	r3, #84	; 0x54
 8003a56:	50fc      	str	r4, [r7, r3]
 8003a58:	23b4      	movs	r3, #180	; 0xb4
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	50fe      	str	r6, [r7, r3]
 8003a5e:	333c      	adds	r3, #60	; 0x3c
 8003a60:	50fd      	str	r5, [r7, r3]
 8003a62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a64:	6883      	ldr	r3, [r0, #8]
 8003a66:	4798      	blx	r3
 8003a68:	1e04      	subs	r4, r0, #0
 8003a6a:	d106      	bne.n	8003a7a <envelope_create_service+0x91e>
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <envelope_create_service+0x940>)
 8003a6e:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <envelope_create_service+0x9b8>)
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	4929      	ldr	r1, [pc, #164]	; (8003b18 <envelope_create_service+0x9bc>)
 8003a74:	4798      	blx	r3
 8003a76:	f7ff fc13 	bl	80032a0 <envelope_create_service+0x144>
 8003a7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a7c:	68c3      	ldr	r3, [r0, #12]
 8003a7e:	4798      	blx	r3
 8003a80:	23e1      	movs	r3, #225	; 0xe1
 8003a82:	9a04      	ldr	r2, [sp, #16]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	50fa      	str	r2, [r7, r3]
 8003a88:	9a01      	ldr	r2, [sp, #4]
 8003a8a:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <envelope_create_service+0x9c0>)
 8003a8c:	6053      	str	r3, [r2, #4]
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <envelope_create_service+0x9c4>)
 8003a90:	6093      	str	r3, [r2, #8]
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <envelope_create_service+0x9c8>)
 8003a94:	60d3      	str	r3, [r2, #12]
 8003a96:	f7ff fbe2 	bl	800325e <envelope_create_service+0x102>
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	200003e8 	.word	0x200003e8
 8003aa0:	0801b692 	.word	0x0801b692
 8003aa4:	0801ac05 	.word	0x0801ac05
 8003aa8:	08008b7d 	.word	0x08008b7d
 8003aac:	08008731 	.word	0x08008731
 8003ab0:	08008795 	.word	0x08008795
 8003ab4:	08008785 	.word	0x08008785
 8003ab8:	080005d3 	.word	0x080005d3
 8003abc:	08000545 	.word	0x08000545
 8003ac0:	08000599 	.word	0x08000599
 8003ac4:	0800100b 	.word	0x0800100b
 8003ac8:	080004bb 	.word	0x080004bb
 8003acc:	080005ed 	.word	0x080005ed
 8003ad0:	08000369 	.word	0x08000369
 8003ad4:	080005c3 	.word	0x080005c3
 8003ad8:	08000fdf 	.word	0x08000fdf
 8003adc:	0800871b 	.word	0x0800871b
 8003ae0:	080086b1 	.word	0x080086b1
 8003ae4:	08008719 	.word	0x08008719
 8003ae8:	3b843809 	.word	0x3b843809
 8003aec:	3f15f61a 	.word	0x3f15f61a
 8003af0:	3fb504f3 	.word	0x3fb504f3
 8003af4:	3f95f61a 	.word	0x3f95f61a
 8003af8:	bf800000 	.word	0xbf800000
 8003afc:	08014b80 	.word	0x08014b80
 8003b00:	3fc90fdb 	.word	0x3fc90fdb
 8003b04:	333bbd2e 	.word	0x333bbd2e
 8003b08:	40490fdb 	.word	0x40490fdb
 8003b0c:	7fc00000 	.word	0x7fc00000
 8003b10:	08000301 	.word	0x08000301
 8003b14:	0801b6bb 	.word	0x0801b6bb
 8003b18:	0801b6db 	.word	0x0801b6db
 8003b1c:	08001db1 	.word	0x08001db1
 8003b20:	08001d9d 	.word	0x08001d9d
 8003b24:	08000671 	.word	0x08000671

08003b28 <sparse_create_service>:
 8003b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b2a:	b0a9      	sub	sp, #164	; 0xa4
 8003b2c:	9000      	str	r0, [sp, #0]
 8003b2e:	228c      	movs	r2, #140	; 0x8c
 8003b30:	a805      	add	r0, sp, #20
 8003b32:	000c      	movs	r4, r1
 8003b34:	f010 ffbc 	bl	8014ab0 <memcpy>
 8003b38:	a805      	add	r0, sp, #20
 8003b3a:	f7fc ffbf 	bl	8000abc <acc_service_configuration_check>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d102      	bne.n	8003b48 <sparse_create_service+0x20>
 8003b42:	2000      	movs	r0, #0
 8003b44:	b029      	add	sp, #164	; 0xa4
 8003b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b48:	a80c      	add	r0, sp, #48	; 0x30
 8003b4a:	f7fc fe29 	bl	80007a0 <configuration_is_valid>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	d0f7      	beq.n	8003b42 <sparse_create_service+0x1a>
 8003b52:	a80c      	add	r0, sp, #48	; 0x30
 8003b54:	f7fc fdbc 	bl	80006d0 <acc_base_configuration_check.part.6>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d0f2      	beq.n	8003b42 <sparse_create_service+0x1a>
 8003b5c:	ab26      	add	r3, sp, #152	; 0x98
 8003b5e:	881d      	ldrh	r5, [r3, #0]
 8003b60:	2d00      	cmp	r5, #0
 8003b62:	d106      	bne.n	8003b72 <sparse_create_service+0x4a>
 8003b64:	4b67      	ldr	r3, [pc, #412]	; (8003d04 <sparse_create_service+0x1dc>)
 8003b66:	4a68      	ldr	r2, [pc, #416]	; (8003d08 <sparse_create_service+0x1e0>)
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	4968      	ldr	r1, [pc, #416]	; (8003d0c <sparse_create_service+0x1e4>)
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	4798      	blx	r3
 8003b70:	e7e7      	b.n	8003b42 <sparse_create_service+0x1a>
 8003b72:	238a      	movs	r3, #138	; 0x8a
 8003b74:	aa04      	add	r2, sp, #16
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <sparse_create_service+0x66>
 8003b7e:	ab24      	add	r3, sp, #144	; 0x90
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d903      	bls.n	8003b8e <sparse_create_service+0x66>
 8003b86:	4b5f      	ldr	r3, [pc, #380]	; (8003d04 <sparse_create_service+0x1dc>)
 8003b88:	4a61      	ldr	r2, [pc, #388]	; (8003d10 <sparse_create_service+0x1e8>)
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	e7ed      	b.n	8003b6a <sparse_create_service+0x42>
 8003b8e:	7923      	ldrb	r3, [r4, #4]
 8003b90:	9a00      	ldr	r2, [sp, #0]
 8003b92:	4c60      	ldr	r4, [pc, #384]	; (8003d14 <sparse_create_service+0x1ec>)
 8003b94:	7213      	strb	r3, [r2, #8]
 8003b96:	0021      	movs	r1, r4
 8003b98:	22ec      	movs	r2, #236	; 0xec
 8003b9a:	2010      	movs	r0, #16
 8003b9c:	f005 faec 	bl	8009178 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8003ba0:	0005      	movs	r5, r0
 8003ba2:	2090      	movs	r0, #144	; 0x90
 8003ba4:	0021      	movs	r1, r4
 8003ba6:	22ed      	movs	r2, #237	; 0xed
 8003ba8:	0040      	lsls	r0, r0, #1
 8003baa:	f005 fae5 	bl	8009178 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8003bae:	0004      	movs	r4, r0
 8003bb0:	2d00      	cmp	r5, #0
 8003bb2:	d001      	beq.n	8003bb8 <sparse_create_service+0x90>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d10f      	bne.n	8003bd8 <sparse_create_service+0xb0>
 8003bb8:	0028      	movs	r0, r5
 8003bba:	f7fc fd3d 	bl	8000638 <acc_rss_integration_mem_free>
 8003bbe:	0020      	movs	r0, r4
 8003bc0:	f7fc fd3a 	bl	8000638 <acc_rss_integration_mem_free>
 8003bc4:	2500      	movs	r5, #0
 8003bc6:	9b00      	ldr	r3, [sp, #0]
 8003bc8:	9a00      	ldr	r2, [sp, #0]
 8003bca:	611d      	str	r5, [r3, #16]
 8003bcc:	1e68      	subs	r0, r5, #1
 8003bce:	4185      	sbcs	r5, r0
 8003bd0:	4b51      	ldr	r3, [pc, #324]	; (8003d18 <sparse_create_service+0x1f0>)
 8003bd2:	b2e8      	uxtb	r0, r5
 8003bd4:	60d3      	str	r3, [r2, #12]
 8003bd6:	e7b5      	b.n	8003b44 <sparse_create_service+0x1c>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	0026      	movs	r6, r4
 8003bdc:	6028      	str	r0, [r5, #0]
 8003bde:	9800      	ldr	r0, [sp, #0]
 8003be0:	3318      	adds	r3, #24
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	3018      	adds	r0, #24
 8003be6:	36fc      	adds	r6, #252	; 0xfc
 8003be8:	0033      	movs	r3, r6
 8003bea:	9a01      	ldr	r2, [sp, #4]
 8003bec:	6760      	str	r0, [r4, #116]	; 0x74
 8003bee:	a90c      	add	r1, sp, #48	; 0x30
 8003bf0:	f7fd fcb2 	bl	8001558 <acc_sensor_manager_prepare_radar_engine>
 8003bf4:	0023      	movs	r3, r4
 8003bf6:	8972      	ldrh	r2, [r6, #10]
 8003bf8:	3370      	adds	r3, #112	; 0x70
 8003bfa:	801a      	strh	r2, [r3, #0]
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d103      	bne.n	8003c08 <sparse_create_service+0xe0>
 8003c00:	0028      	movs	r0, r5
 8003c02:	f7fc fd49 	bl	8000698 <disassemble.lto_priv.313>
 8003c06:	e7dd      	b.n	8003bc4 <sparse_create_service+0x9c>
 8003c08:	89f3      	ldrh	r3, [r6, #14]
 8003c0a:	89b7      	ldrh	r7, [r6, #12]
 8003c0c:	189b      	adds	r3, r3, r2
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	007f      	lsls	r7, r7, #1
 8003c12:	429f      	cmp	r7, r3
 8003c14:	d200      	bcs.n	8003c18 <sparse_create_service+0xf0>
 8003c16:	001f      	movs	r7, r3
 8003c18:	a80c      	add	r0, sp, #48	; 0x30
 8003c1a:	f7fc fdc1 	bl	80007a0 <configuration_is_valid>
 8003c1e:	2600      	movs	r6, #0
 8003c20:	42b0      	cmp	r0, r6
 8003c22:	d001      	beq.n	8003c28 <sparse_create_service+0x100>
 8003c24:	ab21      	add	r3, sp, #132	; 0x84
 8003c26:	881e      	ldrh	r6, [r3, #0]
 8003c28:	42be      	cmp	r6, r7
 8003c2a:	d200      	bcs.n	8003c2e <sparse_create_service+0x106>
 8003c2c:	003e      	movs	r6, r7
 8003c2e:	2298      	movs	r2, #152	; 0x98
 8003c30:	4938      	ldr	r1, [pc, #224]	; (8003d14 <sparse_create_service+0x1ec>)
 8003c32:	0052      	lsls	r2, r2, #1
 8003c34:	0030      	movs	r0, r6
 8003c36:	f7ff f94b 	bl	8002ed0 <acc_rss_integration_mem_alloc_debug>
 8003c3a:	0023      	movs	r3, r4
 8003c3c:	33fc      	adds	r3, #252	; 0xfc
 8003c3e:	61d8      	str	r0, [r3, #28]
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d0dd      	beq.n	8003c00 <sparse_create_service+0xd8>
 8003c44:	0022      	movs	r2, r4
 8003c46:	621e      	str	r6, [r3, #32]
 8003c48:	1da3      	adds	r3, r4, #6
 8003c4a:	6623      	str	r3, [r4, #96]	; 0x60
 8003c4c:	1de3      	adds	r3, r4, #7
 8003c4e:	6663      	str	r3, [r4, #100]	; 0x64
 8003c50:	3305      	adds	r3, #5
 8003c52:	66a3      	str	r3, [r4, #104]	; 0x68
 8003c54:	3b04      	subs	r3, #4
 8003c56:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003c58:	3214      	adds	r2, #20
 8003c5a:	9302      	str	r3, [sp, #8]
 8003c5c:	3380      	adds	r3, #128	; 0x80
 8003c5e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8003c60:	65e2      	str	r2, [r4, #92]	; 0x5c
 8003c62:	65a4      	str	r4, [r4, #88]	; 0x58
 8003c64:	4f27      	ldr	r7, [pc, #156]	; (8003d04 <sparse_create_service+0x1dc>)
 8003c66:	6018      	str	r0, [r3, #0]
 8003c68:	1d23      	adds	r3, r4, #4
 8003c6a:	9303      	str	r3, [sp, #12]
 8003c6c:	1d21      	adds	r1, r4, #4
 8003c6e:	3388      	adds	r3, #136	; 0x88
 8003c70:	6019      	str	r1, [r3, #0]
 8003c72:	611a      	str	r2, [r3, #16]
 8003c74:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003c76:	665c      	str	r4, [r3, #100]	; 0x64
 8003c78:	003b      	movs	r3, r7
 8003c7a:	0026      	movs	r6, r4
 8003c7c:	3330      	adds	r3, #48	; 0x30
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	3619      	adds	r6, #25
 8003c82:	36ff      	adds	r6, #255	; 0xff
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d834      	bhi.n	8003cf2 <sparse_create_service+0x1ca>
 8003c88:	0033      	movs	r3, r6
 8003c8a:	9a01      	ldr	r2, [sp, #4]
 8003c8c:	a90c      	add	r1, sp, #48	; 0x30
 8003c8e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003c90:	f7ff f98a 	bl	8002fa8 <acc_sensor_manager_prepare_measurement>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d0b3      	beq.n	8003c00 <sparse_create_service+0xd8>
 8003c98:	0023      	movs	r3, r4
 8003c9a:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <sparse_create_service+0x1f4>)
 8003c9c:	33b0      	adds	r3, #176	; 0xb0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <sparse_create_service+0x1f8>)
 8003ca2:	0020      	movs	r0, r4
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <sparse_create_service+0x1fc>)
 8003ca8:	1d22      	adds	r2, r4, #4
 8003caa:	67e3      	str	r3, [r4, #124]	; 0x7c
 8003cac:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <sparse_create_service+0x200>)
 8003cae:	3078      	adds	r0, #120	; 0x78
 8003cb0:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <sparse_create_service+0x204>)
 8003cb4:	9a02      	ldr	r2, [sp, #8]
 8003cb6:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003cb8:	0023      	movs	r3, r4
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <sparse_create_service+0x208>)
 8003cbc:	33b8      	adds	r3, #184	; 0xb8
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <sparse_create_service+0x20c>)
 8003cc2:	605a      	str	r2, [r3, #4]
 8003cc4:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <sparse_create_service+0x210>)
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <sparse_create_service+0x214>)
 8003cca:	60da      	str	r2, [r3, #12]
 8003ccc:	63a0      	str	r0, [r4, #56]	; 0x38
 8003cce:	67a3      	str	r3, [r4, #120]	; 0x78
 8003cd0:	f004 fda0 	bl	8008814 <validate.lto_priv.159>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d010      	beq.n	8003cfa <sparse_create_service+0x1d2>
 8003cd8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cda:	34f4      	adds	r4, #244	; 0xf4
 8003cdc:	68c3      	ldr	r3, [r0, #12]
 8003cde:	4798      	blx	r3
 8003ce0:	9b00      	ldr	r3, [sp, #0]
 8003ce2:	6023      	str	r3, [r4, #0]
 8003ce4:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <sparse_create_service+0x218>)
 8003ce6:	606b      	str	r3, [r5, #4]
 8003ce8:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <sparse_create_service+0x21c>)
 8003cea:	60ab      	str	r3, [r5, #8]
 8003cec:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <sparse_create_service+0x220>)
 8003cee:	60eb      	str	r3, [r5, #12]
 8003cf0:	e769      	b.n	8003bc6 <sparse_create_service+0x9e>
 8003cf2:	a80c      	add	r0, sp, #48	; 0x30
 8003cf4:	f7fc fe46 	bl	8000984 <acc_base_configuration_print.part.5>
 8003cf8:	e7c6      	b.n	8003c88 <sparse_create_service+0x160>
 8003cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfc:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <sparse_create_service+0x224>)
 8003cfe:	4914      	ldr	r1, [pc, #80]	; (8003d50 <sparse_create_service+0x228>)
 8003d00:	4798      	blx	r3
 8003d02:	e77d      	b.n	8003c00 <sparse_create_service+0xd8>
 8003d04:	200003e8 	.word	0x200003e8
 8003d08:	0801b6ed 	.word	0x0801b6ed
 8003d0c:	0801aeae 	.word	0x0801aeae
 8003d10:	0801b71d 	.word	0x0801b71d
 8003d14:	0801b748 	.word	0x0801b748
 8003d18:	08000b1d 	.word	0x08000b1d
 8003d1c:	40400000 	.word	0x40400000
 8003d20:	0800abf1 	.word	0x0800abf1
 8003d24:	08008869 	.word	0x08008869
 8003d28:	08008815 	.word	0x08008815
 8003d2c:	08008baf 	.word	0x08008baf
 8003d30:	08000fbb 	.word	0x08000fbb
 8003d34:	0800871b 	.word	0x0800871b
 8003d38:	080086b1 	.word	0x080086b1
 8003d3c:	08008719 	.word	0x08008719
 8003d40:	08001ddb 	.word	0x08001ddb
 8003d44:	08001da7 	.word	0x08001da7
 8003d48:	08000699 	.word	0x08000699
 8003d4c:	0801b6bb 	.word	0x0801b6bb
 8003d50:	0801b771 	.word	0x0801b771

08003d54 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.248>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	6985      	ldr	r5, [r0, #24]
 8003d58:	0004      	movs	r4, r0
 8003d5a:	0028      	movs	r0, r5
 8003d5c:	f7fc fcb0 	bl	80006c0 <acc_rss_integration_sensor_device_power_on>
 8003d60:	2148      	movs	r1, #72	; 0x48
 8003d62:	4369      	muls	r1, r5
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <acc_sensor_manager_power_on_and_start_sensor.lto_priv.248+0x48>)
 8003d66:	3948      	subs	r1, #72	; 0x48
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003d6c:	1859      	adds	r1, r3, r1
 8003d6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d70:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4798      	blx	r3
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d104      	bne.n	8003d84 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.248+0x30>
 8003d7a:	0028      	movs	r0, r5
 8003d7c:	f7ff f90c 	bl	8002f98 <acc_rss_integration_sensor_device_power_off>
 8003d80:	2000      	movs	r0, #0
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	0020      	movs	r0, r4
 8003d86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d88:	0031      	movs	r1, r6
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	3018      	adds	r0, #24
 8003d8e:	4798      	blx	r3
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d0f2      	beq.n	8003d7a <acc_sensor_manager_power_on_and_start_sensor.lto_priv.248+0x26>
 8003d94:	2301      	movs	r3, #1
 8003d96:	70e3      	strb	r3, [r4, #3]
 8003d98:	e7f3      	b.n	8003d82 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.248+0x2e>
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	20000598 	.word	0x20000598

08003da0 <acc_service_activate>:
 8003da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003da2:	0004      	movs	r4, r0
 8003da4:	f7fc fea2 	bl	8000aec <acc_service_handle_valid>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d108      	bne.n	8003dbe <acc_service_activate+0x1e>
 8003dac:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <acc_service_activate+0xfc>)
 8003dae:	4a3c      	ldr	r2, [pc, #240]	; (8003ea0 <acc_service_activate+0x100>)
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	493c      	ldr	r1, [pc, #240]	; (8003ea4 <acc_service_activate+0x104>)
 8003db4:	2000      	movs	r0, #0
 8003db6:	4798      	blx	r3
 8003db8:	2500      	movs	r5, #0
 8003dba:	0028      	movs	r0, r5
 8003dbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dbe:	4f3a      	ldr	r7, [pc, #232]	; (8003ea8 <acc_service_activate+0x108>)
 8003dc0:	003b      	movs	r3, r7
 8003dc2:	3370      	adds	r3, #112	; 0x70
 8003dc4:	781d      	ldrb	r5, [r3, #0]
 8003dc6:	2d00      	cmp	r5, #0
 8003dc8:	d0f0      	beq.n	8003dac <acc_service_activate+0xc>
 8003dca:	7a63      	ldrb	r3, [r4, #9]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f4      	beq.n	8003dba <acc_service_activate+0x1a>
 8003dd0:	6863      	ldr	r3, [r4, #4]
 8003dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd4:	d8ea      	bhi.n	8003dac <acc_service_activate+0xc>
 8003dd6:	003a      	movs	r2, r7
 8003dd8:	0059      	lsls	r1, r3, #1
 8003dda:	3271      	adds	r2, #113	; 0x71
 8003ddc:	5c88      	ldrb	r0, [r1, r2]
 8003dde:	9000      	str	r0, [sp, #0]
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d1e3      	bne.n	8003dac <acc_service_activate+0xc>
 8003de4:	3001      	adds	r0, #1
 8003de6:	5488      	strb	r0, [r1, r2]
 8003de8:	1852      	adds	r2, r2, r1
 8003dea:	7852      	ldrb	r2, [r2, #1]
 8003dec:	2a00      	cmp	r2, #0
 8003dee:	d143      	bne.n	8003e78 <acc_service_activate+0xd8>
 8003df0:	0026      	movs	r6, r4
 8003df2:	4a2e      	ldr	r2, [pc, #184]	; (8003eac <acc_service_activate+0x10c>)
 8003df4:	3618      	adds	r6, #24
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	2a00      	cmp	r2, #0
 8003dfa:	d002      	beq.n	8003e02 <acc_service_activate+0x62>
 8003dfc:	6892      	ldr	r2, [r2, #8]
 8003dfe:	2a00      	cmp	r2, #0
 8003e00:	d146      	bne.n	8003e90 <acc_service_activate+0xf0>
 8003e02:	7e22      	ldrb	r2, [r4, #24]
 8003e04:	2a02      	cmp	r2, #2
 8003e06:	d01f      	beq.n	8003e48 <acc_service_activate+0xa8>
 8003e08:	0030      	movs	r0, r6
 8003e0a:	f7ff ffa3 	bl	8003d54 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.248>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d032      	beq.n	8003e78 <acc_service_activate+0xd8>
 8003e12:	7ea3      	ldrb	r3, [r4, #26]
 8003e14:	9301      	str	r3, [sp, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d020      	beq.n	8003e5c <acc_service_activate+0xbc>
 8003e1a:	7e23      	ldrb	r3, [r4, #24]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d110      	bne.n	8003e42 <acc_service_activate+0xa2>
 8003e20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003e22:	2200      	movs	r2, #0
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	69e1      	ldr	r1, [r4, #28]
 8003e28:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003e2a:	4798      	blx	r3
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d023      	beq.n	8003e78 <acc_service_activate+0xd8>
 8003e30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003e32:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	4798      	blx	r3
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d01d      	beq.n	8003e78 <acc_service_activate+0xd8>
 8003e3c:	0030      	movs	r0, r6
 8003e3e:	f7ff f82b 	bl	8002e98 <acc_sensor_manager_hibernate_enter.lto_priv.247>
 8003e42:	6863      	ldr	r3, [r4, #4]
 8003e44:	2b2a      	cmp	r3, #42	; 0x2a
 8003e46:	d805      	bhi.n	8003e54 <acc_service_activate+0xb4>
 8003e48:	003a      	movs	r2, r7
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	3271      	adds	r2, #113	; 0x71
 8003e4e:	18d3      	adds	r3, r2, r3
 8003e50:	2201      	movs	r2, #1
 8003e52:	705a      	strb	r2, [r3, #1]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9500      	str	r5, [sp, #0]
 8003e58:	7263      	strb	r3, [r4, #9]
 8003e5a:	e00d      	b.n	8003e78 <acc_service_activate+0xd8>
 8003e5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003e5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	4798      	blx	r3
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d007      	beq.n	8003e78 <acc_service_activate+0xd8>
 8003e68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003e6a:	9a01      	ldr	r2, [sp, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	69e1      	ldr	r1, [r4, #28]
 8003e70:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003e72:	4798      	blx	r3
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d1d0      	bne.n	8003e1a <acc_service_activate+0x7a>
 8003e78:	6863      	ldr	r3, [r4, #4]
 8003e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e7c:	d803      	bhi.n	8003e86 <acc_service_activate+0xe6>
 8003e7e:	2100      	movs	r1, #0
 8003e80:	3771      	adds	r7, #113	; 0x71
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	55d9      	strb	r1, [r3, r7]
 8003e86:	9b00      	ldr	r3, [sp, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d100      	bne.n	8003e8e <acc_service_activate+0xee>
 8003e8c:	e78e      	b.n	8003dac <acc_service_activate+0xc>
 8003e8e:	e794      	b.n	8003dba <acc_service_activate+0x1a>
 8003e90:	0030      	movs	r0, r6
 8003e92:	4790      	blx	r2
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d0ef      	beq.n	8003e78 <acc_service_activate+0xd8>
 8003e98:	e7d3      	b.n	8003e42 <acc_service_activate+0xa2>
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	200003e8 	.word	0x200003e8
 8003ea0:	0801b781 	.word	0x0801b781
 8003ea4:	0801b921 	.word	0x0801b921
 8003ea8:	2000010c 	.word	0x2000010c
 8003eac:	2000059c 	.word	0x2000059c

08003eb0 <acc_service_deactivate>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	0004      	movs	r4, r0
 8003eb4:	f7fc fe1a 	bl	8000aec <acc_service_handle_valid>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d02d      	beq.n	8003f18 <acc_service_deactivate+0x68>
 8003ebc:	4d1a      	ldr	r5, [pc, #104]	; (8003f28 <acc_service_deactivate+0x78>)
 8003ebe:	002b      	movs	r3, r5
 8003ec0:	3370      	adds	r3, #112	; 0x70
 8003ec2:	781e      	ldrb	r6, [r3, #0]
 8003ec4:	2e00      	cmp	r6, #0
 8003ec6:	d027      	beq.n	8003f18 <acc_service_deactivate+0x68>
 8003ec8:	7a63      	ldrb	r3, [r4, #9]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d122      	bne.n	8003f14 <acc_service_deactivate+0x64>
 8003ece:	6863      	ldr	r3, [r4, #4]
 8003ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed2:	d821      	bhi.n	8003f18 <acc_service_deactivate+0x68>
 8003ed4:	002a      	movs	r2, r5
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	3271      	adds	r2, #113	; 0x71
 8003eda:	5c9f      	ldrb	r7, [r3, r2]
 8003edc:	2f00      	cmp	r7, #0
 8003ede:	d11b      	bne.n	8003f18 <acc_service_deactivate+0x68>
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	5499      	strb	r1, [r3, r2]
 8003ee4:	7ee3      	ldrb	r3, [r4, #27]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <acc_service_deactivate+0x42>
 8003eea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003eec:	f7ff f854 	bl	8002f98 <acc_rss_integration_sensor_device_power_off>
 8003ef0:	76e7      	strb	r7, [r4, #27]
 8003ef2:	6863      	ldr	r3, [r4, #4]
 8003ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef6:	d805      	bhi.n	8003f04 <acc_service_deactivate+0x54>
 8003ef8:	002a      	movs	r2, r5
 8003efa:	0059      	lsls	r1, r3, #1
 8003efc:	3271      	adds	r2, #113	; 0x71
 8003efe:	1852      	adds	r2, r2, r1
 8003f00:	2100      	movs	r1, #0
 8003f02:	7051      	strb	r1, [r2, #1]
 8003f04:	2201      	movs	r2, #1
 8003f06:	7262      	strb	r2, [r4, #9]
 8003f08:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0a:	d803      	bhi.n	8003f14 <acc_service_deactivate+0x64>
 8003f0c:	4093      	lsls	r3, r2
 8003f0e:	2200      	movs	r2, #0
 8003f10:	3571      	adds	r5, #113	; 0x71
 8003f12:	555a      	strb	r2, [r3, r5]
 8003f14:	0030      	movs	r0, r6
 8003f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f18:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <acc_service_deactivate+0x7c>)
 8003f1a:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <acc_service_deactivate+0x80>)
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	4905      	ldr	r1, [pc, #20]	; (8003f34 <acc_service_deactivate+0x84>)
 8003f20:	2000      	movs	r0, #0
 8003f22:	4798      	blx	r3
 8003f24:	2600      	movs	r6, #0
 8003f26:	e7f5      	b.n	8003f14 <acc_service_deactivate+0x64>
 8003f28:	2000010c 	.word	0x2000010c
 8003f2c:	200003e8 	.word	0x200003e8
 8003f30:	0801b79b 	.word	0x0801b79b
 8003f34:	0801b921 	.word	0x0801b921

08003f38 <acc_service_sparse_get_next_by_reference.part.9>:
 8003f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3a:	680b      	ldr	r3, [r1, #0]
 8003f3c:	b08d      	sub	sp, #52	; 0x34
 8003f3e:	ac05      	add	r4, sp, #20
 8003f40:	0006      	movs	r6, r0
 8003f42:	2003      	movs	r0, #3
 8003f44:	6063      	str	r3, [r4, #4]
 8003f46:	2300      	movs	r3, #0
 8003f48:	7020      	strb	r0, [r4, #0]
 8003f4a:	6160      	str	r0, [r4, #20]
 8003f4c:	0030      	movs	r0, r6
 8003f4e:	60a1      	str	r1, [r4, #8]
 8003f50:	60e3      	str	r3, [r4, #12]
 8003f52:	6122      	str	r2, [r4, #16]
 8003f54:	7623      	strb	r3, [r4, #24]
 8003f56:	7663      	strb	r3, [r4, #25]
 8003f58:	76a3      	strb	r3, [r4, #26]
 8003f5a:	f7fc fdc7 	bl	8000aec <acc_service_handle_valid>
 8003f5e:	7ea5      	ldrb	r5, [r4, #26]
 8003f60:	2d00      	cmp	r5, #0
 8003f62:	d00d      	beq.n	8003f80 <acc_service_sparse_get_next_by_reference.part.9+0x48>
 8003f64:	6863      	ldr	r3, [r4, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <acc_service_sparse_get_next_by_reference.part.9+0x38>
 8003f6a:	68e3      	ldr	r3, [r4, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d113      	bne.n	8003f98 <acc_service_sparse_get_next_by_reference.part.9+0x60>
 8003f70:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <acc_service_sparse_get_next_by_reference.part.9+0xc4>)
 8003f72:	4a23      	ldr	r2, [pc, #140]	; (8004000 <acc_service_sparse_get_next_by_reference.part.9+0xc8>)
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	4923      	ldr	r1, [pc, #140]	; (8004004 <acc_service_sparse_get_next_by_reference.part.9+0xcc>)
 8003f78:	2000      	movs	r0, #0
 8003f7a:	4798      	blx	r3
 8003f7c:	2500      	movs	r5, #0
 8003f7e:	e008      	b.n	8003f92 <acc_service_sparse_get_next_by_reference.part.9+0x5a>
 8003f80:	68a3      	ldr	r3, [r4, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <acc_service_sparse_get_next_by_reference.part.9+0x60>
 8003f86:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <acc_service_sparse_get_next_by_reference.part.9+0xc4>)
 8003f88:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <acc_service_sparse_get_next_by_reference.part.9+0xd0>)
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8c:	491d      	ldr	r1, [pc, #116]	; (8004004 <acc_service_sparse_get_next_by_reference.part.9+0xcc>)
 8003f8e:	0028      	movs	r0, r5
 8003f90:	4798      	blx	r3
 8003f92:	0028      	movs	r0, r5
 8003f94:	b00d      	add	sp, #52	; 0x34
 8003f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d0ef      	beq.n	8003f7c <acc_service_sparse_get_next_by_reference.part.9+0x44>
 8003f9c:	7a33      	ldrb	r3, [r6, #8]
 8003f9e:	7822      	ldrb	r2, [r4, #0]
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <acc_service_sparse_get_next_by_reference.part.9+0x7c>
 8003fa4:	9200      	str	r2, [sp, #0]
 8003fa6:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <acc_service_sparse_get_next_by_reference.part.9+0xc4>)
 8003fa8:	4916      	ldr	r1, [pc, #88]	; (8004004 <acc_service_sparse_get_next_by_reference.part.9+0xcc>)
 8003faa:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003fac:	2000      	movs	r0, #0
 8003fae:	4a17      	ldr	r2, [pc, #92]	; (800400c <acc_service_sparse_get_next_by_reference.part.9+0xd4>)
 8003fb0:	47a0      	blx	r4
 8003fb2:	e7e3      	b.n	8003f7c <acc_service_sparse_get_next_by_reference.part.9+0x44>
 8003fb4:	7e27      	ldrb	r7, [r4, #24]
 8003fb6:	2f00      	cmp	r7, #0
 8003fb8:	d004      	beq.n	8003fc4 <acc_service_sparse_get_next_by_reference.part.9+0x8c>
 8003fba:	0030      	movs	r0, r6
 8003fbc:	f7ff fef0 	bl	8003da0 <acc_service_activate>
 8003fc0:	1e07      	subs	r7, r0, #0
 8003fc2:	d0db      	beq.n	8003f7c <acc_service_sparse_get_next_by_reference.part.9+0x44>
 8003fc4:	7a73      	ldrb	r3, [r6, #9]
 8003fc6:	9303      	str	r3, [sp, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00c      	beq.n	8003fe6 <acc_service_sparse_get_next_by_reference.part.9+0xae>
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <acc_service_sparse_get_next_by_reference.part.9+0xc4>)
 8003fce:	4a10      	ldr	r2, [pc, #64]	; (8004010 <acc_service_sparse_get_next_by_reference.part.9+0xd8>)
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd2:	490c      	ldr	r1, [pc, #48]	; (8004004 <acc_service_sparse_get_next_by_reference.part.9+0xcc>)
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	4798      	blx	r3
 8003fd8:	2500      	movs	r5, #0
 8003fda:	2f00      	cmp	r7, #0
 8003fdc:	d0d9      	beq.n	8003f92 <acc_service_sparse_get_next_by_reference.part.9+0x5a>
 8003fde:	0030      	movs	r0, r6
 8003fe0:	f7ff ff66 	bl	8003eb0 <acc_service_deactivate>
 8003fe4:	e7d5      	b.n	8003f92 <acc_service_sparse_get_next_by_reference.part.9+0x5a>
 8003fe6:	2501      	movs	r5, #1
 8003fe8:	6933      	ldr	r3, [r6, #16]
 8003fea:	6174      	str	r4, [r6, #20]
 8003fec:	cb05      	ldmia	r3!, {r0, r2}
 8003fee:	4790      	blx	r2
 8003ff0:	7e63      	ldrb	r3, [r4, #25]
 8003ff2:	405d      	eors	r5, r3
 8003ff4:	9b03      	ldr	r3, [sp, #12]
 8003ff6:	6173      	str	r3, [r6, #20]
 8003ff8:	e7ef      	b.n	8003fda <acc_service_sparse_get_next_by_reference.part.9+0xa2>
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	200003e8 	.word	0x200003e8
 8004000:	0801b7b7 	.word	0x0801b7b7
 8004004:	0801b921 	.word	0x0801b921
 8004008:	0801b7d4 	.word	0x0801b7d4
 800400c:	0801b7e9 	.word	0x0801b7e9
 8004010:	0801b805 	.word	0x0801b805

08004014 <acc_service_destroy>:
 8004014:	4b12      	ldr	r3, [pc, #72]	; (8004060 <acc_service_destroy+0x4c>)
 8004016:	b510      	push	{r4, lr}
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	0004      	movs	r4, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d012      	beq.n	8004046 <acc_service_destroy+0x32>
 8004020:	6800      	ldr	r0, [r0, #0]
 8004022:	f7fc fd63 	bl	8000aec <acc_service_handle_valid>
 8004026:	2800      	cmp	r0, #0
 8004028:	d00c      	beq.n	8004044 <acc_service_destroy+0x30>
 800402a:	6820      	ldr	r0, [r4, #0]
 800402c:	f7ff ff40 	bl	8003eb0 <acc_service_deactivate>
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	68c3      	ldr	r3, [r0, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d000      	beq.n	800403a <acc_service_destroy+0x26>
 8004038:	4798      	blx	r3
 800403a:	6820      	ldr	r0, [r4, #0]
 800403c:	f7fc fe5a 	bl	8000cf4 <destroy_handle>
 8004040:	2300      	movs	r3, #0
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	bd10      	pop	{r4, pc}
 8004046:	4b07      	ldr	r3, [pc, #28]	; (8004064 <acc_service_destroy+0x50>)
 8004048:	001a      	movs	r2, r3
 800404a:	3230      	adds	r2, #48	; 0x30
 800404c:	7812      	ldrb	r2, [r2, #0]
 800404e:	2a00      	cmp	r2, #0
 8004050:	d0f8      	beq.n	8004044 <acc_service_destroy+0x30>
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	4a04      	ldr	r2, [pc, #16]	; (8004068 <acc_service_destroy+0x54>)
 8004056:	4905      	ldr	r1, [pc, #20]	; (800406c <acc_service_destroy+0x58>)
 8004058:	2001      	movs	r0, #1
 800405a:	4798      	blx	r3
 800405c:	e7f2      	b.n	8004044 <acc_service_destroy+0x30>
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	2000008c 	.word	0x2000008c
 8004064:	200003e8 	.word	0x200003e8
 8004068:	0801b14e 	.word	0x0801b14e
 800406c:	0801aede 	.word	0x0801aede

08004070 <activateService_handle>:
int8_t activateService_handle(acc_service_handle_t handle){
 8004070:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004072:	9001      	str	r0, [sp, #4]
	if (!acc_service_activate(handle))
 8004074:	f7ff fe94 	bl	8003da0 <acc_service_activate>
 8004078:	4e15      	ldr	r6, [pc, #84]	; (80040d0 <activateService_handle+0x60>)
 800407a:	1e04      	subs	r4, r0, #0
 800407c:	4d15      	ldr	r5, [pc, #84]	; (80040d4 <activateService_handle+0x64>)
 800407e:	d11a      	bne.n	80040b6 <activateService_handle+0x46>
		ERR_PRINTLN("acc_service_activate() failed");
 8004080:	4815      	ldr	r0, [pc, #84]	; (80040d8 <activateService_handle+0x68>)
 8004082:	f010 f945 	bl	8014310 <__wrap_printf>
 8004086:	4815      	ldr	r0, [pc, #84]	; (80040dc <activateService_handle+0x6c>)
 8004088:	f010 f942 	bl	8014310 <__wrap_printf>
 800408c:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <activateService_handle+0x70>)
 800408e:	0031      	movs	r1, r6
 8004090:	0028      	movs	r0, r5
 8004092:	f010 f93d 	bl	8014310 <__wrap_printf>
		acc_service_destroy(&handle);
 8004096:	a801      	add	r0, sp, #4
 8004098:	f7ff ffbc 	bl	8004014 <acc_service_destroy>
		data_free();
 800409c:	f7fc ff62 	bl	8000f64 <data_free>
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 80040a0:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <activateService_handle+0x74>)
 80040a2:	3358      	adds	r3, #88	; 0x58
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <activateService_handle+0x42>
 80040aa:	480f      	ldr	r0, [pc, #60]	; (80040e8 <activateService_handle+0x78>)
 80040ac:	3048      	adds	r0, #72	; 0x48
 80040ae:	f7ff ffb1 	bl	8004014 <acc_service_destroy>
}
 80040b2:	0020      	movs	r0, r4
 80040b4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		DBG_PRINTLN("service handle activated");
 80040b6:	480d      	ldr	r0, [pc, #52]	; (80040ec <activateService_handle+0x7c>)
 80040b8:	f010 f92a 	bl	8014310 <__wrap_printf>
 80040bc:	480c      	ldr	r0, [pc, #48]	; (80040f0 <activateService_handle+0x80>)
 80040be:	f010 f927 	bl	8014310 <__wrap_printf>
 80040c2:	4a0c      	ldr	r2, [pc, #48]	; (80040f4 <activateService_handle+0x84>)
 80040c4:	0031      	movs	r1, r6
 80040c6:	0028      	movs	r0, r5
 80040c8:	f010 f922 	bl	8014310 <__wrap_printf>
 80040cc:	2401      	movs	r4, #1
 80040ce:	e7f0      	b.n	80040b2 <activateService_handle+0x42>
 80040d0:	0801b202 	.word	0x0801b202
 80040d4:	0801bcb9 	.word	0x0801bcb9
 80040d8:	0801b226 	.word	0x0801b226
 80040dc:	0801b81b 	.word	0x0801b81b
 80040e0:	0000027f 	.word	0x0000027f
 80040e4:	2000010c 	.word	0x2000010c
 80040e8:	2000018c 	.word	0x2000018c
 80040ec:	0801b1ea 	.word	0x0801b1ea
 80040f0:	0801b839 	.word	0x0801b839
 80040f4:	00000289 	.word	0x00000289

080040f8 <acc_rss_integration_get_sensor_reference_frequency>:
 80040f8:	b510      	push	{r4, lr}
 80040fa:	4b02      	ldr	r3, [pc, #8]	; (8004104 <acc_rss_integration_get_sensor_reference_frequency+0xc>)
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	4798      	blx	r3
 8004100:	bd10      	pop	{r4, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	200003e8 	.word	0x200003e8

08004108 <acc_radar_engine_common_frequency_to_main_clk>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	1c06      	adds	r6, r0, #0
 800410c:	0015      	movs	r5, r2
 800410e:	000c      	movs	r4, r1
 8004110:	f7ff fff2 	bl	80040f8 <acc_rss_integration_get_sensor_reference_frequency>
 8004114:	1c31      	adds	r1, r6, #0
 8004116:	f008 fa3d 	bl	800c594 <__aeabi_fdiv>
 800411a:	f009 f88d 	bl	800d238 <__aeabi_f2uiz>
 800411e:	0c03      	lsrs	r3, r0, #16
 8004120:	b280      	uxth	r0, r0
 8004122:	602b      	str	r3, [r5, #0]
 8004124:	6020      	str	r0, [r4, #0]
 8004126:	bd70      	pop	{r4, r5, r6, pc}

08004128 <calculate_pll_divisors.lto_priv.292>:
 8004128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800412a:	0005      	movs	r5, r0
 800412c:	f7ff ffe4 	bl	80040f8 <acc_rss_integration_get_sensor_reference_frequency>
 8004130:	1c01      	adds	r1, r0, #0
 8004132:	1c06      	adds	r6, r0, #0
 8004134:	4830      	ldr	r0, [pc, #192]	; (80041f8 <calculate_pll_divisors.lto_priv.292+0xd0>)
 8004136:	f008 fa2d 	bl	800c594 <__aeabi_fdiv>
 800413a:	21fc      	movs	r1, #252	; 0xfc
 800413c:	0589      	lsls	r1, r1, #22
 800413e:	f008 f88f 	bl	800c260 <__aeabi_fadd>
 8004142:	f009 f879 	bl	800d238 <__aeabi_f2uiz>
 8004146:	492d      	ldr	r1, [pc, #180]	; (80041fc <calculate_pll_divisors.lto_priv.292+0xd4>)
 8004148:	b284      	uxth	r4, r0
 800414a:	1c30      	adds	r0, r6, #0
 800414c:	f008 fc66 	bl	800ca1c <__aeabi_fsub>
 8004150:	492b      	ldr	r1, [pc, #172]	; (8004200 <calculate_pll_divisors.lto_priv.292+0xd8>)
 8004152:	f008 fb31 	bl	800c7b8 <__aeabi_fmul>
 8004156:	492b      	ldr	r1, [pc, #172]	; (8004204 <calculate_pll_divisors.lto_priv.292+0xdc>)
 8004158:	f008 f882 	bl	800c260 <__aeabi_fadd>
 800415c:	f009 f86c 	bl	800d238 <__aeabi_f2uiz>
 8004160:	0023      	movs	r3, r4
 8004162:	3b10      	subs	r3, #16
 8004164:	b29b      	uxth	r3, r3
 8004166:	8128      	strh	r0, [r5, #8]
 8004168:	2bef      	cmp	r3, #239	; 0xef
 800416a:	d92b      	bls.n	80041c4 <calculate_pll_divisors.lto_priv.292+0x9c>
 800416c:	4b26      	ldr	r3, [pc, #152]	; (8004208 <calculate_pll_divisors.lto_priv.292+0xe0>)
 800416e:	2100      	movs	r1, #0
 8004170:	1c30      	adds	r0, r6, #0
 8004172:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8004174:	f009 f818 	bl	800d1a8 <__aeabi_fcmplt>
 8004178:	2800      	cmp	r0, #0
 800417a:	d01f      	beq.n	80041bc <calculate_pll_divisors.lto_priv.292+0x94>
 800417c:	4c23      	ldr	r4, [pc, #140]	; (800420c <calculate_pll_divisors.lto_priv.292+0xe4>)
 800417e:	4924      	ldr	r1, [pc, #144]	; (8004210 <calculate_pll_divisors.lto_priv.292+0xe8>)
 8004180:	1c30      	adds	r0, r6, #0
 8004182:	f008 fb19 	bl	800c7b8 <__aeabi_fmul>
 8004186:	4923      	ldr	r1, [pc, #140]	; (8004214 <calculate_pll_divisors.lto_priv.292+0xec>)
 8004188:	f008 f86a 	bl	800c260 <__aeabi_fadd>
 800418c:	1c06      	adds	r6, r0, #0
 800418e:	f009 f853 	bl	800d238 <__aeabi_f2uiz>
 8004192:	0005      	movs	r5, r0
 8004194:	f009 fa70 	bl	800d678 <__aeabi_ui2f>
 8004198:	1c01      	adds	r1, r0, #0
 800419a:	1c30      	adds	r0, r6, #0
 800419c:	f008 fc3e 	bl	800ca1c <__aeabi_fsub>
 80041a0:	491d      	ldr	r1, [pc, #116]	; (8004218 <calculate_pll_divisors.lto_priv.292+0xf0>)
 80041a2:	f008 fb09 	bl	800c7b8 <__aeabi_fmul>
 80041a6:	f009 f847 	bl	800d238 <__aeabi_f2uiz>
 80041aa:	9500      	str	r5, [sp, #0]
 80041ac:	9001      	str	r0, [sp, #4]
 80041ae:	0023      	movs	r3, r4
 80041b0:	2000      	movs	r0, #0
 80041b2:	4a1a      	ldr	r2, [pc, #104]	; (800421c <calculate_pll_divisors.lto_priv.292+0xf4>)
 80041b4:	491a      	ldr	r1, [pc, #104]	; (8004220 <calculate_pll_divisors.lto_priv.292+0xf8>)
 80041b6:	47b8      	blx	r7
 80041b8:	2000      	movs	r0, #0
 80041ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041bc:	21fe      	movs	r1, #254	; 0xfe
 80041be:	4c19      	ldr	r4, [pc, #100]	; (8004224 <calculate_pll_divisors.lto_priv.292+0xfc>)
 80041c0:	0589      	lsls	r1, r1, #22
 80041c2:	e7dd      	b.n	8004180 <calculate_pll_divisors.lto_priv.292+0x58>
 80041c4:	2c3f      	cmp	r4, #63	; 0x3f
 80041c6:	d809      	bhi.n	80041dc <calculate_pll_divisors.lto_priv.292+0xb4>
 80041c8:	2200      	movs	r2, #0
 80041ca:	806a      	strh	r2, [r5, #2]
 80041cc:	2c2f      	cmp	r4, #47	; 0x2f
 80041ce:	d900      	bls.n	80041d2 <calculate_pll_divisors.lto_priv.292+0xaa>
 80041d0:	0023      	movs	r3, r4
 80041d2:	80ab      	strh	r3, [r5, #4]
 80041d4:	80ea      	strh	r2, [r5, #6]
 80041d6:	802c      	strh	r4, [r5, #0]
 80041d8:	2001      	movs	r0, #1
 80041da:	e7ee      	b.n	80041ba <calculate_pll_divisors.lto_priv.292+0x92>
 80041dc:	2301      	movs	r3, #1
 80041de:	806b      	strh	r3, [r5, #2]
 80041e0:	08e3      	lsrs	r3, r4, #3
 80041e2:	2cbf      	cmp	r4, #191	; 0xbf
 80041e4:	d803      	bhi.n	80041ee <calculate_pll_divisors.lto_priv.292+0xc6>
 80041e6:	0023      	movs	r3, r4
 80041e8:	3b40      	subs	r3, #64	; 0x40
 80041ea:	10db      	asrs	r3, r3, #3
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	80ab      	strh	r3, [r5, #4]
 80041f0:	2307      	movs	r3, #7
 80041f2:	4023      	ands	r3, r4
 80041f4:	80eb      	strh	r3, [r5, #6]
 80041f6:	e7ee      	b.n	80041d6 <calculate_pll_divisors.lto_priv.292+0xae>
 80041f8:	4f1502f9 	.word	0x4f1502f9
 80041fc:	4b989680 	.word	0x4b989680
 8004200:	b55b38e8 	.word	0xb55b38e8
 8004204:	427c0000 	.word	0x427c0000
 8004208:	200003e8 	.word	0x200003e8
 800420c:	0801cb79 	.word	0x0801cb79
 8004210:	bf800000 	.word	0xbf800000
 8004214:	350637bd 	.word	0x350637bd
 8004218:	49742400 	.word	0x49742400
 800421c:	0801b852 	.word	0x0801b852
 8004220:	0801b87d 	.word	0x0801b87d
 8004224:	0801bcc3 	.word	0x0801bcc3

08004228 <set_calibration_context.lto_priv.281>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	680b      	ldr	r3, [r1, #0]
 800422c:	b086      	sub	sp, #24
 800422e:	0004      	movs	r4, r0
 8004230:	000e      	movs	r6, r1
 8004232:	2b06      	cmp	r3, #6
 8004234:	d00a      	beq.n	800424c <set_calibration_context.lto_priv.281+0x24>
 8004236:	2206      	movs	r2, #6
 8004238:	9200      	str	r2, [sp, #0]
 800423a:	4a0e      	ldr	r2, [pc, #56]	; (8004274 <set_calibration_context.lto_priv.281+0x4c>)
 800423c:	2000      	movs	r0, #0
 800423e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004240:	490d      	ldr	r1, [pc, #52]	; (8004278 <set_calibration_context.lto_priv.281+0x50>)
 8004242:	4a0e      	ldr	r2, [pc, #56]	; (800427c <set_calibration_context.lto_priv.281+0x54>)
 8004244:	47a0      	blx	r4
 8004246:	2000      	movs	r0, #0
 8004248:	b006      	add	sp, #24
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	ad03      	add	r5, sp, #12
 800424e:	0028      	movs	r0, r5
 8004250:	f7ff ff6a 	bl	8004128 <calculate_pll_divisors.lto_priv.292>
 8004254:	2800      	cmp	r0, #0
 8004256:	d0f7      	beq.n	8004248 <set_calibration_context.lto_priv.281+0x20>
 8004258:	88ab      	ldrh	r3, [r5, #4]
 800425a:	6063      	str	r3, [r4, #4]
 800425c:	88eb      	ldrh	r3, [r5, #6]
 800425e:	60a3      	str	r3, [r4, #8]
 8004260:	886b      	ldrh	r3, [r5, #2]
 8004262:	6023      	str	r3, [r4, #0]
 8004264:	892b      	ldrh	r3, [r5, #8]
 8004266:	81a3      	strh	r3, [r4, #12]
 8004268:	88b3      	ldrh	r3, [r6, #4]
 800426a:	6123      	str	r3, [r4, #16]
 800426c:	88f3      	ldrh	r3, [r6, #6]
 800426e:	6163      	str	r3, [r4, #20]
 8004270:	e7ea      	b.n	8004248 <set_calibration_context.lto_priv.281+0x20>
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	200003e8 	.word	0x200003e8
 8004278:	0801b8cc 	.word	0x0801b8cc
 800427c:	0801b88e 	.word	0x0801b88e

08004280 <calibrate.lto_priv.295>:
 8004280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004282:	b08b      	sub	sp, #44	; 0x2c
 8004284:	ac02      	add	r4, sp, #8
 8004286:	6807      	ldr	r7, [r0, #0]
 8004288:	0020      	movs	r0, r4
 800428a:	000e      	movs	r6, r1
 800428c:	0015      	movs	r5, r2
 800428e:	f7ff ff4b 	bl	8004128 <calculate_pll_divisors.lto_priv.292>
 8004292:	2800      	cmp	r0, #0
 8004294:	d103      	bne.n	800429e <calibrate.lto_priv.295+0x1e>
 8004296:	2400      	movs	r4, #0
 8004298:	0020      	movs	r0, r4
 800429a:	b00b      	add	sp, #44	; 0x2c
 800429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800429e:	9705      	str	r7, [sp, #20]
 80042a0:	8863      	ldrh	r3, [r4, #2]
 80042a2:	aa05      	add	r2, sp, #20
 80042a4:	6053      	str	r3, [r2, #4]
 80042a6:	88a3      	ldrh	r3, [r4, #4]
 80042a8:	ce03      	ldmia	r6!, {r0, r1}
 80042aa:	6093      	str	r3, [r2, #8]
 80042ac:	88e3      	ldrh	r3, [r4, #6]
 80042ae:	60d3      	str	r3, [r2, #12]
 80042b0:	8923      	ldrh	r3, [r4, #8]
 80042b2:	8213      	strh	r3, [r2, #16]
 80042b4:	466b      	mov	r3, sp
 80042b6:	f007 fd82 	bl	800bdbe <acc_cpd_cbank_and_vana_calibration>
 80042ba:	1e04      	subs	r4, r0, #0
 80042bc:	d0eb      	beq.n	8004296 <calibrate.lto_priv.295+0x16>
 80042be:	9b00      	ldr	r3, [sp, #0]
 80042c0:	80ab      	strh	r3, [r5, #4]
 80042c2:	466b      	mov	r3, sp
 80042c4:	791b      	ldrb	r3, [r3, #4]
 80042c6:	80eb      	strh	r3, [r5, #6]
 80042c8:	2306      	movs	r3, #6
 80042ca:	602b      	str	r3, [r5, #0]
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <calibrate.lto_priv.295+0x64>)
 80042ce:	001a      	movs	r2, r3
 80042d0:	3230      	adds	r2, #48	; 0x30
 80042d2:	7812      	ldrb	r2, [r2, #0]
 80042d4:	2a01      	cmp	r2, #1
 80042d6:	d9df      	bls.n	8004298 <calibrate.lto_priv.295+0x18>
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	4a03      	ldr	r2, [pc, #12]	; (80042e8 <calibrate.lto_priv.295+0x68>)
 80042dc:	4903      	ldr	r1, [pc, #12]	; (80042ec <calibrate.lto_priv.295+0x6c>)
 80042de:	2002      	movs	r0, #2
 80042e0:	4798      	blx	r3
 80042e2:	e7d9      	b.n	8004298 <calibrate.lto_priv.295+0x18>
 80042e4:	200003e8 	.word	0x200003e8
 80042e8:	0801b8e0 	.word	0x0801b8e0
 80042ec:	0801b8cc 	.word	0x0801b8cc

080042f0 <set_calibration_context.lto_priv.280>:
 80042f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f2:	680b      	ldr	r3, [r1, #0]
 80042f4:	b087      	sub	sp, #28
 80042f6:	0004      	movs	r4, r0
 80042f8:	000d      	movs	r5, r1
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d00b      	beq.n	8004316 <set_calibration_context.lto_priv.280+0x26>
 80042fe:	2206      	movs	r2, #6
 8004300:	9200      	str	r2, [sp, #0]
 8004302:	4a22      	ldr	r2, [pc, #136]	; (800438c <set_calibration_context.lto_priv.280+0x9c>)
 8004304:	4922      	ldr	r1, [pc, #136]	; (8004390 <set_calibration_context.lto_priv.280+0xa0>)
 8004306:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004308:	2000      	movs	r0, #0
 800430a:	4a22      	ldr	r2, [pc, #136]	; (8004394 <set_calibration_context.lto_priv.280+0xa4>)
 800430c:	47a0      	blx	r4
 800430e:	2600      	movs	r6, #0
 8004310:	0030      	movs	r0, r6
 8004312:	b007      	add	sp, #28
 8004314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004316:	af03      	add	r7, sp, #12
 8004318:	0038      	movs	r0, r7
 800431a:	f7ff ff05 	bl	8004128 <calculate_pll_divisors.lto_priv.292>
 800431e:	1e06      	subs	r6, r0, #0
 8004320:	d0f6      	beq.n	8004310 <set_calibration_context.lto_priv.280+0x20>
 8004322:	88bb      	ldrh	r3, [r7, #4]
 8004324:	6063      	str	r3, [r4, #4]
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	60a3      	str	r3, [r4, #8]
 800432a:	887b      	ldrh	r3, [r7, #2]
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	893b      	ldrh	r3, [r7, #8]
 8004330:	81a3      	strh	r3, [r4, #12]
 8004332:	88ab      	ldrh	r3, [r5, #4]
 8004334:	6123      	str	r3, [r4, #16]
 8004336:	88eb      	ldrh	r3, [r5, #6]
 8004338:	6163      	str	r3, [r4, #20]
 800433a:	892b      	ldrh	r3, [r5, #8]
 800433c:	61a3      	str	r3, [r4, #24]
 800433e:	896b      	ldrh	r3, [r5, #10]
 8004340:	61e3      	str	r3, [r4, #28]
 8004342:	89ab      	ldrh	r3, [r5, #12]
 8004344:	6223      	str	r3, [r4, #32]
 8004346:	8a2b      	ldrh	r3, [r5, #16]
 8004348:	84a3      	strh	r3, [r4, #36]	; 0x24
 800434a:	8a6b      	ldrh	r3, [r5, #18]
 800434c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800434e:	89ed      	ldrh	r5, [r5, #14]
 8004350:	00ad      	lsls	r5, r5, #2
 8004352:	b2ad      	uxth	r5, r5
 8004354:	0028      	movs	r0, r5
 8004356:	303e      	adds	r0, #62	; 0x3e
 8004358:	b280      	uxth	r0, r0
 800435a:	287b      	cmp	r0, #123	; 0x7b
 800435c:	d912      	bls.n	8004384 <set_calibration_context.lto_priv.280+0x94>
 800435e:	217c      	movs	r1, #124	; 0x7c
 8004360:	f008 fde2 	bl	800cf28 <__aeabi_uidivmod>
 8004364:	2200      	movs	r2, #0
 8004366:	0028      	movs	r0, r5
 8004368:	2301      	movs	r3, #1
 800436a:	b28d      	uxth	r5, r1
 800436c:	0011      	movs	r1, r2
 800436e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004370:	6323      	str	r3, [r4, #48]	; 0x30
 8004372:	2003      	movs	r0, #3
 8004374:	6423      	str	r3, [r4, #64]	; 0x40
 8004376:	2300      	movs	r3, #0
 8004378:	62a5      	str	r5, [r4, #40]	; 0x28
 800437a:	6360      	str	r0, [r4, #52]	; 0x34
 800437c:	63a1      	str	r1, [r4, #56]	; 0x38
 800437e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8004380:	6463      	str	r3, [r4, #68]	; 0x44
 8004382:	e7c5      	b.n	8004310 <set_calibration_context.lto_priv.280+0x20>
 8004384:	2203      	movs	r2, #3
 8004386:	2101      	movs	r1, #1
 8004388:	2300      	movs	r3, #0
 800438a:	e7f0      	b.n	800436e <set_calibration_context.lto_priv.280+0x7e>
 800438c:	200003e8 	.word	0x200003e8
 8004390:	0801b427 	.word	0x0801b427
 8004394:	0801b88e 	.word	0x0801b88e

08004398 <get_pll_freq>:
 8004398:	b510      	push	{r4, lr}
 800439a:	f7ff fead 	bl	80040f8 <acc_rss_integration_get_sensor_reference_frequency>
 800439e:	1c01      	adds	r1, r0, #0
 80043a0:	1c04      	adds	r4, r0, #0
 80043a2:	4805      	ldr	r0, [pc, #20]	; (80043b8 <get_pll_freq+0x20>)
 80043a4:	f008 f8f6 	bl	800c594 <__aeabi_fdiv>
 80043a8:	f00e f950 	bl	801264c <roundf>
 80043ac:	1c01      	adds	r1, r0, #0
 80043ae:	1c20      	adds	r0, r4, #0
 80043b0:	f008 fa02 	bl	800c7b8 <__aeabi_fmul>
 80043b4:	bd10      	pop	{r4, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	4f1502f9 	.word	0x4f1502f9

080043bc <points_to_meter.lto_priv.296>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	0004      	movs	r4, r0
 80043c0:	f7ff ffea 	bl	8004398 <get_pll_freq>
 80043c4:	1c05      	adds	r5, r0, #0
 80043c6:	0020      	movs	r0, r4
 80043c8:	f009 f90c 	bl	800d5e4 <__aeabi_i2f>
 80043cc:	1c04      	adds	r4, r0, #0
 80043ce:	20fe      	movs	r0, #254	; 0xfe
 80043d0:	1c29      	adds	r1, r5, #0
 80043d2:	0580      	lsls	r0, r0, #22
 80043d4:	f008 f8de 	bl	800c594 <__aeabi_fdiv>
 80043d8:	1c01      	adds	r1, r0, #0
 80043da:	1c20      	adds	r0, r4, #0
 80043dc:	f008 f9ec 	bl	800c7b8 <__aeabi_fmul>
 80043e0:	4903      	ldr	r1, [pc, #12]	; (80043f0 <points_to_meter.lto_priv.296+0x34>)
 80043e2:	f008 f9e9 	bl	800c7b8 <__aeabi_fmul>
 80043e6:	21fc      	movs	r1, #252	; 0xfc
 80043e8:	0589      	lsls	r1, r1, #22
 80043ea:	f008 f9e5 	bl	800c7b8 <__aeabi_fmul>
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	4d8ef3c2 	.word	0x4d8ef3c2

080043f4 <meter_to_points.lto_priv.300>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	1c04      	adds	r4, r0, #0
 80043f8:	f7ff ffce 	bl	8004398 <get_pll_freq>
 80043fc:	1c21      	adds	r1, r4, #0
 80043fe:	1c06      	adds	r6, r0, #0
 8004400:	1c20      	adds	r0, r4, #0
 8004402:	f007 ff2d 	bl	800c260 <__aeabi_fadd>
 8004406:	1c05      	adds	r5, r0, #0
 8004408:	20fe      	movs	r0, #254	; 0xfe
 800440a:	1c31      	adds	r1, r6, #0
 800440c:	0580      	lsls	r0, r0, #22
 800440e:	f008 f8c1 	bl	800c594 <__aeabi_fdiv>
 8004412:	490c      	ldr	r1, [pc, #48]	; (8004444 <meter_to_points.lto_priv.300+0x50>)
 8004414:	f008 f9d0 	bl	800c7b8 <__aeabi_fmul>
 8004418:	1c01      	adds	r1, r0, #0
 800441a:	1c28      	adds	r0, r5, #0
 800441c:	f008 f8ba 	bl	800c594 <__aeabi_fdiv>
 8004420:	2100      	movs	r1, #0
 8004422:	1c05      	adds	r5, r0, #0
 8004424:	1c20      	adds	r0, r4, #0
 8004426:	f008 febf 	bl	800d1a8 <__aeabi_fcmplt>
 800442a:	2800      	cmp	r0, #0
 800442c:	d107      	bne.n	800443e <meter_to_points.lto_priv.300+0x4a>
 800442e:	21fc      	movs	r1, #252	; 0xfc
 8004430:	0589      	lsls	r1, r1, #22
 8004432:	1c28      	adds	r0, r5, #0
 8004434:	f007 ff14 	bl	800c260 <__aeabi_fadd>
 8004438:	f009 f8b4 	bl	800d5a4 <__aeabi_f2iz>
 800443c:	bd70      	pop	{r4, r5, r6, pc}
 800443e:	21bf      	movs	r1, #191	; 0xbf
 8004440:	0609      	lsls	r1, r1, #24
 8004442:	e7f6      	b.n	8004432 <meter_to_points.lto_priv.300+0x3e>
 8004444:	4d8ef3c2 	.word	0x4d8ef3c2

08004448 <initialize.lto_priv.303>:
 8004448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444a:	b0a1      	sub	sp, #132	; 0x84
 800444c:	9308      	str	r3, [sp, #32]
 800444e:	000b      	movs	r3, r1
 8004450:	3332      	adds	r3, #50	; 0x32
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	9009      	str	r0, [sp, #36]	; 0x24
 8004456:	000e      	movs	r6, r1
 8004458:	920a      	str	r2, [sp, #40]	; 0x28
 800445a:	2b06      	cmp	r3, #6
 800445c:	d008      	beq.n	8004470 <initialize.lto_priv.303+0x28>
 800445e:	2b09      	cmp	r3, #9
 8004460:	d006      	beq.n	8004470 <initialize.lto_priv.303+0x28>
 8004462:	4bb4      	ldr	r3, [pc, #720]	; (8004734 <initialize.lto_priv.303+0x2ec>)
 8004464:	4ab4      	ldr	r2, [pc, #720]	; (8004738 <initialize.lto_priv.303+0x2f0>)
 8004466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004468:	49b4      	ldr	r1, [pc, #720]	; (800473c <initialize.lto_priv.303+0x2f4>)
 800446a:	2000      	movs	r0, #0
 800446c:	4798      	blx	r3
 800446e:	e147      	b.n	8004700 <initialize.lto_priv.303+0x2b8>
 8004470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004472:	0030      	movs	r0, r6
 8004474:	695d      	ldr	r5, [r3, #20]
 8004476:	f7fc f993 	bl	80007a0 <configuration_is_valid>
 800447a:	2800      	cmp	r0, #0
 800447c:	d03d      	beq.n	80044fa <initialize.lto_priv.303+0xb2>
 800447e:	0033      	movs	r3, r6
 8004480:	332c      	adds	r3, #44	; 0x2c
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d038      	beq.n	80044fa <initialize.lto_priv.303+0xb2>
 8004488:	0030      	movs	r0, r6
 800448a:	f7fc f989 	bl	80007a0 <configuration_is_valid>
 800448e:	2400      	movs	r4, #0
 8004490:	42a0      	cmp	r0, r4
 8004492:	d001      	beq.n	8004498 <initialize.lto_priv.303+0x50>
 8004494:	2334      	movs	r3, #52	; 0x34
 8004496:	5ef4      	ldrsh	r4, [r6, r3]
 8004498:	b223      	sxth	r3, r4
 800449a:	0030      	movs	r0, r6
 800449c:	9307      	str	r3, [sp, #28]
 800449e:	f7fc f97f 	bl	80007a0 <configuration_is_valid>
 80044a2:	2300      	movs	r3, #0
 80044a4:	b2a4      	uxth	r4, r4
 80044a6:	4298      	cmp	r0, r3
 80044a8:	d001      	beq.n	80044ae <initialize.lto_priv.303+0x66>
 80044aa:	2236      	movs	r2, #54	; 0x36
 80044ac:	5eb3      	ldrsh	r3, [r6, r2]
 80044ae:	18e4      	adds	r4, r4, r3
 80044b0:	b223      	sxth	r3, r4
 80044b2:	0030      	movs	r0, r6
 80044b4:	9306      	str	r3, [sp, #24]
 80044b6:	f7fc f9a9 	bl	800080c <acc_base_configuration_downsampling_factor_get>
 80044ba:	9a07      	ldr	r2, [sp, #28]
 80044bc:	9b06      	ldr	r3, [sp, #24]
 80044be:	0001      	movs	r1, r0
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	0018      	movs	r0, r3
 80044c4:	f008 fe1a 	bl	800d0fc <__aeabi_idivmod>
 80044c8:	1e0c      	subs	r4, r1, #0
 80044ca:	dd0e      	ble.n	80044ea <initialize.lto_priv.303+0xa2>
 80044cc:	4b99      	ldr	r3, [pc, #612]	; (8004734 <initialize.lto_priv.303+0x2ec>)
 80044ce:	001a      	movs	r2, r3
 80044d0:	3230      	adds	r2, #48	; 0x30
 80044d2:	7812      	ldrb	r2, [r2, #0]
 80044d4:	2a01      	cmp	r2, #1
 80044d6:	d904      	bls.n	80044e2 <initialize.lto_priv.303+0x9a>
 80044d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044da:	4a99      	ldr	r2, [pc, #612]	; (8004740 <initialize.lto_priv.303+0x2f8>)
 80044dc:	4997      	ldr	r1, [pc, #604]	; (800473c <initialize.lto_priv.303+0x2f4>)
 80044de:	2002      	movs	r0, #2
 80044e0:	4798      	blx	r3
 80044e2:	9b06      	ldr	r3, [sp, #24]
 80044e4:	1b1c      	subs	r4, r3, r4
 80044e6:	b223      	sxth	r3, r4
 80044e8:	9306      	str	r3, [sp, #24]
 80044ea:	9b06      	ldr	r3, [sp, #24]
 80044ec:	9a07      	ldr	r2, [sp, #28]
 80044ee:	4293      	cmp	r3, r2
 80044f0:	da20      	bge.n	8004534 <initialize.lto_priv.303+0xec>
 80044f2:	4b90      	ldr	r3, [pc, #576]	; (8004734 <initialize.lto_priv.303+0x2ec>)
 80044f4:	4a93      	ldr	r2, [pc, #588]	; (8004744 <initialize.lto_priv.303+0x2fc>)
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	e7b6      	b.n	8004468 <initialize.lto_priv.303+0x20>
 80044fa:	0030      	movs	r0, r6
 80044fc:	f7fc f950 	bl	80007a0 <configuration_is_valid>
 8004500:	2700      	movs	r7, #0
 8004502:	2800      	cmp	r0, #0
 8004504:	d000      	beq.n	8004508 <initialize.lto_priv.303+0xc0>
 8004506:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8004508:	0030      	movs	r0, r6
 800450a:	f7fc f949 	bl	80007a0 <configuration_is_valid>
 800450e:	2800      	cmp	r0, #0
 8004510:	d00e      	beq.n	8004530 <initialize.lto_priv.303+0xe8>
 8004512:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8004514:	1c39      	adds	r1, r7, #0
 8004516:	f007 fea3 	bl	800c260 <__aeabi_fadd>
 800451a:	1c04      	adds	r4, r0, #0
 800451c:	1c38      	adds	r0, r7, #0
 800451e:	f7ff ff69 	bl	80043f4 <meter_to_points.lto_priv.300>
 8004522:	b203      	sxth	r3, r0
 8004524:	1c20      	adds	r0, r4, #0
 8004526:	9307      	str	r3, [sp, #28]
 8004528:	f7ff ff64 	bl	80043f4 <meter_to_points.lto_priv.300>
 800452c:	b203      	sxth	r3, r0
 800452e:	e7c0      	b.n	80044b2 <initialize.lto_priv.303+0x6a>
 8004530:	2000      	movs	r0, #0
 8004532:	e7ef      	b.n	8004514 <initialize.lto_priv.303+0xcc>
 8004534:	0030      	movs	r0, r6
 8004536:	f7fc f933 	bl	80007a0 <configuration_is_valid>
 800453a:	2800      	cmp	r0, #0
 800453c:	d005      	beq.n	800454a <initialize.lto_priv.303+0x102>
 800453e:	0033      	movs	r3, r6
 8004540:	336e      	adds	r3, #110	; 0x6e
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d000      	beq.n	800454a <initialize.lto_priv.303+0x102>
 8004548:	e1e0      	b.n	800490c <initialize.lto_priv.303+0x4c4>
 800454a:	0033      	movs	r3, r6
 800454c:	332e      	adds	r3, #46	; 0x2e
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d100      	bne.n	8004556 <initialize.lto_priv.303+0x10e>
 8004554:	e0d7      	b.n	8004706 <initialize.lto_priv.303+0x2be>
 8004556:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8004558:	b213      	sxth	r3, r2
 800455a:	3b01      	subs	r3, #1
 800455c:	2007      	movs	r0, #7
 800455e:	015b      	lsls	r3, r3, #5
 8004560:	b29b      	uxth	r3, r3
 8004562:	0019      	movs	r1, r3
 8004564:	0152      	lsls	r2, r2, #5
 8004566:	3a1a      	subs	r2, #26
 8004568:	b212      	sxth	r2, r2
 800456a:	17d4      	asrs	r4, r2, #31
 800456c:	4004      	ands	r4, r0
 800456e:	18a2      	adds	r2, r4, r2
 8004570:	10d2      	asrs	r2, r2, #3
 8004572:	00d2      	lsls	r2, r2, #3
 8004574:	390f      	subs	r1, #15
 8004576:	1a8c      	subs	r4, r1, r2
 8004578:	9a07      	ldr	r2, [sp, #28]
 800457a:	b224      	sxth	r4, r4
 800457c:	4294      	cmp	r4, r2
 800457e:	dc00      	bgt.n	8004582 <initialize.lto_priv.303+0x13a>
 8004580:	e0ee      	b.n	8004760 <initialize.lto_priv.303+0x318>
 8004582:	4b6c      	ldr	r3, [pc, #432]	; (8004734 <initialize.lto_priv.303+0x2ec>)
 8004584:	0010      	movs	r0, r2
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	9308      	str	r3, [sp, #32]
 800458a:	f7ff ff17 	bl	80043bc <points_to_meter.lto_priv.296>
 800458e:	2100      	movs	r1, #0
 8004590:	f008 fe0a 	bl	800d1a8 <__aeabi_fcmplt>
 8004594:	4f6c      	ldr	r7, [pc, #432]	; (8004748 <initialize.lto_priv.303+0x300>)
 8004596:	2800      	cmp	r0, #0
 8004598:	d100      	bne.n	800459c <initialize.lto_priv.303+0x154>
 800459a:	4f6c      	ldr	r7, [pc, #432]	; (800474c <initialize.lto_priv.303+0x304>)
 800459c:	9807      	ldr	r0, [sp, #28]
 800459e:	f7ff ff0d 	bl	80043bc <points_to_meter.lto_priv.296>
 80045a2:	1c05      	adds	r5, r0, #0
 80045a4:	9807      	ldr	r0, [sp, #28]
 80045a6:	f7ff ff09 	bl	80043bc <points_to_meter.lto_priv.296>
 80045aa:	2100      	movs	r1, #0
 80045ac:	f008 fdfc 	bl	800d1a8 <__aeabi_fcmplt>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d100      	bne.n	80045b6 <initialize.lto_priv.303+0x16e>
 80045b4:	e0ab      	b.n	800470e <initialize.lto_priv.303+0x2c6>
 80045b6:	4966      	ldr	r1, [pc, #408]	; (8004750 <initialize.lto_priv.303+0x308>)
 80045b8:	1c28      	adds	r0, r5, #0
 80045ba:	f008 f8fd 	bl	800c7b8 <__aeabi_fmul>
 80045be:	4965      	ldr	r1, [pc, #404]	; (8004754 <initialize.lto_priv.303+0x30c>)
 80045c0:	f007 fe4e 	bl	800c260 <__aeabi_fadd>
 80045c4:	f008 fe38 	bl	800d238 <__aeabi_f2uiz>
 80045c8:	9009      	str	r0, [sp, #36]	; 0x24
 80045ca:	9807      	ldr	r0, [sp, #28]
 80045cc:	f7ff fef6 	bl	80043bc <points_to_meter.lto_priv.296>
 80045d0:	1c05      	adds	r5, r0, #0
 80045d2:	9807      	ldr	r0, [sp, #28]
 80045d4:	f7ff fef2 	bl	80043bc <points_to_meter.lto_priv.296>
 80045d8:	2100      	movs	r1, #0
 80045da:	f008 fde5 	bl	800d1a8 <__aeabi_fcmplt>
 80045de:	2800      	cmp	r0, #0
 80045e0:	d100      	bne.n	80045e4 <initialize.lto_priv.303+0x19c>
 80045e2:	e097      	b.n	8004714 <initialize.lto_priv.303+0x2cc>
 80045e4:	495a      	ldr	r1, [pc, #360]	; (8004750 <initialize.lto_priv.303+0x308>)
 80045e6:	1c28      	adds	r0, r5, #0
 80045e8:	f008 f8e6 	bl	800c7b8 <__aeabi_fmul>
 80045ec:	4959      	ldr	r1, [pc, #356]	; (8004754 <initialize.lto_priv.303+0x30c>)
 80045ee:	f007 fe37 	bl	800c260 <__aeabi_fadd>
 80045f2:	1c05      	adds	r5, r0, #0
 80045f4:	9807      	ldr	r0, [sp, #28]
 80045f6:	f7ff fee1 	bl	80043bc <points_to_meter.lto_priv.296>
 80045fa:	1c06      	adds	r6, r0, #0
 80045fc:	9807      	ldr	r0, [sp, #28]
 80045fe:	f7ff fedd 	bl	80043bc <points_to_meter.lto_priv.296>
 8004602:	2100      	movs	r1, #0
 8004604:	f008 fdd0 	bl	800d1a8 <__aeabi_fcmplt>
 8004608:	2800      	cmp	r0, #0
 800460a:	d100      	bne.n	800460e <initialize.lto_priv.303+0x1c6>
 800460c:	e085      	b.n	800471a <initialize.lto_priv.303+0x2d2>
 800460e:	4950      	ldr	r1, [pc, #320]	; (8004750 <initialize.lto_priv.303+0x308>)
 8004610:	1c30      	adds	r0, r6, #0
 8004612:	f008 f8d1 	bl	800c7b8 <__aeabi_fmul>
 8004616:	494f      	ldr	r1, [pc, #316]	; (8004754 <initialize.lto_priv.303+0x30c>)
 8004618:	f007 fe22 	bl	800c260 <__aeabi_fadd>
 800461c:	f008 fe0c 	bl	800d238 <__aeabi_f2uiz>
 8004620:	f009 f82a 	bl	800d678 <__aeabi_ui2f>
 8004624:	1c01      	adds	r1, r0, #0
 8004626:	1c28      	adds	r0, r5, #0
 8004628:	f008 f9f8 	bl	800ca1c <__aeabi_fsub>
 800462c:	494a      	ldr	r1, [pc, #296]	; (8004758 <initialize.lto_priv.303+0x310>)
 800462e:	f008 f8c3 	bl	800c7b8 <__aeabi_fmul>
 8004632:	f008 fe01 	bl	800d238 <__aeabi_f2uiz>
 8004636:	9007      	str	r0, [sp, #28]
 8004638:	0020      	movs	r0, r4
 800463a:	f7ff febf 	bl	80043bc <points_to_meter.lto_priv.296>
 800463e:	2100      	movs	r1, #0
 8004640:	f008 fdb2 	bl	800d1a8 <__aeabi_fcmplt>
 8004644:	4b40      	ldr	r3, [pc, #256]	; (8004748 <initialize.lto_priv.303+0x300>)
 8004646:	9306      	str	r3, [sp, #24]
 8004648:	2800      	cmp	r0, #0
 800464a:	d101      	bne.n	8004650 <initialize.lto_priv.303+0x208>
 800464c:	4b3f      	ldr	r3, [pc, #252]	; (800474c <initialize.lto_priv.303+0x304>)
 800464e:	9306      	str	r3, [sp, #24]
 8004650:	0020      	movs	r0, r4
 8004652:	f7ff feb3 	bl	80043bc <points_to_meter.lto_priv.296>
 8004656:	1c05      	adds	r5, r0, #0
 8004658:	0020      	movs	r0, r4
 800465a:	f7ff feaf 	bl	80043bc <points_to_meter.lto_priv.296>
 800465e:	2100      	movs	r1, #0
 8004660:	f008 fda2 	bl	800d1a8 <__aeabi_fcmplt>
 8004664:	2800      	cmp	r0, #0
 8004666:	d05b      	beq.n	8004720 <initialize.lto_priv.303+0x2d8>
 8004668:	4939      	ldr	r1, [pc, #228]	; (8004750 <initialize.lto_priv.303+0x308>)
 800466a:	1c28      	adds	r0, r5, #0
 800466c:	f008 f8a4 	bl	800c7b8 <__aeabi_fmul>
 8004670:	4938      	ldr	r1, [pc, #224]	; (8004754 <initialize.lto_priv.303+0x30c>)
 8004672:	f007 fdf5 	bl	800c260 <__aeabi_fadd>
 8004676:	f008 fddf 	bl	800d238 <__aeabi_f2uiz>
 800467a:	0005      	movs	r5, r0
 800467c:	0020      	movs	r0, r4
 800467e:	f7ff fe9d 	bl	80043bc <points_to_meter.lto_priv.296>
 8004682:	1c06      	adds	r6, r0, #0
 8004684:	0020      	movs	r0, r4
 8004686:	f7ff fe99 	bl	80043bc <points_to_meter.lto_priv.296>
 800468a:	2100      	movs	r1, #0
 800468c:	f008 fd8c 	bl	800d1a8 <__aeabi_fcmplt>
 8004690:	2800      	cmp	r0, #0
 8004692:	d048      	beq.n	8004726 <initialize.lto_priv.303+0x2de>
 8004694:	492e      	ldr	r1, [pc, #184]	; (8004750 <initialize.lto_priv.303+0x308>)
 8004696:	1c30      	adds	r0, r6, #0
 8004698:	f008 f88e 	bl	800c7b8 <__aeabi_fmul>
 800469c:	492d      	ldr	r1, [pc, #180]	; (8004754 <initialize.lto_priv.303+0x30c>)
 800469e:	f007 fddf 	bl	800c260 <__aeabi_fadd>
 80046a2:	1c06      	adds	r6, r0, #0
 80046a4:	0020      	movs	r0, r4
 80046a6:	f7ff fe89 	bl	80043bc <points_to_meter.lto_priv.296>
 80046aa:	900a      	str	r0, [sp, #40]	; 0x28
 80046ac:	0020      	movs	r0, r4
 80046ae:	f7ff fe85 	bl	80043bc <points_to_meter.lto_priv.296>
 80046b2:	2100      	movs	r1, #0
 80046b4:	f008 fd78 	bl	800d1a8 <__aeabi_fcmplt>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d037      	beq.n	800472c <initialize.lto_priv.303+0x2e4>
 80046bc:	4924      	ldr	r1, [pc, #144]	; (8004750 <initialize.lto_priv.303+0x308>)
 80046be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80046c0:	f008 f87a 	bl	800c7b8 <__aeabi_fmul>
 80046c4:	4923      	ldr	r1, [pc, #140]	; (8004754 <initialize.lto_priv.303+0x30c>)
 80046c6:	f007 fdcb 	bl	800c260 <__aeabi_fadd>
 80046ca:	f008 fdb5 	bl	800d238 <__aeabi_f2uiz>
 80046ce:	f008 ffd3 	bl	800d678 <__aeabi_ui2f>
 80046d2:	1c01      	adds	r1, r0, #0
 80046d4:	1c30      	adds	r0, r6, #0
 80046d6:	f008 f9a1 	bl	800ca1c <__aeabi_fsub>
 80046da:	491f      	ldr	r1, [pc, #124]	; (8004758 <initialize.lto_priv.303+0x310>)
 80046dc:	f008 f86c 	bl	800c7b8 <__aeabi_fmul>
 80046e0:	f008 fdaa 	bl	800d238 <__aeabi_f2uiz>
 80046e4:	9b06      	ldr	r3, [sp, #24]
 80046e6:	9004      	str	r0, [sp, #16]
 80046e8:	9302      	str	r3, [sp, #8]
 80046ea:	9b07      	ldr	r3, [sp, #28]
 80046ec:	2000      	movs	r0, #0
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f2:	4a1a      	ldr	r2, [pc, #104]	; (800475c <initialize.lto_priv.303+0x314>)
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	003b      	movs	r3, r7
 80046f8:	4910      	ldr	r1, [pc, #64]	; (800473c <initialize.lto_priv.303+0x2f4>)
 80046fa:	9c08      	ldr	r4, [sp, #32]
 80046fc:	9503      	str	r5, [sp, #12]
 80046fe:	47a0      	blx	r4
 8004700:	2000      	movs	r0, #0
 8004702:	b021      	add	sp, #132	; 0x84
 8004704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004706:	0033      	movs	r3, r6
 8004708:	3332      	adds	r3, #50	; 0x32
 800470a:	781a      	ldrb	r2, [r3, #0]
 800470c:	e724      	b.n	8004558 <initialize.lto_priv.303+0x110>
 800470e:	21fe      	movs	r1, #254	; 0xfe
 8004710:	0589      	lsls	r1, r1, #22
 8004712:	e751      	b.n	80045b8 <initialize.lto_priv.303+0x170>
 8004714:	21fe      	movs	r1, #254	; 0xfe
 8004716:	0589      	lsls	r1, r1, #22
 8004718:	e765      	b.n	80045e6 <initialize.lto_priv.303+0x19e>
 800471a:	21fe      	movs	r1, #254	; 0xfe
 800471c:	0589      	lsls	r1, r1, #22
 800471e:	e777      	b.n	8004610 <initialize.lto_priv.303+0x1c8>
 8004720:	21fe      	movs	r1, #254	; 0xfe
 8004722:	0589      	lsls	r1, r1, #22
 8004724:	e7a1      	b.n	800466a <initialize.lto_priv.303+0x222>
 8004726:	21fe      	movs	r1, #254	; 0xfe
 8004728:	0589      	lsls	r1, r1, #22
 800472a:	e7b4      	b.n	8004696 <initialize.lto_priv.303+0x24e>
 800472c:	21fe      	movs	r1, #254	; 0xfe
 800472e:	0589      	lsls	r1, r1, #22
 8004730:	e7c5      	b.n	80046be <initialize.lto_priv.303+0x276>
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	200003e8 	.word	0x200003e8
 8004738:	0801b8fe 	.word	0x0801b8fe
 800473c:	0801b8cc 	.word	0x0801b8cc
 8004740:	0801b929 	.word	0x0801b929
 8004744:	0801b95c 	.word	0x0801b95c
 8004748:	0801cb79 	.word	0x0801cb79
 800474c:	0801bcc3 	.word	0x0801bcc3
 8004750:	bf800000 	.word	0xbf800000
 8004754:	350637bd 	.word	0x350637bd
 8004758:	49742400 	.word	0x49742400
 800475c:	0801b98b 	.word	0x0801b98b
 8004760:	3b30      	subs	r3, #48	; 0x30
 8004762:	b21c      	sxth	r4, r3
 8004764:	9b06      	ldr	r3, [sp, #24]
 8004766:	429c      	cmp	r4, r3
 8004768:	db00      	blt.n	800476c <initialize.lto_priv.303+0x324>
 800476a:	e0cf      	b.n	800490c <initialize.lto_priv.303+0x4c4>
 800476c:	4bcd      	ldr	r3, [pc, #820]	; (8004aa4 <initialize.lto_priv.303+0x65c>)
 800476e:	9806      	ldr	r0, [sp, #24]
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	9307      	str	r3, [sp, #28]
 8004774:	f7ff fe22 	bl	80043bc <points_to_meter.lto_priv.296>
 8004778:	2100      	movs	r1, #0
 800477a:	f008 fd15 	bl	800d1a8 <__aeabi_fcmplt>
 800477e:	4fca      	ldr	r7, [pc, #808]	; (8004aa8 <initialize.lto_priv.303+0x660>)
 8004780:	2800      	cmp	r0, #0
 8004782:	d100      	bne.n	8004786 <initialize.lto_priv.303+0x33e>
 8004784:	4fc9      	ldr	r7, [pc, #804]	; (8004aac <initialize.lto_priv.303+0x664>)
 8004786:	9806      	ldr	r0, [sp, #24]
 8004788:	f7ff fe18 	bl	80043bc <points_to_meter.lto_priv.296>
 800478c:	1c05      	adds	r5, r0, #0
 800478e:	9806      	ldr	r0, [sp, #24]
 8004790:	f7ff fe14 	bl	80043bc <points_to_meter.lto_priv.296>
 8004794:	2100      	movs	r1, #0
 8004796:	f008 fd07 	bl	800d1a8 <__aeabi_fcmplt>
 800479a:	2800      	cmp	r0, #0
 800479c:	d100      	bne.n	80047a0 <initialize.lto_priv.303+0x358>
 800479e:	e0a3      	b.n	80048e8 <initialize.lto_priv.303+0x4a0>
 80047a0:	49c3      	ldr	r1, [pc, #780]	; (8004ab0 <initialize.lto_priv.303+0x668>)
 80047a2:	1c28      	adds	r0, r5, #0
 80047a4:	f008 f808 	bl	800c7b8 <__aeabi_fmul>
 80047a8:	49c2      	ldr	r1, [pc, #776]	; (8004ab4 <initialize.lto_priv.303+0x66c>)
 80047aa:	f007 fd59 	bl	800c260 <__aeabi_fadd>
 80047ae:	f008 fd43 	bl	800d238 <__aeabi_f2uiz>
 80047b2:	9008      	str	r0, [sp, #32]
 80047b4:	9806      	ldr	r0, [sp, #24]
 80047b6:	f7ff fe01 	bl	80043bc <points_to_meter.lto_priv.296>
 80047ba:	1c05      	adds	r5, r0, #0
 80047bc:	9806      	ldr	r0, [sp, #24]
 80047be:	f7ff fdfd 	bl	80043bc <points_to_meter.lto_priv.296>
 80047c2:	2100      	movs	r1, #0
 80047c4:	f008 fcf0 	bl	800d1a8 <__aeabi_fcmplt>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d100      	bne.n	80047ce <initialize.lto_priv.303+0x386>
 80047cc:	e08f      	b.n	80048ee <initialize.lto_priv.303+0x4a6>
 80047ce:	49b8      	ldr	r1, [pc, #736]	; (8004ab0 <initialize.lto_priv.303+0x668>)
 80047d0:	1c28      	adds	r0, r5, #0
 80047d2:	f007 fff1 	bl	800c7b8 <__aeabi_fmul>
 80047d6:	49b7      	ldr	r1, [pc, #732]	; (8004ab4 <initialize.lto_priv.303+0x66c>)
 80047d8:	f007 fd42 	bl	800c260 <__aeabi_fadd>
 80047dc:	1c05      	adds	r5, r0, #0
 80047de:	9806      	ldr	r0, [sp, #24]
 80047e0:	f7ff fdec 	bl	80043bc <points_to_meter.lto_priv.296>
 80047e4:	1c06      	adds	r6, r0, #0
 80047e6:	9806      	ldr	r0, [sp, #24]
 80047e8:	f7ff fde8 	bl	80043bc <points_to_meter.lto_priv.296>
 80047ec:	2100      	movs	r1, #0
 80047ee:	f008 fcdb 	bl	800d1a8 <__aeabi_fcmplt>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d07e      	beq.n	80048f4 <initialize.lto_priv.303+0x4ac>
 80047f6:	49ae      	ldr	r1, [pc, #696]	; (8004ab0 <initialize.lto_priv.303+0x668>)
 80047f8:	1c30      	adds	r0, r6, #0
 80047fa:	f007 ffdd 	bl	800c7b8 <__aeabi_fmul>
 80047fe:	49ad      	ldr	r1, [pc, #692]	; (8004ab4 <initialize.lto_priv.303+0x66c>)
 8004800:	f007 fd2e 	bl	800c260 <__aeabi_fadd>
 8004804:	f008 fd18 	bl	800d238 <__aeabi_f2uiz>
 8004808:	f008 ff36 	bl	800d678 <__aeabi_ui2f>
 800480c:	1c01      	adds	r1, r0, #0
 800480e:	1c28      	adds	r0, r5, #0
 8004810:	f008 f904 	bl	800ca1c <__aeabi_fsub>
 8004814:	49a8      	ldr	r1, [pc, #672]	; (8004ab8 <initialize.lto_priv.303+0x670>)
 8004816:	f007 ffcf 	bl	800c7b8 <__aeabi_fmul>
 800481a:	f008 fd0d 	bl	800d238 <__aeabi_f2uiz>
 800481e:	9009      	str	r0, [sp, #36]	; 0x24
 8004820:	0020      	movs	r0, r4
 8004822:	f7ff fdcb 	bl	80043bc <points_to_meter.lto_priv.296>
 8004826:	2100      	movs	r1, #0
 8004828:	f008 fcbe 	bl	800d1a8 <__aeabi_fcmplt>
 800482c:	4b9e      	ldr	r3, [pc, #632]	; (8004aa8 <initialize.lto_priv.303+0x660>)
 800482e:	9306      	str	r3, [sp, #24]
 8004830:	2800      	cmp	r0, #0
 8004832:	d101      	bne.n	8004838 <initialize.lto_priv.303+0x3f0>
 8004834:	4b9d      	ldr	r3, [pc, #628]	; (8004aac <initialize.lto_priv.303+0x664>)
 8004836:	9306      	str	r3, [sp, #24]
 8004838:	0020      	movs	r0, r4
 800483a:	f7ff fdbf 	bl	80043bc <points_to_meter.lto_priv.296>
 800483e:	1c05      	adds	r5, r0, #0
 8004840:	0020      	movs	r0, r4
 8004842:	f7ff fdbb 	bl	80043bc <points_to_meter.lto_priv.296>
 8004846:	2100      	movs	r1, #0
 8004848:	f008 fcae 	bl	800d1a8 <__aeabi_fcmplt>
 800484c:	2800      	cmp	r0, #0
 800484e:	d054      	beq.n	80048fa <initialize.lto_priv.303+0x4b2>
 8004850:	4997      	ldr	r1, [pc, #604]	; (8004ab0 <initialize.lto_priv.303+0x668>)
 8004852:	1c28      	adds	r0, r5, #0
 8004854:	f007 ffb0 	bl	800c7b8 <__aeabi_fmul>
 8004858:	4996      	ldr	r1, [pc, #600]	; (8004ab4 <initialize.lto_priv.303+0x66c>)
 800485a:	f007 fd01 	bl	800c260 <__aeabi_fadd>
 800485e:	f008 fceb 	bl	800d238 <__aeabi_f2uiz>
 8004862:	0005      	movs	r5, r0
 8004864:	0020      	movs	r0, r4
 8004866:	f7ff fda9 	bl	80043bc <points_to_meter.lto_priv.296>
 800486a:	1c06      	adds	r6, r0, #0
 800486c:	0020      	movs	r0, r4
 800486e:	f7ff fda5 	bl	80043bc <points_to_meter.lto_priv.296>
 8004872:	2100      	movs	r1, #0
 8004874:	f008 fc98 	bl	800d1a8 <__aeabi_fcmplt>
 8004878:	2800      	cmp	r0, #0
 800487a:	d041      	beq.n	8004900 <initialize.lto_priv.303+0x4b8>
 800487c:	498c      	ldr	r1, [pc, #560]	; (8004ab0 <initialize.lto_priv.303+0x668>)
 800487e:	1c30      	adds	r0, r6, #0
 8004880:	f007 ff9a 	bl	800c7b8 <__aeabi_fmul>
 8004884:	498b      	ldr	r1, [pc, #556]	; (8004ab4 <initialize.lto_priv.303+0x66c>)
 8004886:	f007 fceb 	bl	800c260 <__aeabi_fadd>
 800488a:	1c06      	adds	r6, r0, #0
 800488c:	0020      	movs	r0, r4
 800488e:	f7ff fd95 	bl	80043bc <points_to_meter.lto_priv.296>
 8004892:	900a      	str	r0, [sp, #40]	; 0x28
 8004894:	0020      	movs	r0, r4
 8004896:	f7ff fd91 	bl	80043bc <points_to_meter.lto_priv.296>
 800489a:	2100      	movs	r1, #0
 800489c:	f008 fc84 	bl	800d1a8 <__aeabi_fcmplt>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d030      	beq.n	8004906 <initialize.lto_priv.303+0x4be>
 80048a4:	4982      	ldr	r1, [pc, #520]	; (8004ab0 <initialize.lto_priv.303+0x668>)
 80048a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80048a8:	f007 ff86 	bl	800c7b8 <__aeabi_fmul>
 80048ac:	4981      	ldr	r1, [pc, #516]	; (8004ab4 <initialize.lto_priv.303+0x66c>)
 80048ae:	f007 fcd7 	bl	800c260 <__aeabi_fadd>
 80048b2:	f008 fcc1 	bl	800d238 <__aeabi_f2uiz>
 80048b6:	f008 fedf 	bl	800d678 <__aeabi_ui2f>
 80048ba:	1c01      	adds	r1, r0, #0
 80048bc:	1c30      	adds	r0, r6, #0
 80048be:	f008 f8ad 	bl	800ca1c <__aeabi_fsub>
 80048c2:	497d      	ldr	r1, [pc, #500]	; (8004ab8 <initialize.lto_priv.303+0x670>)
 80048c4:	f007 ff78 	bl	800c7b8 <__aeabi_fmul>
 80048c8:	f008 fcb6 	bl	800d238 <__aeabi_f2uiz>
 80048cc:	9b06      	ldr	r3, [sp, #24]
 80048ce:	9004      	str	r0, [sp, #16]
 80048d0:	9302      	str	r3, [sp, #8]
 80048d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d4:	9503      	str	r5, [sp, #12]
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	9b08      	ldr	r3, [sp, #32]
 80048da:	4a78      	ldr	r2, [pc, #480]	; (8004abc <initialize.lto_priv.303+0x674>)
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	4978      	ldr	r1, [pc, #480]	; (8004ac0 <initialize.lto_priv.303+0x678>)
 80048e0:	003b      	movs	r3, r7
 80048e2:	2000      	movs	r0, #0
 80048e4:	9c07      	ldr	r4, [sp, #28]
 80048e6:	e70a      	b.n	80046fe <initialize.lto_priv.303+0x2b6>
 80048e8:	21fe      	movs	r1, #254	; 0xfe
 80048ea:	0589      	lsls	r1, r1, #22
 80048ec:	e759      	b.n	80047a2 <initialize.lto_priv.303+0x35a>
 80048ee:	21fe      	movs	r1, #254	; 0xfe
 80048f0:	0589      	lsls	r1, r1, #22
 80048f2:	e76d      	b.n	80047d0 <initialize.lto_priv.303+0x388>
 80048f4:	21fe      	movs	r1, #254	; 0xfe
 80048f6:	0589      	lsls	r1, r1, #22
 80048f8:	e77e      	b.n	80047f8 <initialize.lto_priv.303+0x3b0>
 80048fa:	21fe      	movs	r1, #254	; 0xfe
 80048fc:	0589      	lsls	r1, r1, #22
 80048fe:	e7a8      	b.n	8004852 <initialize.lto_priv.303+0x40a>
 8004900:	21fe      	movs	r1, #254	; 0xfe
 8004902:	0589      	lsls	r1, r1, #22
 8004904:	e7bb      	b.n	800487e <initialize.lto_priv.303+0x436>
 8004906:	21fe      	movs	r1, #254	; 0xfe
 8004908:	0589      	lsls	r1, r1, #22
 800490a:	e7cc      	b.n	80048a6 <initialize.lto_priv.303+0x45e>
 800490c:	0030      	movs	r0, r6
 800490e:	f7fb ff7d 	bl	800080c <acc_base_configuration_downsampling_factor_get>
 8004912:	9b06      	ldr	r3, [sp, #24]
 8004914:	9a07      	ldr	r2, [sp, #28]
 8004916:	900b      	str	r0, [sp, #44]	; 0x2c
 8004918:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800491a:	1a98      	subs	r0, r3, r2
 800491c:	f008 fb08 	bl	800cf30 <__divsi3>
 8004920:	3001      	adds	r0, #1
 8004922:	b283      	uxth	r3, r0
 8004924:	0030      	movs	r0, r6
 8004926:	930d      	str	r3, [sp, #52]	; 0x34
 8004928:	f7fb ff7b 	bl	8000822 <acc_base_configuration_sparse_sweeps_per_frame_get>
 800492c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800492e:	4358      	muls	r0, r3
 8004930:	b283      	uxth	r3, r0
 8004932:	0030      	movs	r0, r6
 8004934:	930f      	str	r3, [sp, #60]	; 0x3c
 8004936:	f7fb ff33 	bl	80007a0 <configuration_is_valid>
 800493a:	2300      	movs	r3, #0
 800493c:	4298      	cmp	r0, r3
 800493e:	d009      	beq.n	8004954 <initialize.lto_priv.303+0x50c>
 8004940:	0032      	movs	r2, r6
 8004942:	324f      	adds	r2, #79	; 0x4f
 8004944:	0033      	movs	r3, r6
 8004946:	7812      	ldrb	r2, [r2, #0]
 8004948:	3352      	adds	r3, #82	; 0x52
 800494a:	1e51      	subs	r1, r2, #1
 800494c:	418a      	sbcs	r2, r1
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	4252      	negs	r2, r2
 8004952:	4013      	ands	r3, r2
 8004954:	002a      	movs	r2, r5
 8004956:	32b8      	adds	r2, #184	; 0xb8
 8004958:	8013      	strh	r3, [r2, #0]
 800495a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800495c:	18d3      	adds	r3, r2, r3
 800495e:	2280      	movs	r2, #128	; 0x80
 8004960:	0112      	lsls	r2, r2, #4
 8004962:	4293      	cmp	r3, r2
 8004964:	dd03      	ble.n	800496e <initialize.lto_priv.303+0x526>
 8004966:	4b4f      	ldr	r3, [pc, #316]	; (8004aa4 <initialize.lto_priv.303+0x65c>)
 8004968:	4a56      	ldr	r2, [pc, #344]	; (8004ac4 <initialize.lto_priv.303+0x67c>)
 800496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496c:	e57c      	b.n	8004468 <initialize.lto_priv.303+0x20>
 800496e:	0030      	movs	r0, r6
 8004970:	f7fb ffce 	bl	8000910 <acc_base_configuration_hw_accelerated_average_samples_get>
 8004974:	0007      	movs	r7, r0
 8004976:	0030      	movs	r0, r6
 8004978:	f7fb ff12 	bl	80007a0 <configuration_is_valid>
 800497c:	2406      	movs	r4, #6
 800497e:	2800      	cmp	r0, #0
 8004980:	d002      	beq.n	8004988 <initialize.lto_priv.303+0x540>
 8004982:	0033      	movs	r3, r6
 8004984:	3332      	adds	r3, #50	; 0x32
 8004986:	781c      	ldrb	r4, [r3, #0]
 8004988:	0030      	movs	r0, r6
 800498a:	f7fb ff09 	bl	80007a0 <configuration_is_valid>
 800498e:	2303      	movs	r3, #3
 8004990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004992:	435a      	muls	r2, r3
 8004994:	9210      	str	r2, [sp, #64]	; 0x40
 8004996:	2800      	cmp	r0, #0
 8004998:	d004      	beq.n	80049a4 <initialize.lto_priv.303+0x55c>
 800499a:	0032      	movs	r2, r6
 800499c:	326a      	adds	r2, #106	; 0x6a
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	d13b      	bne.n	8004a1c <initialize.lto_priv.303+0x5d4>
 80049a4:	2007      	movs	r0, #7
 80049a6:	4347      	muls	r7, r0
 80049a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049aa:	370d      	adds	r7, #13
 80049ac:	435f      	muls	r7, r3
 80049ae:	437c      	muls	r4, r7
 80049b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049b2:	18e3      	adds	r3, r4, r3
 80049b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80049b6:	f7ff fcef 	bl	8004398 <get_pll_freq>
 80049ba:	21f4      	movs	r1, #244	; 0xf4
 80049bc:	0589      	lsls	r1, r1, #22
 80049be:	f007 fefb 	bl	800c7b8 <__aeabi_fmul>
 80049c2:	9018      	str	r0, [sp, #96]	; 0x60
 80049c4:	0030      	movs	r0, r6
 80049c6:	f7fb feeb 	bl	80007a0 <configuration_is_valid>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d035      	beq.n	8004a3a <initialize.lto_priv.303+0x5f2>
 80049ce:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80049d0:	f008 fe52 	bl	800d678 <__aeabi_ui2f>
 80049d4:	6e74      	ldr	r4, [r6, #100]	; 0x64
 80049d6:	1c07      	adds	r7, r0, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	1c20      	adds	r0, r4, #0
 80049dc:	f008 fbf8 	bl	800d1d0 <__aeabi_fcmpgt>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d02a      	beq.n	8004a3a <initialize.lto_priv.303+0x5f2>
 80049e4:	1c21      	adds	r1, r4, #0
 80049e6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80049e8:	f007 fdd4 	bl	800c594 <__aeabi_fdiv>
 80049ec:	1c39      	adds	r1, r7, #0
 80049ee:	f008 f815 	bl	800ca1c <__aeabi_fsub>
 80049f2:	1c04      	adds	r4, r0, #0
 80049f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80049f6:	f008 fe3f 	bl	800d678 <__aeabi_ui2f>
 80049fa:	1c01      	adds	r1, r0, #0
 80049fc:	1c20      	adds	r0, r4, #0
 80049fe:	f007 fdc9 	bl	800c594 <__aeabi_fdiv>
 8004a02:	21fc      	movs	r1, #252	; 0xfc
 8004a04:	0589      	lsls	r1, r1, #22
 8004a06:	f007 fc2b 	bl	800c260 <__aeabi_fadd>
 8004a0a:	f008 fdcb 	bl	800d5a4 <__aeabi_f2iz>
 8004a0e:	9011      	str	r0, [sp, #68]	; 0x44
 8004a10:	2800      	cmp	r0, #0
 8004a12:	da0b      	bge.n	8004a2c <initialize.lto_priv.303+0x5e4>
 8004a14:	4b23      	ldr	r3, [pc, #140]	; (8004aa4 <initialize.lto_priv.303+0x65c>)
 8004a16:	4a2c      	ldr	r2, [pc, #176]	; (8004ac8 <initialize.lto_priv.303+0x680>)
 8004a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1a:	e525      	b.n	8004468 <initialize.lto_priv.303+0x20>
 8004a1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a1e:	9310      	str	r3, [sp, #64]	; 0x40
 8004a20:	437a      	muls	r2, r7
 8004a22:	0017      	movs	r7, r2
 8004a24:	370f      	adds	r7, #15
 8004a26:	437c      	muls	r4, r7
 8004a28:	34d4      	adds	r4, #212	; 0xd4
 8004a2a:	e7c1      	b.n	80049b0 <initialize.lto_priv.303+0x568>
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <initialize.lto_priv.303+0x684>)
 8004a2e:	4298      	cmp	r0, r3
 8004a30:	dd04      	ble.n	8004a3c <initialize.lto_priv.303+0x5f4>
 8004a32:	4b1c      	ldr	r3, [pc, #112]	; (8004aa4 <initialize.lto_priv.303+0x65c>)
 8004a34:	4a26      	ldr	r2, [pc, #152]	; (8004ad0 <initialize.lto_priv.303+0x688>)
 8004a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a38:	e516      	b.n	8004468 <initialize.lto_priv.303+0x20>
 8004a3a:	9011      	str	r0, [sp, #68]	; 0x44
 8004a3c:	002b      	movs	r3, r5
 8004a3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004a40:	33b6      	adds	r3, #182	; 0xb6
 8004a42:	801a      	strh	r2, [r3, #0]
 8004a44:	0030      	movs	r0, r6
 8004a46:	f7fb ff77 	bl	8000938 <acc_base_configuration_tx_disable_get>
 8004a4a:	002b      	movs	r3, r5
 8004a4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a4e:	33ba      	adds	r3, #186	; 0xba
 8004a50:	7018      	strb	r0, [r3, #0]
 8004a52:	3b06      	subs	r3, #6
 8004a54:	801a      	strh	r2, [r3, #0]
 8004a56:	0033      	movs	r3, r6
 8004a58:	332e      	adds	r3, #46	; 0x2e
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01c      	beq.n	8004a9a <initialize.lto_priv.303+0x652>
 8004a60:	8e37      	ldrh	r7, [r6, #48]	; 0x30
 8004a62:	466a      	mov	r2, sp
 8004a64:	2401      	movs	r4, #1
 8004a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a68:	809f      	strh	r7, [r3, #4]
 8004a6a:	9b07      	ldr	r3, [sp, #28]
 8004a6c:	8613      	strh	r3, [r2, #48]	; 0x30
 8004a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a70:	9a07      	ldr	r2, [sp, #28]
 8004a72:	819c      	strh	r4, [r3, #12]
 8004a74:	811a      	strh	r2, [r3, #8]
 8004a76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a78:	815a      	strh	r2, [r3, #10]
 8004a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b07      	cmp	r3, #7
 8004a82:	d806      	bhi.n	8004a92 <initialize.lto_priv.303+0x64a>
 8004a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a86:	2008      	movs	r0, #8
 8004a88:	f008 fb38 	bl	800d0fc <__aeabi_idivmod>
 8004a8c:	9112      	str	r1, [sp, #72]	; 0x48
 8004a8e:	2900      	cmp	r1, #0
 8004a90:	d022      	beq.n	8004ad8 <initialize.lto_priv.303+0x690>
 8004a92:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <initialize.lto_priv.303+0x65c>)
 8004a94:	4a0f      	ldr	r2, [pc, #60]	; (8004ad4 <initialize.lto_priv.303+0x68c>)
 8004a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a98:	e4e6      	b.n	8004468 <initialize.lto_priv.303+0x20>
 8004a9a:	0033      	movs	r3, r6
 8004a9c:	3332      	adds	r3, #50	; 0x32
 8004a9e:	781f      	ldrb	r7, [r3, #0]
 8004aa0:	e7df      	b.n	8004a62 <initialize.lto_priv.303+0x61a>
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	200003e8 	.word	0x200003e8
 8004aa8:	0801cb79 	.word	0x0801cb79
 8004aac:	0801bcc3 	.word	0x0801bcc3
 8004ab0:	bf800000 	.word	0xbf800000
 8004ab4:	350637bd 	.word	0x350637bd
 8004ab8:	49742400 	.word	0x49742400
 8004abc:	0801b9c8 	.word	0x0801b9c8
 8004ac0:	0801b8cc 	.word	0x0801b8cc
 8004ac4:	0801ba05 	.word	0x0801ba05
 8004ac8:	0801ba65 	.word	0x0801ba65
 8004acc:	0000fffe 	.word	0x0000fffe
 8004ad0:	0801ba86 	.word	0x0801ba86
 8004ad4:	0801baa6 	.word	0x0801baa6
 8004ad8:	b23f      	sxth	r7, r7
 8004ada:	3f01      	subs	r7, #1
 8004adc:	017f      	lsls	r7, r7, #5
 8004ade:	b2bb      	uxth	r3, r7
 8004ae0:	9319      	str	r3, [sp, #100]	; 0x64
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	466b      	mov	r3, sp
 8004ae6:	380f      	subs	r0, #15
 8004ae8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004aea:	b280      	uxth	r0, r0
 8004aec:	1a1f      	subs	r7, r3, r0
 8004aee:	b23f      	sxth	r7, r7
 8004af0:	10fb      	asrs	r3, r7, #3
 8004af2:	931c      	str	r3, [sp, #112]	; 0x70
 8004af4:	9b06      	ldr	r3, [sp, #24]
 8004af6:	10fa      	asrs	r2, r7, #3
 8004af8:	1a18      	subs	r0, r3, r0
 8004afa:	b203      	sxth	r3, r0
 8004afc:	930e      	str	r3, [sp, #56]	; 0x38
 8004afe:	1aa4      	subs	r4, r4, r2
 8004b00:	10db      	asrs	r3, r3, #3
 8004b02:	18e4      	adds	r4, r4, r3
 8004b04:	b2a4      	uxth	r4, r4
 8004b06:	b223      	sxth	r3, r4
 8004b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b0a:	2008      	movs	r0, #8
 8004b0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b0e:	f008 fa0f 	bl	800cf30 <__divsi3>
 8004b12:	003b      	movs	r3, r7
 8004b14:	9015      	str	r0, [sp, #84]	; 0x54
 8004b16:	48d9      	ldr	r0, [pc, #868]	; (8004e7c <initialize.lto_priv.303+0xa34>)
 8004b18:	4003      	ands	r3, r0
 8004b1a:	0007      	movs	r7, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	da04      	bge.n	8004b2a <initialize.lto_priv.303+0x6e2>
 8004b20:	2208      	movs	r2, #8
 8004b22:	3b01      	subs	r3, #1
 8004b24:	4252      	negs	r2, r2
 8004b26:	4313      	orrs	r3, r2
 8004b28:	3301      	adds	r3, #1
 8004b2a:	b21b      	sxth	r3, r3
 8004b2c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	da02      	bge.n	8004b38 <initialize.lto_priv.303+0x6f0>
 8004b32:	3308      	adds	r3, #8
 8004b34:	b21b      	sxth	r3, r3
 8004b36:	930c      	str	r3, [sp, #48]	; 0x30
 8004b38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b3c:	f008 fade 	bl	800d0fc <__aeabi_idivmod>
 8004b40:	2250      	movs	r2, #80	; 0x50
 8004b42:	466b      	mov	r3, sp
 8004b44:	9114      	str	r1, [sp, #80]	; 0x50
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	2100      	movs	r1, #0
 8004b4a:	5e59      	ldrsh	r1, [r3, r1]
 8004b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b4e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004b50:	3b01      	subs	r3, #1
 8004b52:	931a      	str	r3, [sp, #104]	; 0x68
 8004b54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b58:	4038      	ands	r0, r7
 8004b5a:	4353      	muls	r3, r2
 8004b5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004b5e:	0007      	movs	r7, r0
 8004b60:	189b      	adds	r3, r3, r2
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	b21a      	sxth	r2, r3
 8004b66:	2800      	cmp	r0, #0
 8004b68:	da04      	bge.n	8004b74 <initialize.lto_priv.303+0x72c>
 8004b6a:	2008      	movs	r0, #8
 8004b6c:	3f01      	subs	r7, #1
 8004b6e:	4240      	negs	r0, r0
 8004b70:	4307      	orrs	r7, r0
 8004b72:	3701      	adds	r7, #1
 8004b74:	b238      	sxth	r0, r7
 8004b76:	900e      	str	r0, [sp, #56]	; 0x38
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	da02      	bge.n	8004b82 <initialize.lto_priv.303+0x73a>
 8004b7c:	3008      	adds	r0, #8
 8004b7e:	b200      	sxth	r0, r0
 8004b80:	900e      	str	r0, [sp, #56]	; 0x38
 8004b82:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004b84:	2801      	cmp	r0, #1
 8004b86:	d16d      	bne.n	8004c64 <initialize.lto_priv.303+0x81c>
 8004b88:	4684      	mov	ip, r0
 8004b8a:	0007      	movs	r7, r0
 8004b8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b8e:	4281      	cmp	r1, r0
 8004b90:	d103      	bne.n	8004b9a <initialize.lto_priv.303+0x752>
 8004b92:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004b94:	1a57      	subs	r7, r2, r1
 8004b96:	1e7a      	subs	r2, r7, #1
 8004b98:	4197      	sbcs	r7, r2
 8004b9a:	4662      	mov	r2, ip
 8004b9c:	4017      	ands	r7, r2
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	9216      	str	r2, [sp, #88]	; 0x58
 8004ba4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004ba6:	1be4      	subs	r4, r4, r7
 8004ba8:	1aa4      	subs	r4, r4, r2
 8004baa:	b222      	sxth	r2, r4
 8004bac:	9215      	str	r2, [sp, #84]	; 0x54
 8004bae:	4287      	cmp	r7, r0
 8004bb0:	d00a      	beq.n	8004bc8 <initialize.lto_priv.303+0x780>
 8004bb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004bb4:	2a01      	cmp	r2, #1
 8004bb6:	d101      	bne.n	8004bbc <initialize.lto_priv.303+0x774>
 8004bb8:	466b      	mov	r3, sp
 8004bba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004bbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bc0:	1a98      	subs	r0, r3, r2
 8004bc2:	f008 f9b5 	bl	800cf30 <__divsi3>
 8004bc6:	b280      	uxth	r0, r0
 8004bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bca:	2205      	movs	r2, #5
 8004bcc:	695c      	ldr	r4, [r3, #20]
 8004bce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004bd0:	0021      	movs	r1, r4
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004bd8:	318c      	adds	r1, #140	; 0x8c
 8004bda:	600b      	str	r3, [r1, #0]
 8004bdc:	3a32      	subs	r2, #50	; 0x32
 8004bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004be0:	b212      	sxth	r2, r2
 8004be2:	189b      	adds	r3, r3, r2
 8004be4:	604b      	str	r3, [r1, #4]
 8004be6:	0023      	movs	r3, r4
 8004be8:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004bea:	3394      	adds	r3, #148	; 0x94
 8004bec:	188a      	adds	r2, r1, r2
 8004bee:	c384      	stmia	r3!, {r2, r7}
 8004bf0:	0022      	movs	r2, r4
 8004bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004bf4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004bf6:	17db      	asrs	r3, r3, #31
 8004bf8:	1a5b      	subs	r3, r3, r1
 8004bfa:	329c      	adds	r2, #156	; 0x9c
 8004bfc:	0fdb      	lsrs	r3, r3, #31
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	0023      	movs	r3, r4
 8004c02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004c04:	33a0      	adds	r3, #160	; 0xa0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004c0a:	6058      	str	r0, [r3, #4]
 8004c0c:	609a      	str	r2, [r3, #8]
 8004c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004c12:	0027      	movs	r7, r4
 8004c14:	1a98      	subs	r0, r3, r2
 8004c16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c18:	f008 f98a 	bl	800cf30 <__divsi3>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c20:	37ac      	adds	r7, #172	; 0xac
 8004c22:	6038      	str	r0, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	dd01      	ble.n	8004c2c <initialize.lto_priv.303+0x7e4>
 8004c28:	0013      	movs	r3, r2
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	34b0      	adds	r4, #176	; 0xb0
 8004c2e:	6023      	str	r3, [r4, #0]
 8004c30:	0030      	movs	r0, r6
 8004c32:	f7fb fdb5 	bl	80007a0 <configuration_is_valid>
 8004c36:	002b      	movs	r3, r5
 8004c38:	3370      	adds	r3, #112	; 0x70
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d004      	beq.n	8004c48 <initialize.lto_priv.303+0x800>
 8004c3e:	0032      	movs	r2, r6
 8004c40:	326a      	adds	r2, #106	; 0x6a
 8004c42:	7812      	ldrb	r2, [r2, #0]
 8004c44:	2a00      	cmp	r2, #0
 8004c46:	d118      	bne.n	8004c7a <initialize.lto_priv.303+0x832>
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	232e      	movs	r3, #46	; 0x2e
 8004c4e:	0030      	movs	r0, r6
 8004c50:	66ab      	str	r3, [r5, #104]	; 0x68
 8004c52:	f7fb fe3b 	bl	80008cc <acc_base_configuration_repetition_mode_get>
 8004c56:	2803      	cmp	r0, #3
 8004c58:	d815      	bhi.n	8004c86 <initialize.lto_priv.303+0x83e>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f008 f8ca 	bl	800cdf4 <__gnu_thumb1_case_uqi>
 8004c60:	32231f0f 	.word	0x32231f0f
 8004c64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004c66:	1a09      	subs	r1, r1, r0
 8004c68:	1e4f      	subs	r7, r1, #1
 8004c6a:	41b9      	sbcs	r1, r7
 8004c6c:	b2cf      	uxtb	r7, r1
 8004c6e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004c70:	1a52      	subs	r2, r2, r1
 8004c72:	1e51      	subs	r1, r2, #1
 8004c74:	418a      	sbcs	r2, r1
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	e792      	b.n	8004ba0 <initialize.lto_priv.303+0x758>
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	e7e5      	b.n	8004c4a <initialize.lto_priv.303+0x802>
 8004c7e:	626b      	str	r3, [r5, #36]	; 0x24
 8004c80:	62ab      	str	r3, [r5, #40]	; 0x28
 8004c82:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004c84:	632b      	str	r3, [r5, #48]	; 0x30
 8004c86:	0030      	movs	r0, r6
 8004c88:	f7fb fe5f 	bl	800094a <acc_base_configuration_power_save_mode_get>
 8004c8c:	2804      	cmp	r0, #4
 8004c8e:	d82a      	bhi.n	8004ce6 <initialize.lto_priv.303+0x89e>
 8004c90:	2300      	movs	r3, #0
 8004c92:	2201      	movs	r2, #1
 8004c94:	f008 f8ae 	bl	800cdf4 <__gnu_thumb1_case_uqi>
 8004c98:	eae72020 	.word	0xeae72020
 8004c9c:	24          	.byte	0x24
 8004c9d:	00          	.byte	0x00
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	626b      	str	r3, [r5, #36]	; 0x24
 8004ca2:	62aa      	str	r2, [r5, #40]	; 0x28
 8004ca4:	e7ed      	b.n	8004c82 <initialize.lto_priv.303+0x83a>
 8004ca6:	0030      	movs	r0, r6
 8004ca8:	f7fb fdfa 	bl	80008a0 <acc_base_configuration_update_rate_get>
 8004cac:	aa1e      	add	r2, sp, #120	; 0x78
 8004cae:	a91f      	add	r1, sp, #124	; 0x7c
 8004cb0:	f7ff fa2a 	bl	8004108 <acc_radar_engine_common_frequency_to_main_clk>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	626b      	str	r3, [r5, #36]	; 0x24
 8004cb8:	2300      	movs	r3, #0
 8004cba:	62ab      	str	r3, [r5, #40]	; 0x28
 8004cbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004cbe:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004cc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004cc2:	e7df      	b.n	8004c84 <initialize.lto_priv.303+0x83c>
 8004cc4:	0030      	movs	r0, r6
 8004cc6:	f7fb fdeb 	bl	80008a0 <acc_base_configuration_update_rate_get>
 8004cca:	aa1e      	add	r2, sp, #120	; 0x78
 8004ccc:	a91f      	add	r1, sp, #124	; 0x7c
 8004cce:	f7ff fa1b 	bl	8004108 <acc_radar_engine_common_frequency_to_main_clk>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	626b      	str	r3, [r5, #36]	; 0x24
 8004cd6:	e7f0      	b.n	8004cba <initialize.lto_priv.303+0x872>
 8004cd8:	636a      	str	r2, [r5, #52]	; 0x34
 8004cda:	63aa      	str	r2, [r5, #56]	; 0x38
 8004cdc:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004cde:	e002      	b.n	8004ce6 <initialize.lto_priv.303+0x89e>
 8004ce0:	636a      	str	r2, [r5, #52]	; 0x34
 8004ce2:	63aa      	str	r2, [r5, #56]	; 0x38
 8004ce4:	63ea      	str	r2, [r5, #60]	; 0x3c
 8004ce6:	0030      	movs	r0, r6
 8004ce8:	f7fb fd5a 	bl	80007a0 <configuration_is_valid>
 8004cec:	2300      	movs	r3, #0
 8004cee:	0007      	movs	r7, r0
 8004cf0:	4298      	cmp	r0, r3
 8004cf2:	d00b      	beq.n	8004d0c <initialize.lto_priv.303+0x8c4>
 8004cf4:	0033      	movs	r3, r6
 8004cf6:	3350      	adds	r3, #80	; 0x50
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	931b      	str	r3, [sp, #108]	; 0x6c
 8004cfc:	0033      	movs	r3, r6
 8004cfe:	3352      	adds	r3, #82	; 0x52
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	931d      	str	r3, [sp, #116]	; 0x74
 8004d04:	0033      	movs	r3, r6
 8004d06:	334f      	adds	r3, #79	; 0x4f
 8004d08:	781f      	ldrb	r7, [r3, #0]
 8004d0a:	003b      	movs	r3, r7
 8004d0c:	002a      	movs	r2, r5
 8004d0e:	3208      	adds	r2, #8
 8004d10:	67d3      	str	r3, [r2, #124]	; 0x7c
 8004d12:	2f00      	cmp	r7, #0
 8004d14:	d003      	beq.n	8004d1e <initialize.lto_priv.303+0x8d6>
 8004d16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d18:	3280      	adds	r2, #128	; 0x80
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	0030      	movs	r0, r6
 8004d20:	f7fb fe0a 	bl	8000938 <acc_base_configuration_tx_disable_get>
 8004d24:	2401      	movs	r4, #1
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d000      	beq.n	8004d2c <initialize.lto_priv.303+0x8e4>
 8004d2a:	e0a1      	b.n	8004e70 <initialize.lto_priv.303+0xa28>
 8004d2c:	2f00      	cmp	r7, #0
 8004d2e:	d001      	beq.n	8004d34 <initialize.lto_priv.303+0x8ec>
 8004d30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d32:	9312      	str	r3, [sp, #72]	; 0x48
 8004d34:	0023      	movs	r3, r4
 8004d36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d38:	0030      	movs	r0, r6
 8004d3a:	4393      	bics	r3, r2
 8004d3c:	642b      	str	r3, [r5, #64]	; 0x40
 8004d3e:	f7fb fdf2 	bl	8000926 <acc_base_configuration_decrease_tx_emission_get>
 8004d42:	4060      	eors	r0, r4
 8004d44:	b2c0      	uxtb	r0, r0
 8004d46:	6468      	str	r0, [r5, #68]	; 0x44
 8004d48:	64ac      	str	r4, [r5, #72]	; 0x48
 8004d4a:	0030      	movs	r0, r6
 8004d4c:	f7fb fde0 	bl	8000910 <acc_base_configuration_hw_accelerated_average_samples_get>
 8004d50:	2801      	cmp	r0, #1
 8004d52:	d800      	bhi.n	8004d56 <initialize.lto_priv.303+0x90e>
 8004d54:	e08e      	b.n	8004e74 <initialize.lto_priv.303+0xa2c>
 8004d56:	3802      	subs	r0, #2
 8004d58:	64ec      	str	r4, [r5, #76]	; 0x4c
 8004d5a:	6528      	str	r0, [r5, #80]	; 0x50
 8004d5c:	0030      	movs	r0, r6
 8004d5e:	f7fb fd1f 	bl	80007a0 <configuration_is_valid>
 8004d62:	2300      	movs	r3, #0
 8004d64:	4298      	cmp	r0, r3
 8004d66:	d000      	beq.n	8004d6a <initialize.lto_priv.303+0x922>
 8004d68:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8004d6a:	656b      	str	r3, [r5, #84]	; 0x54
 8004d6c:	0030      	movs	r0, r6
 8004d6e:	f7fb fd8c 	bl	800088a <acc_base_configuration_integrator_get>
 8004d72:	65a8      	str	r0, [r5, #88]	; 0x58
 8004d74:	0030      	movs	r0, r6
 8004d76:	f7fb fd73 	bl	8000860 <acc_base_configuration_wg_duration_get>
 8004d7a:	65e8      	str	r0, [r5, #92]	; 0x5c
 8004d7c:	0030      	movs	r0, r6
 8004d7e:	f7fb fd50 	bl	8000822 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8004d82:	6628      	str	r0, [r5, #96]	; 0x60
 8004d84:	0030      	movs	r0, r6
 8004d86:	f7fb fd41 	bl	800080c <acc_base_configuration_downsampling_factor_get>
 8004d8a:	67a8      	str	r0, [r5, #120]	; 0x78
 8004d8c:	0030      	movs	r0, r6
 8004d8e:	f7fb fd21 	bl	80007d4 <acc_base_configuration_asynchronous_measurement_get>
 8004d92:	2401      	movs	r4, #1
 8004d94:	4060      	eors	r0, r4
 8004d96:	b2c0      	uxtb	r0, r0
 8004d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d9a:	67e8      	str	r0, [r5, #124]	; 0x7c
 8004d9c:	889b      	ldrh	r3, [r3, #4]
 8004d9e:	666b      	str	r3, [r5, #100]	; 0x64
 8004da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da2:	895b      	ldrh	r3, [r3, #10]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	66eb      	str	r3, [r5, #108]	; 0x6c
 8004da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	930c      	str	r3, [sp, #48]	; 0x30
 8004dae:	33b6      	adds	r3, #182	; 0xb6
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	676b      	str	r3, [r5, #116]	; 0x74
 8004db4:	f7ff f9a0 	bl	80040f8 <acc_rss_integration_get_sensor_reference_frequency>
 8004db8:	1d2b      	adds	r3, r5, #4
 8004dba:	67d8      	str	r0, [r3, #124]	; 0x7c
 8004dbc:	f7ff faec 	bl	8004398 <get_pll_freq>
 8004dc0:	1c07      	adds	r7, r0, #0
 8004dc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004dc4:	f008 fc58 	bl	800d678 <__aeabi_ui2f>
 8004dc8:	1c06      	adds	r6, r0, #0
 8004dca:	20fe      	movs	r0, #254	; 0xfe
 8004dcc:	1c39      	adds	r1, r7, #0
 8004dce:	0580      	lsls	r0, r0, #22
 8004dd0:	f007 fbe0 	bl	800c594 <__aeabi_fdiv>
 8004dd4:	1c01      	adds	r1, r0, #0
 8004dd6:	1c30      	adds	r0, r6, #0
 8004dd8:	f007 fcee 	bl	800c7b8 <__aeabi_fmul>
 8004ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dde:	35b8      	adds	r5, #184	; 0xb8
 8004de0:	60d8      	str	r0, [r3, #12]
 8004de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004de4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004de6:	4358      	muls	r0, r3
 8004de8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004dea:	18c0      	adds	r0, r0, r3
 8004dec:	f008 fc44 	bl	800d678 <__aeabi_ui2f>
 8004df0:	1c01      	adds	r1, r0, #0
 8004df2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004df4:	f007 fbce 	bl	800c594 <__aeabi_fdiv>
 8004df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfa:	6118      	str	r0, [r3, #16]
 8004dfc:	9807      	ldr	r0, [sp, #28]
 8004dfe:	f7ff fadd 	bl	80043bc <points_to_meter.lto_priv.296>
 8004e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e04:	6018      	str	r0, [r3, #0]
 8004e06:	9806      	ldr	r0, [sp, #24]
 8004e08:	f7ff fad8 	bl	80043bc <points_to_meter.lto_priv.296>
 8004e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	6098      	str	r0, [r3, #8]
 8004e12:	f007 fe03 	bl	800ca1c <__aeabi_fsub>
 8004e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e1a:	6058      	str	r0, [r3, #4]
 8004e1c:	82da      	strh	r2, [r3, #22]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e22:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e24:	8293      	strh	r3, [r2, #20]
 8004e26:	8314      	strh	r4, [r2, #24]
 8004e28:	9a08      	ldr	r2, [sp, #32]
 8004e2a:	2013      	movs	r0, #19
 8004e2c:	8011      	strh	r1, [r2, #0]
 8004e2e:	8151      	strh	r1, [r2, #10]
 8004e30:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e32:	8053      	strh	r3, [r2, #2]
 8004e34:	8111      	strh	r1, [r2, #8]
 8004e36:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e38:	8313      	strh	r3, [r2, #24]
 8004e3a:	8091      	strh	r1, [r2, #4]
 8004e3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e3e:	80d4      	strh	r4, [r2, #6]
 8004e40:	8291      	strh	r1, [r2, #20]
 8004e42:	82d1      	strh	r1, [r2, #22]
 8004e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e46:	8214      	strh	r4, [r2, #16]
 8004e48:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e4a:	8013      	strh	r3, [r2, #0]
 8004e4c:	6809      	ldr	r1, [r1, #0]
 8004e4e:	0023      	movs	r3, r4
 8004e50:	f006 ffa6 	bl	800bda0 <acc_probes_execute_uint16>
 8004e54:	882b      	ldrh	r3, [r5, #0]
 8004e56:	9a08      	ldr	r2, [sp, #32]
 8004e58:	3303      	adds	r3, #3
 8004e5a:	81d3      	strh	r3, [r2, #14]
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	8193      	strh	r3, [r2, #12]
 8004e62:	0020      	movs	r0, r4
 8004e64:	e44d      	b.n	8004702 <initialize.lto_priv.303+0x2ba>
 8004e66:	636a      	str	r2, [r5, #52]	; 0x34
 8004e68:	63ab      	str	r3, [r5, #56]	; 0x38
 8004e6a:	e737      	b.n	8004cdc <initialize.lto_priv.303+0x894>
 8004e6c:	636b      	str	r3, [r5, #52]	; 0x34
 8004e6e:	e7fb      	b.n	8004e68 <initialize.lto_priv.303+0xa20>
 8004e70:	9412      	str	r4, [sp, #72]	; 0x48
 8004e72:	e75f      	b.n	8004d34 <initialize.lto_priv.303+0x8ec>
 8004e74:	2300      	movs	r3, #0
 8004e76:	64eb      	str	r3, [r5, #76]	; 0x4c
 8004e78:	652b      	str	r3, [r5, #80]	; 0x50
 8004e7a:	e76f      	b.n	8004d5c <initialize.lto_priv.303+0x914>
 8004e7c:	80000007 	.word	0x80000007

08004e80 <initialize.lto_priv.302>:
 8004e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e82:	b09b      	sub	sp, #108	; 0x6c
 8004e84:	9309      	str	r3, [sp, #36]	; 0x24
 8004e86:	000b      	movs	r3, r1
 8004e88:	3332      	adds	r3, #50	; 0x32
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	9008      	str	r0, [sp, #32]
 8004e8e:	000f      	movs	r7, r1
 8004e90:	920a      	str	r2, [sp, #40]	; 0x28
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d008      	beq.n	8004ea8 <initialize.lto_priv.302+0x28>
 8004e96:	2b09      	cmp	r3, #9
 8004e98:	d006      	beq.n	8004ea8 <initialize.lto_priv.302+0x28>
 8004e9a:	4b76      	ldr	r3, [pc, #472]	; (8005074 <initialize.lto_priv.302+0x1f4>)
 8004e9c:	4a76      	ldr	r2, [pc, #472]	; (8005078 <initialize.lto_priv.302+0x1f8>)
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	4976      	ldr	r1, [pc, #472]	; (800507c <initialize.lto_priv.302+0x1fc>)
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	4798      	blx	r3
 8004ea6:	e1c6      	b.n	8005236 <initialize.lto_priv.302+0x3b6>
 8004ea8:	9b08      	ldr	r3, [sp, #32]
 8004eaa:	0038      	movs	r0, r7
 8004eac:	695d      	ldr	r5, [r3, #20]
 8004eae:	f7fb fc77 	bl	80007a0 <configuration_is_valid>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	4298      	cmp	r0, r3
 8004eb6:	d00c      	beq.n	8004ed2 <initialize.lto_priv.302+0x52>
 8004eb8:	003a      	movs	r2, r7
 8004eba:	324f      	adds	r2, #79	; 0x4f
 8004ebc:	7810      	ldrb	r0, [r2, #0]
 8004ebe:	003b      	movs	r3, r7
 8004ec0:	0002      	movs	r2, r0
 8004ec2:	1e51      	subs	r1, r2, #1
 8004ec4:	418a      	sbcs	r2, r1
 8004ec6:	3350      	adds	r3, #80	; 0x50
 8004ec8:	781c      	ldrb	r4, [r3, #0]
 8004eca:	3302      	adds	r3, #2
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	4252      	negs	r2, r2
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	002a      	movs	r2, r5
 8004ed4:	32ce      	adds	r2, #206	; 0xce
 8004ed6:	8013      	strh	r3, [r2, #0]
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d000      	beq.n	8004ede <initialize.lto_priv.302+0x5e>
 8004edc:	0020      	movs	r0, r4
 8004ede:	002b      	movs	r3, r5
 8004ee0:	33d0      	adds	r3, #208	; 0xd0
 8004ee2:	7018      	strb	r0, [r3, #0]
 8004ee4:	0038      	movs	r0, r7
 8004ee6:	f7fb fc91 	bl	800080c <acc_base_configuration_downsampling_factor_get>
 8004eea:	002b      	movs	r3, r5
 8004eec:	2600      	movs	r6, #0
 8004eee:	33cc      	adds	r3, #204	; 0xcc
 8004ef0:	8018      	strh	r0, [r3, #0]
 8004ef2:	3b10      	subs	r3, #16
 8004ef4:	601e      	str	r6, [r3, #0]
 8004ef6:	0038      	movs	r0, r7
 8004ef8:	f7fb fd1e 	bl	8000938 <acc_base_configuration_tx_disable_get>
 8004efc:	002b      	movs	r3, r5
 8004efe:	2201      	movs	r2, #1
 8004f00:	33c0      	adds	r3, #192	; 0xc0
 8004f02:	7018      	strb	r0, [r3, #0]
 8004f04:	3b13      	subs	r3, #19
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	0028      	movs	r0, r5
 8004f0a:	f7fd fdb1 	bl	8002a70 <get_package_range_coarse_max>
 8004f0e:	900d      	str	r0, [sp, #52]	; 0x34
 8004f10:	0038      	movs	r0, r7
 8004f12:	f7fb fc45 	bl	80007a0 <configuration_is_valid>
 8004f16:	42b0      	cmp	r0, r6
 8004f18:	d04f      	beq.n	8004fba <initialize.lto_priv.302+0x13a>
 8004f1a:	003b      	movs	r3, r7
 8004f1c:	332c      	adds	r3, #44	; 0x2c
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	42b3      	cmp	r3, r6
 8004f22:	d04a      	beq.n	8004fba <initialize.lto_priv.302+0x13a>
 8004f24:	0038      	movs	r0, r7
 8004f26:	f7fb fc3b 	bl	80007a0 <configuration_is_valid>
 8004f2a:	42b0      	cmp	r0, r6
 8004f2c:	d001      	beq.n	8004f32 <initialize.lto_priv.302+0xb2>
 8004f2e:	2334      	movs	r3, #52	; 0x34
 8004f30:	5efe      	ldrsh	r6, [r7, r3]
 8004f32:	0038      	movs	r0, r7
 8004f34:	f7fb fc34 	bl	80007a0 <configuration_is_valid>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	4298      	cmp	r0, r3
 8004f3c:	d001      	beq.n	8004f42 <initialize.lto_priv.302+0xc2>
 8004f3e:	2236      	movs	r2, #54	; 0x36
 8004f40:	5ebb      	ldrsh	r3, [r7, r2]
 8004f42:	199b      	adds	r3, r3, r6
 8004f44:	9307      	str	r3, [sp, #28]
 8004f46:	003b      	movs	r3, r7
 8004f48:	332e      	adds	r3, #46	; 0x2e
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d100      	bne.n	8004f52 <initialize.lto_priv.302+0xd2>
 8004f50:	e08b      	b.n	800506a <initialize.lto_priv.302+0x1ea>
 8004f52:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004f54:	0038      	movs	r0, r7
 8004f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f58:	f7fb fc58 	bl	800080c <acc_base_configuration_downsampling_factor_get>
 8004f5c:	0004      	movs	r4, r0
 8004f5e:	2801      	cmp	r0, #1
 8004f60:	d923      	bls.n	8004faa <initialize.lto_priv.302+0x12a>
 8004f62:	2802      	cmp	r0, #2
 8004f64:	d10c      	bne.n	8004f80 <initialize.lto_priv.302+0x100>
 8004f66:	07f3      	lsls	r3, r6, #31
 8004f68:	d40a      	bmi.n	8004f80 <initialize.lto_priv.302+0x100>
 8004f6a:	4b42      	ldr	r3, [pc, #264]	; (8005074 <initialize.lto_priv.302+0x1f4>)
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	3230      	adds	r2, #48	; 0x30
 8004f70:	7812      	ldrb	r2, [r2, #0]
 8004f72:	2a01      	cmp	r2, #1
 8004f74:	d903      	bls.n	8004f7e <initialize.lto_priv.302+0xfe>
 8004f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f78:	4a41      	ldr	r2, [pc, #260]	; (8005080 <initialize.lto_priv.302+0x200>)
 8004f7a:	4942      	ldr	r1, [pc, #264]	; (8005084 <initialize.lto_priv.302+0x204>)
 8004f7c:	4798      	blx	r3
 8004f7e:	3601      	adds	r6, #1
 8004f80:	9b07      	ldr	r3, [sp, #28]
 8004f82:	0021      	movs	r1, r4
 8004f84:	1b98      	subs	r0, r3, r6
 8004f86:	f008 f8b9 	bl	800d0fc <__aeabi_idivmod>
 8004f8a:	1e0c      	subs	r4, r1, #0
 8004f8c:	dd0d      	ble.n	8004faa <initialize.lto_priv.302+0x12a>
 8004f8e:	4b39      	ldr	r3, [pc, #228]	; (8005074 <initialize.lto_priv.302+0x1f4>)
 8004f90:	001a      	movs	r2, r3
 8004f92:	3230      	adds	r2, #48	; 0x30
 8004f94:	7812      	ldrb	r2, [r2, #0]
 8004f96:	2a01      	cmp	r2, #1
 8004f98:	d904      	bls.n	8004fa4 <initialize.lto_priv.302+0x124>
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9c:	4a3a      	ldr	r2, [pc, #232]	; (8005088 <initialize.lto_priv.302+0x208>)
 8004f9e:	4939      	ldr	r1, [pc, #228]	; (8005084 <initialize.lto_priv.302+0x204>)
 8004fa0:	2002      	movs	r0, #2
 8004fa2:	4798      	blx	r3
 8004fa4:	9b07      	ldr	r3, [sp, #28]
 8004fa6:	1b1b      	subs	r3, r3, r4
 8004fa8:	9307      	str	r3, [sp, #28]
 8004faa:	9b07      	ldr	r3, [sp, #28]
 8004fac:	429e      	cmp	r6, r3
 8004fae:	dd71      	ble.n	8005094 <initialize.lto_priv.302+0x214>
 8004fb0:	4b30      	ldr	r3, [pc, #192]	; (8005074 <initialize.lto_priv.302+0x1f4>)
 8004fb2:	4a36      	ldr	r2, [pc, #216]	; (800508c <initialize.lto_priv.302+0x20c>)
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb6:	4933      	ldr	r1, [pc, #204]	; (8005084 <initialize.lto_priv.302+0x204>)
 8004fb8:	e773      	b.n	8004ea2 <initialize.lto_priv.302+0x22>
 8004fba:	0038      	movs	r0, r7
 8004fbc:	f7fb fbf0 	bl	80007a0 <configuration_is_valid>
 8004fc0:	2400      	movs	r4, #0
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d000      	beq.n	8004fc8 <initialize.lto_priv.302+0x148>
 8004fc6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004fc8:	0038      	movs	r0, r7
 8004fca:	f7fb fbe9 	bl	80007a0 <configuration_is_valid>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d043      	beq.n	800505a <initialize.lto_priv.302+0x1da>
 8004fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd4:	1c21      	adds	r1, r4, #0
 8004fd6:	f007 f943 	bl	800c260 <__aeabi_fadd>
 8004fda:	9007      	str	r0, [sp, #28]
 8004fdc:	f004 f9c4 	bl	8009368 <get_dt.constprop.10>
 8004fe0:	1c21      	adds	r1, r4, #0
 8004fe2:	900b      	str	r0, [sp, #44]	; 0x2c
 8004fe4:	1c20      	adds	r0, r4, #0
 8004fe6:	f007 f93b 	bl	800c260 <__aeabi_fadd>
 8004fea:	4929      	ldr	r1, [pc, #164]	; (8005090 <initialize.lto_priv.302+0x210>)
 8004fec:	1c06      	adds	r6, r0, #0
 8004fee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004ff0:	f007 fbe2 	bl	800c7b8 <__aeabi_fmul>
 8004ff4:	1c01      	adds	r1, r0, #0
 8004ff6:	1c30      	adds	r0, r6, #0
 8004ff8:	f007 facc 	bl	800c594 <__aeabi_fdiv>
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	1c06      	adds	r6, r0, #0
 8005000:	1c20      	adds	r0, r4, #0
 8005002:	f008 f8d1 	bl	800d1a8 <__aeabi_fcmplt>
 8005006:	2800      	cmp	r0, #0
 8005008:	d129      	bne.n	800505e <initialize.lto_priv.302+0x1de>
 800500a:	21fc      	movs	r1, #252	; 0xfc
 800500c:	0589      	lsls	r1, r1, #22
 800500e:	1c30      	adds	r0, r6, #0
 8005010:	f007 f926 	bl	800c260 <__aeabi_fadd>
 8005014:	f008 fac6 	bl	800d5a4 <__aeabi_f2iz>
 8005018:	0006      	movs	r6, r0
 800501a:	f004 f9a5 	bl	8009368 <get_dt.constprop.10>
 800501e:	9907      	ldr	r1, [sp, #28]
 8005020:	900b      	str	r0, [sp, #44]	; 0x2c
 8005022:	1c08      	adds	r0, r1, #0
 8005024:	f007 f91c 	bl	800c260 <__aeabi_fadd>
 8005028:	4919      	ldr	r1, [pc, #100]	; (8005090 <initialize.lto_priv.302+0x210>)
 800502a:	1c04      	adds	r4, r0, #0
 800502c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800502e:	f007 fbc3 	bl	800c7b8 <__aeabi_fmul>
 8005032:	1c01      	adds	r1, r0, #0
 8005034:	1c20      	adds	r0, r4, #0
 8005036:	f007 faad 	bl	800c594 <__aeabi_fdiv>
 800503a:	2100      	movs	r1, #0
 800503c:	1c04      	adds	r4, r0, #0
 800503e:	9807      	ldr	r0, [sp, #28]
 8005040:	f008 f8b2 	bl	800d1a8 <__aeabi_fcmplt>
 8005044:	2800      	cmp	r0, #0
 8005046:	d10d      	bne.n	8005064 <initialize.lto_priv.302+0x1e4>
 8005048:	21fc      	movs	r1, #252	; 0xfc
 800504a:	0589      	lsls	r1, r1, #22
 800504c:	1c20      	adds	r0, r4, #0
 800504e:	f007 f907 	bl	800c260 <__aeabi_fadd>
 8005052:	f008 faa7 	bl	800d5a4 <__aeabi_f2iz>
 8005056:	9007      	str	r0, [sp, #28]
 8005058:	e775      	b.n	8004f46 <initialize.lto_priv.302+0xc6>
 800505a:	2000      	movs	r0, #0
 800505c:	e7ba      	b.n	8004fd4 <initialize.lto_priv.302+0x154>
 800505e:	21bf      	movs	r1, #191	; 0xbf
 8005060:	0609      	lsls	r1, r1, #24
 8005062:	e7d4      	b.n	800500e <initialize.lto_priv.302+0x18e>
 8005064:	21bf      	movs	r1, #191	; 0xbf
 8005066:	0609      	lsls	r1, r1, #24
 8005068:	e7f0      	b.n	800504c <initialize.lto_priv.302+0x1cc>
 800506a:	003b      	movs	r3, r7
 800506c:	3332      	adds	r3, #50	; 0x32
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	e770      	b.n	8004f54 <initialize.lto_priv.302+0xd4>
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	200003e8 	.word	0x200003e8
 8005078:	0801ae08 	.word	0x0801ae08
 800507c:	0801b427 	.word	0x0801b427
 8005080:	0801bac2 	.word	0x0801bac2
 8005084:	0801baf7 	.word	0x0801baf7
 8005088:	0801b929 	.word	0x0801b929
 800508c:	0801b95c 	.word	0x0801b95c
 8005090:	4d8ef3c2 	.word	0x4d8ef3c2
 8005094:	0038      	movs	r0, r7
 8005096:	f7fb fb83 	bl	80007a0 <configuration_is_valid>
 800509a:	2800      	cmp	r0, #0
 800509c:	d005      	beq.n	80050aa <initialize.lto_priv.302+0x22a>
 800509e:	003b      	movs	r3, r7
 80050a0:	336e      	adds	r3, #110	; 0x6e
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d000      	beq.n	80050aa <initialize.lto_priv.302+0x22a>
 80050a8:	e1c2      	b.n	8005430 <initialize.lto_priv.302+0x5b0>
 80050aa:	4bd7      	ldr	r3, [pc, #860]	; (8005408 <initialize.lto_priv.302+0x588>)
 80050ac:	429e      	cmp	r6, r3
 80050ae:	db00      	blt.n	80050b2 <initialize.lto_priv.302+0x232>
 80050b0:	e0d0      	b.n	8005254 <initialize.lto_priv.302+0x3d4>
 80050b2:	4bd6      	ldr	r3, [pc, #856]	; (800540c <initialize.lto_priv.302+0x58c>)
 80050b4:	0030      	movs	r0, r6
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	9307      	str	r3, [sp, #28]
 80050ba:	f004 f971 	bl	80093a0 <points_to_meter.constprop.9>
 80050be:	2100      	movs	r1, #0
 80050c0:	f008 f872 	bl	800d1a8 <__aeabi_fcmplt>
 80050c4:	4fd2      	ldr	r7, [pc, #840]	; (8005410 <initialize.lto_priv.302+0x590>)
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d100      	bne.n	80050cc <initialize.lto_priv.302+0x24c>
 80050ca:	4fd2      	ldr	r7, [pc, #840]	; (8005414 <initialize.lto_priv.302+0x594>)
 80050cc:	0030      	movs	r0, r6
 80050ce:	f004 f967 	bl	80093a0 <points_to_meter.constprop.9>
 80050d2:	1c04      	adds	r4, r0, #0
 80050d4:	0030      	movs	r0, r6
 80050d6:	f004 f963 	bl	80093a0 <points_to_meter.constprop.9>
 80050da:	2100      	movs	r1, #0
 80050dc:	f008 f864 	bl	800d1a8 <__aeabi_fcmplt>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d000      	beq.n	80050e6 <initialize.lto_priv.302+0x266>
 80050e4:	e0aa      	b.n	800523c <initialize.lto_priv.302+0x3bc>
 80050e6:	21fe      	movs	r1, #254	; 0xfe
 80050e8:	0589      	lsls	r1, r1, #22
 80050ea:	1c20      	adds	r0, r4, #0
 80050ec:	f007 fb64 	bl	800c7b8 <__aeabi_fmul>
 80050f0:	49c9      	ldr	r1, [pc, #804]	; (8005418 <initialize.lto_priv.302+0x598>)
 80050f2:	f007 f8b5 	bl	800c260 <__aeabi_fadd>
 80050f6:	f008 f89f 	bl	800d238 <__aeabi_f2uiz>
 80050fa:	9008      	str	r0, [sp, #32]
 80050fc:	0030      	movs	r0, r6
 80050fe:	f004 f94f 	bl	80093a0 <points_to_meter.constprop.9>
 8005102:	1c04      	adds	r4, r0, #0
 8005104:	0030      	movs	r0, r6
 8005106:	f004 f94b 	bl	80093a0 <points_to_meter.constprop.9>
 800510a:	2100      	movs	r1, #0
 800510c:	f008 f84c 	bl	800d1a8 <__aeabi_fcmplt>
 8005110:	2800      	cmp	r0, #0
 8005112:	d000      	beq.n	8005116 <initialize.lto_priv.302+0x296>
 8005114:	e094      	b.n	8005240 <initialize.lto_priv.302+0x3c0>
 8005116:	21fe      	movs	r1, #254	; 0xfe
 8005118:	0589      	lsls	r1, r1, #22
 800511a:	1c20      	adds	r0, r4, #0
 800511c:	f007 fb4c 	bl	800c7b8 <__aeabi_fmul>
 8005120:	49bd      	ldr	r1, [pc, #756]	; (8005418 <initialize.lto_priv.302+0x598>)
 8005122:	f007 f89d 	bl	800c260 <__aeabi_fadd>
 8005126:	1c04      	adds	r4, r0, #0
 8005128:	0030      	movs	r0, r6
 800512a:	f004 f939 	bl	80093a0 <points_to_meter.constprop.9>
 800512e:	1c05      	adds	r5, r0, #0
 8005130:	0030      	movs	r0, r6
 8005132:	f004 f935 	bl	80093a0 <points_to_meter.constprop.9>
 8005136:	2100      	movs	r1, #0
 8005138:	f008 f836 	bl	800d1a8 <__aeabi_fcmplt>
 800513c:	2800      	cmp	r0, #0
 800513e:	d000      	beq.n	8005142 <initialize.lto_priv.302+0x2c2>
 8005140:	e080      	b.n	8005244 <initialize.lto_priv.302+0x3c4>
 8005142:	21fe      	movs	r1, #254	; 0xfe
 8005144:	0589      	lsls	r1, r1, #22
 8005146:	1c28      	adds	r0, r5, #0
 8005148:	f007 fb36 	bl	800c7b8 <__aeabi_fmul>
 800514c:	49b2      	ldr	r1, [pc, #712]	; (8005418 <initialize.lto_priv.302+0x598>)
 800514e:	f007 f887 	bl	800c260 <__aeabi_fadd>
 8005152:	f008 f871 	bl	800d238 <__aeabi_f2uiz>
 8005156:	f008 fa8f 	bl	800d678 <__aeabi_ui2f>
 800515a:	1c01      	adds	r1, r0, #0
 800515c:	1c20      	adds	r0, r4, #0
 800515e:	f007 fc5d 	bl	800ca1c <__aeabi_fsub>
 8005162:	49ae      	ldr	r1, [pc, #696]	; (800541c <initialize.lto_priv.302+0x59c>)
 8005164:	f007 fb28 	bl	800c7b8 <__aeabi_fmul>
 8005168:	f008 f866 	bl	800d238 <__aeabi_f2uiz>
 800516c:	9009      	str	r0, [sp, #36]	; 0x24
 800516e:	48a6      	ldr	r0, [pc, #664]	; (8005408 <initialize.lto_priv.302+0x588>)
 8005170:	f004 f916 	bl	80093a0 <points_to_meter.constprop.9>
 8005174:	2100      	movs	r1, #0
 8005176:	f008 f817 	bl	800d1a8 <__aeabi_fcmplt>
 800517a:	4ca5      	ldr	r4, [pc, #660]	; (8005410 <initialize.lto_priv.302+0x590>)
 800517c:	2800      	cmp	r0, #0
 800517e:	d100      	bne.n	8005182 <initialize.lto_priv.302+0x302>
 8005180:	4ca4      	ldr	r4, [pc, #656]	; (8005414 <initialize.lto_priv.302+0x594>)
 8005182:	48a1      	ldr	r0, [pc, #644]	; (8005408 <initialize.lto_priv.302+0x588>)
 8005184:	f004 f90c 	bl	80093a0 <points_to_meter.constprop.9>
 8005188:	1c05      	adds	r5, r0, #0
 800518a:	489f      	ldr	r0, [pc, #636]	; (8005408 <initialize.lto_priv.302+0x588>)
 800518c:	f004 f908 	bl	80093a0 <points_to_meter.constprop.9>
 8005190:	2100      	movs	r1, #0
 8005192:	f008 f809 	bl	800d1a8 <__aeabi_fcmplt>
 8005196:	2800      	cmp	r0, #0
 8005198:	d156      	bne.n	8005248 <initialize.lto_priv.302+0x3c8>
 800519a:	21fe      	movs	r1, #254	; 0xfe
 800519c:	0589      	lsls	r1, r1, #22
 800519e:	1c28      	adds	r0, r5, #0
 80051a0:	f007 fb0a 	bl	800c7b8 <__aeabi_fmul>
 80051a4:	499c      	ldr	r1, [pc, #624]	; (8005418 <initialize.lto_priv.302+0x598>)
 80051a6:	f007 f85b 	bl	800c260 <__aeabi_fadd>
 80051aa:	f008 f845 	bl	800d238 <__aeabi_f2uiz>
 80051ae:	0005      	movs	r5, r0
 80051b0:	4895      	ldr	r0, [pc, #596]	; (8005408 <initialize.lto_priv.302+0x588>)
 80051b2:	f004 f8f5 	bl	80093a0 <points_to_meter.constprop.9>
 80051b6:	1c06      	adds	r6, r0, #0
 80051b8:	4893      	ldr	r0, [pc, #588]	; (8005408 <initialize.lto_priv.302+0x588>)
 80051ba:	f004 f8f1 	bl	80093a0 <points_to_meter.constprop.9>
 80051be:	2100      	movs	r1, #0
 80051c0:	f007 fff2 	bl	800d1a8 <__aeabi_fcmplt>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d141      	bne.n	800524c <initialize.lto_priv.302+0x3cc>
 80051c8:	21fe      	movs	r1, #254	; 0xfe
 80051ca:	0589      	lsls	r1, r1, #22
 80051cc:	1c30      	adds	r0, r6, #0
 80051ce:	f007 faf3 	bl	800c7b8 <__aeabi_fmul>
 80051d2:	4991      	ldr	r1, [pc, #580]	; (8005418 <initialize.lto_priv.302+0x598>)
 80051d4:	f007 f844 	bl	800c260 <__aeabi_fadd>
 80051d8:	1c06      	adds	r6, r0, #0
 80051da:	488b      	ldr	r0, [pc, #556]	; (8005408 <initialize.lto_priv.302+0x588>)
 80051dc:	f004 f8e0 	bl	80093a0 <points_to_meter.constprop.9>
 80051e0:	900a      	str	r0, [sp, #40]	; 0x28
 80051e2:	4889      	ldr	r0, [pc, #548]	; (8005408 <initialize.lto_priv.302+0x588>)
 80051e4:	f004 f8dc 	bl	80093a0 <points_to_meter.constprop.9>
 80051e8:	2100      	movs	r1, #0
 80051ea:	f007 ffdd 	bl	800d1a8 <__aeabi_fcmplt>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d12e      	bne.n	8005250 <initialize.lto_priv.302+0x3d0>
 80051f2:	21fe      	movs	r1, #254	; 0xfe
 80051f4:	0589      	lsls	r1, r1, #22
 80051f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051f8:	f007 fade 	bl	800c7b8 <__aeabi_fmul>
 80051fc:	4986      	ldr	r1, [pc, #536]	; (8005418 <initialize.lto_priv.302+0x598>)
 80051fe:	f007 f82f 	bl	800c260 <__aeabi_fadd>
 8005202:	f008 f819 	bl	800d238 <__aeabi_f2uiz>
 8005206:	f008 fa37 	bl	800d678 <__aeabi_ui2f>
 800520a:	1c01      	adds	r1, r0, #0
 800520c:	1c30      	adds	r0, r6, #0
 800520e:	f007 fc05 	bl	800ca1c <__aeabi_fsub>
 8005212:	4982      	ldr	r1, [pc, #520]	; (800541c <initialize.lto_priv.302+0x59c>)
 8005214:	f007 fad0 	bl	800c7b8 <__aeabi_fmul>
 8005218:	f008 f80e 	bl	800d238 <__aeabi_f2uiz>
 800521c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800521e:	9004      	str	r0, [sp, #16]
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	9b08      	ldr	r3, [sp, #32]
 8005224:	2000      	movs	r0, #0
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	003b      	movs	r3, r7
 800522a:	9402      	str	r4, [sp, #8]
 800522c:	4a7c      	ldr	r2, [pc, #496]	; (8005420 <initialize.lto_priv.302+0x5a0>)
 800522e:	497d      	ldr	r1, [pc, #500]	; (8005424 <initialize.lto_priv.302+0x5a4>)
 8005230:	9c07      	ldr	r4, [sp, #28]
 8005232:	9503      	str	r5, [sp, #12]
 8005234:	47a0      	blx	r4
 8005236:	2000      	movs	r0, #0
 8005238:	b01b      	add	sp, #108	; 0x6c
 800523a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800523c:	497a      	ldr	r1, [pc, #488]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 800523e:	e754      	b.n	80050ea <initialize.lto_priv.302+0x26a>
 8005240:	4979      	ldr	r1, [pc, #484]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 8005242:	e76a      	b.n	800511a <initialize.lto_priv.302+0x29a>
 8005244:	4978      	ldr	r1, [pc, #480]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 8005246:	e77e      	b.n	8005146 <initialize.lto_priv.302+0x2c6>
 8005248:	4977      	ldr	r1, [pc, #476]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 800524a:	e7a8      	b.n	800519e <initialize.lto_priv.302+0x31e>
 800524c:	4976      	ldr	r1, [pc, #472]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 800524e:	e7bd      	b.n	80051cc <initialize.lto_priv.302+0x34c>
 8005250:	4975      	ldr	r1, [pc, #468]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 8005252:	e7d0      	b.n	80051f6 <initialize.lto_priv.302+0x376>
 8005254:	247c      	movs	r4, #124	; 0x7c
 8005256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005258:	015b      	lsls	r3, r3, #5
 800525a:	3b4b      	subs	r3, #75	; 0x4b
 800525c:	435c      	muls	r4, r3
 800525e:	9b07      	ldr	r3, [sp, #28]
 8005260:	429c      	cmp	r4, r3
 8005262:	db00      	blt.n	8005266 <initialize.lto_priv.302+0x3e6>
 8005264:	e0e4      	b.n	8005430 <initialize.lto_priv.302+0x5b0>
 8005266:	4b69      	ldr	r3, [pc, #420]	; (800540c <initialize.lto_priv.302+0x58c>)
 8005268:	9807      	ldr	r0, [sp, #28]
 800526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526c:	9308      	str	r3, [sp, #32]
 800526e:	f004 f897 	bl	80093a0 <points_to_meter.constprop.9>
 8005272:	2100      	movs	r1, #0
 8005274:	f007 ff98 	bl	800d1a8 <__aeabi_fcmplt>
 8005278:	4f65      	ldr	r7, [pc, #404]	; (8005410 <initialize.lto_priv.302+0x590>)
 800527a:	2800      	cmp	r0, #0
 800527c:	d100      	bne.n	8005280 <initialize.lto_priv.302+0x400>
 800527e:	4f65      	ldr	r7, [pc, #404]	; (8005414 <initialize.lto_priv.302+0x594>)
 8005280:	9807      	ldr	r0, [sp, #28]
 8005282:	f004 f88d 	bl	80093a0 <points_to_meter.constprop.9>
 8005286:	1c05      	adds	r5, r0, #0
 8005288:	9807      	ldr	r0, [sp, #28]
 800528a:	f004 f889 	bl	80093a0 <points_to_meter.constprop.9>
 800528e:	2100      	movs	r1, #0
 8005290:	f007 ff8a 	bl	800d1a8 <__aeabi_fcmplt>
 8005294:	2800      	cmp	r0, #0
 8005296:	d000      	beq.n	800529a <initialize.lto_priv.302+0x41a>
 8005298:	e0aa      	b.n	80053f0 <initialize.lto_priv.302+0x570>
 800529a:	21fe      	movs	r1, #254	; 0xfe
 800529c:	0589      	lsls	r1, r1, #22
 800529e:	1c28      	adds	r0, r5, #0
 80052a0:	f007 fa8a 	bl	800c7b8 <__aeabi_fmul>
 80052a4:	495c      	ldr	r1, [pc, #368]	; (8005418 <initialize.lto_priv.302+0x598>)
 80052a6:	f006 ffdb 	bl	800c260 <__aeabi_fadd>
 80052aa:	f007 ffc5 	bl	800d238 <__aeabi_f2uiz>
 80052ae:	9009      	str	r0, [sp, #36]	; 0x24
 80052b0:	9807      	ldr	r0, [sp, #28]
 80052b2:	f004 f875 	bl	80093a0 <points_to_meter.constprop.9>
 80052b6:	1c05      	adds	r5, r0, #0
 80052b8:	9807      	ldr	r0, [sp, #28]
 80052ba:	f004 f871 	bl	80093a0 <points_to_meter.constprop.9>
 80052be:	2100      	movs	r1, #0
 80052c0:	f007 ff72 	bl	800d1a8 <__aeabi_fcmplt>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d000      	beq.n	80052ca <initialize.lto_priv.302+0x44a>
 80052c8:	e094      	b.n	80053f4 <initialize.lto_priv.302+0x574>
 80052ca:	21fe      	movs	r1, #254	; 0xfe
 80052cc:	0589      	lsls	r1, r1, #22
 80052ce:	1c28      	adds	r0, r5, #0
 80052d0:	f007 fa72 	bl	800c7b8 <__aeabi_fmul>
 80052d4:	4950      	ldr	r1, [pc, #320]	; (8005418 <initialize.lto_priv.302+0x598>)
 80052d6:	f006 ffc3 	bl	800c260 <__aeabi_fadd>
 80052da:	1c05      	adds	r5, r0, #0
 80052dc:	9807      	ldr	r0, [sp, #28]
 80052de:	f004 f85f 	bl	80093a0 <points_to_meter.constprop.9>
 80052e2:	1c06      	adds	r6, r0, #0
 80052e4:	9807      	ldr	r0, [sp, #28]
 80052e6:	f004 f85b 	bl	80093a0 <points_to_meter.constprop.9>
 80052ea:	2100      	movs	r1, #0
 80052ec:	f007 ff5c 	bl	800d1a8 <__aeabi_fcmplt>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d000      	beq.n	80052f6 <initialize.lto_priv.302+0x476>
 80052f4:	e080      	b.n	80053f8 <initialize.lto_priv.302+0x578>
 80052f6:	21fe      	movs	r1, #254	; 0xfe
 80052f8:	0589      	lsls	r1, r1, #22
 80052fa:	1c30      	adds	r0, r6, #0
 80052fc:	f007 fa5c 	bl	800c7b8 <__aeabi_fmul>
 8005300:	4945      	ldr	r1, [pc, #276]	; (8005418 <initialize.lto_priv.302+0x598>)
 8005302:	f006 ffad 	bl	800c260 <__aeabi_fadd>
 8005306:	f007 ff97 	bl	800d238 <__aeabi_f2uiz>
 800530a:	f008 f9b5 	bl	800d678 <__aeabi_ui2f>
 800530e:	1c01      	adds	r1, r0, #0
 8005310:	1c28      	adds	r0, r5, #0
 8005312:	f007 fb83 	bl	800ca1c <__aeabi_fsub>
 8005316:	4941      	ldr	r1, [pc, #260]	; (800541c <initialize.lto_priv.302+0x59c>)
 8005318:	f007 fa4e 	bl	800c7b8 <__aeabi_fmul>
 800531c:	f007 ff8c 	bl	800d238 <__aeabi_f2uiz>
 8005320:	900a      	str	r0, [sp, #40]	; 0x28
 8005322:	0020      	movs	r0, r4
 8005324:	f004 f83c 	bl	80093a0 <points_to_meter.constprop.9>
 8005328:	2100      	movs	r1, #0
 800532a:	f007 ff3d 	bl	800d1a8 <__aeabi_fcmplt>
 800532e:	4b38      	ldr	r3, [pc, #224]	; (8005410 <initialize.lto_priv.302+0x590>)
 8005330:	9307      	str	r3, [sp, #28]
 8005332:	2800      	cmp	r0, #0
 8005334:	d101      	bne.n	800533a <initialize.lto_priv.302+0x4ba>
 8005336:	4b37      	ldr	r3, [pc, #220]	; (8005414 <initialize.lto_priv.302+0x594>)
 8005338:	9307      	str	r3, [sp, #28]
 800533a:	0020      	movs	r0, r4
 800533c:	f004 f830 	bl	80093a0 <points_to_meter.constprop.9>
 8005340:	1c05      	adds	r5, r0, #0
 8005342:	0020      	movs	r0, r4
 8005344:	f004 f82c 	bl	80093a0 <points_to_meter.constprop.9>
 8005348:	2100      	movs	r1, #0
 800534a:	f007 ff2d 	bl	800d1a8 <__aeabi_fcmplt>
 800534e:	2800      	cmp	r0, #0
 8005350:	d154      	bne.n	80053fc <initialize.lto_priv.302+0x57c>
 8005352:	21fe      	movs	r1, #254	; 0xfe
 8005354:	0589      	lsls	r1, r1, #22
 8005356:	1c28      	adds	r0, r5, #0
 8005358:	f007 fa2e 	bl	800c7b8 <__aeabi_fmul>
 800535c:	492e      	ldr	r1, [pc, #184]	; (8005418 <initialize.lto_priv.302+0x598>)
 800535e:	f006 ff7f 	bl	800c260 <__aeabi_fadd>
 8005362:	f007 ff69 	bl	800d238 <__aeabi_f2uiz>
 8005366:	0005      	movs	r5, r0
 8005368:	0020      	movs	r0, r4
 800536a:	f004 f819 	bl	80093a0 <points_to_meter.constprop.9>
 800536e:	1c06      	adds	r6, r0, #0
 8005370:	0020      	movs	r0, r4
 8005372:	f004 f815 	bl	80093a0 <points_to_meter.constprop.9>
 8005376:	2100      	movs	r1, #0
 8005378:	f007 ff16 	bl	800d1a8 <__aeabi_fcmplt>
 800537c:	2800      	cmp	r0, #0
 800537e:	d13f      	bne.n	8005400 <initialize.lto_priv.302+0x580>
 8005380:	21fe      	movs	r1, #254	; 0xfe
 8005382:	0589      	lsls	r1, r1, #22
 8005384:	1c30      	adds	r0, r6, #0
 8005386:	f007 fa17 	bl	800c7b8 <__aeabi_fmul>
 800538a:	4923      	ldr	r1, [pc, #140]	; (8005418 <initialize.lto_priv.302+0x598>)
 800538c:	f006 ff68 	bl	800c260 <__aeabi_fadd>
 8005390:	1c06      	adds	r6, r0, #0
 8005392:	0020      	movs	r0, r4
 8005394:	f004 f804 	bl	80093a0 <points_to_meter.constprop.9>
 8005398:	900b      	str	r0, [sp, #44]	; 0x2c
 800539a:	0020      	movs	r0, r4
 800539c:	f004 f800 	bl	80093a0 <points_to_meter.constprop.9>
 80053a0:	2100      	movs	r1, #0
 80053a2:	f007 ff01 	bl	800d1a8 <__aeabi_fcmplt>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d12c      	bne.n	8005404 <initialize.lto_priv.302+0x584>
 80053aa:	21fe      	movs	r1, #254	; 0xfe
 80053ac:	0589      	lsls	r1, r1, #22
 80053ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80053b0:	f007 fa02 	bl	800c7b8 <__aeabi_fmul>
 80053b4:	4918      	ldr	r1, [pc, #96]	; (8005418 <initialize.lto_priv.302+0x598>)
 80053b6:	f006 ff53 	bl	800c260 <__aeabi_fadd>
 80053ba:	f007 ff3d 	bl	800d238 <__aeabi_f2uiz>
 80053be:	f008 f95b 	bl	800d678 <__aeabi_ui2f>
 80053c2:	1c01      	adds	r1, r0, #0
 80053c4:	1c30      	adds	r0, r6, #0
 80053c6:	f007 fb29 	bl	800ca1c <__aeabi_fsub>
 80053ca:	4914      	ldr	r1, [pc, #80]	; (800541c <initialize.lto_priv.302+0x59c>)
 80053cc:	f007 f9f4 	bl	800c7b8 <__aeabi_fmul>
 80053d0:	f007 ff32 	bl	800d238 <__aeabi_f2uiz>
 80053d4:	9b07      	ldr	r3, [sp, #28]
 80053d6:	9004      	str	r0, [sp, #16]
 80053d8:	9302      	str	r3, [sp, #8]
 80053da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053dc:	9503      	str	r5, [sp, #12]
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e2:	4a12      	ldr	r2, [pc, #72]	; (800542c <initialize.lto_priv.302+0x5ac>)
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	490f      	ldr	r1, [pc, #60]	; (8005424 <initialize.lto_priv.302+0x5a4>)
 80053e8:	003b      	movs	r3, r7
 80053ea:	2000      	movs	r0, #0
 80053ec:	9c08      	ldr	r4, [sp, #32]
 80053ee:	e721      	b.n	8005234 <initialize.lto_priv.302+0x3b4>
 80053f0:	490d      	ldr	r1, [pc, #52]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 80053f2:	e754      	b.n	800529e <initialize.lto_priv.302+0x41e>
 80053f4:	490c      	ldr	r1, [pc, #48]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 80053f6:	e76a      	b.n	80052ce <initialize.lto_priv.302+0x44e>
 80053f8:	490b      	ldr	r1, [pc, #44]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 80053fa:	e77e      	b.n	80052fa <initialize.lto_priv.302+0x47a>
 80053fc:	490a      	ldr	r1, [pc, #40]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 80053fe:	e7aa      	b.n	8005356 <initialize.lto_priv.302+0x4d6>
 8005400:	4909      	ldr	r1, [pc, #36]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 8005402:	e7bf      	b.n	8005384 <initialize.lto_priv.302+0x504>
 8005404:	4908      	ldr	r1, [pc, #32]	; (8005428 <initialize.lto_priv.302+0x5a8>)
 8005406:	e7d2      	b.n	80053ae <initialize.lto_priv.302+0x52e>
 8005408:	fffffa30 	.word	0xfffffa30
 800540c:	200003e8 	.word	0x200003e8
 8005410:	0801cb79 	.word	0x0801cb79
 8005414:	0801bcc3 	.word	0x0801bcc3
 8005418:	350637bd 	.word	0x350637bd
 800541c:	49742400 	.word	0x49742400
 8005420:	0801b98b 	.word	0x0801b98b
 8005424:	0801baf7 	.word	0x0801baf7
 8005428:	bf800000 	.word	0xbf800000
 800542c:	0801b9c8 	.word	0x0801b9c8
 8005430:	0038      	movs	r0, r7
 8005432:	f7fb f9eb 	bl	800080c <acc_base_configuration_downsampling_factor_get>
 8005436:	003b      	movs	r3, r7
 8005438:	900b      	str	r0, [sp, #44]	; 0x2c
 800543a:	332e      	adds	r3, #46	; 0x2e
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d045      	beq.n	80054ce <initialize.lto_priv.302+0x64e>
 8005442:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005444:	466a      	mov	r2, sp
 8005446:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8005448:	0ff4      	lsrs	r4, r6, #31
 800544a:	920c      	str	r2, [sp, #48]	; 0x30
 800544c:	9a08      	ldr	r2, [sp, #32]
 800544e:	19a0      	adds	r0, r4, r6
 8005450:	8093      	strh	r3, [r2, #4]
 8005452:	217c      	movs	r1, #124	; 0x7c
 8005454:	f007 fd6c 	bl	800cf30 <__divsi3>
 8005458:	9b08      	ldr	r3, [sp, #32]
 800545a:	1b04      	subs	r4, r0, r4
 800545c:	811c      	strh	r4, [r3, #8]
 800545e:	9b07      	ldr	r3, [sp, #28]
 8005460:	9a07      	ldr	r2, [sp, #28]
 8005462:	0fdb      	lsrs	r3, r3, #31
 8005464:	1898      	adds	r0, r3, r2
 8005466:	217c      	movs	r1, #124	; 0x7c
 8005468:	930e      	str	r3, [sp, #56]	; 0x38
 800546a:	f007 fd61 	bl	800cf30 <__divsi3>
 800546e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005472:	1ac3      	subs	r3, r0, r3
 8005474:	3301      	adds	r3, #1
 8005476:	1b1c      	subs	r4, r3, r4
 8005478:	9b08      	ldr	r3, [sp, #32]
 800547a:	b2a4      	uxth	r4, r4
 800547c:	815c      	strh	r4, [r3, #10]
 800547e:	0030      	movs	r0, r6
 8005480:	f007 fe3c 	bl	800d0fc <__aeabi_idivmod>
 8005484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005486:	18c8      	adds	r0, r1, r3
 8005488:	0019      	movs	r1, r3
 800548a:	f007 fe37 	bl	800d0fc <__aeabi_idivmod>
 800548e:	9b08      	ldr	r3, [sp, #32]
 8005490:	0020      	movs	r0, r4
 8005492:	80d9      	strh	r1, [r3, #6]
 8005494:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005496:	f007 fd47 	bl	800cf28 <__aeabi_uidivmod>
 800549a:	910f      	str	r1, [sp, #60]	; 0x3c
 800549c:	b280      	uxth	r0, r0
 800549e:	2900      	cmp	r1, #0
 80054a0:	d119      	bne.n	80054d6 <initialize.lto_priv.302+0x656>
 80054a2:	9b08      	ldr	r3, [sp, #32]
 80054a4:	8198      	strh	r0, [r3, #12]
 80054a6:	0038      	movs	r0, r7
 80054a8:	f7fb fa4f 	bl	800094a <acc_base_configuration_power_save_mode_get>
 80054ac:	0004      	movs	r4, r0
 80054ae:	0038      	movs	r0, r7
 80054b0:	f7fb fa0c 	bl	80008cc <acc_base_configuration_repetition_mode_get>
 80054b4:	2c04      	cmp	r4, #4
 80054b6:	d001      	beq.n	80054bc <initialize.lto_priv.302+0x63c>
 80054b8:	2801      	cmp	r0, #1
 80054ba:	d00e      	beq.n	80054da <initialize.lto_priv.302+0x65a>
 80054bc:	9b08      	ldr	r3, [sp, #32]
 80054be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054c0:	895b      	ldrh	r3, [r3, #10]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d209      	bcs.n	80054da <initialize.lto_priv.302+0x65a>
 80054c6:	4bc8      	ldr	r3, [pc, #800]	; (80057e8 <initialize.lto_priv.302+0x968>)
 80054c8:	4ac8      	ldr	r2, [pc, #800]	; (80057ec <initialize.lto_priv.302+0x96c>)
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	e573      	b.n	8004fb6 <initialize.lto_priv.302+0x136>
 80054ce:	003b      	movs	r3, r7
 80054d0:	3332      	adds	r3, #50	; 0x32
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	e7b6      	b.n	8005444 <initialize.lto_priv.302+0x5c4>
 80054d6:	3001      	adds	r0, #1
 80054d8:	e7e3      	b.n	80054a2 <initialize.lto_priv.302+0x622>
 80054da:	f003 ff45 	bl	8009368 <get_dt.constprop.10>
 80054de:	1c04      	adds	r4, r0, #0
 80054e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80054e2:	f008 f8c9 	bl	800d678 <__aeabi_ui2f>
 80054e6:	1c21      	adds	r1, r4, #0
 80054e8:	f007 f966 	bl	800c7b8 <__aeabi_fmul>
 80054ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ee:	60d8      	str	r0, [r3, #12]
 80054f0:	0030      	movs	r0, r6
 80054f2:	f003 ff55 	bl	80093a0 <points_to_meter.constprop.9>
 80054f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f8:	6018      	str	r0, [r3, #0]
 80054fa:	9807      	ldr	r0, [sp, #28]
 80054fc:	f003 ff50 	bl	80093a0 <points_to_meter.constprop.9>
 8005500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005502:	6819      	ldr	r1, [r3, #0]
 8005504:	6098      	str	r0, [r3, #8]
 8005506:	f007 fa89 	bl	800ca1c <__aeabi_fsub>
 800550a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800550c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800550e:	6058      	str	r0, [r3, #4]
 8005510:	9b07      	ldr	r3, [sp, #28]
 8005512:	1b98      	subs	r0, r3, r6
 8005514:	f007 fd0c 	bl	800cf30 <__divsi3>
 8005518:	3001      	adds	r0, #1
 800551a:	b283      	uxth	r3, r0
 800551c:	207c      	movs	r0, #124	; 0x7c
 800551e:	9307      	str	r3, [sp, #28]
 8005520:	9a07      	ldr	r2, [sp, #28]
 8005522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005524:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005526:	82da      	strh	r2, [r3, #22]
 8005528:	9b08      	ldr	r3, [sp, #32]
 800552a:	899b      	ldrh	r3, [r3, #12]
 800552c:	930e      	str	r3, [sp, #56]	; 0x38
 800552e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005532:	831a      	strh	r2, [r3, #24]
 8005534:	9b08      	ldr	r3, [sp, #32]
 8005536:	895c      	ldrh	r4, [r3, #10]
 8005538:	4360      	muls	r0, r4
 800553a:	f007 fc6f 	bl	800ce1c <__udivsi3>
 800553e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005540:	217c      	movs	r1, #124	; 0x7c
 8005542:	8018      	strh	r0, [r3, #0]
 8005544:	811c      	strh	r4, [r3, #8]
 8005546:	0030      	movs	r0, r6
 8005548:	f007 fdd8 	bl	800d0fc <__aeabi_idivmod>
 800554c:	317c      	adds	r1, #124	; 0x7c
 800554e:	0008      	movs	r0, r1
 8005550:	217c      	movs	r1, #124	; 0x7c
 8005552:	f007 fdd3 	bl	800d0fc <__aeabi_idivmod>
 8005556:	0008      	movs	r0, r1
 8005558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800555a:	f007 fce9 	bl	800cf30 <__divsi3>
 800555e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005560:	9a07      	ldr	r2, [sp, #28]
 8005562:	8058      	strh	r0, [r3, #2]
 8005564:	809a      	strh	r2, [r3, #4]
 8005566:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005568:	207c      	movs	r0, #124	; 0x7c
 800556a:	f007 fc57 	bl	800ce1c <__udivsi3>
 800556e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005572:	80d8      	strh	r0, [r3, #6]
 8005574:	821a      	strh	r2, [r3, #16]
 8005576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005578:	42a3      	cmp	r3, r4
 800557a:	d228      	bcs.n	80055ce <initialize.lto_priv.302+0x74e>
 800557c:	466b      	mov	r3, sp
 800557e:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8005580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005582:	8299      	strh	r1, [r3, #20]
 8005584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <initialize.lto_priv.302+0x714>
 800558a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800558c:	0020      	movs	r0, r4
 800558e:	f007 fccb 	bl	800cf28 <__aeabi_uidivmod>
 8005592:	b289      	uxth	r1, r1
 8005594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005596:	82d9      	strh	r1, [r3, #22]
 8005598:	0038      	movs	r0, r7
 800559a:	f7fb f901 	bl	80007a0 <configuration_is_valid>
 800559e:	2800      	cmp	r0, #0
 80055a0:	d019      	beq.n	80055d6 <initialize.lto_priv.302+0x756>
 80055a2:	003b      	movs	r3, r7
 80055a4:	3346      	adds	r3, #70	; 0x46
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d014      	beq.n	80055d6 <initialize.lto_priv.302+0x756>
 80055ac:	2301      	movs	r3, #1
 80055ae:	64ab      	str	r3, [r5, #72]	; 0x48
 80055b0:	2300      	movs	r3, #0
 80055b2:	2400      	movs	r4, #0
 80055b4:	64eb      	str	r3, [r5, #76]	; 0x4c
 80055b6:	652c      	str	r4, [r5, #80]	; 0x50
 80055b8:	0038      	movs	r0, r7
 80055ba:	f7fb f987 	bl	80008cc <acc_base_configuration_repetition_mode_get>
 80055be:	0023      	movs	r3, r4
 80055c0:	ac14      	add	r4, sp, #80	; 0x50
 80055c2:	2803      	cmp	r0, #3
 80055c4:	d80f      	bhi.n	80055e6 <initialize.lto_priv.302+0x766>
 80055c6:	f007 fc15 	bl	800cdf4 <__gnu_thumb1_case_uqi>
 80055ca:	1a0a      	.short	0x1a0a
 80055cc:	2d1e      	.short	0x2d1e
 80055ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d0:	829c      	strh	r4, [r3, #20]
 80055d2:	82dc      	strh	r4, [r3, #22]
 80055d4:	e7e0      	b.n	8005598 <initialize.lto_priv.302+0x718>
 80055d6:	2300      	movs	r3, #0
 80055d8:	64ab      	str	r3, [r5, #72]	; 0x48
 80055da:	3301      	adds	r3, #1
 80055dc:	e7e9      	b.n	80055b2 <initialize.lto_priv.302+0x732>
 80055de:	656b      	str	r3, [r5, #84]	; 0x54
 80055e0:	65ab      	str	r3, [r5, #88]	; 0x58
 80055e2:	65eb      	str	r3, [r5, #92]	; 0x5c
 80055e4:	662b      	str	r3, [r5, #96]	; 0x60
 80055e6:	0038      	movs	r0, r7
 80055e8:	f7fb f9af 	bl	800094a <acc_base_configuration_power_save_mode_get>
 80055ec:	2804      	cmp	r0, #4
 80055ee:	d825      	bhi.n	800563c <initialize.lto_priv.302+0x7bc>
 80055f0:	2300      	movs	r3, #0
 80055f2:	2201      	movs	r2, #1
 80055f4:	f007 fbfe 	bl	800cdf4 <__gnu_thumb1_case_uqi>
 80055f8:	f3f02020 	.word	0xf3f02020
 80055fc:	20          	.byte	0x20
 80055fd:	00          	.byte	0x00
 80055fe:	2201      	movs	r2, #1
 8005600:	656b      	str	r3, [r5, #84]	; 0x54
 8005602:	65aa      	str	r2, [r5, #88]	; 0x58
 8005604:	e7ed      	b.n	80055e2 <initialize.lto_priv.302+0x762>
 8005606:	0038      	movs	r0, r7
 8005608:	f7fb f94a 	bl	80008a0 <acc_base_configuration_update_rate_get>
 800560c:	aa13      	add	r2, sp, #76	; 0x4c
 800560e:	0021      	movs	r1, r4
 8005610:	f7fe fd7a 	bl	8004108 <acc_radar_engine_common_frequency_to_main_clk>
 8005614:	2301      	movs	r3, #1
 8005616:	656b      	str	r3, [r5, #84]	; 0x54
 8005618:	2300      	movs	r3, #0
 800561a:	65ab      	str	r3, [r5, #88]	; 0x58
 800561c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800561e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8005620:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005622:	e7df      	b.n	80055e4 <initialize.lto_priv.302+0x764>
 8005624:	0038      	movs	r0, r7
 8005626:	f7fb f93b 	bl	80008a0 <acc_base_configuration_update_rate_get>
 800562a:	aa13      	add	r2, sp, #76	; 0x4c
 800562c:	0021      	movs	r1, r4
 800562e:	f7fe fd6b 	bl	8004108 <acc_radar_engine_common_frequency_to_main_clk>
 8005632:	2301      	movs	r3, #1
 8005634:	656b      	str	r3, [r5, #84]	; 0x54
 8005636:	e7f0      	b.n	800561a <initialize.lto_priv.302+0x79a>
 8005638:	666a      	str	r2, [r5, #100]	; 0x64
 800563a:	66aa      	str	r2, [r5, #104]	; 0x68
 800563c:	0038      	movs	r0, r7
 800563e:	f7fb f8af 	bl	80007a0 <configuration_is_valid>
 8005642:	2300      	movs	r3, #0
 8005644:	0006      	movs	r6, r0
 8005646:	4298      	cmp	r0, r3
 8005648:	d00b      	beq.n	8005662 <initialize.lto_priv.302+0x7e2>
 800564a:	003b      	movs	r3, r7
 800564c:	3350      	adds	r3, #80	; 0x50
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	9311      	str	r3, [sp, #68]	; 0x44
 8005652:	003b      	movs	r3, r7
 8005654:	3352      	adds	r3, #82	; 0x52
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	9310      	str	r3, [sp, #64]	; 0x40
 800565a:	003b      	movs	r3, r7
 800565c:	334f      	adds	r3, #79	; 0x4f
 800565e:	781e      	ldrb	r6, [r3, #0]
 8005660:	0033      	movs	r3, r6
 8005662:	002a      	movs	r2, r5
 8005664:	32b4      	adds	r2, #180	; 0xb4
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	2e00      	cmp	r6, #0
 800566a:	d002      	beq.n	8005672 <initialize.lto_priv.302+0x7f2>
 800566c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800566e:	3b01      	subs	r3, #1
 8005670:	6053      	str	r3, [r2, #4]
 8005672:	0038      	movs	r0, r7
 8005674:	f7fb f960 	bl	8000938 <acc_base_configuration_tx_disable_get>
 8005678:	2301      	movs	r3, #1
 800567a:	2800      	cmp	r0, #0
 800567c:	d103      	bne.n	8005686 <initialize.lto_priv.302+0x806>
 800567e:	0003      	movs	r3, r0
 8005680:	2e00      	cmp	r6, #0
 8005682:	d000      	beq.n	8005686 <initialize.lto_priv.302+0x806>
 8005684:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005686:	2201      	movs	r2, #1
 8005688:	439a      	bics	r2, r3
 800568a:	66ea      	str	r2, [r5, #108]	; 0x6c
 800568c:	0038      	movs	r0, r7
 800568e:	f7fb f94a 	bl	8000926 <acc_base_configuration_decrease_tx_emission_get>
 8005692:	2301      	movs	r3, #1
 8005694:	4058      	eors	r0, r3
 8005696:	b2c0      	uxtb	r0, r0
 8005698:	676b      	str	r3, [r5, #116]	; 0x74
 800569a:	6728      	str	r0, [r5, #112]	; 0x70
 800569c:	0038      	movs	r0, r7
 800569e:	f7fb f937 	bl	8000910 <acc_base_configuration_hw_accelerated_average_samples_get>
 80056a2:	3801      	subs	r0, #1
 80056a4:	67a8      	str	r0, [r5, #120]	; 0x78
 80056a6:	0038      	movs	r0, r7
 80056a8:	f7fb f87a 	bl	80007a0 <configuration_is_valid>
 80056ac:	2300      	movs	r3, #0
 80056ae:	4298      	cmp	r0, r3
 80056b0:	d000      	beq.n	80056b4 <initialize.lto_priv.302+0x834>
 80056b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80056b4:	67eb      	str	r3, [r5, #124]	; 0x7c
 80056b6:	0038      	movs	r0, r7
 80056b8:	f7fb f8e7 	bl	800088a <acc_base_configuration_integrator_get>
 80056bc:	1d2b      	adds	r3, r5, #4
 80056be:	67d8      	str	r0, [r3, #124]	; 0x7c
 80056c0:	0038      	movs	r0, r7
 80056c2:	f7fb f86d 	bl	80007a0 <configuration_is_valid>
 80056c6:	2300      	movs	r3, #0
 80056c8:	4298      	cmp	r0, r3
 80056ca:	d001      	beq.n	80056d0 <initialize.lto_priv.302+0x850>
 80056cc:	1dbb      	adds	r3, r7, #6
 80056ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d0:	002a      	movs	r2, r5
 80056d2:	3b01      	subs	r3, #1
 80056d4:	3208      	adds	r2, #8
 80056d6:	67d3      	str	r3, [r2, #124]	; 0x7c
 80056d8:	0038      	movs	r0, r7
 80056da:	f7fb f8c1 	bl	8000860 <acc_base_configuration_wg_duration_get>
 80056de:	002b      	movs	r3, r5
 80056e0:	3388      	adds	r3, #136	; 0x88
 80056e2:	6018      	str	r0, [r3, #0]
 80056e4:	0038      	movs	r0, r7
 80056e6:	f7fb f85b 	bl	80007a0 <configuration_is_valid>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d002      	beq.n	80056f4 <initialize.lto_priv.302+0x874>
 80056ee:	003b      	movs	r3, r7
 80056f0:	336d      	adds	r3, #109	; 0x6d
 80056f2:	7818      	ldrb	r0, [r3, #0]
 80056f4:	002b      	movs	r3, r5
 80056f6:	338d      	adds	r3, #141	; 0x8d
 80056f8:	7018      	strb	r0, [r3, #0]
 80056fa:	0038      	movs	r0, r7
 80056fc:	f7fb f886 	bl	800080c <acc_base_configuration_downsampling_factor_get>
 8005700:	002b      	movs	r3, r5
 8005702:	33a4      	adds	r3, #164	; 0xa4
 8005704:	6018      	str	r0, [r3, #0]
 8005706:	0038      	movs	r0, r7
 8005708:	f7fb f84a 	bl	80007a0 <configuration_is_valid>
 800570c:	2300      	movs	r3, #0
 800570e:	4298      	cmp	r0, r3
 8005710:	d002      	beq.n	8005718 <initialize.lto_priv.302+0x898>
 8005712:	003b      	movs	r3, r7
 8005714:	336b      	adds	r3, #107	; 0x6b
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	002a      	movs	r2, r5
 800571a:	329c      	adds	r2, #156	; 0x9c
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	0038      	movs	r0, r7
 8005720:	f7fb f83e 	bl	80007a0 <configuration_is_valid>
 8005724:	2300      	movs	r3, #0
 8005726:	4298      	cmp	r0, r3
 8005728:	d002      	beq.n	8005730 <initialize.lto_priv.302+0x8b0>
 800572a:	003b      	movs	r3, r7
 800572c:	336c      	adds	r3, #108	; 0x6c
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	002a      	movs	r2, r5
 8005732:	32a0      	adds	r2, #160	; 0xa0
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	0038      	movs	r0, r7
 8005738:	f7fb f84c 	bl	80007d4 <acc_base_configuration_asynchronous_measurement_get>
 800573c:	002a      	movs	r2, r5
 800573e:	2301      	movs	r3, #1
 8005740:	32ac      	adds	r2, #172	; 0xac
 8005742:	7053      	strb	r3, [r2, #1]
 8005744:	4058      	eors	r0, r3
 8005746:	002b      	movs	r3, r5
 8005748:	7010      	strb	r0, [r2, #0]
 800574a:	9a08      	ldr	r2, [sp, #32]
 800574c:	3390      	adds	r3, #144	; 0x90
 800574e:	8892      	ldrh	r2, [r2, #4]
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	9b08      	ldr	r3, [sp, #32]
 8005754:	899b      	ldrh	r3, [r3, #12]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d943      	bls.n	80057e2 <initialize.lto_priv.302+0x962>
 800575a:	9b08      	ldr	r3, [sp, #32]
 800575c:	6958      	ldr	r0, [r3, #20]
 800575e:	f7fd f987 	bl	8002a70 <get_package_range_coarse_max>
 8005762:	002b      	movs	r3, r5
 8005764:	3801      	subs	r0, #1
 8005766:	3394      	adds	r3, #148	; 0x94
 8005768:	9a08      	ldr	r2, [sp, #32]
 800576a:	6018      	str	r0, [r3, #0]
 800576c:	2108      	movs	r1, #8
 800576e:	5e52      	ldrsh	r2, [r2, r1]
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	9a08      	ldr	r2, [sp, #32]
 8005774:	88d2      	ldrh	r2, [r2, #6]
 8005776:	615a      	str	r2, [r3, #20]
 8005778:	f7fe fcbe 	bl	80040f8 <acc_rss_integration_get_sensor_reference_frequency>
 800577c:	002b      	movs	r3, r5
 800577e:	33b0      	adds	r3, #176	; 0xb0
 8005780:	6018      	str	r0, [r3, #0]
 8005782:	23e1      	movs	r3, #225	; 0xe1
 8005784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	8293      	strh	r3, [r2, #20]
 800578a:	002b      	movs	r3, r5
 800578c:	33cc      	adds	r3, #204	; 0xcc
 800578e:	8819      	ldrh	r1, [r3, #0]
 8005790:	207c      	movs	r0, #124	; 0x7c
 8005792:	f007 fb43 	bl	800ce1c <__udivsi3>
 8005796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800579a:	891b      	ldrh	r3, [r3, #8]
 800579c:	0021      	movs	r1, r4
 800579e:	4358      	muls	r0, r3
 80057a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a2:	8158      	strh	r0, [r3, #10]
 80057a4:	2300      	movs	r3, #0
 80057a6:	0028      	movs	r0, r5
 80057a8:	8313      	strh	r3, [r2, #24]
 80057aa:	f005 fe33 	bl	800b414 <acc_cpd_linear_sweep_get_info>
 80057ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057b0:	9908      	ldr	r1, [sp, #32]
 80057b2:	8023      	strh	r3, [r4, #0]
 80057b4:	0022      	movs	r2, r4
 80057b6:	2301      	movs	r3, #1
 80057b8:	2013      	movs	r0, #19
 80057ba:	6809      	ldr	r1, [r1, #0]
 80057bc:	f006 faf0 	bl	800bda0 <acc_probes_execute_uint16>
 80057c0:	35ce      	adds	r5, #206	; 0xce
 80057c2:	8823      	ldrh	r3, [r4, #0]
 80057c4:	882a      	ldrh	r2, [r5, #0]
 80057c6:	3303      	adds	r3, #3
 80057c8:	189b      	adds	r3, r3, r2
 80057ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057cc:	2001      	movs	r0, #1
 80057ce:	81d3      	strh	r3, [r2, #14]
 80057d0:	2396      	movs	r3, #150	; 0x96
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	8193      	strh	r3, [r2, #12]
 80057d6:	e52f      	b.n	8005238 <initialize.lto_priv.302+0x3b8>
 80057d8:	666a      	str	r2, [r5, #100]	; 0x64
 80057da:	66ab      	str	r3, [r5, #104]	; 0x68
 80057dc:	e72e      	b.n	800563c <initialize.lto_priv.302+0x7bc>
 80057de:	666b      	str	r3, [r5, #100]	; 0x64
 80057e0:	e7fb      	b.n	80057da <initialize.lto_priv.302+0x95a>
 80057e2:	9b08      	ldr	r3, [sp, #32]
 80057e4:	8958      	ldrh	r0, [r3, #10]
 80057e6:	e7bc      	b.n	8005762 <initialize.lto_priv.302+0x8e2>
 80057e8:	200003e8 	.word	0x200003e8
 80057ec:	0801bb17 	.word	0x0801bb17

080057f0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80057f0:	b570      	push	{r4, r5, r6, lr}
	if (uart_state == 0){
 80057f2:	4c17      	ldr	r4, [pc, #92]	; (8005850 <HAL_UART_RxCpltCallback+0x60>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80057f4:	0005      	movs	r5, r0
	if (uart_state == 0){
 80057f6:	0023      	movs	r3, r4
 80057f8:	334c      	adds	r3, #76	; 0x4c
 80057fa:	7819      	ldrb	r1, [r3, #0]
 80057fc:	2900      	cmp	r1, #0
 80057fe:	d10e      	bne.n	800581e <HAL_UART_RxCpltCallback+0x2e>
		if (uart_rx_buff[0] == 0xCC){
 8005800:	4a14      	ldr	r2, [pc, #80]	; (8005854 <HAL_UART_RxCpltCallback+0x64>)
 8005802:	7812      	ldrb	r2, [r2, #0]
 8005804:	2acc      	cmp	r2, #204	; 0xcc
 8005806:	d105      	bne.n	8005814 <HAL_UART_RxCpltCallback+0x24>
			uart_state = 1;
 8005808:	3acb      	subs	r2, #203	; 0xcb
			cmd_length = 0;
 800580a:	344d      	adds	r4, #77	; 0x4d
			uart_state = 1;
 800580c:	701a      	strb	r2, [r3, #0]
			cmd_length = 0;
 800580e:	7021      	strb	r1, [r4, #0]
		HAL_UART_Receive_IT(huart, uart_rx_buff, 2 + cmd_length);
 8005810:	3102      	adds	r1, #2
 8005812:	e000      	b.n	8005816 <HAL_UART_RxCpltCallback+0x26>
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 8005814:	2101      	movs	r1, #1
 8005816:	0028      	movs	r0, r5
 8005818:	f003 fc14 	bl	8009044 <HAL_UART_Receive_IT.constprop.83>
}
 800581c:	bd70      	pop	{r4, r5, r6, pc}
	}else if (uart_state == 1){
 800581e:	2901      	cmp	r1, #1
 8005820:	d111      	bne.n	8005846 <HAL_UART_RxCpltCallback+0x56>
		cmd_length = (uart_rx_buff[0]) | (uart_rx_buff[1] << 8);
 8005822:	0020      	movs	r0, r4
 8005824:	4a0b      	ldr	r2, [pc, #44]	; (8005854 <HAL_UART_RxCpltCallback+0x64>)
 8005826:	304d      	adds	r0, #77	; 0x4d
 8005828:	7812      	ldrb	r2, [r2, #0]
 800582a:	7002      	strb	r2, [r0, #0]
		if (cmd_length +2 > UART_BUFF){
 800582c:	2a3e      	cmp	r2, #62	; 0x3e
 800582e:	d804      	bhi.n	800583a <HAL_UART_RxCpltCallback+0x4a>
		uart_state = 3;
 8005830:	2203      	movs	r2, #3
 8005832:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, uart_rx_buff, 2 + cmd_length);
 8005834:	344d      	adds	r4, #77	; 0x4d
 8005836:	7821      	ldrb	r1, [r4, #0]
 8005838:	e7ea      	b.n	8005810 <HAL_UART_RxCpltCallback+0x20>
			uart_state = 0;
 800583a:	2200      	movs	r2, #0
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 800583c:	0028      	movs	r0, r5
			uart_state = 0;
 800583e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 8005840:	f003 fc00 	bl	8009044 <HAL_UART_Receive_IT.constprop.83>
 8005844:	e7f6      	b.n	8005834 <HAL_UART_RxCpltCallback+0x44>
	}else if (uart_state == 3){
 8005846:	2903      	cmp	r1, #3
 8005848:	d1e8      	bne.n	800581c <HAL_UART_RxCpltCallback+0x2c>
		uart_state = 4;
 800584a:	2204      	movs	r2, #4
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	e7e5      	b.n	800581c <HAL_UART_RxCpltCallback+0x2c>
 8005850:	2000018c 	.word	0x2000018c
 8005854:	200004a0 	.word	0x200004a0

08005858 <RegInt_getreg>:
uint32_t RegInt_getreg(uint8_t reg){
 8005858:	b510      	push	{r4, lr}
	uint32_t* regptr = RegInt_regmap(reg);
 800585a:	f7fb fb07 	bl	8000e6c <RegInt_regmap>
	return *regptr;
 800585e:	6800      	ldr	r0, [r0, #0]
}
 8005860:	bd10      	pop	{r4, pc}

08005862 <activateService>:
int8_t activateService(void){
 8005862:	b510      	push	{r4, lr}
    DBG_PRINTLN("activating service");
 8005864:	4814      	ldr	r0, [pc, #80]	; (80058b8 <activateService+0x56>)
 8005866:	f00e fd53 	bl	8014310 <__wrap_printf>
 800586a:	4814      	ldr	r0, [pc, #80]	; (80058bc <activateService+0x5a>)
 800586c:	f00e fd50 	bl	8014310 <__wrap_printf>
 8005870:	229b      	movs	r2, #155	; 0x9b
 8005872:	4913      	ldr	r1, [pc, #76]	; (80058c0 <activateService+0x5e>)
 8005874:	0092      	lsls	r2, r2, #2
 8005876:	4813      	ldr	r0, [pc, #76]	; (80058c4 <activateService+0x62>)
 8005878:	f00e fd4a 	bl	8014310 <__wrap_printf>
    uint32_t service_type = RegInt_getreg(0x02);
 800587c:	2002      	movs	r0, #2
 800587e:	f7ff ffeb 	bl	8005858 <RegInt_getreg>
    if(service_type == 0x02){success = activateService_handle(envelope_handle);}
 8005882:	2802      	cmp	r0, #2
 8005884:	d10c      	bne.n	80058a0 <activateService+0x3e>
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <activateService+0x66>)
 8005888:	6d18      	ldr	r0, [r3, #80]	; 0x50
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 800588a:	f7fe fbf1 	bl	8004070 <activateService_handle>
 800588e:	0004      	movs	r4, r0
        Reg_regor(0x06, 0x00000002);
 8005890:	2002      	movs	r0, #2
    if(success){
 8005892:	2c00      	cmp	r4, #0
 8005894:	d101      	bne.n	800589a <activateService+0x38>
        Reg_regor(0x06, 0x00100000);
 8005896:	2080      	movs	r0, #128	; 0x80
 8005898:	0340      	lsls	r0, r0, #13
 800589a:	f003 fc61 	bl	8009160 <Reg_regor.constprop.76>
 800589e:	e009      	b.n	80058b4 <activateService+0x52>
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 80058a0:	2804      	cmp	r0, #4
 80058a2:	d102      	bne.n	80058aa <activateService+0x48>
 80058a4:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <activateService+0x66>)
 80058a6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80058a8:	e7ef      	b.n	800588a <activateService+0x28>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 80058aa:	2080      	movs	r0, #128	; 0x80
 80058ac:	02c0      	lsls	r0, r0, #11
 80058ae:	f003 fc57 	bl	8009160 <Reg_regor.constprop.76>
 80058b2:	2400      	movs	r4, #0
}
 80058b4:	0020      	movs	r0, r4
 80058b6:	bd10      	pop	{r4, pc}
 80058b8:	0801b1ea 	.word	0x0801b1ea
 80058bc:	0801bb42 	.word	0x0801bb42
 80058c0:	0801b202 	.word	0x0801b202
 80058c4:	0801bcb9 	.word	0x0801bcb9
 80058c8:	2000018c 	.word	0x2000018c

080058cc <updateSparseConfig>:
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 80058cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058ce:	0004      	movs	r4, r0
	DBG_PRINTLN("updating config");
 80058d0:	487e      	ldr	r0, [pc, #504]	; (8005acc <updateSparseConfig+0x200>)
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 80058d2:	000e      	movs	r6, r1
 80058d4:	9201      	str	r2, [sp, #4]
	DBG_PRINTLN("updating config");
 80058d6:	f00e fd1b 	bl	8014310 <__wrap_printf>
 80058da:	487d      	ldr	r0, [pc, #500]	; (8005ad0 <updateSparseConfig+0x204>)
 80058dc:	f00e fd18 	bl	8014310 <__wrap_printf>
 80058e0:	22e0      	movs	r2, #224	; 0xe0
 80058e2:	497c      	ldr	r1, [pc, #496]	; (8005ad4 <updateSparseConfig+0x208>)
 80058e4:	0052      	lsls	r2, r2, #1
 80058e6:	487c      	ldr	r0, [pc, #496]	; (8005ad8 <updateSparseConfig+0x20c>)
 80058e8:	f00e fd12 	bl	8014310 <__wrap_printf>
	acc_service_profile_set(config, RegInt_getreg(0x28));
 80058ec:	2028      	movs	r0, #40	; 0x28
 80058ee:	f7ff ffb3 	bl	8005858 <RegInt_getreg>
 80058f2:	b2c1      	uxtb	r1, r0
 80058f4:	0020      	movs	r0, r4
 80058f6:	f7fb f965 	bl	8000bc4 <acc_service_profile_set>
	uint32_t rep_mode = RegInt_getreg(0x22); 
 80058fa:	2022      	movs	r0, #34	; 0x22
 80058fc:	f7ff ffac 	bl	8005858 <RegInt_getreg>
	if(rep_mode == 0x01){
 8005900:	2801      	cmp	r0, #1
 8005902:	d000      	beq.n	8005906 <updateSparseConfig+0x3a>
 8005904:	e0c2      	b.n	8005a8c <updateSparseConfig+0x1c0>
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 8005906:	3022      	adds	r0, #34	; 0x22
 8005908:	f7ff ffa6 	bl	8005858 <RegInt_getreg>
 800590c:	0007      	movs	r7, r0
 800590e:	0020      	movs	r0, r4
 8005910:	f7fb f90e 	bl	8000b30 <acc_service_get_base_configuration>
 8005914:	0005      	movs	r5, r0
 8005916:	f7fa ff43 	bl	80007a0 <configuration_is_valid>
 800591a:	2800      	cmp	r0, #0
 800591c:	d008      	beq.n	8005930 <updateSparseConfig+0x64>
 800591e:	2303      	movs	r3, #3
 8005920:	0038      	movs	r0, r7
 8005922:	712b      	strb	r3, [r5, #4]
 8005924:	f007 fea8 	bl	800d678 <__aeabi_ui2f>
 8005928:	496c      	ldr	r1, [pc, #432]	; (8005adc <updateSparseConfig+0x210>)
 800592a:	f006 fe33 	bl	800c594 <__aeabi_fdiv>
 800592e:	60a8      	str	r0, [r5, #8]
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 8005930:	2026      	movs	r0, #38	; 0x26
 8005932:	f7ff ff91 	bl	8005858 <RegInt_getreg>
 8005936:	0007      	movs	r7, r0
 8005938:	0020      	movs	r0, r4
 800593a:	f7fb f8f9 	bl	8000b30 <acc_service_get_base_configuration>
 800593e:	0005      	movs	r5, r0
 8005940:	f7fa ff2e 	bl	80007a0 <configuration_is_valid>
 8005944:	2800      	cmp	r0, #0
 8005946:	d003      	beq.n	8005950 <updateSparseConfig+0x84>
 8005948:	1e7b      	subs	r3, r7, #1
 800594a:	419f      	sbcs	r7, r3
 800594c:	3547      	adds	r5, #71	; 0x47
 800594e:	702f      	strb	r7, [r5, #0]
	acc_service_power_save_mode_set(config, RegInt_getreg(0x25));
 8005950:	2025      	movs	r0, #37	; 0x25
 8005952:	f7ff ff81 	bl	8005858 <RegInt_getreg>
 8005956:	0007      	movs	r7, r0
 8005958:	0020      	movs	r0, r4
 800595a:	f7fb f8e9 	bl	8000b30 <acc_service_get_base_configuration>
 800595e:	0005      	movs	r5, r0
 8005960:	f7fa ff1e 	bl	80007a0 <configuration_is_valid>
 8005964:	2800      	cmp	r0, #0
 8005966:	d000      	beq.n	800596a <updateSparseConfig+0x9e>
 8005968:	63af      	str	r7, [r5, #56]	; 0x38
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 800596a:	2033      	movs	r0, #51	; 0x33
 800596c:	f7ff ff74 	bl	8005858 <RegInt_getreg>
 8005970:	0007      	movs	r7, r0
 8005972:	0020      	movs	r0, r4
 8005974:	f7fb f8dc 	bl	8000b30 <acc_service_get_base_configuration>
 8005978:	0005      	movs	r5, r0
 800597a:	f7fa ff11 	bl	80007a0 <configuration_is_valid>
 800597e:	2800      	cmp	r0, #0
 8005980:	d003      	beq.n	800598a <updateSparseConfig+0xbe>
 8005982:	1e7b      	subs	r3, r7, #1
 8005984:	419f      	sbcs	r7, r3
 8005986:	354e      	adds	r5, #78	; 0x4e
 8005988:	702f      	strb	r7, [r5, #0]
 800598a:	0020      	movs	r0, r4
 800598c:	f7fb f8d0 	bl	8000b30 <acc_service_get_base_configuration>
 8005990:	0005      	movs	r5, r0
 8005992:	f7fa ff05 	bl	80007a0 <configuration_is_valid>
 8005996:	2800      	cmp	r0, #0
 8005998:	d006      	beq.n	80059a8 <updateSparseConfig+0xdc>
	acc_service_requested_start_set (config, (float)sweep_start/1000.0f);
 800599a:	0030      	movs	r0, r6
 800599c:	f007 fe6c 	bl	800d678 <__aeabi_ui2f>
 80059a0:	494e      	ldr	r1, [pc, #312]	; (8005adc <updateSparseConfig+0x210>)
 80059a2:	f006 fdf7 	bl	800c594 <__aeabi_fdiv>
 80059a6:	6268      	str	r0, [r5, #36]	; 0x24
 80059a8:	0020      	movs	r0, r4
 80059aa:	f7fb f8c1 	bl	8000b30 <acc_service_get_base_configuration>
 80059ae:	0005      	movs	r5, r0
 80059b0:	f7fa fef6 	bl	80007a0 <configuration_is_valid>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d006      	beq.n	80059c6 <updateSparseConfig+0xfa>
	acc_service_requested_length_set (config, (float)sweep_length/1000.0f);
 80059b8:	9801      	ldr	r0, [sp, #4]
 80059ba:	f007 fe5d 	bl	800d678 <__aeabi_ui2f>
 80059be:	4947      	ldr	r1, [pc, #284]	; (8005adc <updateSparseConfig+0x210>)
 80059c0:	f006 fde8 	bl	800c594 <__aeabi_fdiv>
 80059c4:	62a8      	str	r0, [r5, #40]	; 0x28
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 80059c6:	2024      	movs	r0, #36	; 0x24
 80059c8:	f7ff ff46 	bl	8005858 <RegInt_getreg>
 80059cc:	f007 fe54 	bl	800d678 <__aeabi_ui2f>
 80059d0:	4942      	ldr	r1, [pc, #264]	; (8005adc <updateSparseConfig+0x210>)
 80059d2:	f006 fddf 	bl	800c594 <__aeabi_fdiv>
 80059d6:	1c01      	adds	r1, r0, #0
 80059d8:	0020      	movs	r0, r4
 80059da:	f7fb f90d 	bl	8000bf8 <acc_service_receiver_gain_set>
	acc_service_hw_accelerated_average_samples_set (config, RegInt_getreg(0x30));
 80059de:	2030      	movs	r0, #48	; 0x30
 80059e0:	f7ff ff3a 	bl	8005858 <RegInt_getreg>
 80059e4:	0005      	movs	r5, r0
 80059e6:	0020      	movs	r0, r4
 80059e8:	f7fb f8a2 	bl	8000b30 <acc_service_get_base_configuration>
 80059ec:	0006      	movs	r6, r0
 80059ee:	f7fa fed7 	bl	80007a0 <configuration_is_valid>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d001      	beq.n	80059fa <updateSparseConfig+0x12e>
 80059f6:	b2ed      	uxtb	r5, r5
 80059f8:	87b5      	strh	r5, [r6, #60]	; 0x3c
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 80059fa:	2032      	movs	r0, #50	; 0x32
 80059fc:	f7ff ff2c 	bl	8005858 <RegInt_getreg>
 8005a00:	1e41      	subs	r1, r0, #1
 8005a02:	4188      	sbcs	r0, r1
 8005a04:	b2c1      	uxtb	r1, r0
 8005a06:	0020      	movs	r0, r4
 8005a08:	f7fb f8ca 	bl	8000ba0 <acc_service_maximize_signal_attenuation_set>
	acc_service_sparse_configuration_sweeps_per_frame_set (config, RegInt_getreg(0x40));
 8005a0c:	2040      	movs	r0, #64	; 0x40
 8005a0e:	f7ff ff23 	bl	8005858 <RegInt_getreg>
 8005a12:	0006      	movs	r6, r0
 8005a14:	0020      	movs	r0, r4
 8005a16:	f7fb f833 	bl	8000a80 <acc_service_configuration_valid>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d007      	beq.n	8005a2e <updateSparseConfig+0x162>
 8005a1e:	6925      	ldr	r5, [r4, #16]
 8005a20:	0028      	movs	r0, r5
 8005a22:	f7fa febd 	bl	80007a0 <configuration_is_valid>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d001      	beq.n	8005a2e <updateSparseConfig+0x162>
 8005a2a:	3560      	adds	r5, #96	; 0x60
 8005a2c:	802e      	strh	r6, [r5, #0]
	acc_service_sparse_configuration_sweep_rate_set (config, (float)RegInt_getreg(0x41)/1000.0f);
 8005a2e:	2041      	movs	r0, #65	; 0x41
 8005a30:	f7ff ff12 	bl	8005858 <RegInt_getreg>
 8005a34:	0006      	movs	r6, r0
 8005a36:	0020      	movs	r0, r4
 8005a38:	f7fb f822 	bl	8000a80 <acc_service_configuration_valid>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d00c      	beq.n	8005a5a <updateSparseConfig+0x18e>
 8005a40:	6925      	ldr	r5, [r4, #16]
 8005a42:	0028      	movs	r0, r5
 8005a44:	f7fa feac 	bl	80007a0 <configuration_is_valid>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d006      	beq.n	8005a5a <updateSparseConfig+0x18e>
 8005a4c:	0030      	movs	r0, r6
 8005a4e:	f007 fe13 	bl	800d678 <__aeabi_ui2f>
 8005a52:	4922      	ldr	r1, [pc, #136]	; (8005adc <updateSparseConfig+0x210>)
 8005a54:	f006 fd9e 	bl	800c594 <__aeabi_fdiv>
 8005a58:	6668      	str	r0, [r5, #100]	; 0x64
	acc_service_sparse_sampling_mode_set (config, RegInt_getreg(0x42));
 8005a5a:	2042      	movs	r0, #66	; 0x42
 8005a5c:	f7ff fefc 	bl	8005858 <RegInt_getreg>
 8005a60:	0006      	movs	r6, r0
 8005a62:	0020      	movs	r0, r4
 8005a64:	f7fb f8e4 	bl	8000c30 <get_sparse_configuration>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d020      	beq.n	8005aae <updateSparseConfig+0x1e2>
 8005a6c:	2e00      	cmp	r6, #0
 8005a6e:	d016      	beq.n	8005a9e <updateSparseConfig+0x1d2>
 8005a70:	2e01      	cmp	r6, #1
 8005a72:	d014      	beq.n	8005a9e <updateSparseConfig+0x1d2>
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <updateSparseConfig+0x214>)
 8005a76:	001a      	movs	r2, r3
 8005a78:	3230      	adds	r2, #48	; 0x30
 8005a7a:	7812      	ldrb	r2, [r2, #0]
 8005a7c:	2a00      	cmp	r2, #0
 8005a7e:	d016      	beq.n	8005aae <updateSparseConfig+0x1e2>
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <updateSparseConfig+0x218>)
 8005a84:	4918      	ldr	r1, [pc, #96]	; (8005ae8 <updateSparseConfig+0x21c>)
 8005a86:	2001      	movs	r0, #1
 8005a88:	4798      	blx	r3
 8005a8a:	e010      	b.n	8005aae <updateSparseConfig+0x1e2>
	}else if (rep_mode == 0x02){
 8005a8c:	2802      	cmp	r0, #2
 8005a8e:	d000      	beq.n	8005a92 <updateSparseConfig+0x1c6>
 8005a90:	e74e      	b.n	8005930 <updateSparseConfig+0x64>
 8005a92:	0020      	movs	r0, r4
 8005a94:	f7fb f84c 	bl	8000b30 <acc_service_get_base_configuration>
 8005a98:	f7fa ff61 	bl	800095e <acc_base_configuration_repetition_mode_on_demand_set>
 8005a9c:	e748      	b.n	8005930 <updateSparseConfig+0x64>
 8005a9e:	6925      	ldr	r5, [r4, #16]
 8005aa0:	0028      	movs	r0, r5
 8005aa2:	f7fa fe7d 	bl	80007a0 <configuration_is_valid>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d001      	beq.n	8005aae <updateSparseConfig+0x1e2>
 8005aaa:	356a      	adds	r5, #106	; 0x6a
 8005aac:	702e      	strb	r6, [r5, #0]
	acc_service_sparse_downsampling_factor_set (config, RegInt_getreg(0x29));
 8005aae:	2029      	movs	r0, #41	; 0x29
 8005ab0:	f7ff fed2 	bl	8005858 <RegInt_getreg>
 8005ab4:	0005      	movs	r5, r0
 8005ab6:	0020      	movs	r0, r4
 8005ab8:	f7fa ffe2 	bl	8000a80 <acc_service_configuration_valid>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d003      	beq.n	8005ac8 <updateSparseConfig+0x1fc>
 8005ac0:	b2a9      	uxth	r1, r5
 8005ac2:	6920      	ldr	r0, [r4, #16]
 8005ac4:	f7fa fe98 	bl	80007f8 <acc_base_configuration_downsampling_factor_set>
}
 8005ac8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	0801b1ea 	.word	0x0801b1ea
 8005ad0:	0801bb55 	.word	0x0801bb55
 8005ad4:	0801b202 	.word	0x0801b202
 8005ad8:	0801bcb9 	.word	0x0801bcb9
 8005adc:	447a0000 	.word	0x447a0000
 8005ae0:	200003e8 	.word	0x200003e8
 8005ae4:	0801bb65 	.word	0x0801bb65
 8005ae8:	0801aeae 	.word	0x0801aeae

08005aec <RegInt_setregf>:
int8_t RegInt_setregf(uint8_t reg, uint32_t val, uint8_t force){
 8005aec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005aee:	0004      	movs	r4, r0
 8005af0:	000d      	movs	r5, r1
	if(!force){
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	d115      	bne.n	8005b22 <RegInt_setregf+0x36>
    if(reg == 0x02){
 8005af6:	2802      	cmp	r0, #2
 8005af8:	d104      	bne.n	8005b04 <RegInt_setregf+0x18>
        if(RegInt_getreg(0x06) && 0x00000001){
 8005afa:	2006      	movs	r0, #6
 8005afc:	f7ff feac 	bl	8005858 <RegInt_getreg>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d10e      	bne.n	8005b22 <RegInt_setregf+0x36>
    uint8_t read_only_addr[10] = {0x06, 0x10, 0x11, 0x12, 0x81, 0x82,0x83,0x84,0x85, 0xE9}; //please have this list be ordered.
 8005b04:	4913      	ldr	r1, [pc, #76]	; (8005b54 <RegInt_setregf+0x68>)
 8005b06:	ae01      	add	r6, sp, #4
 8005b08:	220a      	movs	r2, #10
 8005b0a:	3120      	adds	r1, #32
 8005b0c:	0030      	movs	r0, r6
 8005b0e:	f00e ffcf 	bl	8014ab0 <memcpy>
 8005b12:	2300      	movs	r3, #0
		if (reg == read_only_addr[i]){return 0;}
 8005b14:	5cf2      	ldrb	r2, [r6, r3]
 8005b16:	4294      	cmp	r4, r2
 8005b18:	d00e      	beq.n	8005b38 <RegInt_setregf+0x4c>
		if (reg < read_only_addr[i]){break;}
 8005b1a:	d302      	bcc.n	8005b22 <RegInt_setregf+0x36>
 8005b1c:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < 10; i++){
 8005b1e:	2b0a      	cmp	r3, #10
 8005b20:	d1f8      	bne.n	8005b14 <RegInt_setregf+0x28>
	uint32_t* regptr = RegInt_regmap(reg);
 8005b22:	0020      	movs	r0, r4
 8005b24:	f7fb f9a2 	bl	8000e6c <RegInt_regmap>
	if (!(*regptr == (uint32_t)-1)){
 8005b28:	6802      	ldr	r2, [r0, #0]
	return 1;
 8005b2a:	2301      	movs	r3, #1
	if (!(*regptr == (uint32_t)-1)){
 8005b2c:	3201      	adds	r2, #1
 8005b2e:	d000      	beq.n	8005b32 <RegInt_setregf+0x46>
		*regptr = val;
 8005b30:	6005      	str	r5, [r0, #0]
}
 8005b32:	0018      	movs	r0, r3
 8005b34:	b004      	add	sp, #16
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
        if (!RegInt_writeable(reg)){DBG_PRINTLN("not writable");return 0;}
 8005b38:	4807      	ldr	r0, [pc, #28]	; (8005b58 <RegInt_setregf+0x6c>)
 8005b3a:	f00e fbe9 	bl	8014310 <__wrap_printf>
 8005b3e:	4807      	ldr	r0, [pc, #28]	; (8005b5c <RegInt_setregf+0x70>)
 8005b40:	f00e fbe6 	bl	8014310 <__wrap_printf>
 8005b44:	2244      	movs	r2, #68	; 0x44
 8005b46:	4906      	ldr	r1, [pc, #24]	; (8005b60 <RegInt_setregf+0x74>)
 8005b48:	4806      	ldr	r0, [pc, #24]	; (8005b64 <RegInt_setregf+0x78>)
 8005b4a:	f00e fbe1 	bl	8014310 <__wrap_printf>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e7ef      	b.n	8005b32 <RegInt_setregf+0x46>
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	08014c00 	.word	0x08014c00
 8005b58:	0801b1ea 	.word	0x0801b1ea
 8005b5c:	0801bb8a 	.word	0x0801bb8a
 8005b60:	0801b202 	.word	0x0801b202
 8005b64:	0801bcb9 	.word	0x0801bcb9

08005b68 <stopService>:
void stopService(void){
 8005b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    DBG_PRINTLN("stopping service");
 8005b6a:	4f36      	ldr	r7, [pc, #216]	; (8005c44 <stopService+0xdc>)
void stopService(void){
 8005b6c:	b085      	sub	sp, #20
    DBG_PRINTLN("stopping service");
 8005b6e:	0038      	movs	r0, r7
 8005b70:	f00e fbce 	bl	8014310 <__wrap_printf>
 8005b74:	4834      	ldr	r0, [pc, #208]	; (8005c48 <stopService+0xe0>)
 8005b76:	f00e fbcb 	bl	8014310 <__wrap_printf>
 8005b7a:	22a4      	movs	r2, #164	; 0xa4
 8005b7c:	4d33      	ldr	r5, [pc, #204]	; (8005c4c <stopService+0xe4>)
 8005b7e:	4c34      	ldr	r4, [pc, #208]	; (8005c50 <stopService+0xe8>)
 8005b80:	0092      	lsls	r2, r2, #2
 8005b82:	0029      	movs	r1, r5
 8005b84:	0020      	movs	r0, r4
 8005b86:	f00e fbc3 	bl	8014310 <__wrap_printf>
    uint32_t service_type = RegInt_getreg(0x02);
 8005b8a:	2002      	movs	r0, #2
 8005b8c:	f7ff fe64 	bl	8005858 <RegInt_getreg>
    if(service_type == 0x02){handle = envelope_handle;}
 8005b90:	2802      	cmp	r0, #2
 8005b92:	d142      	bne.n	8005c1a <stopService+0xb2>
 8005b94:	4b2f      	ldr	r3, [pc, #188]	; (8005c54 <stopService+0xec>)
 8005b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    else if(service_type == 0x04){handle = sparse_handle;}
 8005b98:	9303      	str	r3, [sp, #12]
	if(acc_service_deactivate(handle)){
 8005b9a:	9803      	ldr	r0, [sp, #12]
 8005b9c:	f7fe f988 	bl	8003eb0 <acc_service_deactivate>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d03f      	beq.n	8005c24 <stopService+0xbc>
		acc_service_destroy(&handle);	
 8005ba4:	a803      	add	r0, sp, #12
 8005ba6:	f7fe fa35 	bl	8004014 <acc_service_destroy>
		data_free();
 8005baa:	f7fb f9db 	bl	8000f64 <data_free>
		DBG_PRINTLN("sparse service destroyed");
 8005bae:	0038      	movs	r0, r7
 8005bb0:	f00e fbae 	bl	8014310 <__wrap_printf>
 8005bb4:	4828      	ldr	r0, [pc, #160]	; (8005c58 <stopService+0xf0>)
 8005bb6:	f00e fbab 	bl	8014310 <__wrap_printf>
 8005bba:	4a28      	ldr	r2, [pc, #160]	; (8005c5c <stopService+0xf4>)
		ERR_PRINTLN("sparse service deactivation fail");
 8005bbc:	0029      	movs	r1, r5
 8005bbe:	0020      	movs	r0, r4
 8005bc0:	f00e fba6 	bl	8014310 <__wrap_printf>
	if(far_active){
 8005bc4:	4b26      	ldr	r3, [pc, #152]	; (8005c60 <stopService+0xf8>)
 8005bc6:	3358      	adds	r3, #88	; 0x58
 8005bc8:	9301      	str	r3, [sp, #4]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d019      	beq.n	8005c04 <stopService+0x9c>
	if(acc_service_deactivate(sparse_handle_far)){
 8005bd0:	4e20      	ldr	r6, [pc, #128]	; (8005c54 <stopService+0xec>)
 8005bd2:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8005bd4:	f7fe f96c 	bl	8003eb0 <acc_service_deactivate>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d02b      	beq.n	8005c34 <stopService+0xcc>
		acc_service_destroy(&sparse_handle_far);	
 8005bdc:	0030      	movs	r0, r6
 8005bde:	3048      	adds	r0, #72	; 0x48
 8005be0:	f7fe fa18 	bl	8004014 <acc_service_destroy>
		data_free();
 8005be4:	f7fb f9be 	bl	8000f64 <data_free>
		far_active = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	9a01      	ldr	r2, [sp, #4]
		DBG_PRINTLN("far sparse service destroyed");
 8005bec:	0038      	movs	r0, r7
		far_active = 0;
 8005bee:	7013      	strb	r3, [r2, #0]
		DBG_PRINTLN("far sparse service destroyed");
 8005bf0:	f00e fb8e 	bl	8014310 <__wrap_printf>
 8005bf4:	481b      	ldr	r0, [pc, #108]	; (8005c64 <stopService+0xfc>)
 8005bf6:	f00e fb8b 	bl	8014310 <__wrap_printf>
 8005bfa:	4a1b      	ldr	r2, [pc, #108]	; (8005c68 <stopService+0x100>)
		ERR_PRINTLN("far sparse service deactivation fail");
 8005bfc:	0029      	movs	r1, r5
 8005bfe:	0020      	movs	r0, r4
 8005c00:	f00e fb86 	bl	8014310 <__wrap_printf>
    uint32_t setbits = RegInt_getreg(0x06);
 8005c04:	2006      	movs	r0, #6
 8005c06:	f7ff fe27 	bl	8005858 <RegInt_getreg>
    setbits &= 0xFFFFFFFE;
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	0001      	movs	r1, r0
    RegInt_setregf(0x06, setbits, 1);
 8005c0e:	2006      	movs	r0, #6
    setbits &= 0xFFFFFFFE;
 8005c10:	4391      	bics	r1, r2
    RegInt_setregf(0x06, setbits, 1);
 8005c12:	f7ff ff6b 	bl	8005aec <RegInt_setregf>
}
 8005c16:	b005      	add	sp, #20
 8005c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(service_type == 0x04){handle = sparse_handle;}
 8005c1a:	2804      	cmp	r0, #4
 8005c1c:	d1fb      	bne.n	8005c16 <stopService+0xae>
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <stopService+0xec>)
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	e7b9      	b.n	8005b98 <stopService+0x30>
		ERR_PRINTLN("sparse service deactivation fail");
 8005c24:	4811      	ldr	r0, [pc, #68]	; (8005c6c <stopService+0x104>)
 8005c26:	f00e fb73 	bl	8014310 <__wrap_printf>
 8005c2a:	4811      	ldr	r0, [pc, #68]	; (8005c70 <stopService+0x108>)
 8005c2c:	f00e fb70 	bl	8014310 <__wrap_printf>
 8005c30:	4a10      	ldr	r2, [pc, #64]	; (8005c74 <stopService+0x10c>)
 8005c32:	e7c3      	b.n	8005bbc <stopService+0x54>
		ERR_PRINTLN("far sparse service deactivation fail");
 8005c34:	480d      	ldr	r0, [pc, #52]	; (8005c6c <stopService+0x104>)
 8005c36:	f00e fb6b 	bl	8014310 <__wrap_printf>
 8005c3a:	480f      	ldr	r0, [pc, #60]	; (8005c78 <stopService+0x110>)
 8005c3c:	f00e fb68 	bl	8014310 <__wrap_printf>
 8005c40:	4a0e      	ldr	r2, [pc, #56]	; (8005c7c <stopService+0x114>)
 8005c42:	e7db      	b.n	8005bfc <stopService+0x94>
 8005c44:	0801b1ea 	.word	0x0801b1ea
 8005c48:	0801bb97 	.word	0x0801bb97
 8005c4c:	0801b202 	.word	0x0801b202
 8005c50:	0801bcb9 	.word	0x0801bcb9
 8005c54:	2000018c 	.word	0x2000018c
 8005c58:	0801bbac 	.word	0x0801bbac
 8005c5c:	0000029b 	.word	0x0000029b
 8005c60:	2000010c 	.word	0x2000010c
 8005c64:	0801bba8 	.word	0x0801bba8
 8005c68:	000002a5 	.word	0x000002a5
 8005c6c:	0801b226 	.word	0x0801b226
 8005c70:	0801bbc9 	.word	0x0801bbc9
 8005c74:	0000029d 	.word	0x0000029d
 8005c78:	0801bbc5 	.word	0x0801bbc5
 8005c7c:	000002a7 	.word	0x000002a7

08005c80 <Reg_store_sparse_metadata>:
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8005c80:	b084      	sub	sp, #16
 8005c82:	b510      	push	{r4, lr}
 8005c84:	9002      	str	r0, [sp, #8]
 8005c86:	9103      	str	r1, [sp, #12]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8005c88:	9802      	ldr	r0, [sp, #8]
 8005c8a:	491e      	ldr	r1, [pc, #120]	; (8005d04 <Reg_store_sparse_metadata+0x84>)
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8005c8c:	9305      	str	r3, [sp, #20]
 8005c8e:	9204      	str	r2, [sp, #16]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8005c90:	f006 fd92 	bl	800c7b8 <__aeabi_fmul>
 8005c94:	f007 fad0 	bl	800d238 <__aeabi_f2uiz>
 8005c98:	2201      	movs	r2, #1
 8005c9a:	0001      	movs	r1, r0
 8005c9c:	2081      	movs	r0, #129	; 0x81
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8005c9e:	9c07      	ldr	r4, [sp, #28]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8005ca0:	f7ff ff24 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 8005ca4:	4917      	ldr	r1, [pc, #92]	; (8005d04 <Reg_store_sparse_metadata+0x84>)
 8005ca6:	9803      	ldr	r0, [sp, #12]
 8005ca8:	f006 fd86 	bl	800c7b8 <__aeabi_fmul>
 8005cac:	f007 fac4 	bl	800d238 <__aeabi_f2uiz>
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	0001      	movs	r1, r0
 8005cb4:	2082      	movs	r0, #130	; 0x82
 8005cb6:	f7ff ff19 	bl	8005aec <RegInt_setregf>
	uint32_t bufflen = metadata.data_length;
 8005cba:	ab02      	add	r3, sp, #8
 8005cbc:	8919      	ldrh	r1, [r3, #8]
	if(metadata_far_ptr != NULL){
 8005cbe:	2c00      	cmp	r4, #0
 8005cc0:	d001      	beq.n	8005cc6 <Reg_store_sparse_metadata+0x46>
		bufflen += (*metadata_far_ptr).data_length;
 8005cc2:	8923      	ldrh	r3, [r4, #8]
 8005cc4:	18c9      	adds	r1, r1, r3
	RegInt_setregf(0x83, bufflen ,1);
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	2083      	movs	r0, #131	; 0x83
 8005cca:	f7ff ff0f 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0x84, (uint32_t)(metadata.sweep_rate * 1000.0f),1);
 8005cce:	490d      	ldr	r1, [pc, #52]	; (8005d04 <Reg_store_sparse_metadata+0x84>)
 8005cd0:	9805      	ldr	r0, [sp, #20]
 8005cd2:	f006 fd71 	bl	800c7b8 <__aeabi_fmul>
 8005cd6:	f007 faaf 	bl	800d238 <__aeabi_f2uiz>
 8005cda:	2201      	movs	r2, #1
 8005cdc:	0001      	movs	r1, r0
 8005cde:	2084      	movs	r0, #132	; 0x84
 8005ce0:	f7ff ff04 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1000.0f),1);
 8005ce4:	4907      	ldr	r1, [pc, #28]	; (8005d04 <Reg_store_sparse_metadata+0x84>)
 8005ce6:	9806      	ldr	r0, [sp, #24]
 8005ce8:	f006 fd66 	bl	800c7b8 <__aeabi_fmul>
 8005cec:	f007 faa4 	bl	800d238 <__aeabi_f2uiz>
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	0001      	movs	r1, r0
 8005cf4:	2085      	movs	r0, #133	; 0x85
 8005cf6:	f7ff fef9 	bl	8005aec <RegInt_setregf>
}
 8005cfa:	bc10      	pop	{r4}
 8005cfc:	bc08      	pop	{r3}
 8005cfe:	b004      	add	sp, #16
 8005d00:	4718      	bx	r3
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	447a0000 	.word	0x447a0000

08005d08 <createService>:
int8_t createService(void){
 8005d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    DBG_PRINTLN("creating service");
 8005d0a:	4fad      	ldr	r7, [pc, #692]	; (8005fc0 <createService+0x2b8>)
int8_t createService(void){
 8005d0c:	b085      	sub	sp, #20
    DBG_PRINTLN("creating service");
 8005d0e:	0038      	movs	r0, r7
 8005d10:	f00e fafe 	bl	8014310 <__wrap_printf>
 8005d14:	48ab      	ldr	r0, [pc, #684]	; (8005fc4 <createService+0x2bc>)
 8005d16:	f00e fafb 	bl	8014310 <__wrap_printf>
 8005d1a:	4eab      	ldr	r6, [pc, #684]	; (8005fc8 <createService+0x2c0>)
 8005d1c:	4aab      	ldr	r2, [pc, #684]	; (8005fcc <createService+0x2c4>)
 8005d1e:	0031      	movs	r1, r6
 8005d20:	48ab      	ldr	r0, [pc, #684]	; (8005fd0 <createService+0x2c8>)
 8005d22:	f00e faf5 	bl	8014310 <__wrap_printf>
    uint32_t service_type = RegInt_getreg(0x02);
 8005d26:	2002      	movs	r0, #2
 8005d28:	f7ff fd96 	bl	8005858 <RegInt_getreg>
    if(service_type == 0x02){success = createEnvelopeService();}
 8005d2c:	2802      	cmp	r0, #2
 8005d2e:	d000      	beq.n	8005d32 <createService+0x2a>
 8005d30:	e1ee      	b.n	8006110 <createService+0x408>
    updateEnvelopeConfig(envelope_config);
 8005d32:	4da8      	ldr	r5, [pc, #672]	; (8005fd4 <createService+0x2cc>)
    DBG_PRINTLN("updating config");
 8005d34:	0038      	movs	r0, r7
    updateEnvelopeConfig(envelope_config);
 8005d36:	6dac      	ldr	r4, [r5, #88]	; 0x58
    DBG_PRINTLN("updating config");
 8005d38:	f00e faea 	bl	8014310 <__wrap_printf>
 8005d3c:	48a6      	ldr	r0, [pc, #664]	; (8005fd8 <createService+0x2d0>)
 8005d3e:	f00e fae7 	bl	8014310 <__wrap_printf>
 8005d42:	22e8      	movs	r2, #232	; 0xe8
 8005d44:	0031      	movs	r1, r6
 8005d46:	32ff      	adds	r2, #255	; 0xff
 8005d48:	48a1      	ldr	r0, [pc, #644]	; (8005fd0 <createService+0x2c8>)
 8005d4a:	f00e fae1 	bl	8014310 <__wrap_printf>
    acc_service_profile_set(config, RegInt_getreg(0x28));
 8005d4e:	2028      	movs	r0, #40	; 0x28
 8005d50:	f7ff fd82 	bl	8005858 <RegInt_getreg>
 8005d54:	b2c1      	uxtb	r1, r0
 8005d56:	0020      	movs	r0, r4
 8005d58:	f7fa ff34 	bl	8000bc4 <acc_service_profile_set>
	uint32_t rep_mode = RegInt_getreg(0x22); 
 8005d5c:	2022      	movs	r0, #34	; 0x22
 8005d5e:	f7ff fd7b 	bl	8005858 <RegInt_getreg>
	if(rep_mode == 0x01){
 8005d62:	2801      	cmp	r0, #1
 8005d64:	d000      	beq.n	8005d68 <createService+0x60>
 8005d66:	e0fb      	b.n	8005f60 <createService+0x258>
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 8005d68:	3022      	adds	r0, #34	; 0x22
 8005d6a:	f7ff fd75 	bl	8005858 <RegInt_getreg>
 8005d6e:	9002      	str	r0, [sp, #8]
 8005d70:	0020      	movs	r0, r4
 8005d72:	f7fa fedd 	bl	8000b30 <acc_service_get_base_configuration>
 8005d76:	0007      	movs	r7, r0
 8005d78:	f7fa fd12 	bl	80007a0 <configuration_is_valid>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d008      	beq.n	8005d92 <createService+0x8a>
 8005d80:	2303      	movs	r3, #3
 8005d82:	9802      	ldr	r0, [sp, #8]
 8005d84:	713b      	strb	r3, [r7, #4]
 8005d86:	f007 fc77 	bl	800d678 <__aeabi_ui2f>
 8005d8a:	4994      	ldr	r1, [pc, #592]	; (8005fdc <createService+0x2d4>)
 8005d8c:	f006 fc02 	bl	800c594 <__aeabi_fdiv>
 8005d90:	60b8      	str	r0, [r7, #8]
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 8005d92:	2026      	movs	r0, #38	; 0x26
 8005d94:	f7ff fd60 	bl	8005858 <RegInt_getreg>
 8005d98:	0007      	movs	r7, r0
 8005d9a:	0020      	movs	r0, r4
 8005d9c:	f7fa fec8 	bl	8000b30 <acc_service_get_base_configuration>
 8005da0:	9002      	str	r0, [sp, #8]
 8005da2:	f7fa fcfd 	bl	80007a0 <configuration_is_valid>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d004      	beq.n	8005db4 <createService+0xac>
 8005daa:	1e7b      	subs	r3, r7, #1
 8005dac:	419f      	sbcs	r7, r3
 8005dae:	9b02      	ldr	r3, [sp, #8]
 8005db0:	3347      	adds	r3, #71	; 0x47
 8005db2:	701f      	strb	r7, [r3, #0]
	acc_service_envelope_downsampling_factor_set(config, RegInt_getreg(0x29));
 8005db4:	2029      	movs	r0, #41	; 0x29
 8005db6:	f7ff fd4f 	bl	8005858 <RegInt_getreg>
 8005dba:	0007      	movs	r7, r0
 8005dbc:	0020      	movs	r0, r4
 8005dbe:	f7fa ffcd 	bl	8000d5c <get_and_validate_envelope_configuration>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d003      	beq.n	8005dce <createService+0xc6>
 8005dc6:	b2b9      	uxth	r1, r7
 8005dc8:	6920      	ldr	r0, [r4, #16]
 8005dca:	f7fa fd15 	bl	80007f8 <acc_base_configuration_downsampling_factor_set>
	acc_service_power_save_mode_set(config, RegInt_getreg(0x25));
 8005dce:	2025      	movs	r0, #37	; 0x25
 8005dd0:	f7ff fd42 	bl	8005858 <RegInt_getreg>
 8005dd4:	9002      	str	r0, [sp, #8]
 8005dd6:	0020      	movs	r0, r4
 8005dd8:	f7fa feaa 	bl	8000b30 <acc_service_get_base_configuration>
 8005ddc:	0007      	movs	r7, r0
 8005dde:	f7fa fcdf 	bl	80007a0 <configuration_is_valid>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d001      	beq.n	8005dea <createService+0xe2>
 8005de6:	9b02      	ldr	r3, [sp, #8]
 8005de8:	63bb      	str	r3, [r7, #56]	; 0x38
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 8005dea:	2033      	movs	r0, #51	; 0x33
 8005dec:	f7ff fd34 	bl	8005858 <RegInt_getreg>
 8005df0:	0007      	movs	r7, r0
 8005df2:	0020      	movs	r0, r4
 8005df4:	f7fa fe9c 	bl	8000b30 <acc_service_get_base_configuration>
 8005df8:	9002      	str	r0, [sp, #8]
 8005dfa:	f7fa fcd1 	bl	80007a0 <configuration_is_valid>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d004      	beq.n	8005e0c <createService+0x104>
 8005e02:	1e7b      	subs	r3, r7, #1
 8005e04:	419f      	sbcs	r7, r3
 8005e06:	9b02      	ldr	r3, [sp, #8]
 8005e08:	334e      	adds	r3, #78	; 0x4e
 8005e0a:	701f      	strb	r7, [r3, #0]
	acc_service_requested_start_set (config, (float)RegInt_getreg(0x20)/1000.0f);
 8005e0c:	2020      	movs	r0, #32
 8005e0e:	f7ff fd23 	bl	8005858 <RegInt_getreg>
 8005e12:	9002      	str	r0, [sp, #8]
 8005e14:	0020      	movs	r0, r4
 8005e16:	f7fa fe8b 	bl	8000b30 <acc_service_get_base_configuration>
 8005e1a:	0007      	movs	r7, r0
 8005e1c:	f7fa fcc0 	bl	80007a0 <configuration_is_valid>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d006      	beq.n	8005e32 <createService+0x12a>
 8005e24:	9802      	ldr	r0, [sp, #8]
 8005e26:	f007 fc27 	bl	800d678 <__aeabi_ui2f>
 8005e2a:	496c      	ldr	r1, [pc, #432]	; (8005fdc <createService+0x2d4>)
 8005e2c:	f006 fbb2 	bl	800c594 <__aeabi_fdiv>
 8005e30:	6278      	str	r0, [r7, #36]	; 0x24
	acc_service_requested_length_set (config, (float)RegInt_getreg(0x21)/1000.0f);
 8005e32:	2021      	movs	r0, #33	; 0x21
 8005e34:	f7ff fd10 	bl	8005858 <RegInt_getreg>
 8005e38:	9002      	str	r0, [sp, #8]
 8005e3a:	0020      	movs	r0, r4
 8005e3c:	f7fa fe78 	bl	8000b30 <acc_service_get_base_configuration>
 8005e40:	0007      	movs	r7, r0
 8005e42:	f7fa fcad 	bl	80007a0 <configuration_is_valid>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d006      	beq.n	8005e58 <createService+0x150>
 8005e4a:	9802      	ldr	r0, [sp, #8]
 8005e4c:	f007 fc14 	bl	800d678 <__aeabi_ui2f>
 8005e50:	4962      	ldr	r1, [pc, #392]	; (8005fdc <createService+0x2d4>)
 8005e52:	f006 fb9f 	bl	800c594 <__aeabi_fdiv>
 8005e56:	62b8      	str	r0, [r7, #40]	; 0x28
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8005e58:	2024      	movs	r0, #36	; 0x24
 8005e5a:	f7ff fcfd 	bl	8005858 <RegInt_getreg>
 8005e5e:	f007 fc0b 	bl	800d678 <__aeabi_ui2f>
 8005e62:	495e      	ldr	r1, [pc, #376]	; (8005fdc <createService+0x2d4>)
 8005e64:	f006 fb96 	bl	800c594 <__aeabi_fdiv>
 8005e68:	1c01      	adds	r1, r0, #0
 8005e6a:	0020      	movs	r0, r4
 8005e6c:	f7fa fec4 	bl	8000bf8 <acc_service_receiver_gain_set>
	acc_service_hw_accelerated_average_samples_set (config, RegInt_getreg(0x30));
 8005e70:	2030      	movs	r0, #48	; 0x30
 8005e72:	f7ff fcf1 	bl	8005858 <RegInt_getreg>
 8005e76:	9002      	str	r0, [sp, #8]
 8005e78:	0020      	movs	r0, r4
 8005e7a:	f7fa fe59 	bl	8000b30 <acc_service_get_base_configuration>
 8005e7e:	0007      	movs	r7, r0
 8005e80:	f7fa fc8e 	bl	80007a0 <configuration_is_valid>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d002      	beq.n	8005e8e <createService+0x186>
 8005e88:	466b      	mov	r3, sp
 8005e8a:	7a1b      	ldrb	r3, [r3, #8]
 8005e8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    acc_service_envelope_noise_level_normalization_set (config, RegInt_getreg(0x31));
 8005e8e:	2031      	movs	r0, #49	; 0x31
 8005e90:	f7ff fce2 	bl	8005858 <RegInt_getreg>
 8005e94:	9002      	str	r0, [sp, #8]
 8005e96:	0020      	movs	r0, r4
 8005e98:	f7fa ff60 	bl	8000d5c <get_and_validate_envelope_configuration>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d00c      	beq.n	8005eba <createService+0x1b2>
 8005ea0:	0020      	movs	r0, r4
 8005ea2:	f7fa fe45 	bl	8000b30 <acc_service_get_base_configuration>
 8005ea6:	0007      	movs	r7, r0
 8005ea8:	f7fa fc7a 	bl	80007a0 <configuration_is_valid>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d004      	beq.n	8005eba <createService+0x1b2>
 8005eb0:	9b02      	ldr	r3, [sp, #8]
 8005eb2:	3749      	adds	r7, #73	; 0x49
 8005eb4:	1e5a      	subs	r2, r3, #1
 8005eb6:	4193      	sbcs	r3, r2
 8005eb8:	703b      	strb	r3, [r7, #0]
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8005eba:	2032      	movs	r0, #50	; 0x32
 8005ebc:	f7ff fccc 	bl	8005858 <RegInt_getreg>
 8005ec0:	1e41      	subs	r1, r0, #1
 8005ec2:	4188      	sbcs	r0, r1
 8005ec4:	b2c1      	uxtb	r1, r0
 8005ec6:	0020      	movs	r0, r4
 8005ec8:	f7fa fe6a 	bl	8000ba0 <acc_service_maximize_signal_attenuation_set>
    acc_service_mur_set (config, RegInt_getreg(0x34));
 8005ecc:	2034      	movs	r0, #52	; 0x34
 8005ece:	f7ff fcc3 	bl	8005858 <RegInt_getreg>
 8005ed2:	9002      	str	r0, [sp, #8]
 8005ed4:	0020      	movs	r0, r4
 8005ed6:	f7fa fe2b 	bl	8000b30 <acc_service_get_base_configuration>
 8005eda:	1e07      	subs	r7, r0, #0
 8005edc:	d049      	beq.n	8005f72 <createService+0x26a>
 8005ede:	f7fa fc5f 	bl	80007a0 <configuration_is_valid>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d002      	beq.n	8005eec <createService+0x1e4>
 8005ee6:	9b02      	ldr	r3, [sp, #8]
 8005ee8:	3732      	adds	r7, #50	; 0x32
 8005eea:	703b      	strb	r3, [r7, #0]
	acc_service_envelope_running_average_factor_set(config, (float)RegInt_getreg(0x40)/1000.0f);
 8005eec:	2040      	movs	r0, #64	; 0x40
 8005eee:	f7ff fcb3 	bl	8005858 <RegInt_getreg>
 8005ef2:	0007      	movs	r7, r0
 8005ef4:	0020      	movs	r0, r4
 8005ef6:	f7fa ff31 	bl	8000d5c <get_and_validate_envelope_configuration>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d018      	beq.n	8005f30 <createService+0x228>
 8005efe:	0038      	movs	r0, r7
 8005f00:	f007 fbba 	bl	800d678 <__aeabi_ui2f>
 8005f04:	4935      	ldr	r1, [pc, #212]	; (8005fdc <createService+0x2d4>)
 8005f06:	f006 fb45 	bl	800c594 <__aeabi_fdiv>
 8005f0a:	21fe      	movs	r1, #254	; 0xfe
 8005f0c:	0589      	lsls	r1, r1, #22
 8005f0e:	1c07      	adds	r7, r0, #0
 8005f10:	f007 f95e 	bl	800d1d0 <__aeabi_fcmpgt>
 8005f14:	9002      	str	r0, [sp, #8]
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d033      	beq.n	8005f82 <createService+0x27a>
 8005f1a:	4b31      	ldr	r3, [pc, #196]	; (8005fe0 <createService+0x2d8>)
 8005f1c:	001a      	movs	r2, r3
 8005f1e:	3230      	adds	r2, #48	; 0x30
 8005f20:	7812      	ldrb	r2, [r2, #0]
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	d004      	beq.n	8005f30 <createService+0x228>
 8005f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f28:	4a2e      	ldr	r2, [pc, #184]	; (8005fe4 <createService+0x2dc>)
 8005f2a:	492f      	ldr	r1, [pc, #188]	; (8005fe8 <createService+0x2e0>)
 8005f2c:	2001      	movs	r0, #1
 8005f2e:	4798      	blx	r3
   	envelope_handle = acc_service_create(envelope_config);	
 8005f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f32:	f7fb fdd1 	bl	8001ad8 <acc_service_create>
 8005f36:	6528      	str	r0, [r5, #80]	; 0x50
	if (envelope_handle == NULL){//handles error
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d15b      	bne.n	8005ff4 <createService+0x2ec>
		ERR_PRINTLN("envelope service creation failed");
 8005f3c:	482b      	ldr	r0, [pc, #172]	; (8005fec <createService+0x2e4>)
 8005f3e:	f00e f9e7 	bl	8014310 <__wrap_printf>
 8005f42:	482b      	ldr	r0, [pc, #172]	; (8005ff0 <createService+0x2e8>)
 8005f44:	f00e f9e4 	bl	8014310 <__wrap_printf>
 8005f48:	2289      	movs	r2, #137	; 0x89
 8005f4a:	0092      	lsls	r2, r2, #2
		ERR_PRINTLN("sparse service creation failed (too long)");
 8005f4c:	0031      	movs	r1, r6
		ERR_PRINTLN("sparse service creation fail");
 8005f4e:	4820      	ldr	r0, [pc, #128]	; (8005fd0 <createService+0x2c8>)
 8005f50:	f00e f9de 	bl	8014310 <__wrap_printf>
        Reg_regor(0x06, 0x00080000);
 8005f54:	2080      	movs	r0, #128	; 0x80
 8005f56:	0300      	lsls	r0, r0, #12
 8005f58:	f003 f902 	bl	8009160 <Reg_regor.constprop.76>
        return 0;
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	e0d5      	b.n	800610c <createService+0x404>
	}else if (rep_mode == 0x02){
 8005f60:	2802      	cmp	r0, #2
 8005f62:	d000      	beq.n	8005f66 <createService+0x25e>
 8005f64:	e715      	b.n	8005d92 <createService+0x8a>
 8005f66:	0020      	movs	r0, r4
 8005f68:	f7fa fde2 	bl	8000b30 <acc_service_get_base_configuration>
 8005f6c:	f7fa fcf7 	bl	800095e <acc_base_configuration_repetition_mode_on_demand_set>
 8005f70:	e70f      	b.n	8005d92 <createService+0x8a>
 8005f72:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <createService+0x2d8>)
 8005f74:	3330      	adds	r3, #48	; 0x30
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0b7      	beq.n	8005eec <createService+0x1e4>
 8005f7c:	f7fa fd72 	bl	8000a64 <acc_service_maximize_signal_attenuation_set.part.8>
 8005f80:	e7b4      	b.n	8005eec <createService+0x1e4>
 8005f82:	0020      	movs	r0, r4
 8005f84:	f7fa fdd4 	bl	8000b30 <acc_service_get_base_configuration>
 8005f88:	0004      	movs	r4, r0
 8005f8a:	f7fa fc09 	bl	80007a0 <configuration_is_valid>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d0ce      	beq.n	8005f30 <createService+0x228>
 8005f92:	20fe      	movs	r0, #254	; 0xfe
 8005f94:	1c39      	adds	r1, r7, #0
 8005f96:	0580      	lsls	r0, r0, #22
 8005f98:	f006 fd40 	bl	800ca1c <__aeabi_fsub>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	466a      	mov	r2, sp
 8005fa0:	6160      	str	r0, [r4, #20]
 8005fa2:	7313      	strb	r3, [r2, #12]
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	1c38      	adds	r0, r7, #0
 8005fa8:	f007 f8f8 	bl	800d19c <__aeabi_fcmpeq>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d002      	beq.n	8005fb6 <createService+0x2ae>
 8005fb0:	466a      	mov	r2, sp
 8005fb2:	9b02      	ldr	r3, [sp, #8]
 8005fb4:	7313      	strb	r3, [r2, #12]
 8005fb6:	466b      	mov	r3, sp
 8005fb8:	7b1b      	ldrb	r3, [r3, #12]
 8005fba:	7623      	strb	r3, [r4, #24]
 8005fbc:	e7b8      	b.n	8005f30 <createService+0x228>
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	0801b1ea 	.word	0x0801b1ea
 8005fc4:	0801bbea 	.word	0x0801bbea
 8005fc8:	0801b202 	.word	0x0801b202
 8005fcc:	0000020e 	.word	0x0000020e
 8005fd0:	0801bcb9 	.word	0x0801bcb9
 8005fd4:	2000018c 	.word	0x2000018c
 8005fd8:	0801bb55 	.word	0x0801bb55
 8005fdc:	447a0000 	.word	0x447a0000
 8005fe0:	200003e8 	.word	0x200003e8
 8005fe4:	0801bbfb 	.word	0x0801bbfb
 8005fe8:	0801af22 	.word	0x0801af22
 8005fec:	0801b226 	.word	0x0801b226
 8005ff0:	0801bc3d 	.word	0x0801bc3d
 8005ff4:	7a03      	ldrb	r3, [r0, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d115      	bne.n	8006026 <createService+0x31e>
 8005ffa:	0029      	movs	r1, r5
 8005ffc:	6903      	ldr	r3, [r0, #16]
 8005ffe:	315c      	adds	r1, #92	; 0x5c
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699a      	ldr	r2, [r3, #24]
 8006004:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006006:	65ea      	str	r2, [r5, #92]	; 0x5c
 8006008:	69da      	ldr	r2, [r3, #28]
 800600a:	662a      	str	r2, [r5, #96]	; 0x60
 800600c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800600e:	810a      	strh	r2, [r1, #8]
 8006010:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8006012:	3a01      	subs	r2, #1
 8006014:	814a      	strh	r2, [r1, #10]
 8006016:	49ac      	ldr	r1, [pc, #688]	; (80062c8 <createService+0x5c0>)
 8006018:	f006 fbce 	bl	800c7b8 <__aeabi_fmul>
 800601c:	21fc      	movs	r1, #252	; 0xfc
 800601e:	0589      	lsls	r1, r1, #22
 8006020:	f006 fbca 	bl	800c7b8 <__aeabi_fmul>
 8006024:	66a8      	str	r0, [r5, #104]	; 0x68
    bins = envelope_metadata.data_length;
 8006026:	002b      	movs	r3, r5
 8006028:	335c      	adds	r3, #92	; 0x5c
 800602a:	8919      	ldrh	r1, [r3, #8]
 800602c:	4ba7      	ldr	r3, [pc, #668]	; (80062cc <createService+0x5c4>)
    return data_malloc(1,bins);
 800602e:	2001      	movs	r0, #1
    bins = envelope_metadata.data_length;
 8006030:	87d9      	strh	r1, [r3, #62]	; 0x3e
    return data_malloc(1,bins);
 8006032:	f7fb fee6 	bl	8001e02 <data_malloc>
        if(envelope_data_malloc() == -1){stopService();}
 8006036:	1c43      	adds	r3, r0, #1
 8006038:	d101      	bne.n	800603e <createService+0x336>
 800603a:	f7ff fd95 	bl	8005b68 <stopService>
 800603e:	002c      	movs	r4, r5
 8006040:	345c      	adds	r4, #92	; 0x5c
 8006042:	8923      	ldrh	r3, [r4, #8]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8006044:	49a2      	ldr	r1, [pc, #648]	; (80062d0 <createService+0x5c8>)
 8006046:	9302      	str	r3, [sp, #8]
 8006048:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800604a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800604c:	9303      	str	r3, [sp, #12]
 800604e:	f006 fbb3 	bl	800c7b8 <__aeabi_fmul>
 8006052:	f007 f8f1 	bl	800d238 <__aeabi_f2uiz>
 8006056:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8006058:	2201      	movs	r2, #1
 800605a:	0001      	movs	r1, r0
 800605c:	2081      	movs	r0, #129	; 0x81
 800605e:	8967      	ldrh	r7, [r4, #10]
 8006060:	f7ff fd44 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 8006064:	499a      	ldr	r1, [pc, #616]	; (80062d0 <createService+0x5c8>)
 8006066:	1c30      	adds	r0, r6, #0
 8006068:	f006 fba6 	bl	800c7b8 <__aeabi_fmul>
 800606c:	f007 f8e4 	bl	800d238 <__aeabi_f2uiz>
 8006070:	2201      	movs	r2, #1
 8006072:	0001      	movs	r1, r0
 8006074:	2082      	movs	r0, #130	; 0x82
 8006076:	f7ff fd39 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0x83, (uint32_t)metadata.data_length ,1);
 800607a:	2201      	movs	r2, #1
 800607c:	9902      	ldr	r1, [sp, #8]
 800607e:	2083      	movs	r0, #131	; 0x83
 8006080:	f7ff fd34 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0x84, (uint32_t)metadata.stitch_count,1);
 8006084:	2201      	movs	r2, #1
 8006086:	0039      	movs	r1, r7
 8006088:	2084      	movs	r0, #132	; 0x84
 800608a:	f7ff fd2f 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1000.0f),1);
 800608e:	4990      	ldr	r1, [pc, #576]	; (80062d0 <createService+0x5c8>)
 8006090:	9803      	ldr	r0, [sp, #12]
 8006092:	f006 fb91 	bl	800c7b8 <__aeabi_fmul>
 8006096:	f007 f8cf 	bl	800d238 <__aeabi_f2uiz>
 800609a:	2201      	movs	r2, #1
 800609c:	0001      	movs	r1, r0
 800609e:	2085      	movs	r0, #133	; 0x85
 80060a0:	f7ff fd24 	bl	8005aec <RegInt_setregf>
 80060a4:	8923      	ldrh	r3, [r4, #8]
 80060a6:	6def      	ldr	r7, [r5, #92]	; 0x5c
 80060a8:	9302      	str	r3, [sp, #8]
 80060aa:	8963      	ldrh	r3, [r4, #10]

void printf_envelope_metadata(acc_service_envelope_metadata_t metadata){
    printf("Envelope Serivce Metadata\n");
 80060ac:	4889      	ldr	r0, [pc, #548]	; (80062d4 <createService+0x5cc>)
 80060ae:	001c      	movs	r4, r3
 80060b0:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 80060b2:	6ead      	ldr	r5, [r5, #104]	; 0x68
 80060b4:	f00e f91a 	bl	80142ec <__wrap_puts>
	printf("Start: %ld mm\n", (int32_t)(metadata.start_m * 1000.0f));
 80060b8:	4985      	ldr	r1, [pc, #532]	; (80062d0 <createService+0x5c8>)
 80060ba:	1c38      	adds	r0, r7, #0
 80060bc:	f006 fb7c 	bl	800c7b8 <__aeabi_fmul>
 80060c0:	f007 fa70 	bl	800d5a4 <__aeabi_f2iz>
 80060c4:	0001      	movs	r1, r0
 80060c6:	4884      	ldr	r0, [pc, #528]	; (80062d8 <createService+0x5d0>)
 80060c8:	f00e f922 	bl	8014310 <__wrap_printf>
    printf("Length: %lu mm\n", (uint32_t)(metadata.length_m * 1000.0f));
 80060cc:	4980      	ldr	r1, [pc, #512]	; (80062d0 <createService+0x5c8>)
 80060ce:	1c30      	adds	r0, r6, #0
 80060d0:	f006 fb72 	bl	800c7b8 <__aeabi_fmul>
 80060d4:	f007 f8b0 	bl	800d238 <__aeabi_f2uiz>
 80060d8:	0001      	movs	r1, r0
 80060da:	4880      	ldr	r0, [pc, #512]	; (80062dc <createService+0x5d4>)
 80060dc:	f00e f918 	bl	8014310 <__wrap_printf>
    printf("Data length: %lu\n", (uint32_t)metadata.data_length);
 80060e0:	9902      	ldr	r1, [sp, #8]
 80060e2:	487f      	ldr	r0, [pc, #508]	; (80062e0 <createService+0x5d8>)
 80060e4:	f00e f914 	bl	8014310 <__wrap_printf>
    printf("Sweep rate: %lu mHz\n", (uint32_t)(metadata.stitch_count));
 80060e8:	0021      	movs	r1, r4
 80060ea:	487e      	ldr	r0, [pc, #504]	; (80062e4 <createService+0x5dc>)
 80060ec:	f00e f910 	bl	8014310 <__wrap_printf>
    printf("Step length: %lu mm\n", (uint32_t)(metadata.step_length_m * 1000.0f));
 80060f0:	4977      	ldr	r1, [pc, #476]	; (80062d0 <createService+0x5c8>)
 80060f2:	1c28      	adds	r0, r5, #0
 80060f4:	f006 fb60 	bl	800c7b8 <__aeabi_fmul>
 80060f8:	f007 f89e 	bl	800d238 <__aeabi_f2uiz>
 80060fc:	0001      	movs	r1, r0
 80060fe:	487a      	ldr	r0, [pc, #488]	; (80062e8 <createService+0x5e0>)
 8006100:	f00e f906 	bl	8014310 <__wrap_printf>
        Reg_regor(0x06, 0x00000001);
 8006104:	2001      	movs	r0, #1
 8006106:	f003 f82b 	bl	8009160 <Reg_regor.constprop.76>
 800610a:	2001      	movs	r0, #1
}
 800610c:	b005      	add	sp, #20
 800610e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(service_type == 0x04){success = createSparseService();}
 8006110:	2804      	cmp	r0, #4
 8006112:	d000      	beq.n	8006116 <createService+0x40e>
 8006114:	e0d5      	b.n	80062c2 <createService+0x5ba>
	uint32_t start_reg = roundDown(RegInt_getreg(0x20),60);
 8006116:	301c      	adds	r0, #28
 8006118:	f7ff fb9e 	bl	8005858 <RegInt_getreg>
uint32_t roundDown(uint32_t numToRound, uint32_t multiple)
{
    if (multiple == 0)
        return numToRound;

    uint32_t remainder = numToRound % multiple;
 800611c:	213c      	movs	r1, #60	; 0x3c
 800611e:	0004      	movs	r4, r0
 8006120:	f006 ff02 	bl	800cf28 <__aeabi_uidivmod>
	uint32_t len_reg = roundDown(RegInt_getreg(0x21),60);
 8006124:	2021      	movs	r0, #33	; 0x21
    if (remainder == 0)
        return numToRound;

    return numToRound - remainder;
 8006126:	1a63      	subs	r3, r4, r1
 8006128:	9302      	str	r3, [sp, #8]
 800612a:	f7ff fb95 	bl	8005858 <RegInt_getreg>
    uint32_t remainder = numToRound % multiple;
 800612e:	213c      	movs	r1, #60	; 0x3c
 8006130:	0004      	movs	r4, r0
 8006132:	f006 fef9 	bl	800cf28 <__aeabi_uidivmod>
	if (len_reg < 1891){
 8006136:	4b6d      	ldr	r3, [pc, #436]	; (80062ec <createService+0x5e4>)
    return numToRound - remainder;
 8006138:	1a64      	subs	r4, r4, r1
 800613a:	429c      	cmp	r4, r3
 800613c:	d827      	bhi.n	800618e <createService+0x486>
		far_active = 0;
 800613e:	4d63      	ldr	r5, [pc, #396]	; (80062cc <createService+0x5c4>)
 8006140:	2200      	movs	r2, #0
 8006142:	002b      	movs	r3, r5
        DBG_PRINTLN("updating sparse config");
 8006144:	0038      	movs	r0, r7
		far_active = 0;
 8006146:	3358      	adds	r3, #88	; 0x58
 8006148:	701a      	strb	r2, [r3, #0]
        DBG_PRINTLN("updating sparse config");
 800614a:	f00e f8e1 	bl	8014310 <__wrap_printf>
 800614e:	4868      	ldr	r0, [pc, #416]	; (80062f0 <createService+0x5e8>)
 8006150:	f00e f8de 	bl	8014310 <__wrap_printf>
 8006154:	228e      	movs	r2, #142	; 0x8e
 8006156:	0031      	movs	r1, r6
 8006158:	0092      	lsls	r2, r2, #2
 800615a:	4866      	ldr	r0, [pc, #408]	; (80062f4 <createService+0x5ec>)
 800615c:	f00e f8d8 	bl	8014310 <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, len_reg);
 8006160:	466b      	mov	r3, sp
 8006162:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8006164:	8919      	ldrh	r1, [r3, #8]
 8006166:	b2a2      	uxth	r2, r4
		updateSparseConfig(sparse_config_far,start_reg+1920,far_len);
 8006168:	f7ff fbb0 	bl	80058cc <updateSparseConfig>
	sparse_handle = acc_service_create(sparse_config);	
 800616c:	4c57      	ldr	r4, [pc, #348]	; (80062cc <createService+0x5c4>)
 800616e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006170:	f7fb fcb2 	bl	8001ad8 <acc_service_create>
 8006174:	4d60      	ldr	r5, [pc, #384]	; (80062f8 <createService+0x5f0>)
 8006176:	6568      	str	r0, [r5, #84]	; 0x54
	if (sparse_handle == NULL){//handles error
 8006178:	2800      	cmp	r0, #0
 800617a:	d150      	bne.n	800621e <createService+0x516>
		ERR_PRINTLN("sparse service creation fail");
 800617c:	485f      	ldr	r0, [pc, #380]	; (80062fc <createService+0x5f4>)
 800617e:	f00e f8c7 	bl	8014310 <__wrap_printf>
 8006182:	485f      	ldr	r0, [pc, #380]	; (8006300 <createService+0x5f8>)
 8006184:	f00e f8c4 	bl	8014310 <__wrap_printf>
 8006188:	4a5e      	ldr	r2, [pc, #376]	; (8006304 <createService+0x5fc>)
 800618a:	495f      	ldr	r1, [pc, #380]	; (8006308 <createService+0x600>)
 800618c:	e6df      	b.n	8005f4e <createService+0x246>
	}else if (len_reg < 3811){
 800618e:	4b5f      	ldr	r3, [pc, #380]	; (800630c <createService+0x604>)
 8006190:	429c      	cmp	r4, r3
 8006192:	d83c      	bhi.n	800620e <createService+0x506>
		far_active = 1;
 8006194:	4d4d      	ldr	r5, [pc, #308]	; (80062cc <createService+0x5c4>)
 8006196:	2201      	movs	r2, #1
 8006198:	002b      	movs	r3, r5
		DBG_PRINTLN("updating sparse config");
 800619a:	0038      	movs	r0, r7
		far_active = 1;
 800619c:	3358      	adds	r3, #88	; 0x58
 800619e:	701a      	strb	r2, [r3, #0]
		DBG_PRINTLN("updating sparse config");
 80061a0:	f00e f8b6 	bl	8014310 <__wrap_printf>
 80061a4:	4852      	ldr	r0, [pc, #328]	; (80062f0 <createService+0x5e8>)
 80061a6:	f00e f8b3 	bl	8014310 <__wrap_printf>
 80061aa:	4a59      	ldr	r2, [pc, #356]	; (8006310 <createService+0x608>)
 80061ac:	0031      	movs	r1, r6
 80061ae:	4851      	ldr	r0, [pc, #324]	; (80062f4 <createService+0x5ec>)
 80061b0:	f00e f8ae 	bl	8014310 <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, 1890);
 80061b4:	466b      	mov	r3, sp
 80061b6:	891b      	ldrh	r3, [r3, #8]
 80061b8:	4a4c      	ldr	r2, [pc, #304]	; (80062ec <createService+0x5e4>)
 80061ba:	0019      	movs	r1, r3
 80061bc:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80061be:	9302      	str	r3, [sp, #8]
 80061c0:	f7ff fb84 	bl	80058cc <updateSparseConfig>
		DBG_PRINTLN("updating sparse far config");
 80061c4:	0038      	movs	r0, r7
 80061c6:	f00e f8a3 	bl	8014310 <__wrap_printf>
 80061ca:	4852      	ldr	r0, [pc, #328]	; (8006314 <createService+0x60c>)
 80061cc:	f00e f8a0 	bl	8014310 <__wrap_printf>
 80061d0:	0031      	movs	r1, r6
 80061d2:	4a51      	ldr	r2, [pc, #324]	; (8006318 <createService+0x610>)
 80061d4:	4847      	ldr	r0, [pc, #284]	; (80062f4 <createService+0x5ec>)
 80061d6:	f00e f89b 	bl	8014310 <__wrap_printf>
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 80061da:	4b50      	ldr	r3, [pc, #320]	; (800631c <createService+0x614>)
 80061dc:	0021      	movs	r1, r4
 80061de:	429c      	cmp	r4, r3
 80061e0:	d200      	bcs.n	80061e4 <createService+0x4dc>
 80061e2:	0019      	movs	r1, r3
 80061e4:	4b4e      	ldr	r3, [pc, #312]	; (8006320 <createService+0x618>)
		DBG_PRINTINT(far_len);
 80061e6:	484f      	ldr	r0, [pc, #316]	; (8006324 <createService+0x61c>)
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 80061e8:	18c9      	adds	r1, r1, r3
		DBG_PRINTINT(far_len);
 80061ea:	4b4f      	ldr	r3, [pc, #316]	; (8006328 <createService+0x620>)
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 80061ec:	b28d      	uxth	r5, r1
		DBG_PRINTINT(far_len);
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	002a      	movs	r2, r5
 80061f2:	4b45      	ldr	r3, [pc, #276]	; (8006308 <createService+0x600>)
 80061f4:	494d      	ldr	r1, [pc, #308]	; (800632c <createService+0x624>)
 80061f6:	f00e f88b 	bl	8014310 <__wrap_printf>
		updateSparseConfig(sparse_config_far,start_reg+1920,far_len);
 80061fa:	22f0      	movs	r2, #240	; 0xf0
 80061fc:	00d2      	lsls	r2, r2, #3
 80061fe:	4694      	mov	ip, r2
 8006200:	9b02      	ldr	r3, [sp, #8]
 8006202:	002a      	movs	r2, r5
 8006204:	4463      	add	r3, ip
 8006206:	b299      	uxth	r1, r3
 8006208:	4b3b      	ldr	r3, [pc, #236]	; (80062f8 <createService+0x5f0>)
 800620a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800620c:	e7ac      	b.n	8006168 <createService+0x460>
		ERR_PRINTLN("sparse service creation failed (too long)");
 800620e:	483b      	ldr	r0, [pc, #236]	; (80062fc <createService+0x5f4>)
 8006210:	f00e f87e 	bl	8014310 <__wrap_printf>
 8006214:	4846      	ldr	r0, [pc, #280]	; (8006330 <createService+0x628>)
 8006216:	f00e f87b 	bl	8014310 <__wrap_printf>
 800621a:	4a46      	ldr	r2, [pc, #280]	; (8006334 <createService+0x62c>)
 800621c:	e696      	b.n	8005f4c <createService+0x244>
		acc_service_sparse_get_metadata(sparse_handle, &sparse_metadata);
 800621e:	0021      	movs	r1, r4
 8006220:	3144      	adds	r1, #68	; 0x44
 8006222:	f7fa fd4a 	bl	8000cba <acc_service_sparse_get_metadata>
		if(!far_active){
 8006226:	0023      	movs	r3, r4
 8006228:	3358      	adds	r3, #88	; 0x58
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d105      	bne.n	800623c <createService+0x534>
			if(sparse_data_malloc() == -1){stopService();}
 8006230:	f7fb fe60 	bl	8001ef4 <sparse_data_malloc>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d101      	bne.n	800623c <createService+0x534>
 8006238:	f7ff fc96 	bl	8005b68 <stopService>
		Reg_store_sparse_metadata(sparse_metadata, NULL);
 800623c:	2300      	movs	r3, #0
 800623e:	9301      	str	r3, [sp, #4]
 8006240:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006246:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006248:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800624a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800624c:	f7ff fd18 	bl	8005c80 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata);
 8006250:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006256:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006258:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800625a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800625c:	f7fb fe76 	bl	8001f4c <printf_sparse_metadata>
	if(far_active){
 8006260:	0023      	movs	r3, r4
 8006262:	3358      	adds	r3, #88	; 0x58
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d100      	bne.n	800626c <createService+0x564>
 800626a:	e74b      	b.n	8006104 <createService+0x3fc>
	sparse_handle_far = acc_service_create(sparse_config_far);
 800626c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800626e:	f7fb fc33 	bl	8001ad8 <acc_service_create>
 8006272:	64a8      	str	r0, [r5, #72]	; 0x48
	if (sparse_handle_far == NULL){//handles error		
 8006274:	2800      	cmp	r0, #0
 8006276:	d108      	bne.n	800628a <createService+0x582>
		ERR_PRINTLN("sparse far service creation fail");
 8006278:	4820      	ldr	r0, [pc, #128]	; (80062fc <createService+0x5f4>)
 800627a:	f00e f849 	bl	8014310 <__wrap_printf>
 800627e:	482e      	ldr	r0, [pc, #184]	; (8006338 <createService+0x630>)
 8006280:	f00e f846 	bl	8014310 <__wrap_printf>
 8006284:	2297      	movs	r2, #151	; 0x97
 8006286:	0092      	lsls	r2, r2, #2
 8006288:	e77f      	b.n	800618a <createService+0x482>
		acc_service_sparse_get_metadata(sparse_handle_far, &sparse_metadata_far);
 800628a:	0021      	movs	r1, r4
 800628c:	315c      	adds	r1, #92	; 0x5c
 800628e:	f7fa fd14 	bl	8000cba <acc_service_sparse_get_metadata>
		if(sparse_data_malloc() == -1){stopService();}
 8006292:	f7fb fe2f 	bl	8001ef4 <sparse_data_malloc>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	d101      	bne.n	800629e <createService+0x596>
 800629a:	f7ff fc65 	bl	8005b68 <stopService>
		Reg_store_sparse_metadata(sparse_metadata, &sparse_metadata_far);
 800629e:	0023      	movs	r3, r4
 80062a0:	335c      	adds	r3, #92	; 0x5c
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80062aa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80062ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80062ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062b0:	f7ff fce6 	bl	8005c80 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata_far);
 80062b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80062b6:	345c      	adds	r4, #92	; 0x5c
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062bc:	f7fb fe46 	bl	8001f4c <printf_sparse_metadata>
 80062c0:	e720      	b.n	8006104 <createService+0x3fc>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 80062c2:	2080      	movs	r0, #128	; 0x80
 80062c4:	02c0      	lsls	r0, r0, #11
 80062c6:	e647      	b.n	8005f58 <createService+0x250>
 80062c8:	4d8ef3c2 	.word	0x4d8ef3c2
 80062cc:	2000010c 	.word	0x2000010c
 80062d0:	447a0000 	.word	0x447a0000
 80062d4:	0801bc5e 	.word	0x0801bc5e
 80062d8:	0801b299 	.word	0x0801b299
 80062dc:	0801b2a8 	.word	0x0801b2a8
 80062e0:	0801b2ce 	.word	0x0801b2ce
 80062e4:	0801b2e0 	.word	0x0801b2e0
 80062e8:	0801b2f5 	.word	0x0801b2f5
 80062ec:	00000762 	.word	0x00000762
 80062f0:	0801bc78 	.word	0x0801bc78
 80062f4:	0801bcb9 	.word	0x0801bcb9
 80062f8:	2000018c 	.word	0x2000018c
 80062fc:	0801b226 	.word	0x0801b226
 8006300:	0801bcee 	.word	0x0801bcee
 8006304:	0000024b 	.word	0x0000024b
 8006308:	0801b202 	.word	0x0801b202
 800630c:	00000ee2 	.word	0x00000ee2
 8006310:	0000023d 	.word	0x0000023d
 8006314:	0801bc8f 	.word	0x0801bc8f
 8006318:	0000023f 	.word	0x0000023f
 800631c:	00000781 	.word	0x00000781
 8006320:	fffff880 	.word	0xfffff880
 8006324:	0801bcb2 	.word	0x0801bcb2
 8006328:	00000242 	.word	0x00000242
 800632c:	0801bcaa 	.word	0x0801bcaa
 8006330:	0801bcc4 	.word	0x0801bcc4
 8006334:	00000245 	.word	0x00000245
 8006338:	0801bd0b 	.word	0x0801bd0b

0800633c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800633c:	2280      	movs	r2, #128	; 0x80
 800633e:	4b02      	ldr	r3, [pc, #8]	; (8006348 <SystemInit+0xc>)
 8006340:	0512      	lsls	r2, r2, #20
 8006342:	609a      	str	r2, [r3, #8]
#endif
}
 8006344:	4770      	bx	lr
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	e000ed00 	.word	0xe000ed00

0800634c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void)
{
 800634c:	b5f0      	push	{r4, r5, r6, r7, lr}
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800634e:	4c62      	ldr	r4, [pc, #392]	; (80064d8 <USART1_IRQHandler+0x18c>)
 8006350:	b085      	sub	sp, #20
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006356:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006358:	6898      	ldr	r0, [r3, #8]
  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == 0U)
 800635a:	0715      	lsls	r5, r2, #28
 800635c:	d10d      	bne.n	800637a <USART1_IRQHandler+0x2e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800635e:	2520      	movs	r5, #32
 8006360:	422a      	tst	r2, r5
 8006362:	d100      	bne.n	8006366 <USART1_IRQHandler+0x1a>
 8006364:	e088      	b.n	8006478 <USART1_IRQHandler+0x12c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006366:	4229      	tst	r1, r5
 8006368:	d102      	bne.n	8006370 <USART1_IRQHandler+0x24>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800636a:	00c5      	lsls	r5, r0, #3
 800636c:	d400      	bmi.n	8006370 <USART1_IRQHandler+0x24>
 800636e:	e083      	b.n	8006478 <USART1_IRQHandler+0x12c>
    {
      if (huart->RxISR != NULL)
 8006370:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
  {
    if (huart->TxISR != NULL)
    {
      huart->TxISR(huart);
 8006372:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8006374:	2b00      	cmp	r3, #0
 8006376:	d17a      	bne.n	800646e <USART1_IRQHandler+0x122>
 8006378:	e07a      	b.n	8006470 <USART1_IRQHandler+0x124>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800637a:	4e58      	ldr	r6, [pc, #352]	; (80064dc <USART1_IRQHandler+0x190>)
 800637c:	4006      	ands	r6, r0
 800637e:	9601      	str	r6, [sp, #4]
 8006380:	1e35      	subs	r5, r6, #0
 8006382:	d104      	bne.n	800638e <USART1_IRQHandler+0x42>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8006384:	3521      	adds	r5, #33	; 0x21
 8006386:	35ff      	adds	r5, #255	; 0xff
 8006388:	4229      	tst	r1, r5
 800638a:	d100      	bne.n	800638e <USART1_IRQHandler+0x42>
 800638c:	e074      	b.n	8006478 <USART1_IRQHandler+0x12c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800638e:	2501      	movs	r5, #1
 8006390:	422a      	tst	r2, r5
 8006392:	d007      	beq.n	80063a4 <USART1_IRQHandler+0x58>
 8006394:	05ce      	lsls	r6, r1, #23
 8006396:	d505      	bpl.n	80063a4 <USART1_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006398:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800639a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800639c:	3788      	adds	r7, #136	; 0x88
 800639e:	683e      	ldr	r6, [r7, #0]
 80063a0:	4335      	orrs	r5, r6
 80063a2:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063a4:	2502      	movs	r5, #2
 80063a6:	422a      	tst	r2, r5
 80063a8:	d00a      	beq.n	80063c0 <USART1_IRQHandler+0x74>
 80063aa:	07c6      	lsls	r6, r0, #31
 80063ac:	d508      	bpl.n	80063c0 <USART1_IRQHandler+0x74>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063ae:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063b0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063b2:	3788      	adds	r7, #136	; 0x88
 80063b4:	683d      	ldr	r5, [r7, #0]
 80063b6:	46ac      	mov	ip, r5
 80063b8:	2504      	movs	r5, #4
 80063ba:	4666      	mov	r6, ip
 80063bc:	4335      	orrs	r5, r6
 80063be:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063c0:	2504      	movs	r5, #4
 80063c2:	422a      	tst	r2, r5
 80063c4:	d00a      	beq.n	80063dc <USART1_IRQHandler+0x90>
 80063c6:	07c6      	lsls	r6, r0, #31
 80063c8:	d508      	bpl.n	80063dc <USART1_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063ca:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063cc:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063ce:	3788      	adds	r7, #136	; 0x88
 80063d0:	683d      	ldr	r5, [r7, #0]
 80063d2:	46ac      	mov	ip, r5
 80063d4:	2502      	movs	r5, #2
 80063d6:	4666      	mov	r6, ip
 80063d8:	4335      	orrs	r5, r6
 80063da:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063dc:	0715      	lsls	r5, r2, #28
 80063de:	d50b      	bpl.n	80063f8 <USART1_IRQHandler+0xac>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063e0:	068d      	lsls	r5, r1, #26
 80063e2:	d402      	bmi.n	80063ea <USART1_IRQHandler+0x9e>
 80063e4:	9d01      	ldr	r5, [sp, #4]
 80063e6:	2d00      	cmp	r5, #0
 80063e8:	d006      	beq.n	80063f8 <USART1_IRQHandler+0xac>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063ea:	2508      	movs	r5, #8
 80063ec:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063ee:	0023      	movs	r3, r4
 80063f0:	3388      	adds	r3, #136	; 0x88
 80063f2:	681e      	ldr	r6, [r3, #0]
 80063f4:	4335      	orrs	r5, r6
 80063f6:	601d      	str	r5, [r3, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063f8:	0023      	movs	r3, r4
 80063fa:	3388      	adds	r3, #136	; 0x88
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d036      	beq.n	8006470 <USART1_IRQHandler+0x124>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006402:	2320      	movs	r3, #32
 8006404:	421a      	tst	r2, r3
 8006406:	d008      	beq.n	800641a <USART1_IRQHandler+0xce>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006408:	4219      	tst	r1, r3
 800640a:	d101      	bne.n	8006410 <USART1_IRQHandler+0xc4>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800640c:	00c3      	lsls	r3, r0, #3
 800640e:	d504      	bpl.n	800641a <USART1_IRQHandler+0xce>
        if (huart->RxISR != NULL)
 8006410:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <USART1_IRQHandler+0xce>
          huart->RxISR(huart);
 8006416:	0020      	movs	r0, r4
 8006418:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800641a:	0021      	movs	r1, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800641c:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800641e:	3188      	adds	r1, #136	; 0x88
 8006420:	680a      	ldr	r2, [r1, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006422:	6898      	ldr	r0, [r3, #8]
 8006424:	0640      	lsls	r0, r0, #25
 8006426:	d402      	bmi.n	800642e <USART1_IRQHandler+0xe2>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006428:	2008      	movs	r0, #8
 800642a:	4002      	ands	r2, r0
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800642c:	d022      	beq.n	8006474 <USART1_IRQHandler+0x128>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	492b      	ldr	r1, [pc, #172]	; (80064e0 <USART1_IRQHandler+0x194>)
 8006432:	400a      	ands	r2, r1
 8006434:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	492a      	ldr	r1, [pc, #168]	; (80064e4 <USART1_IRQHandler+0x198>)
 800643a:	400a      	ands	r2, r1
 800643c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800643e:	0022      	movs	r2, r4
 8006440:	2120      	movs	r1, #32
 8006442:	3208      	adds	r2, #8
 8006444:	67d1      	str	r1, [r2, #124]	; 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006446:	2200      	movs	r2, #0
 8006448:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	1849      	adds	r1, r1, r1
 800644e:	420a      	tst	r2, r1
 8006450:	d00e      	beq.n	8006470 <USART1_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006452:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006454:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006456:	438a      	bics	r2, r1
 8006458:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800645a:	2800      	cmp	r0, #0
 800645c:	d008      	beq.n	8006470 <USART1_IRQHandler+0x124>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800645e:	4b22      	ldr	r3, [pc, #136]	; (80064e8 <USART1_IRQHandler+0x19c>)
 8006460:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006462:	f003 f9d9 	bl	8009818 <HAL_DMA_Abort_IT>
 8006466:	2800      	cmp	r0, #0
 8006468:	d002      	beq.n	8006470 <USART1_IRQHandler+0x124>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800646a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800646c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800646e:	4798      	blx	r3
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8006470:	b005      	add	sp, #20
 8006472:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006474:	600a      	str	r2, [r1, #0]
 8006476:	e7fb      	b.n	8006470 <USART1_IRQHandler+0x124>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006478:	2580      	movs	r5, #128	; 0x80
 800647a:	036d      	lsls	r5, r5, #13
 800647c:	422a      	tst	r2, r5
 800647e:	d003      	beq.n	8006488 <USART1_IRQHandler+0x13c>
 8006480:	0246      	lsls	r6, r0, #9
 8006482:	d501      	bpl.n	8006488 <USART1_IRQHandler+0x13c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006484:	621d      	str	r5, [r3, #32]
 8006486:	e7f3      	b.n	8006470 <USART1_IRQHandler+0x124>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006488:	2580      	movs	r5, #128	; 0x80
 800648a:	422a      	tst	r2, r5
 800648c:	d005      	beq.n	800649a <USART1_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800648e:	4229      	tst	r1, r5
 8006490:	d101      	bne.n	8006496 <USART1_IRQHandler+0x14a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006492:	0200      	lsls	r0, r0, #8
 8006494:	d501      	bpl.n	800649a <USART1_IRQHandler+0x14e>
    if (huart->TxISR != NULL)
 8006496:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006498:	e76b      	b.n	8006372 <USART1_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800649a:	2040      	movs	r0, #64	; 0x40
 800649c:	4202      	tst	r2, r0
 800649e:	d0e7      	beq.n	8006470 <USART1_IRQHandler+0x124>
 80064a0:	4201      	tst	r1, r0
 80064a2:	d0e5      	beq.n	8006470 <USART1_IRQHandler+0x124>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	4382      	bics	r2, r0
 80064a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064aa:	2220      	movs	r2, #32
 80064ac:	1d23      	adds	r3, r4, #4
 80064ae:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064b0:	2200      	movs	r2, #0
	if (queue_cmd_end == 2){
 80064b2:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <USART1_IRQHandler+0x1a0>)
 80064b4:	6722      	str	r2, [r4, #112]	; 0x70
 80064b6:	3370      	adds	r3, #112	; 0x70
 80064b8:	7819      	ldrb	r1, [r3, #0]
 80064ba:	2902      	cmp	r1, #2
 80064bc:	d102      	bne.n	80064c4 <USART1_IRQHandler+0x178>
		queue_cmd_end = 1;
 80064be:	3201      	adds	r2, #1
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	e7d5      	b.n	8006470 <USART1_IRQHandler+0x124>
	}else if(queue_cmd_end == 1){
 80064c4:	2901      	cmp	r1, #1
 80064c6:	d1d3      	bne.n	8006470 <USART1_IRQHandler+0x124>
		queue_cmd_end = 0;
 80064c8:	701a      	strb	r2, [r3, #0]
		uint8_t end = 0xCD;
 80064ca:	ab02      	add	r3, sp, #8
 80064cc:	1dd8      	adds	r0, r3, #7
 80064ce:	23cd      	movs	r3, #205	; 0xcd
 80064d0:	7003      	strb	r3, [r0, #0]
		HAL_UART_Transmit_IT(huart, &end, 1);
 80064d2:	f002 fccb 	bl	8008e6c <HAL_UART_Transmit_IT.constprop.119>
 80064d6:	e7cb      	b.n	8006470 <USART1_IRQHandler+0x124>
 80064d8:	200005a0 	.word	0x200005a0
 80064dc:	10000001 	.word	0x10000001
 80064e0:	fffffedf 	.word	0xfffffedf
 80064e4:	effffffe 	.word	0xeffffffe
 80064e8:	0800848d 	.word	0x0800848d
 80064ec:	2000018c 	.word	0x2000018c

080064f0 <I2C1_IRQHandler>:
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80064f0:	22e0      	movs	r2, #224	; 0xe0
 80064f2:	4824      	ldr	r0, [pc, #144]	; (8006584 <I2C1_IRQHandler+0x94>)
 80064f4:	00d2      	lsls	r2, r2, #3
 80064f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80064f8:	b570      	push	{r4, r5, r6, lr}
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80064fa:	6999      	ldr	r1, [r3, #24]
 80064fc:	4211      	tst	r1, r2
 80064fe:	d037      	beq.n	8006570 <I2C1_IRQHandler+0x80>
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006500:	699c      	ldr	r4, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006502:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006504:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006506:	05e5      	lsls	r5, r4, #23
 8006508:	d50a      	bpl.n	8006520 <I2C1_IRQHandler+0x30>
 800650a:	09d5      	lsrs	r5, r2, #7
 800650c:	420d      	tst	r5, r1
 800650e:	d007      	beq.n	8006520 <I2C1_IRQHandler+0x30>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006510:	0005      	movs	r5, r0
 8006512:	35b8      	adds	r5, #184	; 0xb8
 8006514:	682e      	ldr	r6, [r5, #0]
 8006516:	4331      	orrs	r1, r6
 8006518:	6029      	str	r1, [r5, #0]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800651a:	2180      	movs	r1, #128	; 0x80
 800651c:	0049      	lsls	r1, r1, #1
 800651e:	61d9      	str	r1, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006520:	2101      	movs	r1, #1
 8006522:	0565      	lsls	r5, r4, #21
 8006524:	d50b      	bpl.n	800653e <I2C1_IRQHandler+0x4e>
 8006526:	09d5      	lsrs	r5, r2, #7
 8006528:	420d      	tst	r5, r1
 800652a:	d008      	beq.n	800653e <I2C1_IRQHandler+0x4e>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800652c:	0005      	movs	r5, r0
 800652e:	35b8      	adds	r5, #184	; 0xb8
 8006530:	682e      	ldr	r6, [r5, #0]
 8006532:	3107      	adds	r1, #7
 8006534:	4331      	orrs	r1, r6
 8006536:	6029      	str	r1, [r5, #0]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006538:	2180      	movs	r1, #128	; 0x80
 800653a:	00c9      	lsls	r1, r1, #3
 800653c:	61d9      	str	r1, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800653e:	2101      	movs	r1, #1
 8006540:	05a4      	lsls	r4, r4, #22
 8006542:	d50b      	bpl.n	800655c <I2C1_IRQHandler+0x6c>
 8006544:	09d2      	lsrs	r2, r2, #7
 8006546:	420a      	tst	r2, r1
 8006548:	d008      	beq.n	800655c <I2C1_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800654a:	0001      	movs	r1, r0
 800654c:	2202      	movs	r2, #2
 800654e:	31b8      	adds	r1, #184	; 0xb8
 8006550:	680c      	ldr	r4, [r1, #0]
 8006552:	4322      	orrs	r2, r4
 8006554:	600a      	str	r2, [r1, #0]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006556:	2280      	movs	r2, #128	; 0x80
 8006558:	0092      	lsls	r2, r2, #2
 800655a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800655c:	0003      	movs	r3, r0
 800655e:	33b8      	adds	r3, #184	; 0xb8
 8006560:	6819      	ldr	r1, [r3, #0]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006562:	230b      	movs	r3, #11
 8006564:	4219      	tst	r1, r3
 8006566:	d002      	beq.n	800656e <I2C1_IRQHandler+0x7e>
  {
    I2C_ITError(hi2c, tmperror);
 8006568:	3074      	adds	r0, #116	; 0x74
 800656a:	f003 f993 	bl	8009894 <I2C_ITError.lto_priv.644>
}
 800656e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006570:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006572:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8006574:	0003      	movs	r3, r0
 8006576:	33a8      	adds	r3, #168	; 0xa8
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0f7      	beq.n	800656e <I2C1_IRQHandler+0x7e>
    hi2c->XferISR(hi2c, itflags, itsources);
 800657e:	3074      	adds	r0, #116	; 0x74
 8006580:	4798      	blx	r3
 8006582:	e7f4      	b.n	800656e <I2C1_IRQHandler+0x7e>
 8006584:	2000018c 	.word	0x2000018c

08006588 <DMA1_Channel2_3_IRQHandler>:
{
 8006588:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800658a:	4802      	ldr	r0, [pc, #8]	; (8006594 <DMA1_Channel2_3_IRQHandler+0xc>)
 800658c:	f003 f8f0 	bl	8009770 <HAL_DMA_IRQHandler>
}
 8006590:	bd10      	pop	{r4, pc}
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	2000053c 	.word	0x2000053c

08006598 <DMA1_Channel1_IRQHandler>:
{
 8006598:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800659a:	4802      	ldr	r0, [pc, #8]	; (80065a4 <DMA1_Channel1_IRQHandler+0xc>)
 800659c:	f003 f8e8 	bl	8009770 <HAL_DMA_IRQHandler>
}
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	200004e0 	.word	0x200004e0

080065a8 <EXTI4_15_IRQHandler>:
{
 80065a8:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80065aa:	2020      	movs	r0, #32
 80065ac:	f003 fb50 	bl	8009c50 <HAL_GPIO_EXTI_IRQHandler>
}
 80065b0:	bd10      	pop	{r4, pc}

080065b2 <EXTI2_3_IRQHandler>:
{
 80065b2:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80065b4:	2008      	movs	r0, #8
 80065b6:	f003 fb4b 	bl	8009c50 <HAL_GPIO_EXTI_IRQHandler>
}
 80065ba:	bd10      	pop	{r4, pc}

080065bc <RTC_TAMP_IRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80065bc:	4a15      	ldr	r2, [pc, #84]	; (8006614 <RTC_TAMP_IRQHandler+0x58>)
{
 80065be:	b510      	push	{r4, lr}
 80065c0:	6813      	ldr	r3, [r2, #0]
 80065c2:	6999      	ldr	r1, [r3, #24]
 80065c4:	04c9      	lsls	r1, r1, #19
 80065c6:	d509      	bpl.n	80065dc <RTC_TAMP_IRQHandler+0x20>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80065c8:	2001      	movs	r0, #1
 80065ca:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80065cc:	4201      	tst	r1, r0
 80065ce:	d005      	beq.n	80065dc <RTC_TAMP_IRQHandler+0x20>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80065d0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80065d2:	4301      	orrs	r1, r0
 80065d4:	65d9      	str	r1, [r3, #92]	; 0x5c
	rtc_alarm_triggered = true;
 80065d6:	4910      	ldr	r1, [pc, #64]	; (8006618 <RTC_TAMP_IRQHandler+0x5c>)
 80065d8:	3140      	adds	r1, #64	; 0x40
 80065da:	7008      	strb	r0, [r1, #0]
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80065dc:	6999      	ldr	r1, [r3, #24]
 80065de:	0489      	lsls	r1, r1, #18
 80065e0:	d506      	bpl.n	80065f0 <RTC_TAMP_IRQHandler+0x34>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80065e2:	2102      	movs	r1, #2
 80065e4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80065e6:	4208      	tst	r0, r1
 80065e8:	d002      	beq.n	80065f0 <RTC_TAMP_IRQHandler+0x34>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80065ea:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80065ec:	4301      	orrs	r1, r0
 80065ee:	65d9      	str	r1, [r3, #92]	; 0x5c
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80065f0:	0011      	movs	r1, r2
 80065f2:	2001      	movs	r0, #1
 80065f4:	3129      	adds	r1, #41	; 0x29
 80065f6:	7008      	strb	r0, [r1, #0]
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80065f8:	2104      	movs	r1, #4
 80065fa:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80065fc:	420c      	tst	r4, r1
 80065fe:	d004      	beq.n	800660a <RTC_TAMP_IRQHandler+0x4e>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006600:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8006602:	4321      	orrs	r1, r4
 8006604:	65d9      	str	r1, [r3, #92]	; 0x5c
	rtc_wakeup_triggered = true;
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <RTC_TAMP_IRQHandler+0x60>)
 8006608:	7018      	strb	r0, [r3, #0]
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800660a:	2301      	movs	r3, #1
 800660c:	3229      	adds	r2, #41	; 0x29
 800660e:	7013      	strb	r3, [r2, #0]
}
 8006610:	bd10      	pop	{r4, pc}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	200003b8 	.word	0x200003b8
 8006618:	2000020c 	.word	0x2000020c
 800661c:	20000484 	.word	0x20000484

08006620 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8006620:	4a02      	ldr	r2, [pc, #8]	; (800662c <SysTick_Handler+0xc>)
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	6013      	str	r3, [r2, #0]
}
 8006628:	4770      	bx	lr
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	200003e4 	.word	0x200003e4

08006630 <PendSV_Handler>:
 8006630:	4770      	bx	lr

08006632 <NMI_Handler>:
}
 8006632:	4770      	bx	lr

08006634 <SVC_Handler>:
 8006634:	4770      	bx	lr

08006636 <HardFault_Handler>:
{
 8006636:	e7fe      	b.n	8006636 <HardFault_Handler>

08006638 <start.lto_priv.291>:
 8006638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800663a:	6944      	ldr	r4, [r0, #20]
 800663c:	b095      	sub	sp, #84	; 0x54
 800663e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006640:	9004      	str	r0, [sp, #16]
 8006642:	9309      	str	r3, [sp, #36]	; 0x24
 8006644:	0023      	movs	r3, r4
 8006646:	3308      	adds	r3, #8
 8006648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800664a:	930a      	str	r3, [sp, #40]	; 0x28
 800664c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800664e:	930c      	str	r3, [sp, #48]	; 0x30
 8006650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006652:	2b00      	cmp	r3, #0
 8006654:	d004      	beq.n	8006660 <start.lto_priv.291+0x28>
 8006656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <start.lto_priv.291+0x28>
 800665c:	2300      	movs	r3, #0
 800665e:	6423      	str	r3, [r4, #64]	; 0x40
 8006660:	9b04      	ldr	r3, [sp, #16]
 8006662:	ad11      	add	r5, sp, #68	; 0x44
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2600      	movs	r6, #0
 8006668:	9307      	str	r3, [sp, #28]
 800666a:	680b      	ldr	r3, [r1, #0]
 800666c:	684f      	ldr	r7, [r1, #4]
 800666e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006670:	2315      	movs	r3, #21
 8006672:	702b      	strb	r3, [r5, #0]
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	0028      	movs	r0, r5
 8006678:	9312      	str	r3, [sp, #72]	; 0x48
 800667a:	2307      	movs	r3, #7
 800667c:	22b4      	movs	r2, #180	; 0xb4
 800667e:	0021      	movs	r1, r4
 8006680:	9313      	str	r3, [sp, #76]	; 0x4c
 8006682:	f004 ff07 	bl	800b494 <acc_probes_execute>
 8006686:	9500      	str	r5, [sp, #0]
 8006688:	ab10      	add	r3, sp, #64	; 0x40
 800668a:	003a      	movs	r2, r7
 800668c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800668e:	9807      	ldr	r0, [sp, #28]
 8006690:	9610      	str	r6, [sp, #64]	; 0x40
 8006692:	9611      	str	r6, [sp, #68]	; 0x44
 8006694:	f004 fe46 	bl	800b324 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 8006698:	9603      	str	r6, [sp, #12]
 800669a:	0005      	movs	r5, r0
 800669c:	42b0      	cmp	r0, r6
 800669e:	d10d      	bne.n	80066bc <start.lto_priv.291+0x84>
 80066a0:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <start.lto_priv.291+0x78>)
 80066a2:	4a04      	ldr	r2, [pc, #16]	; (80066b4 <start.lto_priv.291+0x7c>)
 80066a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a6:	4904      	ldr	r1, [pc, #16]	; (80066b8 <start.lto_priv.291+0x80>)
 80066a8:	4798      	blx	r3
 80066aa:	0028      	movs	r0, r5
 80066ac:	b015      	add	sp, #84	; 0x54
 80066ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b0:	200003e8 	.word	0x200003e8
 80066b4:	0801bd2c 	.word	0x0801bd2c
 80066b8:	0801b8cc 	.word	0x0801b8cc
 80066bc:	9a03      	ldr	r2, [sp, #12]
 80066be:	4bf9      	ldr	r3, [pc, #996]	; (8006aa4 <start.lto_priv.291+0x46c>)
 80066c0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80066c6:	9206      	str	r2, [sp, #24]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d900      	bls.n	80066ce <start.lto_priv.291+0x96>
 80066cc:	9306      	str	r3, [sp, #24]
 80066ce:	9b03      	ldr	r3, [sp, #12]
 80066d0:	0039      	movs	r1, r7
 80066d2:	085b      	lsrs	r3, r3, #1
 80066d4:	930d      	str	r3, [sp, #52]	; 0x34
 80066d6:	9b06      	ldr	r3, [sp, #24]
 80066d8:	085a      	lsrs	r2, r3, #1
 80066da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066dc:	0098      	lsls	r0, r3, #2
 80066de:	4bf2      	ldr	r3, [pc, #968]	; (8006aa8 <start.lto_priv.291+0x470>)
 80066e0:	18c0      	adds	r0, r0, r3
 80066e2:	f004 f959 	bl	800a998 <acc_confprogram_copy>
 80066e6:	466b      	mov	r3, sp
 80066e8:	899e      	ldrh	r6, [r3, #12]
 80066ea:	8b1b      	ldrh	r3, [r3, #24]
 80066ec:	4def      	ldr	r5, [pc, #956]	; (8006aac <start.lto_priv.291+0x474>)
 80066ee:	9302      	str	r3, [sp, #8]
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	9a02      	ldr	r2, [sp, #8]
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	23d2      	movs	r3, #210	; 0xd2
 80066f8:	0031      	movs	r1, r6
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	0038      	movs	r0, r7
 80066fe:	002b      	movs	r3, r5
 8006700:	f004 f992 	bl	800aa28 <acc_confprogram_patch_offset>
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	9a02      	ldr	r2, [sp, #8]
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	23d0      	movs	r3, #208	; 0xd0
 800670c:	0031      	movs	r1, r6
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	0038      	movs	r0, r7
 8006712:	002b      	movs	r3, r5
 8006714:	f004 f988 	bl	800aa28 <acc_confprogram_patch_offset>
 8006718:	68a3      	ldr	r3, [r4, #8]
 800671a:	9a02      	ldr	r2, [sp, #8]
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	23d1      	movs	r3, #209	; 0xd1
 8006720:	0031      	movs	r1, r6
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	0038      	movs	r0, r7
 8006726:	002b      	movs	r3, r5
 8006728:	f004 f97e 	bl	800aa28 <acc_confprogram_patch_offset>
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	9a02      	ldr	r2, [sp, #8]
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	23ce      	movs	r3, #206	; 0xce
 8006734:	0031      	movs	r1, r6
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	0038      	movs	r0, r7
 800673a:	002b      	movs	r3, r5
 800673c:	f004 f974 	bl	800aa28 <acc_confprogram_patch_offset>
 8006740:	6923      	ldr	r3, [r4, #16]
 8006742:	9a02      	ldr	r2, [sp, #8]
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	2365      	movs	r3, #101	; 0x65
 8006748:	0031      	movs	r1, r6
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	0038      	movs	r0, r7
 800674e:	002b      	movs	r3, r5
 8006750:	f004 f96a 	bl	800aa28 <acc_confprogram_patch_offset>
 8006754:	6963      	ldr	r3, [r4, #20]
 8006756:	9a02      	ldr	r2, [sp, #8]
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	23f0      	movs	r3, #240	; 0xf0
 800675c:	0031      	movs	r1, r6
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	0038      	movs	r0, r7
 8006762:	002b      	movs	r3, r5
 8006764:	f004 f960 	bl	800aa28 <acc_confprogram_patch_offset>
 8006768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800676a:	9a02      	ldr	r2, [sp, #8]
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	23e8      	movs	r3, #232	; 0xe8
 8006770:	0031      	movs	r1, r6
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	0038      	movs	r0, r7
 8006776:	002b      	movs	r3, r5
 8006778:	f004 f956 	bl	800aa28 <acc_confprogram_patch_offset>
 800677c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800677e:	9a02      	ldr	r2, [sp, #8]
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	23fc      	movs	r3, #252	; 0xfc
 8006784:	0031      	movs	r1, r6
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	0038      	movs	r0, r7
 800678a:	002b      	movs	r3, r5
 800678c:	f004 f94c 	bl	800aa28 <acc_confprogram_patch_offset>
 8006790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006792:	9a02      	ldr	r2, [sp, #8]
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	23e0      	movs	r3, #224	; 0xe0
 8006798:	0031      	movs	r1, r6
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	0038      	movs	r0, r7
 800679e:	002b      	movs	r3, r5
 80067a0:	f004 f942 	bl	800aa28 <acc_confprogram_patch_offset>
 80067a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067a6:	9a02      	ldr	r2, [sp, #8]
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	23e1      	movs	r3, #225	; 0xe1
 80067ac:	0031      	movs	r1, r6
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	0038      	movs	r0, r7
 80067b2:	002b      	movs	r3, r5
 80067b4:	f004 f938 	bl	800aa28 <acc_confprogram_patch_offset>
 80067b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067ba:	9a02      	ldr	r2, [sp, #8]
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	2380      	movs	r3, #128	; 0x80
 80067c0:	0031      	movs	r1, r6
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	0038      	movs	r0, r7
 80067c6:	002b      	movs	r3, r5
 80067c8:	f004 f92e 	bl	800aa28 <acc_confprogram_patch_offset>
 80067cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067ce:	9a02      	ldr	r2, [sp, #8]
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	2381      	movs	r3, #129	; 0x81
 80067d4:	0031      	movs	r1, r6
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	0038      	movs	r0, r7
 80067da:	002b      	movs	r3, r5
 80067dc:	f004 f924 	bl	800aa28 <acc_confprogram_patch_offset>
 80067e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80067e2:	9a02      	ldr	r2, [sp, #8]
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	237f      	movs	r3, #127	; 0x7f
 80067e8:	0031      	movs	r1, r6
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	0038      	movs	r0, r7
 80067ee:	002b      	movs	r3, r5
 80067f0:	f004 f91a 	bl	800aa28 <acc_confprogram_patch_offset>
 80067f4:	2300      	movs	r3, #0
 80067f6:	9a02      	ldr	r2, [sp, #8]
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	0031      	movs	r1, r6
 80067fe:	002b      	movs	r3, r5
 8006800:	0038      	movs	r0, r7
 8006802:	f004 f911 	bl	800aa28 <acc_confprogram_patch_offset>
 8006806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006808:	9a02      	ldr	r2, [sp, #8]
 800680a:	9301      	str	r3, [sp, #4]
 800680c:	23ef      	movs	r3, #239	; 0xef
 800680e:	0031      	movs	r1, r6
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	0038      	movs	r0, r7
 8006814:	002b      	movs	r3, r5
 8006816:	f004 f907 	bl	800aa28 <acc_confprogram_patch_offset>
 800681a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800681c:	9a02      	ldr	r2, [sp, #8]
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	23d6      	movs	r3, #214	; 0xd6
 8006822:	0031      	movs	r1, r6
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	0038      	movs	r0, r7
 8006828:	002b      	movs	r3, r5
 800682a:	f004 f8fd 	bl	800aa28 <acc_confprogram_patch_offset>
 800682e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006830:	9a02      	ldr	r2, [sp, #8]
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	2378      	movs	r3, #120	; 0x78
 8006836:	0031      	movs	r1, r6
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	0038      	movs	r0, r7
 800683c:	002b      	movs	r3, r5
 800683e:	f004 f8f3 	bl	800aa28 <acc_confprogram_patch_offset>
 8006842:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006844:	2b00      	cmp	r3, #0
 8006846:	d06d      	beq.n	8006924 <start.lto_priv.291+0x2ec>
 8006848:	2301      	movs	r3, #1
 800684a:	9301      	str	r3, [sp, #4]
 800684c:	330e      	adds	r3, #14
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	9a02      	ldr	r2, [sp, #8]
 8006852:	002b      	movs	r3, r5
 8006854:	0031      	movs	r1, r6
 8006856:	0038      	movs	r0, r7
 8006858:	f004 f8e6 	bl	800aa28 <acc_confprogram_patch_offset>
 800685c:	4b94      	ldr	r3, [pc, #592]	; (8006ab0 <start.lto_priv.291+0x478>)
 800685e:	9a02      	ldr	r2, [sp, #8]
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	2311      	movs	r3, #17
 8006864:	0031      	movs	r1, r6
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	0038      	movs	r0, r7
 800686a:	002b      	movs	r3, r5
 800686c:	f004 f8dc 	bl	800aa28 <acc_confprogram_patch_offset>
 8006870:	2307      	movs	r3, #7
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	330c      	adds	r3, #12
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	9a02      	ldr	r2, [sp, #8]
 800687a:	002b      	movs	r3, r5
 800687c:	0031      	movs	r1, r6
 800687e:	0038      	movs	r0, r7
 8006880:	f004 f8d2 	bl	800aa28 <acc_confprogram_patch_offset>
 8006884:	2310      	movs	r3, #16
 8006886:	4a8a      	ldr	r2, [pc, #552]	; (8006ab0 <start.lto_priv.291+0x478>)
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	9201      	str	r2, [sp, #4]
 800688c:	002b      	movs	r3, r5
 800688e:	9a02      	ldr	r2, [sp, #8]
 8006890:	0031      	movs	r1, r6
 8006892:	0038      	movs	r0, r7
 8006894:	f004 f8c8 	bl	800aa28 <acc_confprogram_patch_offset>
 8006898:	2200      	movs	r2, #0
 800689a:	2312      	movs	r3, #18
 800689c:	9201      	str	r2, [sp, #4]
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	9a02      	ldr	r2, [sp, #8]
 80068a2:	002b      	movs	r3, r5
 80068a4:	0031      	movs	r1, r6
 80068a6:	0038      	movs	r0, r7
 80068a8:	f004 f8be 	bl	800aa28 <acc_confprogram_patch_offset>
 80068ac:	4b81      	ldr	r3, [pc, #516]	; (8006ab4 <start.lto_priv.291+0x47c>)
 80068ae:	9a02      	ldr	r2, [sp, #8]
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	2314      	movs	r3, #20
 80068b4:	0031      	movs	r1, r6
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	0038      	movs	r0, r7
 80068ba:	002b      	movs	r3, r5
 80068bc:	f004 f8b4 	bl	800aa28 <acc_confprogram_patch_offset>
 80068c0:	2307      	movs	r3, #7
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	330e      	adds	r3, #14
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	9a02      	ldr	r2, [sp, #8]
 80068ca:	002b      	movs	r3, r5
 80068cc:	0031      	movs	r1, r6
 80068ce:	0038      	movs	r0, r7
 80068d0:	f004 f8aa 	bl	800aa28 <acc_confprogram_patch_offset>
 80068d4:	4b78      	ldr	r3, [pc, #480]	; (8006ab8 <start.lto_priv.291+0x480>)
 80068d6:	9a02      	ldr	r2, [sp, #8]
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	230d      	movs	r3, #13
 80068dc:	0031      	movs	r1, r6
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	0038      	movs	r0, r7
 80068e2:	002b      	movs	r3, r5
 80068e4:	f004 f8a0 	bl	800aa28 <acc_confprogram_patch_offset>
 80068e8:	2307      	movs	r3, #7
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	18db      	adds	r3, r3, r3
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	9a02      	ldr	r2, [sp, #8]
 80068f2:	002b      	movs	r3, r5
 80068f4:	0031      	movs	r1, r6
 80068f6:	0038      	movs	r0, r7
 80068f8:	f004 f896 	bl	800aa28 <acc_confprogram_patch_offset>
 80068fc:	4b6f      	ldr	r3, [pc, #444]	; (8006abc <start.lto_priv.291+0x484>)
 80068fe:	9a02      	ldr	r2, [sp, #8]
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	2316      	movs	r3, #22
 8006904:	0031      	movs	r1, r6
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	0038      	movs	r0, r7
 800690a:	002b      	movs	r3, r5
 800690c:	f004 f88c 	bl	800aa28 <acc_confprogram_patch_offset>
 8006910:	2307      	movs	r3, #7
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	3310      	adds	r3, #16
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	9a02      	ldr	r2, [sp, #8]
 800691a:	002b      	movs	r3, r5
 800691c:	0031      	movs	r1, r6
 800691e:	0038      	movs	r0, r7
 8006920:	f004 f882 	bl	800aa28 <acc_confprogram_patch_offset>
 8006924:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006926:	4d61      	ldr	r5, [pc, #388]	; (8006aac <start.lto_priv.291+0x474>)
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	2386      	movs	r3, #134	; 0x86
 800692c:	9a02      	ldr	r2, [sp, #8]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	0031      	movs	r1, r6
 8006932:	002b      	movs	r3, r5
 8006934:	0038      	movs	r0, r7
 8006936:	f004 f877 	bl	800aa28 <acc_confprogram_patch_offset>
 800693a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800693c:	9a02      	ldr	r2, [sp, #8]
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	23d3      	movs	r3, #211	; 0xd3
 8006942:	0031      	movs	r1, r6
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	0038      	movs	r0, r7
 8006948:	002b      	movs	r3, r5
 800694a:	f004 f86d 	bl	800aa28 <acc_confprogram_patch_offset>
 800694e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006950:	9a02      	ldr	r2, [sp, #8]
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	23f3      	movs	r3, #243	; 0xf3
 8006956:	0031      	movs	r1, r6
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	0038      	movs	r0, r7
 800695c:	002b      	movs	r3, r5
 800695e:	f004 f863 	bl	800aa28 <acc_confprogram_patch_offset>
 8006962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006964:	9a02      	ldr	r2, [sp, #8]
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	2382      	movs	r3, #130	; 0x82
 800696a:	0031      	movs	r1, r6
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	0038      	movs	r0, r7
 8006970:	002b      	movs	r3, r5
 8006972:	f004 f859 	bl	800aa28 <acc_confprogram_patch_offset>
 8006976:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006978:	b29a      	uxth	r2, r3
 800697a:	9208      	str	r2, [sp, #32]
 800697c:	2200      	movs	r2, #0
 800697e:	9205      	str	r2, [sp, #20]
 8006980:	b29a      	uxth	r2, r3
 8006982:	2a08      	cmp	r2, #8
 8006984:	d914      	bls.n	80069b0 <start.lto_priv.291+0x378>
 8006986:	0013      	movs	r3, r2
 8006988:	22ff      	movs	r2, #255	; 0xff
 800698a:	0011      	movs	r1, r2
 800698c:	3b08      	subs	r3, #8
 800698e:	4099      	lsls	r1, r3
 8006990:	000b      	movs	r3, r1
 8006992:	4393      	bics	r3, r2
 8006994:	b29b      	uxth	r3, r3
 8006996:	9305      	str	r3, [sp, #20]
 8006998:	2302      	movs	r3, #2
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	33e0      	adds	r3, #224	; 0xe0
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	9a02      	ldr	r2, [sp, #8]
 80069a2:	002b      	movs	r3, r5
 80069a4:	0031      	movs	r1, r6
 80069a6:	0038      	movs	r0, r7
 80069a8:	f004 f83e 	bl	800aa28 <acc_confprogram_patch_offset>
 80069ac:	2308      	movs	r3, #8
 80069ae:	9308      	str	r3, [sp, #32]
 80069b0:	9b08      	ldr	r3, [sp, #32]
 80069b2:	4d3e      	ldr	r5, [pc, #248]	; (8006aac <start.lto_priv.291+0x474>)
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	23e9      	movs	r3, #233	; 0xe9
 80069b8:	9a02      	ldr	r2, [sp, #8]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	0031      	movs	r1, r6
 80069be:	002b      	movs	r3, r5
 80069c0:	0038      	movs	r0, r7
 80069c2:	f004 f831 	bl	800aa28 <acc_confprogram_patch_offset>
 80069c6:	9b08      	ldr	r3, [sp, #32]
 80069c8:	9a02      	ldr	r2, [sp, #8]
 80069ca:	9301      	str	r3, [sp, #4]
 80069cc:	23d9      	movs	r3, #217	; 0xd9
 80069ce:	0031      	movs	r1, r6
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	0038      	movs	r0, r7
 80069d4:	002b      	movs	r3, r5
 80069d6:	f004 f827 	bl	800aa28 <acc_confprogram_patch_offset>
 80069da:	2380      	movs	r3, #128	; 0x80
 80069dc:	9a05      	ldr	r2, [sp, #20]
 80069de:	0031      	movs	r1, r6
 80069e0:	4313      	orrs	r3, r2
 80069e2:	930e      	str	r3, [sp, #56]	; 0x38
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	23eb      	movs	r3, #235	; 0xeb
 80069e8:	9a02      	ldr	r2, [sp, #8]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	0038      	movs	r0, r7
 80069ee:	002b      	movs	r3, r5
 80069f0:	f004 f81a 	bl	800aa28 <acc_confprogram_patch_offset>
 80069f4:	23c0      	movs	r3, #192	; 0xc0
 80069f6:	9a05      	ldr	r2, [sp, #20]
 80069f8:	0031      	movs	r1, r6
 80069fa:	431a      	orrs	r2, r3
 80069fc:	23ed      	movs	r3, #237	; 0xed
 80069fe:	920f      	str	r2, [sp, #60]	; 0x3c
 8006a00:	9201      	str	r2, [sp, #4]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	9a02      	ldr	r2, [sp, #8]
 8006a06:	002b      	movs	r3, r5
 8006a08:	0038      	movs	r0, r7
 8006a0a:	f004 f80d 	bl	800aa28 <acc_confprogram_patch_offset>
 8006a0e:	23ff      	movs	r3, #255	; 0xff
 8006a10:	9a05      	ldr	r2, [sp, #20]
 8006a12:	0031      	movs	r1, r6
 8006a14:	431a      	orrs	r2, r3
 8006a16:	23ec      	movs	r3, #236	; 0xec
 8006a18:	9208      	str	r2, [sp, #32]
 8006a1a:	9201      	str	r2, [sp, #4]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	9a02      	ldr	r2, [sp, #8]
 8006a20:	002b      	movs	r3, r5
 8006a22:	0038      	movs	r0, r7
 8006a24:	f004 f800 	bl	800aa28 <acc_confprogram_patch_offset>
 8006a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a2a:	9a02      	ldr	r2, [sp, #8]
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	23db      	movs	r3, #219	; 0xdb
 8006a30:	0031      	movs	r1, r6
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	0038      	movs	r0, r7
 8006a36:	002b      	movs	r3, r5
 8006a38:	f003 fff6 	bl	800aa28 <acc_confprogram_patch_offset>
 8006a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a3e:	9a02      	ldr	r2, [sp, #8]
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	23dd      	movs	r3, #221	; 0xdd
 8006a44:	0031      	movs	r1, r6
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	0038      	movs	r0, r7
 8006a4a:	002b      	movs	r3, r5
 8006a4c:	f003 ffec 	bl	800aa28 <acc_confprogram_patch_offset>
 8006a50:	9b08      	ldr	r3, [sp, #32]
 8006a52:	9a02      	ldr	r2, [sp, #8]
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	23dc      	movs	r3, #220	; 0xdc
 8006a58:	0031      	movs	r1, r6
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	0038      	movs	r0, r7
 8006a5e:	002b      	movs	r3, r5
 8006a60:	f003 ffe2 	bl	800aa28 <acc_confprogram_patch_offset>
 8006a64:	22f0      	movs	r2, #240	; 0xf0
 8006a66:	9b05      	ldr	r3, [sp, #20]
 8006a68:	0031      	movs	r1, r6
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	9305      	str	r3, [sp, #20]
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	23cd      	movs	r3, #205	; 0xcd
 8006a72:	9a02      	ldr	r2, [sp, #8]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	0038      	movs	r0, r7
 8006a78:	002b      	movs	r3, r5
 8006a7a:	f003 ffd5 	bl	800aa28 <acc_confprogram_patch_offset>
 8006a7e:	9b05      	ldr	r3, [sp, #20]
 8006a80:	9a02      	ldr	r2, [sp, #8]
 8006a82:	9301      	str	r3, [sp, #4]
 8006a84:	2385      	movs	r3, #133	; 0x85
 8006a86:	0031      	movs	r1, r6
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	0038      	movs	r0, r7
 8006a8c:	002b      	movs	r3, r5
 8006a8e:	f003 ffcb 	bl	800aa28 <acc_confprogram_patch_offset>
 8006a92:	9b08      	ldr	r3, [sp, #32]
 8006a94:	9a02      	ldr	r2, [sp, #8]
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	2321      	movs	r3, #33	; 0x21
 8006a9a:	0031      	movs	r1, r6
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	0038      	movs	r0, r7
 8006aa0:	002b      	movs	r3, r5
 8006aa2:	e00d      	b.n	8006ac0 <start.lto_priv.291+0x488>
 8006aa4:	0000076a 	.word	0x0000076a
 8006aa8:	08017088 	.word	0x08017088
 8006aac:	08015b48 	.word	0x08015b48
 8006ab0:	0000ff80 	.word	0x0000ff80
 8006ab4:	0000ffc0 	.word	0x0000ffc0
 8006ab8:	0000fff0 	.word	0x0000fff0
 8006abc:	0000ffff 	.word	0x0000ffff
 8006ac0:	f003 ffb2 	bl	800aa28 <acc_confprogram_patch_offset>
 8006ac4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006ac6:	9a02      	ldr	r2, [sp, #8]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	2374      	movs	r3, #116	; 0x74
 8006ace:	0031      	movs	r1, r6
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	0038      	movs	r0, r7
 8006ad4:	002b      	movs	r3, r5
 8006ad6:	f003 ffa7 	bl	800aa28 <acc_confprogram_patch_offset>
 8006ada:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006adc:	9a02      	ldr	r2, [sp, #8]
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	2305      	movs	r3, #5
 8006ae2:	0031      	movs	r1, r6
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	0038      	movs	r0, r7
 8006ae8:	002b      	movs	r3, r5
 8006aea:	f003 ff9d 	bl	800aa28 <acc_confprogram_patch_offset>
 8006aee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006af0:	9a02      	ldr	r2, [sp, #8]
 8006af2:	015b      	lsls	r3, r3, #5
 8006af4:	3b03      	subs	r3, #3
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	2363      	movs	r3, #99	; 0x63
 8006afa:	0031      	movs	r1, r6
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	0038      	movs	r0, r7
 8006b00:	002b      	movs	r3, r5
 8006b02:	f003 ff91 	bl	800aa28 <acc_confprogram_patch_offset>
 8006b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b08:	9a02      	ldr	r2, [sp, #8]
 8006b0a:	015b      	lsls	r3, r3, #5
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	3b03      	subs	r3, #3
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	2364      	movs	r3, #100	; 0x64
 8006b14:	0031      	movs	r1, r6
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	0038      	movs	r0, r7
 8006b1a:	002b      	movs	r3, r5
 8006b1c:	f003 ff84 	bl	800aa28 <acc_confprogram_patch_offset>
 8006b20:	0023      	movs	r3, r4
 8006b22:	3390      	adds	r3, #144	; 0x90
 8006b24:	9305      	str	r3, [sp, #20]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	9a02      	ldr	r2, [sp, #8]
 8006b2a:	9308      	str	r3, [sp, #32]
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	23de      	movs	r3, #222	; 0xde
 8006b30:	0031      	movs	r1, r6
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	0038      	movs	r0, r7
 8006b36:	002b      	movs	r3, r5
 8006b38:	f003 ff76 	bl	800aa28 <acc_confprogram_patch_offset>
 8006b3c:	0023      	movs	r3, r4
 8006b3e:	338c      	adds	r3, #140	; 0x8c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	9a02      	ldr	r2, [sp, #8]
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	23ee      	movs	r3, #238	; 0xee
 8006b48:	0031      	movs	r1, r6
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	0038      	movs	r0, r7
 8006b4e:	002b      	movs	r3, r5
 8006b50:	f003 ff6a 	bl	800aa28 <acc_confprogram_patch_offset>
 8006b54:	9b05      	ldr	r3, [sp, #20]
 8006b56:	9a02      	ldr	r2, [sp, #8]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	0031      	movs	r1, r6
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	237e      	movs	r3, #126	; 0x7e
 8006b60:	0038      	movs	r0, r7
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	002b      	movs	r3, r5
 8006b66:	f003 ff5f 	bl	800aa28 <acc_confprogram_patch_offset>
 8006b6a:	0023      	movs	r3, r4
 8006b6c:	3394      	adds	r3, #148	; 0x94
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	9a02      	ldr	r2, [sp, #8]
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	23e4      	movs	r3, #228	; 0xe4
 8006b76:	0031      	movs	r1, r6
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	0038      	movs	r0, r7
 8006b7c:	002b      	movs	r3, r5
 8006b7e:	f003 ff53 	bl	800aa28 <acc_confprogram_patch_offset>
 8006b82:	0023      	movs	r3, r4
 8006b84:	3398      	adds	r3, #152	; 0x98
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	9a02      	ldr	r2, [sp, #8]
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	237c      	movs	r3, #124	; 0x7c
 8006b8e:	0031      	movs	r1, r6
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	0038      	movs	r0, r7
 8006b94:	002b      	movs	r3, r5
 8006b96:	f003 ff47 	bl	800aa28 <acc_confprogram_patch_offset>
 8006b9a:	0023      	movs	r3, r4
 8006b9c:	339c      	adds	r3, #156	; 0x9c
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	9a02      	ldr	r2, [sp, #8]
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	23c9      	movs	r3, #201	; 0xc9
 8006ba6:	0031      	movs	r1, r6
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	0038      	movs	r0, r7
 8006bac:	002b      	movs	r3, r5
 8006bae:	f003 ff3b 	bl	800aa28 <acc_confprogram_patch_offset>
 8006bb2:	0023      	movs	r3, r4
 8006bb4:	33a0      	adds	r3, #160	; 0xa0
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	9a02      	ldr	r2, [sp, #8]
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	2384      	movs	r3, #132	; 0x84
 8006bbe:	0031      	movs	r1, r6
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	0038      	movs	r0, r7
 8006bc4:	002b      	movs	r3, r5
 8006bc6:	f003 ff2f 	bl	800aa28 <acc_confprogram_patch_offset>
 8006bca:	0023      	movs	r3, r4
 8006bcc:	33a4      	adds	r3, #164	; 0xa4
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	9a02      	ldr	r2, [sp, #8]
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	237b      	movs	r3, #123	; 0x7b
 8006bd6:	0031      	movs	r1, r6
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	0038      	movs	r0, r7
 8006bdc:	002b      	movs	r3, r5
 8006bde:	f003 ff23 	bl	800aa28 <acc_confprogram_patch_offset>
 8006be2:	0023      	movs	r3, r4
 8006be4:	33a8      	adds	r3, #168	; 0xa8
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	9a02      	ldr	r2, [sp, #8]
 8006bea:	9301      	str	r3, [sp, #4]
 8006bec:	23c7      	movs	r3, #199	; 0xc7
 8006bee:	0031      	movs	r1, r6
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	0038      	movs	r0, r7
 8006bf4:	002b      	movs	r3, r5
 8006bf6:	f003 ff17 	bl	800aa28 <acc_confprogram_patch_offset>
 8006bfa:	0023      	movs	r3, r4
 8006bfc:	33ac      	adds	r3, #172	; 0xac
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	9a02      	ldr	r2, [sp, #8]
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	2383      	movs	r3, #131	; 0x83
 8006c06:	0031      	movs	r1, r6
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	0038      	movs	r0, r7
 8006c0c:	002b      	movs	r3, r5
 8006c0e:	f003 ff0b 	bl	800aa28 <acc_confprogram_patch_offset>
 8006c12:	0023      	movs	r3, r4
 8006c14:	33b0      	adds	r3, #176	; 0xb0
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	9a02      	ldr	r2, [sp, #8]
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	23c8      	movs	r3, #200	; 0xc8
 8006c1e:	0031      	movs	r1, r6
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	0038      	movs	r0, r7
 8006c24:	002b      	movs	r3, r5
 8006c26:	f003 feff 	bl	800aa28 <acc_confprogram_patch_offset>
 8006c2a:	0023      	movs	r3, r4
 8006c2c:	3370      	adds	r3, #112	; 0x70
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	9305      	str	r3, [sp, #20]
 8006c32:	9a05      	ldr	r2, [sp, #20]
 8006c34:	23d7      	movs	r3, #215	; 0xd7
 8006c36:	2a00      	cmp	r2, #0
 8006c38:	d179      	bne.n	8006d2e <start.lto_priv.291+0x6f6>
 8006c3a:	3201      	adds	r2, #1
 8006c3c:	9201      	str	r2, [sp, #4]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	9a02      	ldr	r2, [sp, #8]
 8006c42:	002b      	movs	r3, r5
 8006c44:	0031      	movs	r1, r6
 8006c46:	0038      	movs	r0, r7
 8006c48:	f003 feee 	bl	800aa28 <acc_confprogram_patch_offset>
 8006c4c:	9b05      	ldr	r3, [sp, #20]
 8006c4e:	9a02      	ldr	r2, [sp, #8]
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	23d8      	movs	r3, #216	; 0xd8
 8006c54:	0031      	movs	r1, r6
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	0038      	movs	r0, r7
 8006c5a:	002b      	movs	r3, r5
 8006c5c:	f003 fee4 	bl	800aa28 <acc_confprogram_patch_offset>
 8006c60:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006c62:	9a02      	ldr	r2, [sp, #8]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	23e3      	movs	r3, #227	; 0xe3
 8006c6a:	0031      	movs	r1, r6
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	0038      	movs	r0, r7
 8006c70:	002b      	movs	r3, r5
 8006c72:	f003 fed9 	bl	800aa28 <acc_confprogram_patch_offset>
 8006c76:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006c78:	9a02      	ldr	r2, [sp, #8]
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	23d4      	movs	r3, #212	; 0xd4
 8006c7e:	0031      	movs	r1, r6
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	0038      	movs	r0, r7
 8006c84:	4b5f      	ldr	r3, [pc, #380]	; (8006e04 <start.lto_priv.291+0x7cc>)
 8006c86:	f003 fecf 	bl	800aa28 <acc_confprogram_patch_offset>
 8006c8a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006c8c:	9a02      	ldr	r2, [sp, #8]
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	2375      	movs	r3, #117	; 0x75
 8006c92:	0031      	movs	r1, r6
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	0038      	movs	r0, r7
 8006c98:	4b5a      	ldr	r3, [pc, #360]	; (8006e04 <start.lto_priv.291+0x7cc>)
 8006c9a:	f003 fec5 	bl	800aa28 <acc_confprogram_patch_offset>
 8006c9e:	1d23      	adds	r3, r4, #4
 8006ca0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006ca2:	4959      	ldr	r1, [pc, #356]	; (8006e08 <start.lto_priv.291+0x7d0>)
 8006ca4:	f005 fd88 	bl	800c7b8 <__aeabi_fmul>
 8006ca8:	f006 fac6 	bl	800d238 <__aeabi_f2uiz>
 8006cac:	0025      	movs	r5, r4
 8006cae:	23e5      	movs	r3, #229	; 0xe5
 8006cb0:	3801      	subs	r0, #1
 8006cb2:	b280      	uxth	r0, r0
 8006cb4:	9001      	str	r0, [sp, #4]
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	9a02      	ldr	r2, [sp, #8]
 8006cba:	4b52      	ldr	r3, [pc, #328]	; (8006e04 <start.lto_priv.291+0x7cc>)
 8006cbc:	0031      	movs	r1, r6
 8006cbe:	0038      	movs	r0, r7
 8006cc0:	3508      	adds	r5, #8
 8006cc2:	f003 feb1 	bl	800aa28 <acc_confprogram_patch_offset>
 8006cc6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8006cc8:	9a02      	ldr	r2, [sp, #8]
 8006cca:	9301      	str	r3, [sp, #4]
 8006ccc:	23d5      	movs	r3, #213	; 0xd5
 8006cce:	0031      	movs	r1, r6
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	0038      	movs	r0, r7
 8006cd4:	4b4b      	ldr	r3, [pc, #300]	; (8006e04 <start.lto_priv.291+0x7cc>)
 8006cd6:	f003 fea7 	bl	800aa28 <acc_confprogram_patch_offset>
 8006cda:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <start.lto_priv.291+0x6c0>
 8006ce0:	0023      	movs	r3, r4
 8006ce2:	3388      	adds	r3, #136	; 0x88
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	9a02      	ldr	r2, [sp, #8]
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	2371      	movs	r3, #113	; 0x71
 8006cec:	0031      	movs	r1, r6
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	0038      	movs	r0, r7
 8006cf2:	4b44      	ldr	r3, [pc, #272]	; (8006e04 <start.lto_priv.291+0x7cc>)
 8006cf4:	f003 fe98 	bl	800aa28 <acc_confprogram_patch_offset>
 8006cf8:	466b      	mov	r3, sp
 8006cfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cfc:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8006cfe:	9807      	ldr	r0, [sp, #28]
 8006d00:	9b06      	ldr	r3, [sp, #24]
 8006d02:	f7fc f915 	bl	8002f30 <acc_sensor_r2_load_confmem>
 8006d06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	4694      	mov	ip, r2
 8006d0c:	4463      	add	r3, ip
 8006d0e:	9303      	str	r3, [sp, #12]
 8006d10:	9a03      	ldr	r2, [sp, #12]
 8006d12:	4b3e      	ldr	r3, [pc, #248]	; (8006e0c <start.lto_priv.291+0x7d4>)
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d800      	bhi.n	8006d1a <start.lto_priv.291+0x6e2>
 8006d18:	e4d0      	b.n	80066bc <start.lto_priv.291+0x84>
 8006d1a:	21f4      	movs	r1, #244	; 0xf4
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	0049      	lsls	r1, r1, #1
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f7fb ff70 	bl	8002c06 <acc_sensor_protocol_r2_run_program>
 8006d26:	1e05      	subs	r5, r0, #0
 8006d28:	d145      	bne.n	8006db6 <start.lto_priv.291+0x77e>
 8006d2a:	2500      	movs	r5, #0
 8006d2c:	e4bd      	b.n	80066aa <start.lto_priv.291+0x72>
 8006d2e:	2200      	movs	r2, #0
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	9201      	str	r2, [sp, #4]
 8006d34:	002b      	movs	r3, r5
 8006d36:	9a02      	ldr	r2, [sp, #8]
 8006d38:	0031      	movs	r1, r6
 8006d3a:	0038      	movs	r0, r7
 8006d3c:	f003 fe74 	bl	800aa28 <acc_confprogram_patch_offset>
 8006d40:	2301      	movs	r3, #1
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	33d7      	adds	r3, #215	; 0xd7
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	9a02      	ldr	r2, [sp, #8]
 8006d4a:	002b      	movs	r3, r5
 8006d4c:	0031      	movs	r1, r6
 8006d4e:	0038      	movs	r0, r7
 8006d50:	f003 fe6a 	bl	800aa28 <acc_confprogram_patch_offset>
 8006d54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006d56:	3301      	adds	r3, #1
 8006d58:	930e      	str	r3, [sp, #56]	; 0x38
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	001d      	movs	r5, r3
 8006d5e:	9305      	str	r3, [sp, #20]
 8006d60:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006d62:	006a      	lsls	r2, r5, #1
 8006d64:	9308      	str	r3, [sp, #32]
 8006d66:	006b      	lsls	r3, r5, #1
 8006d68:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d6a:	9b08      	ldr	r3, [sp, #32]
 8006d6c:	0031      	movs	r1, r6
 8006d6e:	429d      	cmp	r5, r3
 8006d70:	419b      	sbcs	r3, r3
 8006d72:	425b      	negs	r3, r3
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	4b26      	ldr	r3, [pc, #152]	; (8006e10 <start.lto_priv.291+0x7d8>)
 8006d78:	0038      	movs	r0, r7
 8006d7a:	5a9b      	ldrh	r3, [r3, r2]
 8006d7c:	9a02      	ldr	r2, [sp, #8]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	4b20      	ldr	r3, [pc, #128]	; (8006e04 <start.lto_priv.291+0x7cc>)
 8006d82:	f003 fe51 	bl	800aa28 <acc_confprogram_patch_offset>
 8006d86:	9b08      	ldr	r3, [sp, #32]
 8006d88:	429d      	cmp	r5, r3
 8006d8a:	d20b      	bcs.n	8006da4 <start.lto_priv.291+0x76c>
 8006d8c:	9b05      	ldr	r3, [sp, #20]
 8006d8e:	006a      	lsls	r2, r5, #1
 8006d90:	9301      	str	r3, [sp, #4]
 8006d92:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <start.lto_priv.291+0x7dc>)
 8006d94:	0031      	movs	r1, r6
 8006d96:	5a9b      	ldrh	r3, [r3, r2]
 8006d98:	0038      	movs	r0, r7
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	9a02      	ldr	r2, [sp, #8]
 8006d9e:	4b19      	ldr	r3, [pc, #100]	; (8006e04 <start.lto_priv.291+0x7cc>)
 8006da0:	f003 fe42 	bl	800aa28 <acc_confprogram_patch_offset>
 8006da4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006da6:	9b05      	ldr	r3, [sp, #20]
 8006da8:	4694      	mov	ip, r2
 8006daa:	3501      	adds	r5, #1
 8006dac:	4463      	add	r3, ip
 8006dae:	9305      	str	r3, [sp, #20]
 8006db0:	2d40      	cmp	r5, #64	; 0x40
 8006db2:	d1d5      	bne.n	8006d60 <start.lto_priv.291+0x728>
 8006db4:	e75f      	b.n	8006c76 <start.lto_priv.291+0x63e>
 8006db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d100      	bne.n	8006dbe <start.lto_priv.291+0x786>
 8006dbc:	e475      	b.n	80066aa <start.lto_priv.291+0x72>
 8006dbe:	9b04      	ldr	r3, [sp, #16]
 8006dc0:	6919      	ldr	r1, [r3, #16]
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	f7fa fb32 	bl	800142c <acc_sensor_protocol_r2_wait_for_sync_start>
 8006dc8:	1e06      	subs	r6, r0, #0
 8006dca:	d0ae      	beq.n	8006d2a <start.lto_priv.291+0x6f2>
 8006dcc:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <start.lto_priv.291+0x7e0>)
 8006dce:	001a      	movs	r2, r3
 8006dd0:	3230      	adds	r2, #48	; 0x30
 8006dd2:	7812      	ldrb	r2, [r2, #0]
 8006dd4:	2a01      	cmp	r2, #1
 8006dd6:	d904      	bls.n	8006de2 <start.lto_priv.291+0x7aa>
 8006dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dda:	4a10      	ldr	r2, [pc, #64]	; (8006e1c <start.lto_priv.291+0x7e4>)
 8006ddc:	4910      	ldr	r1, [pc, #64]	; (8006e20 <start.lto_priv.291+0x7e8>)
 8006dde:	2002      	movs	r0, #2
 8006de0:	4798      	blx	r3
 8006de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d100      	bne.n	8006dea <start.lto_priv.291+0x7b2>
 8006de8:	e45f      	b.n	80066aa <start.lto_priv.291+0x72>
 8006dea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dec:	9804      	ldr	r0, [sp, #16]
 8006dee:	6423      	str	r3, [r4, #64]	; 0x40
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	4a04      	ldr	r2, [pc, #16]	; (8006e04 <start.lto_priv.291+0x7cc>)
 8006df4:	23ef      	movs	r3, #239	; 0xef
 8006df6:	490b      	ldr	r1, [pc, #44]	; (8006e24 <start.lto_priv.291+0x7ec>)
 8006df8:	6800      	ldr	r0, [r0, #0]
 8006dfa:	f002 fa1d 	bl	8009238 <acc_confprogram_live_patch.constprop.16>
 8006dfe:	0035      	movs	r5, r6
 8006e00:	e453      	b.n	80066aa <start.lto_priv.291+0x72>
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	08015b48 	.word	0x08015b48
 8006e08:	3751b717 	.word	0x3751b717
 8006e0c:	00000769 	.word	0x00000769
 8006e10:	08015ac8 	.word	0x08015ac8
 8006e14:	08015a48 	.word	0x08015a48
 8006e18:	200003e8 	.word	0x200003e8
 8006e1c:	0801b455 	.word	0x0801b455
 8006e20:	0801b8cc 	.word	0x0801b8cc
 8006e24:	08017088 	.word	0x08017088

08006e28 <calibrate.lto_priv.294>:
 8006e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e2a:	4cad      	ldr	r4, [pc, #692]	; (80070e0 <calibrate.lto_priv.294+0x2b8>)
 8006e2c:	000e      	movs	r6, r1
 8006e2e:	44a5      	add	sp, r4
 8006e30:	933a      	str	r3, [sp, #232]	; 0xe8
 8006e32:	4bac      	ldr	r3, [pc, #688]	; (80070e4 <calibrate.lto_priv.294+0x2bc>)
 8006e34:	9212      	str	r2, [sp, #72]	; 0x48
 8006e36:	001a      	movs	r2, r3
 8006e38:	3230      	adds	r2, #48	; 0x30
 8006e3a:	7812      	ldrb	r2, [r2, #0]
 8006e3c:	0004      	movs	r4, r0
 8006e3e:	2a03      	cmp	r2, #3
 8006e40:	d904      	bls.n	8006e4c <calibrate.lto_priv.294+0x24>
 8006e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e44:	4aa8      	ldr	r2, [pc, #672]	; (80070e8 <calibrate.lto_priv.294+0x2c0>)
 8006e46:	49a9      	ldr	r1, [pc, #676]	; (80070ec <calibrate.lto_priv.294+0x2c4>)
 8006e48:	2004      	movs	r0, #4
 8006e4a:	4798      	blx	r3
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	6965      	ldr	r5, [r4, #20]
 8006e50:	930a      	str	r3, [sp, #40]	; 0x28
 8006e52:	002b      	movs	r3, r5
 8006e54:	2700      	movs	r7, #0
 8006e56:	33bc      	adds	r3, #188	; 0xbc
 8006e58:	ac4a      	add	r4, sp, #296	; 0x128
 8006e5a:	601f      	str	r7, [r3, #0]
 8006e5c:	0020      	movs	r0, r4
 8006e5e:	f7fd f963 	bl	8004128 <calculate_pll_divisors.lto_priv.292>
 8006e62:	42b8      	cmp	r0, r7
 8006e64:	d105      	bne.n	8006e72 <calibrate.lto_priv.294+0x4a>
 8006e66:	2400      	movs	r4, #0
 8006e68:	0020      	movs	r0, r4
 8006e6a:	239d      	movs	r3, #157	; 0x9d
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	449d      	add	sp, r3
 8006e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e74:	aa50      	add	r2, sp, #320	; 0x140
 8006e76:	9350      	str	r3, [sp, #320]	; 0x140
 8006e78:	8863      	ldrh	r3, [r4, #2]
 8006e7a:	6871      	ldr	r1, [r6, #4]
 8006e7c:	6053      	str	r3, [r2, #4]
 8006e7e:	88a3      	ldrh	r3, [r4, #4]
 8006e80:	6830      	ldr	r0, [r6, #0]
 8006e82:	6093      	str	r3, [r2, #8]
 8006e84:	88e3      	ldrh	r3, [r4, #6]
 8006e86:	60d3      	str	r3, [r2, #12]
 8006e88:	8923      	ldrh	r3, [r4, #8]
 8006e8a:	8213      	strh	r3, [r2, #16]
 8006e8c:	ab48      	add	r3, sp, #288	; 0x120
 8006e8e:	f004 ff96 	bl	800bdbe <acc_cpd_cbank_and_vana_calibration>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d0e7      	beq.n	8006e66 <calibrate.lto_priv.294+0x3e>
 8006e96:	002b      	movs	r3, r5
 8006e98:	33ce      	adds	r3, #206	; 0xce
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	35d0      	adds	r5, #208	; 0xd0
 8006e9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ea0:	1e5a      	subs	r2, r3, #1
 8006ea2:	4193      	sbcs	r3, r2
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	933b      	str	r3, [sp, #236]	; 0xec
 8006ea8:	782b      	ldrb	r3, [r5, #0]
 8006eaa:	4a91      	ldr	r2, [pc, #580]	; (80070f0 <calibrate.lto_priv.294+0x2c8>)
 8006eac:	932d      	str	r3, [sp, #180]	; 0xb4
 8006eae:	6873      	ldr	r3, [r6, #4]
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d80e      	bhi.n	8006ed2 <calibrate.lto_priv.294+0xaa>
 8006eb4:	4b8b      	ldr	r3, [pc, #556]	; (80070e4 <calibrate.lto_priv.294+0x2bc>)
 8006eb6:	4a8f      	ldr	r2, [pc, #572]	; (80070f4 <calibrate.lto_priv.294+0x2cc>)
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	498f      	ldr	r1, [pc, #572]	; (80070f8 <calibrate.lto_priv.294+0x2d0>)
 8006ebc:	0038      	movs	r0, r7
 8006ebe:	4798      	blx	r3
 8006ec0:	4b8e      	ldr	r3, [pc, #568]	; (80070fc <calibrate.lto_priv.294+0x2d4>)
 8006ec2:	971a      	str	r7, [sp, #104]	; 0x68
 8006ec4:	9319      	str	r3, [sp, #100]	; 0x64
 8006ec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0cc      	beq.n	8006e66 <calibrate.lto_priv.294+0x3e>
 8006ecc:	2400      	movs	r4, #0
 8006ece:	f001 f960 	bl	8008192 <calibrate.lto_priv.294+0x136a>
 8006ed2:	212c      	movs	r1, #44	; 0x2c
 8006ed4:	8862      	ldrh	r2, [r4, #2]
 8006ed6:	9227      	str	r2, [sp, #156]	; 0x9c
 8006ed8:	88a2      	ldrh	r2, [r4, #4]
 8006eda:	9228      	str	r2, [sp, #160]	; 0xa0
 8006edc:	88e2      	ldrh	r2, [r4, #6]
 8006ede:	9229      	str	r2, [sp, #164]	; 0xa4
 8006ee0:	8922      	ldrh	r2, [r4, #8]
 8006ee2:	922a      	str	r2, [sp, #168]	; 0xa8
 8006ee4:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8006ee6:	922b      	str	r2, [sp, #172]	; 0xac
 8006ee8:	aa3e      	add	r2, sp, #248	; 0xf8
 8006eea:	1852      	adds	r2, r2, r1
 8006eec:	7812      	ldrb	r2, [r2, #0]
 8006eee:	392b      	subs	r1, #43	; 0x2b
 8006ef0:	922c      	str	r2, [sp, #176]	; 0xb0
 8006ef2:	6832      	ldr	r2, [r6, #0]
 8006ef4:	9213      	str	r2, [sp, #76]	; 0x4c
 8006ef6:	4a82      	ldr	r2, [pc, #520]	; (8007100 <calibrate.lto_priv.294+0x2d8>)
 8006ef8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006efa:	189a      	adds	r2, r3, r2
 8006efc:	438a      	bics	r2, r1
 8006efe:	1882      	adds	r2, r0, r2
 8006f00:	922e      	str	r2, [sp, #184]	; 0xb8
 8006f02:	4a80      	ldr	r2, [pc, #512]	; (8007104 <calibrate.lto_priv.294+0x2dc>)
 8006f04:	189b      	adds	r3, r3, r2
 8006f06:	001f      	movs	r7, r3
 8006f08:	9316      	str	r3, [sp, #88]	; 0x58
 8006f0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f0c:	4b7e      	ldr	r3, [pc, #504]	; (8007108 <calibrate.lto_priv.294+0x2e0>)
 8006f0e:	438f      	bics	r7, r1
 8006f10:	19c7      	adds	r7, r0, r7
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d80a      	bhi.n	8006f2c <calibrate.lto_priv.294+0x104>
 8006f16:	4b73      	ldr	r3, [pc, #460]	; (80070e4 <calibrate.lto_priv.294+0x2bc>)
 8006f18:	001a      	movs	r2, r3
 8006f1a:	3230      	adds	r2, #48	; 0x30
 8006f1c:	7812      	ldrb	r2, [r2, #0]
 8006f1e:	428a      	cmp	r2, r1
 8006f20:	d904      	bls.n	8006f2c <calibrate.lto_priv.294+0x104>
 8006f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f24:	4a79      	ldr	r2, [pc, #484]	; (800710c <calibrate.lto_priv.294+0x2e4>)
 8006f26:	4974      	ldr	r1, [pc, #464]	; (80070f8 <calibrate.lto_priv.294+0x2d0>)
 8006f28:	2002      	movs	r0, #2
 8006f2a:	4798      	blx	r3
 8006f2c:	4878      	ldr	r0, [pc, #480]	; (8007110 <calibrate.lto_priv.294+0x2e8>)
 8006f2e:	f003 fe12 	bl	800ab56 <acc_diagnostic_log_set_scope>
 8006f32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f34:	4877      	ldr	r0, [pc, #476]	; (8007114 <calibrate.lto_priv.294+0x2ec>)
 8006f36:	f003 fe0a 	bl	800ab4e <acc_diagnostic_log_scalar>
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	4876      	ldr	r0, [pc, #472]	; (8007118 <calibrate.lto_priv.294+0x2f0>)
 8006f40:	f003 fe08 	bl	800ab54 <acc_diagnostic_log_declare_parameter>
 8006f44:	221f      	movs	r2, #31
 8006f46:	2100      	movs	r1, #0
 8006f48:	4874      	ldr	r0, [pc, #464]	; (800711c <calibrate.lto_priv.294+0x2f4>)
 8006f4a:	f003 fe03 	bl	800ab54 <acc_diagnostic_log_declare_parameter>
 8006f4e:	227b      	movs	r2, #123	; 0x7b
 8006f50:	2100      	movs	r1, #0
 8006f52:	4873      	ldr	r0, [pc, #460]	; (8007120 <calibrate.lto_priv.294+0x2f8>)
 8006f54:	f003 fdfe 	bl	800ab54 <acc_diagnostic_log_declare_parameter>
 8006f58:	220b      	movs	r2, #11
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	4871      	ldr	r0, [pc, #452]	; (8007124 <calibrate.lto_priv.294+0x2fc>)
 8006f5e:	f003 fdf9 	bl	800ab54 <acc_diagnostic_log_declare_parameter>
 8006f62:	2302      	movs	r3, #2
 8006f64:	9339      	str	r3, [sp, #228]	; 0xe4
 8006f66:	4b65      	ldr	r3, [pc, #404]	; (80070fc <calibrate.lto_priv.294+0x2d4>)
 8006f68:	9319      	str	r3, [sp, #100]	; 0x64
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f6e:	3302      	adds	r3, #2
 8006f70:	930e      	str	r3, [sp, #56]	; 0x38
 8006f72:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006f74:	4868      	ldr	r0, [pc, #416]	; (8007118 <calibrate.lto_priv.294+0x2f0>)
 8006f76:	f003 fdec 	bl	800ab52 <acc_diagnostic_log_set_parameter>
 8006f7a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8006f7c:	930d      	str	r3, [sp, #52]	; 0x34
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9309      	str	r3, [sp, #36]	; 0x24
 8006f82:	2400      	movs	r4, #0
 8006f84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f86:	4867      	ldr	r0, [pc, #412]	; (8007124 <calibrate.lto_priv.294+0x2fc>)
 8006f88:	f003 fde3 	bl	800ab52 <acc_diagnostic_log_set_parameter>
 8006f8c:	ab8f      	add	r3, sp, #572	; 0x23c
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f92:	ab82      	add	r3, sp, #520	; 0x208
 8006f94:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006f96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f98:	9482      	str	r4, [sp, #520]	; 0x208
 8006f9a:	948f      	str	r4, [sp, #572]	; 0x23c
 8006f9c:	f004 f9c2 	bl	800b324 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 8006fa0:	42a0      	cmp	r0, r4
 8006fa2:	d105      	bne.n	8006fb0 <calibrate.lto_priv.294+0x188>
 8006fa4:	4b4f      	ldr	r3, [pc, #316]	; (80070e4 <calibrate.lto_priv.294+0x2bc>)
 8006fa6:	4a60      	ldr	r2, [pc, #384]	; (8007128 <calibrate.lto_priv.294+0x300>)
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006faa:	4960      	ldr	r1, [pc, #384]	; (800712c <calibrate.lto_priv.294+0x304>)
 8006fac:	4798      	blx	r3
 8006fae:	e78a      	b.n	8006ec6 <calibrate.lto_priv.294+0x9e>
 8006fb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006fb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fb4:	4b5e      	ldr	r3, [pc, #376]	; (8007130 <calibrate.lto_priv.294+0x308>)
 8006fb6:	9c82      	ldr	r4, [sp, #520]	; 0x208
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	9a8f      	ldr	r2, [sp, #572]	; 0x23c
 8006fbc:	920c      	str	r2, [sp, #48]	; 0x30
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d900      	bls.n	8006fc4 <calibrate.lto_priv.294+0x19c>
 8006fc2:	930c      	str	r3, [sp, #48]	; 0x30
 8006fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc6:	0021      	movs	r1, r4
 8006fc8:	085b      	lsrs	r3, r3, #1
 8006fca:	9310      	str	r3, [sp, #64]	; 0x40
 8006fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fce:	085a      	lsrs	r2, r3, #1
 8006fd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fd2:	0098      	lsls	r0, r3, #2
 8006fd4:	4b57      	ldr	r3, [pc, #348]	; (8007134 <calibrate.lto_priv.294+0x30c>)
 8006fd6:	18c0      	adds	r0, r0, r3
 8006fd8:	f003 fcde 	bl	800a998 <acc_confprogram_copy>
 8006fdc:	466b      	mov	r3, sp
 8006fde:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8006fe0:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 8006fe2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006fe4:	0032      	movs	r2, r6
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	231b      	movs	r3, #27
 8006fea:	0029      	movs	r1, r5
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	0020      	movs	r0, r4
 8006ff0:	4b51      	ldr	r3, [pc, #324]	; (8007138 <calibrate.lto_priv.294+0x310>)
 8006ff2:	f003 fd19 	bl	800aa28 <acc_confprogram_patch_offset>
 8006ff6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006ff8:	0032      	movs	r2, r6
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	2319      	movs	r3, #25
 8006ffe:	0029      	movs	r1, r5
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	0020      	movs	r0, r4
 8007004:	4b4c      	ldr	r3, [pc, #304]	; (8007138 <calibrate.lto_priv.294+0x310>)
 8007006:	f003 fd0f 	bl	800aa28 <acc_confprogram_patch_offset>
 800700a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800700c:	0032      	movs	r2, r6
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	231a      	movs	r3, #26
 8007012:	0029      	movs	r1, r5
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	0020      	movs	r0, r4
 8007018:	4b47      	ldr	r3, [pc, #284]	; (8007138 <calibrate.lto_priv.294+0x310>)
 800701a:	f003 fd05 	bl	800aa28 <acc_confprogram_patch_offset>
 800701e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007020:	0032      	movs	r2, r6
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	2317      	movs	r3, #23
 8007026:	0029      	movs	r1, r5
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	0020      	movs	r0, r4
 800702c:	4b42      	ldr	r3, [pc, #264]	; (8007138 <calibrate.lto_priv.294+0x310>)
 800702e:	f003 fcfb 	bl	800aa28 <acc_confprogram_patch_offset>
 8007032:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007034:	0032      	movs	r2, r6
 8007036:	9301      	str	r3, [sp, #4]
 8007038:	230d      	movs	r3, #13
 800703a:	0029      	movs	r1, r5
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	0020      	movs	r0, r4
 8007040:	4b3d      	ldr	r3, [pc, #244]	; (8007138 <calibrate.lto_priv.294+0x310>)
 8007042:	f003 fcf1 	bl	800aa28 <acc_confprogram_patch_offset>
 8007046:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8007048:	0032      	movs	r2, r6
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	232a      	movs	r3, #42	; 0x2a
 800704e:	0029      	movs	r1, r5
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	0020      	movs	r0, r4
 8007054:	4b38      	ldr	r3, [pc, #224]	; (8007138 <calibrate.lto_priv.294+0x310>)
 8007056:	f003 fce7 	bl	800aa28 <acc_confprogram_patch_offset>
 800705a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705c:	0032      	movs	r2, r6
 800705e:	9301      	str	r3, [sp, #4]
 8007060:	230f      	movs	r3, #15
 8007062:	0029      	movs	r1, r5
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	0020      	movs	r0, r4
 8007068:	4b33      	ldr	r3, [pc, #204]	; (8007138 <calibrate.lto_priv.294+0x310>)
 800706a:	f003 fcdd 	bl	800aa28 <acc_confprogram_patch_offset>
 800706e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007070:	0032      	movs	r2, r6
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	232c      	movs	r3, #44	; 0x2c
 8007076:	0029      	movs	r1, r5
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	0020      	movs	r0, r4
 800707c:	4b2e      	ldr	r3, [pc, #184]	; (8007138 <calibrate.lto_priv.294+0x310>)
 800707e:	f003 fcd3 	bl	800aa28 <acc_confprogram_patch_offset>
 8007082:	2240      	movs	r2, #64	; 0x40
 8007084:	466b      	mov	r3, sp
 8007086:	189b      	adds	r3, r3, r2
 8007088:	8819      	ldrh	r1, [r3, #0]
 800708a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800708c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800708e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007090:	f7fb ff4e 	bl	8002f30 <acc_sensor_r2_load_confmem>
 8007094:	9a8f      	ldr	r2, [sp, #572]	; 0x23c
 8007096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007098:	4694      	mov	ip, r2
 800709a:	4463      	add	r3, ip
 800709c:	930b      	str	r3, [sp, #44]	; 0x2c
 800709e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070a0:	4b26      	ldr	r3, [pc, #152]	; (800713c <calibrate.lto_priv.294+0x314>)
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d985      	bls.n	8006fb2 <calibrate.lto_priv.294+0x18a>
 80070a6:	2118      	movs	r1, #24
 80070a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070aa:	f7fb fdac 	bl	8002c06 <acc_sensor_protocol_r2_run_program>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d103      	bne.n	80070ba <calibrate.lto_priv.294+0x292>
 80070b2:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <calibrate.lto_priv.294+0x2bc>)
 80070b4:	4a22      	ldr	r2, [pc, #136]	; (8007140 <calibrate.lto_priv.294+0x318>)
 80070b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b8:	e777      	b.n	8006faa <calibrate.lto_priv.294+0x182>
 80070ba:	21fa      	movs	r1, #250	; 0xfa
 80070bc:	2300      	movs	r3, #0
 80070be:	2208      	movs	r2, #8
 80070c0:	00c9      	lsls	r1, r1, #3
 80070c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070c4:	f7fb fd62 	bl	8002b8c <acc_sensor_protocol_r2_wait_for_specific_event>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d100      	bne.n	80070ce <calibrate.lto_priv.294+0x2a6>
 80070cc:	e6fb      	b.n	8006ec6 <calibrate.lto_priv.294+0x9e>
 80070ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070d0:	2b37      	cmp	r3, #55	; 0x37
 80070d2:	d839      	bhi.n	8007148 <calibrate.lto_priv.294+0x320>
 80070d4:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <calibrate.lto_priv.294+0x2bc>)
 80070d6:	4a1b      	ldr	r2, [pc, #108]	; (8007144 <calibrate.lto_priv.294+0x31c>)
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	4914      	ldr	r1, [pc, #80]	; (800712c <calibrate.lto_priv.294+0x304>)
 80070dc:	2000      	movs	r0, #0
 80070de:	e765      	b.n	8006fac <calibrate.lto_priv.294+0x184>
 80070e0:	fffffd8c 	.word	0xfffffd8c
 80070e4:	200003e8 	.word	0x200003e8
 80070e8:	0801bd54 	.word	0x0801bd54
 80070ec:	0801b427 	.word	0x0801b427
 80070f0:	00000313 	.word	0x00000313
 80070f4:	0801b50b 	.word	0x0801b50b
 80070f8:	0801bd71 	.word	0x0801bd71
 80070fc:	ff800000 	.word	0xff800000
 8007100:	fffffda8 	.word	0xfffffda8
 8007104:	fffffcec 	.word	0xfffffcec
 8007108:	000001ff 	.word	0x000001ff
 800710c:	0801bd81 	.word	0x0801bd81
 8007110:	0801bdac 	.word	0x0801bdac
 8007114:	0801bdbb 	.word	0x0801bdbb
 8007118:	0801bdc5 	.word	0x0801bdc5
 800711c:	0801c258 	.word	0x0801c258
 8007120:	0801c097 	.word	0x0801c097
 8007124:	0801be5f 	.word	0x0801be5f
 8007128:	0801bdce 	.word	0x0801bdce
 800712c:	0801bdf3 	.word	0x0801bdf3
 8007130:	000006ac 	.word	0x000006ac
 8007134:	08016330 	.word	0x08016330
 8007138:	08015880 	.word	0x08015880
 800713c:	000006ab 	.word	0x000006ab
 8007140:	0801be0b 	.word	0x0801be0b
 8007144:	0801be3d 	.word	0x0801be3d
 8007148:	2219      	movs	r2, #25
 800714a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800714c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800714e:	f002 f81f 	bl	8009190 <internal_buffer_processed_read.constprop.30>
 8007152:	0004      	movs	r4, r0
 8007154:	2319      	movs	r3, #25
 8007156:	0002      	movs	r2, r0
 8007158:	990a      	ldr	r1, [sp, #40]	; 0x28
 800715a:	200a      	movs	r0, #10
 800715c:	f004 fe20 	bl	800bda0 <acc_probes_execute_uint16>
 8007160:	2232      	movs	r2, #50	; 0x32
 8007162:	0021      	movs	r1, r4
 8007164:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007166:	f00d fca3 	bl	8014ab0 <memcpy>
 800716a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800716c:	f7fa f9d4 	bl	8001518 <acc_sensor_protocol_r2_ack_event>
 8007170:	901b      	str	r0, [sp, #108]	; 0x6c
 8007172:	9030      	str	r0, [sp, #192]	; 0xc0
 8007174:	2800      	cmp	r0, #0
 8007176:	d100      	bne.n	800717a <calibrate.lto_priv.294+0x352>
 8007178:	e6a5      	b.n	8006ec6 <calibrate.lto_priv.294+0x9e>
 800717a:	4dc3      	ldr	r5, [pc, #780]	; (8007488 <calibrate.lto_priv.294+0x660>)
 800717c:	48c3      	ldr	r0, [pc, #780]	; (800748c <calibrate.lto_priv.294+0x664>)
 800717e:	0029      	movs	r1, r5
 8007180:	f003 fce6 	bl	800ab50 <acc_diagnostic_log_array>
 8007184:	2119      	movs	r1, #25
 8007186:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007188:	f003 fce0 	bl	800ab4c <acc_diagnostic_log_data_u16>
 800718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718e:	4ac0      	ldr	r2, [pc, #768]	; (8007490 <calibrate.lto_priv.294+0x668>)
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	930b      	str	r3, [sp, #44]	; 0x2c
 8007194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007196:	ac55      	add	r4, sp, #340	; 0x154
 8007198:	0059      	lsls	r1, r3, #1
 800719a:	4bbe      	ldr	r3, [pc, #760]	; (8007494 <calibrate.lto_priv.294+0x66c>)
 800719c:	1852      	adds	r2, r2, r1
 800719e:	332a      	adds	r3, #42	; 0x2a
 80071a0:	8890      	ldrh	r0, [r2, #4]
 80071a2:	5acb      	ldrh	r3, [r1, r3]
 80071a4:	1ac0      	subs	r0, r0, r3
 80071a6:	b200      	sxth	r0, r0
 80071a8:	f006 fa1c 	bl	800d5e4 <__aeabi_i2f>
 80071ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ae:	1c06      	adds	r6, r0, #0
 80071b0:	8818      	ldrh	r0, [r3, #0]
 80071b2:	f006 fa61 	bl	800d678 <__aeabi_ui2f>
 80071b6:	21de      	movs	r1, #222	; 0xde
 80071b8:	0589      	lsls	r1, r1, #22
 80071ba:	f005 fafd 	bl	800c7b8 <__aeabi_fmul>
 80071be:	21fc      	movs	r1, #252	; 0xfc
 80071c0:	0589      	lsls	r1, r1, #22
 80071c2:	f005 fc2b 	bl	800ca1c <__aeabi_fsub>
 80071c6:	49b4      	ldr	r1, [pc, #720]	; (8007498 <calibrate.lto_priv.294+0x670>)
 80071c8:	f005 faf6 	bl	800c7b8 <__aeabi_fmul>
 80071cc:	49b3      	ldr	r1, [pc, #716]	; (800749c <calibrate.lto_priv.294+0x674>)
 80071ce:	f005 faf3 	bl	800c7b8 <__aeabi_fmul>
 80071d2:	1c01      	adds	r1, r0, #0
 80071d4:	1c30      	adds	r0, r6, #0
 80071d6:	f005 fc21 	bl	800ca1c <__aeabi_fsub>
 80071da:	f006 f9e3 	bl	800d5a4 <__aeabi_f2iz>
 80071de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e0:	5318      	strh	r0, [r3, r4]
 80071e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e4:	3301      	adds	r3, #1
 80071e6:	9309      	str	r3, [sp, #36]	; 0x24
 80071e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ea:	3332      	adds	r3, #50	; 0x32
 80071ec:	930d      	str	r3, [sp, #52]	; 0x34
 80071ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f0:	2b0c      	cmp	r3, #12
 80071f2:	d000      	beq.n	80071f6 <calibrate.lto_priv.294+0x3ce>
 80071f4:	e6c5      	b.n	8006f82 <calibrate.lto_priv.294+0x15a>
 80071f6:	0029      	movs	r1, r5
 80071f8:	48a9      	ldr	r0, [pc, #676]	; (80074a0 <calibrate.lto_priv.294+0x678>)
 80071fa:	f003 fca9 	bl	800ab50 <acc_diagnostic_log_array>
 80071fe:	0020      	movs	r0, r4
 8007200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007202:	f003 fca3 	bl	800ab4c <acc_diagnostic_log_data_u16>
 8007206:	2214      	movs	r2, #20
 8007208:	5ea3      	ldrsh	r3, [r4, r2]
 800720a:	930b      	str	r3, [sp, #44]	; 0x2c
 800720c:	2216      	movs	r2, #22
 800720e:	5ea3      	ldrsh	r3, [r4, r2]
 8007210:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007212:	930d      	str	r3, [sp, #52]	; 0x34
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	9314      	str	r3, [sp, #80]	; 0x50
 8007218:	2200      	movs	r2, #0
 800721a:	5ea3      	ldrsh	r3, [r4, r2]
 800721c:	9309      	str	r3, [sp, #36]	; 0x24
 800721e:	2202      	movs	r2, #2
 8007220:	5ea3      	ldrsh	r3, [r4, r2]
 8007222:	2400      	movs	r4, #0
 8007224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007226:	930c      	str	r3, [sp, #48]	; 0x30
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	9310      	str	r3, [sp, #64]	; 0x40
 800722c:	b2e3      	uxtb	r3, r4
 800722e:	9315      	str	r3, [sp, #84]	; 0x54
 8007230:	0062      	lsls	r2, r4, #1
 8007232:	ab55      	add	r3, sp, #340	; 0x154
 8007234:	5ed6      	ldrsh	r6, [r2, r3]
 8007236:	2c00      	cmp	r4, #0
 8007238:	d000      	beq.n	800723c <calibrate.lto_priv.294+0x414>
 800723a:	e0c1      	b.n	80073c0 <calibrate.lto_priv.294+0x598>
 800723c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007240:	2532      	movs	r5, #50	; 0x32
 8007242:	4293      	cmp	r3, r2
 8007244:	dd05      	ble.n	8007252 <calibrate.lto_priv.294+0x42a>
 8007246:	4b97      	ldr	r3, [pc, #604]	; (80074a4 <calibrate.lto_priv.294+0x67c>)
 8007248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800724a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800724c:	429a      	cmp	r2, r3
 800724e:	dc00      	bgt.n	8007252 <calibrate.lto_priv.294+0x42a>
 8007250:	e0c5      	b.n	80073de <calibrate.lto_priv.294+0x5b6>
 8007252:	4b95      	ldr	r3, [pc, #596]	; (80074a8 <calibrate.lto_priv.294+0x680>)
 8007254:	18f6      	adds	r6, r6, r3
 8007256:	17f3      	asrs	r3, r6, #31
 8007258:	18f0      	adds	r0, r6, r3
 800725a:	4058      	eors	r0, r3
 800725c:	f006 f9c2 	bl	800d5e4 <__aeabi_i2f>
 8007260:	498e      	ldr	r1, [pc, #568]	; (800749c <calibrate.lto_priv.294+0x674>)
 8007262:	f005 f997 	bl	800c594 <__aeabi_fdiv>
 8007266:	4991      	ldr	r1, [pc, #580]	; (80074ac <calibrate.lto_priv.294+0x684>)
 8007268:	f005 faa6 	bl	800c7b8 <__aeabi_fmul>
 800726c:	1c06      	adds	r6, r0, #0
 800726e:	0028      	movs	r0, r5
 8007270:	f006 f9b8 	bl	800d5e4 <__aeabi_i2f>
 8007274:	1c01      	adds	r1, r0, #0
 8007276:	1c30      	adds	r0, r6, #0
 8007278:	f004 fff2 	bl	800c260 <__aeabi_fadd>
 800727c:	f005 ffdc 	bl	800d238 <__aeabi_f2uiz>
 8007280:	22a2      	movs	r2, #162	; 0xa2
 8007282:	ab3e      	add	r3, sp, #248	; 0xf8
 8007284:	0052      	lsls	r2, r2, #1
 8007286:	189b      	adds	r3, r3, r2
 8007288:	5518      	strb	r0, [r3, r4]
 800728a:	b2e3      	uxtb	r3, r4
 800728c:	a84d      	add	r0, sp, #308	; 0x134
 800728e:	5423      	strb	r3, [r4, r0]
 8007290:	3401      	adds	r4, #1
 8007292:	2c0c      	cmp	r4, #12
 8007294:	d1ca      	bne.n	800722c <calibrate.lto_priv.294+0x404>
 8007296:	3a3a      	subs	r2, #58	; 0x3a
 8007298:	ad8f      	add	r5, sp, #572	; 0x23c
 800729a:	3aff      	subs	r2, #255	; 0xff
 800729c:	9509      	str	r5, [sp, #36]	; 0x24
 800729e:	2300      	movs	r3, #0
 80072a0:	0019      	movs	r1, r3
 80072a2:	5c1c      	ldrb	r4, [r3, r0]
 80072a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072a6:	46a4      	mov	ip, r4
 80072a8:	18c4      	adds	r4, r0, r3
 80072aa:	7866      	ldrb	r6, [r4, #1]
 80072ac:	4664      	mov	r4, ip
 80072ae:	5d2c      	ldrb	r4, [r5, r4]
 80072b0:	0025      	movs	r5, r4
 80072b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80072b4:	5da4      	ldrb	r4, [r4, r6]
 80072b6:	940b      	str	r4, [sp, #44]	; 0x2c
 80072b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80072ba:	42a5      	cmp	r5, r4
 80072bc:	d905      	bls.n	80072ca <calibrate.lto_priv.294+0x4a2>
 80072be:	4664      	mov	r4, ip
 80072c0:	3101      	adds	r1, #1
 80072c2:	18c5      	adds	r5, r0, r3
 80072c4:	541e      	strb	r6, [r3, r0]
 80072c6:	b2c9      	uxtb	r1, r1
 80072c8:	706c      	strb	r4, [r5, #1]
 80072ca:	3301      	adds	r3, #1
 80072cc:	b2dc      	uxtb	r4, r3
 80072ce:	4294      	cmp	r4, r2
 80072d0:	d3e7      	bcc.n	80072a2 <calibrate.lto_priv.294+0x47a>
 80072d2:	3a01      	subs	r2, #1
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	d001      	beq.n	80072de <calibrate.lto_priv.294+0x4b6>
 80072da:	2900      	cmp	r1, #0
 80072dc:	d1df      	bne.n	800729e <calibrate.lto_priv.294+0x476>
 80072de:	496a      	ldr	r1, [pc, #424]	; (8007488 <calibrate.lto_priv.294+0x660>)
 80072e0:	4873      	ldr	r0, [pc, #460]	; (80074b0 <calibrate.lto_priv.294+0x688>)
 80072e2:	f003 fc35 	bl	800ab50 <acc_diagnostic_log_array>
 80072e6:	2300      	movs	r3, #0
 80072e8:	931d      	str	r3, [sp, #116]	; 0x74
 80072ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80072ec:	ab4d      	add	r3, sp, #308	; 0x134
 80072ee:	5cd3      	ldrb	r3, [r2, r3]
 80072f0:	2600      	movs	r6, #0
 80072f2:	9314      	str	r3, [sp, #80]	; 0x50
 80072f4:	932f      	str	r3, [sp, #188]	; 0xbc
 80072f6:	2332      	movs	r3, #50	; 0x32
 80072f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072fa:	4353      	muls	r3, r2
 80072fc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80072fe:	18d3      	adds	r3, r2, r3
 8007300:	930d      	str	r3, [sp, #52]	; 0x34
 8007302:	9310      	str	r3, [sp, #64]	; 0x40
 8007304:	2301      	movs	r3, #1
 8007306:	9309      	str	r3, [sp, #36]	; 0x24
 8007308:	2300      	movs	r3, #0
 800730a:	001d      	movs	r5, r3
 800730c:	001c      	movs	r4, r3
 800730e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007310:	466b      	mov	r3, sp
 8007312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007314:	3401      	adds	r4, #1
 8007316:	9315      	str	r3, [sp, #84]	; 0x54
 8007318:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800731a:	b2a4      	uxth	r4, r4
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	0018      	movs	r0, r3
 8007320:	930c      	str	r3, [sp, #48]	; 0x30
 8007322:	f006 f95f 	bl	800d5e4 <__aeabi_i2f>
 8007326:	1c01      	adds	r1, r0, #0
 8007328:	1c30      	adds	r0, r6, #0
 800732a:	f004 ff99 	bl	800c260 <__aeabi_fadd>
 800732e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007332:	195d      	adds	r5, r3, r5
 8007334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007336:	1c06      	adds	r6, r0, #0
 8007338:	885b      	ldrh	r3, [r3, #2]
 800733a:	b2ad      	uxth	r5, r5
 800733c:	429a      	cmp	r2, r3
 800733e:	d275      	bcs.n	800742c <calibrate.lto_priv.294+0x604>
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	22fa      	movs	r2, #250	; 0xfa
 8007344:	b29b      	uxth	r3, r3
 8007346:	0092      	lsls	r2, r2, #2
 8007348:	4293      	cmp	r3, r2
 800734a:	d803      	bhi.n	8007354 <calibrate.lto_priv.294+0x52c>
 800734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734e:	2b18      	cmp	r3, #24
 8007350:	d000      	beq.n	8007354 <calibrate.lto_priv.294+0x52c>
 8007352:	e080      	b.n	8007456 <calibrate.lto_priv.294+0x62e>
 8007354:	2c02      	cmp	r4, #2
 8007356:	d96c      	bls.n	8007432 <calibrate.lto_priv.294+0x60a>
 8007358:	0028      	movs	r0, r5
 800735a:	f006 f98d 	bl	800d678 <__aeabi_ui2f>
 800735e:	1c05      	adds	r5, r0, #0
 8007360:	0020      	movs	r0, r4
 8007362:	f006 f989 	bl	800d678 <__aeabi_ui2f>
 8007366:	1c01      	adds	r1, r0, #0
 8007368:	1c28      	adds	r0, r5, #0
 800736a:	f005 f913 	bl	800c594 <__aeabi_fdiv>
 800736e:	21fe      	movs	r1, #254	; 0xfe
 8007370:	0589      	lsls	r1, r1, #22
 8007372:	f005 fb53 	bl	800ca1c <__aeabi_fsub>
 8007376:	f005 ff5f 	bl	800d238 <__aeabi_f2uiz>
 800737a:	b283      	uxth	r3, r0
 800737c:	930c      	str	r3, [sp, #48]	; 0x30
 800737e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007380:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007382:	005d      	lsls	r5, r3, #1
 8007384:	ab75      	add	r3, sp, #468	; 0x1d4
 8007386:	52ea      	strh	r2, [r5, r3]
 8007388:	ab8f      	add	r3, sp, #572	; 0x23c
 800738a:	52ec      	strh	r4, [r5, r3]
 800738c:	0020      	movs	r0, r4
 800738e:	f006 f929 	bl	800d5e4 <__aeabi_i2f>
 8007392:	1c01      	adds	r1, r0, #0
 8007394:	1c30      	adds	r0, r6, #0
 8007396:	f005 f8fd 	bl	800c594 <__aeabi_fdiv>
 800739a:	f005 ff4d 	bl	800d238 <__aeabi_f2uiz>
 800739e:	ab82      	add	r3, sp, #520	; 0x208
 80073a0:	52e8      	strh	r0, [r5, r3]
 80073a2:	2005      	movs	r0, #5
 80073a4:	ab9c      	add	r3, sp, #624	; 0x270
 80073a6:	195d      	adds	r5, r3, r5
 80073a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073aa:	3d05      	subs	r5, #5
 80073ac:	4343      	muls	r3, r0
 80073ae:	3dff      	subs	r5, #255	; 0xff
 80073b0:	802b      	strh	r3, [r5, #0]
 80073b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b4:	3301      	adds	r3, #1
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ba:	2500      	movs	r5, #0
 80073bc:	002c      	movs	r4, r5
 80073be:	e049      	b.n	8007454 <calibrate.lto_priv.294+0x62c>
 80073c0:	b2e1      	uxtb	r1, r4
 80073c2:	290b      	cmp	r1, #11
 80073c4:	d116      	bne.n	80073f4 <calibrate.lto_priv.294+0x5cc>
 80073c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073ca:	2532      	movs	r5, #50	; 0x32
 80073cc:	4293      	cmp	r3, r2
 80073ce:	dc00      	bgt.n	80073d2 <calibrate.lto_priv.294+0x5aa>
 80073d0:	e73f      	b.n	8007252 <calibrate.lto_priv.294+0x42a>
 80073d2:	4b34      	ldr	r3, [pc, #208]	; (80074a4 <calibrate.lto_priv.294+0x67c>)
 80073d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073d6:	429a      	cmp	r2, r3
 80073d8:	dd00      	ble.n	80073dc <calibrate.lto_priv.294+0x5b4>
 80073da:	e73a      	b.n	8007252 <calibrate.lto_priv.294+0x42a>
 80073dc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80073de:	f006 f901 	bl	800d5e4 <__aeabi_i2f>
 80073e2:	4934      	ldr	r1, [pc, #208]	; (80074b4 <calibrate.lto_priv.294+0x68c>)
 80073e4:	f005 fee0 	bl	800d1a8 <__aeabi_fcmplt>
 80073e8:	2500      	movs	r5, #0
 80073ea:	42a8      	cmp	r0, r5
 80073ec:	d000      	beq.n	80073f0 <calibrate.lto_priv.294+0x5c8>
 80073ee:	e730      	b.n	8007252 <calibrate.lto_priv.294+0x42a>
 80073f0:	3532      	adds	r5, #50	; 0x32
 80073f2:	e72e      	b.n	8007252 <calibrate.lto_priv.294+0x42a>
 80073f4:	189b      	adds	r3, r3, r2
 80073f6:	1e9a      	subs	r2, r3, #2
 80073f8:	2100      	movs	r1, #0
 80073fa:	5e52      	ldrsh	r2, [r2, r1]
 80073fc:	2532      	movs	r5, #50	; 0x32
 80073fe:	42b2      	cmp	r2, r6
 8007400:	dc00      	bgt.n	8007404 <calibrate.lto_priv.294+0x5dc>
 8007402:	e726      	b.n	8007252 <calibrate.lto_priv.294+0x42a>
 8007404:	2002      	movs	r0, #2
 8007406:	5e18      	ldrsh	r0, [r3, r0]
 8007408:	42b0      	cmp	r0, r6
 800740a:	db00      	blt.n	800740e <calibrate.lto_priv.294+0x5e6>
 800740c:	e721      	b.n	8007252 <calibrate.lto_priv.294+0x42a>
 800740e:	4b25      	ldr	r3, [pc, #148]	; (80074a4 <calibrate.lto_priv.294+0x67c>)
 8007410:	429a      	cmp	r2, r3
 8007412:	dd00      	ble.n	8007416 <calibrate.lto_priv.294+0x5ee>
 8007414:	e71d      	b.n	8007252 <calibrate.lto_priv.294+0x42a>
 8007416:	429e      	cmp	r6, r3
 8007418:	dd00      	ble.n	800741c <calibrate.lto_priv.294+0x5f4>
 800741a:	e71a      	b.n	8007252 <calibrate.lto_priv.294+0x42a>
 800741c:	1a80      	subs	r0, r0, r2
 800741e:	f006 f8e1 	bl	800d5e4 <__aeabi_i2f>
 8007422:	21fc      	movs	r1, #252	; 0xfc
 8007424:	0589      	lsls	r1, r1, #22
 8007426:	f005 f9c7 	bl	800c7b8 <__aeabi_fmul>
 800742a:	e7da      	b.n	80073e2 <calibrate.lto_priv.294+0x5ba>
 800742c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	e787      	b.n	8007342 <calibrate.lto_priv.294+0x51a>
 8007432:	4b21      	ldr	r3, [pc, #132]	; (80074b8 <calibrate.lto_priv.294+0x690>)
 8007434:	001a      	movs	r2, r3
 8007436:	3230      	adds	r2, #48	; 0x30
 8007438:	7812      	ldrb	r2, [r2, #0]
 800743a:	2a03      	cmp	r2, #3
 800743c:	d9bd      	bls.n	80073ba <calibrate.lto_priv.294+0x592>
 800743e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007440:	9401      	str	r4, [sp, #4]
 8007442:	9200      	str	r2, [sp, #0]
 8007444:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007446:	4a1d      	ldr	r2, [pc, #116]	; (80074bc <calibrate.lto_priv.294+0x694>)
 8007448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744a:	491d      	ldr	r1, [pc, #116]	; (80074c0 <calibrate.lto_priv.294+0x698>)
 800744c:	2004      	movs	r0, #4
 800744e:	47a0      	blx	r4
 8007450:	2400      	movs	r4, #0
 8007452:	0025      	movs	r5, r4
 8007454:	2600      	movs	r6, #0
 8007456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007458:	3301      	adds	r3, #1
 800745a:	9309      	str	r3, [sp, #36]	; 0x24
 800745c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800745e:	3302      	adds	r3, #2
 8007460:	9310      	str	r3, [sp, #64]	; 0x40
 8007462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007464:	2b19      	cmp	r3, #25
 8007466:	d000      	beq.n	800746a <calibrate.lto_priv.294+0x642>
 8007468:	e752      	b.n	8007310 <calibrate.lto_priv.294+0x4e8>
 800746a:	4b13      	ldr	r3, [pc, #76]	; (80074b8 <calibrate.lto_priv.294+0x690>)
 800746c:	001a      	movs	r2, r3
 800746e:	3230      	adds	r2, #48	; 0x30
 8007470:	7812      	ldrb	r2, [r2, #0]
 8007472:	2a03      	cmp	r2, #3
 8007474:	d905      	bls.n	8007482 <calibrate.lto_priv.294+0x65a>
 8007476:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007478:	4a12      	ldr	r2, [pc, #72]	; (80074c4 <calibrate.lto_priv.294+0x69c>)
 800747a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800747c:	4910      	ldr	r1, [pc, #64]	; (80074c0 <calibrate.lto_priv.294+0x698>)
 800747e:	2004      	movs	r0, #4
 8007480:	47a0      	blx	r4
 8007482:	2500      	movs	r5, #0
 8007484:	e036      	b.n	80074f4 <calibrate.lto_priv.294+0x6cc>
 8007486:	46c0      	nop			; (mov r8, r8)
 8007488:	0801be55 	.word	0x0801be55
 800748c:	0801be6a 	.word	0x0801be6a
 8007490:	08014b80 	.word	0x08014b80
 8007494:	08014c00 	.word	0x08014c00
 8007498:	3f99999a 	.word	0x3f99999a
 800749c:	447a0000 	.word	0x447a0000
 80074a0:	0801be7a 	.word	0x0801be7a
 80074a4:	00000513 	.word	0x00000513
 80074a8:	fffffc18 	.word	0xfffffc18
 80074ac:	42c80000 	.word	0x42c80000
 80074b0:	0801be8b 	.word	0x0801be8b
 80074b4:	c2c80000 	.word	0xc2c80000
 80074b8:	200003e8 	.word	0x200003e8
 80074bc:	0801bea2 	.word	0x0801bea2
 80074c0:	0801bef3 	.word	0x0801bef3
 80074c4:	0801bf0a 	.word	0x0801bf0a
 80074c8:	2e03      	cmp	r6, #3
 80074ca:	d912      	bls.n	80074f2 <calibrate.lto_priv.294+0x6ca>
 80074cc:	006b      	lsls	r3, r5, #1
 80074ce:	aa82      	add	r2, sp, #520	; 0x208
 80074d0:	5a9a      	ldrh	r2, [r3, r2]
 80074d2:	49bd      	ldr	r1, [pc, #756]	; (80077c8 <calibrate.lto_priv.294+0x9a0>)
 80074d4:	9203      	str	r2, [sp, #12]
 80074d6:	aa8f      	add	r2, sp, #572	; 0x23c
 80074d8:	5a9a      	ldrh	r2, [r3, r2]
 80074da:	2004      	movs	r0, #4
 80074dc:	9202      	str	r2, [sp, #8]
 80074de:	aa5b      	add	r2, sp, #364	; 0x16c
 80074e0:	5a9a      	ldrh	r2, [r3, r2]
 80074e2:	9201      	str	r2, [sp, #4]
 80074e4:	aa75      	add	r2, sp, #468	; 0x1d4
 80074e6:	5a9b      	ldrh	r3, [r3, r2]
 80074e8:	4ab8      	ldr	r2, [pc, #736]	; (80077cc <calibrate.lto_priv.294+0x9a4>)
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80074ee:	002b      	movs	r3, r5
 80074f0:	47a0      	blx	r4
 80074f2:	3501      	adds	r5, #1
 80074f4:	4cb6      	ldr	r4, [pc, #728]	; (80077d0 <calibrate.lto_priv.294+0x9a8>)
 80074f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074f8:	0023      	movs	r3, r4
 80074fa:	3330      	adds	r3, #48	; 0x30
 80074fc:	781e      	ldrb	r6, [r3, #0]
 80074fe:	b2ab      	uxth	r3, r5
 8007500:	429a      	cmp	r2, r3
 8007502:	d8e1      	bhi.n	80074c8 <calibrate.lto_priv.294+0x6a0>
 8007504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007506:	881d      	ldrh	r5, [r3, #0]
 8007508:	4bb2      	ldr	r3, [pc, #712]	; (80077d4 <calibrate.lto_priv.294+0x9ac>)
 800750a:	429d      	cmp	r5, r3
 800750c:	d825      	bhi.n	800755a <calibrate.lto_priv.294+0x732>
 800750e:	2e03      	cmp	r6, #3
 8007510:	d905      	bls.n	800751e <calibrate.lto_priv.294+0x6f6>
 8007512:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8007514:	002b      	movs	r3, r5
 8007516:	4ab0      	ldr	r2, [pc, #704]	; (80077d8 <calibrate.lto_priv.294+0x9b0>)
 8007518:	49ab      	ldr	r1, [pc, #684]	; (80077c8 <calibrate.lto_priv.294+0x9a0>)
 800751a:	2004      	movs	r0, #4
 800751c:	47a0      	blx	r4
 800751e:	4bac      	ldr	r3, [pc, #688]	; (80077d0 <calibrate.lto_priv.294+0x9a8>)
 8007520:	001a      	movs	r2, r3
 8007522:	3230      	adds	r2, #48	; 0x30
 8007524:	7812      	ldrb	r2, [r2, #0]
 8007526:	2a03      	cmp	r2, #3
 8007528:	d907      	bls.n	800753a <calibrate.lto_priv.294+0x712>
 800752a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800752c:	49ab      	ldr	r1, [pc, #684]	; (80077dc <calibrate.lto_priv.294+0x9b4>)
 800752e:	9200      	str	r2, [sp, #0]
 8007530:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007532:	4aab      	ldr	r2, [pc, #684]	; (80077e0 <calibrate.lto_priv.294+0x9b8>)
 8007534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007536:	2004      	movs	r0, #4
 8007538:	47a0      	blx	r4
 800753a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800753c:	3301      	adds	r3, #1
 800753e:	931d      	str	r3, [sp, #116]	; 0x74
 8007540:	2b0c      	cmp	r3, #12
 8007542:	d000      	beq.n	8007546 <calibrate.lto_priv.294+0x71e>
 8007544:	e6d1      	b.n	80072ea <calibrate.lto_priv.294+0x4c2>
 8007546:	3b0b      	subs	r3, #11
 8007548:	930e      	str	r3, [sp, #56]	; 0x38
 800754a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <calibrate.lto_priv.294+0x72c>
 8007550:	f000 fe14 	bl	800817c <calibrate.lto_priv.294+0x1354>
 8007554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007556:	9339      	str	r3, [sp, #228]	; 0xe4
 8007558:	e50b      	b.n	8006f72 <calibrate.lto_priv.294+0x14a>
 800755a:	4ba2      	ldr	r3, [pc, #648]	; (80077e4 <calibrate.lto_priv.294+0x9bc>)
 800755c:	18e8      	adds	r0, r5, r3
 800755e:	f006 f88b 	bl	800d678 <__aeabi_ui2f>
 8007562:	49a1      	ldr	r1, [pc, #644]	; (80077e8 <calibrate.lto_priv.294+0x9c0>)
 8007564:	f005 f928 	bl	800c7b8 <__aeabi_fmul>
 8007568:	21de      	movs	r1, #222	; 0xde
 800756a:	0589      	lsls	r1, r1, #22
 800756c:	f005 f924 	bl	800c7b8 <__aeabi_fmul>
 8007570:	1c01      	adds	r1, r0, #0
 8007572:	489d      	ldr	r0, [pc, #628]	; (80077e8 <calibrate.lto_priv.294+0x9c0>)
 8007574:	f005 fa52 	bl	800ca1c <__aeabi_fsub>
 8007578:	1c01      	adds	r1, r0, #0
 800757a:	489c      	ldr	r0, [pc, #624]	; (80077ec <calibrate.lto_priv.294+0x9c4>)
 800757c:	f005 fa4e 	bl	800ca1c <__aeabi_fsub>
 8007580:	4999      	ldr	r1, [pc, #612]	; (80077e8 <calibrate.lto_priv.294+0x9c0>)
 8007582:	f005 f807 	bl	800c594 <__aeabi_fdiv>
 8007586:	218f      	movs	r1, #143	; 0x8f
 8007588:	05c9      	lsls	r1, r1, #23
 800758a:	f005 f915 	bl	800c7b8 <__aeabi_fmul>
 800758e:	218e      	movs	r1, #142	; 0x8e
 8007590:	05c9      	lsls	r1, r1, #23
 8007592:	f004 fe65 	bl	800c260 <__aeabi_fadd>
 8007596:	f005 fe4f 	bl	800d238 <__aeabi_f2uiz>
 800759a:	b283      	uxth	r3, r0
 800759c:	9309      	str	r3, [sp, #36]	; 0x24
 800759e:	2e03      	cmp	r6, #3
 80075a0:	d904      	bls.n	80075ac <calibrate.lto_priv.294+0x784>
 80075a2:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80075a4:	4a92      	ldr	r2, [pc, #584]	; (80077f0 <calibrate.lto_priv.294+0x9c8>)
 80075a6:	4988      	ldr	r1, [pc, #544]	; (80077c8 <calibrate.lto_priv.294+0x9a0>)
 80075a8:	2004      	movs	r0, #4
 80075aa:	47a0      	blx	r4
 80075ac:	2400      	movs	r4, #0
 80075ae:	9410      	str	r4, [sp, #64]	; 0x40
 80075b0:	e00d      	b.n	80075ce <calibrate.lto_priv.294+0x7a6>
 80075b2:	ae82      	add	r6, sp, #520	; 0x208
 80075b4:	0063      	lsls	r3, r4, #1
 80075b6:	5b9b      	ldrh	r3, [r3, r6]
 80075b8:	4e8e      	ldr	r6, [pc, #568]	; (80077f4 <calibrate.lto_priv.294+0x9cc>)
 80075ba:	42b3      	cmp	r3, r6
 80075bc:	d847      	bhi.n	800764e <calibrate.lto_priv.294+0x826>
 80075be:	2803      	cmp	r0, #3
 80075c0:	d904      	bls.n	80075cc <calibrate.lto_priv.294+0x7a4>
 80075c2:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80075c4:	4a8c      	ldr	r2, [pc, #560]	; (80077f8 <calibrate.lto_priv.294+0x9d0>)
 80075c6:	4980      	ldr	r1, [pc, #512]	; (80077c8 <calibrate.lto_priv.294+0x9a0>)
 80075c8:	2004      	movs	r0, #4
 80075ca:	47b0      	blx	r6
 80075cc:	3401      	adds	r4, #1
 80075ce:	4980      	ldr	r1, [pc, #512]	; (80077d0 <calibrate.lto_priv.294+0x9a8>)
 80075d0:	b2a2      	uxth	r2, r4
 80075d2:	000b      	movs	r3, r1
 80075d4:	3330      	adds	r3, #48	; 0x30
 80075d6:	7818      	ldrb	r0, [r3, #0]
 80075d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075da:	429a      	cmp	r2, r3
 80075dc:	d3e9      	bcc.n	80075b2 <calibrate.lto_priv.294+0x78a>
 80075de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d932      	bls.n	800764a <calibrate.lto_priv.294+0x822>
 80075e4:	3b02      	subs	r3, #2
 80075e6:	b21b      	sxth	r3, r3
 80075e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	9318      	str	r3, [sp, #96]	; 0x60
 80075ee:	ac68      	add	r4, sp, #416	; 0x1a0
 80075f0:	ad82      	add	r5, sp, #520	; 0x208
 80075f2:	2300      	movs	r3, #0
 80075f4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80075f6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80075f8:	9315      	str	r3, [sp, #84]	; 0x54
 80075fa:	2900      	cmp	r1, #0
 80075fc:	da3b      	bge.n	8007676 <calibrate.lto_priv.294+0x84e>
 80075fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1f6      	bne.n	80075f2 <calibrate.lto_priv.294+0x7ca>
 8007604:	2201      	movs	r2, #1
 8007606:	a868      	add	r0, sp, #416	; 0x1a0
 8007608:	8803      	ldrh	r3, [r0, #0]
 800760a:	a982      	add	r1, sp, #520	; 0x208
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	5a5c      	ldrh	r4, [r3, r1]
 8007610:	4d7a      	ldr	r5, [pc, #488]	; (80077fc <calibrate.lto_priv.294+0x9d4>)
 8007612:	9209      	str	r2, [sp, #36]	; 0x24
 8007614:	0053      	lsls	r3, r2, #1
 8007616:	5a1b      	ldrh	r3, [r3, r0]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	5a5b      	ldrh	r3, [r3, r1]
 800761c:	429c      	cmp	r4, r3
 800761e:	d253      	bcs.n	80076c8 <calibrate.lto_priv.294+0x8a0>
 8007620:	1b1b      	subs	r3, r3, r4
 8007622:	b29b      	uxth	r3, r3
 8007624:	42ab      	cmp	r3, r5
 8007626:	d803      	bhi.n	8007630 <calibrate.lto_priv.294+0x808>
 8007628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762a:	3301      	adds	r3, #1
 800762c:	b29b      	uxth	r3, r3
 800762e:	9309      	str	r3, [sp, #36]	; 0x24
 8007630:	3201      	adds	r2, #1
 8007632:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007634:	b293      	uxth	r3, r2
 8007636:	429e      	cmp	r6, r3
 8007638:	d8ec      	bhi.n	8007614 <calibrate.lto_priv.294+0x7ec>
 800763a:	2200      	movs	r2, #0
 800763c:	0014      	movs	r4, r2
 800763e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007640:	3b01      	subs	r3, #1
 8007642:	429c      	cmp	r4, r3
 8007644:	d342      	bcc.n	80076cc <calibrate.lto_priv.294+0x8a4>
 8007646:	2a00      	cmp	r2, #0
 8007648:	d1f7      	bne.n	800763a <calibrate.lto_priv.294+0x812>
 800764a:	2400      	movs	r4, #0
 800764c:	e076      	b.n	800773c <calibrate.lto_priv.294+0x914>
 800764e:	4e6c      	ldr	r6, [pc, #432]	; (8007800 <calibrate.lto_priv.294+0x9d8>)
 8007650:	19ae      	adds	r6, r5, r6
 8007652:	42b3      	cmp	r3, r6
 8007654:	d904      	bls.n	8007660 <calibrate.lto_priv.294+0x838>
 8007656:	2803      	cmp	r0, #3
 8007658:	d9b8      	bls.n	80075cc <calibrate.lto_priv.294+0x7a4>
 800765a:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800765c:	4a69      	ldr	r2, [pc, #420]	; (8007804 <calibrate.lto_priv.294+0x9dc>)
 800765e:	e7b2      	b.n	80075c6 <calibrate.lto_priv.294+0x79e>
 8007660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007662:	a99c      	add	r1, sp, #624	; 0x270
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	18cb      	adds	r3, r1, r3
 8007668:	3bd0      	subs	r3, #208	; 0xd0
 800766a:	801a      	strh	r2, [r3, #0]
 800766c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800766e:	3301      	adds	r3, #1
 8007670:	b29b      	uxth	r3, r3
 8007672:	9310      	str	r3, [sp, #64]	; 0x40
 8007674:	e7aa      	b.n	80075cc <calibrate.lto_priv.294+0x7a4>
 8007676:	5b03      	ldrh	r3, [r0, r4]
 8007678:	1826      	adds	r6, r4, r0
 800767a:	930b      	str	r3, [sp, #44]	; 0x2c
 800767c:	8873      	ldrh	r3, [r6, #2]
 800767e:	469c      	mov	ip, r3
 8007680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	5b5a      	ldrh	r2, [r3, r5]
 8007686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007688:	4293      	cmp	r3, r2
 800768a:	d217      	bcs.n	80076bc <calibrate.lto_priv.294+0x894>
 800768c:	1ad2      	subs	r2, r2, r3
 800768e:	b293      	uxth	r3, r2
 8007690:	930c      	str	r3, [sp, #48]	; 0x30
 8007692:	4663      	mov	r3, ip
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	5aeb      	ldrh	r3, [r5, r3]
 8007698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800769a:	429a      	cmp	r2, r3
 800769c:	d211      	bcs.n	80076c2 <calibrate.lto_priv.294+0x89a>
 800769e:	1a9b      	subs	r3, r3, r2
 80076a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d905      	bls.n	80076b4 <calibrate.lto_priv.294+0x88c>
 80076a8:	4663      	mov	r3, ip
 80076aa:	5303      	strh	r3, [r0, r4]
 80076ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ae:	8073      	strh	r3, [r6, #2]
 80076b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076b2:	9315      	str	r3, [sp, #84]	; 0x54
 80076b4:	3901      	subs	r1, #1
 80076b6:	b209      	sxth	r1, r1
 80076b8:	3802      	subs	r0, #2
 80076ba:	e79e      	b.n	80075fa <calibrate.lto_priv.294+0x7d2>
 80076bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076be:	1a9a      	subs	r2, r3, r2
 80076c0:	e7e5      	b.n	800768e <calibrate.lto_priv.294+0x866>
 80076c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	e7eb      	b.n	80076a0 <calibrate.lto_priv.294+0x878>
 80076c8:	1ae3      	subs	r3, r4, r3
 80076ca:	e7aa      	b.n	8007622 <calibrate.lto_priv.294+0x7fa>
 80076cc:	0063      	lsls	r3, r4, #1
 80076ce:	a968      	add	r1, sp, #416	; 0x1a0
 80076d0:	18c8      	adds	r0, r1, r3
 80076d2:	ad68      	add	r5, sp, #416	; 0x1a0
 80076d4:	3302      	adds	r3, #2
 80076d6:	18eb      	adds	r3, r5, r3
 80076d8:	881d      	ldrh	r5, [r3, #0]
 80076da:	930b      	str	r3, [sp, #44]	; 0x2c
 80076dc:	006b      	lsls	r3, r5, #1
 80076de:	469c      	mov	ip, r3
 80076e0:	8801      	ldrh	r1, [r0, #0]
 80076e2:	ae8f      	add	r6, sp, #572	; 0x23c
 80076e4:	004b      	lsls	r3, r1, #1
 80076e6:	5b9b      	ldrh	r3, [r3, r6]
 80076e8:	930c      	str	r3, [sp, #48]	; 0x30
 80076ea:	4663      	mov	r3, ip
 80076ec:	5b9e      	ldrh	r6, [r3, r6]
 80076ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076f0:	42b3      	cmp	r3, r6
 80076f2:	d211      	bcs.n	8007718 <calibrate.lto_priv.294+0x8f0>
 80076f4:	4e36      	ldr	r6, [pc, #216]	; (80077d0 <calibrate.lto_priv.294+0x9a8>)
 80076f6:	0032      	movs	r2, r6
 80076f8:	3230      	adds	r2, #48	; 0x30
 80076fa:	7813      	ldrb	r3, [r2, #0]
 80076fc:	8005      	strh	r5, [r0, #0]
 80076fe:	469c      	mov	ip, r3
 8007700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007702:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007704:	8019      	strh	r1, [r3, #0]
 8007706:	4663      	mov	r3, ip
 8007708:	2b03      	cmp	r3, #3
 800770a:	d905      	bls.n	8007718 <calibrate.lto_priv.294+0x8f0>
 800770c:	4a3e      	ldr	r2, [pc, #248]	; (8007808 <calibrate.lto_priv.294+0x9e0>)
 800770e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8007710:	492d      	ldr	r1, [pc, #180]	; (80077c8 <calibrate.lto_priv.294+0x9a0>)
 8007712:	2004      	movs	r0, #4
 8007714:	4798      	blx	r3
 8007716:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007718:	3401      	adds	r4, #1
 800771a:	b2a4      	uxth	r4, r4
 800771c:	e78f      	b.n	800763e <calibrate.lto_priv.294+0x816>
 800771e:	2e03      	cmp	r6, #3
 8007720:	d90b      	bls.n	800773a <calibrate.lto_priv.294+0x912>
 8007722:	aa68      	add	r2, sp, #416	; 0x1a0
 8007724:	0063      	lsls	r3, r4, #1
 8007726:	5a9b      	ldrh	r3, [r3, r2]
 8007728:	aa82      	add	r2, sp, #520	; 0x208
 800772a:	0059      	lsls	r1, r3, #1
 800772c:	5a8a      	ldrh	r2, [r1, r2]
 800772e:	2004      	movs	r0, #4
 8007730:	9200      	str	r2, [sp, #0]
 8007732:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8007734:	4a35      	ldr	r2, [pc, #212]	; (800780c <calibrate.lto_priv.294+0x9e4>)
 8007736:	4924      	ldr	r1, [pc, #144]	; (80077c8 <calibrate.lto_priv.294+0x9a0>)
 8007738:	47a8      	blx	r5
 800773a:	3401      	adds	r4, #1
 800773c:	4d24      	ldr	r5, [pc, #144]	; (80077d0 <calibrate.lto_priv.294+0x9a8>)
 800773e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007740:	002b      	movs	r3, r5
 8007742:	3330      	adds	r3, #48	; 0x30
 8007744:	781e      	ldrb	r6, [r3, #0]
 8007746:	b2a3      	uxth	r3, r4
 8007748:	429a      	cmp	r2, r3
 800774a:	d8e8      	bhi.n	800771e <calibrate.lto_priv.294+0x8f6>
 800774c:	2a00      	cmp	r2, #0
 800774e:	d100      	bne.n	8007752 <calibrate.lto_priv.294+0x92a>
 8007750:	e6e5      	b.n	800751e <calibrate.lto_priv.294+0x6f6>
 8007752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007754:	4a2e      	ldr	r2, [pc, #184]	; (8007810 <calibrate.lto_priv.294+0x9e8>)
 8007756:	0059      	lsls	r1, r3, #1
 8007758:	4b2e      	ldr	r3, [pc, #184]	; (8007814 <calibrate.lto_priv.294+0x9ec>)
 800775a:	1852      	adds	r2, r2, r1
 800775c:	332a      	adds	r3, #42	; 0x2a
 800775e:	8890      	ldrh	r0, [r2, #4]
 8007760:	5acb      	ldrh	r3, [r1, r3]
 8007762:	1ac0      	subs	r0, r0, r3
 8007764:	b200      	sxth	r0, r0
 8007766:	f005 ff3d 	bl	800d5e4 <__aeabi_i2f>
 800776a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800776c:	1c04      	adds	r4, r0, #0
 800776e:	8818      	ldrh	r0, [r3, #0]
 8007770:	f005 ff82 	bl	800d678 <__aeabi_ui2f>
 8007774:	21de      	movs	r1, #222	; 0xde
 8007776:	0589      	lsls	r1, r1, #22
 8007778:	f005 f81e 	bl	800c7b8 <__aeabi_fmul>
 800777c:	21fc      	movs	r1, #252	; 0xfc
 800777e:	0589      	lsls	r1, r1, #22
 8007780:	f005 f94c 	bl	800ca1c <__aeabi_fsub>
 8007784:	4918      	ldr	r1, [pc, #96]	; (80077e8 <calibrate.lto_priv.294+0x9c0>)
 8007786:	f005 f817 	bl	800c7b8 <__aeabi_fmul>
 800778a:	4923      	ldr	r1, [pc, #140]	; (8007818 <calibrate.lto_priv.294+0x9f0>)
 800778c:	f005 f814 	bl	800c7b8 <__aeabi_fmul>
 8007790:	1c01      	adds	r1, r0, #0
 8007792:	1c20      	adds	r0, r4, #0
 8007794:	f005 f942 	bl	800ca1c <__aeabi_fsub>
 8007798:	f005 ff04 	bl	800d5a4 <__aeabi_f2iz>
 800779c:	2322      	movs	r3, #34	; 0x22
 800779e:	aa3e      	add	r2, sp, #248	; 0xf8
 80077a0:	189b      	adds	r3, r3, r2
 80077a2:	22e6      	movs	r2, #230	; 0xe6
 80077a4:	b204      	sxth	r4, r0
 80077a6:	801c      	strh	r4, [r3, #0]
 80077a8:	4b1c      	ldr	r3, [pc, #112]	; (800781c <calibrate.lto_priv.294+0x9f4>)
 80077aa:	0052      	lsls	r2, r2, #1
 80077ac:	18e3      	adds	r3, r4, r3
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d937      	bls.n	8007824 <calibrate.lto_priv.294+0x9fc>
 80077b4:	2e03      	cmp	r6, #3
 80077b6:	d800      	bhi.n	80077ba <calibrate.lto_priv.294+0x992>
 80077b8:	e6b1      	b.n	800751e <calibrate.lto_priv.294+0x6f6>
 80077ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80077bc:	4a18      	ldr	r2, [pc, #96]	; (8007820 <calibrate.lto_priv.294+0x9f8>)
 80077be:	4907      	ldr	r1, [pc, #28]	; (80077dc <calibrate.lto_priv.294+0x9b4>)
 80077c0:	2004      	movs	r0, #4
 80077c2:	4798      	blx	r3
 80077c4:	e6ab      	b.n	800751e <calibrate.lto_priv.294+0x6f6>
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	0801bef3 	.word	0x0801bef3
 80077cc:	0801bf1d 	.word	0x0801bf1d
 80077d0:	200003e8 	.word	0x200003e8
 80077d4:	000087cf 	.word	0x000087cf
 80077d8:	0801bf5f 	.word	0x0801bf5f
 80077dc:	0801bd71 	.word	0x0801bd71
 80077e0:	0801c437 	.word	0x0801c437
 80077e4:	ffff8000 	.word	0xffff8000
 80077e8:	3f99999a 	.word	0x3f99999a
 80077ec:	3f866666 	.word	0x3f866666
 80077f0:	0801bf84 	.word	0x0801bf84
 80077f4:	00001387 	.word	0x00001387
 80077f8:	0801bf94 	.word	0x0801bf94
 80077fc:	000007cf 	.word	0x000007cf
 8007800:	fffff830 	.word	0xfffff830
 8007804:	0801bfc2 	.word	0x0801bfc2
 8007808:	0801bff0 	.word	0x0801bff0
 800780c:	0801c021 	.word	0x0801c021
 8007810:	08014b80 	.word	0x08014b80
 8007814:	08014c00 	.word	0x08014c00
 8007818:	447a0000 	.word	0x447a0000
 800781c:	fffffcf4 	.word	0xfffffcf4
 8007820:	0801c043 	.word	0x0801c043
 8007824:	ab68      	add	r3, sp, #416	; 0x1a0
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	2105      	movs	r1, #5
 800782a:	005a      	lsls	r2, r3, #1
 800782c:	9309      	str	r3, [sp, #36]	; 0x24
 800782e:	ab5b      	add	r3, sp, #364	; 0x16c
 8007830:	5ad3      	ldrh	r3, [r2, r3]
 8007832:	0018      	movs	r0, r3
 8007834:	9315      	str	r3, [sp, #84]	; 0x54
 8007836:	f005 faf1 	bl	800ce1c <__udivsi3>
 800783a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800783c:	b2c0      	uxtb	r0, r0
 800783e:	0040      	lsls	r0, r0, #1
 8007840:	5ac0      	ldrh	r0, [r0, r3]
 8007842:	f005 ff19 	bl	800d678 <__aeabi_ui2f>
 8007846:	21de      	movs	r1, #222	; 0xde
 8007848:	0589      	lsls	r1, r1, #22
 800784a:	f004 ffb5 	bl	800c7b8 <__aeabi_fmul>
 800784e:	21fc      	movs	r1, #252	; 0xfc
 8007850:	0589      	lsls	r1, r1, #22
 8007852:	f005 f8e3 	bl	800ca1c <__aeabi_fsub>
 8007856:	49e1      	ldr	r1, [pc, #900]	; (8007bdc <calibrate.lto_priv.294+0xdb4>)
 8007858:	f004 ffae 	bl	800c7b8 <__aeabi_fmul>
 800785c:	49e0      	ldr	r1, [pc, #896]	; (8007be0 <calibrate.lto_priv.294+0xdb8>)
 800785e:	f004 ffab 	bl	800c7b8 <__aeabi_fmul>
 8007862:	900b      	str	r0, [sp, #44]	; 0x2c
 8007864:	0020      	movs	r0, r4
 8007866:	f005 febd 	bl	800d5e4 <__aeabi_i2f>
 800786a:	1c01      	adds	r1, r0, #0
 800786c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800786e:	f004 fcf7 	bl	800c260 <__aeabi_fadd>
 8007872:	f005 fe97 	bl	800d5a4 <__aeabi_f2iz>
 8007876:	ab47      	add	r3, sp, #284	; 0x11c
 8007878:	8018      	strh	r0, [r3, #0]
 800787a:	2e03      	cmp	r6, #3
 800787c:	d907      	bls.n	800788e <calibrate.lto_priv.294+0xa66>
 800787e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007880:	4ad8      	ldr	r2, [pc, #864]	; (8007be4 <calibrate.lto_priv.294+0xdbc>)
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8007886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007888:	49d7      	ldr	r1, [pc, #860]	; (8007be8 <calibrate.lto_priv.294+0xdc0>)
 800788a:	2004      	movs	r0, #4
 800788c:	47a0      	blx	r4
 800788e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007890:	48d6      	ldr	r0, [pc, #856]	; (8007bec <calibrate.lto_priv.294+0xdc4>)
 8007892:	f003 f95e 	bl	800ab52 <acc_diagnostic_log_set_parameter>
 8007896:	4dd6      	ldr	r5, [pc, #856]	; (8007bf0 <calibrate.lto_priv.294+0xdc8>)
 8007898:	48d6      	ldr	r0, [pc, #856]	; (8007bf4 <calibrate.lto_priv.294+0xdcc>)
 800789a:	0029      	movs	r1, r5
 800789c:	ac47      	add	r4, sp, #284	; 0x11c
 800789e:	f003 f957 	bl	800ab50 <acc_diagnostic_log_array>
 80078a2:	0020      	movs	r0, r4
 80078a4:	f001 fcc7 	bl	8009236 <acc_diagnostic_log_data_i16.constprop.20>
 80078a8:	0029      	movs	r1, r5
 80078aa:	48d3      	ldr	r0, [pc, #844]	; (8007bf8 <calibrate.lto_priv.294+0xdd0>)
 80078ac:	f003 f950 	bl	800ab50 <acc_diagnostic_log_array>
 80078b0:	2022      	movs	r0, #34	; 0x22
 80078b2:	ab3e      	add	r3, sp, #248	; 0xf8
 80078b4:	18c0      	adds	r0, r0, r3
 80078b6:	f001 fcbe 	bl	8009236 <acc_diagnostic_log_data_i16.constprop.20>
 80078ba:	4ad0      	ldr	r2, [pc, #832]	; (8007bfc <calibrate.lto_priv.294+0xdd4>)
 80078bc:	8823      	ldrh	r3, [r4, #0]
 80078be:	189b      	adds	r3, r3, r2
 80078c0:	2200      	movs	r2, #0
 80078c2:	9226      	str	r2, [sp, #152]	; 0x98
 80078c4:	2bc8      	cmp	r3, #200	; 0xc8
 80078c6:	d800      	bhi.n	80078ca <calibrate.lto_priv.294+0xaa2>
 80078c8:	e1e7      	b.n	8007c9a <calibrate.lto_priv.294+0xe72>
 80078ca:	4bcd      	ldr	r3, [pc, #820]	; (8007c00 <calibrate.lto_priv.294+0xdd8>)
 80078cc:	001a      	movs	r2, r3
 80078ce:	3230      	adds	r2, #48	; 0x30
 80078d0:	7812      	ldrb	r2, [r2, #0]
 80078d2:	2a03      	cmp	r2, #3
 80078d4:	d800      	bhi.n	80078d8 <calibrate.lto_priv.294+0xab0>
 80078d6:	e622      	b.n	800751e <calibrate.lto_priv.294+0x6f6>
 80078d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078da:	4aca      	ldr	r2, [pc, #808]	; (8007c04 <calibrate.lto_priv.294+0xddc>)
 80078dc:	e76f      	b.n	80077be <calibrate.lto_priv.294+0x996>
 80078de:	2203      	movs	r2, #3
 80078e0:	2501      	movs	r5, #1
 80078e2:	2300      	movs	r3, #0
 80078e4:	e1f7      	b.n	8007cd6 <calibrate.lto_priv.294+0xeae>
 80078e6:	003b      	movs	r3, r7
 80078e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80078ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078ee:	9d8f      	ldr	r5, [sp, #572]	; 0x23c
 80078f0:	f003 fdde 	bl	800b4b0 <acc_cpd_linear_sweep_load_program>
 80078f4:	9022      	str	r0, [sp, #136]	; 0x88
 80078f6:	901f      	str	r0, [sp, #124]	; 0x7c
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d100      	bne.n	80078fe <calibrate.lto_priv.294+0xad6>
 80078fc:	e26a      	b.n	8007dd4 <calibrate.lto_priv.294+0xfac>
 80078fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d000      	beq.n	8007906 <calibrate.lto_priv.294+0xade>
 8007904:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8007906:	0030      	movs	r0, r6
 8007908:	f005 feb6 	bl	800d678 <__aeabi_ui2f>
 800790c:	1c01      	adds	r1, r0, #0
 800790e:	48be      	ldr	r0, [pc, #760]	; (8007c08 <calibrate.lto_priv.294+0xde0>)
 8007910:	f004 fe40 	bl	800c594 <__aeabi_fdiv>
 8007914:	f005 fc90 	bl	800d238 <__aeabi_f2uiz>
 8007918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800791a:	b280      	uxth	r0, r0
 800791c:	3301      	adds	r3, #1
 800791e:	b29b      	uxth	r3, r3
 8007920:	4343      	muls	r3, r0
 8007922:	931e      	str	r3, [sp, #120]	; 0x78
 8007924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007926:	22d0      	movs	r2, #208	; 0xd0
 8007928:	18ed      	adds	r5, r5, r3
 800792a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800792c:	2105      	movs	r1, #5
 800792e:	18eb      	adds	r3, r5, r3
 8007930:	9334      	str	r3, [sp, #208]	; 0xd0
 8007932:	2301      	movs	r3, #1
 8007934:	4023      	ands	r3, r4
 8007936:	9317      	str	r3, [sp, #92]	; 0x5c
 8007938:	466b      	mov	r3, sp
 800793a:	189b      	adds	r3, r3, r2
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8007940:	3303      	adds	r3, #3
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	9342      	str	r3, [sp, #264]	; 0x108
 8007946:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007948:	2500      	movs	r5, #0
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	9324      	str	r3, [sp, #144]	; 0x90
 800794e:	f005 fa65 	bl	800ce1c <__udivsi3>
 8007952:	2305      	movs	r3, #5
 8007954:	0002      	movs	r2, r0
 8007956:	002c      	movs	r4, r5
 8007958:	435a      	muls	r2, r3
 800795a:	0843      	lsrs	r3, r0, #1
 800795c:	9336      	str	r3, [sp, #216]	; 0xd8
 800795e:	3308      	adds	r3, #8
 8007960:	9337      	str	r3, [sp, #220]	; 0xdc
 8007962:	0053      	lsls	r3, r2, #1
 8007964:	9344      	str	r3, [sp, #272]	; 0x110
 8007966:	0043      	lsls	r3, r0, #1
 8007968:	9345      	str	r3, [sp, #276]	; 0x114
 800796a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800796c:	9018      	str	r0, [sp, #96]	; 0x60
 800796e:	9220      	str	r2, [sp, #128]	; 0x80
 8007970:	9335      	str	r3, [sp, #212]	; 0xd4
 8007972:	950c      	str	r5, [sp, #48]	; 0x30
 8007974:	2c00      	cmp	r4, #0
 8007976:	d03c      	beq.n	80079f2 <calibrate.lto_priv.294+0xbca>
 8007978:	980a      	ldr	r0, [sp, #40]	; 0x28
 800797a:	f7fb f937 	bl	8002bec <acc_sensor_protocol_r2_is_sensor_running>
 800797e:	2800      	cmp	r0, #0
 8007980:	d02c      	beq.n	80079dc <calibrate.lto_priv.294+0xbb4>
 8007982:	4b9f      	ldr	r3, [pc, #636]	; (8007c00 <calibrate.lto_priv.294+0xdd8>)
 8007984:	4aa1      	ldr	r2, [pc, #644]	; (8007c0c <calibrate.lto_priv.294+0xde4>)
 8007986:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007988:	4997      	ldr	r1, [pc, #604]	; (8007be8 <calibrate.lto_priv.294+0xdc0>)
 800798a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798c:	2000      	movs	r0, #0
 800798e:	47a0      	blx	r4
 8007990:	2d00      	cmp	r5, #0
 8007992:	d100      	bne.n	8007996 <calibrate.lto_priv.294+0xb6e>
 8007994:	e21e      	b.n	8007dd4 <calibrate.lto_priv.294+0xfac>
 8007996:	2500      	movs	r5, #0
 8007998:	2322      	movs	r3, #34	; 0x22
 800799a:	aa3e      	add	r2, sp, #248	; 0xf8
 800799c:	189b      	adds	r3, r3, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	5e9b      	ldrsh	r3, [r3, r2]
 80079a2:	9333      	str	r3, [sp, #204]	; 0xcc
 80079a4:	ab47      	add	r3, sp, #284	; 0x11c
 80079a6:	2200      	movs	r2, #0
 80079a8:	5e9b      	ldrsh	r3, [r3, r2]
 80079aa:	9332      	str	r3, [sp, #200]	; 0xc8
 80079ac:	4b94      	ldr	r3, [pc, #592]	; (8007c00 <calibrate.lto_priv.294+0xdd8>)
 80079ae:	001a      	movs	r2, r3
 80079b0:	3230      	adds	r2, #48	; 0x30
 80079b2:	7812      	ldrb	r2, [r2, #0]
 80079b4:	2a03      	cmp	r2, #3
 80079b6:	d907      	bls.n	80079c8 <calibrate.lto_priv.294+0xba0>
 80079b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079ba:	498b      	ldr	r1, [pc, #556]	; (8007be8 <calibrate.lto_priv.294+0xdc0>)
 80079bc:	9200      	str	r2, [sp, #0]
 80079be:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80079c0:	4a93      	ldr	r2, [pc, #588]	; (8007c10 <calibrate.lto_priv.294+0xde8>)
 80079c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079c4:	2004      	movs	r0, #4
 80079c6:	47a0      	blx	r4
 80079c8:	2d00      	cmp	r5, #0
 80079ca:	d000      	beq.n	80079ce <calibrate.lto_priv.294+0xba6>
 80079cc:	e39a      	b.n	8008104 <calibrate.lto_priv.294+0x12dc>
 80079ce:	2300      	movs	r3, #0
 80079d0:	2200      	movs	r2, #0
 80079d2:	930e      	str	r3, [sp, #56]	; 0x38
 80079d4:	932f      	str	r3, [sp, #188]	; 0xbc
 80079d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079d8:	921f      	str	r2, [sp, #124]	; 0x7c
 80079da:	e3b2      	b.n	8008142 <calibrate.lto_priv.294+0x131a>
 80079dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d110      	bne.n	8007a04 <calibrate.lto_priv.294+0xbdc>
 80079e2:	2301      	movs	r3, #1
 80079e4:	4a8b      	ldr	r2, [pc, #556]	; (8007c14 <calibrate.lto_priv.294+0xdec>)
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	498b      	ldr	r1, [pc, #556]	; (8007c18 <calibrate.lto_priv.294+0xdf0>)
 80079ea:	3371      	adds	r3, #113	; 0x71
 80079ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079ee:	f001 fc23 	bl	8009238 <acc_confprogram_live_patch.constprop.16>
 80079f2:	498a      	ldr	r1, [pc, #552]	; (8007c1c <calibrate.lto_priv.294+0xdf4>)
 80079f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079f6:	f7fb f906 	bl	8002c06 <acc_sensor_protocol_r2_run_program>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d0c8      	beq.n	8007990 <calibrate.lto_priv.294+0xb68>
 80079fe:	2300      	movs	r3, #0
 8007a00:	9321      	str	r3, [sp, #132]	; 0x84
 8007a02:	e223      	b.n	8007e4c <calibrate.lto_priv.294+0x1024>
 8007a04:	4e83      	ldr	r6, [pc, #524]	; (8007c14 <calibrate.lto_priv.294+0xdec>)
 8007a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a08:	0032      	movs	r2, r6
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	4982      	ldr	r1, [pc, #520]	; (8007c18 <calibrate.lto_priv.294+0xdf0>)
 8007a0e:	2344      	movs	r3, #68	; 0x44
 8007a10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a12:	f001 fc11 	bl	8009238 <acc_confprogram_live_patch.constprop.16>
 8007a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a18:	0032      	movs	r2, r6
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	497e      	ldr	r1, [pc, #504]	; (8007c18 <calibrate.lto_priv.294+0xdf0>)
 8007a1e:	2342      	movs	r3, #66	; 0x42
 8007a20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a22:	f001 fc09 	bl	8009238 <acc_confprogram_live_patch.constprop.16>
 8007a26:	2c00      	cmp	r4, #0
 8007a28:	d0e3      	beq.n	80079f2 <calibrate.lto_priv.294+0xbca>
 8007a2a:	e7da      	b.n	80079e2 <calibrate.lto_priv.294+0xbba>
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d904      	bls.n	8007a3a <calibrate.lto_priv.294+0xc12>
 8007a30:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8007a32:	496d      	ldr	r1, [pc, #436]	; (8007be8 <calibrate.lto_priv.294+0xdc0>)
 8007a34:	4a7a      	ldr	r2, [pc, #488]	; (8007c20 <calibrate.lto_priv.294+0xdf8>)
 8007a36:	2004      	movs	r0, #4
 8007a38:	4798      	blx	r3
 8007a3a:	4a7a      	ldr	r2, [pc, #488]	; (8007c24 <calibrate.lto_priv.294+0xdfc>)
 8007a3c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8007a3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a40:	f003 f8a8 	bl	800ab94 <acc_alg_basic_saturation_check_u16>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d012      	beq.n	8007a6e <calibrate.lto_priv.294+0xc46>
 8007a48:	4a6d      	ldr	r2, [pc, #436]	; (8007c00 <calibrate.lto_priv.294+0xdd8>)
 8007a4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a4c:	0013      	movs	r3, r2
 8007a4e:	3330      	adds	r3, #48	; 0x30
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	290f      	cmp	r1, #15
 8007a54:	d000      	beq.n	8007a58 <calibrate.lto_priv.294+0xc30>
 8007a56:	e1ce      	b.n	8007df6 <calibrate.lto_priv.294+0xfce>
 8007a58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a5a:	2900      	cmp	r1, #0
 8007a5c:	d100      	bne.n	8007a60 <calibrate.lto_priv.294+0xc38>
 8007a5e:	e1be      	b.n	8007dde <calibrate.lto_priv.294+0xfb6>
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d904      	bls.n	8007a6e <calibrate.lto_priv.294+0xc46>
 8007a64:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8007a66:	4960      	ldr	r1, [pc, #384]	; (8007be8 <calibrate.lto_priv.294+0xdc0>)
 8007a68:	4a6f      	ldr	r2, [pc, #444]	; (8007c28 <calibrate.lto_priv.294+0xe00>)
 8007a6a:	2004      	movs	r0, #4
 8007a6c:	4798      	blx	r3
 8007a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a70:	4a6e      	ldr	r2, [pc, #440]	; (8007c2c <calibrate.lto_priv.294+0xe04>)
 8007a72:	9343      	str	r3, [sp, #268]	; 0x10c
 8007a74:	9b92      	ldr	r3, [sp, #584]	; 0x248
 8007a76:	496e      	ldr	r1, [pc, #440]	; (8007c30 <calibrate.lto_priv.294+0xe08>)
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	5b9b      	ldrh	r3, [r3, r6]
 8007a7c:	312a      	adds	r1, #42	; 0x2a
 8007a7e:	9311      	str	r3, [sp, #68]	; 0x44
 8007a80:	9b93      	ldr	r3, [sp, #588]	; 0x24c
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	5b9b      	ldrh	r3, [r3, r6]
 8007a86:	9338      	str	r3, [sp, #224]	; 0xe0
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	18d2      	adds	r2, r2, r3
 8007a8e:	8892      	ldrh	r2, [r2, #4]
 8007a90:	5a5b      	ldrh	r3, [r3, r1]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	b21b      	sxth	r3, r3
 8007a96:	0018      	movs	r0, r3
 8007a98:	930c      	str	r3, [sp, #48]	; 0x30
 8007a9a:	f005 fda3 	bl	800d5e4 <__aeabi_i2f>
 8007a9e:	9b91      	ldr	r3, [sp, #580]	; 0x244
 8007aa0:	1c04      	adds	r4, r0, #0
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	5b98      	ldrh	r0, [r3, r6]
 8007aa6:	f005 fde7 	bl	800d678 <__aeabi_ui2f>
 8007aaa:	21de      	movs	r1, #222	; 0xde
 8007aac:	0589      	lsls	r1, r1, #22
 8007aae:	f004 fe83 	bl	800c7b8 <__aeabi_fmul>
 8007ab2:	21fc      	movs	r1, #252	; 0xfc
 8007ab4:	0589      	lsls	r1, r1, #22
 8007ab6:	f004 ffb1 	bl	800ca1c <__aeabi_fsub>
 8007aba:	4948      	ldr	r1, [pc, #288]	; (8007bdc <calibrate.lto_priv.294+0xdb4>)
 8007abc:	f004 fe7c 	bl	800c7b8 <__aeabi_fmul>
 8007ac0:	4947      	ldr	r1, [pc, #284]	; (8007be0 <calibrate.lto_priv.294+0xdb8>)
 8007ac2:	f004 fe79 	bl	800c7b8 <__aeabi_fmul>
 8007ac6:	1c01      	adds	r1, r0, #0
 8007ac8:	1c20      	adds	r0, r4, #0
 8007aca:	f004 ffa7 	bl	800ca1c <__aeabi_fsub>
 8007ace:	f005 fd69 	bl	800d5a4 <__aeabi_f2iz>
 8007ad2:	ab3e      	add	r3, sp, #248	; 0xf8
 8007ad4:	b206      	sxth	r6, r0
 8007ad6:	84de      	strh	r6, [r3, #38]	; 0x26
 8007ad8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007ada:	f005 fdcd 	bl	800d678 <__aeabi_ui2f>
 8007ade:	21de      	movs	r1, #222	; 0xde
 8007ae0:	0589      	lsls	r1, r1, #22
 8007ae2:	f004 fe69 	bl	800c7b8 <__aeabi_fmul>
 8007ae6:	21fc      	movs	r1, #252	; 0xfc
 8007ae8:	0589      	lsls	r1, r1, #22
 8007aea:	f004 ff97 	bl	800ca1c <__aeabi_fsub>
 8007aee:	493b      	ldr	r1, [pc, #236]	; (8007bdc <calibrate.lto_priv.294+0xdb4>)
 8007af0:	f004 fe62 	bl	800c7b8 <__aeabi_fmul>
 8007af4:	493a      	ldr	r1, [pc, #232]	; (8007be0 <calibrate.lto_priv.294+0xdb8>)
 8007af6:	f004 fe5f 	bl	800c7b8 <__aeabi_fmul>
 8007afa:	9011      	str	r0, [sp, #68]	; 0x44
 8007afc:	0030      	movs	r0, r6
 8007afe:	f005 fd71 	bl	800d5e4 <__aeabi_i2f>
 8007b02:	1c01      	adds	r1, r0, #0
 8007b04:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007b06:	f004 fbab 	bl	800c260 <__aeabi_fadd>
 8007b0a:	f005 fd4b 	bl	800d5a4 <__aeabi_f2iz>
 8007b0e:	ac75      	add	r4, sp, #468	; 0x1d4
 8007b10:	8020      	strh	r0, [r4, #0]
 8007b12:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8007b14:	f005 fdb0 	bl	800d678 <__aeabi_ui2f>
 8007b18:	21de      	movs	r1, #222	; 0xde
 8007b1a:	0589      	lsls	r1, r1, #22
 8007b1c:	f004 fe4c 	bl	800c7b8 <__aeabi_fmul>
 8007b20:	21fc      	movs	r1, #252	; 0xfc
 8007b22:	0589      	lsls	r1, r1, #22
 8007b24:	f004 ff7a 	bl	800ca1c <__aeabi_fsub>
 8007b28:	492c      	ldr	r1, [pc, #176]	; (8007bdc <calibrate.lto_priv.294+0xdb4>)
 8007b2a:	f004 fe45 	bl	800c7b8 <__aeabi_fmul>
 8007b2e:	492c      	ldr	r1, [pc, #176]	; (8007be0 <calibrate.lto_priv.294+0xdb8>)
 8007b30:	f004 fe42 	bl	800c7b8 <__aeabi_fmul>
 8007b34:	f005 fd36 	bl	800d5a4 <__aeabi_f2iz>
 8007b38:	2288      	movs	r2, #136	; 0x88
 8007b3a:	4e2d      	ldr	r6, [pc, #180]	; (8007bf0 <calibrate.lto_priv.294+0xdc8>)
 8007b3c:	0052      	lsls	r2, r2, #1
 8007b3e:	ab3e      	add	r3, sp, #248	; 0xf8
 8007b40:	189b      	adds	r3, r3, r2
 8007b42:	8018      	strh	r0, [r3, #0]
 8007b44:	0031      	movs	r1, r6
 8007b46:	483b      	ldr	r0, [pc, #236]	; (8007c34 <calibrate.lto_priv.294+0xe0c>)
 8007b48:	f003 f802 	bl	800ab50 <acc_diagnostic_log_array>
 8007b4c:	2326      	movs	r3, #38	; 0x26
 8007b4e:	aa3e      	add	r2, sp, #248	; 0xf8
 8007b50:	189b      	adds	r3, r3, r2
 8007b52:	0018      	movs	r0, r3
 8007b54:	f001 fb6f 	bl	8009236 <acc_diagnostic_log_data_i16.constprop.20>
 8007b58:	0031      	movs	r1, r6
 8007b5a:	4836      	ldr	r0, [pc, #216]	; (8007c34 <calibrate.lto_priv.294+0xe0c>)
 8007b5c:	f002 fff8 	bl	800ab50 <acc_diagnostic_log_array>
 8007b60:	0020      	movs	r0, r4
 8007b62:	f001 fb68 	bl	8009236 <acc_diagnostic_log_data_i16.constprop.20>
 8007b66:	0031      	movs	r1, r6
 8007b68:	4833      	ldr	r0, [pc, #204]	; (8007c38 <calibrate.lto_priv.294+0xe10>)
 8007b6a:	f002 fff1 	bl	800ab50 <acc_diagnostic_log_array>
 8007b6e:	a882      	add	r0, sp, #520	; 0x208
 8007b70:	f001 fb61 	bl	8009236 <acc_diagnostic_log_data_i16.constprop.20>
 8007b74:	ab3e      	add	r3, sp, #248	; 0xf8
 8007b76:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8007b78:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8007b7a:	1a9b      	subs	r3, r3, r2
 8007b7c:	b21b      	sxth	r3, r3
 8007b7e:	17d9      	asrs	r1, r3, #31
 8007b80:	185b      	adds	r3, r3, r1
 8007b82:	404b      	eors	r3, r1
 8007b84:	b21b      	sxth	r3, r3
 8007b86:	2b64      	cmp	r3, #100	; 0x64
 8007b88:	dd00      	ble.n	8007b8c <calibrate.lto_priv.294+0xd64>
 8007b8a:	e148      	b.n	8007e1e <calibrate.lto_priv.294+0xff6>
 8007b8c:	4b2b      	ldr	r3, [pc, #172]	; (8007c3c <calibrate.lto_priv.294+0xe14>)
 8007b8e:	18d2      	adds	r2, r2, r3
 8007b90:	23e6      	movs	r3, #230	; 0xe6
 8007b92:	b292      	uxth	r2, r2
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d900      	bls.n	8007b9c <calibrate.lto_priv.294+0xd74>
 8007b9a:	e140      	b.n	8007e1e <calibrate.lto_priv.294+0xff6>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	5ee2      	ldrsh	r2, [r4, r3]
 8007ba0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	b21b      	sxth	r3, r3
 8007ba6:	17d9      	asrs	r1, r3, #31
 8007ba8:	185b      	adds	r3, r3, r1
 8007baa:	404b      	eors	r3, r1
 8007bac:	b21b      	sxth	r3, r3
 8007bae:	2b64      	cmp	r3, #100	; 0x64
 8007bb0:	dd00      	ble.n	8007bb4 <calibrate.lto_priv.294+0xd8c>
 8007bb2:	e134      	b.n	8007e1e <calibrate.lto_priv.294+0xff6>
 8007bb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	da00      	bge.n	8007bbc <calibrate.lto_priv.294+0xd94>
 8007bba:	e130      	b.n	8007e1e <calibrate.lto_priv.294+0xff6>
 8007bbc:	4920      	ldr	r1, [pc, #128]	; (8007c40 <calibrate.lto_priv.294+0xe18>)
 8007bbe:	4821      	ldr	r0, [pc, #132]	; (8007c44 <calibrate.lto_priv.294+0xe1c>)
 8007bc0:	f002 ffc6 	bl	800ab50 <acc_diagnostic_log_array>
 8007bc4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007bc6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007bc8:	f002 ffc0 	bl	800ab4c <acc_diagnostic_log_data_u16>
 8007bcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d000      	beq.n	8007bd4 <calibrate.lto_priv.294+0xdac>
 8007bd2:	e163      	b.n	8007e9c <calibrate.lto_priv.294+0x1074>
 8007bd4:	2124      	movs	r1, #36	; 0x24
 8007bd6:	481c      	ldr	r0, [pc, #112]	; (8007c48 <calibrate.lto_priv.294+0xe20>)
 8007bd8:	f7fa fe74 	bl	80028c4 <acc_assert_fail>
 8007bdc:	3f99999a 	.word	0x3f99999a
 8007be0:	447a0000 	.word	0x447a0000
 8007be4:	0801c069 	.word	0x0801c069
 8007be8:	0801bd71 	.word	0x0801bd71
 8007bec:	0801c097 	.word	0x0801c097
 8007bf0:	0801c081 	.word	0x0801c081
 8007bf4:	0801c0a3 	.word	0x0801c0a3
 8007bf8:	0801c0aa 	.word	0x0801c0aa
 8007bfc:	fffffbe6 	.word	0xfffffbe6
 8007c00:	200003e8 	.word	0x200003e8
 8007c04:	0801c0b2 	.word	0x0801c0b2
 8007c08:	42f80000 	.word	0x42f80000
 8007c0c:	0801c0f5 	.word	0x0801c0f5
 8007c10:	0801c3a9 	.word	0x0801c3a9
 8007c14:	08018a34 	.word	0x08018a34
 8007c18:	08019be0 	.word	0x08019be0
 8007c1c:	0000023a 	.word	0x0000023a
 8007c20:	0801c14d 	.word	0x0801c14d
 8007c24:	402ca8ad 	.word	0x402ca8ad
 8007c28:	0801c19d 	.word	0x0801c19d
 8007c2c:	08014b80 	.word	0x08014b80
 8007c30:	08014c00 	.word	0x08014c00
 8007c34:	0801c219 	.word	0x0801c219
 8007c38:	0801c227 	.word	0x0801c227
 8007c3c:	fffffcf4 	.word	0xfffffcf4
 8007c40:	0801c235 	.word	0x0801c235
 8007c44:	0801c263 	.word	0x0801c263
 8007c48:	0801c2b5 	.word	0x0801c2b5
 8007c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c4e:	2a08      	cmp	r2, #8
 8007c50:	d200      	bcs.n	8007c54 <calibrate.lto_priv.294+0xe2c>
 8007c52:	2208      	movs	r2, #8
 8007c54:	3a08      	subs	r2, #8
 8007c56:	9209      	str	r2, [sp, #36]	; 0x24
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d907      	bls.n	8007c6c <calibrate.lto_priv.294+0xe44>
 8007c5c:	4bd6      	ldr	r3, [pc, #856]	; (8007fb8 <calibrate.lto_priv.294+0x1190>)
 8007c5e:	49d7      	ldr	r1, [pc, #860]	; (8007fbc <calibrate.lto_priv.294+0x1194>)
 8007c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c62:	2004      	movs	r0, #4
 8007c64:	001e      	movs	r6, r3
 8007c66:	0013      	movs	r3, r2
 8007c68:	4ad5      	ldr	r2, [pc, #852]	; (8007fc0 <calibrate.lto_priv.294+0x1198>)
 8007c6a:	47b0      	blx	r6
 8007c6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c6e:	f003 fb13 	bl	800b298 <acc_sensor_protocol_r2_stop.constprop.25>
 8007c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d000      	beq.n	8007c7a <calibrate.lto_priv.294+0xe52>
 8007c78:	e67e      	b.n	8007978 <calibrate.lto_priv.294+0xb50>
 8007c7a:	2c00      	cmp	r4, #0
 8007c7c:	d000      	beq.n	8007c80 <calibrate.lto_priv.294+0xe58>
 8007c7e:	e679      	b.n	8007974 <calibrate.lto_priv.294+0xb4c>
 8007c80:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d100      	bne.n	8007c88 <calibrate.lto_priv.294+0xe60>
 8007c86:	e683      	b.n	8007990 <calibrate.lto_priv.294+0xb68>
 8007c88:	2d00      	cmp	r5, #0
 8007c8a:	d000      	beq.n	8007c8e <calibrate.lto_priv.294+0xe66>
 8007c8c:	e684      	b.n	8007998 <calibrate.lto_priv.294+0xb70>
 8007c8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d100      	bne.n	8007c96 <calibrate.lto_priv.294+0xe6e>
 8007c94:	e260      	b.n	8008158 <calibrate.lto_priv.294+0x1330>
 8007c96:	2301      	movs	r3, #1
 8007c98:	9326      	str	r3, [sp, #152]	; 0x98
 8007c9a:	4bca      	ldr	r3, [pc, #808]	; (8007fc4 <calibrate.lto_priv.294+0x119c>)
 8007c9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c9e:	3332      	adds	r3, #50	; 0x32
 8007ca0:	5cd3      	ldrb	r3, [r2, r3]
 8007ca2:	48c9      	ldr	r0, [pc, #804]	; (8007fc8 <calibrate.lto_priv.294+0x11a0>)
 8007ca4:	0019      	movs	r1, r3
 8007ca6:	9323      	str	r3, [sp, #140]	; 0x8c
 8007ca8:	f002 ff53 	bl	800ab52 <acc_diagnostic_log_set_parameter>
 8007cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cae:	228c      	movs	r2, #140	; 0x8c
 8007cb0:	9331      	str	r3, [sp, #196]	; 0xc4
 8007cb2:	466b      	mov	r3, sp
 8007cb4:	189b      	adds	r3, r3, r2
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	009c      	lsls	r4, r3, #2
 8007cba:	0020      	movs	r0, r4
 8007cbc:	303e      	adds	r0, #62	; 0x3e
 8007cbe:	9325      	str	r3, [sp, #148]	; 0x94
 8007cc0:	287b      	cmp	r0, #123	; 0x7b
 8007cc2:	d800      	bhi.n	8007cc6 <calibrate.lto_priv.294+0xe9e>
 8007cc4:	e60b      	b.n	80078de <calibrate.lto_priv.294+0xab6>
 8007cc6:	217c      	movs	r1, #124	; 0x7c
 8007cc8:	f005 f92e 	bl	800cf28 <__aeabi_uidivmod>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2301      	movs	r3, #1
 8007cd0:	0015      	movs	r5, r2
 8007cd2:	0020      	movs	r0, r4
 8007cd4:	b28c      	uxth	r4, r1
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8007cda:	428e      	cmp	r6, r1
 8007cdc:	d000      	beq.n	8007ce0 <calibrate.lto_priv.294+0xeb8>
 8007cde:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8007ce0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ce8:	0013      	movs	r3, r2
 8007cea:	62bc      	str	r4, [r7, #40]	; 0x28
 8007cec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007cee:	2400      	movs	r4, #0
 8007cf0:	2003      	movs	r0, #3
 8007cf2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8007cf4:	438b      	bics	r3, r1
 8007cf6:	603e      	str	r6, [r7, #0]
 8007cf8:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8007cfa:	6378      	str	r0, [r7, #52]	; 0x34
 8007cfc:	607e      	str	r6, [r7, #4]
 8007cfe:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8007d00:	63bd      	str	r5, [r7, #56]	; 0x38
 8007d02:	60be      	str	r6, [r7, #8]
 8007d04:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8007d06:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007d08:	81be      	strh	r6, [r7, #12]
 8007d0a:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8007d0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d0e:	613e      	str	r6, [r7, #16]
 8007d10:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8007d12:	647c      	str	r4, [r7, #68]	; 0x44
 8007d14:	617e      	str	r6, [r7, #20]
 8007d16:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007d18:	64bc      	str	r4, [r7, #72]	; 0x48
 8007d1a:	61be      	str	r6, [r7, #24]
 8007d1c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007d1e:	653c      	str	r4, [r7, #80]	; 0x50
 8007d20:	61fe      	str	r6, [r7, #28]
 8007d22:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007d24:	657c      	str	r4, [r7, #84]	; 0x54
 8007d26:	623e      	str	r6, [r7, #32]
 8007d28:	65fc      	str	r4, [r7, #92]	; 0x5c
 8007d2a:	663c      	str	r4, [r7, #96]	; 0x60
 8007d2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d2e:	2316      	movs	r3, #22
 8007d30:	1d3d      	adds	r5, r7, #4
 8007d32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d34:	3b07      	subs	r3, #7
 8007d36:	673a      	str	r2, [r7, #112]	; 0x70
 8007d38:	677a      	str	r2, [r7, #116]	; 0x74
 8007d3a:	667c      	str	r4, [r7, #100]	; 0x64
 8007d3c:	66bc      	str	r4, [r7, #104]	; 0x68
 8007d3e:	67bc      	str	r4, [r7, #120]	; 0x78
 8007d40:	67eb      	str	r3, [r5, #124]	; 0x7c
 8007d42:	003b      	movs	r3, r7
 8007d44:	003e      	movs	r6, r7
 8007d46:	0011      	movs	r1, r2
 8007d48:	3308      	adds	r3, #8
 8007d4a:	67dc      	str	r4, [r3, #124]	; 0x7c
 8007d4c:	3384      	adds	r3, #132	; 0x84
 8007d4e:	701c      	strb	r4, [r3, #0]
 8007d50:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d52:	3206      	adds	r2, #6
 8007d54:	3b04      	subs	r3, #4
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	3a01      	subs	r2, #1
 8007d5a:	609a      	str	r2, [r3, #8]
 8007d5c:	330c      	adds	r3, #12
 8007d5e:	3a08      	subs	r2, #8
 8007d60:	6018      	str	r0, [r3, #0]
 8007d62:	605a      	str	r2, [r3, #4]
 8007d64:	609c      	str	r4, [r3, #8]
 8007d66:	60dc      	str	r4, [r3, #12]
 8007d68:	9309      	str	r3, [sp, #36]	; 0x24
 8007d6a:	3b07      	subs	r3, #7
 8007d6c:	701c      	strb	r4, [r3, #0]
 8007d6e:	36a4      	adds	r6, #164	; 0xa4
 8007d70:	331b      	adds	r3, #27
 8007d72:	6031      	str	r1, [r6, #0]
 8007d74:	7159      	strb	r1, [r3, #5]
 8007d76:	601c      	str	r4, [r3, #0]
 8007d78:	f7fc f9be 	bl	80040f8 <acc_rss_integration_get_sensor_reference_frequency>
 8007d7c:	003b      	movs	r3, r7
 8007d7e:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8007d80:	33b0      	adds	r3, #176	; 0xb0
 8007d82:	6018      	str	r0, [r3, #0]
 8007d84:	3b04      	subs	r3, #4
 8007d86:	609a      	str	r2, [r3, #8]
 8007d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d8a:	701c      	strb	r4, [r3, #0]
 8007d8c:	3a01      	subs	r2, #1
 8007d8e:	60da      	str	r2, [r3, #12]
 8007d90:	2322      	movs	r3, #34	; 0x22
 8007d92:	aa3e      	add	r2, sp, #248	; 0xf8
 8007d94:	189b      	adds	r3, r3, r2
 8007d96:	2200      	movs	r2, #0
 8007d98:	5e9b      	ldrsh	r3, [r3, r2]
 8007d9a:	a98f      	add	r1, sp, #572	; 0x23c
 8007d9c:	933d      	str	r3, [sp, #244]	; 0xf4
 8007d9e:	ab47      	add	r3, sp, #284	; 0x11c
 8007da0:	2200      	movs	r2, #0
 8007da2:	5e9b      	ldrsh	r3, [r3, r2]
 8007da4:	0038      	movs	r0, r7
 8007da6:	933e      	str	r3, [sp, #248]	; 0xf8
 8007da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007daa:	6836      	ldr	r6, [r6, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	930c      	str	r3, [sp, #48]	; 0x30
 8007db0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007db2:	9309      	str	r3, [sp, #36]	; 0x24
 8007db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	930d      	str	r3, [sp, #52]	; 0x34
 8007dba:	f003 fb2b 	bl	800b414 <acc_cpd_linear_sweep_get_info>
 8007dbe:	9a90      	ldr	r2, [sp, #576]	; 0x240
 8007dc0:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d000      	beq.n	8007dc8 <calibrate.lto_priv.294+0xfa0>
 8007dc6:	e58e      	b.n	80078e6 <calibrate.lto_priv.294+0xabe>
 8007dc8:	4b7b      	ldr	r3, [pc, #492]	; (8007fb8 <calibrate.lto_priv.294+0x1190>)
 8007dca:	4a80      	ldr	r2, [pc, #512]	; (8007fcc <calibrate.lto_priv.294+0x11a4>)
 8007dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dce:	497b      	ldr	r1, [pc, #492]	; (8007fbc <calibrate.lto_priv.294+0x1194>)
 8007dd0:	0020      	movs	r0, r4
 8007dd2:	4798      	blx	r3
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	9325      	str	r3, [sp, #148]	; 0x94
 8007dd8:	9331      	str	r3, [sp, #196]	; 0xc4
 8007dda:	931f      	str	r3, [sp, #124]	; 0x7c
 8007ddc:	e5f7      	b.n	80079ce <calibrate.lto_priv.294+0xba6>
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d904      	bls.n	8007dec <calibrate.lto_priv.294+0xfc4>
 8007de2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8007de4:	4975      	ldr	r1, [pc, #468]	; (8007fbc <calibrate.lto_priv.294+0x1194>)
 8007de6:	4a7a      	ldr	r2, [pc, #488]	; (8007fd0 <calibrate.lto_priv.294+0x11a8>)
 8007de8:	2004      	movs	r0, #4
 8007dea:	4798      	blx	r3
 8007dec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007dee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007df0:	9409      	str	r4, [sp, #36]	; 0x24
 8007df2:	930d      	str	r3, [sp, #52]	; 0x34
 8007df4:	e73a      	b.n	8007c6c <calibrate.lto_priv.294+0xe44>
 8007df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007df8:	3208      	adds	r2, #8
 8007dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8007dfc:	2a0f      	cmp	r2, #15
 8007dfe:	d901      	bls.n	8007e04 <calibrate.lto_priv.294+0xfdc>
 8007e00:	220f      	movs	r2, #15
 8007e02:	9209      	str	r2, [sp, #36]	; 0x24
 8007e04:	2400      	movs	r4, #0
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d800      	bhi.n	8007e0c <calibrate.lto_priv.294+0xfe4>
 8007e0a:	e72f      	b.n	8007c6c <calibrate.lto_priv.294+0xe44>
 8007e0c:	4b6a      	ldr	r3, [pc, #424]	; (8007fb8 <calibrate.lto_priv.294+0x1190>)
 8007e0e:	4a71      	ldr	r2, [pc, #452]	; (8007fd4 <calibrate.lto_priv.294+0x11ac>)
 8007e10:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007e12:	496a      	ldr	r1, [pc, #424]	; (8007fbc <calibrate.lto_priv.294+0x1194>)
 8007e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e16:	2004      	movs	r0, #4
 8007e18:	47a0      	blx	r4
 8007e1a:	2400      	movs	r4, #0
 8007e1c:	e726      	b.n	8007c6c <calibrate.lto_priv.294+0xe44>
 8007e1e:	4b66      	ldr	r3, [pc, #408]	; (8007fb8 <calibrate.lto_priv.294+0x1190>)
 8007e20:	9921      	ldr	r1, [sp, #132]	; 0x84
 8007e22:	001a      	movs	r2, r3
 8007e24:	3230      	adds	r2, #48	; 0x30
 8007e26:	7812      	ldrb	r2, [r2, #0]
 8007e28:	2902      	cmp	r1, #2
 8007e2a:	d02e      	beq.n	8007e8a <calibrate.lto_priv.294+0x1062>
 8007e2c:	2a03      	cmp	r2, #3
 8007e2e:	d905      	bls.n	8007e3c <calibrate.lto_priv.294+0x1014>
 8007e30:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007e32:	4a69      	ldr	r2, [pc, #420]	; (8007fd8 <calibrate.lto_priv.294+0x11b0>)
 8007e34:	000b      	movs	r3, r1
 8007e36:	2004      	movs	r0, #4
 8007e38:	4960      	ldr	r1, [pc, #384]	; (8007fbc <calibrate.lto_priv.294+0x1194>)
 8007e3a:	47a0      	blx	r4
 8007e3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e3e:	f7f9 fb6b 	bl	8001518 <acc_sensor_protocol_r2_ack_event>
 8007e42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e44:	3301      	adds	r3, #1
 8007e46:	9321      	str	r3, [sp, #132]	; 0x84
 8007e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4a:	9311      	str	r3, [sp, #68]	; 0x44
 8007e4c:	21fa      	movs	r1, #250	; 0xfa
 8007e4e:	ac82      	add	r4, sp, #520	; 0x208
 8007e50:	0022      	movs	r2, r4
 8007e52:	00c9      	lsls	r1, r1, #3
 8007e54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e56:	f003 f975 	bl	800b144 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8007e5a:	901c      	str	r0, [sp, #112]	; 0x70
 8007e5c:	900c      	str	r0, [sp, #48]	; 0x30
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d100      	bne.n	8007e64 <calibrate.lto_priv.294+0x103c>
 8007e62:	e595      	b.n	8007990 <calibrate.lto_priv.294+0xb68>
 8007e64:	7823      	ldrb	r3, [r4, #0]
 8007e66:	2b06      	cmp	r3, #6
 8007e68:	d000      	beq.n	8007e6c <calibrate.lto_priv.294+0x1044>
 8007e6a:	e591      	b.n	8007990 <calibrate.lto_priv.294+0xb68>
 8007e6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e6e:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d300      	bcc.n	8007e76 <calibrate.lto_priv.294+0x104e>
 8007e74:	e0e3      	b.n	800803e <calibrate.lto_priv.294+0x1216>
 8007e76:	4b50      	ldr	r3, [pc, #320]	; (8007fb8 <calibrate.lto_priv.294+0x1190>)
 8007e78:	4a58      	ldr	r2, [pc, #352]	; (8007fdc <calibrate.lto_priv.294+0x11b4>)
 8007e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7c:	494f      	ldr	r1, [pc, #316]	; (8007fbc <calibrate.lto_priv.294+0x1194>)
 8007e7e:	2000      	movs	r0, #0
 8007e80:	4798      	blx	r3
 8007e82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e84:	f003 fa08 	bl	800b298 <acc_sensor_protocol_r2_stop.constprop.25>
 8007e88:	e582      	b.n	8007990 <calibrate.lto_priv.294+0xb68>
 8007e8a:	2a03      	cmp	r2, #3
 8007e8c:	d800      	bhi.n	8007e90 <calibrate.lto_priv.294+0x1068>
 8007e8e:	e089      	b.n	8007fa4 <calibrate.lto_priv.294+0x117c>
 8007e90:	2004      	movs	r0, #4
 8007e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e94:	4a52      	ldr	r2, [pc, #328]	; (8007fe0 <calibrate.lto_priv.294+0x11b8>)
 8007e96:	4949      	ldr	r1, [pc, #292]	; (8007fbc <calibrate.lto_priv.294+0x1194>)
 8007e98:	4798      	blx	r3
 8007e9a:	e083      	b.n	8007fa4 <calibrate.lto_priv.294+0x117c>
 8007e9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	0014      	movs	r4, r2
 8007ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea4:	9311      	str	r3, [sp, #68]	; 0x44
 8007ea6:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8007ea8:	189b      	adds	r3, r3, r2
 8007eaa:	8822      	ldrh	r2, [r4, #0]
 8007eac:	3402      	adds	r4, #2
 8007eae:	1880      	adds	r0, r0, r2
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	d1fa      	bne.n	8007eaa <calibrate.lto_priv.294+0x1082>
 8007eb4:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007eb6:	f004 ffb1 	bl	800ce1c <__udivsi3>
 8007eba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ebc:	b280      	uxth	r0, r0
 8007ebe:	8813      	ldrh	r3, [r2, #0]
 8007ec0:	4283      	cmp	r3, r0
 8007ec2:	d929      	bls.n	8007f18 <calibrate.lto_priv.294+0x10f0>
 8007ec4:	1a1b      	subs	r3, r3, r0
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	8013      	strh	r3, [r2, #0]
 8007eca:	3202      	adds	r2, #2
 8007ecc:	4294      	cmp	r4, r2
 8007ece:	d1f6      	bne.n	8007ebe <calibrate.lto_priv.294+0x1096>
 8007ed0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed4:	4694      	mov	ip, r2
 8007ed6:	4463      	add	r3, ip
 8007ed8:	9338      	str	r3, [sp, #224]	; 0xe0
 8007eda:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007edc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ede:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007ee0:	960c      	str	r6, [sp, #48]	; 0x30
 8007ee2:	9321      	str	r3, [sp, #132]	; 0x84
 8007ee4:	2c00      	cmp	r4, #0
 8007ee6:	d119      	bne.n	8007f1c <calibrate.lto_priv.294+0x10f4>
 8007ee8:	0020      	movs	r0, r4
 8007eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eec:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d136      	bne.n	8007f60 <calibrate.lto_priv.294+0x1138>
 8007ef2:	2103      	movs	r1, #3
 8007ef4:	f004 ff92 	bl	800ce1c <__udivsi3>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007efc:	b280      	uxth	r0, r0
 8007efe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d835      	bhi.n	8007f70 <calibrate.lto_priv.294+0x1148>
 8007f04:	0013      	movs	r3, r2
 8007f06:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d271      	bcs.n	8007ff0 <calibrate.lto_priv.294+0x11c8>
 8007f0c:	4b2a      	ldr	r3, [pc, #168]	; (8007fb8 <calibrate.lto_priv.294+0x1190>)
 8007f0e:	4a35      	ldr	r2, [pc, #212]	; (8007fe4 <calibrate.lto_priv.294+0x11bc>)
 8007f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f12:	4935      	ldr	r1, [pc, #212]	; (8007fe8 <calibrate.lto_priv.294+0x11c0>)
 8007f14:	2000      	movs	r0, #0
 8007f16:	e7bf      	b.n	8007e98 <calibrate.lto_priv.294+0x1070>
 8007f18:	1ac3      	subs	r3, r0, r3
 8007f1a:	e7d4      	b.n	8007ec6 <calibrate.lto_priv.294+0x109e>
 8007f1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f1e:	0058      	lsls	r0, r3, #1
 8007f20:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8007f22:	1900      	adds	r0, r0, r4
 8007f24:	1b99      	subs	r1, r3, r6
 8007f26:	f004 ff79 	bl	800ce1c <__udivsi3>
 8007f2a:	1e05      	subs	r5, r0, #0
 8007f2c:	d016      	beq.n	8007f5c <calibrate.lto_priv.294+0x1134>
 8007f2e:	0042      	lsls	r2, r0, #1
 8007f30:	2000      	movs	r0, #0
 8007f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f34:	18d2      	adds	r2, r2, r3
 8007f36:	8819      	ldrh	r1, [r3, #0]
 8007f38:	3302      	adds	r3, #2
 8007f3a:	1840      	adds	r0, r0, r1
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d1fa      	bne.n	8007f36 <calibrate.lto_priv.294+0x110e>
 8007f40:	0029      	movs	r1, r5
 8007f42:	f004 ff6b 	bl	800ce1c <__udivsi3>
 8007f46:	8030      	strh	r0, [r6, #0]
 8007f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f4a:	006b      	lsls	r3, r5, #1
 8007f4c:	18d3      	adds	r3, r2, r3
 8007f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f52:	3c01      	subs	r4, #1
 8007f54:	1b5b      	subs	r3, r3, r5
 8007f56:	9321      	str	r3, [sp, #132]	; 0x84
 8007f58:	3602      	adds	r6, #2
 8007f5a:	e7c3      	b.n	8007ee4 <calibrate.lto_priv.294+0x10bc>
 8007f5c:	8030      	strh	r0, [r6, #0]
 8007f5e:	e7f3      	b.n	8007f48 <calibrate.lto_priv.294+0x1120>
 8007f60:	8819      	ldrh	r1, [r3, #0]
 8007f62:	1c0a      	adds	r2, r1, #0
 8007f64:	4281      	cmp	r1, r0
 8007f66:	d200      	bcs.n	8007f6a <calibrate.lto_priv.294+0x1142>
 8007f68:	1c02      	adds	r2, r0, #0
 8007f6a:	b290      	uxth	r0, r2
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	e7bd      	b.n	8007eec <calibrate.lto_priv.294+0x10c4>
 8007f70:	8822      	ldrh	r2, [r4, #0]
 8007f72:	88a1      	ldrh	r1, [r4, #4]
 8007f74:	428a      	cmp	r2, r1
 8007f76:	d802      	bhi.n	8007f7e <calibrate.lto_priv.294+0x1156>
 8007f78:	0015      	movs	r5, r2
 8007f7a:	000a      	movs	r2, r1
 8007f7c:	0029      	movs	r1, r5
 8007f7e:	4290      	cmp	r0, r2
 8007f80:	d216      	bcs.n	8007fb0 <calibrate.lto_priv.294+0x1188>
 8007f82:	00cd      	lsls	r5, r1, #3
 8007f84:	42aa      	cmp	r2, r5
 8007f86:	d913      	bls.n	8007fb0 <calibrate.lto_priv.294+0x1188>
 8007f88:	4c0b      	ldr	r4, [pc, #44]	; (8007fb8 <calibrate.lto_priv.294+0x1190>)
 8007f8a:	0025      	movs	r5, r4
 8007f8c:	3530      	adds	r5, #48	; 0x30
 8007f8e:	782d      	ldrb	r5, [r5, #0]
 8007f90:	2d03      	cmp	r5, #3
 8007f92:	d907      	bls.n	8007fa4 <calibrate.lto_priv.294+0x117c>
 8007f94:	9002      	str	r0, [sp, #8]
 8007f96:	9101      	str	r1, [sp, #4]
 8007f98:	9200      	str	r2, [sp, #0]
 8007f9a:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8007f9c:	4a13      	ldr	r2, [pc, #76]	; (8007fec <calibrate.lto_priv.294+0x11c4>)
 8007f9e:	4912      	ldr	r1, [pc, #72]	; (8007fe8 <calibrate.lto_priv.294+0x11c0>)
 8007fa0:	2004      	movs	r0, #4
 8007fa2:	47a0      	blx	r4
 8007fa4:	2500      	movs	r5, #0
 8007fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa8:	002c      	movs	r4, r5
 8007faa:	9311      	str	r3, [sp, #68]	; 0x44
 8007fac:	950c      	str	r5, [sp, #48]	; 0x30
 8007fae:	e65d      	b.n	8007c6c <calibrate.lto_priv.294+0xe44>
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	3402      	adds	r4, #2
 8007fb4:	e7a3      	b.n	8007efe <calibrate.lto_priv.294+0x10d6>
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	200003e8 	.word	0x200003e8
 8007fbc:	0801bd71 	.word	0x0801bd71
 8007fc0:	0801c16b 	.word	0x0801c16b
 8007fc4:	08014c00 	.word	0x08014c00
 8007fc8:	0801c258 	.word	0x0801c258
 8007fcc:	0801c0d7 	.word	0x0801c0d7
 8007fd0:	0801c1bd 	.word	0x0801c1bd
 8007fd4:	0801c1e5 	.word	0x0801c1e5
 8007fd8:	0801c277 	.word	0x0801c277
 8007fdc:	0801be3d 	.word	0x0801be3d
 8007fe0:	0801c29e 	.word	0x0801c29e
 8007fe4:	0801c35c 	.word	0x0801c35c
 8007fe8:	0801c33f 	.word	0x0801c33f
 8007fec:	0801c2e3 	.word	0x0801c2e3
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ff4:	3210      	adds	r2, #16
 8007ff6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ff8:	8809      	ldrh	r1, [r1, #0]
 8007ffa:	185b      	adds	r3, r3, r1
 8007ffc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ffe:	3102      	adds	r1, #2
 8008000:	9111      	str	r1, [sp, #68]	; 0x44
 8008002:	428a      	cmp	r2, r1
 8008004:	d1f7      	bne.n	8007ff6 <calibrate.lto_priv.294+0x11ce>
 8008006:	2200      	movs	r2, #0
 8008008:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800800a:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800800c:	4288      	cmp	r0, r1
 800800e:	d810      	bhi.n	8008032 <calibrate.lto_priv.294+0x120a>
 8008010:	2105      	movs	r1, #5
 8008012:	4359      	muls	r1, r3
 8008014:	428a      	cmp	r2, r1
 8008016:	d26e      	bcs.n	80080f6 <calibrate.lto_priv.294+0x12ce>
 8008018:	497a      	ldr	r1, [pc, #488]	; (8008204 <calibrate.lto_priv.294+0x13dc>)
 800801a:	0008      	movs	r0, r1
 800801c:	3030      	adds	r0, #48	; 0x30
 800801e:	7800      	ldrb	r0, [r0, #0]
 8008020:	2803      	cmp	r0, #3
 8008022:	d9bf      	bls.n	8007fa4 <calibrate.lto_priv.294+0x117c>
 8008024:	9200      	str	r2, [sp, #0]
 8008026:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8008028:	4a77      	ldr	r2, [pc, #476]	; (8008208 <calibrate.lto_priv.294+0x13e0>)
 800802a:	4978      	ldr	r1, [pc, #480]	; (800820c <calibrate.lto_priv.294+0x13e4>)
 800802c:	2004      	movs	r0, #4
 800802e:	47a0      	blx	r4
 8008030:	e7b8      	b.n	8007fa4 <calibrate.lto_priv.294+0x117c>
 8008032:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008034:	0048      	lsls	r0, r1, #1
 8008036:	5a20      	ldrh	r0, [r4, r0]
 8008038:	3101      	adds	r1, #1
 800803a:	1812      	adds	r2, r2, r0
 800803c:	e7e5      	b.n	800800a <calibrate.lto_priv.294+0x11e2>
 800803e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8008040:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008042:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008044:	f7f9 f9e4 	bl	8001410 <acc_sensor_protocol_r2_transfer_data>
 8008048:	1e06      	subs	r6, r0, #0
 800804a:	d100      	bne.n	800804e <calibrate.lto_priv.294+0x1226>
 800804c:	e4a0      	b.n	8007990 <calibrate.lto_priv.294+0xb68>
 800804e:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	18f3      	adds	r3, r6, r3
 8008054:	930b      	str	r3, [sp, #44]	; 0x2c
 8008056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d020      	beq.n	800809e <calibrate.lto_priv.294+0x1276>
 800805c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800805e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008060:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008062:	189c      	adds	r4, r3, r2
 8008064:	0022      	movs	r2, r4
 8008066:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008068:	2001      	movs	r0, #1
 800806a:	f003 fe99 	bl	800bda0 <acc_probes_execute_uint16>
 800806e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008070:	0020      	movs	r0, r4
 8008072:	f7f9 f903 	bl	800127c <acc_alg_cca_calculate>
 8008076:	4966      	ldr	r1, [pc, #408]	; (8008210 <calibrate.lto_priv.294+0x13e8>)
 8008078:	9019      	str	r0, [sp, #100]	; 0x64
 800807a:	2401      	movs	r4, #1
 800807c:	f005 f8a8 	bl	800d1d0 <__aeabi_fcmpgt>
 8008080:	2800      	cmp	r0, #0
 8008082:	d100      	bne.n	8008086 <calibrate.lto_priv.294+0x125e>
 8008084:	1c04      	adds	r4, r0, #0
 8008086:	b2e3      	uxtb	r3, r4
 8008088:	4961      	ldr	r1, [pc, #388]	; (8008210 <calibrate.lto_priv.294+0x13e8>)
 800808a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800808c:	931a      	str	r3, [sp, #104]	; 0x68
 800808e:	f005 f89f 	bl	800d1d0 <__aeabi_fcmpgt>
 8008092:	2800      	cmp	r0, #0
 8008094:	d125      	bne.n	80080e2 <calibrate.lto_priv.294+0x12ba>
 8008096:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d127      	bne.n	80080ec <calibrate.lto_priv.294+0x12c4>
 800809c:	931a      	str	r3, [sp, #104]	; 0x68
 800809e:	4a5d      	ldr	r2, [pc, #372]	; (8008214 <calibrate.lto_priv.294+0x13ec>)
 80080a0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80080a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80080a4:	f002 fd76 	bl	800ab94 <acc_alg_basic_saturation_check_u16>
 80080a8:	1e04      	subs	r4, r0, #0
 80080aa:	d000      	beq.n	80080ae <calibrate.lto_priv.294+0x1286>
 80080ac:	e4c5      	b.n	8007a3a <calibrate.lto_priv.294+0xc12>
 80080ae:	4a55      	ldr	r2, [pc, #340]	; (8008204 <calibrate.lto_priv.294+0x13dc>)
 80080b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080b2:	0013      	movs	r3, r2
 80080b4:	3330      	adds	r3, #48	; 0x30
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2900      	cmp	r1, #0
 80080ba:	d000      	beq.n	80080be <calibrate.lto_priv.294+0x1296>
 80080bc:	e5c6      	b.n	8007c4c <calibrate.lto_priv.294+0xe24>
 80080be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080c0:	2900      	cmp	r1, #0
 80080c2:	d100      	bne.n	80080c6 <calibrate.lto_priv.294+0x129e>
 80080c4:	e4b2      	b.n	8007a2c <calibrate.lto_priv.294+0xc04>
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d904      	bls.n	80080d4 <calibrate.lto_priv.294+0x12ac>
 80080ca:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80080cc:	4952      	ldr	r1, [pc, #328]	; (8008218 <calibrate.lto_priv.294+0x13f0>)
 80080ce:	4a53      	ldr	r2, [pc, #332]	; (800821c <calibrate.lto_priv.294+0x13f4>)
 80080d0:	2004      	movs	r0, #4
 80080d2:	4798      	blx	r3
 80080d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d6:	930c      	str	r3, [sp, #48]	; 0x30
 80080d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080da:	930d      	str	r3, [sp, #52]	; 0x34
 80080dc:	230f      	movs	r3, #15
 80080de:	9309      	str	r3, [sp, #36]	; 0x24
 80080e0:	e5c4      	b.n	8007c6c <calibrate.lto_priv.294+0xe44>
 80080e2:	2300      	movs	r3, #0
 80080e4:	001c      	movs	r4, r3
 80080e6:	9335      	str	r3, [sp, #212]	; 0xd4
 80080e8:	930c      	str	r3, [sp, #48]	; 0x30
 80080ea:	e5bf      	b.n	8007c6c <calibrate.lto_priv.294+0xe44>
 80080ec:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80080ee:	0003      	movs	r3, r0
 80080f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80080f2:	901a      	str	r0, [sp, #104]	; 0x68
 80080f4:	e7f8      	b.n	80080e8 <calibrate.lto_priv.294+0x12c0>
 80080f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80080fa:	9311      	str	r3, [sp, #68]	; 0x44
 80080fc:	2300      	movs	r3, #0
 80080fe:	930c      	str	r3, [sp, #48]	; 0x30
 8008100:	001c      	movs	r4, r3
 8008102:	e5b3      	b.n	8007c6c <calibrate.lto_priv.294+0xe44>
 8008104:	4b3f      	ldr	r3, [pc, #252]	; (8008204 <calibrate.lto_priv.294+0x13dc>)
 8008106:	001a      	movs	r2, r3
 8008108:	3230      	adds	r2, #48	; 0x30
 800810a:	7812      	ldrb	r2, [r2, #0]
 800810c:	2a01      	cmp	r2, #1
 800810e:	d917      	bls.n	8008140 <calibrate.lto_priv.294+0x1318>
 8008110:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008112:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008114:	4b42      	ldr	r3, [pc, #264]	; (8008220 <calibrate.lto_priv.294+0x13f8>)
 8008116:	2a00      	cmp	r2, #0
 8008118:	d000      	beq.n	800811c <calibrate.lto_priv.294+0x12f4>
 800811a:	4b42      	ldr	r3, [pc, #264]	; (8008224 <calibrate.lto_priv.294+0x13fc>)
 800811c:	9306      	str	r3, [sp, #24]
 800811e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008120:	4a41      	ldr	r2, [pc, #260]	; (8008228 <calibrate.lto_priv.294+0x1400>)
 8008122:	9305      	str	r3, [sp, #20]
 8008124:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8008126:	493c      	ldr	r1, [pc, #240]	; (8008218 <calibrate.lto_priv.294+0x13f0>)
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800812c:	2002      	movs	r0, #2
 800812e:	9303      	str	r3, [sp, #12]
 8008130:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008132:	9302      	str	r3, [sp, #8]
 8008134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800813e:	47a0      	blx	r4
 8008140:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008142:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8008144:	923c      	str	r2, [sp, #240]	; 0xf0
 8008146:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008148:	9241      	str	r2, [sp, #260]	; 0x104
 800814a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800814c:	9240      	str	r2, [sp, #256]	; 0x100
 800814e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8008150:	923f      	str	r2, [sp, #252]	; 0xfc
 8008152:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008154:	9230      	str	r2, [sp, #192]	; 0xc0
 8008156:	e012      	b.n	800817e <calibrate.lto_priv.294+0x1356>
 8008158:	4b2a      	ldr	r3, [pc, #168]	; (8008204 <calibrate.lto_priv.294+0x13dc>)
 800815a:	001a      	movs	r2, r3
 800815c:	3230      	adds	r2, #48	; 0x30
 800815e:	7812      	ldrb	r2, [r2, #0]
 8008160:	2a03      	cmp	r2, #3
 8008162:	d801      	bhi.n	8008168 <calibrate.lto_priv.294+0x1340>
 8008164:	f7ff f9db 	bl	800751e <calibrate.lto_priv.294+0x6f6>
 8008168:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800816a:	492b      	ldr	r1, [pc, #172]	; (8008218 <calibrate.lto_priv.294+0x13f0>)
 800816c:	9200      	str	r2, [sp, #0]
 800816e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008170:	4a2e      	ldr	r2, [pc, #184]	; (800822c <calibrate.lto_priv.294+0x1404>)
 8008172:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008174:	2004      	movs	r0, #4
 8008176:	47a0      	blx	r4
 8008178:	f7ff f9d1 	bl	800751e <calibrate.lto_priv.294+0x6f6>
 800817c:	2300      	movs	r3, #0
 800817e:	2400      	movs	r4, #0
 8008180:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008182:	42a2      	cmp	r2, r4
 8008184:	d000      	beq.n	8008188 <calibrate.lto_priv.294+0x1360>
 8008186:	001c      	movs	r4, r3
 8008188:	2301      	movs	r3, #1
 800818a:	401c      	ands	r4, r3
 800818c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d004      	beq.n	800819c <calibrate.lto_priv.294+0x1374>
 8008192:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8008194:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008196:	701a      	strb	r2, [r3, #0]
 8008198:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800819a:	605a      	str	r2, [r3, #4]
 800819c:	2c00      	cmp	r4, #0
 800819e:	d101      	bne.n	80081a4 <calibrate.lto_priv.294+0x137c>
 80081a0:	f7fe fe61 	bl	8006e66 <calibrate.lto_priv.294+0x3e>
 80081a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081a6:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80081a8:	4d16      	ldr	r5, [pc, #88]	; (8008204 <calibrate.lto_priv.294+0x13dc>)
 80081aa:	8093      	strh	r3, [r2, #4]
 80081ac:	ab48      	add	r3, sp, #288	; 0x120
 80081ae:	791b      	ldrb	r3, [r3, #4]
 80081b0:	80d3      	strh	r3, [r2, #6]
 80081b2:	0013      	movs	r3, r2
 80081b4:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80081b6:	811a      	strh	r2, [r3, #8]
 80081b8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80081ba:	815a      	strh	r2, [r3, #10]
 80081bc:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80081be:	819a      	strh	r2, [r3, #12]
 80081c0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80081c2:	81da      	strh	r2, [r3, #14]
 80081c4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80081c6:	821a      	strh	r2, [r3, #16]
 80081c8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80081ca:	825a      	strh	r2, [r3, #18]
 80081cc:	2306      	movs	r3, #6
 80081ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	002b      	movs	r3, r5
 80081d4:	3330      	adds	r3, #48	; 0x30
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d904      	bls.n	80081e6 <calibrate.lto_priv.294+0x13be>
 80081dc:	4a14      	ldr	r2, [pc, #80]	; (8008230 <calibrate.lto_priv.294+0x1408>)
 80081de:	4915      	ldr	r1, [pc, #84]	; (8008234 <calibrate.lto_priv.294+0x140c>)
 80081e0:	2004      	movs	r0, #4
 80081e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80081e4:	4798      	blx	r3
 80081e6:	002b      	movs	r3, r5
 80081e8:	3330      	adds	r3, #48	; 0x30
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d801      	bhi.n	80081f4 <calibrate.lto_priv.294+0x13cc>
 80081f0:	f7fe fe3a 	bl	8006e68 <calibrate.lto_priv.294+0x40>
 80081f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80081f6:	4a10      	ldr	r2, [pc, #64]	; (8008238 <calibrate.lto_priv.294+0x1410>)
 80081f8:	490e      	ldr	r1, [pc, #56]	; (8008234 <calibrate.lto_priv.294+0x140c>)
 80081fa:	2002      	movs	r0, #2
 80081fc:	4798      	blx	r3
 80081fe:	f7fe fe33 	bl	8006e68 <calibrate.lto_priv.294+0x40>
 8008202:	46c0      	nop			; (mov r8, r8)
 8008204:	200003e8 	.word	0x200003e8
 8008208:	0801c36c 	.word	0x0801c36c
 800820c:	0801c33f 	.word	0x0801c33f
 8008210:	42640000 	.word	0x42640000
 8008214:	42172c98 	.word	0x42172c98
 8008218:	0801bd71 	.word	0x0801bd71
 800821c:	0801c126 	.word	0x0801c126
 8008220:	0801bd4e 	.word	0x0801bd4e
 8008224:	0801bd49 	.word	0x0801bd49
 8008228:	0801c40a 	.word	0x0801c40a
 800822c:	0801c3d6 	.word	0x0801c3d6
 8008230:	0801c472 	.word	0x0801c472
 8008234:	0801b427 	.word	0x0801b427
 8008238:	0801b8e0 	.word	0x0801b8e0

0800823c <acc_sensor_r2_conf_write_instr>:
 800823c:	23a0      	movs	r3, #160	; 0xa0
 800823e:	b530      	push	{r4, r5, lr}
 8008240:	01db      	lsls	r3, r3, #7
 8008242:	b085      	sub	sp, #20
 8008244:	4319      	orrs	r1, r3
 8008246:	ac02      	add	r4, sp, #8
 8008248:	8021      	strh	r1, [r4, #0]
 800824a:	210a      	movs	r1, #10
 800824c:	0005      	movs	r5, r0
 800824e:	9201      	str	r2, [sp, #4]
 8008250:	4469      	add	r1, sp
 8008252:	a801      	add	r0, sp, #4
 8008254:	2201      	movs	r2, #1
 8008256:	f002 fb9f 	bl	800a998 <acc_confprogram_copy>
 800825a:	2300      	movs	r3, #0
 800825c:	2203      	movs	r2, #3
 800825e:	0021      	movs	r1, r4
 8008260:	0028      	movs	r0, r5
 8008262:	f7fa fe47 	bl	8002ef4 <acc_rss_integration_sensor_device_transfer>
 8008266:	b005      	add	sp, #20
 8008268:	bd30      	pop	{r4, r5, pc}
 800826a:	46c0      	nop			; (mov r8, r8)

0800826c <HAL_RTC_WaitForSynchro.constprop.108>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800826c:	20a0      	movs	r0, #160	; 0xa0
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
 800826e:	b530      	push	{r4, r5, lr}
  tickstart = HAL_GetTick();

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008270:	25fa      	movs	r5, #250	; 0xfa
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8008272:	4a09      	ldr	r2, [pc, #36]	; (8008298 <HAL_RTC_WaitForSynchro.constprop.108+0x2c>)
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008274:	00ad      	lsls	r5, r5, #2
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8008276:	6813      	ldr	r3, [r2, #0]
 8008278:	68d9      	ldr	r1, [r3, #12]
 800827a:	4381      	bics	r1, r0
 800827c:	60d9      	str	r1, [r3, #12]
  return uwTick;
 800827e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8008280:	3880      	subs	r0, #128	; 0x80
 8008282:	68d9      	ldr	r1, [r3, #12]
 8008284:	4201      	tst	r1, r0
 8008286:	d001      	beq.n	800828c <HAL_RTC_WaitForSynchro.constprop.108+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8008288:	2000      	movs	r0, #0
}
 800828a:	bd30      	pop	{r4, r5, pc}
 800828c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800828e:	1b09      	subs	r1, r1, r4
 8008290:	42a9      	cmp	r1, r5
 8008292:	d9f6      	bls.n	8008282 <HAL_RTC_WaitForSynchro.constprop.108+0x16>
      return HAL_TIMEOUT;
 8008294:	2003      	movs	r0, #3
 8008296:	e7f8      	b.n	800828a <HAL_RTC_WaitForSynchro.constprop.108+0x1e>
 8008298:	200003b8 	.word	0x200003b8

0800829c <UART_WaitOnFlagUntilTimeout.constprop.95>:
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800829c:	b570      	push	{r4, r5, r6, lr}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829e:	6804      	ldr	r4, [r0, #0]
 80082a0:	4e11      	ldr	r6, [pc, #68]	; (80082e8 <UART_WaitOnFlagUntilTimeout.constprop.95+0x4c>)
 80082a2:	69e5      	ldr	r5, [r4, #28]
 80082a4:	400d      	ands	r5, r1
 80082a6:	42a9      	cmp	r1, r5
 80082a8:	d101      	bne.n	80082ae <UART_WaitOnFlagUntilTimeout.constprop.95+0x12>
  return HAL_OK;
 80082aa:	2000      	movs	r0, #0
 80082ac:	e017      	b.n	80082de <UART_WaitOnFlagUntilTimeout.constprop.95+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80082ae:	1c5d      	adds	r5, r3, #1
 80082b0:	d0f7      	beq.n	80082a2 <UART_WaitOnFlagUntilTimeout.constprop.95+0x6>
 80082b2:	6af5      	ldr	r5, [r6, #44]	; 0x2c
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082b4:	1aad      	subs	r5, r5, r2
 80082b6:	42ab      	cmp	r3, r5
 80082b8:	d212      	bcs.n	80082e0 <UART_WaitOnFlagUntilTimeout.constprop.95+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	4a0b      	ldr	r2, [pc, #44]	; (80082ec <UART_WaitOnFlagUntilTimeout.constprop.95+0x50>)
 80082be:	4013      	ands	r3, r2
 80082c0:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c2:	68a3      	ldr	r3, [r4, #8]
 80082c4:	32a3      	adds	r2, #163	; 0xa3
 80082c6:	32ff      	adds	r2, #255	; 0xff
 80082c8:	4393      	bics	r3, r2
 80082ca:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 80082cc:	2320      	movs	r3, #32
 80082ce:	1d02      	adds	r2, r0, #4
 80082d0:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80082d2:	3204      	adds	r2, #4
 80082d4:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80082d6:	2300      	movs	r3, #0
 80082d8:	307c      	adds	r0, #124	; 0x7c
 80082da:	7003      	strb	r3, [r0, #0]
 80082dc:	2003      	movs	r0, #3
}
 80082de:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1de      	bne.n	80082a2 <UART_WaitOnFlagUntilTimeout.constprop.95+0x6>
 80082e4:	e7e9      	b.n	80082ba <UART_WaitOnFlagUntilTimeout.constprop.95+0x1e>
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	200003b8 	.word	0x200003b8
 80082ec:	fffffe5f 	.word	0xfffffe5f

080082f0 <acc_utils_transfer_buffer_to_uint32.constprop.24>:
 80082f0:	8803      	ldrh	r3, [r0, #0]
 80082f2:	8842      	ldrh	r2, [r0, #2]
 80082f4:	041b      	lsls	r3, r3, #16
 80082f6:	4313      	orrs	r3, r2
 80082f8:	600b      	str	r3, [r1, #0]
 80082fa:	4770      	bx	lr

080082fc <acc_confprogram_modify_runif_sensor.constprop.19>:
 80082fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082fe:	0015      	movs	r5, r2
 8008300:	aa08      	add	r2, sp, #32
 8008302:	0006      	movs	r6, r0
 8008304:	7810      	ldrb	r0, [r2, #0]
 8008306:	00aa      	lsls	r2, r5, #2
 8008308:	5854      	ldr	r4, [r2, r1]
 800830a:	220f      	movs	r2, #15
 800830c:	4394      	bics	r4, r2
 800830e:	4a0f      	ldr	r2, [pc, #60]	; (800834c <acc_confprogram_modify_runif_sensor.constprop.19+0x50>)
 8008310:	0011      	movs	r1, r2
 8008312:	3160      	adds	r1, #96	; 0x60
 8008314:	7809      	ldrb	r1, [r1, #0]
 8008316:	2800      	cmp	r0, #0
 8008318:	d00f      	beq.n	800833a <acc_confprogram_modify_runif_sensor.constprop.19+0x3e>
 800831a:	431c      	orrs	r4, r3
 800831c:	2903      	cmp	r1, #3
 800831e:	d906      	bls.n	800832e <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8008324:	002b      	movs	r3, r5
 8008326:	4a0a      	ldr	r2, [pc, #40]	; (8008350 <acc_confprogram_modify_runif_sensor.constprop.19+0x54>)
 8008328:	490a      	ldr	r1, [pc, #40]	; (8008354 <acc_confprogram_modify_runif_sensor.constprop.19+0x58>)
 800832a:	2004      	movs	r0, #4
 800832c:	47b8      	blx	r7
 800832e:	0029      	movs	r1, r5
 8008330:	0030      	movs	r0, r6
 8008332:	0022      	movs	r2, r4
 8008334:	f7ff ff82 	bl	800823c <acc_sensor_r2_conf_write_instr>
 8008338:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800833a:	2903      	cmp	r1, #3
 800833c:	d9f7      	bls.n	800832e <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 800833e:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8008340:	002b      	movs	r3, r5
 8008342:	4a05      	ldr	r2, [pc, #20]	; (8008358 <acc_confprogram_modify_runif_sensor.constprop.19+0x5c>)
 8008344:	4903      	ldr	r1, [pc, #12]	; (8008354 <acc_confprogram_modify_runif_sensor.constprop.19+0x58>)
 8008346:	2004      	movs	r0, #4
 8008348:	47b8      	blx	r7
 800834a:	e7f0      	b.n	800832e <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 800834c:	200003b8 	.word	0x200003b8
 8008350:	0801c87b 	.word	0x0801c87b
 8008354:	0801be31 	.word	0x0801be31
 8008358:	0801c8b1 	.word	0x0801c8b1

0800835c <UART_TxISR_16BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800835c:	1d03      	adds	r3, r0, #4
 800835e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8008360:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008362:	2b21      	cmp	r3, #33	; 0x21
 8008364:	d113      	bne.n	800838e <UART_TxISR_16BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008366:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 8008368:	0004      	movs	r4, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800836a:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800836c:	336a      	adds	r3, #106	; 0x6a
 800836e:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 8008370:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008372:	2a00      	cmp	r2, #0
 8008374:	d00b      	beq.n	800838e <UART_TxISR_16BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 8008376:	8821      	ldrh	r1, [r4, #0]
 8008378:	6803      	ldr	r3, [r0, #0]
 800837a:	2900      	cmp	r1, #0
 800837c:	d108      	bne.n	8008390 <UART_TxISR_16BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	490c      	ldr	r1, [pc, #48]	; (80083b4 <UART_TxISR_16BIT_FIFOEN+0x58>)
 8008382:	400a      	ands	r2, r1
 8008384:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008386:	2240      	movs	r2, #64	; 0x40
 8008388:	6819      	ldr	r1, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	601a      	str	r2, [r3, #0]
}
 800838e:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008390:	69d9      	ldr	r1, [r3, #28]
 8008392:	4229      	tst	r1, r5
 8008394:	d00a      	beq.n	80083ac <UART_TxISR_16BIT_FIFOEN+0x50>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8008396:	6d06      	ldr	r6, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008398:	8831      	ldrh	r1, [r6, #0]
        huart->pTxBuffPtr += 2U;
 800839a:	3602      	adds	r6, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800839c:	05c9      	lsls	r1, r1, #23
 800839e:	0dc9      	lsrs	r1, r1, #23
 80083a0:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80083a2:	6506      	str	r6, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80083a4:	8823      	ldrh	r3, [r4, #0]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80083ac:	3a01      	subs	r2, #1
 80083ae:	b292      	uxth	r2, r2
 80083b0:	e7df      	b.n	8008372 <UART_TxISR_16BIT_FIFOEN+0x16>
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	ff7fffff 	.word	0xff7fffff

080083b8 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083b8:	1d03      	adds	r3, r0, #4
 80083ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 80083bc:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083be:	2b21      	cmp	r3, #33	; 0x21
 80083c0:	d113      	bne.n	80083ea <UART_TxISR_8BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80083c2:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 80083c4:	0004      	movs	r4, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80083c6:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80083c8:	336a      	adds	r3, #106	; 0x6a
 80083ca:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 80083cc:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80083ce:	2a00      	cmp	r2, #0
 80083d0:	d00b      	beq.n	80083ea <UART_TxISR_8BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 80083d2:	8821      	ldrh	r1, [r4, #0]
 80083d4:	6803      	ldr	r3, [r0, #0]
 80083d6:	2900      	cmp	r1, #0
 80083d8:	d108      	bne.n	80083ec <UART_TxISR_8BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	490b      	ldr	r1, [pc, #44]	; (800840c <UART_TxISR_8BIT_FIFOEN+0x54>)
 80083de:	400a      	ands	r2, r1
 80083e0:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083e2:	2240      	movs	r2, #64	; 0x40
 80083e4:	6819      	ldr	r1, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	601a      	str	r2, [r3, #0]
}
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80083ec:	69d9      	ldr	r1, [r3, #28]
 80083ee:	4229      	tst	r1, r5
 80083f0:	d008      	beq.n	8008404 <UART_TxISR_8BIT_FIFOEN+0x4c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80083f2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80083f4:	780e      	ldrb	r6, [r1, #0]
        huart->pTxBuffPtr++;
 80083f6:	3101      	adds	r1, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80083f8:	629e      	str	r6, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80083fa:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80083fc:	8823      	ldrh	r3, [r4, #0]
 80083fe:	3b01      	subs	r3, #1
 8008400:	b29b      	uxth	r3, r3
 8008402:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008404:	3a01      	subs	r2, #1
 8008406:	b292      	uxth	r2, r2
 8008408:	e7e1      	b.n	80083ce <UART_TxISR_8BIT_FIFOEN+0x16>
 800840a:	46c0      	nop			; (mov r8, r8)
 800840c:	ff7fffff 	.word	0xff7fffff

08008410 <UART_TxISR_16BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008410:	1d03      	adds	r3, r0, #4
 8008412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8008414:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008416:	2b21      	cmp	r3, #33	; 0x21
 8008418:	d10d      	bne.n	8008436 <UART_TxISR_16BIT+0x26>
    if (huart->TxXferCount == 0U)
 800841a:	0001      	movs	r1, r0
 800841c:	3156      	adds	r1, #86	; 0x56
 800841e:	880a      	ldrh	r2, [r1, #0]
 8008420:	6803      	ldr	r3, [r0, #0]
 8008422:	2a00      	cmp	r2, #0
 8008424:	d108      	bne.n	8008438 <UART_TxISR_16BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008426:	2180      	movs	r1, #128	; 0x80
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	438a      	bics	r2, r1
 800842c:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800842e:	2240      	movs	r2, #64	; 0x40
 8008430:	6819      	ldr	r1, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	601a      	str	r2, [r3, #0]
}
 8008436:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008438:	6d04      	ldr	r4, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800843a:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 800843c:	3402      	adds	r4, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800843e:	05d2      	lsls	r2, r2, #23
 8008440:	0dd2      	lsrs	r2, r2, #23
 8008442:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008444:	6504      	str	r4, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8008446:	880b      	ldrh	r3, [r1, #0]
 8008448:	3b01      	subs	r3, #1
 800844a:	b29b      	uxth	r3, r3
 800844c:	800b      	strh	r3, [r1, #0]
 800844e:	e7f2      	b.n	8008436 <UART_TxISR_16BIT+0x26>

08008450 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008450:	1d03      	adds	r3, r0, #4
 8008452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8008454:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008456:	2b21      	cmp	r3, #33	; 0x21
 8008458:	d10d      	bne.n	8008476 <UART_TxISR_8BIT+0x26>
    if (huart->TxXferCount == 0U)
 800845a:	0001      	movs	r1, r0
 800845c:	3156      	adds	r1, #86	; 0x56
 800845e:	880a      	ldrh	r2, [r1, #0]
 8008460:	6803      	ldr	r3, [r0, #0]
 8008462:	2a00      	cmp	r2, #0
 8008464:	d108      	bne.n	8008478 <UART_TxISR_8BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008466:	2180      	movs	r1, #128	; 0x80
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	438a      	bics	r2, r1
 800846c:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800846e:	2240      	movs	r2, #64	; 0x40
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	601a      	str	r2, [r3, #0]
}
 8008476:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008478:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800847a:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 800847c:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800847e:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008480:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8008482:	880b      	ldrh	r3, [r1, #0]
 8008484:	3b01      	subs	r3, #1
 8008486:	b29b      	uxth	r3, r3
 8008488:	800b      	strh	r3, [r1, #0]
 800848a:	e7f4      	b.n	8008476 <UART_TxISR_8BIT+0x26>

0800848c <UART_DMAAbortOnError.lto_priv.342>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800848c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800848e:	2200      	movs	r2, #0
 8008490:	0019      	movs	r1, r3
  huart->TxXferCount = 0U;
 8008492:	3356      	adds	r3, #86	; 0x56
  huart->RxXferCount = 0U;
 8008494:	315e      	adds	r1, #94	; 0x5e
 8008496:	800a      	strh	r2, [r1, #0]
  huart->TxXferCount = 0U;
 8008498:	801a      	strh	r2, [r3, #0]
}
 800849a:	4770      	bx	lr

0800849c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800849c:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 800849e:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80084a0:	07ca      	lsls	r2, r1, #31
 80084a2:	d508      	bpl.n	80084b6 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80084a4:	0003      	movs	r3, r0
 80084a6:	3341      	adds	r3, #65	; 0x41
 80084a8:	781a      	ldrb	r2, [r3, #0]
 80084aa:	2328      	movs	r3, #40	; 0x28
 80084ac:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80084ae:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80084b0:	2a28      	cmp	r2, #40	; 0x28
 80084b2:	d000      	beq.n	80084b6 <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80084b4:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80084b6:	078a      	lsls	r2, r1, #30
 80084b8:	d508      	bpl.n	80084cc <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80084ba:	0002      	movs	r2, r0
 80084bc:	2428      	movs	r4, #40	; 0x28
 80084be:	3241      	adds	r2, #65	; 0x41
 80084c0:	7812      	ldrb	r2, [r2, #0]
 80084c2:	4022      	ands	r2, r4
 80084c4:	42a2      	cmp	r2, r4
 80084c6:	d10a      	bne.n	80084de <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80084c8:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80084ca:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80084cc:	074a      	lsls	r2, r1, #29
 80084ce:	d501      	bpl.n	80084d4 <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80084d0:	22b8      	movs	r2, #184	; 0xb8
 80084d2:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80084d4:	6801      	ldr	r1, [r0, #0]
 80084d6:	680a      	ldr	r2, [r1, #0]
 80084d8:	439a      	bics	r2, r3
 80084da:	600a      	str	r2, [r1, #0]
}
 80084dc:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80084de:	22f4      	movs	r2, #244	; 0xf4
 80084e0:	e7f3      	b.n	80084ca <I2C_Disable_IRQ+0x2e>

080084e2 <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 80084e2:	2200      	movs	r2, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 80084e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80084e8:	638a      	str	r2, [r1, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80084ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084ec:	3341      	adds	r3, #65	; 0x41
  hi2c->hdmarx->XferAbortCallback = NULL;
 80084ee:	638a      	str	r2, [r1, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084f0:	781a      	ldrb	r2, [r3, #0]
 80084f2:	2a60      	cmp	r2, #96	; 0x60
 80084f4:	d101      	bne.n	80084fa <I2C_DMAAbort+0x18>
    hi2c->State = HAL_I2C_STATE_READY;
 80084f6:	3a40      	subs	r2, #64	; 0x40
 80084f8:	701a      	strb	r2, [r3, #0]
}
 80084fa:	4770      	bx	lr

080084fc <I2C_Flush_TXDR>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80084fc:	6803      	ldr	r3, [r0, #0]
 80084fe:	699a      	ldr	r2, [r3, #24]
 8008500:	0792      	lsls	r2, r2, #30
 8008502:	d501      	bpl.n	8008508 <I2C_Flush_TXDR+0xc>
    hi2c->Instance->TXDR = 0x00U;
 8008504:	2200      	movs	r2, #0
 8008506:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008508:	2201      	movs	r2, #1
 800850a:	6999      	ldr	r1, [r3, #24]
 800850c:	4211      	tst	r1, r2
 800850e:	d102      	bne.n	8008516 <I2C_Flush_TXDR+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008510:	6999      	ldr	r1, [r3, #24]
 8008512:	430a      	orrs	r2, r1
 8008514:	619a      	str	r2, [r3, #24]
}
 8008516:	4770      	bx	lr

08008518 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008518:	4b16      	ldr	r3, [pc, #88]	; (8008574 <I2C_ITListenCplt+0x5c>)
{
 800851a:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800851c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800851e:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8008520:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8008522:	6303      	str	r3, [r0, #48]	; 0x30
{
 8008524:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 8008526:	2020      	movs	r0, #32
 8008528:	3241      	adds	r2, #65	; 0x41
 800852a:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800852c:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 800852e:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008530:	074b      	lsls	r3, r1, #29
 8008532:	d513      	bpl.n	800855c <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800853c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800853e:	3301      	adds	r3, #1
 8008540:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8008542:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008544:	2b00      	cmp	r3, #0
 8008546:	d009      	beq.n	800855c <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8008548:	3b01      	subs	r3, #1
 800854a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800854c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800854e:	3b01      	subs	r3, #1
 8008550:	b29b      	uxth	r3, r3
 8008552:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008554:	2304      	movs	r3, #4
 8008556:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008558:	4313      	orrs	r3, r2
 800855a:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800855c:	0020      	movs	r0, r4
 800855e:	2107      	movs	r1, #7
 8008560:	f7ff ff9c 	bl	800849c <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008564:	2210      	movs	r2, #16
 8008566:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hi2c);
 8008568:	3440      	adds	r4, #64	; 0x40
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800856a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800856c:	2300      	movs	r3, #0
 800856e:	7023      	strb	r3, [r4, #0]
}
 8008570:	bd10      	pop	{r4, pc}
 8008572:	46c0      	nop			; (mov r8, r8)
 8008574:	ffff0000 	.word	0xffff0000

08008578 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008578:	0003      	movs	r3, r0
{
 800857a:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800857c:	2500      	movs	r5, #0
 800857e:	3342      	adds	r3, #66	; 0x42
 8008580:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008582:	3b01      	subs	r3, #1
 8008584:	781a      	ldrb	r2, [r3, #0]
{
 8008586:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008588:	2a29      	cmp	r2, #41	; 0x29
 800858a:	d10a      	bne.n	80085a2 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800858c:	3a01      	subs	r2, #1
 800858e:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008590:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008592:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008594:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008596:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8008598:	3440      	adds	r4, #64	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800859a:	f7ff ff7f 	bl	800849c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800859e:	7025      	strb	r5, [r4, #0]
}
 80085a0:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80085a2:	781a      	ldrb	r2, [r3, #0]
 80085a4:	2a2a      	cmp	r2, #42	; 0x2a
 80085a6:	d1fb      	bne.n	80085a0 <I2C_ITSlaveSeqCplt+0x28>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80085a8:	3a02      	subs	r2, #2
 80085aa:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80085ac:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80085ae:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80085b0:	6303      	str	r3, [r0, #48]	; 0x30
 80085b2:	e7f0      	b.n	8008596 <I2C_ITSlaveSeqCplt+0x1e>

080085b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085b4:	b510      	push	{r4, lr}
 80085b6:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80085b8:	6803      	ldr	r3, [r0, #0]
 80085ba:	2114      	movs	r1, #20
 80085bc:	b2d8      	uxtb	r0, r3
 80085be:	3808      	subs	r0, #8
 80085c0:	f004 fc2c 	bl	800ce1c <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80085c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085c6:	4a06      	ldr	r2, [pc, #24]	; (80085e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 80085c8:	089b      	lsrs	r3, r3, #2
 80085ca:	189b      	adds	r3, r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80085d0:	4b04      	ldr	r3, [pc, #16]	; (80085e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80085d2:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80085d4:	231c      	movs	r3, #28
 80085d6:	4018      	ands	r0, r3
 80085d8:	3b1b      	subs	r3, #27
 80085da:	4083      	lsls	r3, r0
 80085dc:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80085de:	bd10      	pop	{r4, pc}
 80085e0:	10008200 	.word	0x10008200
 80085e4:	40020880 	.word	0x40020880

080085e8 <HAL_DMA_Init.part.0.constprop.135>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 80085e8:	b570      	push	{r4, r5, r6, lr}
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80085ea:	4b23      	ldr	r3, [pc, #140]	; (8008678 <HAL_DMA_Init.part.0.constprop.135+0x90>)
 80085ec:	6806      	ldr	r6, [r0, #0]
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 80085ee:	0004      	movs	r4, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80085f0:	2114      	movs	r1, #20
 80085f2:	18f0      	adds	r0, r6, r3
 80085f4:	f004 fc12 	bl	800ce1c <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 80085f8:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80085fa:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 80085fc:	1da5      	adds	r5, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80085fe:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8008600:	77eb      	strb	r3, [r5, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008602:	6833      	ldr	r3, [r6, #0]
 8008604:	4a1d      	ldr	r2, [pc, #116]	; (800867c <HAL_DMA_Init.part.0.constprop.135+0x94>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8008606:	68a1      	ldr	r1, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008608:	4013      	ands	r3, r2
 800860a:	6033      	str	r3, [r6, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800860c:	2380      	movs	r3, #128	; 0x80
 800860e:	6832      	ldr	r2, [r6, #0]
 8008610:	430b      	orrs	r3, r1
 8008612:	4313      	orrs	r3, r2
 8008614:	6033      	str	r3, [r6, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008616:	0020      	movs	r0, r4
 8008618:	f7ff ffcc 	bl	80085b4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800861c:	2380      	movs	r3, #128	; 0x80
 800861e:	68a2      	ldr	r2, [r4, #8]
 8008620:	01db      	lsls	r3, r3, #7
 8008622:	429a      	cmp	r2, r3
 8008624:	d101      	bne.n	800862a <HAL_DMA_Init.part.0.constprop.135+0x42>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008626:	2300      	movs	r3, #0
 8008628:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800862a:	6862      	ldr	r2, [r4, #4]
 800862c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800862e:	b2d3      	uxtb	r3, r2
 8008630:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008632:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008634:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008636:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008638:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800863a:	2a03      	cmp	r2, #3
 800863c:	d816      	bhi.n	800866c <HAL_DMA_Init.part.0.constprop.135+0x84>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800863e:	4a10      	ldr	r2, [pc, #64]	; (8008680 <HAL_DMA_Init.part.0.constprop.135+0x98>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008640:	4810      	ldr	r0, [pc, #64]	; (8008684 <HAL_DMA_Init.part.0.constprop.135+0x9c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008642:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008644:	2203      	movs	r2, #3
 8008646:	3b01      	subs	r3, #1
 8008648:	4013      	ands	r3, r2
 800864a:	3a02      	subs	r2, #2
 800864c:	409a      	lsls	r2, r3
 800864e:	65a2      	str	r2, [r4, #88]	; 0x58
 8008650:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008652:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008654:	0089      	lsls	r1, r1, #2
 8008656:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008658:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800865a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800865c:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800865e:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8008660:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008662:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8008664:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8008666:	77eb      	strb	r3, [r5, #31]
  __HAL_UNLOCK(hdma);
 8008668:	77e0      	strb	r0, [r4, #31]
}
 800866a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8008670:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008672:	65a3      	str	r3, [r4, #88]	; 0x58
 8008674:	e7f3      	b.n	800865e <HAL_DMA_Init.part.0.constprop.135+0x76>
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	bffdfff8 	.word	0xbffdfff8
 800867c:	ffff800f 	.word	0xffff800f
 8008680:	1000823f 	.word	0x1000823f
 8008684:	40020940 	.word	0x40020940

08008688 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008688:	4b06      	ldr	r3, [pc, #24]	; (80086a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800868a:	4a07      	ldr	r2, [pc, #28]	; (80086a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	045b      	lsls	r3, r3, #17
 8008690:	0f5b      	lsrs	r3, r3, #29
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	589b      	ldr	r3, [r3, r2]
 8008696:	221f      	movs	r2, #31
 8008698:	4013      	ands	r3, r2
 800869a:	4a04      	ldr	r2, [pc, #16]	; (80086ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800869c:	6810      	ldr	r0, [r2, #0]
 800869e:	40d8      	lsrs	r0, r3
}
 80086a0:	4770      	bx	lr
 80086a2:	46c0      	nop			; (mov r8, r8)
 80086a4:	40021000 	.word	0x40021000
 80086a8:	08017f5c 	.word	0x08017f5c
 80086ac:	20000000 	.word	0x20000000

080086b0 <validate.lto_priv.161>:
 80086b0:	6983      	ldr	r3, [r0, #24]
 80086b2:	b510      	push	{r4, lr}
 80086b4:	0004      	movs	r4, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <validate.lto_priv.161+0x20>
 80086ba:	4b12      	ldr	r3, [pc, #72]	; (8008704 <validate.lto_priv.161+0x54>)
 80086bc:	001a      	movs	r2, r3
 80086be:	3260      	adds	r2, #96	; 0x60
 80086c0:	7812      	ldrb	r2, [r2, #0]
 80086c2:	2a00      	cmp	r2, #0
 80086c4:	d004      	beq.n	80086d0 <validate.lto_priv.161+0x20>
 80086c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086c8:	4a0f      	ldr	r2, [pc, #60]	; (8008708 <validate.lto_priv.161+0x58>)
 80086ca:	4910      	ldr	r1, [pc, #64]	; (800870c <validate.lto_priv.161+0x5c>)
 80086cc:	2001      	movs	r0, #1
 80086ce:	4798      	blx	r3
 80086d0:	69e3      	ldr	r3, [r4, #28]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <validate.lto_priv.161+0x3c>
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <validate.lto_priv.161+0x54>)
 80086d8:	001a      	movs	r2, r3
 80086da:	3260      	adds	r2, #96	; 0x60
 80086dc:	7812      	ldrb	r2, [r2, #0]
 80086de:	2a00      	cmp	r2, #0
 80086e0:	d004      	beq.n	80086ec <validate.lto_priv.161+0x3c>
 80086e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e4:	4a0a      	ldr	r2, [pc, #40]	; (8008710 <validate.lto_priv.161+0x60>)
 80086e6:	4909      	ldr	r1, [pc, #36]	; (800870c <validate.lto_priv.161+0x5c>)
 80086e8:	2001      	movs	r0, #1
 80086ea:	4798      	blx	r3
 80086ec:	6963      	ldr	r3, [r4, #20]
 80086ee:	2001      	movs	r0, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d006      	beq.n	8008702 <validate.lto_priv.161+0x52>
 80086f4:	4b03      	ldr	r3, [pc, #12]	; (8008704 <validate.lto_priv.161+0x54>)
 80086f6:	2000      	movs	r0, #0
 80086f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086fa:	4a06      	ldr	r2, [pc, #24]	; (8008714 <validate.lto_priv.161+0x64>)
 80086fc:	4903      	ldr	r1, [pc, #12]	; (800870c <validate.lto_priv.161+0x5c>)
 80086fe:	4798      	blx	r3
 8008700:	2000      	movs	r0, #0
 8008702:	bd10      	pop	{r4, pc}
 8008704:	200003b8 	.word	0x200003b8
 8008708:	0801ab40 	.word	0x0801ab40
 800870c:	0801c8e0 	.word	0x0801c8e0
 8008710:	0801ab73 	.word	0x0801ab73
 8008714:	0801c8f6 	.word	0x0801c8f6

08008718 <reset.lto_priv.166.lto_priv.328>:
 8008718:	4770      	bx	lr

0800871a <consume.lto_priv.327>:
 800871a:	b510      	push	{r4, lr}
 800871c:	0004      	movs	r4, r0
 800871e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008720:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008724:	6900      	ldr	r0, [r0, #16]
 8008726:	4798      	blx	r3
 8008728:	2200      	movs	r2, #0
 800872a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800872c:	615a      	str	r2, [r3, #20]
 800872e:	bd10      	pop	{r4, pc}

08008730 <validate.lto_priv.160>:
 8008730:	6942      	ldr	r2, [r0, #20]
 8008732:	6903      	ldr	r3, [r0, #16]
 8008734:	b510      	push	{r4, lr}
 8008736:	4293      	cmp	r3, r2
 8008738:	d107      	bne.n	800874a <validate.lto_priv.160+0x1a>
 800873a:	4b0d      	ldr	r3, [pc, #52]	; (8008770 <validate.lto_priv.160+0x40>)
 800873c:	4a0d      	ldr	r2, [pc, #52]	; (8008774 <validate.lto_priv.160+0x44>)
 800873e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008740:	2000      	movs	r0, #0
 8008742:	490d      	ldr	r1, [pc, #52]	; (8008778 <validate.lto_priv.160+0x48>)
 8008744:	4798      	blx	r3
 8008746:	2000      	movs	r0, #0
 8008748:	bd10      	pop	{r4, pc}
 800874a:	6984      	ldr	r4, [r0, #24]
 800874c:	2c00      	cmp	r4, #0
 800874e:	d003      	beq.n	8008758 <validate.lto_priv.160+0x28>
 8008750:	4b07      	ldr	r3, [pc, #28]	; (8008770 <validate.lto_priv.160+0x40>)
 8008752:	4a0a      	ldr	r2, [pc, #40]	; (800877c <validate.lto_priv.160+0x4c>)
 8008754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008756:	e7f3      	b.n	8008740 <validate.lto_priv.160+0x10>
 8008758:	69c3      	ldr	r3, [r0, #28]
 800875a:	3304      	adds	r3, #4
 800875c:	429a      	cmp	r2, r3
 800875e:	d003      	beq.n	8008768 <validate.lto_priv.160+0x38>
 8008760:	4b03      	ldr	r3, [pc, #12]	; (8008770 <validate.lto_priv.160+0x40>)
 8008762:	4a07      	ldr	r2, [pc, #28]	; (8008780 <validate.lto_priv.160+0x50>)
 8008764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008766:	e7eb      	b.n	8008740 <validate.lto_priv.160+0x10>
 8008768:	6800      	ldr	r0, [r0, #0]
 800876a:	6883      	ldr	r3, [r0, #8]
 800876c:	4798      	blx	r3
 800876e:	e7eb      	b.n	8008748 <validate.lto_priv.160+0x18>
 8008770:	200003b8 	.word	0x200003b8
 8008774:	0801c91d 	.word	0x0801c91d
 8008778:	0801c949 	.word	0x0801c949
 800877c:	0801c96d 	.word	0x0801c96d
 8008780:	0801c98d 	.word	0x0801c98d

08008784 <reset.lto_priv.165>:
 8008784:	2301      	movs	r3, #1
 8008786:	b510      	push	{r4, lr}
 8008788:	69c2      	ldr	r2, [r0, #28]
 800878a:	6800      	ldr	r0, [r0, #0]
 800878c:	7013      	strb	r3, [r2, #0]
 800878e:	68c3      	ldr	r3, [r0, #12]
 8008790:	4798      	blx	r3
 8008792:	bd10      	pop	{r4, pc}

08008794 <filter_q3_12_complex.lto_priv.274>:
 8008794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008796:	000c      	movs	r4, r1
 8008798:	218b      	movs	r1, #139	; 0x8b
 800879a:	1c1e      	adds	r6, r3, #0
 800879c:	05c9      	lsls	r1, r1, #23
 800879e:	0893      	lsrs	r3, r2, #2
 80087a0:	0005      	movs	r5, r0
 80087a2:	1c30      	adds	r0, r6, #0
 80087a4:	9301      	str	r3, [sp, #4]
 80087a6:	f004 f807 	bl	800c7b8 <__aeabi_fmul>
 80087aa:	2100      	movs	r1, #0
 80087ac:	1c07      	adds	r7, r0, #0
 80087ae:	1c30      	adds	r0, r6, #0
 80087b0:	f004 fd18 	bl	800d1e4 <__aeabi_fcmpge>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d10d      	bne.n	80087d4 <filter_q3_12_complex.lto_priv.274+0x40>
 80087b8:	21bf      	movs	r1, #191	; 0xbf
 80087ba:	0609      	lsls	r1, r1, #24
 80087bc:	1c38      	adds	r0, r7, #0
 80087be:	f003 fd4f 	bl	800c260 <__aeabi_fadd>
 80087c2:	f004 feef 	bl	800d5a4 <__aeabi_f2iz>
 80087c6:	9b01      	ldr	r3, [sp, #4]
 80087c8:	b200      	sxth	r0, r0
 80087ca:	009a      	lsls	r2, r3, #2
 80087cc:	18a2      	adds	r2, r4, r2
 80087ce:	42a2      	cmp	r2, r4
 80087d0:	d103      	bne.n	80087da <filter_q3_12_complex.lto_priv.274+0x46>
 80087d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80087d4:	21fc      	movs	r1, #252	; 0xfc
 80087d6:	0589      	lsls	r1, r1, #22
 80087d8:	e7f0      	b.n	80087bc <filter_q3_12_complex.lto_priv.274+0x28>
 80087da:	2300      	movs	r3, #0
 80087dc:	5ee1      	ldrsh	r1, [r4, r3]
 80087de:	2300      	movs	r3, #0
 80087e0:	5eee      	ldrsh	r6, [r5, r3]
 80087e2:	1a76      	subs	r6, r6, r1
 80087e4:	4346      	muls	r6, r0
 80087e6:	17f3      	asrs	r3, r6, #31
 80087e8:	051b      	lsls	r3, r3, #20
 80087ea:	0d1b      	lsrs	r3, r3, #20
 80087ec:	199b      	adds	r3, r3, r6
 80087ee:	131b      	asrs	r3, r3, #12
 80087f0:	185b      	adds	r3, r3, r1
 80087f2:	8023      	strh	r3, [r4, #0]
 80087f4:	2302      	movs	r3, #2
 80087f6:	5eee      	ldrsh	r6, [r5, r3]
 80087f8:	2302      	movs	r3, #2
 80087fa:	5ee1      	ldrsh	r1, [r4, r3]
 80087fc:	3504      	adds	r5, #4
 80087fe:	1a76      	subs	r6, r6, r1
 8008800:	4346      	muls	r6, r0
 8008802:	17f3      	asrs	r3, r6, #31
 8008804:	051b      	lsls	r3, r3, #20
 8008806:	0d1b      	lsrs	r3, r3, #20
 8008808:	199b      	adds	r3, r3, r6
 800880a:	131b      	asrs	r3, r3, #12
 800880c:	185b      	adds	r3, r3, r1
 800880e:	8063      	strh	r3, [r4, #2]
 8008810:	3404      	adds	r4, #4
 8008812:	e7dc      	b.n	80087ce <filter_q3_12_complex.lto_priv.274+0x3a>

08008814 <validate.lto_priv.159>:
 8008814:	6983      	ldr	r3, [r0, #24]
 8008816:	b510      	push	{r4, lr}
 8008818:	0004      	movs	r4, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00a      	beq.n	8008834 <validate.lto_priv.159+0x20>
 800881e:	4b0e      	ldr	r3, [pc, #56]	; (8008858 <validate.lto_priv.159+0x44>)
 8008820:	001a      	movs	r2, r3
 8008822:	3260      	adds	r2, #96	; 0x60
 8008824:	7812      	ldrb	r2, [r2, #0]
 8008826:	2a00      	cmp	r2, #0
 8008828:	d004      	beq.n	8008834 <validate.lto_priv.159+0x20>
 800882a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800882c:	4a0b      	ldr	r2, [pc, #44]	; (800885c <validate.lto_priv.159+0x48>)
 800882e:	490c      	ldr	r1, [pc, #48]	; (8008860 <validate.lto_priv.159+0x4c>)
 8008830:	2001      	movs	r0, #1
 8008832:	4798      	blx	r3
 8008834:	69e3      	ldr	r3, [r4, #28]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <validate.lto_priv.159+0x3c>
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <validate.lto_priv.159+0x44>)
 800883c:	001a      	movs	r2, r3
 800883e:	3260      	adds	r2, #96	; 0x60
 8008840:	7812      	ldrb	r2, [r2, #0]
 8008842:	2a00      	cmp	r2, #0
 8008844:	d004      	beq.n	8008850 <validate.lto_priv.159+0x3c>
 8008846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008848:	4a06      	ldr	r2, [pc, #24]	; (8008864 <validate.lto_priv.159+0x50>)
 800884a:	4905      	ldr	r1, [pc, #20]	; (8008860 <validate.lto_priv.159+0x4c>)
 800884c:	2001      	movs	r0, #1
 800884e:	4798      	blx	r3
 8008850:	6820      	ldr	r0, [r4, #0]
 8008852:	6883      	ldr	r3, [r0, #8]
 8008854:	4798      	blx	r3
 8008856:	bd10      	pop	{r4, pc}
 8008858:	200003b8 	.word	0x200003b8
 800885c:	0801ab40 	.word	0x0801ab40
 8008860:	0801c9b4 	.word	0x0801c9b4
 8008864:	0801ab73 	.word	0x0801ab73

08008868 <event.lto_priv.171>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	0004      	movs	r4, r0
 800886c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800886e:	6945      	ldr	r5, [r0, #20]
 8008870:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008872:	6819      	ldr	r1, [r3, #0]
 8008874:	6900      	ldr	r0, [r0, #16]
 8008876:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008878:	4798      	blx	r3
 800887a:	7028      	strb	r0, [r5, #0]
 800887c:	6820      	ldr	r0, [r4, #0]
 800887e:	6843      	ldr	r3, [r0, #4]
 8008880:	4798      	blx	r3
 8008882:	bd70      	pop	{r4, r5, r6, pc}

08008884 <saturation_check_i16.lto_priv.331>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	0006      	movs	r6, r0
 8008888:	000c      	movs	r4, r1
 800888a:	4813      	ldr	r0, [pc, #76]	; (80088d8 <saturation_check_i16.lto_priv.331+0x54>)
 800888c:	1c11      	adds	r1, r2, #0
 800888e:	f004 f8c5 	bl	800ca1c <__aeabi_fsub>
 8008892:	4911      	ldr	r1, [pc, #68]	; (80088d8 <saturation_check_i16.lto_priv.331+0x54>)
 8008894:	f003 fe7e 	bl	800c594 <__aeabi_fdiv>
 8008898:	21c7      	movs	r1, #199	; 0xc7
 800889a:	0609      	lsls	r1, r1, #24
 800889c:	1c07      	adds	r7, r0, #0
 800889e:	f003 ff8b 	bl	800c7b8 <__aeabi_fmul>
 80088a2:	f004 fe7f 	bl	800d5a4 <__aeabi_f2iz>
 80088a6:	490d      	ldr	r1, [pc, #52]	; (80088dc <saturation_check_i16.lto_priv.331+0x58>)
 80088a8:	b205      	sxth	r5, r0
 80088aa:	1c38      	adds	r0, r7, #0
 80088ac:	f003 ff84 	bl	800c7b8 <__aeabi_fmul>
 80088b0:	f004 fe78 	bl	800d5a4 <__aeabi_f2iz>
 80088b4:	0864      	lsrs	r4, r4, #1
 80088b6:	0064      	lsls	r4, r4, #1
 80088b8:	b200      	sxth	r0, r0
 80088ba:	1934      	adds	r4, r6, r4
 80088bc:	42a6      	cmp	r6, r4
 80088be:	d101      	bne.n	80088c4 <saturation_check_i16.lto_priv.331+0x40>
 80088c0:	2000      	movs	r0, #0
 80088c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088c4:	2300      	movs	r3, #0
 80088c6:	5ef2      	ldrsh	r2, [r6, r3]
 80088c8:	4290      	cmp	r0, r2
 80088ca:	dd02      	ble.n	80088d2 <saturation_check_i16.lto_priv.331+0x4e>
 80088cc:	3602      	adds	r6, #2
 80088ce:	4295      	cmp	r5, r2
 80088d0:	dbf4      	blt.n	80088bc <saturation_check_i16.lto_priv.331+0x38>
 80088d2:	2001      	movs	r0, #1
 80088d4:	e7f5      	b.n	80088c2 <saturation_check_i16.lto_priv.331+0x3e>
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	42c80000 	.word	0x42c80000
 80088dc:	46fffe00 	.word	0x46fffe00

080088e0 <validate.lto_priv.158>:
 80088e0:	6903      	ldr	r3, [r0, #16]
 80088e2:	6942      	ldr	r2, [r0, #20]
 80088e4:	b510      	push	{r4, lr}
 80088e6:	0004      	movs	r4, r0
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d007      	beq.n	80088fc <validate.lto_priv.158+0x1c>
 80088ec:	4b13      	ldr	r3, [pc, #76]	; (800893c <validate.lto_priv.158+0x5c>)
 80088ee:	2000      	movs	r0, #0
 80088f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f2:	4a13      	ldr	r2, [pc, #76]	; (8008940 <validate.lto_priv.158+0x60>)
 80088f4:	4913      	ldr	r1, [pc, #76]	; (8008944 <validate.lto_priv.158+0x64>)
 80088f6:	4798      	blx	r3
 80088f8:	2000      	movs	r0, #0
 80088fa:	bd10      	pop	{r4, pc}
 80088fc:	6983      	ldr	r3, [r0, #24]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <validate.lto_priv.158+0x38>
 8008902:	4b0e      	ldr	r3, [pc, #56]	; (800893c <validate.lto_priv.158+0x5c>)
 8008904:	001a      	movs	r2, r3
 8008906:	3260      	adds	r2, #96	; 0x60
 8008908:	7812      	ldrb	r2, [r2, #0]
 800890a:	2a00      	cmp	r2, #0
 800890c:	d004      	beq.n	8008918 <validate.lto_priv.158+0x38>
 800890e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008910:	4a0d      	ldr	r2, [pc, #52]	; (8008948 <validate.lto_priv.158+0x68>)
 8008912:	490c      	ldr	r1, [pc, #48]	; (8008944 <validate.lto_priv.158+0x64>)
 8008914:	2001      	movs	r0, #1
 8008916:	4798      	blx	r3
 8008918:	69e3      	ldr	r3, [r4, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00a      	beq.n	8008934 <validate.lto_priv.158+0x54>
 800891e:	4b07      	ldr	r3, [pc, #28]	; (800893c <validate.lto_priv.158+0x5c>)
 8008920:	001a      	movs	r2, r3
 8008922:	3260      	adds	r2, #96	; 0x60
 8008924:	7812      	ldrb	r2, [r2, #0]
 8008926:	2a00      	cmp	r2, #0
 8008928:	d004      	beq.n	8008934 <validate.lto_priv.158+0x54>
 800892a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800892c:	4a07      	ldr	r2, [pc, #28]	; (800894c <validate.lto_priv.158+0x6c>)
 800892e:	4905      	ldr	r1, [pc, #20]	; (8008944 <validate.lto_priv.158+0x64>)
 8008930:	2001      	movs	r0, #1
 8008932:	4798      	blx	r3
 8008934:	6820      	ldr	r0, [r4, #0]
 8008936:	6883      	ldr	r3, [r0, #8]
 8008938:	4798      	blx	r3
 800893a:	e7de      	b.n	80088fa <validate.lto_priv.158+0x1a>
 800893c:	200003b8 	.word	0x200003b8
 8008940:	0801ab82 	.word	0x0801ab82
 8008944:	0801c9cd 	.word	0x0801c9cd
 8008948:	0801ab40 	.word	0x0801ab40
 800894c:	0801ab73 	.word	0x0801ab73

08008950 <event.lto_priv.170.lto_priv.339>:
 8008950:	b510      	push	{r4, lr}
 8008952:	0004      	movs	r4, r0
 8008954:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008956:	4798      	blx	r3
 8008958:	6820      	ldr	r0, [r4, #0]
 800895a:	6843      	ldr	r3, [r0, #4]
 800895c:	4798      	blx	r3
 800895e:	bd10      	pop	{r4, pc}

08008960 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008962:	0007      	movs	r7, r0
 8008964:	3708      	adds	r7, #8
 8008966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 8008968:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800896a:	2b22      	cmp	r3, #34	; 0x22
 800896c:	d140      	bne.n	80089f0 <UART_RxISR_16BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 800896e:	0003      	movs	r3, r0
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008970:	0006      	movs	r6, r0
  uint16_t  uhMask = huart->Mask;
 8008972:	3360      	adds	r3, #96	; 0x60
 8008974:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008976:	3668      	adds	r6, #104	; 0x68
  uint16_t  uhMask = huart->Mask;
 8008978:	9301      	str	r3, [sp, #4]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800897a:	8835      	ldrh	r5, [r6, #0]
 800897c:	0021      	movs	r1, r4
 800897e:	315e      	adds	r1, #94	; 0x5e
 8008980:	2d00      	cmp	r5, #0
 8008982:	d112      	bne.n	80089aa <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008984:	880b      	ldrh	r3, [r1, #0]
 8008986:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00d      	beq.n	80089a8 <UART_RxISR_16BIT_FIFOEN+0x48>
 800898c:	8832      	ldrh	r2, [r6, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d90a      	bls.n	80089a8 <UART_RxISR_16BIT_FIFOEN+0x48>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	4919      	ldr	r1, [pc, #100]	; (80089fc <UART_RxISR_16BIT_FIFOEN+0x9c>)
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	400a      	ands	r2, r1
 800899a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800899c:	4a18      	ldr	r2, [pc, #96]	; (8008a00 <UART_RxISR_16BIT_FIFOEN+0xa0>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800899e:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 80089a0:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089a2:	2220      	movs	r2, #32
 80089a4:	430a      	orrs	r2, r1
 80089a6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089a8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089aa:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089ac:	6823      	ldr	r3, [r4, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089ae:	4694      	mov	ip, r2
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80089b2:	9a01      	ldr	r2, [sp, #4]
 80089b4:	4010      	ands	r0, r2
 80089b6:	4662      	mov	r2, ip
 80089b8:	8010      	strh	r0, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80089ba:	3202      	adds	r2, #2
 80089bc:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80089be:	880a      	ldrh	r2, [r1, #0]
 80089c0:	3a01      	subs	r2, #1
 80089c2:	b292      	uxth	r2, r2
 80089c4:	800a      	strh	r2, [r1, #0]
      if (huart->RxXferCount == 0U)
 80089c6:	880a      	ldrh	r2, [r1, #0]
 80089c8:	b292      	uxth	r2, r2
 80089ca:	2a00      	cmp	r2, #0
 80089cc:	d10d      	bne.n	80089ea <UART_RxISR_16BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089ce:	6819      	ldr	r1, [r3, #0]
 80089d0:	480c      	ldr	r0, [pc, #48]	; (8008a04 <UART_RxISR_16BIT_FIFOEN+0xa4>)
 80089d2:	4001      	ands	r1, r0
 80089d4:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089d6:	6899      	ldr	r1, [r3, #8]
 80089d8:	480b      	ldr	r0, [pc, #44]	; (8008a08 <UART_RxISR_16BIT_FIFOEN+0xa8>)
 80089da:	4001      	ands	r1, r0
 80089dc:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80089de:	2320      	movs	r3, #32
        HAL_UART_RxCpltCallback(huart);
 80089e0:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 80089e2:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->RxISR = NULL;
 80089e4:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80089e6:	f7fc ff03 	bl	80057f0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80089ea:	3d01      	subs	r5, #1
 80089ec:	b2ad      	uxth	r5, r5
 80089ee:	e7c5      	b.n	800897c <UART_RxISR_16BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089f0:	2308      	movs	r3, #8
 80089f2:	6802      	ldr	r2, [r0, #0]
 80089f4:	6991      	ldr	r1, [r2, #24]
 80089f6:	430b      	orrs	r3, r1
 80089f8:	6193      	str	r3, [r2, #24]
 80089fa:	e7d5      	b.n	80089a8 <UART_RxISR_16BIT_FIFOEN+0x48>
 80089fc:	efffffff 	.word	0xefffffff
 8008a00:	08008ab9 	.word	0x08008ab9
 8008a04:	fffffeff 	.word	0xfffffeff
 8008a08:	effffffe 	.word	0xeffffffe

08008a0c <UART_RxISR_8BIT_FIFOEN>:
{
 8008a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a0e:	0007      	movs	r7, r0
 8008a10:	3708      	adds	r7, #8
 8008a12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 8008a14:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a16:	2b22      	cmp	r3, #34	; 0x22
 8008a18:	d140      	bne.n	8008a9c <UART_RxISR_8BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 8008a1a:	0003      	movs	r3, r0
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008a1c:	0006      	movs	r6, r0
  uint16_t  uhMask = huart->Mask;
 8008a1e:	3360      	adds	r3, #96	; 0x60
 8008a20:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008a22:	3668      	adds	r6, #104	; 0x68
  uint16_t  uhMask = huart->Mask;
 8008a24:	9301      	str	r3, [sp, #4]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008a26:	8835      	ldrh	r5, [r6, #0]
 8008a28:	0022      	movs	r2, r4
 8008a2a:	325e      	adds	r2, #94	; 0x5e
 8008a2c:	2d00      	cmp	r5, #0
 8008a2e:	d112      	bne.n	8008a56 <UART_RxISR_8BIT_FIFOEN+0x4a>
    rxdatacount = huart->RxXferCount;
 8008a30:	8813      	ldrh	r3, [r2, #0]
 8008a32:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00d      	beq.n	8008a54 <UART_RxISR_8BIT_FIFOEN+0x48>
 8008a38:	8832      	ldrh	r2, [r6, #0]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d90a      	bls.n	8008a54 <UART_RxISR_8BIT_FIFOEN+0x48>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	4919      	ldr	r1, [pc, #100]	; (8008aa8 <UART_RxISR_8BIT_FIFOEN+0x9c>)
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	400a      	ands	r2, r1
 8008a46:	609a      	str	r2, [r3, #8]
      huart->RxISR = UART_RxISR_8BIT;
 8008a48:	4a18      	ldr	r2, [pc, #96]	; (8008aac <UART_RxISR_8BIT_FIFOEN+0xa0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a4a:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8008a4c:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a4e:	2220      	movs	r2, #32
 8008a50:	430a      	orrs	r2, r1
 8008a52:	601a      	str	r2, [r3, #0]
}
 8008a54:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a56:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a58:	9901      	ldr	r1, [sp, #4]
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a5c:	400b      	ands	r3, r1
 8008a5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008a60:	700b      	strb	r3, [r1, #0]
      huart->pRxBuffPtr++;
 8008a62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a64:	3301      	adds	r3, #1
 8008a66:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008a68:	8813      	ldrh	r3, [r2, #0]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	8013      	strh	r3, [r2, #0]
      if (huart->RxXferCount == 0U)
 8008a70:	8813      	ldrh	r3, [r2, #0]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10e      	bne.n	8008a96 <UART_RxISR_8BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a78:	6822      	ldr	r2, [r4, #0]
 8008a7a:	480d      	ldr	r0, [pc, #52]	; (8008ab0 <UART_RxISR_8BIT_FIFOEN+0xa4>)
 8008a7c:	6811      	ldr	r1, [r2, #0]
 8008a7e:	4001      	ands	r1, r0
 8008a80:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a82:	6891      	ldr	r1, [r2, #8]
 8008a84:	480b      	ldr	r0, [pc, #44]	; (8008ab4 <UART_RxISR_8BIT_FIFOEN+0xa8>)
 8008a86:	4001      	ands	r1, r0
 8008a88:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008a8a:	2220      	movs	r2, #32
        HAL_UART_RxCpltCallback(huart);
 8008a8c:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	67fa      	str	r2, [r7, #124]	; 0x7c
        huart->RxISR = NULL;
 8008a90:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8008a92:	f7fc fead 	bl	80057f0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008a96:	3d01      	subs	r5, #1
 8008a98:	b2ad      	uxth	r5, r5
 8008a9a:	e7c5      	b.n	8008a28 <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a9c:	2308      	movs	r3, #8
 8008a9e:	6802      	ldr	r2, [r0, #0]
 8008aa0:	6991      	ldr	r1, [r2, #24]
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	6193      	str	r3, [r2, #24]
 8008aa6:	e7d5      	b.n	8008a54 <UART_RxISR_8BIT_FIFOEN+0x48>
 8008aa8:	efffffff 	.word	0xefffffff
 8008aac:	08008b19 	.word	0x08008b19
 8008ab0:	fffffeff 	.word	0xfffffeff
 8008ab4:	effffffe 	.word	0xeffffffe

08008ab8 <UART_RxISR_16BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ab8:	0001      	movs	r1, r0
 8008aba:	3108      	adds	r1, #8
 8008abc:	6fca      	ldr	r2, [r1, #124]	; 0x7c
{
 8008abe:	b570      	push	{r4, r5, r6, lr}
 8008ac0:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ac2:	2a22      	cmp	r2, #34	; 0x22
 8008ac4:	d121      	bne.n	8008b0a <UART_RxISR_16BIT+0x52>
  uint16_t uhMask = huart->Mask;
 8008ac6:	0005      	movs	r5, r0
 8008ac8:	3560      	adds	r5, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008aca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8008acc:	882d      	ldrh	r5, [r5, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ace:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ad0:	402c      	ands	r4, r5
 8008ad2:	8014      	strh	r4, [r2, #0]
    huart->RxXferCount--;
 8008ad4:	0004      	movs	r4, r0
    huart->pRxBuffPtr += 2U;
 8008ad6:	3202      	adds	r2, #2
 8008ad8:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008ada:	345e      	adds	r4, #94	; 0x5e
 8008adc:	8822      	ldrh	r2, [r4, #0]
 8008ade:	3a01      	subs	r2, #1
 8008ae0:	b292      	uxth	r2, r2
 8008ae2:	8022      	strh	r2, [r4, #0]
    if (huart->RxXferCount == 0U)
 8008ae4:	8822      	ldrh	r2, [r4, #0]
 8008ae6:	b292      	uxth	r2, r2
 8008ae8:	2a00      	cmp	r2, #0
 8008aea:	d10d      	bne.n	8008b08 <UART_RxISR_16BIT+0x50>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aec:	681c      	ldr	r4, [r3, #0]
 8008aee:	4d09      	ldr	r5, [pc, #36]	; (8008b14 <UART_RxISR_16BIT+0x5c>)
 8008af0:	402c      	ands	r4, r5
 8008af2:	601c      	str	r4, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af4:	689c      	ldr	r4, [r3, #8]
 8008af6:	3523      	adds	r5, #35	; 0x23
 8008af8:	35ff      	adds	r5, #255	; 0xff
 8008afa:	43ac      	bics	r4, r5
 8008afc:	609c      	str	r4, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008afe:	2320      	movs	r3, #32
 8008b00:	67cb      	str	r3, [r1, #124]	; 0x7c
      huart->RxISR = NULL;
 8008b02:	66c2      	str	r2, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 8008b04:	f7fc fe74 	bl	80057f0 <HAL_UART_RxCpltCallback>
}
 8008b08:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b0a:	2208      	movs	r2, #8
 8008b0c:	6999      	ldr	r1, [r3, #24]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	619a      	str	r2, [r3, #24]
 8008b12:	e7f9      	b.n	8008b08 <UART_RxISR_16BIT+0x50>
 8008b14:	fffffedf 	.word	0xfffffedf

08008b18 <UART_RxISR_8BIT>:
{
 8008b18:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b1a:	0004      	movs	r4, r0
 8008b1c:	3408      	adds	r4, #8
 8008b1e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8008b20:	6803      	ldr	r3, [r0, #0]
 8008b22:	2a22      	cmp	r2, #34	; 0x22
 8008b24:	d123      	bne.n	8008b6e <UART_RxISR_8BIT+0x56>
  uint16_t uhMask = huart->Mask;
 8008b26:	0002      	movs	r2, r0
 8008b28:	3260      	adds	r2, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b2c:	8812      	ldrh	r2, [r2, #0]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008b32:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8008b34:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8008b36:	6d83      	ldr	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008b38:	325e      	adds	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008b3e:	8813      	ldrh	r3, [r2, #0]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	8013      	strh	r3, [r2, #0]
    if (huart->RxXferCount == 0U)
 8008b46:	8813      	ldrh	r3, [r2, #0]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10e      	bne.n	8008b6c <UART_RxISR_8BIT+0x54>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b4e:	6802      	ldr	r2, [r0, #0]
 8008b50:	4d09      	ldr	r5, [pc, #36]	; (8008b78 <UART_RxISR_8BIT+0x60>)
 8008b52:	6811      	ldr	r1, [r2, #0]
 8008b54:	4029      	ands	r1, r5
 8008b56:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b58:	6891      	ldr	r1, [r2, #8]
 8008b5a:	3523      	adds	r5, #35	; 0x23
 8008b5c:	35ff      	adds	r5, #255	; 0xff
 8008b5e:	43a9      	bics	r1, r5
 8008b60:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008b62:	2220      	movs	r2, #32
 8008b64:	67e2      	str	r2, [r4, #124]	; 0x7c
      huart->RxISR = NULL;
 8008b66:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 8008b68:	f7fc fe42 	bl	80057f0 <HAL_UART_RxCpltCallback>
}
 8008b6c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b6e:	2208      	movs	r2, #8
 8008b70:	6999      	ldr	r1, [r3, #24]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	619a      	str	r2, [r3, #24]
 8008b76:	e7f9      	b.n	8008b6c <UART_RxISR_8BIT+0x54>
 8008b78:	fffffedf 	.word	0xfffffedf

08008b7c <event.lto_priv.172>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	0004      	movs	r4, r0
 8008b80:	69c5      	ldr	r5, [r0, #28]
 8008b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b84:	1d2e      	adds	r6, r5, #4
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	782b      	ldrb	r3, [r5, #0]
 8008b8a:	6900      	ldr	r0, [r0, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d009      	beq.n	8008ba4 <event.lto_priv.172+0x28>
 8008b90:	0001      	movs	r1, r0
 8008b92:	0030      	movs	r0, r6
 8008b94:	f00b ff8c 	bl	8014ab0 <memcpy>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	702b      	strb	r3, [r5, #0]
 8008b9c:	6820      	ldr	r0, [r4, #0]
 8008b9e:	6843      	ldr	r3, [r0, #4]
 8008ba0:	4798      	blx	r3
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ba6:	0031      	movs	r1, r6
 8008ba8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008baa:	47a8      	blx	r5
 8008bac:	e7f6      	b.n	8008b9c <event.lto_priv.172+0x20>

08008bae <reset.lto_priv.164.lto_priv.329>:
 8008bae:	b510      	push	{r4, lr}
 8008bb0:	f7f7 fcf2 	bl	8000598 <reset.lto_priv.162.lto_priv.249>
 8008bb4:	bd10      	pop	{r4, pc}

08008bb6 <reset.lto_priv.163.lto_priv.340>:
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	f7f7 fcee 	bl	8000598 <reset.lto_priv.162.lto_priv.249>
 8008bbc:	bd10      	pop	{r4, pc}

08008bbe <phase_compensate_q3_12_complex.lto_priv.341>:
 8008bbe:	b510      	push	{r4, lr}
 8008bc0:	1d83      	adds	r3, r0, #6
 8008bc2:	223e      	movs	r2, #62	; 0x3e
 8008bc4:	5e9b      	ldrsh	r3, [r3, r2]
 8008bc6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8008bc8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008bca:	6900      	ldr	r0, [r0, #16]
 8008bcc:	f7f9 fe8a 	bl	80028e4 <do_phase_compensation_q3_12.lto_priv.250>
 8008bd0:	bd10      	pop	{r4, pc}

08008bd2 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.157>:
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bd2:	20e0      	movs	r0, #224	; 0xe0
 8008bd4:	4b17      	ldr	r3, [pc, #92]	; (8008c34 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.157+0x62>)
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8008bd6:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bd8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008bda:	6851      	ldr	r1, [r2, #4]
 8008bdc:	4381      	bics	r1, r0
 8008bde:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008be0:	2182      	movs	r1, #130	; 0x82
 8008be2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008be4:	0049      	lsls	r1, r1, #1
 8008be6:	4288      	cmp	r0, r1
 8008be8:	d10c      	bne.n	8008c04 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.157+0x32>
 8008bea:	2080      	movs	r0, #128	; 0x80
 8008bec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008bee:	0200      	lsls	r0, r0, #8
 8008bf0:	4281      	cmp	r1, r0
 8008bf2:	d003      	beq.n	8008bfc <SPI_WaitFlagStateUntilTimeout.part.0.constprop.157+0x2a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bf4:	2080      	movs	r0, #128	; 0x80
 8008bf6:	00c0      	lsls	r0, r0, #3
 8008bf8:	4281      	cmp	r1, r0
 8008bfa:	d103      	bne.n	8008c04 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.157+0x32>
          __HAL_SPI_DISABLE(hspi);
 8008bfc:	2040      	movs	r0, #64	; 0x40
 8008bfe:	6811      	ldr	r1, [r2, #0]
 8008c00:	4381      	bics	r1, r0
 8008c02:	6011      	str	r1, [r2, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c04:	0019      	movs	r1, r3
 8008c06:	2080      	movs	r0, #128	; 0x80
 8008c08:	3190      	adds	r1, #144	; 0x90
 8008c0a:	6809      	ldr	r1, [r1, #0]
 8008c0c:	0180      	lsls	r0, r0, #6
 8008c0e:	4281      	cmp	r1, r0
 8008c10:	d106      	bne.n	8008c20 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.157+0x4e>
          SPI_RESET_CRC(hspi);
 8008c12:	6810      	ldr	r0, [r2, #0]
 8008c14:	4c08      	ldr	r4, [pc, #32]	; (8008c38 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.157+0x66>)
 8008c16:	4020      	ands	r0, r4
 8008c18:	6010      	str	r0, [r2, #0]
 8008c1a:	6810      	ldr	r0, [r2, #0]
 8008c1c:	4301      	orrs	r1, r0
 8008c1e:	6011      	str	r1, [r2, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008c20:	001a      	movs	r2, r3
 8008c22:	2101      	movs	r1, #1
 8008c24:	32c5      	adds	r2, #197	; 0xc5
 8008c26:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hspi);
 8008c28:	2200      	movs	r2, #0
 8008c2a:	33c4      	adds	r3, #196	; 0xc4
}
 8008c2c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8008c2e:	701a      	strb	r2, [r3, #0]
}
 8008c30:	bd10      	pop	{r4, pc}
 8008c32:	46c0      	nop			; (mov r8, r8)
 8008c34:	200003b8 	.word	0x200003b8
 8008c38:	ffffdfff 	.word	0xffffdfff

08008c3c <HAL_RTCEx_DeactivateWakeUpTimer.constprop.148>:
  __HAL_LOCK(hrtc);
 8008c3c:	4b1c      	ldr	r3, [pc, #112]	; (8008cb0 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.148+0x74>)
 8008c3e:	2202      	movs	r2, #2
 8008c40:	0019      	movs	r1, r3
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
 8008c42:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 8008c44:	3128      	adds	r1, #40	; 0x28
 8008c46:	780c      	ldrb	r4, [r1, #0]
 8008c48:	0010      	movs	r0, r2
 8008c4a:	2c01      	cmp	r4, #1
 8008c4c:	d02e      	beq.n	8008cac <HAL_RTCEx_DeactivateWakeUpTimer.constprop.148+0x70>
 8008c4e:	3801      	subs	r0, #1
 8008c50:	7008      	strb	r0, [r1, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c52:	0019      	movs	r1, r3
 8008c54:	3129      	adds	r1, #41	; 0x29
 8008c56:	700a      	strb	r2, [r1, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c58:	21ca      	movs	r1, #202	; 0xca
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c5a:	26fa      	movs	r6, #250	; 0xfa
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008c5c:	2404      	movs	r4, #4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c5e:	681a      	ldr	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008c60:	4814      	ldr	r0, [pc, #80]	; (8008cb4 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.148+0x78>)
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c62:	6251      	str	r1, [r2, #36]	; 0x24
 8008c64:	3977      	subs	r1, #119	; 0x77
 8008c66:	6251      	str	r1, [r2, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008c68:	6991      	ldr	r1, [r2, #24]
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c6a:	00b6      	lsls	r6, r6, #2
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008c6c:	4001      	ands	r1, r0
 8008c6e:	6191      	str	r1, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8008c70:	6991      	ldr	r1, [r2, #24]
 8008c72:	4811      	ldr	r0, [pc, #68]	; (8008cb8 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.148+0x7c>)
 8008c74:	4001      	ands	r1, r0
 8008c76:	6191      	str	r1, [r2, #24]
 8008c78:	6add      	ldr	r5, [r3, #44]	; 0x2c
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008c7a:	68d1      	ldr	r1, [r2, #12]
 8008c7c:	4021      	ands	r1, r4
 8008c7e:	d009      	beq.n	8008c94 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.148+0x58>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c80:	21ff      	movs	r1, #255	; 0xff
 8008c82:	6251      	str	r1, [r2, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8008c84:	001a      	movs	r2, r3
  __HAL_UNLOCK(hrtc);
 8008c86:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8008c88:	3229      	adds	r2, #41	; 0x29
 8008c8a:	39fe      	subs	r1, #254	; 0xfe
  __HAL_UNLOCK(hrtc);
 8008c8c:	3328      	adds	r3, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 8008c8e:	7011      	strb	r1, [r2, #0]
  __HAL_UNLOCK(hrtc);
 8008c90:	7018      	strb	r0, [r3, #0]
 8008c92:	e00b      	b.n	8008cac <HAL_RTCEx_DeactivateWakeUpTimer.constprop.148+0x70>
 8008c94:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c96:	1b40      	subs	r0, r0, r5
 8008c98:	42b0      	cmp	r0, r6
 8008c9a:	d9ee      	bls.n	8008c7a <HAL_RTCEx_DeactivateWakeUpTimer.constprop.148+0x3e>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c9c:	20ff      	movs	r0, #255	; 0xff
 8008c9e:	6250      	str	r0, [r2, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ca0:	001a      	movs	r2, r3
 8008ca2:	38fc      	subs	r0, #252	; 0xfc
 8008ca4:	3229      	adds	r2, #41	; 0x29
      __HAL_UNLOCK(hrtc);
 8008ca6:	3328      	adds	r3, #40	; 0x28
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ca8:	7010      	strb	r0, [r2, #0]
      __HAL_UNLOCK(hrtc);
 8008caa:	7019      	strb	r1, [r3, #0]
}
 8008cac:	bd70      	pop	{r4, r5, r6, pc}
 8008cae:	46c0      	nop			; (mov r8, r8)
 8008cb0:	200003b8 	.word	0x200003b8
 8008cb4:	fffffbff 	.word	0xfffffbff
 8008cb8:	ffffbfff 	.word	0xffffbfff

08008cbc <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147>:
  __HAL_LOCK(hrtc);
 8008cbc:	4a2a      	ldr	r2, [pc, #168]	; (8008d68 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147+0xac>)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
 8008cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8008cc0:	0014      	movs	r4, r2
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	3428      	adds	r4, #40	; 0x28
 8008cc6:	7825      	ldrb	r5, [r4, #0]
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
 8008cc8:	0007      	movs	r7, r0
  __HAL_LOCK(hrtc);
 8008cca:	0018      	movs	r0, r3
 8008ccc:	2d01      	cmp	r5, #1
 8008cce:	d04a      	beq.n	8008d66 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147+0xaa>
 8008cd0:	3801      	subs	r0, #1
 8008cd2:	7020      	strb	r0, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cd4:	0010      	movs	r0, r2
 8008cd6:	3029      	adds	r0, #41	; 0x29
 8008cd8:	7003      	strb	r3, [r0, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cda:	20ca      	movs	r0, #202	; 0xca
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008cdc:	2504      	movs	r5, #4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cde:	6813      	ldr	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008ce0:	4c22      	ldr	r4, [pc, #136]	; (8008d6c <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147+0xb0>)
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ce2:	6258      	str	r0, [r3, #36]	; 0x24
 8008ce4:	3877      	subs	r0, #119	; 0x77
 8008ce6:	6258      	str	r0, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008ce8:	6998      	ldr	r0, [r3, #24]
 8008cea:	4020      	ands	r0, r4
 8008cec:	6198      	str	r0, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008cee:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8008cf0:	4328      	orrs	r0, r5
 8008cf2:	65d8      	str	r0, [r3, #92]	; 0x5c
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008cf4:	481e      	ldr	r0, [pc, #120]	; (8008d70 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147+0xb4>)
 8008cf6:	68c0      	ldr	r0, [r0, #12]
 8008cf8:	0640      	lsls	r0, r0, #25
 8008cfa:	d406      	bmi.n	8008d0a <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147+0x4e>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008cfc:	24fa      	movs	r4, #250	; 0xfa
 8008cfe:	00a4      	lsls	r4, r4, #2
 8008d00:	46a4      	mov	ip, r4
 8008d02:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008d04:	68dc      	ldr	r4, [r3, #12]
 8008d06:	402c      	ands	r4, r5
 8008d08:	d021      	beq.n	8008d4e <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147+0x92>
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008d0a:	2407      	movs	r4, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008d0c:	615f      	str	r7, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008d0e:	6998      	ldr	r0, [r3, #24]
 8008d10:	43a0      	bics	r0, r4
 8008d12:	6198      	str	r0, [r3, #24]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008d14:	6998      	ldr	r0, [r3, #24]
 8008d16:	4301      	orrs	r1, r0
 8008d18:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008d1a:	2180      	movs	r1, #128	; 0x80
 8008d1c:	4815      	ldr	r0, [pc, #84]	; (8008d74 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147+0xb8>)
 8008d1e:	0309      	lsls	r1, r1, #12
 8008d20:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 8008d22:	4321      	orrs	r1, r4
 8008d24:	67c1      	str	r1, [r0, #124]	; 0x7c
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8008d26:	2180      	movs	r1, #128	; 0x80
 8008d28:	6998      	ldr	r0, [r3, #24]
 8008d2a:	01c9      	lsls	r1, r1, #7
 8008d2c:	4301      	orrs	r1, r0
 8008d2e:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008d30:	2180      	movs	r1, #128	; 0x80
 8008d32:	6998      	ldr	r0, [r3, #24]
 8008d34:	00c9      	lsls	r1, r1, #3
 8008d36:	4301      	orrs	r1, r0
 8008d38:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d3a:	21ff      	movs	r1, #255	; 0xff
 8008d3c:	6259      	str	r1, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8008d3e:	0013      	movs	r3, r2
  __HAL_UNLOCK(hrtc);
 8008d40:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8008d42:	3329      	adds	r3, #41	; 0x29
 8008d44:	39fe      	subs	r1, #254	; 0xfe
  __HAL_UNLOCK(hrtc);
 8008d46:	3228      	adds	r2, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 8008d48:	7019      	strb	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8008d4a:	7010      	strb	r0, [r2, #0]
 8008d4c:	e00b      	b.n	8008d66 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147+0xaa>
 8008d4e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d50:	1a36      	subs	r6, r6, r0
 8008d52:	4566      	cmp	r6, ip
 8008d54:	d9d6      	bls.n	8008d04 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147+0x48>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d56:	21ff      	movs	r1, #255	; 0xff
 8008d58:	6259      	str	r1, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d5a:	0013      	movs	r3, r2
 8008d5c:	2003      	movs	r0, #3
 8008d5e:	3329      	adds	r3, #41	; 0x29
        __HAL_UNLOCK(hrtc);
 8008d60:	3228      	adds	r2, #40	; 0x28
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d62:	7018      	strb	r0, [r3, #0]
        __HAL_UNLOCK(hrtc);
 8008d64:	7014      	strb	r4, [r2, #0]
}
 8008d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d68:	200003b8 	.word	0x200003b8
 8008d6c:	fffffbff 	.word	0xfffffbff
 8008d70:	40002800 	.word	0x40002800
 8008d74:	40021804 	.word	0x40021804

08008d78 <acc_integration_sleep_us.constprop.145>:
	rtc_wakeup_triggered = false;
 8008d78:	2300      	movs	r3, #0
void acc_integration_sleep_us(uint32_t time_usec)
 8008d7a:	b510      	push	{r4, lr}
	rtc_wakeup_triggered = false;
 8008d7c:	4c0e      	ldr	r4, [pc, #56]	; (8008db8 <acc_integration_sleep_us.constprop.145+0x40>)
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 8008d7e:	2103      	movs	r1, #3
	rtc_wakeup_triggered = false;
 8008d80:	344c      	adds	r4, #76	; 0x4c
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 8008d82:	201f      	movs	r0, #31
	rtc_wakeup_triggered = false;
 8008d84:	7023      	strb	r3, [r4, #0]
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 8008d86:	f7ff ff99 	bl	8008cbc <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147>
	while (!rtc_wakeup_triggered)
 8008d8a:	7822      	ldrb	r2, [r4, #0]
 8008d8c:	2a00      	cmp	r2, #0
 8008d8e:	d004      	beq.n	8008d9a <acc_integration_sleep_us.constprop.145+0x22>
	rtc_wakeup_triggered = false;
 8008d90:	2200      	movs	r2, #0
 8008d92:	7022      	strb	r2, [r4, #0]
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 8008d94:	f7ff ff52 	bl	8008c3c <HAL_RTCEx_DeactivateWakeUpTimer.constprop.148>
}
 8008d98:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8008d9a:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 8008d9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008da0:	f3bf 8f6f 	isb	sy
		if (!rtc_wakeup_triggered)
 8008da4:	7822      	ldrb	r2, [r4, #0]
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	d100      	bne.n	8008dac <acc_integration_sleep_us.constprop.145+0x34>
			__WFI();
 8008daa:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 8008dac:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 8008dae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	e7e8      	b.n	8008d8a <acc_integration_sleep_us.constprop.145+0x12>
 8008db8:	20000438 	.word	0x20000438

08008dbc <HAL_GPIO_DeInit.constprop.142>:
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 8008dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008dbe:	22a0      	movs	r2, #160	; 0xa0
  uint32_t position = 0x00u;
 8008dc0:	2300      	movs	r3, #0
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 8008dc2:	9001      	str	r0, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008dc4:	05d2      	lsls	r2, r2, #23
  while ((GPIO_Pin >> position) != 0x00u)
 8008dc6:	9901      	ldr	r1, [sp, #4]
 8008dc8:	40d9      	lsrs	r1, r3
 8008dca:	d100      	bne.n	8008dce <HAL_GPIO_DeInit.constprop.142+0x12>
}
 8008dcc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008dce:	2101      	movs	r1, #1
 8008dd0:	4099      	lsls	r1, r3
 8008dd2:	000c      	movs	r4, r1
 8008dd4:	9100      	str	r1, [sp, #0]
 8008dd6:	9901      	ldr	r1, [sp, #4]
 8008dd8:	400c      	ands	r4, r1
    if (iocurrent != 0x00u)
 8008dda:	d03f      	beq.n	8008e5c <HAL_GPIO_DeInit.constprop.142+0xa0>
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8008ddc:	2603      	movs	r6, #3
 8008dde:	270f      	movs	r7, #15
 8008de0:	401e      	ands	r6, r3
 8008de2:	00f6      	lsls	r6, r6, #3
 8008de4:	40b7      	lsls	r7, r6
 8008de6:	4d1e      	ldr	r5, [pc, #120]	; (8008e60 <HAL_GPIO_DeInit.constprop.142+0xa4>)
      tmp = EXTI->EXTICR[position >> 2u];
 8008de8:	0899      	lsrs	r1, r3, #2
 8008dea:	0089      	lsls	r1, r1, #2
 8008dec:	1949      	adds	r1, r1, r5
 8008dee:	6e0d      	ldr	r5, [r1, #96]	; 0x60
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8008df0:	422f      	tst	r7, r5
 8008df2:	d114      	bne.n	8008e1e <HAL_GPIO_DeInit.constprop.142+0x62>
        EXTI->IMR1 &= ~(iocurrent);
 8008df4:	4e1b      	ldr	r6, [pc, #108]	; (8008e64 <HAL_GPIO_DeInit.constprop.142+0xa8>)
 8008df6:	43e4      	mvns	r4, r4
 8008df8:	46b4      	mov	ip, r6
 8008dfa:	4660      	mov	r0, ip
 8008dfc:	6ff6      	ldr	r6, [r6, #124]	; 0x7c
 8008dfe:	4d18      	ldr	r5, [pc, #96]	; (8008e60 <HAL_GPIO_DeInit.constprop.142+0xa4>)
 8008e00:	4026      	ands	r6, r4
 8008e02:	67c6      	str	r6, [r0, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 8008e04:	4818      	ldr	r0, [pc, #96]	; (8008e68 <HAL_GPIO_DeInit.constprop.142+0xac>)
 8008e06:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
 8008e08:	4026      	ands	r6, r4
 8008e0a:	67c6      	str	r6, [r0, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 8008e0c:	682e      	ldr	r6, [r5, #0]
 8008e0e:	4026      	ands	r6, r4
 8008e10:	602e      	str	r6, [r5, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8008e12:	686e      	ldr	r6, [r5, #4]
 8008e14:	4034      	ands	r4, r6
 8008e16:	606c      	str	r4, [r5, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8008e18:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8008e1a:	43bc      	bics	r4, r7
 8008e1c:	660c      	str	r4, [r1, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008e1e:	2503      	movs	r5, #3
 8008e20:	005c      	lsls	r4, r3, #1
 8008e22:	40a5      	lsls	r5, r4
 8008e24:	6811      	ldr	r1, [r2, #0]
 8008e26:	002c      	movs	r4, r5
 8008e28:	4329      	orrs	r1, r5
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008e2a:	2507      	movs	r5, #7
 8008e2c:	270f      	movs	r7, #15
 8008e2e:	20a0      	movs	r0, #160	; 0xa0
 8008e30:	401d      	ands	r5, r3
 8008e32:	00ad      	lsls	r5, r5, #2
 8008e34:	40af      	lsls	r7, r5
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008e36:	43e4      	mvns	r4, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008e38:	6011      	str	r1, [r2, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008e3a:	08d9      	lsrs	r1, r3, #3
 8008e3c:	05c0      	lsls	r0, r0, #23
 8008e3e:	0089      	lsls	r1, r1, #2
 8008e40:	1809      	adds	r1, r1, r0
 8008e42:	6a0e      	ldr	r6, [r1, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e44:	9800      	ldr	r0, [sp, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008e46:	43be      	bics	r6, r7
 8008e48:	620e      	str	r6, [r1, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008e4a:	6891      	ldr	r1, [r2, #8]
 8008e4c:	4021      	ands	r1, r4
 8008e4e:	6091      	str	r1, [r2, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e50:	6851      	ldr	r1, [r2, #4]
 8008e52:	4381      	bics	r1, r0
 8008e54:	6051      	str	r1, [r2, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008e56:	68d1      	ldr	r1, [r2, #12]
 8008e58:	400c      	ands	r4, r1
 8008e5a:	60d4      	str	r4, [r2, #12]
    position++;
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	e7b2      	b.n	8008dc6 <HAL_GPIO_DeInit.constprop.142+0xa>
 8008e60:	40021800 	.word	0x40021800
 8008e64:	40021804 	.word	0x40021804
 8008e68:	40021808 	.word	0x40021808

08008e6c <HAL_UART_Transmit_IT.constprop.119>:
  if (huart->gState == HAL_UART_STATE_READY)
 8008e6c:	4b2c      	ldr	r3, [pc, #176]	; (8008f20 <HAL_UART_Transmit_IT.constprop.119+0xb4>)
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 8008e6e:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8008e70:	1d1a      	adds	r2, r3, #4
 8008e72:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 8008e74:	0004      	movs	r4, r0
    return HAL_BUSY;
 8008e76:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8008e78:	2a20      	cmp	r2, #32
 8008e7a:	d13a      	bne.n	8008ef2 <HAL_UART_Transmit_IT.constprop.119+0x86>
      return HAL_ERROR;
 8008e7c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8008e7e:	2c00      	cmp	r4, #0
 8008e80:	d037      	beq.n	8008ef2 <HAL_UART_Transmit_IT.constprop.119+0x86>
 8008e82:	2900      	cmp	r1, #0
 8008e84:	d035      	beq.n	8008ef2 <HAL_UART_Transmit_IT.constprop.119+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e86:	2580      	movs	r5, #128	; 0x80
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	016d      	lsls	r5, r5, #5
 8008e8c:	42aa      	cmp	r2, r5
 8008e8e:	d104      	bne.n	8008e9a <HAL_UART_Transmit_IT.constprop.119+0x2e>
 8008e90:	691d      	ldr	r5, [r3, #16]
 8008e92:	2d00      	cmp	r5, #0
 8008e94:	d101      	bne.n	8008e9a <HAL_UART_Transmit_IT.constprop.119+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8008e96:	4204      	tst	r4, r0
 8008e98:	d12b      	bne.n	8008ef2 <HAL_UART_Transmit_IT.constprop.119+0x86>
    __HAL_LOCK(huart);
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	307c      	adds	r0, #124	; 0x7c
 8008e9e:	7805      	ldrb	r5, [r0, #0]
    return HAL_BUSY;
 8008ea0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8008ea2:	2d01      	cmp	r5, #1
 8008ea4:	d025      	beq.n	8008ef2 <HAL_UART_Transmit_IT.constprop.119+0x86>
    huart->TxXferSize  = Size;
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	3054      	adds	r0, #84	; 0x54
 8008eaa:	8001      	strh	r1, [r0, #0]
    huart->TxXferCount = Size;
 8008eac:	0018      	movs	r0, r3
 8008eae:	3056      	adds	r0, #86	; 0x56
 8008eb0:	8001      	strh	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb2:	0019      	movs	r1, r3
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	3188      	adds	r1, #136	; 0x88
 8008eb8:	6008      	str	r0, [r1, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008eba:	1d19      	adds	r1, r3, #4
 8008ebc:	3021      	adds	r0, #33	; 0x21
 8008ebe:	67c8      	str	r0, [r1, #124]	; 0x7c
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008ec0:	2080      	movs	r0, #128	; 0x80
 8008ec2:	2180      	movs	r1, #128	; 0x80
    huart->pTxBuffPtr  = pData;
 8008ec4:	651c      	str	r4, [r3, #80]	; 0x50
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008ec6:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8008ec8:	0580      	lsls	r0, r0, #22
 8008eca:	0149      	lsls	r1, r1, #5
 8008ecc:	4284      	cmp	r4, r0
 8008ece:	d113      	bne.n	8008ef8 <HAL_UART_Transmit_IT.constprop.119+0x8c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ed0:	428a      	cmp	r2, r1
 8008ed2:	d10f      	bne.n	8008ef4 <HAL_UART_Transmit_IT.constprop.119+0x88>
 8008ed4:	691a      	ldr	r2, [r3, #16]
 8008ed6:	2a00      	cmp	r2, #0
 8008ed8:	d10c      	bne.n	8008ef4 <HAL_UART_Transmit_IT.constprop.119+0x88>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008eda:	4a12      	ldr	r2, [pc, #72]	; (8008f24 <HAL_UART_Transmit_IT.constprop.119+0xb8>)
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008edc:	671a      	str	r2, [r3, #112]	; 0x70
      __HAL_UNLOCK(huart);
 8008ede:	001a      	movs	r2, r3
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	327c      	adds	r2, #124	; 0x7c
 8008ee4:	7010      	strb	r0, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	2380      	movs	r3, #128	; 0x80
 8008eea:	6891      	ldr	r1, [r2, #8]
 8008eec:	041b      	lsls	r3, r3, #16
 8008eee:	430b      	orrs	r3, r1
 8008ef0:	6093      	str	r3, [r2, #8]
}
 8008ef2:	bd30      	pop	{r4, r5, pc}
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008ef4:	4a0c      	ldr	r2, [pc, #48]	; (8008f28 <HAL_UART_Transmit_IT.constprop.119+0xbc>)
 8008ef6:	e7f1      	b.n	8008edc <HAL_UART_Transmit_IT.constprop.119+0x70>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ef8:	428a      	cmp	r2, r1
 8008efa:	d10e      	bne.n	8008f1a <HAL_UART_Transmit_IT.constprop.119+0xae>
 8008efc:	691a      	ldr	r2, [r3, #16]
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	d10b      	bne.n	8008f1a <HAL_UART_Transmit_IT.constprop.119+0xae>
        huart->TxISR = UART_TxISR_16BIT;
 8008f02:	4a0a      	ldr	r2, [pc, #40]	; (8008f2c <HAL_UART_Transmit_IT.constprop.119+0xc0>)
        huart->TxISR = UART_TxISR_8BIT;
 8008f04:	671a      	str	r2, [r3, #112]	; 0x70
      __HAL_UNLOCK(huart);
 8008f06:	001a      	movs	r2, r3
 8008f08:	2000      	movs	r0, #0
 8008f0a:	327c      	adds	r2, #124	; 0x7c
 8008f0c:	7010      	strb	r0, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	2380      	movs	r3, #128	; 0x80
 8008f12:	6811      	ldr	r1, [r2, #0]
 8008f14:	430b      	orrs	r3, r1
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	e7eb      	b.n	8008ef2 <HAL_UART_Transmit_IT.constprop.119+0x86>
        huart->TxISR = UART_TxISR_8BIT;
 8008f1a:	4a05      	ldr	r2, [pc, #20]	; (8008f30 <HAL_UART_Transmit_IT.constprop.119+0xc4>)
 8008f1c:	e7f2      	b.n	8008f04 <HAL_UART_Transmit_IT.constprop.119+0x98>
 8008f1e:	46c0      	nop			; (mov r8, r8)
 8008f20:	200005a0 	.word	0x200005a0
 8008f24:	0800835d 	.word	0x0800835d
 8008f28:	080083b9 	.word	0x080083b9
 8008f2c:	08008411 	.word	0x08008411
 8008f30:	08008451 	.word	0x08008451

08008f34 <RTC_ExitInitMode.constprop.106>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008f34:	2280      	movs	r2, #128	; 0x80
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
 8008f36:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008f38:	4c10      	ldr	r4, [pc, #64]	; (8008f7c <RTC_ExitInitMode.constprop.106+0x48>)
 8008f3a:	68e3      	ldr	r3, [r4, #12]
 8008f3c:	4393      	bics	r3, r2
 8008f3e:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008f40:	69a3      	ldr	r3, [r4, #24]
 8008f42:	3a60      	subs	r2, #96	; 0x60
 8008f44:	4213      	tst	r3, r2
 8008f46:	d108      	bne.n	8008f5a <RTC_ExitInitMode.constprop.106+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f48:	f7ff f990 	bl	800826c <HAL_RTC_WaitForSynchro.constprop.108>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d003      	beq.n	8008f58 <RTC_ExitInitMode.constprop.106+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f50:	2003      	movs	r0, #3
 8008f52:	4b0b      	ldr	r3, [pc, #44]	; (8008f80 <RTC_ExitInitMode.constprop.106+0x4c>)
 8008f54:	3329      	adds	r3, #41	; 0x29
 8008f56:	7018      	strb	r0, [r3, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8008f58:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f5a:	69a3      	ldr	r3, [r4, #24]
 8008f5c:	4393      	bics	r3, r2
 8008f5e:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f60:	f7ff f984 	bl	800826c <HAL_RTC_WaitForSynchro.constprop.108>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d003      	beq.n	8008f70 <RTC_ExitInitMode.constprop.106+0x3c>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f68:	2003      	movs	r0, #3
 8008f6a:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <RTC_ExitInitMode.constprop.106+0x4c>)
 8008f6c:	3329      	adds	r3, #41	; 0x29
 8008f6e:	7018      	strb	r0, [r3, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f70:	2320      	movs	r3, #32
 8008f72:	69a2      	ldr	r2, [r4, #24]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	61a3      	str	r3, [r4, #24]
 8008f78:	e7ee      	b.n	8008f58 <RTC_ExitInitMode.constprop.106+0x24>
 8008f7a:	46c0      	nop			; (mov r8, r8)
 8008f7c:	40002800 	.word	0x40002800
 8008f80:	200003b8 	.word	0x200003b8

08008f84 <RTC_EnterInitMode.constprop.105>:
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8008f84:	4a0f      	ldr	r2, [pc, #60]	; (8008fc4 <RTC_EnterInitMode.constprop.105+0x40>)
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
 8008f86:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8008f88:	6813      	ldr	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;  
 8008f8a:	2000      	movs	r0, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8008f8c:	68d9      	ldr	r1, [r3, #12]
 8008f8e:	0649      	lsls	r1, r1, #25
 8008f90:	d40d      	bmi.n	8008fae <RTC_EnterInitMode.constprop.105+0x2a>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008f92:	2180      	movs	r1, #128	; 0x80
 8008f94:	68dc      	ldr	r4, [r3, #12]
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8008f96:	27fa      	movs	r7, #250	; 0xfa
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008f98:	4321      	orrs	r1, r4
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f9a:	2403      	movs	r4, #3
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008f9c:	60d9      	str	r1, [r3, #12]
 8008f9e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8008fa0:	00bf      	lsls	r7, r7, #2
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008fa2:	2640      	movs	r6, #64	; 0x40
 8008fa4:	68d9      	ldr	r1, [r3, #12]
 8008fa6:	4231      	tst	r1, r6
 8008fa8:	d101      	bne.n	8008fae <RTC_EnterInitMode.constprop.105+0x2a>
 8008faa:	2803      	cmp	r0, #3
 8008fac:	d100      	bne.n	8008fb0 <RTC_EnterInitMode.constprop.105+0x2c>
}
 8008fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8008fb2:	1b49      	subs	r1, r1, r5
 8008fb4:	42b9      	cmp	r1, r7
 8008fb6:	d9f5      	bls.n	8008fa4 <RTC_EnterInitMode.constprop.105+0x20>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fb8:	0011      	movs	r1, r2
 8008fba:	3129      	adds	r1, #41	; 0x29
 8008fbc:	700c      	strb	r4, [r1, #0]
        status = HAL_TIMEOUT;
 8008fbe:	0020      	movs	r0, r4
 8008fc0:	e7ef      	b.n	8008fa2 <RTC_EnterInitMode.constprop.105+0x1e>
 8008fc2:	46c0      	nop			; (mov r8, r8)
 8008fc4:	200003b8 	.word	0x200003b8

08008fc8 <FLASH_WaitForLastOperation.constprop.92>:
  uint32_t error;
  uint32_t eccerr;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8008fc8:	23fa      	movs	r3, #250	; 0xfa
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 8008fca:	b530      	push	{r4, r5, lr}
 8008fcc:	4c18      	ldr	r4, [pc, #96]	; (8009030 <FLASH_WaitForLastOperation.constprop.92+0x68>)
  uint32_t timeout = HAL_GetTick() + Timeout;
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

  /* Wait if any operation is ongoing */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 8008fd2:	2180      	movs	r1, #128	; 0x80
  uint32_t timeout = HAL_GetTick() + Timeout;
 8008fd4:	18d2      	adds	r2, r2, r3
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 8008fd6:	4b17      	ldr	r3, [pc, #92]	; (8009034 <FLASH_WaitForLastOperation.constprop.92+0x6c>)
 8008fd8:	0249      	lsls	r1, r1, #9
 8008fda:	001d      	movs	r5, r3
 8008fdc:	6918      	ldr	r0, [r3, #16]
 8008fde:	4208      	tst	r0, r1
 8008fe0:	d111      	bne.n	8009006 <FLASH_WaitForLastOperation.constprop.92+0x3e>

  /* Clear SR register */
  FLASH->SR = FLASH_FLAG_SR_CLEAR;

  /* Update error with ECC error value */
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 8008fe2:	2080      	movs	r0, #128	; 0x80
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 8008fe4:	6919      	ldr	r1, [r3, #16]
 8008fe6:	4a14      	ldr	r2, [pc, #80]	; (8009038 <FLASH_WaitForLastOperation.constprop.92+0x70>)
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 8008fe8:	05c0      	lsls	r0, r0, #23
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 8008fea:	400a      	ands	r2, r1
  FLASH->SR = FLASH_FLAG_SR_CLEAR;
 8008fec:	4913      	ldr	r1, [pc, #76]	; (800903c <FLASH_WaitForLastOperation.constprop.92+0x74>)
 8008fee:	6119      	str	r1, [r3, #16]
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 8008ff0:	6999      	ldr	r1, [r3, #24]
 8008ff2:	4001      	ands	r1, r0

  if(eccerr != 0x00u)
 8008ff4:	d00c      	beq.n	8009010 <FLASH_WaitForLastOperation.constprop.92+0x48>
  {
    FLASH->ECCR |= eccerr;
 8008ff6:	6998      	ldr	r0, [r3, #24]
    error |= eccerr;
 8008ff8:	430a      	orrs	r2, r1
    FLASH->ECCR |= eccerr;
 8008ffa:	4308      	orrs	r0, r1
 8008ffc:	6198      	str	r0, [r3, #24]
  }

  if (error != 0x00U)
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008ffe:	4b10      	ldr	r3, [pc, #64]	; (8009040 <FLASH_WaitForLastOperation.constprop.92+0x78>)

    return HAL_ERROR;
 8009000:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 8009002:	655a      	str	r2, [r3, #84]	; 0x54
 8009004:	e003      	b.n	800900e <FLASH_WaitForLastOperation.constprop.92+0x46>
 8009006:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if (HAL_GetTick() >= timeout)
 8009008:	4282      	cmp	r2, r0
 800900a:	d8e7      	bhi.n	8008fdc <FLASH_WaitForLastOperation.constprop.92+0x14>
      return HAL_TIMEOUT;
 800900c:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 800900e:	bd30      	pop	{r4, r5, pc}
  if (error != 0x00U)
 8009010:	2a00      	cmp	r2, #0
 8009012:	d1f4      	bne.n	8008ffe <FLASH_WaitForLastOperation.constprop.92+0x36>
  timeout = HAL_GetTick() + Timeout;
 8009014:	22fa      	movs	r2, #250	; 0xfa
 8009016:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009018:	0092      	lsls	r2, r2, #2
 800901a:	189b      	adds	r3, r3, r2
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800901c:	2280      	movs	r2, #128	; 0x80
 800901e:	02d2      	lsls	r2, r2, #11
 8009020:	6928      	ldr	r0, [r5, #16]
 8009022:	4010      	ands	r0, r2
 8009024:	d0f3      	beq.n	800900e <FLASH_WaitForLastOperation.constprop.92+0x46>
 8009026:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    if (HAL_GetTick() >= timeout)
 8009028:	428b      	cmp	r3, r1
 800902a:	d8f9      	bhi.n	8009020 <FLASH_WaitForLastOperation.constprop.92+0x58>
 800902c:	e7ee      	b.n	800900c <FLASH_WaitForLastOperation.constprop.92+0x44>
 800902e:	46c0      	nop			; (mov r8, r8)
 8009030:	200003b8 	.word	0x200003b8
 8009034:	40022000 	.word	0x40022000
 8009038:	0000c3fa 	.word	0x0000c3fa
 800903c:	0000c3fb 	.word	0x0000c3fb
 8009040:	20000438 	.word	0x20000438

08009044 <HAL_UART_Receive_IT.constprop.83>:
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 8009044:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8009046:	0006      	movs	r6, r0
 8009048:	3608      	adds	r6, #8
 800904a:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800904c:	0003      	movs	r3, r0
    return HAL_BUSY;
 800904e:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8009050:	2a20      	cmp	r2, #32
 8009052:	d153      	bne.n	80090fc <HAL_UART_Receive_IT.constprop.83+0xb8>
      return HAL_ERROR;
 8009054:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8009056:	2900      	cmp	r1, #0
 8009058:	d050      	beq.n	80090fc <HAL_UART_Receive_IT.constprop.83+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800905a:	2280      	movs	r2, #128	; 0x80
 800905c:	689c      	ldr	r4, [r3, #8]
 800905e:	0152      	lsls	r2, r2, #5
 8009060:	4294      	cmp	r4, r2
 8009062:	d106      	bne.n	8009072 <HAL_UART_Receive_IT.constprop.83+0x2e>
 8009064:	691a      	ldr	r2, [r3, #16]
 8009066:	2a00      	cmp	r2, #0
 8009068:	d103      	bne.n	8009072 <HAL_UART_Receive_IT.constprop.83+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800906a:	4a37      	ldr	r2, [pc, #220]	; (8009148 <HAL_UART_Receive_IT.constprop.83+0x104>)
 800906c:	3268      	adds	r2, #104	; 0x68
 800906e:	4202      	tst	r2, r0
 8009070:	d144      	bne.n	80090fc <HAL_UART_Receive_IT.constprop.83+0xb8>
    __HAL_LOCK(huart);
 8009072:	001d      	movs	r5, r3
 8009074:	357c      	adds	r5, #124	; 0x7c
 8009076:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 8009078:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800907a:	2a01      	cmp	r2, #1
 800907c:	d03e      	beq.n	80090fc <HAL_UART_Receive_IT.constprop.83+0xb8>
 800907e:	2201      	movs	r2, #1
 8009080:	702a      	strb	r2, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8009082:	4a31      	ldr	r2, [pc, #196]	; (8009148 <HAL_UART_Receive_IT.constprop.83+0x104>)
    huart->RxISR       = NULL;
 8009084:	2000      	movs	r0, #0
    huart->pRxBuffPtr  = pData;
 8009086:	3268      	adds	r2, #104	; 0x68
 8009088:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800908a:	001a      	movs	r2, r3
    UART_MASK_COMPUTATION(huart);
 800908c:	2780      	movs	r7, #128	; 0x80
    huart->RxXferSize  = Size;
 800908e:	325c      	adds	r2, #92	; 0x5c
 8009090:	8011      	strh	r1, [r2, #0]
    huart->RxXferCount = Size;
 8009092:	8051      	strh	r1, [r2, #2]
    UART_MASK_COMPUTATION(huart);
 8009094:	017f      	lsls	r7, r7, #5
    huart->RxISR       = NULL;
 8009096:	66d8      	str	r0, [r3, #108]	; 0x6c
 8009098:	3204      	adds	r2, #4
    UART_MASK_COMPUTATION(huart);
 800909a:	42bc      	cmp	r4, r7
 800909c:	d131      	bne.n	8009102 <HAL_UART_Receive_IT.constprop.83+0xbe>
 800909e:	6918      	ldr	r0, [r3, #16]
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d12c      	bne.n	80090fe <HAL_UART_Receive_IT.constprop.83+0xba>
 80090a4:	4829      	ldr	r0, [pc, #164]	; (800914c <HAL_UART_Receive_IT.constprop.83+0x108>)
 80090a6:	8010      	strh	r0, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a8:	001a      	movs	r2, r3
 80090aa:	2000      	movs	r0, #0
 80090ac:	3288      	adds	r2, #136	; 0x88
 80090ae:	6010      	str	r0, [r2, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090b0:	2222      	movs	r2, #34	; 0x22
 80090b2:	67f2      	str	r2, [r6, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	3001      	adds	r0, #1
 80090b8:	6896      	ldr	r6, [r2, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80090ba:	6e5f      	ldr	r7, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090bc:	4330      	orrs	r0, r6
 80090be:	6090      	str	r0, [r2, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80090c0:	2680      	movs	r6, #128	; 0x80
 80090c2:	2080      	movs	r0, #128	; 0x80
 80090c4:	05b6      	lsls	r6, r6, #22
 80090c6:	0140      	lsls	r0, r0, #5
 80090c8:	42b7      	cmp	r7, r6
 80090ca:	d12c      	bne.n	8009126 <HAL_UART_Receive_IT.constprop.83+0xe2>
 80090cc:	001e      	movs	r6, r3
 80090ce:	3668      	adds	r6, #104	; 0x68
 80090d0:	8836      	ldrh	r6, [r6, #0]
 80090d2:	428e      	cmp	r6, r1
 80090d4:	d827      	bhi.n	8009126 <HAL_UART_Receive_IT.constprop.83+0xe2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090d6:	4284      	cmp	r4, r0
 80090d8:	d123      	bne.n	8009122 <HAL_UART_Receive_IT.constprop.83+0xde>
 80090da:	6919      	ldr	r1, [r3, #16]
 80090dc:	2900      	cmp	r1, #0
 80090de:	d120      	bne.n	8009122 <HAL_UART_Receive_IT.constprop.83+0xde>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80090e0:	491b      	ldr	r1, [pc, #108]	; (8009150 <HAL_UART_Receive_IT.constprop.83+0x10c>)
      __HAL_UNLOCK(huart);
 80090e2:	2000      	movs	r0, #0
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80090e4:	66d9      	str	r1, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090e6:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 80090e8:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ea:	6811      	ldr	r1, [r2, #0]
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	430b      	orrs	r3, r1
 80090f0:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090f2:	2380      	movs	r3, #128	; 0x80
 80090f4:	6891      	ldr	r1, [r2, #8]
 80090f6:	055b      	lsls	r3, r3, #21
 80090f8:	430b      	orrs	r3, r1
 80090fa:	6093      	str	r3, [r2, #8]
}
 80090fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 80090fe:	20ff      	movs	r0, #255	; 0xff
 8009100:	e7d1      	b.n	80090a6 <HAL_UART_Receive_IT.constprop.83+0x62>
 8009102:	2c00      	cmp	r4, #0
 8009104:	d104      	bne.n	8009110 <HAL_UART_Receive_IT.constprop.83+0xcc>
 8009106:	6918      	ldr	r0, [r3, #16]
 8009108:	2800      	cmp	r0, #0
 800910a:	d0f8      	beq.n	80090fe <HAL_UART_Receive_IT.constprop.83+0xba>
 800910c:	207f      	movs	r0, #127	; 0x7f
 800910e:	e7ca      	b.n	80090a6 <HAL_UART_Receive_IT.constprop.83+0x62>
 8009110:	2780      	movs	r7, #128	; 0x80
 8009112:	057f      	lsls	r7, r7, #21
 8009114:	42bc      	cmp	r4, r7
 8009116:	d1c6      	bne.n	80090a6 <HAL_UART_Receive_IT.constprop.83+0x62>
 8009118:	6918      	ldr	r0, [r3, #16]
 800911a:	2800      	cmp	r0, #0
 800911c:	d0f6      	beq.n	800910c <HAL_UART_Receive_IT.constprop.83+0xc8>
 800911e:	203f      	movs	r0, #63	; 0x3f
 8009120:	e7c1      	b.n	80090a6 <HAL_UART_Receive_IT.constprop.83+0x62>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009122:	490c      	ldr	r1, [pc, #48]	; (8009154 <HAL_UART_Receive_IT.constprop.83+0x110>)
 8009124:	e7dd      	b.n	80090e2 <HAL_UART_Receive_IT.constprop.83+0x9e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009126:	4284      	cmp	r4, r0
 8009128:	d10c      	bne.n	8009144 <HAL_UART_Receive_IT.constprop.83+0x100>
 800912a:	6919      	ldr	r1, [r3, #16]
 800912c:	2900      	cmp	r1, #0
 800912e:	d109      	bne.n	8009144 <HAL_UART_Receive_IT.constprop.83+0x100>
        huart->RxISR = UART_RxISR_16BIT;
 8009130:	4909      	ldr	r1, [pc, #36]	; (8009158 <HAL_UART_Receive_IT.constprop.83+0x114>)
      __HAL_UNLOCK(huart);
 8009132:	2000      	movs	r0, #0
        huart->RxISR = UART_RxISR_8BIT;
 8009134:	66d9      	str	r1, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009136:	2390      	movs	r3, #144	; 0x90
      __HAL_UNLOCK(huart);
 8009138:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800913a:	6811      	ldr	r1, [r2, #0]
 800913c:	005b      	lsls	r3, r3, #1
 800913e:	430b      	orrs	r3, r1
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	e7db      	b.n	80090fc <HAL_UART_Receive_IT.constprop.83+0xb8>
        huart->RxISR = UART_RxISR_8BIT;
 8009144:	4905      	ldr	r1, [pc, #20]	; (800915c <HAL_UART_Receive_IT.constprop.83+0x118>)
 8009146:	e7f4      	b.n	8009132 <HAL_UART_Receive_IT.constprop.83+0xee>
 8009148:	20000438 	.word	0x20000438
 800914c:	000001ff 	.word	0x000001ff
 8009150:	08008961 	.word	0x08008961
 8009154:	08008a0d 	.word	0x08008a0d
 8009158:	08008ab9 	.word	0x08008ab9
 800915c:	08008b19 	.word	0x08008b19

08009160 <Reg_regor.constprop.76>:
void Reg_regor(uint8_t reg, uint32_t orbits){
 8009160:	b510      	push	{r4, lr}
 8009162:	0004      	movs	r4, r0
	uint32_t flags = RegInt_getreg(reg); 
 8009164:	2006      	movs	r0, #6
 8009166:	f7fc fb77 	bl	8005858 <RegInt_getreg>
	flags |= orbits;
 800916a:	0001      	movs	r1, r0
	RegInt_setregf(reg, flags, 1);
 800916c:	2201      	movs	r2, #1
	flags |= orbits;
 800916e:	4321      	orrs	r1, r4
	RegInt_setregf(reg, flags, 1);
 8009170:	2006      	movs	r0, #6
 8009172:	f7fc fcbb 	bl	8005aec <RegInt_setregf>
}
 8009176:	bd10      	pop	{r4, pc}

08009178 <acc_rss_integration_mem_calloc_debug.constprop.75>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	0005      	movs	r5, r0
 800917c:	f7f9 fea8 	bl	8002ed0 <acc_rss_integration_mem_alloc_debug>
 8009180:	1e04      	subs	r4, r0, #0
 8009182:	d003      	beq.n	800918c <acc_rss_integration_mem_calloc_debug.constprop.75+0x14>
 8009184:	002a      	movs	r2, r5
 8009186:	2100      	movs	r1, #0
 8009188:	f009 f86e 	bl	8012268 <memset>
 800918c:	0020      	movs	r0, r4
 800918e:	bd70      	pop	{r4, r5, r6, pc}

08009190 <internal_buffer_processed_read.constprop.30>:
 8009190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009192:	2700      	movs	r7, #0
 8009194:	4b1f      	ldr	r3, [pc, #124]	; (8009214 <internal_buffer_processed_read.constprop.30+0x84>)
 8009196:	b087      	sub	sp, #28
 8009198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919a:	9003      	str	r0, [sp, #12]
 800919c:	085b      	lsrs	r3, r3, #1
 800919e:	9102      	str	r1, [sp, #8]
 80091a0:	3b03      	subs	r3, #3
 80091a2:	0016      	movs	r6, r2
 80091a4:	2100      	movs	r1, #0
 80091a6:	2206      	movs	r2, #6
 80091a8:	a804      	add	r0, sp, #16
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	f009 f85c 	bl	8012268 <memset>
 80091b0:	9d02      	ldr	r5, [sp, #8]
 80091b2:	2e00      	cmp	r6, #0
 80091b4:	d103      	bne.n	80091be <internal_buffer_processed_read.constprop.30+0x2e>
 80091b6:	9802      	ldr	r0, [sp, #8]
 80091b8:	3006      	adds	r0, #6
 80091ba:	b007      	add	sp, #28
 80091bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091be:	9c01      	ldr	r4, [sp, #4]
 80091c0:	42b4      	cmp	r4, r6
 80091c2:	d900      	bls.n	80091c6 <internal_buffer_processed_read.constprop.30+0x36>
 80091c4:	0034      	movs	r4, r6
 80091c6:	9b01      	ldr	r3, [sp, #4]
 80091c8:	42b3      	cmp	r3, r6
 80091ca:	d202      	bcs.n	80091d2 <internal_buffer_processed_read.constprop.30+0x42>
 80091cc:	2301      	movs	r3, #1
 80091ce:	421c      	tst	r4, r3
 80091d0:	d11e      	bne.n	8009210 <internal_buffer_processed_read.constprop.30+0x80>
 80091d2:	4b11      	ldr	r3, [pc, #68]	; (8009218 <internal_buffer_processed_read.constprop.30+0x88>)
 80091d4:	1ce2      	adds	r2, r4, #3
 80091d6:	433b      	orrs	r3, r7
 80091d8:	802b      	strh	r3, [r5, #0]
 80091da:	b2a3      	uxth	r3, r4
 80091dc:	3b01      	subs	r3, #1
 80091de:	806b      	strh	r3, [r5, #2]
 80091e0:	2300      	movs	r3, #0
 80091e2:	0029      	movs	r1, r5
 80091e4:	80ab      	strh	r3, [r5, #4]
 80091e6:	9803      	ldr	r0, [sp, #12]
 80091e8:	3301      	adds	r3, #1
 80091ea:	f7f9 fe83 	bl	8002ef4 <acc_rss_integration_sensor_device_transfer>
 80091ee:	a904      	add	r1, sp, #16
 80091f0:	2206      	movs	r2, #6
 80091f2:	0028      	movs	r0, r5
 80091f4:	f00b fc5c 	bl	8014ab0 <memcpy>
 80091f8:	1b36      	subs	r6, r6, r4
 80091fa:	b2a3      	uxth	r3, r4
 80091fc:	0064      	lsls	r4, r4, #1
 80091fe:	192d      	adds	r5, r5, r4
 8009200:	18ff      	adds	r7, r7, r3
 8009202:	2206      	movs	r2, #6
 8009204:	0029      	movs	r1, r5
 8009206:	a804      	add	r0, sp, #16
 8009208:	b2bf      	uxth	r7, r7
 800920a:	f00b fc51 	bl	8014ab0 <memcpy>
 800920e:	e7d0      	b.n	80091b2 <internal_buffer_processed_read.constprop.30+0x22>
 8009210:	3c01      	subs	r4, #1
 8009212:	e7db      	b.n	80091cc <internal_buffer_processed_read.constprop.30+0x3c>
 8009214:	200003b8 	.word	0x200003b8
 8009218:	ffff8000 	.word	0xffff8000

0800921c <acc_sensor_reg_write>:
 800921c:	2380      	movs	r3, #128	; 0x80
 800921e:	b513      	push	{r0, r1, r4, lr}
 8009220:	015b      	lsls	r3, r3, #5
 8009222:	ac01      	add	r4, sp, #4
 8009224:	4319      	orrs	r1, r3
 8009226:	8021      	strh	r1, [r4, #0]
 8009228:	8062      	strh	r2, [r4, #2]
 800922a:	2300      	movs	r3, #0
 800922c:	2202      	movs	r2, #2
 800922e:	0021      	movs	r1, r4
 8009230:	f7f9 fe60 	bl	8002ef4 <acc_rss_integration_sensor_device_transfer>
 8009234:	bd13      	pop	{r0, r1, r4, pc}

08009236 <acc_diagnostic_log_data_i16.constprop.20>:
 8009236:	4770      	bx	lr

08009238 <acc_confprogram_live_patch.constprop.16>:
 8009238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800923a:	001e      	movs	r6, r3
 800923c:	4b43      	ldr	r3, [pc, #268]	; (800934c <acc_confprogram_live_patch.constprop.16+0x114>)
 800923e:	0014      	movs	r4, r2
 8009240:	001a      	movs	r2, r3
 8009242:	b08b      	sub	sp, #44	; 0x2c
 8009244:	9105      	str	r1, [sp, #20]
 8009246:	3260      	adds	r2, #96	; 0x60
 8009248:	7812      	ldrb	r2, [r2, #0]
 800924a:	0005      	movs	r5, r0
 800924c:	2a03      	cmp	r2, #3
 800924e:	d907      	bls.n	8009260 <acc_confprogram_live_patch.constprop.16+0x28>
 8009250:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009252:	493f      	ldr	r1, [pc, #252]	; (8009350 <acc_confprogram_live_patch.constprop.16+0x118>)
 8009254:	9200      	str	r2, [sp, #0]
 8009256:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8009258:	4a3e      	ldr	r2, [pc, #248]	; (8009354 <acc_confprogram_live_patch.constprop.16+0x11c>)
 800925a:	0033      	movs	r3, r6
 800925c:	2004      	movs	r0, #4
 800925e:	47b8      	blx	r7
 8009260:	2700      	movs	r7, #0
 8009262:	00f6      	lsls	r6, r6, #3
 8009264:	19a4      	adds	r4, r4, r6
 8009266:	8863      	ldrh	r3, [r4, #2]
 8009268:	429f      	cmp	r7, r3
 800926a:	d301      	bcc.n	8009270 <acc_confprogram_live_patch.constprop.16+0x38>
 800926c:	b00b      	add	sp, #44	; 0x2c
 800926e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009270:	2206      	movs	r2, #6
 8009272:	437a      	muls	r2, r7
 8009274:	6863      	ldr	r3, [r4, #4]
 8009276:	189a      	adds	r2, r3, r2
 8009278:	7810      	ldrb	r0, [r2, #0]
 800927a:	2801      	cmp	r0, #1
 800927c:	d055      	beq.n	800932a <acc_confprogram_live_patch.constprop.16+0xf2>
 800927e:	2800      	cmp	r0, #0
 8009280:	d009      	beq.n	8009296 <acc_confprogram_live_patch.constprop.16+0x5e>
 8009282:	2802      	cmp	r0, #2
 8009284:	d05c      	beq.n	8009340 <acc_confprogram_live_patch.constprop.16+0x108>
 8009286:	4b31      	ldr	r3, [pc, #196]	; (800934c <acc_confprogram_live_patch.constprop.16+0x114>)
 8009288:	4931      	ldr	r1, [pc, #196]	; (8009350 <acc_confprogram_live_patch.constprop.16+0x118>)
 800928a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800928c:	4a32      	ldr	r2, [pc, #200]	; (8009358 <acc_confprogram_live_patch.constprop.16+0x120>)
 800928e:	2000      	movs	r0, #0
 8009290:	4798      	blx	r3
 8009292:	21e7      	movs	r1, #231	; 0xe7
 8009294:	e015      	b.n	80092c2 <acc_confprogram_live_patch.constprop.16+0x8a>
 8009296:	8853      	ldrh	r3, [r2, #2]
 8009298:	9302      	str	r3, [sp, #8]
 800929a:	7913      	ldrb	r3, [r2, #4]
 800929c:	9303      	str	r3, [sp, #12]
 800929e:	7953      	ldrb	r3, [r2, #5]
 80092a0:	9304      	str	r3, [sp, #16]
 80092a2:	2301      	movs	r3, #1
 80092a4:	9a04      	ldr	r2, [sp, #16]
 80092a6:	4093      	lsls	r3, r2
 80092a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d30c      	bcc.n	80092c8 <acc_confprogram_live_patch.constprop.16+0x90>
 80092ae:	3b01      	subs	r3, #1
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	4b26      	ldr	r3, [pc, #152]	; (800934c <acc_confprogram_live_patch.constprop.16+0x114>)
 80092b4:	9200      	str	r2, [sp, #0]
 80092b6:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80092b8:	4925      	ldr	r1, [pc, #148]	; (8009350 <acc_confprogram_live_patch.constprop.16+0x118>)
 80092ba:	9b02      	ldr	r3, [sp, #8]
 80092bc:	4a27      	ldr	r2, [pc, #156]	; (800935c <acc_confprogram_live_patch.constprop.16+0x124>)
 80092be:	47a0      	blx	r4
 80092c0:	2129      	movs	r1, #41	; 0x29
 80092c2:	4827      	ldr	r0, [pc, #156]	; (8009360 <acc_confprogram_live_patch.constprop.16+0x128>)
 80092c4:	f7f9 fafe 	bl	80028c4 <acc_assert_fail>
 80092c8:	9a02      	ldr	r2, [sp, #8]
 80092ca:	4b26      	ldr	r3, [pc, #152]	; (8009364 <acc_confprogram_live_patch.constprop.16+0x12c>)
 80092cc:	ae07      	add	r6, sp, #28
 80092ce:	4313      	orrs	r3, r2
 80092d0:	8033      	strh	r3, [r6, #0]
 80092d2:	2301      	movs	r3, #1
 80092d4:	8073      	strh	r3, [r6, #2]
 80092d6:	2312      	movs	r3, #18
 80092d8:	0001      	movs	r1, r0
 80092da:	80b0      	strh	r0, [r6, #4]
 80092dc:	a804      	add	r0, sp, #16
 80092de:	181b      	adds	r3, r3, r0
 80092e0:	2204      	movs	r2, #4
 80092e2:	0018      	movs	r0, r3
 80092e4:	f008 ffc0 	bl	8012268 <memset>
 80092e8:	2301      	movs	r3, #1
 80092ea:	2205      	movs	r2, #5
 80092ec:	0031      	movs	r1, r6
 80092ee:	0028      	movs	r0, r5
 80092f0:	f7f9 fe00 	bl	8002ef4 <acc_rss_integration_sensor_device_transfer>
 80092f4:	2312      	movs	r3, #18
 80092f6:	aa04      	add	r2, sp, #16
 80092f8:	189b      	adds	r3, r3, r2
 80092fa:	0018      	movs	r0, r3
 80092fc:	a906      	add	r1, sp, #24
 80092fe:	f7fe fff7 	bl	80082f0 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 8009302:	2220      	movs	r2, #32
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	9903      	ldr	r1, [sp, #12]
 8009308:	1ad2      	subs	r2, r2, r3
 800930a:	2301      	movs	r3, #1
 800930c:	425b      	negs	r3, r3
 800930e:	40d3      	lsrs	r3, r2
 8009310:	9a03      	ldr	r2, [sp, #12]
 8009312:	0028      	movs	r0, r5
 8009314:	4093      	lsls	r3, r2
 8009316:	9a06      	ldr	r2, [sp, #24]
 8009318:	439a      	bics	r2, r3
 800931a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800931c:	408b      	lsls	r3, r1
 800931e:	9902      	ldr	r1, [sp, #8]
 8009320:	431a      	orrs	r2, r3
 8009322:	f7fe ff8b 	bl	800823c <acc_sensor_r2_conf_write_instr>
 8009326:	3701      	adds	r7, #1
 8009328:	e79d      	b.n	8009266 <acc_confprogram_live_patch.constprop.16+0x2e>
 800932a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800932c:	8853      	ldrh	r3, [r2, #2]
 800932e:	1e48      	subs	r0, r1, #1
 8009330:	4181      	sbcs	r1, r0
 8009332:	8892      	ldrh	r2, [r2, #4]
 8009334:	9100      	str	r1, [sp, #0]
 8009336:	0028      	movs	r0, r5
 8009338:	9905      	ldr	r1, [sp, #20]
 800933a:	f7fe ffdf 	bl	80082fc <acc_confprogram_modify_runif_sensor.constprop.19>
 800933e:	e7f2      	b.n	8009326 <acc_confprogram_live_patch.constprop.16+0xee>
 8009340:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009342:	8853      	ldrh	r3, [r2, #2]
 8009344:	4248      	negs	r0, r1
 8009346:	4141      	adcs	r1, r0
 8009348:	8892      	ldrh	r2, [r2, #4]
 800934a:	e7f3      	b.n	8009334 <acc_confprogram_live_patch.constprop.16+0xfc>
 800934c:	200003b8 	.word	0x200003b8
 8009350:	0801be31 	.word	0x0801be31
 8009354:	0801c9e8 	.word	0x0801c9e8
 8009358:	0801ca73 	.word	0x0801ca73
 800935c:	0801ca0a 	.word	0x0801ca0a
 8009360:	0801ca42 	.word	0x0801ca42
 8009364:	ffffa000 	.word	0xffffa000

08009368 <get_dt.constprop.10>:
 8009368:	b510      	push	{r4, lr}
 800936a:	f7fa fec5 	bl	80040f8 <acc_rss_integration_get_sensor_reference_frequency>
 800936e:	1c01      	adds	r1, r0, #0
 8009370:	1c04      	adds	r4, r0, #0
 8009372:	4809      	ldr	r0, [pc, #36]	; (8009398 <get_dt.constprop.10+0x30>)
 8009374:	f003 f90e 	bl	800c594 <__aeabi_fdiv>
 8009378:	f009 f968 	bl	801264c <roundf>
 800937c:	1c01      	adds	r1, r0, #0
 800937e:	1c20      	adds	r0, r4, #0
 8009380:	f003 fa1a 	bl	800c7b8 <__aeabi_fmul>
 8009384:	1c01      	adds	r1, r0, #0
 8009386:	20fe      	movs	r0, #254	; 0xfe
 8009388:	0580      	lsls	r0, r0, #22
 800938a:	f003 f903 	bl	800c594 <__aeabi_fdiv>
 800938e:	4903      	ldr	r1, [pc, #12]	; (800939c <get_dt.constprop.10+0x34>)
 8009390:	f003 f900 	bl	800c594 <__aeabi_fdiv>
 8009394:	bd10      	pop	{r4, pc}
 8009396:	46c0      	nop			; (mov r8, r8)
 8009398:	4f1502f9 	.word	0x4f1502f9
 800939c:	42f80000 	.word	0x42f80000

080093a0 <points_to_meter.constprop.9>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	0005      	movs	r5, r0
 80093a4:	f7ff ffe0 	bl	8009368 <get_dt.constprop.10>
 80093a8:	1c04      	adds	r4, r0, #0
 80093aa:	0028      	movs	r0, r5
 80093ac:	f004 f91a 	bl	800d5e4 <__aeabi_i2f>
 80093b0:	1c21      	adds	r1, r4, #0
 80093b2:	f003 fa01 	bl	800c7b8 <__aeabi_fmul>
 80093b6:	4904      	ldr	r1, [pc, #16]	; (80093c8 <points_to_meter.constprop.9+0x28>)
 80093b8:	f003 f9fe 	bl	800c7b8 <__aeabi_fmul>
 80093bc:	21fc      	movs	r1, #252	; 0xfc
 80093be:	0589      	lsls	r1, r1, #22
 80093c0:	f003 f9fa 	bl	800c7b8 <__aeabi_fmul>
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
 80093c6:	46c0      	nop			; (mov r8, r8)
 80093c8:	4d8ef3c2 	.word	0x4d8ef3c2

080093cc <UARTEx_SetNbDataToProcess.lto_priv.643>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80093ce:	4b14      	ldr	r3, [pc, #80]	; (8009420 <UARTEx_SetNbDataToProcess.lto_priv.643+0x54>)
{
 80093d0:	0004      	movs	r4, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80093d2:	9302      	str	r3, [sp, #8]
 80093d4:	2308      	movs	r3, #8
 80093d6:	33ff      	adds	r3, #255	; 0xff
 80093d8:	9303      	str	r3, [sp, #12]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80093da:	4b12      	ldr	r3, [pc, #72]	; (8009424 <UARTEx_SetNbDataToProcess.lto_priv.643+0x58>)
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	4b12      	ldr	r3, [pc, #72]	; (8009428 <UARTEx_SetNbDataToProcess.lto_priv.643+0x5c>)
 80093e0:	9301      	str	r3, [sp, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093e2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <UARTEx_SetNbDataToProcess.lto_priv.643+0x22>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 80093e8:	4b10      	ldr	r3, [pc, #64]	; (800942c <UARTEx_SetNbDataToProcess.lto_priv.643+0x60>)
 80093ea:	6683      	str	r3, [r0, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093ec:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80093ee:	466a      	mov	r2, sp
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093f0:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80093f2:	ae02      	add	r6, sp, #8
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093f4:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80093fa:	5cf0      	ldrb	r0, [r6, r3]
 80093fc:	5cd1      	ldrb	r1, [r2, r3]
 80093fe:	00c0      	lsls	r0, r0, #3
 8009400:	f003 fd96 	bl	800cf30 <__divsi3>
 8009404:	0023      	movs	r3, r4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009406:	466a      	mov	r2, sp
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009408:	336a      	adds	r3, #106	; 0x6a
 800940a:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800940c:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800940e:	0f5b      	lsrs	r3, r3, #29
 8009410:	5cf0      	ldrb	r0, [r6, r3]
 8009412:	5cd1      	ldrb	r1, [r2, r3]
 8009414:	00c0      	lsls	r0, r0, #3
 8009416:	f003 fd8b 	bl	800cf30 <__divsi3>
 800941a:	3468      	adds	r4, #104	; 0x68
 800941c:	8020      	strh	r0, [r4, #0]
 800941e:	e7e5      	b.n	80093ec <UARTEx_SetNbDataToProcess.lto_priv.643+0x20>
 8009420:	03010101 	.word	0x03010101
 8009424:	04020408 	.word	0x04020408
 8009428:	01010108 	.word	0x01010108
 800942c:	00010001 	.word	0x00010001

08009430 <HAL_UARTEx_DisableFifoMode>:
{
 8009430:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8009432:	0004      	movs	r4, r0
 8009434:	347c      	adds	r4, #124	; 0x7c
 8009436:	7822      	ldrb	r2, [r4, #0]
 8009438:	2302      	movs	r3, #2
 800943a:	2a01      	cmp	r2, #1
 800943c:	d010      	beq.n	8009460 <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 800943e:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009440:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009442:	1d05      	adds	r5, r0, #4
 8009444:	3322      	adds	r3, #34	; 0x22
 8009446:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009448:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800944a:	6813      	ldr	r3, [r2, #0]
 800944c:	43b3      	bics	r3, r6
 800944e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009450:	4b04      	ldr	r3, [pc, #16]	; (8009464 <HAL_UARTEx_DisableFifoMode+0x34>)
 8009452:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009454:	2300      	movs	r3, #0
 8009456:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009458:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800945a:	2220      	movs	r2, #32
 800945c:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800945e:	7023      	strb	r3, [r4, #0]
}
 8009460:	0018      	movs	r0, r3
 8009462:	bd70      	pop	{r4, r5, r6, pc}
 8009464:	dfffffff 	.word	0xdfffffff

08009468 <HAL_UART_Transmit>:
{
 8009468:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800946a:	1d06      	adds	r6, r0, #4
{
 800946c:	b085      	sub	sp, #20
 800946e:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8009470:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
{
 8009472:	0004      	movs	r4, r0
 8009474:	000d      	movs	r5, r1
    return HAL_BUSY;
 8009476:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8009478:	2b20      	cmp	r3, #32
 800947a:	d146      	bne.n	800950a <HAL_UART_Transmit+0xa2>
      return  HAL_ERROR;
 800947c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800947e:	2900      	cmp	r1, #0
 8009480:	d043      	beq.n	800950a <HAL_UART_Transmit+0xa2>
 8009482:	2a00      	cmp	r2, #0
 8009484:	d041      	beq.n	800950a <HAL_UART_Transmit+0xa2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009486:	2380      	movs	r3, #128	; 0x80
 8009488:	68a1      	ldr	r1, [r4, #8]
 800948a:	015b      	lsls	r3, r3, #5
 800948c:	4299      	cmp	r1, r3
 800948e:	d104      	bne.n	800949a <HAL_UART_Transmit+0x32>
 8009490:	6923      	ldr	r3, [r4, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8009496:	4205      	tst	r5, r0
 8009498:	d137      	bne.n	800950a <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800949a:	0023      	movs	r3, r4
 800949c:	337c      	adds	r3, #124	; 0x7c
 800949e:	781f      	ldrb	r7, [r3, #0]
    return HAL_BUSY;
 80094a0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80094a2:	2f01      	cmp	r7, #1
 80094a4:	d031      	beq.n	800950a <HAL_UART_Transmit+0xa2>
 80094a6:	3801      	subs	r0, #1
 80094a8:	7018      	strb	r0, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094aa:	2000      	movs	r0, #0
 80094ac:	60d8      	str	r0, [r3, #12]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094ae:	2321      	movs	r3, #33	; 0x21
 80094b0:	67f3      	str	r3, [r6, #124]	; 0x7c
 80094b2:	4b21      	ldr	r3, [pc, #132]	; (8009538 <HAL_UART_Transmit+0xd0>)
    huart->TxXferCount = Size;
 80094b4:	0027      	movs	r7, r4
 80094b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b8:	3756      	adds	r7, #86	; 0x56
 80094ba:	9302      	str	r3, [sp, #8]
    huart->TxXferSize  = Size;
 80094bc:	0023      	movs	r3, r4
 80094be:	3354      	adds	r3, #84	; 0x54
 80094c0:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094c2:	2380      	movs	r3, #128	; 0x80
    huart->TxXferCount = Size;
 80094c4:	803a      	strh	r2, [r7, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094c6:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 80094c8:	9001      	str	r0, [sp, #4]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094ca:	4299      	cmp	r1, r3
 80094cc:	d104      	bne.n	80094d8 <HAL_UART_Transmit+0x70>
 80094ce:	6923      	ldr	r3, [r4, #16]
 80094d0:	4283      	cmp	r3, r0
 80094d2:	d101      	bne.n	80094d8 <HAL_UART_Transmit+0x70>
 80094d4:	9501      	str	r5, [sp, #4]
      pdata8bits  = NULL;
 80094d6:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80094d8:	883b      	ldrh	r3, [r7, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10c      	bne.n	80094f8 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094de:	9b03      	ldr	r3, [sp, #12]
 80094e0:	9a02      	ldr	r2, [sp, #8]
 80094e2:	2140      	movs	r1, #64	; 0x40
 80094e4:	0020      	movs	r0, r4
 80094e6:	f7fe fed9 	bl	800829c <UART_WaitOnFlagUntilTimeout.constprop.95>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d10c      	bne.n	8009508 <HAL_UART_Transmit+0xa0>
    huart->gState = HAL_UART_STATE_READY;
 80094ee:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80094f0:	347c      	adds	r4, #124	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 80094f2:	67f3      	str	r3, [r6, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 80094f4:	7020      	strb	r0, [r4, #0]
 80094f6:	e008      	b.n	800950a <HAL_UART_Transmit+0xa2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	9a02      	ldr	r2, [sp, #8]
 80094fc:	2180      	movs	r1, #128	; 0x80
 80094fe:	0020      	movs	r0, r4
 8009500:	f7fe fecc 	bl	800829c <UART_WaitOnFlagUntilTimeout.constprop.95>
 8009504:	2800      	cmp	r0, #0
 8009506:	d002      	beq.n	800950e <HAL_UART_Transmit+0xa6>
        return HAL_TIMEOUT;
 8009508:	2003      	movs	r0, #3
}
 800950a:	b005      	add	sp, #20
 800950c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800950e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8009510:	2d00      	cmp	r5, #0
 8009512:	d10c      	bne.n	800952e <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009514:	9b01      	ldr	r3, [sp, #4]
 8009516:	881b      	ldrh	r3, [r3, #0]
 8009518:	05db      	lsls	r3, r3, #23
 800951a:	0ddb      	lsrs	r3, r3, #23
 800951c:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800951e:	9b01      	ldr	r3, [sp, #4]
 8009520:	3302      	adds	r3, #2
 8009522:	9301      	str	r3, [sp, #4]
      huart->TxXferCount--;
 8009524:	883b      	ldrh	r3, [r7, #0]
 8009526:	3b01      	subs	r3, #1
 8009528:	b29b      	uxth	r3, r3
 800952a:	803b      	strh	r3, [r7, #0]
 800952c:	e7d4      	b.n	80094d8 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800952e:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8009530:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009532:	6293      	str	r3, [r2, #40]	; 0x28
 8009534:	e7f6      	b.n	8009524 <HAL_UART_Transmit+0xbc>
 8009536:	46c0      	nop			; (mov r8, r8)
 8009538:	200003b8 	.word	0x200003b8

0800953c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800953c:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while(Param >= 10U)
 800953e:	2809      	cmp	r0, #9
 8009540:	d803      	bhi.n	800954a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	4318      	orrs	r0, r3
 8009546:	b2c0      	uxtb	r0, r0
}
 8009548:	4770      	bx	lr
    Param -= 10U;
 800954a:	380a      	subs	r0, #10
    bcdhigh++;
 800954c:	3301      	adds	r3, #1
    Param -= 10U;
 800954e:	b2c0      	uxtb	r0, r0
 8009550:	e7f5      	b.n	800953e <RTC_ByteToBcd2+0x2>

08009552 <HAL_RTC_SetAlarm_IT.constprop.129>:
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
 8009552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8009554:	4d4a      	ldr	r5, [pc, #296]	; (8009680 <HAL_RTC_SetAlarm_IT.constprop.129+0x12e>)
 8009556:	2302      	movs	r3, #2
 8009558:	002a      	movs	r2, r5
 800955a:	3228      	adds	r2, #40	; 0x28
 800955c:	7811      	ldrb	r1, [r2, #0]
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
 800955e:	0006      	movs	r6, r0
  __HAL_LOCK(hrtc);
 8009560:	0018      	movs	r0, r3
 8009562:	2901      	cmp	r1, #1
 8009564:	d06c      	beq.n	8009640 <HAL_RTC_SetAlarm_IT.constprop.129+0xee>
 8009566:	2101      	movs	r1, #1
 8009568:	7011      	strb	r1, [r2, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800956a:	002a      	movs	r2, r5
 800956c:	3229      	adds	r2, #41	; 0x29
 800956e:	7013      	strb	r3, [r2, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009570:	2240      	movs	r2, #64	; 0x40
 8009572:	682c      	ldr	r4, [r5, #0]
 8009574:	69a3      	ldr	r3, [r4, #24]
 8009576:	4013      	ands	r3, r2
 8009578:	d100      	bne.n	800957c <HAL_RTC_SetAlarm_IT.constprop.129+0x2a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800957a:	70f3      	strb	r3, [r6, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800957c:	7830      	ldrb	r0, [r6, #0]
 800957e:	f7ff ffdd 	bl	800953c <RTC_ByteToBcd2>
 8009582:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009584:	7870      	ldrb	r0, [r6, #1]
 8009586:	f7ff ffd9 	bl	800953c <RTC_ByteToBcd2>
 800958a:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800958c:	78b0      	ldrb	r0, [r6, #2]
 800958e:	f7ff ffd5 	bl	800953c <RTC_ByteToBcd2>
 8009592:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009594:	1c73      	adds	r3, r6, #1
 8009596:	7fd8      	ldrb	r0, [r3, #31]
 8009598:	f7ff ffd0 	bl	800953c <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800959c:	6972      	ldr	r2, [r6, #20]
 800959e:	69f3      	ldr	r3, [r6, #28]
  if(sAlarm->Alarm == RTC_ALARM_A)
 80095a0:	6a71      	ldr	r1, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80095a2:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80095a4:	78f2      	ldrb	r2, [r6, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80095a6:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80095a8:	0592      	lsls	r2, r2, #22
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80095aa:	4313      	orrs	r3, r2
 80095ac:	431f      	orrs	r7, r3
 80095ae:	9b00      	ldr	r3, [sp, #0]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80095b0:	69b2      	ldr	r2, [r6, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80095b2:	041b      	lsls	r3, r3, #16
 80095b4:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80095b6:	9b01      	ldr	r3, [sp, #4]
 80095b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80095ba:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80095bc:	6873      	ldr	r3, [r6, #4]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80095be:	4338      	orrs	r0, r7
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80095c0:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095c2:	22ca      	movs	r2, #202	; 0xca
 80095c4:	6262      	str	r2, [r4, #36]	; 0x24
 80095c6:	3a77      	subs	r2, #119	; 0x77
 80095c8:	6262      	str	r2, [r4, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 80095ca:	32ad      	adds	r2, #173	; 0xad
 80095cc:	4291      	cmp	r1, r2
 80095ce:	d138      	bne.n	8009642 <HAL_RTC_SetAlarm_IT.constprop.129+0xf0>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80095d0:	69a2      	ldr	r2, [r4, #24]
 80095d2:	492c      	ldr	r1, [pc, #176]	; (8009684 <HAL_RTC_SetAlarm_IT.constprop.129+0x132>)
 80095d4:	400a      	ands	r2, r1
 80095d6:	61a2      	str	r2, [r4, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80095d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80095da:	3103      	adds	r1, #3
 80095dc:	31ff      	adds	r1, #255	; 0xff
 80095de:	430a      	orrs	r2, r1
 80095e0:	65e2      	str	r2, [r4, #92]	; 0x5c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80095e2:	22fa      	movs	r2, #250	; 0xfa
 80095e4:	0092      	lsls	r2, r2, #2
 80095e6:	4694      	mov	ip, r2
 80095e8:	6aef      	ldr	r7, [r5, #44]	; 0x2c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80095ea:	68e2      	ldr	r2, [r4, #12]
 80095ec:	400a      	ands	r2, r1
 80095ee:	d01b      	beq.n	8009628 <HAL_RTC_SetAlarm_IT.constprop.129+0xd6>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80095f0:	6420      	str	r0, [r4, #64]	; 0x40
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80095f2:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80095f4:	2380      	movs	r3, #128	; 0x80
 80095f6:	69a2      	ldr	r2, [r4, #24]
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	4313      	orrs	r3, r2
 80095fc:	61a3      	str	r3, [r4, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80095fe:	2380      	movs	r3, #128	; 0x80
 8009600:	69a2      	ldr	r2, [r4, #24]
 8009602:	015b      	lsls	r3, r3, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009604:	4313      	orrs	r3, r2
 8009606:	61a3      	str	r3, [r4, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009608:	2380      	movs	r3, #128	; 0x80
 800960a:	4a1f      	ldr	r2, [pc, #124]	; (8009688 <HAL_RTC_SetAlarm_IT.constprop.129+0x136>)
 800960c:	031b      	lsls	r3, r3, #12
 800960e:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  __HAL_UNLOCK(hrtc);
 8009610:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009612:	430b      	orrs	r3, r1
 8009614:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009616:	23ff      	movs	r3, #255	; 0xff
 8009618:	6263      	str	r3, [r4, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800961a:	002b      	movs	r3, r5
 800961c:	2201      	movs	r2, #1
 800961e:	3329      	adds	r3, #41	; 0x29
  __HAL_UNLOCK(hrtc);
 8009620:	3528      	adds	r5, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 8009622:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8009624:	7028      	strb	r0, [r5, #0]
 8009626:	e00b      	b.n	8009640 <HAL_RTC_SetAlarm_IT.constprop.129+0xee>
 8009628:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800962a:	1bf6      	subs	r6, r6, r7
 800962c:	4566      	cmp	r6, ip
 800962e:	d9dc      	bls.n	80095ea <HAL_RTC_SetAlarm_IT.constprop.129+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009630:	23ff      	movs	r3, #255	; 0xff
 8009632:	6263      	str	r3, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009634:	002b      	movs	r3, r5
 8009636:	2003      	movs	r0, #3
 8009638:	3329      	adds	r3, #41	; 0x29
        __HAL_UNLOCK(hrtc);
 800963a:	3528      	adds	r5, #40	; 0x28
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800963c:	7018      	strb	r0, [r3, #0]
        __HAL_UNLOCK(hrtc);
 800963e:	702a      	strb	r2, [r5, #0]
}
 8009640:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009642:	69a2      	ldr	r2, [r4, #24]
 8009644:	4911      	ldr	r1, [pc, #68]	; (800968c <HAL_RTC_SetAlarm_IT.constprop.129+0x13a>)
 8009646:	400a      	ands	r2, r1
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8009648:	2102      	movs	r1, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800964a:	61a2      	str	r2, [r4, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800964c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800964e:	430a      	orrs	r2, r1
 8009650:	65e2      	str	r2, [r4, #92]	; 0x5c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009652:	22fa      	movs	r2, #250	; 0xfa
 8009654:	0092      	lsls	r2, r2, #2
 8009656:	4694      	mov	ip, r2
 8009658:	6aef      	ldr	r7, [r5, #44]	; 0x2c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800965a:	68e2      	ldr	r2, [r4, #12]
 800965c:	400a      	ands	r2, r1
 800965e:	d00a      	beq.n	8009676 <HAL_RTC_SetAlarm_IT.constprop.129+0x124>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009660:	64a0      	str	r0, [r4, #72]	; 0x48
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009662:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009664:	2380      	movs	r3, #128	; 0x80
 8009666:	69a2      	ldr	r2, [r4, #24]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4313      	orrs	r3, r2
 800966c:	61a3      	str	r3, [r4, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800966e:	2380      	movs	r3, #128	; 0x80
 8009670:	69a2      	ldr	r2, [r4, #24]
 8009672:	019b      	lsls	r3, r3, #6
 8009674:	e7c6      	b.n	8009604 <HAL_RTC_SetAlarm_IT.constprop.129+0xb2>
 8009676:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009678:	1bf6      	subs	r6, r6, r7
 800967a:	4566      	cmp	r6, ip
 800967c:	d9ed      	bls.n	800965a <HAL_RTC_SetAlarm_IT.constprop.129+0x108>
 800967e:	e7d7      	b.n	8009630 <HAL_RTC_SetAlarm_IT.constprop.129+0xde>
 8009680:	200003b8 	.word	0x200003b8
 8009684:	fffffeff 	.word	0xfffffeff
 8009688:	40021804 	.word	0x40021804
 800968c:	fffffdff 	.word	0xfffffdff

08009690 <HAL_InitTick>:
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8009690:	21fa      	movs	r1, #250	; 0xfa
{
 8009692:	b570      	push	{r4, r5, r6, lr}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8009694:	4d11      	ldr	r5, [pc, #68]	; (80096dc <HAL_InitTick+0x4c>)
{
 8009696:	0004      	movs	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8009698:	0089      	lsls	r1, r1, #2
 800969a:	6828      	ldr	r0, [r5, #0]
 800969c:	f003 fbbe 	bl	800ce1c <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80096a0:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <HAL_InitTick+0x50>)
 80096a2:	3801      	subs	r0, #1
 80096a4:	4298      	cmp	r0, r3
 80096a6:	d901      	bls.n	80096ac <HAL_InitTick+0x1c>
      status = HAL_ERROR;
 80096a8:	2001      	movs	r0, #1
}
 80096aa:	bd70      	pop	{r4, r5, r6, pc}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80096ac:	490d      	ldr	r1, [pc, #52]	; (80096e4 <HAL_InitTick+0x54>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80096ae:	4a0e      	ldr	r2, [pc, #56]	; (80096e8 <HAL_InitTick+0x58>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80096b0:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80096b2:	20c0      	movs	r0, #192	; 0xc0
 80096b4:	6a13      	ldr	r3, [r2, #32]
 80096b6:	0600      	lsls	r0, r0, #24
 80096b8:	021b      	lsls	r3, r3, #8
 80096ba:	0a1b      	lsrs	r3, r3, #8
 80096bc:	4303      	orrs	r3, r0
 80096be:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80096c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80096c2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80096c4:	6088      	str	r0, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80096c6:	600b      	str	r3, [r1, #0]
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80096c8:	2c03      	cmp	r4, #3
 80096ca:	d8ed      	bhi.n	80096a8 <HAL_InitTick+0x18>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80096cc:	6a13      	ldr	r3, [r2, #32]
 80096ce:	07a1      	lsls	r1, r4, #30
 80096d0:	021b      	lsls	r3, r3, #8
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	430b      	orrs	r3, r1
 80096d6:	6213      	str	r3, [r2, #32]
        uwTickPrio = TickPriority;
 80096d8:	606c      	str	r4, [r5, #4]
 80096da:	e7e6      	b.n	80096aa <HAL_InitTick+0x1a>
 80096dc:	20000000 	.word	0x20000000
 80096e0:	00ffffff 	.word	0x00ffffff
 80096e4:	e000e010 	.word	0xe000e010
 80096e8:	e000ed00 	.word	0xe000ed00

080096ec <HAL_DMA_DeInit.part.1>:
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 80096ee:	2501      	movs	r5, #1
 80096f0:	6807      	ldr	r7, [r0, #0]
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
 80096f2:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80096f4:	683b      	ldr	r3, [r7, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80096f6:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 80096f8:	43ab      	bics	r3, r5
 80096fa:	603b      	str	r3, [r7, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80096fc:	4b18      	ldr	r3, [pc, #96]	; (8009760 <HAL_DMA_DeInit.part.1+0x74>)
  hdma->Instance->CCR  = 0U;
 80096fe:	2600      	movs	r6, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009700:	18f8      	adds	r0, r7, r3
 8009702:	f003 fb8b 	bl	800ce1c <__udivsi3>
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8009706:	231c      	movs	r3, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009708:	0080      	lsls	r0, r0, #2
 800970a:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800970c:	4018      	ands	r0, r3
 800970e:	002b      	movs	r3, r5
 8009710:	4083      	lsls	r3, r0
 8009712:	4a14      	ldr	r2, [pc, #80]	; (8009764 <HAL_DMA_DeInit.part.1+0x78>)
  hdma->Instance->CCR  = 0U;
 8009714:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8009716:	6851      	ldr	r1, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009718:	0020      	movs	r0, r4
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800971a:	430b      	orrs	r3, r1
 800971c:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800971e:	f7fe ff49 	bl	80085b4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8009722:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009724:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  hdma->DMAmuxChannel->CCR = 0U;
 8009726:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009728:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800972a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800972c:	6863      	ldr	r3, [r4, #4]
 800972e:	1e5a      	subs	r2, r3, #1
 8009730:	2a03      	cmp	r2, #3
 8009732:	d806      	bhi.n	8009742 <HAL_DMA_DeInit.part.1+0x56>
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009734:	4095      	lsls	r5, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009736:	490c      	ldr	r1, [pc, #48]	; (8009768 <HAL_DMA_DeInit.part.1+0x7c>)
 8009738:	185b      	adds	r3, r3, r1
 800973a:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800973c:	601e      	str	r6, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800973e:	4b0b      	ldr	r3, [pc, #44]	; (800976c <HAL_DMA_DeInit.part.1+0x80>)
 8009740:	605d      	str	r5, [r3, #4]
  hdma->XferCpltCallback = NULL;
 8009742:	2000      	movs	r0, #0
 8009744:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009746:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8009748:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800974a:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->DMAmuxRequestGen = 0U;
 800974c:	6520      	str	r0, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 800974e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8009750:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009752:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8009754:	1da3      	adds	r3, r4, #6
  __HAL_UNLOCK(hdma);
 8009756:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 8009758:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 800975a:	77e0      	strb	r0, [r4, #31]
}
 800975c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	bffdfff8 	.word	0xbffdfff8
 8009764:	40020000 	.word	0x40020000
 8009768:	1000823f 	.word	0x1000823f
 800976c:	40020940 	.word	0x40020940

08009770 <HAL_DMA_IRQHandler>:
{
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009772:	211c      	movs	r1, #28
 8009774:	2704      	movs	r7, #4
 8009776:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8009778:	4b26      	ldr	r3, [pc, #152]	; (8009814 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800977a:	4021      	ands	r1, r4
 800977c:	003c      	movs	r4, r7
 800977e:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 8009780:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8009782:	6802      	ldr	r2, [r0, #0]
 8009784:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009786:	4226      	tst	r6, r4
 8009788:	d00f      	beq.n	80097aa <HAL_DMA_IRQHandler+0x3a>
 800978a:	423d      	tst	r5, r7
 800978c:	d00d      	beq.n	80097aa <HAL_DMA_IRQHandler+0x3a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800978e:	6811      	ldr	r1, [r2, #0]
 8009790:	0689      	lsls	r1, r1, #26
 8009792:	d402      	bmi.n	800979a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009794:	6811      	ldr	r1, [r2, #0]
 8009796:	43b9      	bics	r1, r7
 8009798:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	4314      	orrs	r4, r2
 800979e:	605c      	str	r4, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80097a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d01b      	beq.n	80097de <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 80097a6:	4798      	blx	r3
 80097a8:	e019      	b.n	80097de <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80097aa:	2702      	movs	r7, #2
 80097ac:	003c      	movs	r4, r7
 80097ae:	408c      	lsls	r4, r1
 80097b0:	4226      	tst	r6, r4
 80097b2:	d015      	beq.n	80097e0 <HAL_DMA_IRQHandler+0x70>
 80097b4:	423d      	tst	r5, r7
 80097b6:	d013      	beq.n	80097e0 <HAL_DMA_IRQHandler+0x70>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80097b8:	6811      	ldr	r1, [r2, #0]
 80097ba:	0689      	lsls	r1, r1, #26
 80097bc:	d406      	bmi.n	80097cc <HAL_DMA_IRQHandler+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80097be:	250a      	movs	r5, #10
 80097c0:	6811      	ldr	r1, [r2, #0]
 80097c2:	43a9      	bics	r1, r5
 80097c4:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80097c6:	2101      	movs	r1, #1
 80097c8:	1d82      	adds	r2, r0, #6
 80097ca:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	4314      	orrs	r4, r2
    __HAL_UNLOCK(hdma);
 80097d0:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80097d2:	605c      	str	r4, [r3, #4]
    __HAL_UNLOCK(hdma);
 80097d4:	1d43      	adds	r3, r0, #5
 80097d6:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 80097d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d1e3      	bne.n	80097a6 <HAL_DMA_IRQHandler+0x36>
}
 80097de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80097e0:	2408      	movs	r4, #8
 80097e2:	0027      	movs	r7, r4
 80097e4:	408f      	lsls	r7, r1
 80097e6:	423e      	tst	r6, r7
 80097e8:	d0f9      	beq.n	80097de <HAL_DMA_IRQHandler+0x6e>
 80097ea:	4225      	tst	r5, r4
 80097ec:	d0f7      	beq.n	80097de <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097ee:	250e      	movs	r5, #14
 80097f0:	6814      	ldr	r4, [r2, #0]
 80097f2:	43ac      	bics	r4, r5
 80097f4:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 80097f6:	2201      	movs	r2, #1
 80097f8:	0015      	movs	r5, r2
 80097fa:	408d      	lsls	r5, r1
 80097fc:	0029      	movs	r1, r5
 80097fe:	685c      	ldr	r4, [r3, #4]
 8009800:	4321      	orrs	r1, r4
 8009802:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8009804:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009806:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8009808:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800980a:	2200      	movs	r2, #0
 800980c:	1d43      	adds	r3, r0, #5
 800980e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8009810:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009812:	e7e2      	b.n	80097da <HAL_DMA_IRQHandler+0x6a>
 8009814:	40020000 	.word	0x40020000

08009818 <HAL_DMA_Abort_IT>:
{
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800981a:	2301      	movs	r3, #1
 800981c:	1d41      	adds	r1, r0, #5
 800981e:	77cb      	strb	r3, [r1, #31]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009820:	1d84      	adds	r4, r0, #6
 8009822:	7fe2      	ldrb	r2, [r4, #31]
 8009824:	2a02      	cmp	r2, #2
 8009826:	d003      	beq.n	8009830 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009828:	2204      	movs	r2, #4
 800982a:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 800982c:	0018      	movs	r0, r3
 800982e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009830:	260e      	movs	r6, #14
 8009832:	6802      	ldr	r2, [r0, #0]
 8009834:	6815      	ldr	r5, [r2, #0]
 8009836:	43b5      	bics	r5, r6
 8009838:	6015      	str	r5, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800983a:	6815      	ldr	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800983c:	6c46      	ldr	r6, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 800983e:	439d      	bics	r5, r3
 8009840:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009842:	6832      	ldr	r2, [r6, #0]
 8009844:	4d11      	ldr	r5, [pc, #68]	; (800988c <HAL_DMA_Abort_IT+0x74>)
 8009846:	402a      	ands	r2, r5
 8009848:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800984a:	221c      	movs	r2, #28
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800984c:	46ac      	mov	ip, r5
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800984e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8009850:	4e0f      	ldr	r6, [pc, #60]	; (8009890 <HAL_DMA_Abort_IT+0x78>)
 8009852:	402a      	ands	r2, r5
 8009854:	4093      	lsls	r3, r2
 8009856:	6877      	ldr	r7, [r6, #4]
 8009858:	433b      	orrs	r3, r7
 800985a:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800985c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800985e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8009860:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8009862:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009864:	2b00      	cmp	r3, #0
 8009866:	d006      	beq.n	8009876 <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009868:	4665      	mov	r5, ip
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	402a      	ands	r2, r5
 800986e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009870:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009872:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8009874:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8009876:	2301      	movs	r3, #1
 8009878:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 800987a:	2400      	movs	r4, #0
 800987c:	77cc      	strb	r4, [r1, #31]
    if (hdma->XferAbortCallback != NULL)
 800987e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8009880:	0013      	movs	r3, r2
 8009882:	42a2      	cmp	r2, r4
 8009884:	d0d2      	beq.n	800982c <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 8009886:	4790      	blx	r2
 8009888:	0023      	movs	r3, r4
 800988a:	e7cf      	b.n	800982c <HAL_DMA_Abort_IT+0x14>
 800988c:	fffffeff 	.word	0xfffffeff
 8009890:	40020000 	.word	0x40020000

08009894 <I2C_ITError.lto_priv.644>:
{
 8009894:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009896:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009898:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800989a:	2600      	movs	r6, #0
 800989c:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800989e:	3541      	adds	r5, #65	; 0x41
 80098a0:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80098a2:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80098a4:	4a2a      	ldr	r2, [pc, #168]	; (8009950 <I2C_ITError.lto_priv.644+0xbc>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80098a6:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80098a8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80098aa:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80098ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 80098ae:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 80098b0:	4311      	orrs	r1, r2
 80098b2:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d822      	bhi.n	80098fe <I2C_ITError.lto_priv.644+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80098b8:	2103      	movs	r1, #3
 80098ba:	f7fe fdef 	bl	800849c <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80098be:	2328      	movs	r3, #40	; 0x28
 80098c0:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80098c2:	4b24      	ldr	r3, [pc, #144]	; (8009954 <I2C_ITError.lto_priv.644+0xc0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 80098c4:	6326      	str	r6, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80098c6:	2280      	movs	r2, #128	; 0x80
    hi2c->XferISR       = NULL;
 80098c8:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	01d2      	lsls	r2, r2, #7
 80098ce:	6819      	ldr	r1, [r3, #0]
 80098d0:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80098d2:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80098d4:	d01e      	beq.n	8009914 <I2C_ITError.lto_priv.644+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80098d6:	4920      	ldr	r1, [pc, #128]	; (8009958 <I2C_ITError.lto_priv.644+0xc4>)
    if (hi2c->hdmatx != NULL)
 80098d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80098da:	400a      	ands	r2, r1
 80098dc:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80098de:	2800      	cmp	r0, #0
 80098e0:	d00c      	beq.n	80098fc <I2C_ITError.lto_priv.644+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80098e2:	4b1e      	ldr	r3, [pc, #120]	; (800995c <I2C_ITError.lto_priv.644+0xc8>)
      __HAL_UNLOCK(hi2c);
 80098e4:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80098e6:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80098e8:	0023      	movs	r3, r4
 80098ea:	3340      	adds	r3, #64	; 0x40
 80098ec:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80098ee:	f7ff ff93 	bl	8009818 <HAL_DMA_Abort_IT>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d002      	beq.n	80098fc <I2C_ITError.lto_priv.644+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80098f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80098f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80098fa:	4798      	blx	r3
}
 80098fc:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80098fe:	2107      	movs	r1, #7
 8009900:	f7fe fdcc 	bl	800849c <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009904:	782b      	ldrb	r3, [r5, #0]
 8009906:	2b60      	cmp	r3, #96	; 0x60
 8009908:	d001      	beq.n	800990e <I2C_ITError.lto_priv.644+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 800990a:	2320      	movs	r3, #32
 800990c:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800990e:	2300      	movs	r3, #0
 8009910:	6323      	str	r3, [r4, #48]	; 0x30
 8009912:	e7d8      	b.n	80098c6 <I2C_ITError.lto_priv.644+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009914:	2080      	movs	r0, #128	; 0x80
 8009916:	0200      	lsls	r0, r0, #8
 8009918:	4002      	ands	r2, r0
 800991a:	d011      	beq.n	8009940 <I2C_ITError.lto_priv.644+0xac>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4810      	ldr	r0, [pc, #64]	; (8009960 <I2C_ITError.lto_priv.644+0xcc>)
 8009920:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 8009922:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009924:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8009926:	2800      	cmp	r0, #0
 8009928:	d0e8      	beq.n	80098fc <I2C_ITError.lto_priv.644+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800992a:	4b0c      	ldr	r3, [pc, #48]	; (800995c <I2C_ITError.lto_priv.644+0xc8>)
 800992c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800992e:	0023      	movs	r3, r4
 8009930:	3340      	adds	r3, #64	; 0x40
 8009932:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009934:	f7ff ff70 	bl	8009818 <HAL_DMA_Abort_IT>
 8009938:	2800      	cmp	r0, #0
 800993a:	d0df      	beq.n	80098fc <I2C_ITError.lto_priv.644+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800993c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800993e:	e7db      	b.n	80098f8 <I2C_ITError.lto_priv.644+0x64>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009940:	782b      	ldrb	r3, [r5, #0]
 8009942:	3440      	adds	r4, #64	; 0x40
 8009944:	2b60      	cmp	r3, #96	; 0x60
 8009946:	d101      	bne.n	800994c <I2C_ITError.lto_priv.644+0xb8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009948:	3b40      	subs	r3, #64	; 0x40
 800994a:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800994c:	7022      	strb	r2, [r4, #0]
 800994e:	e7d5      	b.n	80098fc <I2C_ITError.lto_priv.644+0x68>
 8009950:	ffff0000 	.word	0xffff0000
 8009954:	08009965 	.word	0x08009965
 8009958:	ffffbfff 	.word	0xffffbfff
 800995c:	080084e3 	.word	0x080084e3
 8009960:	ffff7fff 	.word	0xffff7fff

08009964 <I2C_Slave_ISR_IT>:
{
 8009964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8009966:	0007      	movs	r7, r0
 8009968:	3740      	adds	r7, #64	; 0x40
{
 800996a:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 800996c:	783a      	ldrb	r2, [r7, #0]
{
 800996e:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8009970:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8009972:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 8009974:	2002      	movs	r0, #2
 8009976:	2a01      	cmp	r2, #1
 8009978:	d075      	beq.n	8009a66 <I2C_Slave_ISR_IT+0x102>
 800997a:	2201      	movs	r2, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800997c:	0909      	lsrs	r1, r1, #4
  __HAL_LOCK(hi2c);
 800997e:	703a      	strb	r2, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009980:	4211      	tst	r1, r2
 8009982:	d100      	bne.n	8009986 <I2C_Slave_ISR_IT+0x22>
 8009984:	e090      	b.n	8009aa8 <I2C_Slave_ISR_IT+0x144>
 8009986:	0931      	lsrs	r1, r6, #4
 8009988:	4211      	tst	r1, r2
 800998a:	d100      	bne.n	800998e <I2C_Slave_ISR_IT+0x2a>
 800998c:	e08c      	b.n	8009aa8 <I2C_Slave_ISR_IT+0x144>
    if (hi2c->XferCount == 0U)
 800998e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009990:	2a00      	cmp	r2, #0
 8009992:	d000      	beq.n	8009996 <I2C_Slave_ISR_IT+0x32>
 8009994:	e078      	b.n	8009a88 <I2C_Slave_ISR_IT+0x124>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009996:	0022      	movs	r2, r4
 8009998:	3241      	adds	r2, #65	; 0x41
 800999a:	7811      	ldrb	r1, [r2, #0]
 800999c:	2928      	cmp	r1, #40	; 0x28
 800999e:	d163      	bne.n	8009a68 <I2C_Slave_ISR_IT+0x104>
 80099a0:	2180      	movs	r1, #128	; 0x80
 80099a2:	0489      	lsls	r1, r1, #18
 80099a4:	428b      	cmp	r3, r1
 80099a6:	d15f      	bne.n	8009a68 <I2C_Slave_ISR_IT+0x104>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80099a8:	0029      	movs	r1, r5
 80099aa:	0020      	movs	r0, r4
 80099ac:	f7fe fdb4 	bl	8008518 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80099b0:	06ab      	lsls	r3, r5, #26
 80099b2:	d556      	bpl.n	8009a62 <I2C_Slave_ISR_IT+0xfe>
 80099b4:	2301      	movs	r3, #1
 80099b6:	0976      	lsrs	r6, r6, #5
 80099b8:	421e      	tst	r6, r3
 80099ba:	d052      	beq.n	8009a62 <I2C_Slave_ISR_IT+0xfe>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099bc:	2220      	movs	r2, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80099be:	6823      	ldr	r3, [r4, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80099c0:	2107      	movs	r1, #7
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80099c2:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80099c4:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099c6:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80099c8:	f7fe fd68 	bl	800849c <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80099cc:	2280      	movs	r2, #128	; 0x80
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	0212      	lsls	r2, r2, #8
 80099d2:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 80099d4:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80099d6:	430a      	orrs	r2, r1
 80099d8:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	4976      	ldr	r1, [pc, #472]	; (8009bb8 <I2C_Slave_ISR_IT+0x254>)
 80099de:	400a      	ands	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 80099e2:	f7fe fd8b 	bl	80084fc <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80099e6:	2201      	movs	r2, #1
 80099e8:	0bb3      	lsrs	r3, r6, #14
 80099ea:	4213      	tst	r3, r2
 80099ec:	d100      	bne.n	80099f0 <I2C_Slave_ISR_IT+0x8c>
 80099ee:	e0ce      	b.n	8009b8e <I2C_Slave_ISR_IT+0x22a>
    if (hi2c->hdmatx != NULL)
 80099f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d003      	beq.n	80099fe <I2C_Slave_ISR_IT+0x9a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80099fe:	076b      	lsls	r3, r5, #29
 8009a00:	d511      	bpl.n	8009a26 <I2C_Slave_ISR_IT+0xc2>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009a02:	2304      	movs	r3, #4
 8009a04:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8009a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a10:	3301      	adds	r3, #1
 8009a12:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009a14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d005      	beq.n	8009a26 <I2C_Slave_ISR_IT+0xc2>
      hi2c->XferSize--;
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009a1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a20:	3b01      	subs	r3, #1
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8009a26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d003      	beq.n	8009a34 <I2C_Slave_ISR_IT+0xd0>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a2c:	2304      	movs	r3, #4
 8009a2e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009a30:	4313      	orrs	r3, r2
 8009a32:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a34:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a36:	2300      	movs	r3, #0
 8009a38:	0026      	movs	r6, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a3a:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a3c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a3e:	7013      	strb	r3, [r2, #0]
  hi2c->XferISR = NULL;
 8009a40:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009a42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009a44:	3641      	adds	r6, #65	; 0x41
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d100      	bne.n	8009a4c <I2C_Slave_ISR_IT+0xe8>
 8009a4a:	e0a7      	b.n	8009b9c <I2C_Slave_ISR_IT+0x238>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009a4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009a4e:	0020      	movs	r0, r4
 8009a50:	f7ff ff20 	bl	8009894 <I2C_ITError.lto_priv.644>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009a54:	7833      	ldrb	r3, [r6, #0]
 8009a56:	2b28      	cmp	r3, #40	; 0x28
 8009a58:	d103      	bne.n	8009a62 <I2C_Slave_ISR_IT+0xfe>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009a5a:	0029      	movs	r1, r5
 8009a5c:	0020      	movs	r0, r4
 8009a5e:	f7fe fd5b 	bl	8008518 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 8009a62:	2000      	movs	r0, #0
 8009a64:	7038      	strb	r0, [r7, #0]
}
 8009a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a68:	2110      	movs	r1, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009a6a:	7810      	ldrb	r0, [r2, #0]
 8009a6c:	6822      	ldr	r2, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a6e:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009a70:	2829      	cmp	r0, #41	; 0x29
 8009a72:	d19d      	bne.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
 8009a74:	4851      	ldr	r0, [pc, #324]	; (8009bbc <I2C_Slave_ISR_IT+0x258>)
 8009a76:	4283      	cmp	r3, r0
 8009a78:	d09a      	beq.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
        I2C_Flush_TXDR(hi2c);
 8009a7a:	0020      	movs	r0, r4
 8009a7c:	f7fe fd3e 	bl	80084fc <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8009a80:	0020      	movs	r0, r4
 8009a82:	f7fe fd79 	bl	8008578 <I2C_ITSlaveSeqCplt>
 8009a86:	e793      	b.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a88:	2110      	movs	r1, #16
 8009a8a:	6822      	ldr	r2, [r4, #0]
 8009a8c:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a8e:	2204      	movs	r2, #4
 8009a90:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009a92:	430a      	orrs	r2, r1
 8009a94:	6462      	str	r2, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009a96:	4a4a      	ldr	r2, [pc, #296]	; (8009bc0 <I2C_Slave_ISR_IT+0x25c>)
 8009a98:	4213      	tst	r3, r2
 8009a9a:	d000      	beq.n	8009a9e <I2C_Slave_ISR_IT+0x13a>
 8009a9c:	e788      	b.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009a9e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009aa0:	0020      	movs	r0, r4
 8009aa2:	f7ff fef7 	bl	8009894 <I2C_ITError.lto_priv.644>
 8009aa6:	e783      	b.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	0769      	lsls	r1, r5, #29
 8009aac:	d51e      	bpl.n	8009aec <I2C_Slave_ISR_IT+0x188>
 8009aae:	08b1      	lsrs	r1, r6, #2
 8009ab0:	4211      	tst	r1, r2
 8009ab2:	d01b      	beq.n	8009aec <I2C_Slave_ISR_IT+0x188>
    if (hi2c->XferCount > 0U)
 8009ab4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009ab6:	2a00      	cmp	r2, #0
 8009ab8:	d00f      	beq.n	8009ada <I2C_Slave_ISR_IT+0x176>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8009aba:	2204      	movs	r2, #4
 8009abc:	4395      	bics	r5, r2
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009abe:	6822      	ldr	r2, [r4, #0]
 8009ac0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009ac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ac4:	700a      	strb	r2, [r1, #0]
      hi2c->pBuffPtr++;
 8009ac6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009ac8:	3201      	adds	r2, #1
 8009aca:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009acc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009ace:	3a01      	subs	r2, #1
 8009ad0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009ad2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009ad4:	3a01      	subs	r2, #1
 8009ad6:	b292      	uxth	r2, r2
 8009ad8:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8009ada:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009adc:	2a00      	cmp	r2, #0
 8009ade:	d000      	beq.n	8009ae2 <I2C_Slave_ISR_IT+0x17e>
 8009ae0:	e766      	b.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
 8009ae2:	4a36      	ldr	r2, [pc, #216]	; (8009bbc <I2C_Slave_ISR_IT+0x258>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d100      	bne.n	8009aea <I2C_Slave_ISR_IT+0x186>
 8009ae8:	e762      	b.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
 8009aea:	e7c9      	b.n	8009a80 <I2C_Slave_ISR_IT+0x11c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009aec:	2201      	movs	r2, #1
 8009aee:	0729      	lsls	r1, r5, #28
 8009af0:	d52f      	bpl.n	8009b52 <I2C_Slave_ISR_IT+0x1ee>
 8009af2:	08f1      	lsrs	r1, r6, #3
 8009af4:	4211      	tst	r1, r2
 8009af6:	d02c      	beq.n	8009b52 <I2C_Slave_ISR_IT+0x1ee>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009af8:	0023      	movs	r3, r4
 8009afa:	2128      	movs	r1, #40	; 0x28
 8009afc:	3341      	adds	r3, #65	; 0x41
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	6822      	ldr	r2, [r4, #0]
 8009b02:	400b      	ands	r3, r1
 8009b04:	428b      	cmp	r3, r1
 8009b06:	d121      	bne.n	8009b4c <I2C_Slave_ISR_IT+0x1e8>
    transferdirection = I2C_GET_DIR(hi2c);
 8009b08:	6993      	ldr	r3, [r2, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009b0a:	6993      	ldr	r3, [r2, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009b0c:	6891      	ldr	r1, [r2, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009b0e:	68d0      	ldr	r0, [r2, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b10:	68e0      	ldr	r0, [r4, #12]
 8009b12:	2802      	cmp	r0, #2
 8009b14:	d114      	bne.n	8009b40 <I2C_Slave_ISR_IT+0x1dc>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009b16:	0c1b      	lsrs	r3, r3, #16
 8009b18:	30fc      	adds	r0, #252	; 0xfc
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8009b1a:	0589      	lsls	r1, r1, #22
 8009b1c:	0f49      	lsrs	r1, r1, #29
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009b1e:	4003      	ands	r3, r0
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8009b20:	404b      	eors	r3, r1
 8009b22:	2106      	movs	r1, #6
 8009b24:	400b      	ands	r3, r1
 8009b26:	d10b      	bne.n	8009b40 <I2C_Slave_ISR_IT+0x1dc>
        hi2c->AddrEventCount++;
 8009b28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009b2a:	3101      	adds	r1, #1
 8009b2c:	64a1      	str	r1, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009b2e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009b30:	2902      	cmp	r1, #2
 8009b32:	d000      	beq.n	8009b36 <I2C_Slave_ISR_IT+0x1d2>
 8009b34:	e73c      	b.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009b36:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 8009b38:	64a3      	str	r3, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009b3a:	61d1      	str	r1, [r2, #28]
    __HAL_UNLOCK(hi2c);
 8009b3c:	703b      	strb	r3, [r7, #0]
 8009b3e:	e737      	b.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009b40:	2104      	movs	r1, #4
 8009b42:	0020      	movs	r0, r4
 8009b44:	f7fe fcaa 	bl	800849c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e7f7      	b.n	8009b3c <I2C_Slave_ISR_IT+0x1d8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009b4c:	2308      	movs	r3, #8
 8009b4e:	61d3      	str	r3, [r2, #28]
 8009b50:	e7fa      	b.n	8009b48 <I2C_Slave_ISR_IT+0x1e4>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009b52:	2201      	movs	r2, #1
 8009b54:	07a9      	lsls	r1, r5, #30
 8009b56:	d400      	bmi.n	8009b5a <I2C_Slave_ISR_IT+0x1f6>
 8009b58:	e72a      	b.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
 8009b5a:	0871      	lsrs	r1, r6, #1
 8009b5c:	4211      	tst	r1, r2
 8009b5e:	d100      	bne.n	8009b62 <I2C_Slave_ISR_IT+0x1fe>
 8009b60:	e726      	b.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
    if (hi2c->XferCount > 0U)
 8009b62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009b64:	2a00      	cmp	r2, #0
 8009b66:	d00d      	beq.n	8009b84 <I2C_Slave_ISR_IT+0x220>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b6a:	6822      	ldr	r2, [r4, #0]
 8009b6c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8009b6e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b70:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8009b72:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009b74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009b76:	3b01      	subs	r3, #1
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009b7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	8523      	strh	r3, [r4, #40]	; 0x28
 8009b82:	e715      	b.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009b84:	4a0e      	ldr	r2, [pc, #56]	; (8009bc0 <I2C_Slave_ISR_IT+0x25c>)
 8009b86:	4213      	tst	r3, r2
 8009b88:	d000      	beq.n	8009b8c <I2C_Slave_ISR_IT+0x228>
 8009b8a:	e711      	b.n	80099b0 <I2C_Slave_ISR_IT+0x4c>
 8009b8c:	e778      	b.n	8009a80 <I2C_Slave_ISR_IT+0x11c>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009b8e:	2301      	movs	r3, #1
 8009b90:	0bf6      	lsrs	r6, r6, #15
 8009b92:	421e      	tst	r6, r3
 8009b94:	d100      	bne.n	8009b98 <I2C_Slave_ISR_IT+0x234>
 8009b96:	e732      	b.n	80099fe <I2C_Slave_ISR_IT+0x9a>
    if (hi2c->hdmarx != NULL)
 8009b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b9a:	e72a      	b.n	80099f2 <I2C_Slave_ISR_IT+0x8e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009b9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b9e:	4d07      	ldr	r5, [pc, #28]	; (8009bbc <I2C_Slave_ISR_IT+0x258>)
 8009ba0:	42ab      	cmp	r3, r5
 8009ba2:	d006      	beq.n	8009bb2 <I2C_Slave_ISR_IT+0x24e>
    I2C_ITSlaveSeqCplt(hi2c);
 8009ba4:	0020      	movs	r0, r4
 8009ba6:	f7fe fce7 	bl	8008578 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009baa:	62e5      	str	r5, [r4, #44]	; 0x2c
 8009bac:	2320      	movs	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8009bae:	7033      	strb	r3, [r6, #0]
 8009bb0:	e757      	b.n	8009a62 <I2C_Slave_ISR_IT+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009bb2:	7832      	ldrb	r2, [r6, #0]
 8009bb4:	e7fa      	b.n	8009bac <I2C_Slave_ISR_IT+0x248>
 8009bb6:	46c0      	nop			; (mov r8, r8)
 8009bb8:	fe00e800 	.word	0xfe00e800
 8009bbc:	ffff0000 	.word	0xffff0000
 8009bc0:	feffffff 	.word	0xfeffffff

08009bc4 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009bc4:	2338      	movs	r3, #56	; 0x38
 8009bc6:	4a1f      	ldr	r2, [pc, #124]	; (8009c44 <HAL_RCC_GetSysClockFreq+0x80>)
{
 8009bc8:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009bca:	6891      	ldr	r1, [r2, #8]
 8009bcc:	0014      	movs	r4, r2
 8009bce:	4219      	tst	r1, r3
 8009bd0:	d108      	bne.n	8009be4 <HAL_RCC_GetSysClockFreq+0x20>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009bd6:	481c      	ldr	r0, [pc, #112]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009bd8:	049b      	lsls	r3, r3, #18
 8009bda:	0f5b      	lsrs	r3, r3, #29
 8009bdc:	4099      	lsls	r1, r3
    sysclockfreq = pllvco / pllr;
 8009bde:	f003 f91d 	bl	800ce1c <__udivsi3>
}
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009be4:	6891      	ldr	r1, [r2, #8]
 8009be6:	4019      	ands	r1, r3
 8009be8:	2908      	cmp	r1, #8
 8009bea:	d025      	beq.n	8009c38 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009bec:	6891      	ldr	r1, [r2, #8]
 8009bee:	4019      	ands	r1, r3
 8009bf0:	2910      	cmp	r1, #16
 8009bf2:	d115      	bne.n	8009c20 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009bf4:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009bf6:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009bf8:	43db      	mvns	r3, r3
 8009bfa:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009bfc:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009bfe:	0649      	lsls	r1, r1, #25
 8009c00:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c02:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009c04:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c06:	4015      	ands	r5, r2
    switch (pllsource)
 8009c08:	079b      	lsls	r3, r3, #30
 8009c0a:	d107      	bne.n	8009c1c <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c0c:	480f      	ldr	r0, [pc, #60]	; (8009c4c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009c0e:	f003 f905 	bl	800ce1c <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009c12:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009c14:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009c16:	0f49      	lsrs	r1, r1, #29
 8009c18:	3101      	adds	r1, #1
 8009c1a:	e7e0      	b.n	8009bde <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009c1c:	480a      	ldr	r0, [pc, #40]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x84>)
 8009c1e:	e7f6      	b.n	8009c0e <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8009c20:	6891      	ldr	r1, [r2, #8]
 8009c22:	4019      	ands	r1, r3
 8009c24:	2920      	cmp	r1, #32
 8009c26:	d009      	beq.n	8009c3c <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8009c28:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8009c2a:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	2b18      	cmp	r3, #24
 8009c30:	d1d7      	bne.n	8009be2 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8009c32:	20fa      	movs	r0, #250	; 0xfa
 8009c34:	01c0      	lsls	r0, r0, #7
 8009c36:	e7d4      	b.n	8009be2 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 8009c38:	4804      	ldr	r0, [pc, #16]	; (8009c4c <HAL_RCC_GetSysClockFreq+0x88>)
 8009c3a:	e7d2      	b.n	8009be2 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 8009c3c:	2080      	movs	r0, #128	; 0x80
 8009c3e:	0200      	lsls	r0, r0, #8
 8009c40:	e7cf      	b.n	8009be2 <HAL_RCC_GetSysClockFreq+0x1e>
 8009c42:	46c0      	nop			; (mov r8, r8)
 8009c44:	40021000 	.word	0x40021000
 8009c48:	00f42400 	.word	0x00f42400
 8009c4c:	007a1200 	.word	0x007a1200

08009c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8009c50:	4b04      	ldr	r3, [pc, #16]	; (8009c64 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	4210      	tst	r0, r2
 8009c56:	d000      	beq.n	8009c5a <HAL_GPIO_EXTI_IRQHandler+0xa>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8009c58:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8009c5a:	691a      	ldr	r2, [r3, #16]
 8009c5c:	4202      	tst	r2, r0
 8009c5e:	d000      	beq.n	8009c62 <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8009c60:	6118      	str	r0, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 8009c62:	4770      	bx	lr
 8009c64:	40021800 	.word	0x40021800

08009c68 <HAL_GPIO_Init>:
{
 8009c68:	b5f0      	push	{r4, r5, r6, r7, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c6a:	680b      	ldr	r3, [r1, #0]
{
 8009c6c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c6e:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8009c70:	2300      	movs	r3, #0
{
 8009c72:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c74:	9a03      	ldr	r2, [sp, #12]
 8009c76:	40da      	lsrs	r2, r3
 8009c78:	d101      	bne.n	8009c7e <HAL_GPIO_Init+0x16>
}
 8009c7a:	b005      	add	sp, #20
 8009c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009c7e:	2201      	movs	r2, #1
 8009c80:	409a      	lsls	r2, r3
 8009c82:	9202      	str	r2, [sp, #8]
 8009c84:	9902      	ldr	r1, [sp, #8]
 8009c86:	9a03      	ldr	r2, [sp, #12]
 8009c88:	400a      	ands	r2, r1
 8009c8a:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8009c8c:	d100      	bne.n	8009c90 <HAL_GPIO_Init+0x28>
 8009c8e:	e085      	b.n	8009d9c <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009c90:	9a01      	ldr	r2, [sp, #4]
 8009c92:	2110      	movs	r1, #16
 8009c94:	6852      	ldr	r2, [r2, #4]
 8009c96:	0016      	movs	r6, r2
 8009c98:	438e      	bics	r6, r1
 8009c9a:	2e02      	cmp	r6, #2
 8009c9c:	d10e      	bne.n	8009cbc <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009c9e:	2507      	movs	r5, #7
 8009ca0:	401d      	ands	r5, r3
 8009ca2:	00ad      	lsls	r5, r5, #2
 8009ca4:	3901      	subs	r1, #1
 8009ca6:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8009ca8:	08dc      	lsrs	r4, r3, #3
 8009caa:	00a4      	lsls	r4, r4, #2
 8009cac:	1904      	adds	r4, r0, r4
 8009cae:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009cb0:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009cb2:	9901      	ldr	r1, [sp, #4]
 8009cb4:	6909      	ldr	r1, [r1, #16]
 8009cb6:	40a9      	lsls	r1, r5
 8009cb8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8009cba:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009cbc:	2403      	movs	r4, #3
 8009cbe:	005f      	lsls	r7, r3, #1
 8009cc0:	40bc      	lsls	r4, r7
 8009cc2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8009cc4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009cc6:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009cc8:	4025      	ands	r5, r4
 8009cca:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009ccc:	2503      	movs	r5, #3
 8009cce:	4015      	ands	r5, r2
 8009cd0:	40bd      	lsls	r5, r7
 8009cd2:	4661      	mov	r1, ip
 8009cd4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8009cd6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009cd8:	2e01      	cmp	r6, #1
 8009cda:	d80f      	bhi.n	8009cfc <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009cdc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8009cde:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009ce0:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009ce2:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009ce4:	40bd      	lsls	r5, r7
 8009ce6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8009ce8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8009cea:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009cec:	9902      	ldr	r1, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009cee:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009cf0:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	400d      	ands	r5, r1
 8009cf6:	409d      	lsls	r5, r3
 8009cf8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8009cfa:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8009cfc:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009cfe:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009d00:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009d02:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009d04:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009d06:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009d08:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009d0a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8009d0c:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009d0e:	420a      	tst	r2, r1
 8009d10:	d044      	beq.n	8009d9c <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009d12:	2603      	movs	r6, #3
 8009d14:	240f      	movs	r4, #15
 8009d16:	4922      	ldr	r1, [pc, #136]	; (8009da0 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 8009d18:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009d1a:	401e      	ands	r6, r3
 8009d1c:	00ad      	lsls	r5, r5, #2
 8009d1e:	00f6      	lsls	r6, r6, #3
 8009d20:	186d      	adds	r5, r5, r1
 8009d22:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009d24:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8009d26:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009d28:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009d2a:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009d2c:	2400      	movs	r4, #0
 8009d2e:	4288      	cmp	r0, r1
 8009d30:	d00c      	beq.n	8009d4c <HAL_GPIO_Init+0xe4>
 8009d32:	491c      	ldr	r1, [pc, #112]	; (8009da4 <HAL_GPIO_Init+0x13c>)
 8009d34:	3401      	adds	r4, #1
 8009d36:	4288      	cmp	r0, r1
 8009d38:	d008      	beq.n	8009d4c <HAL_GPIO_Init+0xe4>
 8009d3a:	491b      	ldr	r1, [pc, #108]	; (8009da8 <HAL_GPIO_Init+0x140>)
 8009d3c:	3401      	adds	r4, #1
 8009d3e:	4288      	cmp	r0, r1
 8009d40:	d004      	beq.n	8009d4c <HAL_GPIO_Init+0xe4>
 8009d42:	491a      	ldr	r1, [pc, #104]	; (8009dac <HAL_GPIO_Init+0x144>)
 8009d44:	3403      	adds	r4, #3
 8009d46:	4288      	cmp	r0, r1
 8009d48:	d100      	bne.n	8009d4c <HAL_GPIO_Init+0xe4>
 8009d4a:	3c02      	subs	r4, #2
 8009d4c:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8009d4e:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009d50:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8009d52:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8009d54:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8009d56:	4c16      	ldr	r4, [pc, #88]	; (8009db0 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8009d58:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 8009d5a:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8009d5c:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009d5e:	03d1      	lsls	r1, r2, #15
 8009d60:	d401      	bmi.n	8009d66 <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8009d62:	003e      	movs	r6, r7
 8009d64:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 8009d66:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8009d68:	4e12      	ldr	r6, [pc, #72]	; (8009db4 <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 8009d6a:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 8009d6c:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 8009d6e:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009d70:	0391      	lsls	r1, r2, #14
 8009d72:	d401      	bmi.n	8009d78 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8009d74:	402c      	ands	r4, r5
 8009d76:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8009d78:	4c09      	ldr	r4, [pc, #36]	; (8009da0 <HAL_GPIO_Init+0x138>)
 8009d7a:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8009d7c:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8009d7e:	9e00      	ldr	r6, [sp, #0]
 8009d80:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009d82:	02d1      	lsls	r1, r2, #11
 8009d84:	d401      	bmi.n	8009d8a <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 8009d86:	003e      	movs	r6, r7
 8009d88:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 8009d8a:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8009d8c:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8009d8e:	9f00      	ldr	r7, [sp, #0]
 8009d90:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009d92:	0292      	lsls	r2, r2, #10
 8009d94:	d401      	bmi.n	8009d9a <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8009d96:	402e      	ands	r6, r5
 8009d98:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 8009d9a:	6067      	str	r7, [r4, #4]
    position++;
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	e769      	b.n	8009c74 <HAL_GPIO_Init+0xc>
 8009da0:	40021800 	.word	0x40021800
 8009da4:	50000400 	.word	0x50000400
 8009da8:	50000800 	.word	0x50000800
 8009dac:	50000c00 	.word	0x50000c00
 8009db0:	40021804 	.word	0x40021804
 8009db4:	40021808 	.word	0x40021808

08009db8 <HAL_UART_Init.constprop.94>:
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 8009db8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8009dba:	1d07      	adds	r7, r0, #4
 8009dbc:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 8009dbe:	b08b      	sub	sp, #44	; 0x2c
 8009dc0:	0004      	movs	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009dc2:	2d00      	cmp	r5, #0
 8009dc4:	d15a      	bne.n	8009e7c <HAL_UART_Init.constprop.94+0xc4>
    huart->Lock = HAL_UNLOCKED;
 8009dc6:	0003      	movs	r3, r0
 8009dc8:	337c      	adds	r3, #124	; 0x7c
 8009dca:	6806      	ldr	r6, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dcc:	2214      	movs	r2, #20
 8009dce:	701d      	strb	r5, [r3, #0]
 8009dd0:	0029      	movs	r1, r5
 8009dd2:	a805      	add	r0, sp, #20
 8009dd4:	f008 fa48 	bl	8012268 <memset>
  if(huart->Instance==USART1)
 8009dd8:	4bca      	ldr	r3, [pc, #808]	; (800a104 <HAL_UART_Init.constprop.94+0x34c>)
 8009dda:	429e      	cmp	r6, r3
 8009ddc:	d000      	beq.n	8009de0 <HAL_UART_Init.constprop.94+0x28>
 8009dde:	e097      	b.n	8009f10 <HAL_UART_Init.constprop.94+0x158>
    __HAL_RCC_USART1_CLK_ENABLE();
 8009de0:	2080      	movs	r0, #128	; 0x80
 8009de2:	4bc9      	ldr	r3, [pc, #804]	; (800a108 <HAL_UART_Init.constprop.94+0x350>)
 8009de4:	01c0      	lsls	r0, r0, #7
 8009de6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009de8:	4301      	orrs	r1, r0
 8009dea:	6419      	str	r1, [r3, #64]	; 0x40
 8009dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dee:	4002      	ands	r2, r0
 8009df0:	9204      	str	r2, [sp, #16]
 8009df2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009df4:	2201      	movs	r2, #1
 8009df6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009df8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dfa:	4311      	orrs	r1, r2
 8009dfc:	6359      	str	r1, [r3, #52]	; 0x34
 8009dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e00:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e02:	4013      	ands	r3, r2
 8009e04:	9303      	str	r3, [sp, #12]
 8009e06:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8009e08:	23f0      	movs	r3, #240	; 0xf0
 8009e0a:	015b      	lsls	r3, r3, #5
 8009e0c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e0e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e10:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8009e12:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e14:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e16:	f7ff ff27 	bl	8009c68 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8009e1a:	4ebc      	ldr	r6, [pc, #752]	; (800a10c <HAL_UART_Init.constprop.94+0x354>)
 8009e1c:	4bbc      	ldr	r3, [pc, #752]	; (800a110 <HAL_UART_Init.constprop.94+0x358>)
 8009e1e:	48bd      	ldr	r0, [pc, #756]	; (800a114 <HAL_UART_Init.constprop.94+0x35c>)
 8009e20:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8009e22:	2333      	movs	r3, #51	; 0x33
 8009e24:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e26:	3b23      	subs	r3, #35	; 0x23
 8009e28:	6333      	str	r3, [r6, #48]	; 0x30
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009e2a:	3370      	adds	r3, #112	; 0x70
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e2c:	6375      	str	r5, [r6, #52]	; 0x34
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009e2e:	63b3      	str	r3, [r6, #56]	; 0x38
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e30:	63f5      	str	r5, [r6, #60]	; 0x3c
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e32:	6435      	str	r5, [r6, #64]	; 0x40
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009e34:	6475      	str	r5, [r6, #68]	; 0x44
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009e36:	64b5      	str	r5, [r6, #72]	; 0x48
 8009e38:	f7fe fbd6 	bl	80085e8 <HAL_DMA_Init.part.0.constprop.135>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8009e3c:	6534      	str	r4, [r6, #80]	; 0x50
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8009e3e:	4bb6      	ldr	r3, [pc, #728]	; (800a118 <HAL_UART_Init.constprop.94+0x360>)
 8009e40:	4eb6      	ldr	r6, [pc, #728]	; (800a11c <HAL_UART_Init.constprop.94+0x364>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8009e42:	4ab4      	ldr	r2, [pc, #720]	; (800a114 <HAL_UART_Init.constprop.94+0x35c>)
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8009e44:	6073      	str	r3, [r6, #4]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8009e46:	2332      	movs	r3, #50	; 0x32
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e48:	60f5      	str	r5, [r6, #12]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e4a:	6135      	str	r5, [r6, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e4c:	61b5      	str	r5, [r6, #24]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e4e:	61f5      	str	r5, [r6, #28]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8009e50:	6235      	str	r5, [r6, #32]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009e52:	6275      	str	r5, [r6, #36]	; 0x24
 8009e54:	1d35      	adds	r5, r6, #4
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8009e56:	6762      	str	r2, [r4, #116]	; 0x74
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8009e58:	60b3      	str	r3, [r6, #8]
 8009e5a:	0028      	movs	r0, r5
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009e5c:	334e      	adds	r3, #78	; 0x4e
 8009e5e:	6173      	str	r3, [r6, #20]
 8009e60:	f7fe fbc2 	bl	80085e8 <HAL_DMA_Init.part.0.constprop.135>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009e64:	21c6      	movs	r1, #198	; 0xc6
 8009e66:	4aae      	ldr	r2, [pc, #696]	; (800a120 <HAL_UART_Init.constprop.94+0x368>)
 8009e68:	0089      	lsls	r1, r1, #2
 8009e6a:	5853      	ldr	r3, [r2, r1]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8009e6c:	67a5      	str	r5, [r4, #120]	; 0x78
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	0a1b      	lsrs	r3, r3, #8
 8009e72:	62f4      	str	r4, [r6, #44]	; 0x2c
 8009e74:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e76:	2380      	movs	r3, #128	; 0x80
 8009e78:	051b      	lsls	r3, r3, #20
 8009e7a:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009e7c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8009e7e:	2101      	movs	r1, #1
 8009e80:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009e82:	67fb      	str	r3, [r7, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8009e84:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e86:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8009e88:	438b      	bics	r3, r1
 8009e8a:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e8c:	68a3      	ldr	r3, [r4, #8]
 8009e8e:	69e1      	ldr	r1, [r4, #28]
 8009e90:	4303      	orrs	r3, r0
 8009e92:	6960      	ldr	r0, [r4, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009e94:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e96:	4303      	orrs	r3, r0
 8009e98:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e9a:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009e9c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e9e:	4da1      	ldr	r5, [pc, #644]	; (800a124 <HAL_UART_Init.constprop.94+0x36c>)
 8009ea0:	4028      	ands	r0, r5
 8009ea2:	4303      	orrs	r3, r0
 8009ea4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ea6:	6853      	ldr	r3, [r2, #4]
 8009ea8:	489f      	ldr	r0, [pc, #636]	; (800a128 <HAL_UART_Init.constprop.94+0x370>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009eaa:	4da0      	ldr	r5, [pc, #640]	; (800a12c <HAL_UART_Init.constprop.94+0x374>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009eac:	4003      	ands	r3, r0
 8009eae:	68e0      	ldr	r0, [r4, #12]
 8009eb0:	4303      	orrs	r3, r0
 8009eb2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009eb4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009eb6:	42aa      	cmp	r2, r5
 8009eb8:	d001      	beq.n	8009ebe <HAL_UART_Init.constprop.94+0x106>
    tmpreg |= huart->Init.OneBitSampling;
 8009eba:	6a23      	ldr	r3, [r4, #32]
 8009ebc:	4318      	orrs	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ebe:	6893      	ldr	r3, [r2, #8]
 8009ec0:	4e9b      	ldr	r6, [pc, #620]	; (800a130 <HAL_UART_Init.constprop.94+0x378>)
 8009ec2:	4033      	ands	r3, r6
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ec4:	260f      	movs	r6, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ec6:	4303      	orrs	r3, r0
 8009ec8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009eca:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8009ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ece:	43b0      	bics	r0, r6
 8009ed0:	4318      	orrs	r0, r3
 8009ed2:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ed4:	488b      	ldr	r0, [pc, #556]	; (800a104 <HAL_UART_Init.constprop.94+0x34c>)
 8009ed6:	4282      	cmp	r2, r0
 8009ed8:	d13a      	bne.n	8009f50 <HAL_UART_Init.constprop.94+0x198>
 8009eda:	2503      	movs	r5, #3
 8009edc:	4a8a      	ldr	r2, [pc, #552]	; (800a108 <HAL_UART_Init.constprop.94+0x350>)
 8009ede:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8009ee0:	4a94      	ldr	r2, [pc, #592]	; (800a134 <HAL_UART_Init.constprop.94+0x37c>)
 8009ee2:	4028      	ands	r0, r5
 8009ee4:	3201      	adds	r2, #1
 8009ee6:	1812      	adds	r2, r2, r0
 8009ee8:	7fd0      	ldrb	r0, [r2, #31]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eea:	2280      	movs	r2, #128	; 0x80
 8009eec:	0212      	lsls	r2, r2, #8
 8009eee:	4291      	cmp	r1, r2
 8009ef0:	d000      	beq.n	8009ef4 <HAL_UART_Init.constprop.94+0x13c>
 8009ef2:	e38e      	b.n	800a612 <HAL_UART_Init.constprop.94+0x85a>
    switch (clocksource)
 8009ef4:	2808      	cmp	r0, #8
 8009ef6:	d900      	bls.n	8009efa <HAL_UART_Init.constprop.94+0x142>
 8009ef8:	e388      	b.n	800a60c <HAL_UART_Init.constprop.94+0x854>
 8009efa:	f002 ff85 	bl	800ce08 <__gnu_thumb1_case_uhi>
 8009efe:	0488      	.short	0x0488
 8009f00:	03150387 	.word	0x03150387
 8009f04:	034f0387 	.word	0x034f0387
 8009f08:	03870387 	.word	0x03870387
 8009f0c:	03520387 	.word	0x03520387
  else if(huart->Instance==USART2)
 8009f10:	4b89      	ldr	r3, [pc, #548]	; (800a138 <HAL_UART_Init.constprop.94+0x380>)
 8009f12:	429e      	cmp	r6, r3
 8009f14:	d1b2      	bne.n	8009e7c <HAL_UART_Init.constprop.94+0xc4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009f16:	2080      	movs	r0, #128	; 0x80
 8009f18:	4b7b      	ldr	r3, [pc, #492]	; (800a108 <HAL_UART_Init.constprop.94+0x350>)
 8009f1a:	0280      	lsls	r0, r0, #10
 8009f1c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009f1e:	4301      	orrs	r1, r0
 8009f20:	63d9      	str	r1, [r3, #60]	; 0x3c
 8009f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f24:	4002      	ands	r2, r0
 8009f26:	9202      	str	r2, [sp, #8]
 8009f28:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f2e:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f30:	4311      	orrs	r1, r2
 8009f32:	6359      	str	r1, [r3, #52]	; 0x34
 8009f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f36:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f38:	4013      	ands	r3, r2
 8009f3a:	9301      	str	r3, [sp, #4]
 8009f3c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009f3e:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f40:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009f42:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f44:	3b0a      	subs	r3, #10
 8009f46:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8009f48:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f4a:	f7ff fe8d 	bl	8009c68 <HAL_GPIO_Init>
 8009f4e:	e795      	b.n	8009e7c <HAL_UART_Init.constprop.94+0xc4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f50:	4879      	ldr	r0, [pc, #484]	; (800a138 <HAL_UART_Init.constprop.94+0x380>)
 8009f52:	4282      	cmp	r2, r0
 8009f54:	d106      	bne.n	8009f64 <HAL_UART_Init.constprop.94+0x1ac>
 8009f56:	250c      	movs	r5, #12
 8009f58:	4a6b      	ldr	r2, [pc, #428]	; (800a108 <HAL_UART_Init.constprop.94+0x350>)
 8009f5a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8009f5c:	4a75      	ldr	r2, [pc, #468]	; (800a134 <HAL_UART_Init.constprop.94+0x37c>)
 8009f5e:	4028      	ands	r0, r5
 8009f60:	3205      	adds	r2, #5
 8009f62:	e7c0      	b.n	8009ee6 <HAL_UART_Init.constprop.94+0x12e>
 8009f64:	4875      	ldr	r0, [pc, #468]	; (800a13c <HAL_UART_Init.constprop.94+0x384>)
 8009f66:	4282      	cmp	r2, r0
 8009f68:	d101      	bne.n	8009f6e <HAL_UART_Init.constprop.94+0x1b6>
 8009f6a:	f000 fc4b 	bl	800a804 <HAL_UART_Init.constprop.94+0xa4c>
 8009f6e:	4874      	ldr	r0, [pc, #464]	; (800a140 <HAL_UART_Init.constprop.94+0x388>)
 8009f70:	4282      	cmp	r2, r0
 8009f72:	d101      	bne.n	8009f78 <HAL_UART_Init.constprop.94+0x1c0>
 8009f74:	f000 fc46 	bl	800a804 <HAL_UART_Init.constprop.94+0xa4c>
 8009f78:	42aa      	cmp	r2, r5
 8009f7a:	d001      	beq.n	8009f80 <HAL_UART_Init.constprop.94+0x1c8>
 8009f7c:	f000 fc08 	bl	800a790 <HAL_UART_Init.constprop.94+0x9d8>
 8009f80:	21c0      	movs	r1, #192	; 0xc0
 8009f82:	2080      	movs	r0, #128	; 0x80
 8009f84:	4a60      	ldr	r2, [pc, #384]	; (800a108 <HAL_UART_Init.constprop.94+0x350>)
 8009f86:	0109      	lsls	r1, r1, #4
 8009f88:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009f8a:	00c0      	lsls	r0, r0, #3
 8009f8c:	400a      	ands	r2, r1
 8009f8e:	4282      	cmp	r2, r0
 8009f90:	d100      	bne.n	8009f94 <HAL_UART_Init.constprop.94+0x1dc>
 8009f92:	e154      	b.n	800a23e <HAL_UART_Init.constprop.94+0x486>
 8009f94:	d900      	bls.n	8009f98 <HAL_UART_Init.constprop.94+0x1e0>
 8009f96:	e086      	b.n	800a0a6 <HAL_UART_Init.constprop.94+0x2ee>
 8009f98:	2a00      	cmp	r2, #0
 8009f9a:	d100      	bne.n	8009f9e <HAL_UART_Init.constprop.94+0x1e6>
 8009f9c:	e0ec      	b.n	800a178 <HAL_UART_Init.constprop.94+0x3c0>
        ret = HAL_ERROR;
 8009f9e:	2501      	movs	r5, #1
  huart->NbRxDataToProcess = 1;
 8009fa0:	4b68      	ldr	r3, [pc, #416]	; (800a144 <HAL_UART_Init.constprop.94+0x38c>)
 8009fa2:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->NbTxDataToProcess = 1;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxISR = NULL;
 8009fa8:	6723      	str	r3, [r4, #112]	; 0x70
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009faa:	2d01      	cmp	r5, #1
 8009fac:	d100      	bne.n	8009fb0 <HAL_UART_Init.constprop.94+0x1f8>
 8009fae:	e3ec      	b.n	800a78a <HAL_UART_Init.constprop.94+0x9d2>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009fb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	2a00      	cmp	r2, #0
 8009fb6:	d049      	beq.n	800a04c <HAL_UART_Init.constprop.94+0x294>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fb8:	07d1      	lsls	r1, r2, #31
 8009fba:	d505      	bpl.n	8009fc8 <HAL_UART_Init.constprop.94+0x210>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fbc:	6859      	ldr	r1, [r3, #4]
 8009fbe:	4862      	ldr	r0, [pc, #392]	; (800a148 <HAL_UART_Init.constprop.94+0x390>)
 8009fc0:	4001      	ands	r1, r0
 8009fc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009fc4:	4301      	orrs	r1, r0
 8009fc6:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fc8:	0791      	lsls	r1, r2, #30
 8009fca:	d505      	bpl.n	8009fd8 <HAL_UART_Init.constprop.94+0x220>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fcc:	6859      	ldr	r1, [r3, #4]
 8009fce:	485f      	ldr	r0, [pc, #380]	; (800a14c <HAL_UART_Init.constprop.94+0x394>)
 8009fd0:	4001      	ands	r1, r0
 8009fd2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009fd4:	4301      	orrs	r1, r0
 8009fd6:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fd8:	0751      	lsls	r1, r2, #29
 8009fda:	d505      	bpl.n	8009fe8 <HAL_UART_Init.constprop.94+0x230>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fdc:	6859      	ldr	r1, [r3, #4]
 8009fde:	485c      	ldr	r0, [pc, #368]	; (800a150 <HAL_UART_Init.constprop.94+0x398>)
 8009fe0:	4001      	ands	r1, r0
 8009fe2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009fe4:	4301      	orrs	r1, r0
 8009fe6:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fe8:	0711      	lsls	r1, r2, #28
 8009fea:	d505      	bpl.n	8009ff8 <HAL_UART_Init.constprop.94+0x240>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fec:	6859      	ldr	r1, [r3, #4]
 8009fee:	4859      	ldr	r0, [pc, #356]	; (800a154 <HAL_UART_Init.constprop.94+0x39c>)
 8009ff0:	4001      	ands	r1, r0
 8009ff2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009ff4:	4301      	orrs	r1, r0
 8009ff6:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ff8:	06d1      	lsls	r1, r2, #27
 8009ffa:	d505      	bpl.n	800a008 <HAL_UART_Init.constprop.94+0x250>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ffc:	6899      	ldr	r1, [r3, #8]
 8009ffe:	4856      	ldr	r0, [pc, #344]	; (800a158 <HAL_UART_Init.constprop.94+0x3a0>)
 800a000:	4001      	ands	r1, r0
 800a002:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a004:	4301      	orrs	r1, r0
 800a006:	6099      	str	r1, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a008:	0691      	lsls	r1, r2, #26
 800a00a:	d505      	bpl.n	800a018 <HAL_UART_Init.constprop.94+0x260>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a00c:	6899      	ldr	r1, [r3, #8]
 800a00e:	4853      	ldr	r0, [pc, #332]	; (800a15c <HAL_UART_Init.constprop.94+0x3a4>)
 800a010:	4001      	ands	r1, r0
 800a012:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a014:	4301      	orrs	r1, r0
 800a016:	6099      	str	r1, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a018:	0651      	lsls	r1, r2, #25
 800a01a:	d50f      	bpl.n	800a03c <HAL_UART_Init.constprop.94+0x284>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a01c:	6859      	ldr	r1, [r3, #4]
 800a01e:	4e50      	ldr	r6, [pc, #320]	; (800a160 <HAL_UART_Init.constprop.94+0x3a8>)
 800a020:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a022:	4031      	ands	r1, r6
 800a024:	4301      	orrs	r1, r0
 800a026:	6059      	str	r1, [r3, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a028:	2180      	movs	r1, #128	; 0x80
 800a02a:	0349      	lsls	r1, r1, #13
 800a02c:	4288      	cmp	r0, r1
 800a02e:	d105      	bne.n	800a03c <HAL_UART_Init.constprop.94+0x284>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a030:	6859      	ldr	r1, [r3, #4]
 800a032:	484c      	ldr	r0, [pc, #304]	; (800a164 <HAL_UART_Init.constprop.94+0x3ac>)
 800a034:	4001      	ands	r1, r0
 800a036:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a038:	4301      	orrs	r1, r0
 800a03a:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a03c:	0612      	lsls	r2, r2, #24
 800a03e:	d505      	bpl.n	800a04c <HAL_UART_Init.constprop.94+0x294>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	4949      	ldr	r1, [pc, #292]	; (800a168 <HAL_UART_Init.constprop.94+0x3b0>)
 800a044:	400a      	ands	r2, r1
 800a046:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a048:	430a      	orrs	r2, r1
 800a04a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	4947      	ldr	r1, [pc, #284]	; (800a16c <HAL_UART_Init.constprop.94+0x3b4>)
 800a050:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a052:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a054:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a056:	689a      	ldr	r2, [r3, #8]
 800a058:	438a      	bics	r2, r1
 800a05a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800a05c:	2201      	movs	r2, #1
 800a05e:	6819      	ldr	r1, [r3, #0]
 800a060:	430a      	orrs	r2, r1
 800a062:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a064:	0022      	movs	r2, r4
 800a066:	2100      	movs	r1, #0
 800a068:	3288      	adds	r2, #136	; 0x88
 800a06a:	6011      	str	r1, [r2, #0]
  return uwTick;
 800a06c:	4a40      	ldr	r2, [pc, #256]	; (800a170 <HAL_UART_Init.constprop.94+0x3b8>)
 800a06e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	071b      	lsls	r3, r3, #28
 800a074:	d500      	bpl.n	800a078 <HAL_UART_Init.constprop.94+0x2c0>
 800a076:	e37d      	b.n	800a774 <HAL_UART_Init.constprop.94+0x9bc>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	075b      	lsls	r3, r3, #29
 800a07e:	d509      	bpl.n	800a094 <HAL_UART_Init.constprop.94+0x2dc>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a080:	2180      	movs	r1, #128	; 0x80
 800a082:	4b3c      	ldr	r3, [pc, #240]	; (800a174 <HAL_UART_Init.constprop.94+0x3bc>)
 800a084:	0032      	movs	r2, r6
 800a086:	03c9      	lsls	r1, r1, #15
 800a088:	0020      	movs	r0, r4
 800a08a:	f7fe f907 	bl	800829c <UART_WaitOnFlagUntilTimeout.constprop.95>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d000      	beq.n	800a094 <HAL_UART_Init.constprop.94+0x2dc>
 800a092:	e379      	b.n	800a788 <HAL_UART_Init.constprop.94+0x9d0>
  huart->gState = HAL_UART_STATE_READY;
 800a094:	2320      	movs	r3, #32
 800a096:	1d22      	adds	r2, r4, #4
 800a098:	67d3      	str	r3, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a09a:	3204      	adds	r2, #4
 800a09c:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800a09e:	2300      	movs	r3, #0
 800a0a0:	347c      	adds	r4, #124	; 0x7c
 800a0a2:	7023      	strb	r3, [r4, #0]
 800a0a4:	e371      	b.n	800a78a <HAL_UART_Init.constprop.94+0x9d2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0a6:	2080      	movs	r0, #128	; 0x80
 800a0a8:	0100      	lsls	r0, r0, #4
 800a0aa:	4282      	cmp	r2, r0
 800a0ac:	d100      	bne.n	800a0b0 <HAL_UART_Init.constprop.94+0x2f8>
 800a0ae:	e0ab      	b.n	800a208 <HAL_UART_Init.constprop.94+0x450>
 800a0b0:	428a      	cmp	r2, r1
 800a0b2:	d000      	beq.n	800a0b6 <HAL_UART_Init.constprop.94+0x2fe>
 800a0b4:	e773      	b.n	8009f9e <HAL_UART_Init.constprop.94+0x1e6>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d020      	beq.n	800a0fc <HAL_UART_Init.constprop.94+0x344>
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d100      	bne.n	800a0c0 <HAL_UART_Init.constprop.94+0x308>
 800a0be:	e10a      	b.n	800a2d6 <HAL_UART_Init.constprop.94+0x51e>
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d100      	bne.n	800a0c6 <HAL_UART_Init.constprop.94+0x30e>
 800a0c4:	e10b      	b.n	800a2de <HAL_UART_Init.constprop.94+0x526>
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d100      	bne.n	800a0cc <HAL_UART_Init.constprop.94+0x314>
 800a0ca:	e10c      	b.n	800a2e6 <HAL_UART_Init.constprop.94+0x52e>
 800a0cc:	2b04      	cmp	r3, #4
 800a0ce:	d100      	bne.n	800a0d2 <HAL_UART_Init.constprop.94+0x31a>
 800a0d0:	e10c      	b.n	800a2ec <HAL_UART_Init.constprop.94+0x534>
 800a0d2:	2b05      	cmp	r3, #5
 800a0d4:	d100      	bne.n	800a0d8 <HAL_UART_Init.constprop.94+0x320>
 800a0d6:	e10d      	b.n	800a2f4 <HAL_UART_Init.constprop.94+0x53c>
 800a0d8:	2b06      	cmp	r3, #6
 800a0da:	d100      	bne.n	800a0de <HAL_UART_Init.constprop.94+0x326>
 800a0dc:	e10d      	b.n	800a2fa <HAL_UART_Init.constprop.94+0x542>
 800a0de:	2b07      	cmp	r3, #7
 800a0e0:	d100      	bne.n	800a0e4 <HAL_UART_Init.constprop.94+0x32c>
 800a0e2:	e10d      	b.n	800a300 <HAL_UART_Init.constprop.94+0x548>
 800a0e4:	2b08      	cmp	r3, #8
 800a0e6:	d100      	bne.n	800a0ea <HAL_UART_Init.constprop.94+0x332>
 800a0e8:	e10e      	b.n	800a308 <HAL_UART_Init.constprop.94+0x550>
 800a0ea:	2b09      	cmp	r3, #9
 800a0ec:	d100      	bne.n	800a0f0 <HAL_UART_Init.constprop.94+0x338>
 800a0ee:	e10e      	b.n	800a30e <HAL_UART_Init.constprop.94+0x556>
 800a0f0:	2b0a      	cmp	r3, #10
 800a0f2:	d100      	bne.n	800a0f6 <HAL_UART_Init.constprop.94+0x33e>
 800a0f4:	e10f      	b.n	800a316 <HAL_UART_Init.constprop.94+0x55e>
 800a0f6:	2b0b      	cmp	r3, #11
 800a0f8:	d100      	bne.n	800a0fc <HAL_UART_Init.constprop.94+0x344>
 800a0fa:	e110      	b.n	800a31e <HAL_UART_Init.constprop.94+0x566>
 800a0fc:	2080      	movs	r0, #128	; 0x80
 800a0fe:	2308      	movs	r3, #8
 800a100:	0200      	lsls	r0, r0, #8
 800a102:	e068      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a104:	40013800 	.word	0x40013800
 800a108:	40021000 	.word	0x40021000
 800a10c:	200004b8 	.word	0x200004b8
 800a110:	40020008 	.word	0x40020008
 800a114:	200004e0 	.word	0x200004e0
 800a118:	4002001c 	.word	0x4002001c
 800a11c:	20000538 	.word	0x20000538
 800a120:	e000e100 	.word	0xe000e100
 800a124:	cfff69f3 	.word	0xcfff69f3
 800a128:	ffffcfff 	.word	0xffffcfff
 800a12c:	40008000 	.word	0x40008000
 800a130:	11fff4ff 	.word	0x11fff4ff
 800a134:	08017f5c 	.word	0x08017f5c
 800a138:	40004400 	.word	0x40004400
 800a13c:	40004800 	.word	0x40004800
 800a140:	40004c00 	.word	0x40004c00
 800a144:	00010001 	.word	0x00010001
 800a148:	fffdffff 	.word	0xfffdffff
 800a14c:	fffeffff 	.word	0xfffeffff
 800a150:	fffbffff 	.word	0xfffbffff
 800a154:	ffff7fff 	.word	0xffff7fff
 800a158:	ffffefff 	.word	0xffffefff
 800a15c:	ffffdfff 	.word	0xffffdfff
 800a160:	ffefffff 	.word	0xffefffff
 800a164:	ff9fffff 	.word	0xff9fffff
 800a168:	fff7ffff 	.word	0xfff7ffff
 800a16c:	ffffb7ff 	.word	0xffffb7ff
 800a170:	200003b8 	.word	0x200003b8
 800a174:	01ffffff 	.word	0x01ffffff
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a178:	f7fe fa86 	bl	8008688 <HAL_RCC_GetPCLK1Freq>
 800a17c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a17e:	2101      	movs	r1, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d021      	beq.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a184:	1849      	adds	r1, r1, r1
 800a186:	2b01      	cmp	r3, #1
 800a188:	d01e      	beq.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a18a:	3102      	adds	r1, #2
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d01b      	beq.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a190:	3102      	adds	r1, #2
 800a192:	2b03      	cmp	r3, #3
 800a194:	d018      	beq.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a196:	3102      	adds	r1, #2
 800a198:	2b04      	cmp	r3, #4
 800a19a:	d015      	beq.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a19c:	3102      	adds	r1, #2
 800a19e:	2b05      	cmp	r3, #5
 800a1a0:	d012      	beq.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a1a2:	3102      	adds	r1, #2
 800a1a4:	2b06      	cmp	r3, #6
 800a1a6:	d00f      	beq.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a1a8:	3104      	adds	r1, #4
 800a1aa:	2b07      	cmp	r3, #7
 800a1ac:	d00c      	beq.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a1ae:	3110      	adds	r1, #16
 800a1b0:	2b08      	cmp	r3, #8
 800a1b2:	d009      	beq.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a1b4:	3120      	adds	r1, #32
 800a1b6:	2b09      	cmp	r3, #9
 800a1b8:	d006      	beq.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a1ba:	3140      	adds	r1, #64	; 0x40
 800a1bc:	2b0a      	cmp	r3, #10
 800a1be:	d003      	beq.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a1c0:	397f      	subs	r1, #127	; 0x7f
 800a1c2:	2b0b      	cmp	r3, #11
 800a1c4:	d100      	bne.n	800a1c8 <HAL_UART_Init.constprop.94+0x410>
 800a1c6:	31ff      	adds	r1, #255	; 0xff
 800a1c8:	f002 fe28 	bl	800ce1c <__udivsi3>
 800a1cc:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800a1ce:	2500      	movs	r5, #0
 800a1d0:	42a8      	cmp	r0, r5
 800a1d2:	d100      	bne.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a1d4:	e6e4      	b.n	8009fa0 <HAL_UART_Init.constprop.94+0x1e8>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1d6:	2103      	movs	r1, #3
 800a1d8:	6862      	ldr	r2, [r4, #4]
 800a1da:	4351      	muls	r1, r2
 800a1dc:	4281      	cmp	r1, r0
 800a1de:	d900      	bls.n	800a1e2 <HAL_UART_Init.constprop.94+0x42a>
 800a1e0:	e6dd      	b.n	8009f9e <HAL_UART_Init.constprop.94+0x1e6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1e2:	0311      	lsls	r1, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1e4:	4281      	cmp	r1, r0
 800a1e6:	d200      	bcs.n	800a1ea <HAL_UART_Init.constprop.94+0x432>
 800a1e8:	e6d9      	b.n	8009f9e <HAL_UART_Init.constprop.94+0x1e6>
        switch (clocksource)
 800a1ea:	2b08      	cmp	r3, #8
 800a1ec:	d900      	bls.n	800a1f0 <HAL_UART_Init.constprop.94+0x438>
 800a1ee:	e15a      	b.n	800a4a6 <HAL_UART_Init.constprop.94+0x6ee>
 800a1f0:	0018      	movs	r0, r3
 800a1f2:	f002 fe09 	bl	800ce08 <__gnu_thumb1_case_uhi>
 800a1f6:	0097      	.short	0x0097
 800a1f8:	00e90158 	.word	0x00e90158
 800a1fc:	011f0158 	.word	0x011f0158
 800a200:	01580158 	.word	0x01580158
 800a204:	01220158 	.word	0x01220158
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d015      	beq.n	800a238 <HAL_UART_Init.constprop.94+0x480>
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d042      	beq.n	800a296 <HAL_UART_Init.constprop.94+0x4de>
 800a210:	2b02      	cmp	r3, #2
 800a212:	d043      	beq.n	800a29c <HAL_UART_Init.constprop.94+0x4e4>
 800a214:	2b03      	cmp	r3, #3
 800a216:	d043      	beq.n	800a2a0 <HAL_UART_Init.constprop.94+0x4e8>
 800a218:	2b04      	cmp	r3, #4
 800a21a:	d044      	beq.n	800a2a6 <HAL_UART_Init.constprop.94+0x4ee>
 800a21c:	2b05      	cmp	r3, #5
 800a21e:	d045      	beq.n	800a2ac <HAL_UART_Init.constprop.94+0x4f4>
 800a220:	2b06      	cmp	r3, #6
 800a222:	d046      	beq.n	800a2b2 <HAL_UART_Init.constprop.94+0x4fa>
 800a224:	2b07      	cmp	r3, #7
 800a226:	d047      	beq.n	800a2b8 <HAL_UART_Init.constprop.94+0x500>
 800a228:	2b08      	cmp	r3, #8
 800a22a:	d048      	beq.n	800a2be <HAL_UART_Init.constprop.94+0x506>
 800a22c:	2b09      	cmp	r3, #9
 800a22e:	d049      	beq.n	800a2c4 <HAL_UART_Init.constprop.94+0x50c>
 800a230:	2b0a      	cmp	r3, #10
 800a232:	d04a      	beq.n	800a2ca <HAL_UART_Init.constprop.94+0x512>
 800a234:	2b0b      	cmp	r3, #11
 800a236:	d04b      	beq.n	800a2d0 <HAL_UART_Init.constprop.94+0x518>
 800a238:	2302      	movs	r3, #2
 800a23a:	489c      	ldr	r0, [pc, #624]	; (800a4ac <HAL_UART_Init.constprop.94+0x6f4>)
 800a23c:	e7cb      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a23e:	f7ff fcc1 	bl	8009bc4 <HAL_RCC_GetSysClockFreq>
 800a242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a244:	2101      	movs	r1, #1
 800a246:	2b00      	cmp	r3, #0
 800a248:	d021      	beq.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a24a:	1849      	adds	r1, r1, r1
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d01e      	beq.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a250:	3102      	adds	r1, #2
 800a252:	2b02      	cmp	r3, #2
 800a254:	d01b      	beq.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a256:	3102      	adds	r1, #2
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d018      	beq.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a25c:	3102      	adds	r1, #2
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d015      	beq.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a262:	3102      	adds	r1, #2
 800a264:	2b05      	cmp	r3, #5
 800a266:	d012      	beq.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a268:	3102      	adds	r1, #2
 800a26a:	2b06      	cmp	r3, #6
 800a26c:	d00f      	beq.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a26e:	3104      	adds	r1, #4
 800a270:	2b07      	cmp	r3, #7
 800a272:	d00c      	beq.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a274:	3110      	adds	r1, #16
 800a276:	2b08      	cmp	r3, #8
 800a278:	d009      	beq.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a27a:	3120      	adds	r1, #32
 800a27c:	2b09      	cmp	r3, #9
 800a27e:	d006      	beq.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a280:	3140      	adds	r1, #64	; 0x40
 800a282:	2b0a      	cmp	r3, #10
 800a284:	d003      	beq.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a286:	397f      	subs	r1, #127	; 0x7f
 800a288:	2b0b      	cmp	r3, #11
 800a28a:	d100      	bne.n	800a28e <HAL_UART_Init.constprop.94+0x4d6>
 800a28c:	31ff      	adds	r1, #255	; 0xff
 800a28e:	f002 fdc5 	bl	800ce1c <__udivsi3>
 800a292:	2304      	movs	r3, #4
 800a294:	e79b      	b.n	800a1ce <HAL_UART_Init.constprop.94+0x416>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a296:	2302      	movs	r3, #2
 800a298:	4885      	ldr	r0, [pc, #532]	; (800a4b0 <HAL_UART_Init.constprop.94+0x6f8>)
 800a29a:	e79c      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a29c:	4885      	ldr	r0, [pc, #532]	; (800a4b4 <HAL_UART_Init.constprop.94+0x6fc>)
 800a29e:	e79a      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	4885      	ldr	r0, [pc, #532]	; (800a4b8 <HAL_UART_Init.constprop.94+0x700>)
 800a2a4:	e797      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	4884      	ldr	r0, [pc, #528]	; (800a4bc <HAL_UART_Init.constprop.94+0x704>)
 800a2aa:	e794      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	4884      	ldr	r0, [pc, #528]	; (800a4c0 <HAL_UART_Init.constprop.94+0x708>)
 800a2b0:	e791      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	4883      	ldr	r0, [pc, #524]	; (800a4c4 <HAL_UART_Init.constprop.94+0x70c>)
 800a2b6:	e78e      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	4883      	ldr	r0, [pc, #524]	; (800a4c8 <HAL_UART_Init.constprop.94+0x710>)
 800a2bc:	e78b      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2be:	2302      	movs	r3, #2
 800a2c0:	4882      	ldr	r0, [pc, #520]	; (800a4cc <HAL_UART_Init.constprop.94+0x714>)
 800a2c2:	e788      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	4882      	ldr	r0, [pc, #520]	; (800a4d0 <HAL_UART_Init.constprop.94+0x718>)
 800a2c8:	e785      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	4881      	ldr	r0, [pc, #516]	; (800a4d4 <HAL_UART_Init.constprop.94+0x71c>)
 800a2ce:	e782      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	4881      	ldr	r0, [pc, #516]	; (800a4d8 <HAL_UART_Init.constprop.94+0x720>)
 800a2d4:	e77f      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a2d6:	2080      	movs	r0, #128	; 0x80
 800a2d8:	2308      	movs	r3, #8
 800a2da:	01c0      	lsls	r0, r0, #7
 800a2dc:	e77b      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2de:	2080      	movs	r0, #128	; 0x80
 800a2e0:	2308      	movs	r3, #8
 800a2e2:	0180      	lsls	r0, r0, #6
 800a2e4:	e777      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2e6:	2308      	movs	r3, #8
 800a2e8:	487c      	ldr	r0, [pc, #496]	; (800a4dc <HAL_UART_Init.constprop.94+0x724>)
 800a2ea:	e774      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2ec:	2080      	movs	r0, #128	; 0x80
 800a2ee:	2308      	movs	r3, #8
 800a2f0:	0140      	lsls	r0, r0, #5
 800a2f2:	e770      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2f4:	2308      	movs	r3, #8
 800a2f6:	487a      	ldr	r0, [pc, #488]	; (800a4e0 <HAL_UART_Init.constprop.94+0x728>)
 800a2f8:	e76d      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a2fa:	2308      	movs	r3, #8
 800a2fc:	4879      	ldr	r0, [pc, #484]	; (800a4e4 <HAL_UART_Init.constprop.94+0x72c>)
 800a2fe:	e76a      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a300:	2080      	movs	r0, #128	; 0x80
 800a302:	2308      	movs	r3, #8
 800a304:	0100      	lsls	r0, r0, #4
 800a306:	e766      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a308:	2080      	movs	r0, #128	; 0x80
 800a30a:	00c0      	lsls	r0, r0, #3
 800a30c:	e763      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a30e:	2080      	movs	r0, #128	; 0x80
 800a310:	2308      	movs	r3, #8
 800a312:	0080      	lsls	r0, r0, #2
 800a314:	e75f      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a316:	2080      	movs	r0, #128	; 0x80
 800a318:	2308      	movs	r3, #8
 800a31a:	0040      	lsls	r0, r0, #1
 800a31c:	e75b      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
 800a31e:	2308      	movs	r3, #8
 800a320:	2080      	movs	r0, #128	; 0x80
 800a322:	e758      	b.n	800a1d6 <HAL_UART_Init.constprop.94+0x41e>
            pclk = HAL_RCC_GetPCLK1Freq();
 800a324:	f7fe f9b0 	bl	8008688 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a328:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a32a:	2201      	movs	r2, #1
 800a32c:	2300      	movs	r3, #0
 800a32e:	2900      	cmp	r1, #0
 800a330:	d02e      	beq.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a332:	2202      	movs	r2, #2
 800a334:	2300      	movs	r3, #0
 800a336:	2901      	cmp	r1, #1
 800a338:	d02a      	beq.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a33a:	2204      	movs	r2, #4
 800a33c:	2300      	movs	r3, #0
 800a33e:	2902      	cmp	r1, #2
 800a340:	d026      	beq.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a342:	2206      	movs	r2, #6
 800a344:	2300      	movs	r3, #0
 800a346:	2903      	cmp	r1, #3
 800a348:	d022      	beq.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a34a:	2208      	movs	r2, #8
 800a34c:	2300      	movs	r3, #0
 800a34e:	2904      	cmp	r1, #4
 800a350:	d01e      	beq.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a352:	220a      	movs	r2, #10
 800a354:	2300      	movs	r3, #0
 800a356:	2905      	cmp	r1, #5
 800a358:	d01a      	beq.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a35a:	220c      	movs	r2, #12
 800a35c:	2300      	movs	r3, #0
 800a35e:	2906      	cmp	r1, #6
 800a360:	d016      	beq.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a362:	2210      	movs	r2, #16
 800a364:	2300      	movs	r3, #0
 800a366:	2907      	cmp	r1, #7
 800a368:	d012      	beq.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a36a:	2220      	movs	r2, #32
 800a36c:	2300      	movs	r3, #0
 800a36e:	2908      	cmp	r1, #8
 800a370:	d00e      	beq.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a372:	2240      	movs	r2, #64	; 0x40
 800a374:	2300      	movs	r3, #0
 800a376:	2909      	cmp	r1, #9
 800a378:	d00a      	beq.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a37a:	2280      	movs	r2, #128	; 0x80
 800a37c:	2300      	movs	r3, #0
 800a37e:	290a      	cmp	r1, #10
 800a380:	d006      	beq.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a382:	2201      	movs	r2, #1
 800a384:	2300      	movs	r3, #0
 800a386:	290b      	cmp	r1, #11
 800a388:	d102      	bne.n	800a390 <HAL_UART_Init.constprop.94+0x5d8>
 800a38a:	2280      	movs	r2, #128	; 0x80
 800a38c:	2300      	movs	r3, #0
 800a38e:	0052      	lsls	r2, r2, #1
 800a390:	2100      	movs	r1, #0
 800a392:	f002 ff31 	bl	800d1f8 <__aeabi_uldivmod>
 800a396:	2700      	movs	r7, #0
 800a398:	6865      	ldr	r5, [r4, #4]
 800a39a:	0e06      	lsrs	r6, r0, #24
 800a39c:	020b      	lsls	r3, r1, #8
 800a39e:	4333      	orrs	r3, r6
 800a3a0:	0202      	lsls	r2, r0, #8
 800a3a2:	086e      	lsrs	r6, r5, #1
 800a3a4:	1992      	adds	r2, r2, r6
 800a3a6:	417b      	adcs	r3, r7
 800a3a8:	0010      	movs	r0, r2
 800a3aa:	0019      	movs	r1, r3
 800a3ac:	002a      	movs	r2, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3ae:	003b      	movs	r3, r7
 800a3b0:	f002 ff22 	bl	800d1f8 <__aeabi_uldivmod>
 800a3b4:	003d      	movs	r5, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a3b6:	4b4c      	ldr	r3, [pc, #304]	; (800a4e8 <HAL_UART_Init.constprop.94+0x730>)
 800a3b8:	4a4c      	ldr	r2, [pc, #304]	; (800a4ec <HAL_UART_Init.constprop.94+0x734>)
 800a3ba:	18c3      	adds	r3, r0, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d900      	bls.n	800a3c2 <HAL_UART_Init.constprop.94+0x60a>
 800a3c0:	e5ed      	b.n	8009f9e <HAL_UART_Init.constprop.94+0x1e6>
      huart->Instance->BRR = usartdiv;
 800a3c2:	6823      	ldr	r3, [r4, #0]
 800a3c4:	60d8      	str	r0, [r3, #12]
 800a3c6:	e5eb      	b.n	8009fa0 <HAL_UART_Init.constprop.94+0x1e8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d030      	beq.n	800a430 <HAL_UART_Init.constprop.94+0x678>
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d01a      	beq.n	800a408 <HAL_UART_Init.constprop.94+0x650>
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d01a      	beq.n	800a40c <HAL_UART_Init.constprop.94+0x654>
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d01a      	beq.n	800a410 <HAL_UART_Init.constprop.94+0x658>
 800a3da:	2b04      	cmp	r3, #4
 800a3dc:	d01a      	beq.n	800a414 <HAL_UART_Init.constprop.94+0x65c>
 800a3de:	2b05      	cmp	r3, #5
 800a3e0:	d01a      	beq.n	800a418 <HAL_UART_Init.constprop.94+0x660>
 800a3e2:	2b06      	cmp	r3, #6
 800a3e4:	d01a      	beq.n	800a41c <HAL_UART_Init.constprop.94+0x664>
 800a3e6:	2b07      	cmp	r3, #7
 800a3e8:	d01a      	beq.n	800a420 <HAL_UART_Init.constprop.94+0x668>
 800a3ea:	2b08      	cmp	r3, #8
 800a3ec:	d01a      	beq.n	800a424 <HAL_UART_Init.constprop.94+0x66c>
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d01a      	beq.n	800a428 <HAL_UART_Init.constprop.94+0x670>
 800a3f2:	2b0a      	cmp	r3, #10
 800a3f4:	d01a      	beq.n	800a42c <HAL_UART_Init.constprop.94+0x674>
 800a3f6:	2b0b      	cmp	r3, #11
 800a3f8:	d11a      	bne.n	800a430 <HAL_UART_Init.constprop.94+0x678>
 800a3fa:	482c      	ldr	r0, [pc, #176]	; (800a4ac <HAL_UART_Init.constprop.94+0x6f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	2700      	movs	r7, #0
 800a400:	0856      	lsrs	r6, r2, #1
 800a402:	1980      	adds	r0, r0, r6
 800a404:	4179      	adcs	r1, r7
 800a406:	e7d2      	b.n	800a3ae <HAL_UART_Init.constprop.94+0x5f6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a408:	4839      	ldr	r0, [pc, #228]	; (800a4f0 <HAL_UART_Init.constprop.94+0x738>)
 800a40a:	e7f7      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a40c:	4839      	ldr	r0, [pc, #228]	; (800a4f4 <HAL_UART_Init.constprop.94+0x73c>)
 800a40e:	e7f5      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a410:	4839      	ldr	r0, [pc, #228]	; (800a4f8 <HAL_UART_Init.constprop.94+0x740>)
 800a412:	e7f3      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a414:	4839      	ldr	r0, [pc, #228]	; (800a4fc <HAL_UART_Init.constprop.94+0x744>)
 800a416:	e7f1      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a418:	4839      	ldr	r0, [pc, #228]	; (800a500 <HAL_UART_Init.constprop.94+0x748>)
 800a41a:	e7ef      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a41c:	4839      	ldr	r0, [pc, #228]	; (800a504 <HAL_UART_Init.constprop.94+0x74c>)
 800a41e:	e7ed      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a420:	4839      	ldr	r0, [pc, #228]	; (800a508 <HAL_UART_Init.constprop.94+0x750>)
 800a422:	e7eb      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a424:	4839      	ldr	r0, [pc, #228]	; (800a50c <HAL_UART_Init.constprop.94+0x754>)
 800a426:	e7e9      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a428:	4839      	ldr	r0, [pc, #228]	; (800a510 <HAL_UART_Init.constprop.94+0x758>)
 800a42a:	e7e7      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a42c:	4839      	ldr	r0, [pc, #228]	; (800a514 <HAL_UART_Init.constprop.94+0x75c>)
 800a42e:	e7e5      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a430:	4839      	ldr	r0, [pc, #228]	; (800a518 <HAL_UART_Init.constprop.94+0x760>)
 800a432:	e7e3      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
            pclk = HAL_RCC_GetSysClockFreq();
 800a434:	f7ff fbc6 	bl	8009bc4 <HAL_RCC_GetSysClockFreq>
 800a438:	e776      	b.n	800a328 <HAL_UART_Init.constprop.94+0x570>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d018      	beq.n	800a472 <HAL_UART_Init.constprop.94+0x6ba>
 800a440:	2b01      	cmp	r3, #1
 800a442:	d019      	beq.n	800a478 <HAL_UART_Init.constprop.94+0x6c0>
 800a444:	2b02      	cmp	r3, #2
 800a446:	d01a      	beq.n	800a47e <HAL_UART_Init.constprop.94+0x6c6>
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d01b      	beq.n	800a484 <HAL_UART_Init.constprop.94+0x6cc>
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d01b      	beq.n	800a488 <HAL_UART_Init.constprop.94+0x6d0>
 800a450:	2b05      	cmp	r3, #5
 800a452:	d01c      	beq.n	800a48e <HAL_UART_Init.constprop.94+0x6d6>
 800a454:	2b06      	cmp	r3, #6
 800a456:	d01c      	beq.n	800a492 <HAL_UART_Init.constprop.94+0x6da>
 800a458:	2080      	movs	r0, #128	; 0x80
 800a45a:	2b07      	cmp	r3, #7
 800a45c:	d01b      	beq.n	800a496 <HAL_UART_Init.constprop.94+0x6de>
 800a45e:	2b08      	cmp	r3, #8
 800a460:	d01b      	beq.n	800a49a <HAL_UART_Init.constprop.94+0x6e2>
 800a462:	2b09      	cmp	r3, #9
 800a464:	d01b      	beq.n	800a49e <HAL_UART_Init.constprop.94+0x6e6>
 800a466:	2b0a      	cmp	r3, #10
 800a468:	d01b      	beq.n	800a4a2 <HAL_UART_Init.constprop.94+0x6ea>
 800a46a:	2b0b      	cmp	r3, #11
 800a46c:	d102      	bne.n	800a474 <HAL_UART_Init.constprop.94+0x6bc>
 800a46e:	0200      	lsls	r0, r0, #8
 800a470:	e7c4      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a472:	2080      	movs	r0, #128	; 0x80
 800a474:	0400      	lsls	r0, r0, #16
 800a476:	e7c1      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a478:	2080      	movs	r0, #128	; 0x80
 800a47a:	03c0      	lsls	r0, r0, #15
 800a47c:	e7be      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a47e:	2080      	movs	r0, #128	; 0x80
 800a480:	0380      	lsls	r0, r0, #14
 800a482:	e7bb      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a484:	4825      	ldr	r0, [pc, #148]	; (800a51c <HAL_UART_Init.constprop.94+0x764>)
 800a486:	e7b9      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a488:	2080      	movs	r0, #128	; 0x80
 800a48a:	0340      	lsls	r0, r0, #13
 800a48c:	e7b6      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a48e:	4824      	ldr	r0, [pc, #144]	; (800a520 <HAL_UART_Init.constprop.94+0x768>)
 800a490:	e7b4      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a492:	4824      	ldr	r0, [pc, #144]	; (800a524 <HAL_UART_Init.constprop.94+0x76c>)
 800a494:	e7b2      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a496:	0300      	lsls	r0, r0, #12
 800a498:	e7b0      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a49a:	02c0      	lsls	r0, r0, #11
 800a49c:	e7ae      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a49e:	0280      	lsls	r0, r0, #10
 800a4a0:	e7ac      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
 800a4a2:	0240      	lsls	r0, r0, #9
 800a4a4:	e7aa      	b.n	800a3fc <HAL_UART_Init.constprop.94+0x644>
            ret = HAL_ERROR;
 800a4a6:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	e784      	b.n	800a3b6 <HAL_UART_Init.constprop.94+0x5fe>
 800a4ac:	00f42400 	.word	0x00f42400
 800a4b0:	007a1200 	.word	0x007a1200
 800a4b4:	003d0900 	.word	0x003d0900
 800a4b8:	0028b0aa 	.word	0x0028b0aa
 800a4bc:	001e8480 	.word	0x001e8480
 800a4c0:	00186a00 	.word	0x00186a00
 800a4c4:	00145855 	.word	0x00145855
 800a4c8:	000f4240 	.word	0x000f4240
 800a4cc:	0007a120 	.word	0x0007a120
 800a4d0:	0003d090 	.word	0x0003d090
 800a4d4:	0001e848 	.word	0x0001e848
 800a4d8:	0000f424 	.word	0x0000f424
 800a4dc:	00001555 	.word	0x00001555
 800a4e0:	00000ccc 	.word	0x00000ccc
 800a4e4:	00000aaa 	.word	0x00000aaa
 800a4e8:	fffffd00 	.word	0xfffffd00
 800a4ec:	000ffcff 	.word	0x000ffcff
 800a4f0:	7a120000 	.word	0x7a120000
 800a4f4:	3d090000 	.word	0x3d090000
 800a4f8:	28b0aa00 	.word	0x28b0aa00
 800a4fc:	1e848000 	.word	0x1e848000
 800a500:	186a0000 	.word	0x186a0000
 800a504:	14585500 	.word	0x14585500
 800a508:	0f424000 	.word	0x0f424000
 800a50c:	07a12000 	.word	0x07a12000
 800a510:	03d09000 	.word	0x03d09000
 800a514:	01e84800 	.word	0x01e84800
 800a518:	f4240000 	.word	0xf4240000
 800a51c:	00155500 	.word	0x00155500
 800a520:	000ccc00 	.word	0x000ccc00
 800a524:	000aaa00 	.word	0x000aaa00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d021      	beq.n	800a570 <HAL_UART_Init.constprop.94+0x7b8>
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d021      	beq.n	800a574 <HAL_UART_Init.constprop.94+0x7bc>
 800a530:	2b02      	cmp	r3, #2
 800a532:	d021      	beq.n	800a578 <HAL_UART_Init.constprop.94+0x7c0>
 800a534:	2b03      	cmp	r3, #3
 800a536:	d021      	beq.n	800a57c <HAL_UART_Init.constprop.94+0x7c4>
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d021      	beq.n	800a580 <HAL_UART_Init.constprop.94+0x7c8>
 800a53c:	2b05      	cmp	r3, #5
 800a53e:	d021      	beq.n	800a584 <HAL_UART_Init.constprop.94+0x7cc>
 800a540:	2b06      	cmp	r3, #6
 800a542:	d021      	beq.n	800a588 <HAL_UART_Init.constprop.94+0x7d0>
 800a544:	2b07      	cmp	r3, #7
 800a546:	d021      	beq.n	800a58c <HAL_UART_Init.constprop.94+0x7d4>
 800a548:	2b08      	cmp	r3, #8
 800a54a:	d021      	beq.n	800a590 <HAL_UART_Init.constprop.94+0x7d8>
 800a54c:	2b09      	cmp	r3, #9
 800a54e:	d021      	beq.n	800a594 <HAL_UART_Init.constprop.94+0x7dc>
 800a550:	2b0a      	cmp	r3, #10
 800a552:	d021      	beq.n	800a598 <HAL_UART_Init.constprop.94+0x7e0>
 800a554:	3b0b      	subs	r3, #11
 800a556:	0018      	movs	r0, r3
 800a558:	1e43      	subs	r3, r0, #1
 800a55a:	4198      	sbcs	r0, r3
 800a55c:	4b90      	ldr	r3, [pc, #576]	; (800a7a0 <HAL_UART_Init.constprop.94+0x9e8>)
 800a55e:	4240      	negs	r0, r0
 800a560:	4018      	ands	r0, r3
 800a562:	4b90      	ldr	r3, [pc, #576]	; (800a7a4 <HAL_UART_Init.constprop.94+0x9ec>)
 800a564:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a566:	6863      	ldr	r3, [r4, #4]
 800a568:	6861      	ldr	r1, [r4, #4]
 800a56a:	085b      	lsrs	r3, r3, #1
 800a56c:	1818      	adds	r0, r3, r0
 800a56e:	e17d      	b.n	800a86c <HAL_UART_Init.constprop.94+0xab4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a570:	488d      	ldr	r0, [pc, #564]	; (800a7a8 <HAL_UART_Init.constprop.94+0x9f0>)
 800a572:	e7f8      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a574:	488d      	ldr	r0, [pc, #564]	; (800a7ac <HAL_UART_Init.constprop.94+0x9f4>)
 800a576:	e7f6      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a578:	488d      	ldr	r0, [pc, #564]	; (800a7b0 <HAL_UART_Init.constprop.94+0x9f8>)
 800a57a:	e7f4      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a57c:	488d      	ldr	r0, [pc, #564]	; (800a7b4 <HAL_UART_Init.constprop.94+0x9fc>)
 800a57e:	e7f2      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a580:	488d      	ldr	r0, [pc, #564]	; (800a7b8 <HAL_UART_Init.constprop.94+0xa00>)
 800a582:	e7f0      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a584:	488d      	ldr	r0, [pc, #564]	; (800a7bc <HAL_UART_Init.constprop.94+0xa04>)
 800a586:	e7ee      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a588:	488d      	ldr	r0, [pc, #564]	; (800a7c0 <HAL_UART_Init.constprop.94+0xa08>)
 800a58a:	e7ec      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a58c:	488d      	ldr	r0, [pc, #564]	; (800a7c4 <HAL_UART_Init.constprop.94+0xa0c>)
 800a58e:	e7ea      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a590:	488d      	ldr	r0, [pc, #564]	; (800a7c8 <HAL_UART_Init.constprop.94+0xa10>)
 800a592:	e7e8      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a594:	488d      	ldr	r0, [pc, #564]	; (800a7cc <HAL_UART_Init.constprop.94+0xa14>)
 800a596:	e7e6      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a598:	488d      	ldr	r0, [pc, #564]	; (800a7d0 <HAL_UART_Init.constprop.94+0xa18>)
 800a59a:	e7e4      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
        pclk = HAL_RCC_GetSysClockFreq();
 800a59c:	f7ff fb12 	bl	8009bc4 <HAL_RCC_GetSysClockFreq>
 800a5a0:	e137      	b.n	800a812 <HAL_UART_Init.constprop.94+0xa5a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d018      	beq.n	800a5d8 <HAL_UART_Init.constprop.94+0x820>
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d019      	beq.n	800a5de <HAL_UART_Init.constprop.94+0x826>
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d01a      	beq.n	800a5e4 <HAL_UART_Init.constprop.94+0x82c>
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d01b      	beq.n	800a5ea <HAL_UART_Init.constprop.94+0x832>
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d01b      	beq.n	800a5ee <HAL_UART_Init.constprop.94+0x836>
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d01c      	beq.n	800a5f4 <HAL_UART_Init.constprop.94+0x83c>
 800a5ba:	2b06      	cmp	r3, #6
 800a5bc:	d01c      	beq.n	800a5f8 <HAL_UART_Init.constprop.94+0x840>
 800a5be:	2080      	movs	r0, #128	; 0x80
 800a5c0:	2b07      	cmp	r3, #7
 800a5c2:	d01b      	beq.n	800a5fc <HAL_UART_Init.constprop.94+0x844>
 800a5c4:	2b08      	cmp	r3, #8
 800a5c6:	d01b      	beq.n	800a600 <HAL_UART_Init.constprop.94+0x848>
 800a5c8:	2b09      	cmp	r3, #9
 800a5ca:	d01b      	beq.n	800a604 <HAL_UART_Init.constprop.94+0x84c>
 800a5cc:	2b0a      	cmp	r3, #10
 800a5ce:	d01b      	beq.n	800a608 <HAL_UART_Init.constprop.94+0x850>
 800a5d0:	2b0b      	cmp	r3, #11
 800a5d2:	d102      	bne.n	800a5da <HAL_UART_Init.constprop.94+0x822>
 800a5d4:	0040      	lsls	r0, r0, #1
 800a5d6:	e7c6      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a5d8:	2080      	movs	r0, #128	; 0x80
 800a5da:	0240      	lsls	r0, r0, #9
 800a5dc:	e7c3      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a5de:	2080      	movs	r0, #128	; 0x80
 800a5e0:	0200      	lsls	r0, r0, #8
 800a5e2:	e7c0      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a5e4:	2080      	movs	r0, #128	; 0x80
 800a5e6:	01c0      	lsls	r0, r0, #7
 800a5e8:	e7bd      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a5ea:	487a      	ldr	r0, [pc, #488]	; (800a7d4 <HAL_UART_Init.constprop.94+0xa1c>)
 800a5ec:	e7bb      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a5ee:	2080      	movs	r0, #128	; 0x80
 800a5f0:	0180      	lsls	r0, r0, #6
 800a5f2:	e7b8      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a5f4:	4878      	ldr	r0, [pc, #480]	; (800a7d8 <HAL_UART_Init.constprop.94+0xa20>)
 800a5f6:	e7b6      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a5f8:	4878      	ldr	r0, [pc, #480]	; (800a7dc <HAL_UART_Init.constprop.94+0xa24>)
 800a5fa:	e7b4      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a5fc:	0140      	lsls	r0, r0, #5
 800a5fe:	e7b2      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a600:	0100      	lsls	r0, r0, #4
 800a602:	e7b0      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a604:	00c0      	lsls	r0, r0, #3
 800a606:	e7ae      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
 800a608:	0080      	lsls	r0, r0, #2
 800a60a:	e7ac      	b.n	800a566 <HAL_UART_Init.constprop.94+0x7ae>
        ret = HAL_ERROR;
 800a60c:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800a60e:	2000      	movs	r0, #0
 800a610:	e130      	b.n	800a874 <HAL_UART_Init.constprop.94+0xabc>
    switch (clocksource)
 800a612:	2808      	cmp	r0, #8
 800a614:	d900      	bls.n	800a618 <HAL_UART_Init.constprop.94+0x860>
 800a616:	e0c0      	b.n	800a79a <HAL_UART_Init.constprop.94+0x9e2>
 800a618:	f002 fbec 	bl	800cdf4 <__gnu_thumb1_case_uqi>
 800a61c:	bf3bbf05 	.word	0xbf3bbf05
 800a620:	bfbfbf75 	.word	0xbfbfbf75
 800a624:	78          	.byte	0x78
 800a625:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800a626:	f7fe f82f 	bl	8008688 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a62a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a62c:	2101      	movs	r1, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d021      	beq.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a632:	1849      	adds	r1, r1, r1
 800a634:	2b01      	cmp	r3, #1
 800a636:	d01e      	beq.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a638:	3102      	adds	r1, #2
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d01b      	beq.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a63e:	3102      	adds	r1, #2
 800a640:	2b03      	cmp	r3, #3
 800a642:	d018      	beq.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a644:	3102      	adds	r1, #2
 800a646:	2b04      	cmp	r3, #4
 800a648:	d015      	beq.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a64a:	3102      	adds	r1, #2
 800a64c:	2b05      	cmp	r3, #5
 800a64e:	d012      	beq.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a650:	3102      	adds	r1, #2
 800a652:	2b06      	cmp	r3, #6
 800a654:	d00f      	beq.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a656:	3104      	adds	r1, #4
 800a658:	2b07      	cmp	r3, #7
 800a65a:	d00c      	beq.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a65c:	3110      	adds	r1, #16
 800a65e:	2b08      	cmp	r3, #8
 800a660:	d009      	beq.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a662:	3120      	adds	r1, #32
 800a664:	2b09      	cmp	r3, #9
 800a666:	d006      	beq.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a668:	3140      	adds	r1, #64	; 0x40
 800a66a:	2b0a      	cmp	r3, #10
 800a66c:	d003      	beq.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a66e:	397f      	subs	r1, #127	; 0x7f
 800a670:	2b0b      	cmp	r3, #11
 800a672:	d100      	bne.n	800a676 <HAL_UART_Init.constprop.94+0x8be>
 800a674:	31ff      	adds	r1, #255	; 0xff
 800a676:	6865      	ldr	r5, [r4, #4]
 800a678:	f002 fbd0 	bl	800ce1c <__udivsi3>
 800a67c:	0029      	movs	r1, r5
 800a67e:	086b      	lsrs	r3, r5, #1
 800a680:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a682:	f002 fbcb 	bl	800ce1c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800a686:	2500      	movs	r5, #0
 800a688:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a68a:	0003      	movs	r3, r0
 800a68c:	4a54      	ldr	r2, [pc, #336]	; (800a7e0 <HAL_UART_Init.constprop.94+0xa28>)
 800a68e:	3b10      	subs	r3, #16
 800a690:	e694      	b.n	800a3bc <HAL_UART_Init.constprop.94+0x604>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a692:	2b00      	cmp	r3, #0
 800a694:	d021      	beq.n	800a6da <HAL_UART_Init.constprop.94+0x922>
 800a696:	2b01      	cmp	r3, #1
 800a698:	d021      	beq.n	800a6de <HAL_UART_Init.constprop.94+0x926>
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d021      	beq.n	800a6e2 <HAL_UART_Init.constprop.94+0x92a>
 800a69e:	2b03      	cmp	r3, #3
 800a6a0:	d021      	beq.n	800a6e6 <HAL_UART_Init.constprop.94+0x92e>
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	d021      	beq.n	800a6ea <HAL_UART_Init.constprop.94+0x932>
 800a6a6:	2b05      	cmp	r3, #5
 800a6a8:	d021      	beq.n	800a6ee <HAL_UART_Init.constprop.94+0x936>
 800a6aa:	2b06      	cmp	r3, #6
 800a6ac:	d021      	beq.n	800a6f2 <HAL_UART_Init.constprop.94+0x93a>
 800a6ae:	2b07      	cmp	r3, #7
 800a6b0:	d021      	beq.n	800a6f6 <HAL_UART_Init.constprop.94+0x93e>
 800a6b2:	2b08      	cmp	r3, #8
 800a6b4:	d021      	beq.n	800a6fa <HAL_UART_Init.constprop.94+0x942>
 800a6b6:	2b09      	cmp	r3, #9
 800a6b8:	d021      	beq.n	800a6fe <HAL_UART_Init.constprop.94+0x946>
 800a6ba:	2b0a      	cmp	r3, #10
 800a6bc:	d021      	beq.n	800a702 <HAL_UART_Init.constprop.94+0x94a>
 800a6be:	3b0b      	subs	r3, #11
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	1e43      	subs	r3, r0, #1
 800a6c4:	4198      	sbcs	r0, r3
 800a6c6:	4b47      	ldr	r3, [pc, #284]	; (800a7e4 <HAL_UART_Init.constprop.94+0xa2c>)
 800a6c8:	4240      	negs	r0, r0
 800a6ca:	4018      	ands	r0, r3
 800a6cc:	4b46      	ldr	r3, [pc, #280]	; (800a7e8 <HAL_UART_Init.constprop.94+0xa30>)
 800a6ce:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6d0:	6863      	ldr	r3, [r4, #4]
 800a6d2:	6861      	ldr	r1, [r4, #4]
 800a6d4:	085b      	lsrs	r3, r3, #1
 800a6d6:	1818      	adds	r0, r3, r0
 800a6d8:	e7d3      	b.n	800a682 <HAL_UART_Init.constprop.94+0x8ca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6da:	4834      	ldr	r0, [pc, #208]	; (800a7ac <HAL_UART_Init.constprop.94+0x9f4>)
 800a6dc:	e7f8      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a6de:	4834      	ldr	r0, [pc, #208]	; (800a7b0 <HAL_UART_Init.constprop.94+0x9f8>)
 800a6e0:	e7f6      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a6e2:	4835      	ldr	r0, [pc, #212]	; (800a7b8 <HAL_UART_Init.constprop.94+0xa00>)
 800a6e4:	e7f4      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a6e6:	4836      	ldr	r0, [pc, #216]	; (800a7c0 <HAL_UART_Init.constprop.94+0xa08>)
 800a6e8:	e7f2      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a6ea:	4836      	ldr	r0, [pc, #216]	; (800a7c4 <HAL_UART_Init.constprop.94+0xa0c>)
 800a6ec:	e7f0      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a6ee:	483f      	ldr	r0, [pc, #252]	; (800a7ec <HAL_UART_Init.constprop.94+0xa34>)
 800a6f0:	e7ee      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a6f2:	483f      	ldr	r0, [pc, #252]	; (800a7f0 <HAL_UART_Init.constprop.94+0xa38>)
 800a6f4:	e7ec      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a6f6:	4834      	ldr	r0, [pc, #208]	; (800a7c8 <HAL_UART_Init.constprop.94+0xa10>)
 800a6f8:	e7ea      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a6fa:	4834      	ldr	r0, [pc, #208]	; (800a7cc <HAL_UART_Init.constprop.94+0xa14>)
 800a6fc:	e7e8      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a6fe:	4834      	ldr	r0, [pc, #208]	; (800a7d0 <HAL_UART_Init.constprop.94+0xa18>)
 800a700:	e7e6      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a702:	4828      	ldr	r0, [pc, #160]	; (800a7a4 <HAL_UART_Init.constprop.94+0x9ec>)
 800a704:	e7e4      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
        pclk = HAL_RCC_GetSysClockFreq();
 800a706:	f7ff fa5d 	bl	8009bc4 <HAL_RCC_GetSysClockFreq>
 800a70a:	e78e      	b.n	800a62a <HAL_UART_Init.constprop.94+0x872>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d018      	beq.n	800a742 <HAL_UART_Init.constprop.94+0x98a>
 800a710:	2b01      	cmp	r3, #1
 800a712:	d018      	beq.n	800a746 <HAL_UART_Init.constprop.94+0x98e>
 800a714:	2b02      	cmp	r3, #2
 800a716:	d019      	beq.n	800a74c <HAL_UART_Init.constprop.94+0x994>
 800a718:	2b03      	cmp	r3, #3
 800a71a:	d01a      	beq.n	800a752 <HAL_UART_Init.constprop.94+0x99a>
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d01a      	beq.n	800a756 <HAL_UART_Init.constprop.94+0x99e>
 800a720:	2b05      	cmp	r3, #5
 800a722:	d01b      	beq.n	800a75c <HAL_UART_Init.constprop.94+0x9a4>
 800a724:	2b06      	cmp	r3, #6
 800a726:	d01b      	beq.n	800a760 <HAL_UART_Init.constprop.94+0x9a8>
 800a728:	2080      	movs	r0, #128	; 0x80
 800a72a:	2b07      	cmp	r3, #7
 800a72c:	d01a      	beq.n	800a764 <HAL_UART_Init.constprop.94+0x9ac>
 800a72e:	2b08      	cmp	r3, #8
 800a730:	d01a      	beq.n	800a768 <HAL_UART_Init.constprop.94+0x9b0>
 800a732:	2b09      	cmp	r3, #9
 800a734:	d01a      	beq.n	800a76c <HAL_UART_Init.constprop.94+0x9b4>
 800a736:	2b0a      	cmp	r3, #10
 800a738:	d01a      	beq.n	800a770 <HAL_UART_Init.constprop.94+0x9b8>
 800a73a:	2b0b      	cmp	r3, #11
 800a73c:	d0c8      	beq.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a73e:	0200      	lsls	r0, r0, #8
 800a740:	e7c6      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a742:	2080      	movs	r0, #128	; 0x80
 800a744:	e7fb      	b.n	800a73e <HAL_UART_Init.constprop.94+0x986>
 800a746:	2080      	movs	r0, #128	; 0x80
 800a748:	01c0      	lsls	r0, r0, #7
 800a74a:	e7c1      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a74c:	2080      	movs	r0, #128	; 0x80
 800a74e:	0180      	lsls	r0, r0, #6
 800a750:	e7be      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a752:	4828      	ldr	r0, [pc, #160]	; (800a7f4 <HAL_UART_Init.constprop.94+0xa3c>)
 800a754:	e7bc      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a756:	2080      	movs	r0, #128	; 0x80
 800a758:	0140      	lsls	r0, r0, #5
 800a75a:	e7b9      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a75c:	4826      	ldr	r0, [pc, #152]	; (800a7f8 <HAL_UART_Init.constprop.94+0xa40>)
 800a75e:	e7b7      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a760:	4826      	ldr	r0, [pc, #152]	; (800a7fc <HAL_UART_Init.constprop.94+0xa44>)
 800a762:	e7b5      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a764:	0100      	lsls	r0, r0, #4
 800a766:	e7b3      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a768:	00c0      	lsls	r0, r0, #3
 800a76a:	e7b1      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a76c:	0080      	lsls	r0, r0, #2
 800a76e:	e7af      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
 800a770:	0040      	lsls	r0, r0, #1
 800a772:	e7ad      	b.n	800a6d0 <HAL_UART_Init.constprop.94+0x918>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a774:	2180      	movs	r1, #128	; 0x80
 800a776:	4b22      	ldr	r3, [pc, #136]	; (800a800 <HAL_UART_Init.constprop.94+0xa48>)
 800a778:	0032      	movs	r2, r6
 800a77a:	0389      	lsls	r1, r1, #14
 800a77c:	0020      	movs	r0, r4
 800a77e:	f7fd fd8d 	bl	800829c <UART_WaitOnFlagUntilTimeout.constprop.95>
 800a782:	2800      	cmp	r0, #0
 800a784:	d100      	bne.n	800a788 <HAL_UART_Init.constprop.94+0x9d0>
 800a786:	e477      	b.n	800a078 <HAL_UART_Init.constprop.94+0x2c0>
      return HAL_TIMEOUT;
 800a788:	2503      	movs	r5, #3
}
 800a78a:	0028      	movs	r0, r5
 800a78c:	b00b      	add	sp, #44	; 0x2c
 800a78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a790:	2380      	movs	r3, #128	; 0x80
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	4299      	cmp	r1, r3
 800a796:	d100      	bne.n	800a79a <HAL_UART_Init.constprop.94+0x9e2>
 800a798:	e738      	b.n	800a60c <HAL_UART_Init.constprop.94+0x854>
        ret = HAL_ERROR;
 800a79a:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800a79c:	2000      	movs	r0, #0
 800a79e:	e774      	b.n	800a68a <HAL_UART_Init.constprop.94+0x8d2>
 800a7a0:	01e65fb8 	.word	0x01e65fb8
 800a7a4:	0001e848 	.word	0x0001e848
 800a7a8:	01e84800 	.word	0x01e84800
 800a7ac:	00f42400 	.word	0x00f42400
 800a7b0:	007a1200 	.word	0x007a1200
 800a7b4:	00516154 	.word	0x00516154
 800a7b8:	003d0900 	.word	0x003d0900
 800a7bc:	0030d400 	.word	0x0030d400
 800a7c0:	0028b0aa 	.word	0x0028b0aa
 800a7c4:	001e8480 	.word	0x001e8480
 800a7c8:	000f4240 	.word	0x000f4240
 800a7cc:	0007a120 	.word	0x0007a120
 800a7d0:	0003d090 	.word	0x0003d090
 800a7d4:	00002aaa 	.word	0x00002aaa
 800a7d8:	00001998 	.word	0x00001998
 800a7dc:	00001554 	.word	0x00001554
 800a7e0:	0000ffef 	.word	0x0000ffef
 800a7e4:	00f32fdc 	.word	0x00f32fdc
 800a7e8:	0000f424 	.word	0x0000f424
 800a7ec:	00186a00 	.word	0x00186a00
 800a7f0:	00145855 	.word	0x00145855
 800a7f4:	00001555 	.word	0x00001555
 800a7f8:	00000ccc 	.word	0x00000ccc
 800a7fc:	00000aaa 	.word	0x00000aaa
 800a800:	01ffffff 	.word	0x01ffffff
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a804:	2380      	movs	r3, #128	; 0x80
 800a806:	021b      	lsls	r3, r3, #8
 800a808:	4299      	cmp	r1, r3
 800a80a:	d000      	beq.n	800a80e <HAL_UART_Init.constprop.94+0xa56>
 800a80c:	e70b      	b.n	800a626 <HAL_UART_Init.constprop.94+0x86e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a80e:	f7fd ff3b 	bl	8008688 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a814:	2101      	movs	r1, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	d021      	beq.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a81a:	1849      	adds	r1, r1, r1
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d01e      	beq.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a820:	3102      	adds	r1, #2
 800a822:	2b02      	cmp	r3, #2
 800a824:	d01b      	beq.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a826:	3102      	adds	r1, #2
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d018      	beq.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a82c:	3102      	adds	r1, #2
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d015      	beq.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a832:	3102      	adds	r1, #2
 800a834:	2b05      	cmp	r3, #5
 800a836:	d012      	beq.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a838:	3102      	adds	r1, #2
 800a83a:	2b06      	cmp	r3, #6
 800a83c:	d00f      	beq.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a83e:	3104      	adds	r1, #4
 800a840:	2b07      	cmp	r3, #7
 800a842:	d00c      	beq.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a844:	3110      	adds	r1, #16
 800a846:	2b08      	cmp	r3, #8
 800a848:	d009      	beq.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a84a:	3120      	adds	r1, #32
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d006      	beq.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a850:	3140      	adds	r1, #64	; 0x40
 800a852:	2b0a      	cmp	r3, #10
 800a854:	d003      	beq.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a856:	397f      	subs	r1, #127	; 0x7f
 800a858:	2b0b      	cmp	r3, #11
 800a85a:	d100      	bne.n	800a85e <HAL_UART_Init.constprop.94+0xaa6>
 800a85c:	31ff      	adds	r1, #255	; 0xff
 800a85e:	f002 fadd 	bl	800ce1c <__udivsi3>
 800a862:	6865      	ldr	r5, [r4, #4]
 800a864:	0040      	lsls	r0, r0, #1
 800a866:	0029      	movs	r1, r5
 800a868:	086b      	lsrs	r3, r5, #1
 800a86a:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a86c:	f002 fad6 	bl	800ce1c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800a870:	2500      	movs	r5, #0
 800a872:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a874:	0003      	movs	r3, r0
 800a876:	4a08      	ldr	r2, [pc, #32]	; (800a898 <HAL_UART_Init.constprop.94+0xae0>)
 800a878:	3b10      	subs	r3, #16
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d901      	bls.n	800a882 <HAL_UART_Init.constprop.94+0xaca>
 800a87e:	f7ff fb8e 	bl	8009f9e <HAL_UART_Init.constprop.94+0x1e6>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a882:	230f      	movs	r3, #15
 800a884:	0002      	movs	r2, r0
 800a886:	439a      	bics	r2, r3
 800a888:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a88a:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 800a88c:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a88e:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 800a890:	4318      	orrs	r0, r3
 800a892:	60d0      	str	r0, [r2, #12]
 800a894:	f7ff fb84 	bl	8009fa0 <HAL_UART_Init.constprop.94+0x1e8>
 800a898:	0000ffef 	.word	0x0000ffef

0800a89c <biquad_q3_12_complex_direct_form_1.lto_priv.639>:
 800a89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89e:	b091      	sub	sp, #68	; 0x44
 800a8a0:	ac16      	add	r4, sp, #88	; 0x58
 800a8a2:	001f      	movs	r7, r3
 800a8a4:	2500      	movs	r5, #0
 800a8a6:	5f63      	ldrsh	r3, [r4, r5]
 800a8a8:	2502      	movs	r5, #2
 800a8aa:	5f64      	ldrsh	r4, [r4, r5]
 800a8ac:	2600      	movs	r6, #0
 800a8ae:	5f85      	ldrsh	r5, [r0, r6]
 800a8b0:	9506      	str	r5, [sp, #24]
 800a8b2:	2602      	movs	r6, #2
 800a8b4:	5f85      	ldrsh	r5, [r0, r6]
 800a8b6:	9507      	str	r5, [sp, #28]
 800a8b8:	2604      	movs	r6, #4
 800a8ba:	5f85      	ldrsh	r5, [r0, r6]
 800a8bc:	9508      	str	r5, [sp, #32]
 800a8be:	88c6      	ldrh	r6, [r0, #6]
 800a8c0:	4d34      	ldr	r5, [pc, #208]	; (800a994 <biquad_q3_12_complex_direct_form_1.lto_priv.639+0xf8>)
 800a8c2:	1bad      	subs	r5, r5, r6
 800a8c4:	b22d      	sxth	r5, r5
 800a8c6:	9509      	str	r5, [sp, #36]	; 0x24
 800a8c8:	2508      	movs	r5, #8
 800a8ca:	5f40      	ldrsh	r0, [r0, r5]
 800a8cc:	900a      	str	r0, [sp, #40]	; 0x28
 800a8ce:	0318      	lsls	r0, r3, #12
 800a8d0:	9003      	str	r0, [sp, #12]
 800a8d2:	0320      	lsls	r0, r4, #12
 800a8d4:	9004      	str	r0, [sp, #16]
 800a8d6:	0090      	lsls	r0, r2, #2
 800a8d8:	2f01      	cmp	r7, #1
 800a8da:	d001      	beq.n	800a8e0 <biquad_q3_12_complex_direct_form_1.lto_priv.639+0x44>
 800a8dc:	2004      	movs	r0, #4
 800a8de:	4240      	negs	r0, r0
 800a8e0:	001e      	movs	r6, r3
 800a8e2:	427d      	negs	r5, r7
 800a8e4:	4355      	muls	r5, r2
 800a8e6:	00ba      	lsls	r2, r7, #2
 800a8e8:	920f      	str	r2, [sp, #60]	; 0x3c
 800a8ea:	00aa      	lsls	r2, r5, #2
 800a8ec:	1812      	adds	r2, r2, r0
 800a8ee:	1889      	adds	r1, r1, r2
 800a8f0:	940c      	str	r4, [sp, #48]	; 0x30
 800a8f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8f4:	9401      	str	r4, [sp, #4]
 800a8f6:	9302      	str	r3, [sp, #8]
 800a8f8:	9405      	str	r4, [sp, #20]
 800a8fa:	2d00      	cmp	r5, #0
 800a8fc:	d101      	bne.n	800a902 <biquad_q3_12_complex_direct_form_1.lto_priv.639+0x66>
 800a8fe:	b011      	add	sp, #68	; 0x44
 800a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a902:	2000      	movs	r0, #0
 800a904:	5e0a      	ldrsh	r2, [r1, r0]
 800a906:	19ed      	adds	r5, r5, r7
 800a908:	920d      	str	r2, [sp, #52]	; 0x34
 800a90a:	2002      	movs	r0, #2
 800a90c:	5e0a      	ldrsh	r2, [r1, r0]
 800a90e:	9802      	ldr	r0, [sp, #8]
 800a910:	920e      	str	r2, [sp, #56]	; 0x38
 800a912:	9a07      	ldr	r2, [sp, #28]
 800a914:	4372      	muls	r2, r6
 800a916:	4694      	mov	ip, r2
 800a918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a91a:	4342      	muls	r2, r0
 800a91c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a91e:	4494      	add	ip, r2
 800a920:	9a06      	ldr	r2, [sp, #24]
 800a922:	4342      	muls	r2, r0
 800a924:	9803      	ldr	r0, [sp, #12]
 800a926:	1812      	adds	r2, r2, r0
 800a928:	9808      	ldr	r0, [sp, #32]
 800a92a:	4462      	add	r2, ip
 800a92c:	4358      	muls	r0, r3
 800a92e:	4684      	mov	ip, r0
 800a930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a932:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a934:	4358      	muls	r0, r3
 800a936:	4663      	mov	r3, ip
 800a938:	1a1b      	subs	r3, r3, r0
 800a93a:	18d3      	adds	r3, r2, r3
 800a93c:	9303      	str	r3, [sp, #12]
 800a93e:	9a07      	ldr	r2, [sp, #28]
 800a940:	9b05      	ldr	r3, [sp, #20]
 800a942:	9801      	ldr	r0, [sp, #4]
 800a944:	435a      	muls	r2, r3
 800a946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a948:	4343      	muls	r3, r0
 800a94a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a94c:	18d2      	adds	r2, r2, r3
 800a94e:	9b06      	ldr	r3, [sp, #24]
 800a950:	4343      	muls	r3, r0
 800a952:	9804      	ldr	r0, [sp, #16]
 800a954:	181b      	adds	r3, r3, r0
 800a956:	18d3      	adds	r3, r2, r3
 800a958:	9a08      	ldr	r2, [sp, #32]
 800a95a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a95c:	4354      	muls	r4, r2
 800a95e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a960:	4342      	muls	r2, r0
 800a962:	1aa4      	subs	r4, r4, r2
 800a964:	191b      	adds	r3, r3, r4
 800a966:	9304      	str	r3, [sp, #16]
 800a968:	9a04      	ldr	r2, [sp, #16]
 800a96a:	9b03      	ldr	r3, [sp, #12]
 800a96c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a96e:	131b      	asrs	r3, r3, #12
 800a970:	1312      	asrs	r2, r2, #12
 800a972:	b21b      	sxth	r3, r3
 800a974:	b212      	sxth	r2, r2
 800a976:	800b      	strh	r3, [r1, #0]
 800a978:	804a      	strh	r2, [r1, #2]
 800a97a:	1809      	adds	r1, r1, r0
 800a97c:	9801      	ldr	r0, [sp, #4]
 800a97e:	900c      	str	r0, [sp, #48]	; 0x30
 800a980:	9802      	ldr	r0, [sp, #8]
 800a982:	9201      	str	r2, [sp, #4]
 800a984:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a986:	9302      	str	r3, [sp, #8]
 800a988:	9c05      	ldr	r4, [sp, #20]
 800a98a:	0033      	movs	r3, r6
 800a98c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a98e:	9205      	str	r2, [sp, #20]
 800a990:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a992:	e7b2      	b.n	800a8fa <biquad_q3_12_complex_direct_form_1.lto_priv.639+0x5e>
 800a994:	fffff000 	.word	0xfffff000

0800a998 <acc_confprogram_copy>:
 800a998:	2300      	movs	r3, #0
 800a99a:	b530      	push	{r4, r5, lr}
 800a99c:	0092      	lsls	r2, r2, #2
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d100      	bne.n	800a9a4 <acc_confprogram_copy+0xc>
 800a9a2:	bd30      	pop	{r4, r5, pc}
 800a9a4:	58c4      	ldr	r4, [r0, r3]
 800a9a6:	0c25      	lsrs	r5, r4, #16
 800a9a8:	52cd      	strh	r5, [r1, r3]
 800a9aa:	18cd      	adds	r5, r1, r3
 800a9ac:	806c      	strh	r4, [r5, #2]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	e7f5      	b.n	800a99e <acc_confprogram_copy+0x6>

0800a9b2 <acc_confprogram_modify_runif>:
 800a9b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9b4:	0055      	lsls	r5, r2, #1
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	1945      	adds	r5, r0, r5
 800a9ba:	000e      	movs	r6, r1
 800a9bc:	0028      	movs	r0, r5
 800a9be:	a903      	add	r1, sp, #12
 800a9c0:	0014      	movs	r4, r2
 800a9c2:	001f      	movs	r7, r3
 800a9c4:	f7fd fc94 	bl	80082f0 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800a9c8:	230f      	movs	r3, #15
 800a9ca:	9a03      	ldr	r2, [sp, #12]
 800a9cc:	439a      	bics	r2, r3
 800a9ce:	9202      	str	r2, [sp, #8]
 800a9d0:	0013      	movs	r3, r2
 800a9d2:	4a11      	ldr	r2, [pc, #68]	; (800aa18 <acc_confprogram_modify_runif+0x66>)
 800a9d4:	0011      	movs	r1, r2
 800a9d6:	3160      	adds	r1, #96	; 0x60
 800a9d8:	7809      	ldrb	r1, [r1, #0]
 800a9da:	2f00      	cmp	r7, #0
 800a9dc:	d011      	beq.n	800aa02 <acc_confprogram_modify_runif+0x50>
 800a9de:	4333      	orrs	r3, r6
 800a9e0:	9302      	str	r3, [sp, #8]
 800a9e2:	2903      	cmp	r1, #3
 800a9e4:	d906      	bls.n	800a9f4 <acc_confprogram_modify_runif+0x42>
 800a9e6:	9600      	str	r6, [sp, #0]
 800a9e8:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800a9ea:	0863      	lsrs	r3, r4, #1
 800a9ec:	4a0b      	ldr	r2, [pc, #44]	; (800aa1c <acc_confprogram_modify_runif+0x6a>)
 800a9ee:	490c      	ldr	r1, [pc, #48]	; (800aa20 <acc_confprogram_modify_runif+0x6e>)
 800a9f0:	2004      	movs	r0, #4
 800a9f2:	47b0      	blx	r6
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	0029      	movs	r1, r5
 800a9f8:	a802      	add	r0, sp, #8
 800a9fa:	f7ff ffcd 	bl	800a998 <acc_confprogram_copy>
 800a9fe:	b005      	add	sp, #20
 800aa00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa02:	2903      	cmp	r1, #3
 800aa04:	d9f6      	bls.n	800a9f4 <acc_confprogram_modify_runif+0x42>
 800aa06:	9600      	str	r6, [sp, #0]
 800aa08:	0863      	lsrs	r3, r4, #1
 800aa0a:	4905      	ldr	r1, [pc, #20]	; (800aa20 <acc_confprogram_modify_runif+0x6e>)
 800aa0c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800aa0e:	2004      	movs	r0, #4
 800aa10:	4a04      	ldr	r2, [pc, #16]	; (800aa24 <acc_confprogram_modify_runif+0x72>)
 800aa12:	47a0      	blx	r4
 800aa14:	e7ee      	b.n	800a9f4 <acc_confprogram_modify_runif+0x42>
 800aa16:	46c0      	nop			; (mov r8, r8)
 800aa18:	200003b8 	.word	0x200003b8
 800aa1c:	0801c87b 	.word	0x0801c87b
 800aa20:	0801be31 	.word	0x0801be31
 800aa24:	0801caa5 	.word	0x0801caa5

0800aa28 <acc_confprogram_patch_offset>:
 800aa28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa2a:	b089      	sub	sp, #36	; 0x24
 800aa2c:	001e      	movs	r6, r3
 800aa2e:	ab0e      	add	r3, sp, #56	; 0x38
 800aa30:	881c      	ldrh	r4, [r3, #0]
 800aa32:	4b3f      	ldr	r3, [pc, #252]	; (800ab30 <acc_confprogram_patch_offset+0x108>)
 800aa34:	9205      	str	r2, [sp, #20]
 800aa36:	001a      	movs	r2, r3
 800aa38:	9002      	str	r0, [sp, #8]
 800aa3a:	3260      	adds	r2, #96	; 0x60
 800aa3c:	7812      	ldrb	r2, [r2, #0]
 800aa3e:	000d      	movs	r5, r1
 800aa40:	2a03      	cmp	r2, #3
 800aa42:	d907      	bls.n	800aa54 <acc_confprogram_patch_offset+0x2c>
 800aa44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa46:	493b      	ldr	r1, [pc, #236]	; (800ab34 <acc_confprogram_patch_offset+0x10c>)
 800aa48:	9200      	str	r2, [sp, #0]
 800aa4a:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800aa4c:	4a3a      	ldr	r2, [pc, #232]	; (800ab38 <acc_confprogram_patch_offset+0x110>)
 800aa4e:	0023      	movs	r3, r4
 800aa50:	2004      	movs	r0, #4
 800aa52:	47b8      	blx	r7
 800aa54:	00e4      	lsls	r4, r4, #3
 800aa56:	1936      	adds	r6, r6, r4
 800aa58:	2400      	movs	r4, #0
 800aa5a:	8873      	ldrh	r3, [r6, #2]
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	d801      	bhi.n	800aa64 <acc_confprogram_patch_offset+0x3c>
 800aa60:	b009      	add	sp, #36	; 0x24
 800aa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa64:	2106      	movs	r1, #6
 800aa66:	4361      	muls	r1, r4
 800aa68:	6873      	ldr	r3, [r6, #4]
 800aa6a:	1859      	adds	r1, r3, r1
 800aa6c:	7808      	ldrb	r0, [r1, #0]
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d003      	beq.n	800aa7a <acc_confprogram_patch_offset+0x52>
 800aa72:	2802      	cmp	r0, #2
 800aa74:	d817      	bhi.n	800aaa6 <acc_confprogram_patch_offset+0x7e>
 800aa76:	888a      	ldrh	r2, [r1, #4]
 800aa78:	e000      	b.n	800aa7c <acc_confprogram_patch_offset+0x54>
 800aa7a:	884a      	ldrh	r2, [r1, #2]
 800aa7c:	4b2f      	ldr	r3, [pc, #188]	; (800ab3c <acc_confprogram_patch_offset+0x114>)
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d017      	beq.n	800aab2 <acc_confprogram_patch_offset+0x8a>
 800aa82:	0052      	lsls	r2, r2, #1
 800aa84:	b292      	uxth	r2, r2
 800aa86:	42aa      	cmp	r2, r5
 800aa88:	d313      	bcc.n	800aab2 <acc_confprogram_patch_offset+0x8a>
 800aa8a:	9b05      	ldr	r3, [sp, #20]
 800aa8c:	18eb      	adds	r3, r5, r3
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	da0f      	bge.n	800aab2 <acc_confprogram_patch_offset+0x8a>
 800aa92:	2801      	cmp	r0, #1
 800aa94:	d041      	beq.n	800ab1a <acc_confprogram_patch_offset+0xf2>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d00d      	beq.n	800aab6 <acc_confprogram_patch_offset+0x8e>
 800aa9a:	2802      	cmp	r0, #2
 800aa9c:	d109      	bne.n	800aab2 <acc_confprogram_patch_offset+0x8a>
 800aa9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaa0:	4258      	negs	r0, r3
 800aaa2:	4143      	adcs	r3, r0
 800aaa4:	e03c      	b.n	800ab20 <acc_confprogram_patch_offset+0xf8>
 800aaa6:	4b22      	ldr	r3, [pc, #136]	; (800ab30 <acc_confprogram_patch_offset+0x108>)
 800aaa8:	4a25      	ldr	r2, [pc, #148]	; (800ab40 <acc_confprogram_patch_offset+0x118>)
 800aaaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaac:	4921      	ldr	r1, [pc, #132]	; (800ab34 <acc_confprogram_patch_offset+0x10c>)
 800aaae:	2000      	movs	r0, #0
 800aab0:	4798      	blx	r3
 800aab2:	3401      	adds	r4, #1
 800aab4:	e7d1      	b.n	800aa5a <acc_confprogram_patch_offset+0x32>
 800aab6:	1b52      	subs	r2, r2, r5
 800aab8:	b293      	uxth	r3, r2
 800aaba:	790a      	ldrb	r2, [r1, #4]
 800aabc:	9203      	str	r2, [sp, #12]
 800aabe:	2201      	movs	r2, #1
 800aac0:	794f      	ldrb	r7, [r1, #5]
 800aac2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aac4:	40ba      	lsls	r2, r7
 800aac6:	4291      	cmp	r1, r2
 800aac8:	d30b      	bcc.n	800aae2 <acc_confprogram_patch_offset+0xba>
 800aaca:	3a01      	subs	r2, #1
 800aacc:	9201      	str	r2, [sp, #4]
 800aace:	4a18      	ldr	r2, [pc, #96]	; (800ab30 <acc_confprogram_patch_offset+0x108>)
 800aad0:	9100      	str	r1, [sp, #0]
 800aad2:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800aad4:	4917      	ldr	r1, [pc, #92]	; (800ab34 <acc_confprogram_patch_offset+0x10c>)
 800aad6:	4a1b      	ldr	r2, [pc, #108]	; (800ab44 <acc_confprogram_patch_offset+0x11c>)
 800aad8:	47a0      	blx	r4
 800aada:	2139      	movs	r1, #57	; 0x39
 800aadc:	481a      	ldr	r0, [pc, #104]	; (800ab48 <acc_confprogram_patch_offset+0x120>)
 800aade:	f7f7 fef1 	bl	80028c4 <acc_assert_fail>
 800aae2:	9a02      	ldr	r2, [sp, #8]
 800aae4:	005b      	lsls	r3, r3, #1
 800aae6:	18d3      	adds	r3, r2, r3
 800aae8:	a906      	add	r1, sp, #24
 800aaea:	0018      	movs	r0, r3
 800aaec:	9304      	str	r3, [sp, #16]
 800aaee:	f7fd fbff 	bl	80082f0 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800aaf2:	2320      	movs	r3, #32
 800aaf4:	1bdf      	subs	r7, r3, r7
 800aaf6:	3b21      	subs	r3, #33	; 0x21
 800aaf8:	40fb      	lsrs	r3, r7
 800aafa:	9a03      	ldr	r2, [sp, #12]
 800aafc:	9903      	ldr	r1, [sp, #12]
 800aafe:	4093      	lsls	r3, r2
 800ab00:	9a06      	ldr	r2, [sp, #24]
 800ab02:	a807      	add	r0, sp, #28
 800ab04:	439a      	bics	r2, r3
 800ab06:	0013      	movs	r3, r2
 800ab08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab0a:	408a      	lsls	r2, r1
 800ab0c:	9904      	ldr	r1, [sp, #16]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	2201      	movs	r2, #1
 800ab12:	9307      	str	r3, [sp, #28]
 800ab14:	f7ff ff40 	bl	800a998 <acc_confprogram_copy>
 800ab18:	e7cb      	b.n	800aab2 <acc_confprogram_patch_offset+0x8a>
 800ab1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab1c:	1e58      	subs	r0, r3, #1
 800ab1e:	4183      	sbcs	r3, r0
 800ab20:	1b52      	subs	r2, r2, r5
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	b292      	uxth	r2, r2
 800ab26:	8849      	ldrh	r1, [r1, #2]
 800ab28:	9802      	ldr	r0, [sp, #8]
 800ab2a:	f7ff ff42 	bl	800a9b2 <acc_confprogram_modify_runif>
 800ab2e:	e7c0      	b.n	800aab2 <acc_confprogram_patch_offset+0x8a>
 800ab30:	200003b8 	.word	0x200003b8
 800ab34:	0801be31 	.word	0x0801be31
 800ab38:	0801c9ec 	.word	0x0801c9ec
 800ab3c:	0000ffff 	.word	0x0000ffff
 800ab40:	0801cad7 	.word	0x0801cad7
 800ab44:	0801cb04 	.word	0x0801cb04
 800ab48:	0801ca42 	.word	0x0801ca42

0800ab4c <acc_diagnostic_log_data_u16>:
 800ab4c:	4770      	bx	lr

0800ab4e <acc_diagnostic_log_scalar>:
 800ab4e:	4770      	bx	lr

0800ab50 <acc_diagnostic_log_array>:
 800ab50:	4770      	bx	lr

0800ab52 <acc_diagnostic_log_set_parameter>:
 800ab52:	4770      	bx	lr

0800ab54 <acc_diagnostic_log_declare_parameter>:
 800ab54:	4770      	bx	lr

0800ab56 <acc_diagnostic_log_set_scope>:
 800ab56:	4770      	bx	lr

0800ab58 <accumulator_mod.lto_priv.638>:
 800ab58:	b510      	push	{r4, lr}
 800ab5a:	1c04      	adds	r4, r0, #0
 800ab5c:	f002 fd22 	bl	800d5a4 <__aeabi_f2iz>
 800ab60:	f002 fd40 	bl	800d5e4 <__aeabi_i2f>
 800ab64:	1c01      	adds	r1, r0, #0
 800ab66:	1c20      	adds	r0, r4, #0
 800ab68:	f001 ff58 	bl	800ca1c <__aeabi_fsub>
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	1c04      	adds	r4, r0, #0
 800ab70:	f002 fb38 	bl	800d1e4 <__aeabi_fcmpge>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d10b      	bne.n	800ab90 <accumulator_mod.lto_priv.638+0x38>
 800ab78:	20fe      	movs	r0, #254	; 0xfe
 800ab7a:	0580      	lsls	r0, r0, #22
 800ab7c:	1c21      	adds	r1, r4, #0
 800ab7e:	f001 fb6f 	bl	800c260 <__aeabi_fadd>
 800ab82:	219f      	movs	r1, #159	; 0x9f
 800ab84:	05c9      	lsls	r1, r1, #23
 800ab86:	f001 fe17 	bl	800c7b8 <__aeabi_fmul>
 800ab8a:	f002 fb55 	bl	800d238 <__aeabi_f2uiz>
 800ab8e:	bd10      	pop	{r4, pc}
 800ab90:	2000      	movs	r0, #0
 800ab92:	e7f3      	b.n	800ab7c <accumulator_mod.lto_priv.638+0x24>

0800ab94 <acc_alg_basic_saturation_check_u16>:
 800ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab96:	0006      	movs	r6, r0
 800ab98:	000c      	movs	r4, r1
 800ab9a:	1c10      	adds	r0, r2, #0
 800ab9c:	4912      	ldr	r1, [pc, #72]	; (800abe8 <acc_alg_basic_saturation_check_u16+0x54>)
 800ab9e:	1c17      	adds	r7, r2, #0
 800aba0:	f001 fcf8 	bl	800c594 <__aeabi_fdiv>
 800aba4:	4911      	ldr	r1, [pc, #68]	; (800abec <acc_alg_basic_saturation_check_u16+0x58>)
 800aba6:	f001 fe07 	bl	800c7b8 <__aeabi_fmul>
 800abaa:	f002 fb45 	bl	800d238 <__aeabi_f2uiz>
 800abae:	1c39      	adds	r1, r7, #0
 800abb0:	b285      	uxth	r5, r0
 800abb2:	480d      	ldr	r0, [pc, #52]	; (800abe8 <acc_alg_basic_saturation_check_u16+0x54>)
 800abb4:	f001 ff32 	bl	800ca1c <__aeabi_fsub>
 800abb8:	490b      	ldr	r1, [pc, #44]	; (800abe8 <acc_alg_basic_saturation_check_u16+0x54>)
 800abba:	f001 fceb 	bl	800c594 <__aeabi_fdiv>
 800abbe:	490b      	ldr	r1, [pc, #44]	; (800abec <acc_alg_basic_saturation_check_u16+0x58>)
 800abc0:	f001 fdfa 	bl	800c7b8 <__aeabi_fmul>
 800abc4:	f002 fb38 	bl	800d238 <__aeabi_f2uiz>
 800abc8:	0864      	lsrs	r4, r4, #1
 800abca:	0064      	lsls	r4, r4, #1
 800abcc:	b280      	uxth	r0, r0
 800abce:	1934      	adds	r4, r6, r4
 800abd0:	42a6      	cmp	r6, r4
 800abd2:	d101      	bne.n	800abd8 <acc_alg_basic_saturation_check_u16+0x44>
 800abd4:	2000      	movs	r0, #0
 800abd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abd8:	8832      	ldrh	r2, [r6, #0]
 800abda:	4282      	cmp	r2, r0
 800abdc:	d202      	bcs.n	800abe4 <acc_alg_basic_saturation_check_u16+0x50>
 800abde:	3602      	adds	r6, #2
 800abe0:	42aa      	cmp	r2, r5
 800abe2:	d8f5      	bhi.n	800abd0 <acc_alg_basic_saturation_check_u16+0x3c>
 800abe4:	2001      	movs	r0, #1
 800abe6:	e7f6      	b.n	800abd6 <acc_alg_basic_saturation_check_u16+0x42>
 800abe8:	42c80000 	.word	0x42c80000
 800abec:	477fff00 	.word	0x477fff00

0800abf0 <saturation_check_u16.lto_priv.330>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	f7ff ffcf 	bl	800ab94 <acc_alg_basic_saturation_check_u16>
 800abf6:	bd10      	pop	{r4, pc}

0800abf8 <eval_even_poly_f32.lto_priv.642>:
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	0005      	movs	r5, r0
 800abfc:	000c      	movs	r4, r1
 800abfe:	1c10      	adds	r0, r2, #0
 800ac00:	1c11      	adds	r1, r2, #0
 800ac02:	f001 fdd9 	bl	800c7b8 <__aeabi_fmul>
 800ac06:	1c06      	adds	r6, r0, #0
 800ac08:	2000      	movs	r0, #0
 800ac0a:	3c01      	subs	r4, #1
 800ac0c:	b2a4      	uxth	r4, r4
 800ac0e:	00a4      	lsls	r4, r4, #2
 800ac10:	192c      	adds	r4, r5, r4
 800ac12:	6821      	ldr	r1, [r4, #0]
 800ac14:	f001 fb24 	bl	800c260 <__aeabi_fadd>
 800ac18:	42a5      	cmp	r5, r4
 800ac1a:	d005      	beq.n	800ac28 <eval_even_poly_f32.lto_priv.642+0x30>
 800ac1c:	1c01      	adds	r1, r0, #0
 800ac1e:	1c30      	adds	r0, r6, #0
 800ac20:	f001 fdca 	bl	800c7b8 <__aeabi_fmul>
 800ac24:	3c04      	subs	r4, #4
 800ac26:	e7f4      	b.n	800ac12 <eval_even_poly_f32.lto_priv.642+0x1a>
 800ac28:	bd70      	pop	{r4, r5, r6, pc}

0800ac2a <quarter_pi_cos_sin_f32.lto_priv.641>:
 800ac2a:	b570      	push	{r4, r5, r6, lr}
 800ac2c:	000d      	movs	r5, r1
 800ac2e:	490d      	ldr	r1, [pc, #52]	; (800ac64 <quarter_pi_cos_sin_f32.lto_priv.641+0x3a>)
 800ac30:	1c04      	adds	r4, r0, #0
 800ac32:	f002 fab9 	bl	800d1a8 <__aeabi_fcmplt>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d111      	bne.n	800ac5e <quarter_pi_cos_sin_f32.lto_priv.641+0x34>
 800ac3a:	480b      	ldr	r0, [pc, #44]	; (800ac68 <quarter_pi_cos_sin_f32.lto_priv.641+0x3e>)
 800ac3c:	2d00      	cmp	r5, #0
 800ac3e:	d005      	beq.n	800ac4c <quarter_pi_cos_sin_f32.lto_priv.641+0x22>
 800ac40:	3034      	adds	r0, #52	; 0x34
 800ac42:	1c22      	adds	r2, r4, #0
 800ac44:	2105      	movs	r1, #5
 800ac46:	f7ff ffd7 	bl	800abf8 <eval_even_poly_f32.lto_priv.642>
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	1c22      	adds	r2, r4, #0
 800ac4e:	2104      	movs	r1, #4
 800ac50:	3048      	adds	r0, #72	; 0x48
 800ac52:	f7ff ffd1 	bl	800abf8 <eval_even_poly_f32.lto_priv.642>
 800ac56:	1c21      	adds	r1, r4, #0
 800ac58:	f001 fdae 	bl	800c7b8 <__aeabi_fmul>
 800ac5c:	e7f5      	b.n	800ac4a <quarter_pi_cos_sin_f32.lto_priv.641+0x20>
 800ac5e:	4803      	ldr	r0, [pc, #12]	; (800ac6c <quarter_pi_cos_sin_f32.lto_priv.641+0x42>)
 800ac60:	e7f3      	b.n	800ac4a <quarter_pi_cos_sin_f32.lto_priv.641+0x20>
 800ac62:	46c0      	nop			; (mov r8, r8)
 800ac64:	bf490fdb 	.word	0xbf490fdb
 800ac68:	08017f5c 	.word	0x08017f5c
 800ac6c:	7fc00000 	.word	0x7fc00000

0800ac70 <acc_alg_basic_math_q3_12_sin>:
 800ac70:	0002      	movs	r2, r0
 800ac72:	0003      	movs	r3, r0
 800ac74:	0041      	lsls	r1, r0, #1
 800ac76:	d500      	bpl.n	800ac7a <acc_alg_basic_math_q3_12_sin+0xa>
 800ac78:	43c3      	mvns	r3, r0
 800ac7a:	2180      	movs	r1, #128	; 0x80
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	0389      	lsls	r1, r1, #14
 800ac80:	089b      	lsrs	r3, r3, #2
 800ac82:	185b      	adds	r3, r3, r1
 800ac84:	0d9b      	lsrs	r3, r3, #22
 800ac86:	4904      	ldr	r1, [pc, #16]	; (800ac98 <acc_alg_basic_math_q3_12_sin+0x28>)
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	5e58      	ldrsh	r0, [r3, r1]
 800ac8c:	2a00      	cmp	r2, #0
 800ac8e:	da01      	bge.n	800ac94 <acc_alg_basic_math_q3_12_sin+0x24>
 800ac90:	4240      	negs	r0, r0
 800ac92:	b200      	sxth	r0, r0
 800ac94:	4770      	bx	lr
 800ac96:	46c0      	nop			; (mov r8, r8)
 800ac98:	08018e6c 	.word	0x08018e6c

0800ac9c <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800ac9c:	b203      	sxth	r3, r0
 800ac9e:	17da      	asrs	r2, r3, #31
 800aca0:	189b      	adds	r3, r3, r2
 800aca2:	1400      	asrs	r0, r0, #16
 800aca4:	4053      	eors	r3, r2
 800aca6:	17c2      	asrs	r2, r0, #31
 800aca8:	1880      	adds	r0, r0, r2
 800acaa:	4050      	eors	r0, r2
 800acac:	b21b      	sxth	r3, r3
 800acae:	b202      	sxth	r2, r0
 800acb0:	b082      	sub	sp, #8
 800acb2:	4293      	cmp	r3, r2
 800acb4:	db02      	blt.n	800acbc <acc_alg_basic_math_q3_12_complex_scalar_abs+0x20>
 800acb6:	0011      	movs	r1, r2
 800acb8:	001a      	movs	r2, r3
 800acba:	000b      	movs	r3, r1
 800acbc:	480b      	ldr	r0, [pc, #44]	; (800acec <acc_alg_basic_math_q3_12_complex_scalar_abs+0x50>)
 800acbe:	4350      	muls	r0, r2
 800acc0:	17c1      	asrs	r1, r0, #31
 800acc2:	0509      	lsls	r1, r1, #20
 800acc4:	0d09      	lsrs	r1, r1, #20
 800acc6:	1809      	adds	r1, r1, r0
 800acc8:	1309      	asrs	r1, r1, #12
 800acca:	b209      	sxth	r1, r1
 800accc:	428b      	cmp	r3, r1
 800acce:	da08      	bge.n	800ace2 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x46>
 800acd0:	4807      	ldr	r0, [pc, #28]	; (800acf0 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x54>)
 800acd2:	4350      	muls	r0, r2
 800acd4:	4a07      	ldr	r2, [pc, #28]	; (800acf4 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x58>)
 800acd6:	4353      	muls	r3, r2
 800acd8:	18c0      	adds	r0, r0, r3
 800acda:	1300      	asrs	r0, r0, #12
 800acdc:	b200      	sxth	r0, r0
 800acde:	b002      	add	sp, #8
 800ace0:	4770      	bx	lr
 800ace2:	4805      	ldr	r0, [pc, #20]	; (800acf8 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x5c>)
 800ace4:	4350      	muls	r0, r2
 800ace6:	4a05      	ldr	r2, [pc, #20]	; (800acfc <acc_alg_basic_math_q3_12_complex_scalar_abs+0x60>)
 800ace8:	e7f5      	b.n	800acd6 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x3a>
 800acea:	46c0      	nop			; (mov r8, r8)
 800acec:	000006a1 	.word	0x000006a1
 800acf0:	00000fd7 	.word	0x00000fd7
 800acf4:	00000327 	.word	0x00000327
 800acf8:	00000d71 	.word	0x00000d71
 800acfc:	000008fa 	.word	0x000008fa

0800ad00 <internal_reg_read.lto_priv.640>:
 800ad00:	23c0      	movs	r3, #192	; 0xc0
 800ad02:	b513      	push	{r0, r1, r4, lr}
 800ad04:	019b      	lsls	r3, r3, #6
 800ad06:	4319      	orrs	r1, r3
 800ad08:	466b      	mov	r3, sp
 800ad0a:	0014      	movs	r4, r2
 800ad0c:	8019      	strh	r1, [r3, #0]
 800ad0e:	466a      	mov	r2, sp
 800ad10:	2300      	movs	r3, #0
 800ad12:	4669      	mov	r1, sp
 800ad14:	8053      	strh	r3, [r2, #2]
 800ad16:	8093      	strh	r3, [r2, #4]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	2203      	movs	r2, #3
 800ad1c:	f7f8 f8ea 	bl	8002ef4 <acc_rss_integration_sensor_device_transfer>
 800ad20:	466b      	mov	r3, sp
 800ad22:	889b      	ldrh	r3, [r3, #4]
 800ad24:	8023      	strh	r3, [r4, #0]
 800ad26:	bd13      	pop	{r0, r1, r4, pc}

0800ad28 <read_reg_array>:
 800ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2a:	0007      	movs	r7, r0
 800ad2c:	000d      	movs	r5, r1
 800ad2e:	001e      	movs	r6, r3
 800ad30:	3a01      	subs	r2, #1
 800ad32:	b294      	uxth	r4, r2
 800ad34:	0064      	lsls	r4, r4, #1
 800ad36:	1c8a      	adds	r2, r1, #2
 800ad38:	18a4      	adds	r4, r4, r2
 800ad3a:	8829      	ldrh	r1, [r5, #0]
 800ad3c:	0032      	movs	r2, r6
 800ad3e:	0038      	movs	r0, r7
 800ad40:	3502      	adds	r5, #2
 800ad42:	f7ff ffdd 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800ad46:	3602      	adds	r6, #2
 800ad48:	42a5      	cmp	r5, r4
 800ad4a:	d1f6      	bne.n	800ad3a <read_reg_array+0x12>
 800ad4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad4e <acc_sensor_diagnostics_r2_sensor_status>:
 800ad4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad50:	4c1a      	ldr	r4, [pc, #104]	; (800adbc <acc_sensor_diagnostics_r2_sensor_status+0x6e>)
 800ad52:	b097      	sub	sp, #92	; 0x5c
 800ad54:	0023      	movs	r3, r4
 800ad56:	3360      	adds	r3, #96	; 0x60
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	0006      	movs	r6, r0
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d904      	bls.n	800ad6a <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 800ad60:	4a17      	ldr	r2, [pc, #92]	; (800adc0 <acc_sensor_diagnostics_r2_sensor_status+0x72>)
 800ad62:	4918      	ldr	r1, [pc, #96]	; (800adc4 <acc_sensor_diagnostics_r2_sensor_status+0x76>)
 800ad64:	2002      	movs	r0, #2
 800ad66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad68:	4798      	blx	r3
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	21b2      	movs	r1, #178	; 0xb2
 800ad6e:	0030      	movs	r0, r6
 800ad70:	f7fe fa54 	bl	800921c <acc_sensor_reg_write>
 800ad74:	2300      	movs	r3, #0
 800ad76:	ad0e      	add	r5, sp, #56	; 0x38
 800ad78:	802b      	strh	r3, [r5, #0]
 800ad7a:	3364      	adds	r3, #100	; 0x64
 800ad7c:	9308      	str	r3, [sp, #32]
 800ad7e:	002a      	movs	r2, r5
 800ad80:	2111      	movs	r1, #17
 800ad82:	0030      	movs	r0, r6
 800ad84:	f7ff ffbc 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800ad88:	2280      	movs	r2, #128	; 0x80
 800ad8a:	882b      	ldrh	r3, [r5, #0]
 800ad8c:	00d2      	lsls	r2, r2, #3
 800ad8e:	4213      	tst	r3, r2
 800ad90:	d01c      	beq.n	800adcc <acc_sensor_diagnostics_r2_sensor_status+0x7e>
 800ad92:	0022      	movs	r2, r4
 800ad94:	3260      	adds	r2, #96	; 0x60
 800ad96:	7812      	ldrb	r2, [r2, #0]
 800ad98:	2a01      	cmp	r2, #1
 800ad9a:	d908      	bls.n	800adae <acc_sensor_diagnostics_r2_sensor_status+0x60>
 800ad9c:	059b      	lsls	r3, r3, #22
 800ad9e:	0d9b      	lsrs	r3, r3, #22
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	4a09      	ldr	r2, [pc, #36]	; (800adc8 <acc_sensor_diagnostics_r2_sensor_status+0x7a>)
 800ada4:	0033      	movs	r3, r6
 800ada6:	4907      	ldr	r1, [pc, #28]	; (800adc4 <acc_sensor_diagnostics_r2_sensor_status+0x76>)
 800ada8:	2002      	movs	r0, #2
 800adaa:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800adac:	47b8      	blx	r7
 800adae:	9f08      	ldr	r7, [sp, #32]
 800adb0:	3f01      	subs	r7, #1
 800adb2:	b2bb      	uxth	r3, r7
 800adb4:	9308      	str	r3, [sp, #32]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1e1      	bne.n	800ad7e <acc_sensor_diagnostics_r2_sensor_status+0x30>
 800adba:	e015      	b.n	800ade8 <acc_sensor_diagnostics_r2_sensor_status+0x9a>
 800adbc:	200003b8 	.word	0x200003b8
 800adc0:	0801cb3b 	.word	0x0801cb3b
 800adc4:	0801cb7b 	.word	0x0801cb7b
 800adc8:	0801cb8e 	.word	0x0801cb8e
 800adcc:	0022      	movs	r2, r4
 800adce:	3260      	adds	r2, #96	; 0x60
 800add0:	7812      	ldrb	r2, [r2, #0]
 800add2:	2a01      	cmp	r2, #1
 800add4:	d908      	bls.n	800ade8 <acc_sensor_diagnostics_r2_sensor_status+0x9a>
 800add6:	059b      	lsls	r3, r3, #22
 800add8:	0d9b      	lsrs	r3, r3, #22
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	4ac5      	ldr	r2, [pc, #788]	; (800b0f4 <acc_sensor_diagnostics_r2_sensor_status+0x3a6>)
 800adde:	0033      	movs	r3, r6
 800ade0:	49c5      	ldr	r1, [pc, #788]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800ade2:	2002      	movs	r0, #2
 800ade4:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800ade6:	47b8      	blx	r7
 800ade8:	2700      	movs	r7, #0
 800adea:	aa0b      	add	r2, sp, #44	; 0x2c
 800adec:	0039      	movs	r1, r7
 800adee:	0030      	movs	r0, r6
 800adf0:	8017      	strh	r7, [r2, #0]
 800adf2:	f7ff ff85 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800adf6:	2226      	movs	r2, #38	; 0x26
 800adf8:	ab02      	add	r3, sp, #8
 800adfa:	18d2      	adds	r2, r2, r3
 800adfc:	212a      	movs	r1, #42	; 0x2a
 800adfe:	0030      	movs	r0, r6
 800ae00:	8017      	strh	r7, [r2, #0]
 800ae02:	f7ff ff7d 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800ae06:	ab02      	add	r3, sp, #8
 800ae08:	aa0c      	add	r2, sp, #48	; 0x30
 800ae0a:	2128      	movs	r1, #40	; 0x28
 800ae0c:	0030      	movs	r0, r6
 800ae0e:	851f      	strh	r7, [r3, #40]	; 0x28
 800ae10:	f7ff ff76 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800ae14:	49b9      	ldr	r1, [pc, #740]	; (800b0fc <acc_sensor_diagnostics_r2_sensor_status+0x3ae>)
 800ae16:	002b      	movs	r3, r5
 800ae18:	2210      	movs	r2, #16
 800ae1a:	3158      	adds	r1, #88	; 0x58
 800ae1c:	0030      	movs	r0, r6
 800ae1e:	f7ff ff83 	bl	800ad28 <read_reg_array>
 800ae22:	0023      	movs	r3, r4
 800ae24:	3360      	adds	r3, #96	; 0x60
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d915      	bls.n	800ae58 <acc_sensor_diagnostics_r2_sensor_status+0x10a>
 800ae2c:	89eb      	ldrh	r3, [r5, #14]
 800ae2e:	4ab4      	ldr	r2, [pc, #720]	; (800b100 <acc_sensor_diagnostics_r2_sensor_status+0x3b2>)
 800ae30:	9307      	str	r3, [sp, #28]
 800ae32:	89ab      	ldrh	r3, [r5, #12]
 800ae34:	49b0      	ldr	r1, [pc, #704]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800ae36:	9306      	str	r3, [sp, #24]
 800ae38:	896b      	ldrh	r3, [r5, #10]
 800ae3a:	2002      	movs	r0, #2
 800ae3c:	9305      	str	r3, [sp, #20]
 800ae3e:	892b      	ldrh	r3, [r5, #8]
 800ae40:	9304      	str	r3, [sp, #16]
 800ae42:	88eb      	ldrh	r3, [r5, #6]
 800ae44:	9303      	str	r3, [sp, #12]
 800ae46:	88ab      	ldrh	r3, [r5, #4]
 800ae48:	9302      	str	r3, [sp, #8]
 800ae4a:	886b      	ldrh	r3, [r5, #2]
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	882b      	ldrh	r3, [r5, #0]
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800ae54:	0033      	movs	r3, r6
 800ae56:	47b8      	blx	r7
 800ae58:	0023      	movs	r3, r4
 800ae5a:	3360      	adds	r3, #96	; 0x60
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d915      	bls.n	800ae8e <acc_sensor_diagnostics_r2_sensor_status+0x140>
 800ae62:	8beb      	ldrh	r3, [r5, #30]
 800ae64:	4aa7      	ldr	r2, [pc, #668]	; (800b104 <acc_sensor_diagnostics_r2_sensor_status+0x3b6>)
 800ae66:	9307      	str	r3, [sp, #28]
 800ae68:	8bab      	ldrh	r3, [r5, #28]
 800ae6a:	49a3      	ldr	r1, [pc, #652]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800ae6c:	9306      	str	r3, [sp, #24]
 800ae6e:	8b6b      	ldrh	r3, [r5, #26]
 800ae70:	2002      	movs	r0, #2
 800ae72:	9305      	str	r3, [sp, #20]
 800ae74:	8b2b      	ldrh	r3, [r5, #24]
 800ae76:	9304      	str	r3, [sp, #16]
 800ae78:	8aeb      	ldrh	r3, [r5, #22]
 800ae7a:	9303      	str	r3, [sp, #12]
 800ae7c:	8aab      	ldrh	r3, [r5, #20]
 800ae7e:	9302      	str	r3, [sp, #8]
 800ae80:	8a6b      	ldrh	r3, [r5, #18]
 800ae82:	9301      	str	r3, [sp, #4]
 800ae84:	8a2b      	ldrh	r3, [r5, #16]
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800ae8a:	0033      	movs	r3, r6
 800ae8c:	47b8      	blx	r7
 800ae8e:	499b      	ldr	r1, [pc, #620]	; (800b0fc <acc_sensor_diagnostics_r2_sensor_status+0x3ae>)
 800ae90:	002b      	movs	r3, r5
 800ae92:	2204      	movs	r2, #4
 800ae94:	3178      	adds	r1, #120	; 0x78
 800ae96:	0030      	movs	r0, r6
 800ae98:	f7ff ff46 	bl	800ad28 <read_reg_array>
 800ae9c:	0023      	movs	r3, r4
 800ae9e:	3360      	adds	r3, #96	; 0x60
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d90d      	bls.n	800aec2 <acc_sensor_diagnostics_r2_sensor_status+0x174>
 800aea6:	88eb      	ldrh	r3, [r5, #6]
 800aea8:	4a97      	ldr	r2, [pc, #604]	; (800b108 <acc_sensor_diagnostics_r2_sensor_status+0x3ba>)
 800aeaa:	9303      	str	r3, [sp, #12]
 800aeac:	88ab      	ldrh	r3, [r5, #4]
 800aeae:	4992      	ldr	r1, [pc, #584]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800aeb0:	9302      	str	r3, [sp, #8]
 800aeb2:	886b      	ldrh	r3, [r5, #2]
 800aeb4:	2002      	movs	r0, #2
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	882b      	ldrh	r3, [r5, #0]
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800aebe:	0033      	movs	r3, r6
 800aec0:	47b8      	blx	r7
 800aec2:	222a      	movs	r2, #42	; 0x2a
 800aec4:	2700      	movs	r7, #0
 800aec6:	ab02      	add	r3, sp, #8
 800aec8:	18d2      	adds	r2, r2, r3
 800aeca:	2153      	movs	r1, #83	; 0x53
 800aecc:	0030      	movs	r0, r6
 800aece:	8017      	strh	r7, [r2, #0]
 800aed0:	f7ff ff16 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800aed4:	002a      	movs	r2, r5
 800aed6:	2140      	movs	r1, #64	; 0x40
 800aed8:	0030      	movs	r0, r6
 800aeda:	802f      	strh	r7, [r5, #0]
 800aedc:	f7ff ff10 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800aee0:	0023      	movs	r3, r4
 800aee2:	3360      	adds	r3, #96	; 0x60
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d907      	bls.n	800aefa <acc_sensor_diagnostics_r2_sensor_status+0x1ac>
 800aeea:	882b      	ldrh	r3, [r5, #0]
 800aeec:	4a87      	ldr	r2, [pc, #540]	; (800b10c <acc_sensor_diagnostics_r2_sensor_status+0x3be>)
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	4981      	ldr	r1, [pc, #516]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800aef2:	0033      	movs	r3, r6
 800aef4:	2002      	movs	r0, #2
 800aef6:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800aef8:	47b8      	blx	r7
 800aefa:	0023      	movs	r3, r4
 800aefc:	3360      	adds	r3, #96	; 0x60
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d90c      	bls.n	800af1e <acc_sensor_diagnostics_r2_sensor_status+0x1d0>
 800af04:	2240      	movs	r2, #64	; 0x40
 800af06:	882b      	ldrh	r3, [r5, #0]
 800af08:	497b      	ldr	r1, [pc, #492]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800af0a:	401a      	ands	r2, r3
 800af0c:	9201      	str	r2, [sp, #4]
 800af0e:	2280      	movs	r2, #128	; 0x80
 800af10:	4013      	ands	r3, r2
 800af12:	9300      	str	r3, [sp, #0]
 800af14:	4a7e      	ldr	r2, [pc, #504]	; (800b110 <acc_sensor_diagnostics_r2_sensor_status+0x3c2>)
 800af16:	0033      	movs	r3, r6
 800af18:	2002      	movs	r0, #2
 800af1a:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800af1c:	47b8      	blx	r7
 800af1e:	0023      	movs	r3, r4
 800af20:	3360      	adds	r3, #96	; 0x60
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d90c      	bls.n	800af42 <acc_sensor_diagnostics_r2_sensor_status+0x1f4>
 800af28:	2210      	movs	r2, #16
 800af2a:	882b      	ldrh	r3, [r5, #0]
 800af2c:	4972      	ldr	r1, [pc, #456]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800af2e:	401a      	ands	r2, r3
 800af30:	9201      	str	r2, [sp, #4]
 800af32:	2220      	movs	r2, #32
 800af34:	4013      	ands	r3, r2
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	4a76      	ldr	r2, [pc, #472]	; (800b114 <acc_sensor_diagnostics_r2_sensor_status+0x3c6>)
 800af3a:	0033      	movs	r3, r6
 800af3c:	2002      	movs	r0, #2
 800af3e:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800af40:	47b8      	blx	r7
 800af42:	0023      	movs	r3, r4
 800af44:	3360      	adds	r3, #96	; 0x60
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d90c      	bls.n	800af66 <acc_sensor_diagnostics_r2_sensor_status+0x218>
 800af4c:	2204      	movs	r2, #4
 800af4e:	882b      	ldrh	r3, [r5, #0]
 800af50:	4969      	ldr	r1, [pc, #420]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800af52:	401a      	ands	r2, r3
 800af54:	9201      	str	r2, [sp, #4]
 800af56:	2208      	movs	r2, #8
 800af58:	4013      	ands	r3, r2
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	4a6e      	ldr	r2, [pc, #440]	; (800b118 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800af5e:	0033      	movs	r3, r6
 800af60:	2002      	movs	r0, #2
 800af62:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800af64:	47b8      	blx	r7
 800af66:	002b      	movs	r3, r5
 800af68:	2210      	movs	r2, #16
 800af6a:	496c      	ldr	r1, [pc, #432]	; (800b11c <acc_sensor_diagnostics_r2_sensor_status+0x3ce>)
 800af6c:	0030      	movs	r0, r6
 800af6e:	f7ff fedb 	bl	800ad28 <read_reg_array>
 800af72:	0023      	movs	r3, r4
 800af74:	2200      	movs	r2, #0
 800af76:	3360      	adds	r3, #96	; 0x60
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	9208      	str	r2, [sp, #32]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d909      	bls.n	800af94 <acc_sensor_diagnostics_r2_sensor_status+0x246>
 800af80:	882b      	ldrh	r3, [r5, #0]
 800af82:	4a67      	ldr	r2, [pc, #412]	; (800b120 <acc_sensor_diagnostics_r2_sensor_status+0x3d2>)
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	495c      	ldr	r1, [pc, #368]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800af88:	0033      	movs	r3, r6
 800af8a:	2002      	movs	r0, #2
 800af8c:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800af8e:	47b8      	blx	r7
 800af90:	2301      	movs	r3, #1
 800af92:	9308      	str	r3, [sp, #32]
 800af94:	0023      	movs	r3, r4
 800af96:	3360      	adds	r3, #96	; 0x60
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d90f      	bls.n	800afbe <acc_sensor_diagnostics_r2_sensor_status+0x270>
 800af9e:	9b08      	ldr	r3, [sp, #32]
 800afa0:	4a60      	ldr	r2, [pc, #384]	; (800b124 <acc_sensor_diagnostics_r2_sensor_status+0x3d6>)
 800afa2:	3301      	adds	r3, #1
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	9309      	str	r3, [sp, #36]	; 0x24
 800afa8:	9b08      	ldr	r3, [sp, #32]
 800afaa:	4953      	ldr	r1, [pc, #332]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800afac:	005f      	lsls	r7, r3, #1
 800afae:	5beb      	ldrh	r3, [r5, r7]
 800afb0:	2002      	movs	r0, #2
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800afb6:	0033      	movs	r3, r6
 800afb8:	47b8      	blx	r7
 800afba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afbc:	9308      	str	r3, [sp, #32]
 800afbe:	2301      	movs	r3, #1
 800afc0:	9309      	str	r3, [sp, #36]	; 0x24
 800afc2:	0023      	movs	r3, r4
 800afc4:	3360      	adds	r3, #96	; 0x60
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d911      	bls.n	800aff0 <acc_sensor_diagnostics_r2_sensor_status+0x2a2>
 800afcc:	9b08      	ldr	r3, [sp, #32]
 800afce:	aa0e      	add	r2, sp, #56	; 0x38
 800afd0:	3301      	adds	r3, #1
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	5a9b      	ldrh	r3, [r3, r2]
 800afd6:	4948      	ldr	r1, [pc, #288]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800afd8:	9302      	str	r3, [sp, #8]
 800afda:	9b08      	ldr	r3, [sp, #32]
 800afdc:	2002      	movs	r0, #2
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	5a9b      	ldrh	r3, [r3, r2]
 800afe2:	4a51      	ldr	r2, [pc, #324]	; (800b128 <acc_sensor_diagnostics_r2_sensor_status+0x3da>)
 800afe4:	9301      	str	r3, [sp, #4]
 800afe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800afec:	0033      	movs	r3, r6
 800afee:	47b8      	blx	r7
 800aff0:	9f08      	ldr	r7, [sp, #32]
 800aff2:	3702      	adds	r7, #2
 800aff4:	b2fb      	uxtb	r3, r7
 800aff6:	9308      	str	r3, [sp, #32]
 800aff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affa:	3301      	adds	r3, #1
 800affc:	9309      	str	r3, [sp, #36]	; 0x24
 800affe:	2b08      	cmp	r3, #8
 800b000:	d1df      	bne.n	800afc2 <acc_sensor_diagnostics_r2_sensor_status+0x274>
 800b002:	2700      	movs	r7, #0
 800b004:	ab02      	add	r3, sp, #8
 800b006:	aa0d      	add	r2, sp, #52	; 0x34
 800b008:	219d      	movs	r1, #157	; 0x9d
 800b00a:	0030      	movs	r0, r6
 800b00c:	859f      	strh	r7, [r3, #44]	; 0x2c
 800b00e:	f7ff fe77 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800b012:	222e      	movs	r2, #46	; 0x2e
 800b014:	ab02      	add	r3, sp, #8
 800b016:	18d2      	adds	r2, r2, r3
 800b018:	2199      	movs	r1, #153	; 0x99
 800b01a:	0030      	movs	r0, r6
 800b01c:	8017      	strh	r7, [r2, #0]
 800b01e:	f7ff fe6f 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800b022:	002a      	movs	r2, r5
 800b024:	2196      	movs	r1, #150	; 0x96
 800b026:	0030      	movs	r0, r6
 800b028:	802f      	strh	r7, [r5, #0]
 800b02a:	f7ff fe69 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800b02e:	003a      	movs	r2, r7
 800b030:	21b2      	movs	r1, #178	; 0xb2
 800b032:	0030      	movs	r0, r6
 800b034:	f7fe f8f2 	bl	800921c <acc_sensor_reg_write>
 800b038:	0023      	movs	r3, r4
 800b03a:	3360      	adds	r3, #96	; 0x60
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d910      	bls.n	800b064 <acc_sensor_diagnostics_r2_sensor_status+0x316>
 800b042:	ab02      	add	r3, sp, #8
 800b044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b046:	aa02      	add	r2, sp, #8
 800b048:	9302      	str	r3, [sp, #8]
 800b04a:	2326      	movs	r3, #38	; 0x26
 800b04c:	189b      	adds	r3, r3, r2
 800b04e:	881b      	ldrh	r3, [r3, #0]
 800b050:	4a36      	ldr	r2, [pc, #216]	; (800b12c <acc_sensor_diagnostics_r2_sensor_status+0x3de>)
 800b052:	9301      	str	r3, [sp, #4]
 800b054:	ab0b      	add	r3, sp, #44	; 0x2c
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	4927      	ldr	r1, [pc, #156]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	2002      	movs	r0, #2
 800b05e:	0033      	movs	r3, r6
 800b060:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b062:	47a8      	blx	r5
 800b064:	0023      	movs	r3, r4
 800b066:	3360      	adds	r3, #96	; 0x60
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d90a      	bls.n	800b084 <acc_sensor_diagnostics_r2_sensor_status+0x336>
 800b06e:	232a      	movs	r3, #42	; 0x2a
 800b070:	aa02      	add	r2, sp, #8
 800b072:	189b      	adds	r3, r3, r2
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	4a2e      	ldr	r2, [pc, #184]	; (800b130 <acc_sensor_diagnostics_r2_sensor_status+0x3e2>)
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	491f      	ldr	r1, [pc, #124]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800b07c:	0033      	movs	r3, r6
 800b07e:	2002      	movs	r0, #2
 800b080:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b082:	47a8      	blx	r5
 800b084:	0023      	movs	r3, r4
 800b086:	3360      	adds	r3, #96	; 0x60
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d908      	bls.n	800b0a0 <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800b08e:	ab02      	add	r3, sp, #8
 800b090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b092:	4a28      	ldr	r2, [pc, #160]	; (800b134 <acc_sensor_diagnostics_r2_sensor_status+0x3e6>)
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	4918      	ldr	r1, [pc, #96]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800b098:	0033      	movs	r3, r6
 800b09a:	2002      	movs	r0, #2
 800b09c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b09e:	47a8      	blx	r5
 800b0a0:	0023      	movs	r3, r4
 800b0a2:	3360      	adds	r3, #96	; 0x60
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d90a      	bls.n	800b0c0 <acc_sensor_diagnostics_r2_sensor_status+0x372>
 800b0aa:	232e      	movs	r3, #46	; 0x2e
 800b0ac:	aa02      	add	r2, sp, #8
 800b0ae:	189b      	adds	r3, r3, r2
 800b0b0:	881b      	ldrh	r3, [r3, #0]
 800b0b2:	4a21      	ldr	r2, [pc, #132]	; (800b138 <acc_sensor_diagnostics_r2_sensor_status+0x3ea>)
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	4910      	ldr	r1, [pc, #64]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800b0b8:	0033      	movs	r3, r6
 800b0ba:	2002      	movs	r0, #2
 800b0bc:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b0be:	47a8      	blx	r5
 800b0c0:	0023      	movs	r3, r4
 800b0c2:	3360      	adds	r3, #96	; 0x60
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d908      	bls.n	800b0dc <acc_sensor_diagnostics_r2_sensor_status+0x38e>
 800b0ca:	ab0e      	add	r3, sp, #56	; 0x38
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	4a1b      	ldr	r2, [pc, #108]	; (800b13c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	4909      	ldr	r1, [pc, #36]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800b0d4:	0033      	movs	r3, r6
 800b0d6:	2002      	movs	r0, #2
 800b0d8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b0da:	47a8      	blx	r5
 800b0dc:	0023      	movs	r3, r4
 800b0de:	3360      	adds	r3, #96	; 0x60
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d904      	bls.n	800b0f0 <acc_sensor_diagnostics_r2_sensor_status+0x3a2>
 800b0e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0e8:	4a15      	ldr	r2, [pc, #84]	; (800b140 <acc_sensor_diagnostics_r2_sensor_status+0x3f2>)
 800b0ea:	4903      	ldr	r1, [pc, #12]	; (800b0f8 <acc_sensor_diagnostics_r2_sensor_status+0x3aa>)
 800b0ec:	2002      	movs	r0, #2
 800b0ee:	4798      	blx	r3
 800b0f0:	b017      	add	sp, #92	; 0x5c
 800b0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0f4:	0801cbab 	.word	0x0801cbab
 800b0f8:	0801cb7b 	.word	0x0801cb7b
 800b0fc:	08017f5c 	.word	0x08017f5c
 800b100:	0801cbc8 	.word	0x0801cbc8
 800b104:	0801cc0f 	.word	0x0801cc0f
 800b108:	0801cc58 	.word	0x0801cc58
 800b10c:	0801cc89 	.word	0x0801cc89
 800b110:	0801cca6 	.word	0x0801cca6
 800b114:	0801ccd2 	.word	0x0801ccd2
 800b118:	0801cd03 	.word	0x0801cd03
 800b11c:	08017fdc 	.word	0x08017fdc
 800b120:	0801cd33 	.word	0x0801cd33
 800b124:	0801cd5a 	.word	0x0801cd5a
 800b128:	0801cd78 	.word	0x0801cd78
 800b12c:	0801cda0 	.word	0x0801cda0
 800b130:	0801cdf1 	.word	0x0801cdf1
 800b134:	0801ce14 	.word	0x0801ce14
 800b138:	0801ce30 	.word	0x0801ce30
 800b13c:	0801ce46 	.word	0x0801ce46
 800b140:	0801ce60 	.word	0x0801ce60

0800b144 <acc_sensor_protocol_r2_wait_for_event.constprop.27>:
 800b144:	2365      	movs	r3, #101	; 0x65
 800b146:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b148:	0004      	movs	r4, r0
 800b14a:	b089      	sub	sp, #36	; 0x24
 800b14c:	9105      	str	r1, [sp, #20]
 800b14e:	9204      	str	r2, [sp, #16]
 800b150:	9303      	str	r3, [sp, #12]
 800b152:	4e45      	ldr	r6, [pc, #276]	; (800b268 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x124>)
 800b154:	9905      	ldr	r1, [sp, #20]
 800b156:	0020      	movs	r0, r4
 800b158:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800b15a:	4798      	blx	r3
 800b15c:	1e05      	subs	r5, r0, #0
 800b15e:	d10a      	bne.n	800b176 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x32>
 800b160:	6e76      	ldr	r6, [r6, #100]	; 0x64
 800b162:	0023      	movs	r3, r4
 800b164:	4a41      	ldr	r2, [pc, #260]	; (800b26c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x128>)
 800b166:	4942      	ldr	r1, [pc, #264]	; (800b270 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x12c>)
 800b168:	47b0      	blx	r6
 800b16a:	0020      	movs	r0, r4
 800b16c:	f7ff fdef 	bl	800ad4e <acc_sensor_diagnostics_r2_sensor_status>
 800b170:	0028      	movs	r0, r5
 800b172:	b009      	add	sp, #36	; 0x24
 800b174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b176:	270e      	movs	r7, #14
 800b178:	ab04      	add	r3, sp, #16
 800b17a:	18ff      	adds	r7, r7, r3
 800b17c:	2300      	movs	r3, #0
 800b17e:	003a      	movs	r2, r7
 800b180:	212a      	movs	r1, #42	; 0x2a
 800b182:	0020      	movs	r0, r4
 800b184:	803b      	strh	r3, [r7, #0]
 800b186:	f7ff fdbb 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800b18a:	2240      	movs	r2, #64	; 0x40
 800b18c:	883b      	ldrh	r3, [r7, #0]
 800b18e:	4213      	tst	r3, r2
 800b190:	d04e      	beq.n	800b230 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xec>
 800b192:	003a      	movs	r2, r7
 800b194:	2128      	movs	r1, #40	; 0x28
 800b196:	0020      	movs	r0, r4
 800b198:	f7ff fdb2 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800b19c:	883a      	ldrh	r2, [r7, #0]
 800b19e:	9904      	ldr	r1, [sp, #16]
 800b1a0:	b2d3      	uxtb	r3, r2
 800b1a2:	700b      	strb	r3, [r1, #0]
 800b1a4:	804a      	strh	r2, [r1, #2]
 800b1a6:	2b0b      	cmp	r3, #11
 800b1a8:	d838      	bhi.n	800b21c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xd8>
 800b1aa:	0018      	movs	r0, r3
 800b1ac:	f001 fe18 	bl	800cde0 <__gnu_thumb1_case_sqi>
 800b1b0:	e0e01906 	.word	0xe0e01906
 800b1b4:	e0e0e0e0 	.word	0xe0e0e0e0
 800b1b8:	e0e0e0e0 	.word	0xe0e0e0e0
 800b1bc:	4b2a      	ldr	r3, [pc, #168]	; (800b268 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x124>)
 800b1be:	4a2d      	ldr	r2, [pc, #180]	; (800b274 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x130>)
 800b1c0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800b1c2:	0023      	movs	r3, r4
 800b1c4:	492a      	ldr	r1, [pc, #168]	; (800b270 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x12c>)
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	47a8      	blx	r5
 800b1ca:	0020      	movs	r0, r4
 800b1cc:	f7ff fdbf 	bl	800ad4e <acc_sensor_diagnostics_r2_sensor_status>
 800b1d0:	4b25      	ldr	r3, [pc, #148]	; (800b268 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x124>)
 800b1d2:	4a29      	ldr	r2, [pc, #164]	; (800b278 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x134>)
 800b1d4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800b1d6:	4926      	ldr	r1, [pc, #152]	; (800b270 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x12c>)
 800b1d8:	0023      	movs	r3, r4
 800b1da:	2000      	movs	r0, #0
 800b1dc:	47a8      	blx	r5
 800b1de:	2500      	movs	r5, #0
 800b1e0:	e7c6      	b.n	800b170 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x2c>
 800b1e2:	0a11      	lsrs	r1, r2, #8
 800b1e4:	2910      	cmp	r1, #16
 800b1e6:	d804      	bhi.n	800b1f2 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xae>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	408b      	lsls	r3, r1
 800b1ec:	4923      	ldr	r1, [pc, #140]	; (800b27c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x138>)
 800b1ee:	420b      	tst	r3, r1
 800b1f0:	d105      	bne.n	800b1fe <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xba>
 800b1f2:	2384      	movs	r3, #132	; 0x84
 800b1f4:	b2d2      	uxtb	r2, r2
 800b1f6:	019b      	lsls	r3, r3, #6
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	9b04      	ldr	r3, [sp, #16]
 800b1fc:	805a      	strh	r2, [r3, #2]
 800b1fe:	4b1a      	ldr	r3, [pc, #104]	; (800b268 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x124>)
 800b200:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800b202:	9b04      	ldr	r3, [sp, #16]
 800b204:	885a      	ldrh	r2, [r3, #2]
 800b206:	4b1e      	ldr	r3, [pc, #120]	; (800b280 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800b208:	0a12      	lsrs	r2, r2, #8
 800b20a:	3a01      	subs	r2, #1
 800b20c:	b2d2      	uxtb	r2, r2
 800b20e:	2a20      	cmp	r2, #32
 800b210:	d802      	bhi.n	800b218 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xd4>
 800b212:	4b1c      	ldr	r3, [pc, #112]	; (800b284 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x140>)
 800b214:	0092      	lsls	r2, r2, #2
 800b216:	58d3      	ldr	r3, [r2, r3]
 800b218:	4a1b      	ldr	r2, [pc, #108]	; (800b288 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x144>)
 800b21a:	e7d3      	b.n	800b1c4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x80>
 800b21c:	9400      	str	r4, [sp, #0]
 800b21e:	4a1b      	ldr	r2, [pc, #108]	; (800b28c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x148>)
 800b220:	6e75      	ldr	r5, [r6, #100]	; 0x64
 800b222:	4913      	ldr	r1, [pc, #76]	; (800b270 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x12c>)
 800b224:	2000      	movs	r0, #0
 800b226:	47a8      	blx	r5
 800b228:	2200      	movs	r2, #0
 800b22a:	9b04      	ldr	r3, [sp, #16]
 800b22c:	701a      	strb	r2, [r3, #0]
 800b22e:	e7cc      	b.n	800b1ca <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x86>
 800b230:	0033      	movs	r3, r6
 800b232:	3360      	adds	r3, #96	; 0x60
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d005      	beq.n	800b246 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x102>
 800b23a:	6e75      	ldr	r5, [r6, #100]	; 0x64
 800b23c:	0023      	movs	r3, r4
 800b23e:	4a14      	ldr	r2, [pc, #80]	; (800b290 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x14c>)
 800b240:	490b      	ldr	r1, [pc, #44]	; (800b270 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x12c>)
 800b242:	2001      	movs	r0, #1
 800b244:	47a8      	blx	r5
 800b246:	9b03      	ldr	r3, [sp, #12]
 800b248:	3b01      	subs	r3, #1
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	9303      	str	r3, [sp, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d000      	beq.n	800b254 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x110>
 800b252:	e77e      	b.n	800b152 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xe>
 800b254:	4b04      	ldr	r3, [pc, #16]	; (800b268 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x124>)
 800b256:	9400      	str	r4, [sp, #0]
 800b258:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800b25a:	4a0e      	ldr	r2, [pc, #56]	; (800b294 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x150>)
 800b25c:	2364      	movs	r3, #100	; 0x64
 800b25e:	4904      	ldr	r1, [pc, #16]	; (800b270 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x12c>)
 800b260:	9803      	ldr	r0, [sp, #12]
 800b262:	47a0      	blx	r4
 800b264:	9d03      	ldr	r5, [sp, #12]
 800b266:	e783      	b.n	800b170 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x2c>
 800b268:	200003b8 	.word	0x200003b8
 800b26c:	0801ceae 	.word	0x0801ceae
 800b270:	0801af61 	.word	0x0801af61
 800b274:	0801ced6 	.word	0x0801ced6
 800b278:	0801cf48 	.word	0x0801cf48
 800b27c:	00010016 	.word	0x00010016
 800b280:	0801cea0 	.word	0x0801cea0
 800b284:	08019078 	.word	0x08019078
 800b288:	0801cef9 	.word	0x0801cef9
 800b28c:	0801cf19 	.word	0x0801cf19
 800b290:	0801cf70 	.word	0x0801cf70
 800b294:	0801cf91 	.word	0x0801cf91

0800b298 <acc_sensor_protocol_r2_stop.constprop.25>:
 800b298:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b29a:	0005      	movs	r5, r0
 800b29c:	f7f7 fca6 	bl	8002bec <acc_sensor_protocol_r2_is_sensor_running>
 800b2a0:	1e04      	subs	r4, r0, #0
 800b2a2:	d109      	bne.n	800b2b8 <acc_sensor_protocol_r2_stop.constprop.25+0x20>
 800b2a4:	4b1a      	ldr	r3, [pc, #104]	; (800b310 <acc_sensor_protocol_r2_stop.constprop.25+0x78>)
 800b2a6:	4a1b      	ldr	r2, [pc, #108]	; (800b314 <acc_sensor_protocol_r2_stop.constprop.25+0x7c>)
 800b2a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2aa:	491b      	ldr	r1, [pc, #108]	; (800b318 <acc_sensor_protocol_r2_stop.constprop.25+0x80>)
 800b2ac:	4798      	blx	r3
 800b2ae:	0028      	movs	r0, r5
 800b2b0:	f7ff fd4d 	bl	800ad4e <acc_sensor_diagnostics_r2_sensor_status>
 800b2b4:	0020      	movs	r0, r4
 800b2b6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800b2b8:	4b18      	ldr	r3, [pc, #96]	; (800b31c <acc_sensor_protocol_r2_stop.constprop.25+0x84>)
 800b2ba:	ae01      	add	r6, sp, #4
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	2202      	movs	r2, #2
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	0031      	movs	r1, r6
 800b2c4:	0028      	movs	r0, r5
 800b2c6:	f7f7 fe15 	bl	8002ef4 <acc_rss_integration_sensor_device_transfer>
 800b2ca:	0028      	movs	r0, r5
 800b2cc:	f7f6 f924 	bl	8001518 <acc_sensor_protocol_r2_ack_event>
 800b2d0:	1e04      	subs	r4, r0, #0
 800b2d2:	d0ef      	beq.n	800b2b4 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800b2d4:	21fa      	movs	r1, #250	; 0xfa
 800b2d6:	0032      	movs	r2, r6
 800b2d8:	00c9      	lsls	r1, r1, #3
 800b2da:	0028      	movs	r0, r5
 800b2dc:	f7ff ff32 	bl	800b144 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d101      	bne.n	800b2e8 <acc_sensor_protocol_r2_stop.constprop.25+0x50>
 800b2e4:	2400      	movs	r4, #0
 800b2e6:	e7e5      	b.n	800b2b4 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800b2e8:	0028      	movs	r0, r5
 800b2ea:	f7f6 f915 	bl	8001518 <acc_sensor_protocol_r2_ack_event>
 800b2ee:	1e04      	subs	r4, r0, #0
 800b2f0:	d0f8      	beq.n	800b2e4 <acc_sensor_protocol_r2_stop.constprop.25+0x4c>
 800b2f2:	7833      	ldrb	r3, [r6, #0]
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d0dd      	beq.n	800b2b4 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800b2f8:	4a05      	ldr	r2, [pc, #20]	; (800b310 <acc_sensor_protocol_r2_stop.constprop.25+0x78>)
 800b2fa:	8873      	ldrh	r3, [r6, #2]
 800b2fc:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800b2fe:	4906      	ldr	r1, [pc, #24]	; (800b318 <acc_sensor_protocol_r2_stop.constprop.25+0x80>)
 800b300:	4a07      	ldr	r2, [pc, #28]	; (800b320 <acc_sensor_protocol_r2_stop.constprop.25+0x88>)
 800b302:	2000      	movs	r0, #0
 800b304:	47a0      	blx	r4
 800b306:	0028      	movs	r0, r5
 800b308:	f7ff fd21 	bl	800ad4e <acc_sensor_diagnostics_r2_sensor_status>
 800b30c:	e7ea      	b.n	800b2e4 <acc_sensor_protocol_r2_stop.constprop.25+0x4c>
 800b30e:	46c0      	nop			; (mov r8, r8)
 800b310:	200003b8 	.word	0x200003b8
 800b314:	0801cfca 	.word	0x0801cfca
 800b318:	0801af61 	.word	0x0801af61
 800b31c:	00011074 	.word	0x00011074
 800b320:	0801cffc 	.word	0x0801cffc

0800b324 <acc_sensor_protocol_r2_prepare_load.constprop.21>:
 800b324:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b326:	b085      	sub	sp, #20
 800b328:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b32a:	0852      	lsrs	r2, r2, #1
 800b32c:	4e35      	ldr	r6, [pc, #212]	; (800b404 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xe0>)
 800b32e:	602a      	str	r2, [r5, #0]
 800b330:	0004      	movs	r4, r0
 800b332:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800b334:	0840      	lsrs	r0, r0, #1
 800b336:	4290      	cmp	r0, r2
 800b338:	d900      	bls.n	800b33c <acc_sensor_protocol_r2_prepare_load.constprop.21+0x18>
 800b33a:	0010      	movs	r0, r2
 800b33c:	2701      	movs	r7, #1
 800b33e:	3102      	adds	r1, #2
 800b340:	6019      	str	r1, [r3, #0]
 800b342:	2300      	movs	r3, #0
 800b344:	3801      	subs	r0, #1
 800b346:	43b8      	bics	r0, r7
 800b348:	6028      	str	r0, [r5, #0]
 800b34a:	ad03      	add	r5, sp, #12
 800b34c:	002a      	movs	r2, r5
 800b34e:	212a      	movs	r1, #42	; 0x2a
 800b350:	0020      	movs	r0, r4
 800b352:	802b      	strh	r3, [r5, #0]
 800b354:	f7ff fcd4 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800b358:	882b      	ldrh	r3, [r5, #0]
 800b35a:	065b      	lsls	r3, r3, #25
 800b35c:	d50d      	bpl.n	800b37a <acc_sensor_protocol_r2_prepare_load.constprop.21+0x56>
 800b35e:	0033      	movs	r3, r6
 800b360:	3360      	adds	r3, #96	; 0x60
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d005      	beq.n	800b374 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x50>
 800b368:	0038      	movs	r0, r7
 800b36a:	0023      	movs	r3, r4
 800b36c:	4a26      	ldr	r2, [pc, #152]	; (800b408 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xe4>)
 800b36e:	4927      	ldr	r1, [pc, #156]	; (800b40c <acc_sensor_protocol_r2_prepare_load.constprop.21+0xe8>)
 800b370:	6e77      	ldr	r7, [r6, #100]	; 0x64
 800b372:	47b8      	blx	r7
 800b374:	0020      	movs	r0, r4
 800b376:	f7ff fcea 	bl	800ad4e <acc_sensor_diagnostics_r2_sensor_status>
 800b37a:	0020      	movs	r0, r4
 800b37c:	f7f7 fc36 	bl	8002bec <acc_sensor_protocol_r2_is_sensor_running>
 800b380:	9001      	str	r0, [sp, #4]
 800b382:	2800      	cmp	r0, #0
 800b384:	d00b      	beq.n	800b39e <acc_sensor_protocol_r2_prepare_load.constprop.21+0x7a>
 800b386:	0023      	movs	r3, r4
 800b388:	4a21      	ldr	r2, [pc, #132]	; (800b410 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xec>)
 800b38a:	4920      	ldr	r1, [pc, #128]	; (800b40c <acc_sensor_protocol_r2_prepare_load.constprop.21+0xe8>)
 800b38c:	2000      	movs	r0, #0
 800b38e:	6e75      	ldr	r5, [r6, #100]	; 0x64
 800b390:	47a8      	blx	r5
 800b392:	0020      	movs	r0, r4
 800b394:	f7ff fcdb 	bl	800ad4e <acc_sensor_diagnostics_r2_sensor_status>
 800b398:	2000      	movs	r0, #0
 800b39a:	b005      	add	sp, #20
 800b39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b39e:	ab02      	add	r3, sp, #8
 800b3a0:	1c9f      	adds	r7, r3, #2
 800b3a2:	2602      	movs	r6, #2
 800b3a4:	003a      	movs	r2, r7
 800b3a6:	2180      	movs	r1, #128	; 0x80
 800b3a8:	0020      	movs	r0, r4
 800b3aa:	f7ff fca9 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800b3ae:	2284      	movs	r2, #132	; 0x84
 800b3b0:	883b      	ldrh	r3, [r7, #0]
 800b3b2:	0152      	lsls	r2, r2, #5
 800b3b4:	43b3      	bics	r3, r6
 800b3b6:	4333      	orrs	r3, r6
 800b3b8:	802a      	strh	r2, [r5, #0]
 800b3ba:	806b      	strh	r3, [r5, #2]
 800b3bc:	0032      	movs	r2, r6
 800b3be:	9b01      	ldr	r3, [sp, #4]
 800b3c0:	0029      	movs	r1, r5
 800b3c2:	0020      	movs	r0, r4
 800b3c4:	f7f7 fd96 	bl	8002ef4 <acc_rss_integration_sensor_device_transfer>
 800b3c8:	003a      	movs	r2, r7
 800b3ca:	2180      	movs	r1, #128	; 0x80
 800b3cc:	0020      	movs	r0, r4
 800b3ce:	f7ff fc97 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800b3d2:	2280      	movs	r2, #128	; 0x80
 800b3d4:	883b      	ldrh	r3, [r7, #0]
 800b3d6:	0029      	movs	r1, r5
 800b3d8:	4393      	bics	r3, r2
 800b3da:	2284      	movs	r2, #132	; 0x84
 800b3dc:	0152      	lsls	r2, r2, #5
 800b3de:	802a      	strh	r2, [r5, #0]
 800b3e0:	806b      	strh	r3, [r5, #2]
 800b3e2:	0032      	movs	r2, r6
 800b3e4:	9b01      	ldr	r3, [sp, #4]
 800b3e6:	0020      	movs	r0, r4
 800b3e8:	f7f7 fd84 	bl	8002ef4 <acc_rss_integration_sensor_device_transfer>
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	2105      	movs	r1, #5
 800b3f0:	0020      	movs	r0, r4
 800b3f2:	f7fd ff13 	bl	800921c <acc_sensor_reg_write>
 800b3f6:	0020      	movs	r0, r4
 800b3f8:	2203      	movs	r2, #3
 800b3fa:	217a      	movs	r1, #122	; 0x7a
 800b3fc:	f7fd ff0e 	bl	800921c <acc_sensor_reg_write>
 800b400:	2001      	movs	r0, #1
 800b402:	e7ca      	b.n	800b39a <acc_sensor_protocol_r2_prepare_load.constprop.21+0x76>
 800b404:	200003b8 	.word	0x200003b8
 800b408:	0801d01c 	.word	0x0801d01c
 800b40c:	0801af61 	.word	0x0801af61
 800b410:	0801d048 	.word	0x0801d048

0800b414 <acc_cpd_linear_sweep_get_info>:
 800b414:	30ad      	adds	r0, #173	; 0xad
 800b416:	7803      	ldrb	r3, [r0, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00a      	beq.n	800b432 <acc_cpd_linear_sweep_get_info+0x1e>
 800b41c:	2200      	movs	r2, #0
 800b41e:	2303      	movs	r3, #3
 800b420:	604a      	str	r2, [r1, #4]
 800b422:	608a      	str	r2, [r1, #8]
 800b424:	3201      	adds	r2, #1
 800b426:	60ca      	str	r2, [r1, #12]
 800b428:	3201      	adds	r2, #1
 800b42a:	600b      	str	r3, [r1, #0]
 800b42c:	610a      	str	r2, [r1, #16]
 800b42e:	614b      	str	r3, [r1, #20]
 800b430:	4770      	bx	lr
 800b432:	600b      	str	r3, [r1, #0]
 800b434:	604b      	str	r3, [r1, #4]
 800b436:	608b      	str	r3, [r1, #8]
 800b438:	60cb      	str	r3, [r1, #12]
 800b43a:	610b      	str	r3, [r1, #16]
 800b43c:	e7f7      	b.n	800b42e <acc_cpd_linear_sweep_get_info+0x1a>

0800b43e <acc_cpd_linear_sweep_update_program>:
 800b43e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b440:	784b      	ldrb	r3, [r1, #1]
 800b442:	0005      	movs	r5, r0
 800b444:	000c      	movs	r4, r1
 800b446:	684f      	ldr	r7, [r1, #4]
 800b448:	68ce      	ldr	r6, [r1, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d007      	beq.n	800b45e <acc_cpd_linear_sweep_update_program+0x20>
 800b44e:	688b      	ldr	r3, [r1, #8]
 800b450:	4a0e      	ldr	r2, [pc, #56]	; (800b48c <acc_cpd_linear_sweep_update_program+0x4e>)
 800b452:	330e      	adds	r3, #14
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	490e      	ldr	r1, [pc, #56]	; (800b490 <acc_cpd_linear_sweep_update_program+0x52>)
 800b458:	235e      	movs	r3, #94	; 0x5e
 800b45a:	f7fd feed 	bl	8009238 <acc_confprogram_live_patch.constprop.16>
 800b45e:	7823      	ldrb	r3, [r4, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d006      	beq.n	800b472 <acc_cpd_linear_sweep_update_program+0x34>
 800b464:	9700      	str	r7, [sp, #0]
 800b466:	2336      	movs	r3, #54	; 0x36
 800b468:	4a08      	ldr	r2, [pc, #32]	; (800b48c <acc_cpd_linear_sweep_update_program+0x4e>)
 800b46a:	4909      	ldr	r1, [pc, #36]	; (800b490 <acc_cpd_linear_sweep_update_program+0x52>)
 800b46c:	0028      	movs	r0, r5
 800b46e:	f7fd fee3 	bl	8009238 <acc_confprogram_live_patch.constprop.16>
 800b472:	78a3      	ldrb	r3, [r4, #2]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d006      	beq.n	800b486 <acc_cpd_linear_sweep_update_program+0x48>
 800b478:	9600      	str	r6, [sp, #0]
 800b47a:	2372      	movs	r3, #114	; 0x72
 800b47c:	4a03      	ldr	r2, [pc, #12]	; (800b48c <acc_cpd_linear_sweep_update_program+0x4e>)
 800b47e:	4904      	ldr	r1, [pc, #16]	; (800b490 <acc_cpd_linear_sweep_update_program+0x52>)
 800b480:	0028      	movs	r0, r5
 800b482:	f7fd fed9 	bl	8009238 <acc_confprogram_live_patch.constprop.16>
 800b486:	2001      	movs	r0, #1
 800b488:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b48a:	46c0      	nop			; (mov r8, r8)
 800b48c:	08018a34 	.word	0x08018a34
 800b490:	08019be0 	.word	0x08019be0

0800b494 <acc_probes_execute>:
 800b494:	230c      	movs	r3, #12
 800b496:	b510      	push	{r4, lr}
 800b498:	7804      	ldrb	r4, [r0, #0]
 800b49a:	435c      	muls	r4, r3
 800b49c:	4b03      	ldr	r3, [pc, #12]	; (800b4ac <acc_probes_execute+0x18>)
 800b49e:	191b      	adds	r3, r3, r4
 800b4a0:	685c      	ldr	r4, [r3, #4]
 800b4a2:	2c00      	cmp	r4, #0
 800b4a4:	d001      	beq.n	800b4aa <acc_probes_execute+0x16>
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	47a0      	blx	r4
 800b4aa:	bd10      	pop	{r4, pc}
 800b4ac:	080187ec 	.word	0x080187ec

0800b4b0 <acc_cpd_linear_sweep_load_program>:
 800b4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4b2:	001d      	movs	r5, r3
 800b4b4:	2316      	movs	r3, #22
 800b4b6:	b093      	sub	sp, #76	; 0x4c
 800b4b8:	ac0f      	add	r4, sp, #60	; 0x3c
 800b4ba:	7023      	strb	r3, [r4, #0]
 800b4bc:	2307      	movs	r3, #7
 800b4be:	9008      	str	r0, [sp, #32]
 800b4c0:	910c      	str	r1, [sp, #48]	; 0x30
 800b4c2:	0016      	movs	r6, r2
 800b4c4:	9010      	str	r0, [sp, #64]	; 0x40
 800b4c6:	22bc      	movs	r2, #188	; 0xbc
 800b4c8:	0029      	movs	r1, r5
 800b4ca:	0020      	movs	r0, r4
 800b4cc:	9311      	str	r3, [sp, #68]	; 0x44
 800b4ce:	f7ff ffe1 	bl	800b494 <acc_probes_execute>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4d6:	930e      	str	r3, [sp, #56]	; 0x38
 800b4d8:	ab0e      	add	r3, sp, #56	; 0x38
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	0032      	movs	r2, r6
 800b4de:	0023      	movs	r3, r4
 800b4e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4e2:	9808      	ldr	r0, [sp, #32]
 800b4e4:	f7ff ff1e 	bl	800b324 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 800b4e8:	900d      	str	r0, [sp, #52]	; 0x34
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	d101      	bne.n	800b4f2 <acc_cpd_linear_sweep_load_program+0x42>
 800b4ee:	f000 fc3c 	bl	800bd6a <acc_cpd_linear_sweep_load_program+0x8ba>
 800b4f2:	4bf8      	ldr	r3, [pc, #992]	; (800b8d4 <acc_cpd_linear_sweep_load_program+0x424>)
 800b4f4:	001a      	movs	r2, r3
 800b4f6:	3260      	adds	r2, #96	; 0x60
 800b4f8:	7812      	ldrb	r2, [r2, #0]
 800b4fa:	2a03      	cmp	r2, #3
 800b4fc:	d904      	bls.n	800b508 <acc_cpd_linear_sweep_load_program+0x58>
 800b4fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b500:	4af5      	ldr	r2, [pc, #980]	; (800b8d8 <acc_cpd_linear_sweep_load_program+0x428>)
 800b502:	49f6      	ldr	r1, [pc, #984]	; (800b8dc <acc_cpd_linear_sweep_load_program+0x42c>)
 800b504:	2004      	movs	r0, #4
 800b506:	4798      	blx	r3
 800b508:	2300      	movs	r3, #0
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	23e2      	movs	r3, #226	; 0xe2
 800b50e:	9a04      	ldr	r2, [sp, #16]
 800b510:	00db      	lsls	r3, r3, #3
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b516:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b518:	9205      	str	r2, [sp, #20]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d900      	bls.n	800b520 <acc_cpd_linear_sweep_load_program+0x70>
 800b51e:	9305      	str	r3, [sp, #20]
 800b520:	9b04      	ldr	r3, [sp, #16]
 800b522:	0039      	movs	r1, r7
 800b524:	085b      	lsrs	r3, r3, #1
 800b526:	9309      	str	r3, [sp, #36]	; 0x24
 800b528:	9b05      	ldr	r3, [sp, #20]
 800b52a:	085a      	lsrs	r2, r3, #1
 800b52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52e:	0098      	lsls	r0, r3, #2
 800b530:	4beb      	ldr	r3, [pc, #940]	; (800b8e0 <acc_cpd_linear_sweep_load_program+0x430>)
 800b532:	18c0      	adds	r0, r0, r3
 800b534:	f7ff fa30 	bl	800a998 <acc_confprogram_copy>
 800b538:	466b      	mov	r3, sp
 800b53a:	8a1b      	ldrh	r3, [r3, #16]
 800b53c:	4ee9      	ldr	r6, [pc, #932]	; (800b8e4 <acc_cpd_linear_sweep_load_program+0x434>)
 800b53e:	9303      	str	r3, [sp, #12]
 800b540:	466b      	mov	r3, sp
 800b542:	8a9c      	ldrh	r4, [r3, #20]
 800b544:	682b      	ldr	r3, [r5, #0]
 800b546:	0022      	movs	r2, r4
 800b548:	9301      	str	r3, [sp, #4]
 800b54a:	2350      	movs	r3, #80	; 0x50
 800b54c:	9903      	ldr	r1, [sp, #12]
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	0038      	movs	r0, r7
 800b552:	0033      	movs	r3, r6
 800b554:	f7ff fa68 	bl	800aa28 <acc_confprogram_patch_offset>
 800b558:	686b      	ldr	r3, [r5, #4]
 800b55a:	0022      	movs	r2, r4
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	234e      	movs	r3, #78	; 0x4e
 800b560:	9903      	ldr	r1, [sp, #12]
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	0038      	movs	r0, r7
 800b566:	0033      	movs	r3, r6
 800b568:	f7ff fa5e 	bl	800aa28 <acc_confprogram_patch_offset>
 800b56c:	68ab      	ldr	r3, [r5, #8]
 800b56e:	0022      	movs	r2, r4
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	234f      	movs	r3, #79	; 0x4f
 800b574:	9903      	ldr	r1, [sp, #12]
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	0038      	movs	r0, r7
 800b57a:	0033      	movs	r3, r6
 800b57c:	f7ff fa54 	bl	800aa28 <acc_confprogram_patch_offset>
 800b580:	89ab      	ldrh	r3, [r5, #12]
 800b582:	0022      	movs	r2, r4
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	234c      	movs	r3, #76	; 0x4c
 800b588:	9903      	ldr	r1, [sp, #12]
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	0038      	movs	r0, r7
 800b58e:	0033      	movs	r3, r6
 800b590:	f7ff fa4a 	bl	800aa28 <acc_confprogram_patch_offset>
 800b594:	692b      	ldr	r3, [r5, #16]
 800b596:	0022      	movs	r2, r4
 800b598:	9301      	str	r3, [sp, #4]
 800b59a:	2326      	movs	r3, #38	; 0x26
 800b59c:	9903      	ldr	r1, [sp, #12]
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	0038      	movs	r0, r7
 800b5a2:	0033      	movs	r3, r6
 800b5a4:	f7ff fa40 	bl	800aa28 <acc_confprogram_patch_offset>
 800b5a8:	696b      	ldr	r3, [r5, #20]
 800b5aa:	0022      	movs	r2, r4
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	2373      	movs	r3, #115	; 0x73
 800b5b0:	9903      	ldr	r1, [sp, #12]
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	0038      	movs	r0, r7
 800b5b6:	0033      	movs	r3, r6
 800b5b8:	f7ff fa36 	bl	800aa28 <acc_confprogram_patch_offset>
 800b5bc:	69ab      	ldr	r3, [r5, #24]
 800b5be:	0022      	movs	r2, r4
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	2362      	movs	r3, #98	; 0x62
 800b5c4:	9903      	ldr	r1, [sp, #12]
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	0038      	movs	r0, r7
 800b5ca:	0033      	movs	r3, r6
 800b5cc:	f7ff fa2c 	bl	800aa28 <acc_confprogram_patch_offset>
 800b5d0:	69eb      	ldr	r3, [r5, #28]
 800b5d2:	0022      	movs	r2, r4
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	2337      	movs	r3, #55	; 0x37
 800b5d8:	9903      	ldr	r1, [sp, #12]
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	0038      	movs	r0, r7
 800b5de:	0033      	movs	r3, r6
 800b5e0:	f7ff fa22 	bl	800aa28 <acc_confprogram_patch_offset>
 800b5e4:	6a2b      	ldr	r3, [r5, #32]
 800b5e6:	0022      	movs	r2, r4
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	2376      	movs	r3, #118	; 0x76
 800b5ec:	9903      	ldr	r1, [sp, #12]
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	0038      	movs	r0, r7
 800b5f2:	0033      	movs	r3, r6
 800b5f4:	f7ff fa18 	bl	800aa28 <acc_confprogram_patch_offset>
 800b5f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b5fa:	0022      	movs	r2, r4
 800b5fc:	9301      	str	r3, [sp, #4]
 800b5fe:	2369      	movs	r3, #105	; 0x69
 800b600:	9903      	ldr	r1, [sp, #12]
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	0038      	movs	r0, r7
 800b606:	0033      	movs	r3, r6
 800b608:	f7ff fa0e 	bl	800aa28 <acc_confprogram_patch_offset>
 800b60c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b60e:	0022      	movs	r2, r4
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	236a      	movs	r3, #106	; 0x6a
 800b614:	9903      	ldr	r1, [sp, #12]
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	0038      	movs	r0, r7
 800b61a:	0033      	movs	r3, r6
 800b61c:	f7ff fa04 	bl	800aa28 <acc_confprogram_patch_offset>
 800b620:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b622:	0022      	movs	r2, r4
 800b624:	9301      	str	r3, [sp, #4]
 800b626:	2319      	movs	r3, #25
 800b628:	9903      	ldr	r1, [sp, #12]
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	0038      	movs	r0, r7
 800b62e:	0033      	movs	r3, r6
 800b630:	f7ff f9fa 	bl	800aa28 <acc_confprogram_patch_offset>
 800b634:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b636:	0022      	movs	r2, r4
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	231a      	movs	r3, #26
 800b63c:	9903      	ldr	r1, [sp, #12]
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	0038      	movs	r0, r7
 800b642:	0033      	movs	r3, r6
 800b644:	f7ff f9f0 	bl	800aa28 <acc_confprogram_patch_offset>
 800b648:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b64a:	0022      	movs	r2, r4
 800b64c:	9301      	str	r3, [sp, #4]
 800b64e:	231b      	movs	r3, #27
 800b650:	9903      	ldr	r1, [sp, #12]
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	0038      	movs	r0, r7
 800b656:	0033      	movs	r3, r6
 800b658:	f7ff f9e6 	bl	800aa28 <acc_confprogram_patch_offset>
 800b65c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b65e:	0022      	movs	r2, r4
 800b660:	9301      	str	r3, [sp, #4]
 800b662:	231c      	movs	r3, #28
 800b664:	9903      	ldr	r1, [sp, #12]
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	0038      	movs	r0, r7
 800b66a:	0033      	movs	r3, r6
 800b66c:	f7ff f9dc 	bl	800aa28 <acc_confprogram_patch_offset>
 800b670:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800b672:	0022      	movs	r2, r4
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	231d      	movs	r3, #29
 800b678:	9903      	ldr	r1, [sp, #12]
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	0038      	movs	r0, r7
 800b67e:	0033      	movs	r3, r6
 800b680:	f7ff f9d2 	bl	800aa28 <acc_confprogram_patch_offset>
 800b684:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b686:	0022      	movs	r2, r4
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	231e      	movs	r3, #30
 800b68c:	9903      	ldr	r1, [sp, #12]
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	0038      	movs	r0, r7
 800b692:	0033      	movs	r3, r6
 800b694:	f7ff f9c8 	bl	800aa28 <acc_confprogram_patch_offset>
 800b698:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800b69a:	0022      	movs	r2, r4
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	2355      	movs	r3, #85	; 0x55
 800b6a0:	9903      	ldr	r1, [sp, #12]
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	0038      	movs	r0, r7
 800b6a6:	0033      	movs	r3, r6
 800b6a8:	f7ff f9be 	bl	800aa28 <acc_confprogram_patch_offset>
 800b6ac:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b6ae:	0022      	movs	r2, r4
 800b6b0:	9301      	str	r3, [sp, #4]
 800b6b2:	2356      	movs	r3, #86	; 0x56
 800b6b4:	9903      	ldr	r1, [sp, #12]
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	0038      	movs	r0, r7
 800b6ba:	0033      	movs	r3, r6
 800b6bc:	f7ff f9b4 	bl	800aa28 <acc_confprogram_patch_offset>
 800b6c0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b6c2:	0022      	movs	r2, r4
 800b6c4:	9301      	str	r3, [sp, #4]
 800b6c6:	2358      	movs	r3, #88	; 0x58
 800b6c8:	9903      	ldr	r1, [sp, #12]
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	0038      	movs	r0, r7
 800b6ce:	0033      	movs	r3, r6
 800b6d0:	f7ff f9aa 	bl	800aa28 <acc_confprogram_patch_offset>
 800b6d4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800b6d6:	0022      	movs	r2, r4
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	236b      	movs	r3, #107	; 0x6b
 800b6dc:	9903      	ldr	r1, [sp, #12]
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	0038      	movs	r0, r7
 800b6e2:	0033      	movs	r3, r6
 800b6e4:	f7ff f9a0 	bl	800aa28 <acc_confprogram_patch_offset>
 800b6e8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800b6ea:	0022      	movs	r2, r4
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	2386      	movs	r3, #134	; 0x86
 800b6f0:	9903      	ldr	r1, [sp, #12]
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	0038      	movs	r0, r7
 800b6f6:	0033      	movs	r3, r6
 800b6f8:	f7ff f996 	bl	800aa28 <acc_confprogram_patch_offset>
 800b6fc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800b6fe:	0022      	movs	r2, r4
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	2364      	movs	r3, #100	; 0x64
 800b704:	9903      	ldr	r1, [sp, #12]
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	0038      	movs	r0, r7
 800b70a:	0033      	movs	r3, r6
 800b70c:	f7ff f98c 	bl	800aa28 <acc_confprogram_patch_offset>
 800b710:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800b712:	0022      	movs	r2, r4
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	2365      	movs	r3, #101	; 0x65
 800b718:	9903      	ldr	r1, [sp, #12]
 800b71a:	9300      	str	r3, [sp, #0]
 800b71c:	0038      	movs	r0, r7
 800b71e:	0033      	movs	r3, r6
 800b720:	f7ff f982 	bl	800aa28 <acc_confprogram_patch_offset>
 800b724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b726:	0022      	movs	r2, r4
 800b728:	9301      	str	r3, [sp, #4]
 800b72a:	2340      	movs	r3, #64	; 0x40
 800b72c:	9903      	ldr	r1, [sp, #12]
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	0038      	movs	r0, r7
 800b732:	0033      	movs	r3, r6
 800b734:	f7ff f978 	bl	800aa28 <acc_confprogram_patch_offset>
 800b738:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800b73a:	0022      	movs	r2, r4
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	2341      	movs	r3, #65	; 0x41
 800b740:	9903      	ldr	r1, [sp, #12]
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	0038      	movs	r0, r7
 800b746:	0033      	movs	r3, r6
 800b748:	f7ff f96e 	bl	800aa28 <acc_confprogram_patch_offset>
 800b74c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800b74e:	0022      	movs	r2, r4
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	2372      	movs	r3, #114	; 0x72
 800b754:	9903      	ldr	r1, [sp, #12]
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	0038      	movs	r0, r7
 800b75a:	0033      	movs	r3, r6
 800b75c:	f7ff f964 	bl	800aa28 <acc_confprogram_patch_offset>
 800b760:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b762:	0022      	movs	r2, r4
 800b764:	9301      	str	r3, [sp, #4]
 800b766:	2354      	movs	r3, #84	; 0x54
 800b768:	9903      	ldr	r1, [sp, #12]
 800b76a:	9300      	str	r3, [sp, #0]
 800b76c:	0038      	movs	r0, r7
 800b76e:	0033      	movs	r3, r6
 800b770:	f7ff f95a 	bl	800aa28 <acc_confprogram_patch_offset>
 800b774:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b776:	0022      	movs	r2, r4
 800b778:	9301      	str	r3, [sp, #4]
 800b77a:	2339      	movs	r3, #57	; 0x39
 800b77c:	9903      	ldr	r1, [sp, #12]
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	0038      	movs	r0, r7
 800b782:	0033      	movs	r3, r6
 800b784:	f7ff f950 	bl	800aa28 <acc_confprogram_patch_offset>
 800b788:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d06d      	beq.n	800b86a <acc_cpd_linear_sweep_load_program+0x3ba>
 800b78e:	2301      	movs	r3, #1
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	330f      	adds	r3, #15
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	0022      	movs	r2, r4
 800b798:	0033      	movs	r3, r6
 800b79a:	9903      	ldr	r1, [sp, #12]
 800b79c:	0038      	movs	r0, r7
 800b79e:	f7ff f943 	bl	800aa28 <acc_confprogram_patch_offset>
 800b7a2:	4b51      	ldr	r3, [pc, #324]	; (800b8e8 <acc_cpd_linear_sweep_load_program+0x438>)
 800b7a4:	0022      	movs	r2, r4
 800b7a6:	9301      	str	r3, [sp, #4]
 800b7a8:	2312      	movs	r3, #18
 800b7aa:	9903      	ldr	r1, [sp, #12]
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	0038      	movs	r0, r7
 800b7b0:	0033      	movs	r3, r6
 800b7b2:	f7ff f939 	bl	800aa28 <acc_confprogram_patch_offset>
 800b7b6:	2307      	movs	r3, #7
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	330d      	adds	r3, #13
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	0022      	movs	r2, r4
 800b7c0:	0033      	movs	r3, r6
 800b7c2:	9903      	ldr	r1, [sp, #12]
 800b7c4:	0038      	movs	r0, r7
 800b7c6:	f7ff f92f 	bl	800aa28 <acc_confprogram_patch_offset>
 800b7ca:	2311      	movs	r3, #17
 800b7cc:	4a46      	ldr	r2, [pc, #280]	; (800b8e8 <acc_cpd_linear_sweep_load_program+0x438>)
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	9201      	str	r2, [sp, #4]
 800b7d2:	0033      	movs	r3, r6
 800b7d4:	0022      	movs	r2, r4
 800b7d6:	9903      	ldr	r1, [sp, #12]
 800b7d8:	0038      	movs	r0, r7
 800b7da:	f7ff f925 	bl	800aa28 <acc_confprogram_patch_offset>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	3313      	adds	r3, #19
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	0022      	movs	r2, r4
 800b7e8:	0033      	movs	r3, r6
 800b7ea:	9903      	ldr	r1, [sp, #12]
 800b7ec:	0038      	movs	r0, r7
 800b7ee:	f7ff f91b 	bl	800aa28 <acc_confprogram_patch_offset>
 800b7f2:	4b3e      	ldr	r3, [pc, #248]	; (800b8ec <acc_cpd_linear_sweep_load_program+0x43c>)
 800b7f4:	0022      	movs	r2, r4
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	2315      	movs	r3, #21
 800b7fa:	9903      	ldr	r1, [sp, #12]
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	0038      	movs	r0, r7
 800b800:	0033      	movs	r3, r6
 800b802:	f7ff f911 	bl	800aa28 <acc_confprogram_patch_offset>
 800b806:	2307      	movs	r3, #7
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	330f      	adds	r3, #15
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	0022      	movs	r2, r4
 800b810:	0033      	movs	r3, r6
 800b812:	9903      	ldr	r1, [sp, #12]
 800b814:	0038      	movs	r0, r7
 800b816:	f7ff f907 	bl	800aa28 <acc_confprogram_patch_offset>
 800b81a:	4b35      	ldr	r3, [pc, #212]	; (800b8f0 <acc_cpd_linear_sweep_load_program+0x440>)
 800b81c:	0022      	movs	r2, r4
 800b81e:	9301      	str	r3, [sp, #4]
 800b820:	230e      	movs	r3, #14
 800b822:	9903      	ldr	r1, [sp, #12]
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	0038      	movs	r0, r7
 800b828:	0033      	movs	r3, r6
 800b82a:	f7ff f8fd 	bl	800aa28 <acc_confprogram_patch_offset>
 800b82e:	2307      	movs	r3, #7
 800b830:	9301      	str	r3, [sp, #4]
 800b832:	3308      	adds	r3, #8
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	0022      	movs	r2, r4
 800b838:	0033      	movs	r3, r6
 800b83a:	9903      	ldr	r1, [sp, #12]
 800b83c:	0038      	movs	r0, r7
 800b83e:	f7ff f8f3 	bl	800aa28 <acc_confprogram_patch_offset>
 800b842:	4b2c      	ldr	r3, [pc, #176]	; (800b8f4 <acc_cpd_linear_sweep_load_program+0x444>)
 800b844:	0022      	movs	r2, r4
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	2317      	movs	r3, #23
 800b84a:	9903      	ldr	r1, [sp, #12]
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	0038      	movs	r0, r7
 800b850:	0033      	movs	r3, r6
 800b852:	f7ff f8e9 	bl	800aa28 <acc_confprogram_patch_offset>
 800b856:	2307      	movs	r3, #7
 800b858:	9301      	str	r3, [sp, #4]
 800b85a:	3311      	adds	r3, #17
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	0022      	movs	r2, r4
 800b860:	0033      	movs	r3, r6
 800b862:	9903      	ldr	r1, [sp, #12]
 800b864:	0038      	movs	r0, r7
 800b866:	f7ff f8df 	bl	800aa28 <acc_confprogram_patch_offset>
 800b86a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800b86c:	4e1d      	ldr	r6, [pc, #116]	; (800b8e4 <acc_cpd_linear_sweep_load_program+0x434>)
 800b86e:	9301      	str	r3, [sp, #4]
 800b870:	2351      	movs	r3, #81	; 0x51
 800b872:	0022      	movs	r2, r4
 800b874:	9300      	str	r3, [sp, #0]
 800b876:	9903      	ldr	r1, [sp, #12]
 800b878:	0033      	movs	r3, r6
 800b87a:	0038      	movs	r0, r7
 800b87c:	f7ff f8d4 	bl	800aa28 <acc_confprogram_patch_offset>
 800b880:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800b882:	0022      	movs	r2, r4
 800b884:	9301      	str	r3, [sp, #4]
 800b886:	2377      	movs	r3, #119	; 0x77
 800b888:	9903      	ldr	r1, [sp, #12]
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	0038      	movs	r0, r7
 800b88e:	0033      	movs	r3, r6
 800b890:	f7ff f8ca 	bl	800aa28 <acc_confprogram_patch_offset>
 800b894:	1d2b      	adds	r3, r5, #4
 800b896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b898:	0022      	movs	r2, r4
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	2344      	movs	r3, #68	; 0x44
 800b89e:	9903      	ldr	r1, [sp, #12]
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	0038      	movs	r0, r7
 800b8a4:	0033      	movs	r3, r6
 800b8a6:	f7ff f8bf 	bl	800aa28 <acc_confprogram_patch_offset>
 800b8aa:	002b      	movs	r3, r5
 800b8ac:	3308      	adds	r3, #8
 800b8ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8b0:	0022      	movs	r2, r4
 800b8b2:	9301      	str	r3, [sp, #4]
 800b8b4:	2343      	movs	r3, #67	; 0x43
 800b8b6:	9903      	ldr	r1, [sp, #12]
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	0038      	movs	r0, r7
 800b8bc:	0033      	movs	r3, r6
 800b8be:	f7ff f8b3 	bl	800aa28 <acc_confprogram_patch_offset>
 800b8c2:	002b      	movs	r3, r5
 800b8c4:	3388      	adds	r3, #136	; 0x88
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	9207      	str	r2, [sp, #28]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	9206      	str	r2, [sp, #24]
 800b8d0:	b29a      	uxth	r2, r3
 800b8d2:	e011      	b.n	800b8f8 <acc_cpd_linear_sweep_load_program+0x448>
 800b8d4:	200003b8 	.word	0x200003b8
 800b8d8:	0801d077 	.word	0x0801d077
 800b8dc:	0801b19e 	.word	0x0801b19e
 800b8e0:	08019be0 	.word	0x08019be0
 800b8e4:	08018a34 	.word	0x08018a34
 800b8e8:	0000ff80 	.word	0x0000ff80
 800b8ec:	0000ffc0 	.word	0x0000ffc0
 800b8f0:	0000fff0 	.word	0x0000fff0
 800b8f4:	0000ffff 	.word	0x0000ffff
 800b8f8:	2a08      	cmp	r2, #8
 800b8fa:	d914      	bls.n	800b926 <acc_cpd_linear_sweep_load_program+0x476>
 800b8fc:	0013      	movs	r3, r2
 800b8fe:	22ff      	movs	r2, #255	; 0xff
 800b900:	0011      	movs	r1, r2
 800b902:	3b08      	subs	r3, #8
 800b904:	4099      	lsls	r1, r3
 800b906:	000b      	movs	r3, r1
 800b908:	4393      	bics	r3, r2
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	9306      	str	r3, [sp, #24]
 800b90e:	2302      	movs	r3, #2
 800b910:	9301      	str	r3, [sp, #4]
 800b912:	3365      	adds	r3, #101	; 0x65
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	0022      	movs	r2, r4
 800b918:	0033      	movs	r3, r6
 800b91a:	9903      	ldr	r1, [sp, #12]
 800b91c:	0038      	movs	r0, r7
 800b91e:	f7ff f883 	bl	800aa28 <acc_confprogram_patch_offset>
 800b922:	2308      	movs	r3, #8
 800b924:	9307      	str	r3, [sp, #28]
 800b926:	9b07      	ldr	r3, [sp, #28]
 800b928:	4ef0      	ldr	r6, [pc, #960]	; (800bcec <acc_cpd_linear_sweep_load_program+0x83c>)
 800b92a:	9301      	str	r3, [sp, #4]
 800b92c:	236c      	movs	r3, #108	; 0x6c
 800b92e:	0022      	movs	r2, r4
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	9903      	ldr	r1, [sp, #12]
 800b934:	0033      	movs	r3, r6
 800b936:	0038      	movs	r0, r7
 800b938:	f7ff f876 	bl	800aa28 <acc_confprogram_patch_offset>
 800b93c:	9b07      	ldr	r3, [sp, #28]
 800b93e:	0022      	movs	r2, r4
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	2359      	movs	r3, #89	; 0x59
 800b944:	9903      	ldr	r1, [sp, #12]
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	0038      	movs	r0, r7
 800b94a:	0033      	movs	r3, r6
 800b94c:	f7ff f86c 	bl	800aa28 <acc_confprogram_patch_offset>
 800b950:	2380      	movs	r3, #128	; 0x80
 800b952:	9a06      	ldr	r2, [sp, #24]
 800b954:	9903      	ldr	r1, [sp, #12]
 800b956:	431a      	orrs	r2, r3
 800b958:	236e      	movs	r3, #110	; 0x6e
 800b95a:	920a      	str	r2, [sp, #40]	; 0x28
 800b95c:	9201      	str	r2, [sp, #4]
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	0022      	movs	r2, r4
 800b962:	0033      	movs	r3, r6
 800b964:	0038      	movs	r0, r7
 800b966:	f7ff f85f 	bl	800aa28 <acc_confprogram_patch_offset>
 800b96a:	23c0      	movs	r3, #192	; 0xc0
 800b96c:	9a06      	ldr	r2, [sp, #24]
 800b96e:	9903      	ldr	r1, [sp, #12]
 800b970:	431a      	orrs	r2, r3
 800b972:	2370      	movs	r3, #112	; 0x70
 800b974:	920b      	str	r2, [sp, #44]	; 0x2c
 800b976:	9201      	str	r2, [sp, #4]
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	0022      	movs	r2, r4
 800b97c:	0033      	movs	r3, r6
 800b97e:	0038      	movs	r0, r7
 800b980:	f7ff f852 	bl	800aa28 <acc_confprogram_patch_offset>
 800b984:	23ff      	movs	r3, #255	; 0xff
 800b986:	9a06      	ldr	r2, [sp, #24]
 800b988:	9903      	ldr	r1, [sp, #12]
 800b98a:	431a      	orrs	r2, r3
 800b98c:	236f      	movs	r3, #111	; 0x6f
 800b98e:	9207      	str	r2, [sp, #28]
 800b990:	9201      	str	r2, [sp, #4]
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	0022      	movs	r2, r4
 800b996:	0033      	movs	r3, r6
 800b998:	0038      	movs	r0, r7
 800b99a:	f7ff f845 	bl	800aa28 <acc_confprogram_patch_offset>
 800b99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9a0:	0022      	movs	r2, r4
 800b9a2:	9301      	str	r3, [sp, #4]
 800b9a4:	235b      	movs	r3, #91	; 0x5b
 800b9a6:	9903      	ldr	r1, [sp, #12]
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	0038      	movs	r0, r7
 800b9ac:	0033      	movs	r3, r6
 800b9ae:	f7ff f83b 	bl	800aa28 <acc_confprogram_patch_offset>
 800b9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9b4:	0022      	movs	r2, r4
 800b9b6:	9301      	str	r3, [sp, #4]
 800b9b8:	235d      	movs	r3, #93	; 0x5d
 800b9ba:	9903      	ldr	r1, [sp, #12]
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	0038      	movs	r0, r7
 800b9c0:	0033      	movs	r3, r6
 800b9c2:	f7ff f831 	bl	800aa28 <acc_confprogram_patch_offset>
 800b9c6:	9b07      	ldr	r3, [sp, #28]
 800b9c8:	0022      	movs	r2, r4
 800b9ca:	9301      	str	r3, [sp, #4]
 800b9cc:	235c      	movs	r3, #92	; 0x5c
 800b9ce:	9903      	ldr	r1, [sp, #12]
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	0038      	movs	r0, r7
 800b9d4:	0033      	movs	r3, r6
 800b9d6:	f7ff f827 	bl	800aa28 <acc_confprogram_patch_offset>
 800b9da:	23f0      	movs	r3, #240	; 0xf0
 800b9dc:	9a06      	ldr	r2, [sp, #24]
 800b9de:	9903      	ldr	r1, [sp, #12]
 800b9e0:	431a      	orrs	r2, r3
 800b9e2:	234a      	movs	r3, #74	; 0x4a
 800b9e4:	9206      	str	r2, [sp, #24]
 800b9e6:	9201      	str	r2, [sp, #4]
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	0022      	movs	r2, r4
 800b9ec:	0033      	movs	r3, r6
 800b9ee:	0038      	movs	r0, r7
 800b9f0:	f7ff f81a 	bl	800aa28 <acc_confprogram_patch_offset>
 800b9f4:	9b06      	ldr	r3, [sp, #24]
 800b9f6:	0022      	movs	r2, r4
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	2345      	movs	r3, #69	; 0x45
 800b9fc:	9903      	ldr	r1, [sp, #12]
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	0038      	movs	r0, r7
 800ba02:	0033      	movs	r3, r6
 800ba04:	f7ff f810 	bl	800aa28 <acc_confprogram_patch_offset>
 800ba08:	9b07      	ldr	r3, [sp, #28]
 800ba0a:	0022      	movs	r2, r4
 800ba0c:	9301      	str	r3, [sp, #4]
 800ba0e:	2322      	movs	r3, #34	; 0x22
 800ba10:	9903      	ldr	r1, [sp, #12]
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	0038      	movs	r0, r7
 800ba16:	0033      	movs	r3, r6
 800ba18:	f7ff f806 	bl	800aa28 <acc_confprogram_patch_offset>
 800ba1c:	002b      	movs	r3, r5
 800ba1e:	3390      	adds	r3, #144	; 0x90
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	2364      	movs	r3, #100	; 0x64
 800ba24:	2a05      	cmp	r2, #5
 800ba26:	d800      	bhi.n	800ba2a <acc_cpd_linear_sweep_load_program+0x57a>
 800ba28:	3b20      	subs	r3, #32
 800ba2a:	9301      	str	r3, [sp, #4]
 800ba2c:	2305      	movs	r3, #5
 800ba2e:	0022      	movs	r2, r4
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	9903      	ldr	r1, [sp, #12]
 800ba34:	0033      	movs	r3, r6
 800ba36:	0038      	movs	r0, r7
 800ba38:	f7fe fff6 	bl	800aa28 <acc_confprogram_patch_offset>
 800ba3c:	002a      	movs	r2, r5
 800ba3e:	3290      	adds	r2, #144	; 0x90
 800ba40:	9206      	str	r2, [sp, #24]
 800ba42:	6812      	ldr	r2, [r2, #0]
 800ba44:	9903      	ldr	r1, [sp, #12]
 800ba46:	0153      	lsls	r3, r2, #5
 800ba48:	3b03      	subs	r3, #3
 800ba4a:	9301      	str	r3, [sp, #4]
 800ba4c:	2324      	movs	r3, #36	; 0x24
 800ba4e:	9207      	str	r2, [sp, #28]
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	0022      	movs	r2, r4
 800ba54:	0033      	movs	r3, r6
 800ba56:	0038      	movs	r0, r7
 800ba58:	f7fe ffe6 	bl	800aa28 <acc_confprogram_patch_offset>
 800ba5c:	9a06      	ldr	r2, [sp, #24]
 800ba5e:	9903      	ldr	r1, [sp, #12]
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	0038      	movs	r0, r7
 800ba64:	0153      	lsls	r3, r2, #5
 800ba66:	085b      	lsrs	r3, r3, #1
 800ba68:	3b03      	subs	r3, #3
 800ba6a:	9301      	str	r3, [sp, #4]
 800ba6c:	2325      	movs	r3, #37	; 0x25
 800ba6e:	9207      	str	r2, [sp, #28]
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	0022      	movs	r2, r4
 800ba74:	0033      	movs	r3, r6
 800ba76:	f7fe ffd7 	bl	800aa28 <acc_confprogram_patch_offset>
 800ba7a:	002a      	movs	r2, r5
 800ba7c:	2336      	movs	r3, #54	; 0x36
 800ba7e:	3294      	adds	r2, #148	; 0x94
 800ba80:	6812      	ldr	r2, [r2, #0]
 800ba82:	9903      	ldr	r1, [sp, #12]
 800ba84:	9201      	str	r2, [sp, #4]
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	0022      	movs	r2, r4
 800ba8a:	0033      	movs	r3, r6
 800ba8c:	0038      	movs	r0, r7
 800ba8e:	f7fe ffcb 	bl	800aa28 <acc_confprogram_patch_offset>
 800ba92:	002a      	movs	r2, r5
 800ba94:	3298      	adds	r2, #152	; 0x98
 800ba96:	6813      	ldr	r3, [r2, #0]
 800ba98:	9903      	ldr	r1, [sp, #12]
 800ba9a:	330e      	adds	r3, #14
 800ba9c:	9301      	str	r3, [sp, #4]
 800ba9e:	235e      	movs	r3, #94	; 0x5e
 800baa0:	0022      	movs	r2, r4
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	0038      	movs	r0, r7
 800baa6:	0033      	movs	r3, r6
 800baa8:	f7fe ffbe 	bl	800aa28 <acc_confprogram_patch_offset>
 800baac:	2305      	movs	r3, #5
 800baae:	9a06      	ldr	r2, [sp, #24]
 800bab0:	6816      	ldr	r6, [r2, #0]
 800bab2:	42b3      	cmp	r3, r6
 800bab4:	4180      	sbcs	r0, r0
 800bab6:	3b04      	subs	r3, #4
 800bab8:	4398      	bics	r0, r3
 800baba:	4b8d      	ldr	r3, [pc, #564]	; (800bcf0 <acc_cpd_linear_sweep_load_program+0x840>)
 800babc:	0031      	movs	r1, r6
 800babe:	18c0      	adds	r0, r0, r3
 800bac0:	f001 fa32 	bl	800cf28 <__aeabi_uidivmod>
 800bac4:	9106      	str	r1, [sp, #24]
 800bac6:	2900      	cmp	r1, #0
 800bac8:	d001      	beq.n	800bace <acc_cpd_linear_sweep_load_program+0x61e>
 800baca:	1a73      	subs	r3, r6, r1
 800bacc:	9306      	str	r3, [sp, #24]
 800bace:	002e      	movs	r6, r5
 800bad0:	369c      	adds	r6, #156	; 0x9c
 800bad2:	6832      	ldr	r2, [r6, #0]
 800bad4:	9b06      	ldr	r3, [sp, #24]
 800bad6:	4694      	mov	ip, r2
 800bad8:	4463      	add	r3, ip
 800bada:	9307      	str	r3, [sp, #28]
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	231f      	movs	r3, #31
 800bae0:	0022      	movs	r2, r4
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	9903      	ldr	r1, [sp, #12]
 800bae6:	4b81      	ldr	r3, [pc, #516]	; (800bcec <acc_cpd_linear_sweep_load_program+0x83c>)
 800bae8:	0038      	movs	r0, r7
 800baea:	f7fe ff9d 	bl	800aa28 <acc_confprogram_patch_offset>
 800baee:	6833      	ldr	r3, [r6, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d017      	beq.n	800bb24 <acc_cpd_linear_sweep_load_program+0x674>
 800baf4:	4b7f      	ldr	r3, [pc, #508]	; (800bcf4 <acc_cpd_linear_sweep_load_program+0x844>)
 800baf6:	001a      	movs	r2, r3
 800baf8:	3260      	adds	r2, #96	; 0x60
 800bafa:	7812      	ldrb	r2, [r2, #0]
 800bafc:	2a01      	cmp	r2, #1
 800bafe:	d905      	bls.n	800bb0c <acc_cpd_linear_sweep_load_program+0x65c>
 800bb00:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800bb02:	4a7d      	ldr	r2, [pc, #500]	; (800bcf8 <acc_cpd_linear_sweep_load_program+0x848>)
 800bb04:	9b06      	ldr	r3, [sp, #24]
 800bb06:	497d      	ldr	r1, [pc, #500]	; (800bcfc <acc_cpd_linear_sweep_load_program+0x84c>)
 800bb08:	2002      	movs	r0, #2
 800bb0a:	47b0      	blx	r6
 800bb0c:	4b79      	ldr	r3, [pc, #484]	; (800bcf4 <acc_cpd_linear_sweep_load_program+0x844>)
 800bb0e:	001a      	movs	r2, r3
 800bb10:	3260      	adds	r2, #96	; 0x60
 800bb12:	7812      	ldrb	r2, [r2, #0]
 800bb14:	2a01      	cmp	r2, #1
 800bb16:	d905      	bls.n	800bb24 <acc_cpd_linear_sweep_load_program+0x674>
 800bb18:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800bb1a:	4a79      	ldr	r2, [pc, #484]	; (800bd00 <acc_cpd_linear_sweep_load_program+0x850>)
 800bb1c:	9b07      	ldr	r3, [sp, #28]
 800bb1e:	4977      	ldr	r1, [pc, #476]	; (800bcfc <acc_cpd_linear_sweep_load_program+0x84c>)
 800bb20:	2002      	movs	r0, #2
 800bb22:	47b0      	blx	r6
 800bb24:	002b      	movs	r3, r5
 800bb26:	3390      	adds	r3, #144	; 0x90
 800bb28:	681e      	ldr	r6, [r3, #0]
 800bb2a:	2008      	movs	r0, #8
 800bb2c:	2e05      	cmp	r6, #5
 800bb2e:	d800      	bhi.n	800bb32 <acc_cpd_linear_sweep_load_program+0x682>
 800bb30:	3002      	adds	r0, #2
 800bb32:	0031      	movs	r1, r6
 800bb34:	f001 f9f8 	bl	800cf28 <__aeabi_uidivmod>
 800bb38:	9106      	str	r1, [sp, #24]
 800bb3a:	2900      	cmp	r1, #0
 800bb3c:	d001      	beq.n	800bb42 <acc_cpd_linear_sweep_load_program+0x692>
 800bb3e:	1a73      	subs	r3, r6, r1
 800bb40:	9306      	str	r3, [sp, #24]
 800bb42:	002e      	movs	r6, r5
 800bb44:	36a0      	adds	r6, #160	; 0xa0
 800bb46:	6832      	ldr	r2, [r6, #0]
 800bb48:	9b06      	ldr	r3, [sp, #24]
 800bb4a:	4694      	mov	ip, r2
 800bb4c:	4463      	add	r3, ip
 800bb4e:	9307      	str	r3, [sp, #28]
 800bb50:	9301      	str	r3, [sp, #4]
 800bb52:	2366      	movs	r3, #102	; 0x66
 800bb54:	0022      	movs	r2, r4
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	9903      	ldr	r1, [sp, #12]
 800bb5a:	4b64      	ldr	r3, [pc, #400]	; (800bcec <acc_cpd_linear_sweep_load_program+0x83c>)
 800bb5c:	0038      	movs	r0, r7
 800bb5e:	f7fe ff63 	bl	800aa28 <acc_confprogram_patch_offset>
 800bb62:	6833      	ldr	r3, [r6, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d017      	beq.n	800bb98 <acc_cpd_linear_sweep_load_program+0x6e8>
 800bb68:	4b62      	ldr	r3, [pc, #392]	; (800bcf4 <acc_cpd_linear_sweep_load_program+0x844>)
 800bb6a:	001a      	movs	r2, r3
 800bb6c:	3260      	adds	r2, #96	; 0x60
 800bb6e:	7812      	ldrb	r2, [r2, #0]
 800bb70:	2a01      	cmp	r2, #1
 800bb72:	d905      	bls.n	800bb80 <acc_cpd_linear_sweep_load_program+0x6d0>
 800bb74:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800bb76:	4a63      	ldr	r2, [pc, #396]	; (800bd04 <acc_cpd_linear_sweep_load_program+0x854>)
 800bb78:	9b06      	ldr	r3, [sp, #24]
 800bb7a:	4960      	ldr	r1, [pc, #384]	; (800bcfc <acc_cpd_linear_sweep_load_program+0x84c>)
 800bb7c:	2002      	movs	r0, #2
 800bb7e:	47b0      	blx	r6
 800bb80:	4b5c      	ldr	r3, [pc, #368]	; (800bcf4 <acc_cpd_linear_sweep_load_program+0x844>)
 800bb82:	001a      	movs	r2, r3
 800bb84:	3260      	adds	r2, #96	; 0x60
 800bb86:	7812      	ldrb	r2, [r2, #0]
 800bb88:	2a01      	cmp	r2, #1
 800bb8a:	d905      	bls.n	800bb98 <acc_cpd_linear_sweep_load_program+0x6e8>
 800bb8c:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 800bb8e:	4a5e      	ldr	r2, [pc, #376]	; (800bd08 <acc_cpd_linear_sweep_load_program+0x858>)
 800bb90:	9b07      	ldr	r3, [sp, #28]
 800bb92:	495a      	ldr	r1, [pc, #360]	; (800bcfc <acc_cpd_linear_sweep_load_program+0x84c>)
 800bb94:	2002      	movs	r0, #2
 800bb96:	47b0      	blx	r6
 800bb98:	002b      	movs	r3, r5
 800bb9a:	338d      	adds	r3, #141	; 0x8d
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d014      	beq.n	800bbcc <acc_cpd_linear_sweep_load_program+0x71c>
 800bba2:	2300      	movs	r3, #0
 800bba4:	9301      	str	r3, [sp, #4]
 800bba6:	333b      	adds	r3, #59	; 0x3b
 800bba8:	9300      	str	r3, [sp, #0]
 800bbaa:	0022      	movs	r2, r4
 800bbac:	4b4f      	ldr	r3, [pc, #316]	; (800bcec <acc_cpd_linear_sweep_load_program+0x83c>)
 800bbae:	9903      	ldr	r1, [sp, #12]
 800bbb0:	0038      	movs	r0, r7
 800bbb2:	f7fe ff39 	bl	800aa28 <acc_confprogram_patch_offset>
 800bbb6:	4b4f      	ldr	r3, [pc, #316]	; (800bcf4 <acc_cpd_linear_sweep_load_program+0x844>)
 800bbb8:	001a      	movs	r2, r3
 800bbba:	3260      	adds	r2, #96	; 0x60
 800bbbc:	7812      	ldrb	r2, [r2, #0]
 800bbbe:	2a01      	cmp	r2, #1
 800bbc0:	d904      	bls.n	800bbcc <acc_cpd_linear_sweep_load_program+0x71c>
 800bbc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbc4:	4a51      	ldr	r2, [pc, #324]	; (800bd0c <acc_cpd_linear_sweep_load_program+0x85c>)
 800bbc6:	494d      	ldr	r1, [pc, #308]	; (800bcfc <acc_cpd_linear_sweep_load_program+0x84c>)
 800bbc8:	2002      	movs	r0, #2
 800bbca:	4798      	blx	r3
 800bbcc:	002b      	movs	r3, r5
 800bbce:	33a4      	adds	r3, #164	; 0xa4
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4e46      	ldr	r6, [pc, #280]	; (800bcec <acc_cpd_linear_sweep_load_program+0x83c>)
 800bbd4:	9306      	str	r3, [sp, #24]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	2306      	movs	r3, #6
 800bbdc:	0022      	movs	r2, r4
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	9903      	ldr	r1, [sp, #12]
 800bbe2:	0033      	movs	r3, r6
 800bbe4:	0038      	movs	r0, r7
 800bbe6:	f7fe ff1f 	bl	800aa28 <acc_confprogram_patch_offset>
 800bbea:	9906      	ldr	r1, [sp, #24]
 800bbec:	2004      	movs	r0, #4
 800bbee:	f001 f915 	bl	800ce1c <__udivsi3>
 800bbf2:	2363      	movs	r3, #99	; 0x63
 800bbf4:	3801      	subs	r0, #1
 800bbf6:	9001      	str	r0, [sp, #4]
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	0022      	movs	r2, r4
 800bbfc:	0033      	movs	r3, r6
 800bbfe:	9903      	ldr	r1, [sp, #12]
 800bc00:	0038      	movs	r0, r7
 800bc02:	f7fe ff11 	bl	800aa28 <acc_confprogram_patch_offset>
 800bc06:	002b      	movs	r3, r5
 800bc08:	33a8      	adds	r3, #168	; 0xa8
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	0022      	movs	r2, r4
 800bc0e:	9301      	str	r3, [sp, #4]
 800bc10:	2361      	movs	r3, #97	; 0x61
 800bc12:	9903      	ldr	r1, [sp, #12]
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	0038      	movs	r0, r7
 800bc18:	0033      	movs	r3, r6
 800bc1a:	f7fe ff05 	bl	800aa28 <acc_confprogram_patch_offset>
 800bc1e:	002b      	movs	r3, r5
 800bc20:	33ad      	adds	r3, #173	; 0xad
 800bc22:	9306      	str	r3, [sp, #24]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	0022      	movs	r2, r4
 800bc28:	9301      	str	r3, [sp, #4]
 800bc2a:	2346      	movs	r3, #70	; 0x46
 800bc2c:	9903      	ldr	r1, [sp, #12]
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	0038      	movs	r0, r7
 800bc32:	0033      	movs	r3, r6
 800bc34:	f7fe fef8 	bl	800aa28 <acc_confprogram_patch_offset>
 800bc38:	9b06      	ldr	r3, [sp, #24]
 800bc3a:	781a      	ldrb	r2, [r3, #0]
 800bc3c:	2323      	movs	r3, #35	; 0x23
 800bc3e:	2a00      	cmp	r2, #0
 800bc40:	d100      	bne.n	800bc44 <acc_cpd_linear_sweep_load_program+0x794>
 800bc42:	e095      	b.n	800bd70 <acc_cpd_linear_sweep_load_program+0x8c0>
 800bc44:	2203      	movs	r2, #3
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	9201      	str	r2, [sp, #4]
 800bc4a:	0033      	movs	r3, r6
 800bc4c:	0022      	movs	r2, r4
 800bc4e:	9903      	ldr	r1, [sp, #12]
 800bc50:	0038      	movs	r0, r7
 800bc52:	f7fe fee9 	bl	800aa28 <acc_confprogram_patch_offset>
 800bc56:	2300      	movs	r3, #0
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	337d      	adds	r3, #125	; 0x7d
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	0022      	movs	r2, r4
 800bc60:	0033      	movs	r3, r6
 800bc62:	9903      	ldr	r1, [sp, #12]
 800bc64:	0038      	movs	r0, r7
 800bc66:	f7fe fedf 	bl	800aa28 <acc_confprogram_patch_offset>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	3380      	adds	r3, #128	; 0x80
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	0022      	movs	r2, r4
 800bc74:	0033      	movs	r3, r6
 800bc76:	9903      	ldr	r1, [sp, #12]
 800bc78:	0038      	movs	r0, r7
 800bc7a:	f7fe fed5 	bl	800aa28 <acc_confprogram_patch_offset>
 800bc7e:	2302      	movs	r3, #2
 800bc80:	9301      	str	r3, [sp, #4]
 800bc82:	3373      	adds	r3, #115	; 0x73
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	0022      	movs	r2, r4
 800bc88:	0033      	movs	r3, r6
 800bc8a:	9903      	ldr	r1, [sp, #12]
 800bc8c:	0038      	movs	r0, r7
 800bc8e:	f7fe fecb 	bl	800aa28 <acc_confprogram_patch_offset>
 800bc92:	002b      	movs	r3, r5
 800bc94:	33ac      	adds	r3, #172	; 0xac
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	0022      	movs	r2, r4
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	2352      	movs	r3, #82	; 0x52
 800bc9e:	9903      	ldr	r1, [sp, #12]
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	0038      	movs	r0, r7
 800bca4:	4b11      	ldr	r3, [pc, #68]	; (800bcec <acc_cpd_linear_sweep_load_program+0x83c>)
 800bca6:	f7fe febf 	bl	800aa28 <acc_confprogram_patch_offset>
 800bcaa:	002b      	movs	r3, r5
 800bcac:	33b0      	adds	r3, #176	; 0xb0
 800bcae:	6818      	ldr	r0, [r3, #0]
 800bcb0:	4917      	ldr	r1, [pc, #92]	; (800bd10 <acc_cpd_linear_sweep_load_program+0x860>)
 800bcb2:	f000 fd81 	bl	800c7b8 <__aeabi_fmul>
 800bcb6:	f001 fabf 	bl	800d238 <__aeabi_f2uiz>
 800bcba:	002e      	movs	r6, r5
 800bcbc:	2368      	movs	r3, #104	; 0x68
 800bcbe:	3801      	subs	r0, #1
 800bcc0:	b280      	uxth	r0, r0
 800bcc2:	9001      	str	r0, [sp, #4]
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	0022      	movs	r2, r4
 800bcc8:	4b08      	ldr	r3, [pc, #32]	; (800bcec <acc_cpd_linear_sweep_load_program+0x83c>)
 800bcca:	9903      	ldr	r1, [sp, #12]
 800bccc:	0038      	movs	r0, r7
 800bcce:	36b4      	adds	r6, #180	; 0xb4
 800bcd0:	f7fe feaa 	bl	800aa28 <acc_confprogram_patch_offset>
 800bcd4:	6833      	ldr	r3, [r6, #0]
 800bcd6:	0022      	movs	r2, r4
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	2353      	movs	r3, #83	; 0x53
 800bcdc:	9903      	ldr	r1, [sp, #12]
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	0038      	movs	r0, r7
 800bce2:	4b02      	ldr	r3, [pc, #8]	; (800bcec <acc_cpd_linear_sweep_load_program+0x83c>)
 800bce4:	f7fe fea0 	bl	800aa28 <acc_confprogram_patch_offset>
 800bce8:	6833      	ldr	r3, [r6, #0]
 800bcea:	e013      	b.n	800bd14 <acc_cpd_linear_sweep_load_program+0x864>
 800bcec:	08018a34 	.word	0x08018a34
 800bcf0:	000004e4 	.word	0x000004e4
 800bcf4:	200003b8 	.word	0x200003b8
 800bcf8:	0801d09c 	.word	0x0801d09c
 800bcfc:	0801b19e 	.word	0x0801b19e
 800bd00:	0801d0d3 	.word	0x0801d0d3
 800bd04:	0801d10a 	.word	0x0801d10a
 800bd08:	0801d12f 	.word	0x0801d12f
 800bd0c:	0801d154 	.word	0x0801d154
 800bd10:	3751b717 	.word	0x3751b717
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00b      	beq.n	800bd30 <acc_cpd_linear_sweep_load_program+0x880>
 800bd18:	002b      	movs	r3, r5
 800bd1a:	33b8      	adds	r3, #184	; 0xb8
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	0022      	movs	r2, r4
 800bd20:	9301      	str	r3, [sp, #4]
 800bd22:	2332      	movs	r3, #50	; 0x32
 800bd24:	9903      	ldr	r1, [sp, #12]
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	0038      	movs	r0, r7
 800bd2a:	4b12      	ldr	r3, [pc, #72]	; (800bd74 <acc_cpd_linear_sweep_load_program+0x8c4>)
 800bd2c:	f7fe fe7c 	bl	800aa28 <acc_confprogram_patch_offset>
 800bd30:	466b      	mov	r3, sp
 800bd32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd34:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800bd36:	9808      	ldr	r0, [sp, #32]
 800bd38:	9b05      	ldr	r3, [sp, #20]
 800bd3a:	f7f7 f8f9 	bl	8002f30 <acc_sensor_r2_load_confmem>
 800bd3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd40:	9b04      	ldr	r3, [sp, #16]
 800bd42:	4694      	mov	ip, r2
 800bd44:	4463      	add	r3, ip
 800bd46:	9304      	str	r3, [sp, #16]
 800bd48:	9a04      	ldr	r2, [sp, #16]
 800bd4a:	4b0b      	ldr	r3, [pc, #44]	; (800bd78 <acc_cpd_linear_sweep_load_program+0x8c8>)
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d801      	bhi.n	800bd54 <acc_cpd_linear_sweep_load_program+0x8a4>
 800bd50:	f7ff fbdc 	bl	800b50c <acc_cpd_linear_sweep_load_program+0x5c>
 800bd54:	4b09      	ldr	r3, [pc, #36]	; (800bd7c <acc_cpd_linear_sweep_load_program+0x8cc>)
 800bd56:	001a      	movs	r2, r3
 800bd58:	3260      	adds	r2, #96	; 0x60
 800bd5a:	7812      	ldrb	r2, [r2, #0]
 800bd5c:	2a03      	cmp	r2, #3
 800bd5e:	d904      	bls.n	800bd6a <acc_cpd_linear_sweep_load_program+0x8ba>
 800bd60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd62:	4a07      	ldr	r2, [pc, #28]	; (800bd80 <acc_cpd_linear_sweep_load_program+0x8d0>)
 800bd64:	4907      	ldr	r1, [pc, #28]	; (800bd84 <acc_cpd_linear_sweep_load_program+0x8d4>)
 800bd66:	2004      	movs	r0, #4
 800bd68:	4798      	blx	r3
 800bd6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bd6c:	b013      	add	sp, #76	; 0x4c
 800bd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd70:	9201      	str	r2, [sp, #4]
 800bd72:	e787      	b.n	800bc84 <acc_cpd_linear_sweep_load_program+0x7d4>
 800bd74:	08018a34 	.word	0x08018a34
 800bd78:	0000070f 	.word	0x0000070f
 800bd7c:	200003b8 	.word	0x200003b8
 800bd80:	0801d16e 	.word	0x0801d16e
 800bd84:	0801b19e 	.word	0x0801b19e

0800bd88 <acc_probes_execute_primitive_probe>:
 800bd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd8a:	9102      	str	r1, [sp, #8]
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	ab01      	add	r3, sp, #4
 800bd90:	7018      	strb	r0, [r3, #0]
 800bd92:	000a      	movs	r2, r1
 800bd94:	0018      	movs	r0, r3
 800bd96:	9103      	str	r1, [sp, #12]
 800bd98:	f7ff fb7c 	bl	800b494 <acc_probes_execute>
 800bd9c:	b005      	add	sp, #20
 800bd9e:	bd00      	pop	{pc}

0800bda0 <acc_probes_execute_uint16>:
 800bda0:	b530      	push	{r4, r5, lr}
 800bda2:	000c      	movs	r4, r1
 800bda4:	0011      	movs	r1, r2
 800bda6:	2201      	movs	r2, #1
 800bda8:	0005      	movs	r5, r0
 800bdaa:	b085      	sub	sp, #20
 800bdac:	a801      	add	r0, sp, #4
 800bdae:	6082      	str	r2, [r0, #8]
 800bdb0:	005a      	lsls	r2, r3, #1
 800bdb2:	7005      	strb	r5, [r0, #0]
 800bdb4:	6044      	str	r4, [r0, #4]
 800bdb6:	f7ff fb6d 	bl	800b494 <acc_probes_execute>
 800bdba:	b005      	add	sp, #20
 800bdbc:	bd30      	pop	{r4, r5, pc}

0800bdbe <acc_cpd_cbank_and_vana_calibration>:
 800bdbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc0:	0014      	movs	r4, r2
 800bdc2:	2600      	movs	r6, #0
 800bdc4:	b08b      	sub	sp, #44	; 0x2c
 800bdc6:	9305      	str	r3, [sp, #20]
 800bdc8:	ab09      	add	r3, sp, #36	; 0x24
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	9004      	str	r0, [sp, #16]
 800bdce:	9106      	str	r1, [sp, #24]
 800bdd0:	000a      	movs	r2, r1
 800bdd2:	ab08      	add	r3, sp, #32
 800bdd4:	0001      	movs	r1, r0
 800bdd6:	6820      	ldr	r0, [r4, #0]
 800bdd8:	9608      	str	r6, [sp, #32]
 800bdda:	9609      	str	r6, [sp, #36]	; 0x24
 800bddc:	f7ff faa2 	bl	800b324 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 800bde0:	0005      	movs	r5, r0
 800bde2:	42b0      	cmp	r0, r6
 800bde4:	d108      	bne.n	800bdf8 <acc_cpd_cbank_and_vana_calibration+0x3a>
 800bde6:	4ba2      	ldr	r3, [pc, #648]	; (800c070 <acc_cpd_cbank_and_vana_calibration+0x2b2>)
 800bde8:	4aa2      	ldr	r2, [pc, #648]	; (800c074 <acc_cpd_cbank_and_vana_calibration+0x2b6>)
 800bdea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdec:	49a2      	ldr	r1, [pc, #648]	; (800c078 <acc_cpd_cbank_and_vana_calibration+0x2ba>)
 800bdee:	0028      	movs	r0, r5
 800bdf0:	4798      	blx	r3
 800bdf2:	0028      	movs	r0, r5
 800bdf4:	b00b      	add	sp, #44	; 0x2c
 800bdf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdf8:	4ba0      	ldr	r3, [pc, #640]	; (800c07c <acc_cpd_cbank_and_vana_calibration+0x2be>)
 800bdfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdfc:	9d08      	ldr	r5, [sp, #32]
 800bdfe:	1b9b      	subs	r3, r3, r6
 800be00:	9203      	str	r2, [sp, #12]
 800be02:	429a      	cmp	r2, r3
 800be04:	d900      	bls.n	800be08 <acc_cpd_cbank_and_vana_calibration+0x4a>
 800be06:	9303      	str	r3, [sp, #12]
 800be08:	0873      	lsrs	r3, r6, #1
 800be0a:	9307      	str	r3, [sp, #28]
 800be0c:	9b03      	ldr	r3, [sp, #12]
 800be0e:	0029      	movs	r1, r5
 800be10:	085a      	lsrs	r2, r3, #1
 800be12:	0873      	lsrs	r3, r6, #1
 800be14:	0098      	lsls	r0, r3, #2
 800be16:	4b9a      	ldr	r3, [pc, #616]	; (800c080 <acc_cpd_cbank_and_vana_calibration+0x2c2>)
 800be18:	18c0      	adds	r0, r0, r3
 800be1a:	f7fe fdbd 	bl	800a998 <acc_confprogram_copy>
 800be1e:	466b      	mov	r3, sp
 800be20:	899b      	ldrh	r3, [r3, #12]
 800be22:	4f98      	ldr	r7, [pc, #608]	; (800c084 <acc_cpd_cbank_and_vana_calibration+0x2c6>)
 800be24:	9302      	str	r3, [sp, #8]
 800be26:	6863      	ldr	r3, [r4, #4]
 800be28:	b2b1      	uxth	r1, r6
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	231b      	movs	r3, #27
 800be2e:	9a02      	ldr	r2, [sp, #8]
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	0028      	movs	r0, r5
 800be34:	003b      	movs	r3, r7
 800be36:	f7fe fdf7 	bl	800aa28 <acc_confprogram_patch_offset>
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	b2b1      	uxth	r1, r6
 800be3e:	9301      	str	r3, [sp, #4]
 800be40:	2319      	movs	r3, #25
 800be42:	9a02      	ldr	r2, [sp, #8]
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	0028      	movs	r0, r5
 800be48:	003b      	movs	r3, r7
 800be4a:	f7fe fded 	bl	800aa28 <acc_confprogram_patch_offset>
 800be4e:	68e3      	ldr	r3, [r4, #12]
 800be50:	b2b1      	uxth	r1, r6
 800be52:	9301      	str	r3, [sp, #4]
 800be54:	231a      	movs	r3, #26
 800be56:	9a02      	ldr	r2, [sp, #8]
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	0028      	movs	r0, r5
 800be5c:	003b      	movs	r3, r7
 800be5e:	f7fe fde3 	bl	800aa28 <acc_confprogram_patch_offset>
 800be62:	8a23      	ldrh	r3, [r4, #16]
 800be64:	b2b1      	uxth	r1, r6
 800be66:	9301      	str	r3, [sp, #4]
 800be68:	2317      	movs	r3, #23
 800be6a:	9a02      	ldr	r2, [sp, #8]
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	0028      	movs	r0, r5
 800be70:	003b      	movs	r3, r7
 800be72:	f7fe fdd9 	bl	800aa28 <acc_confprogram_patch_offset>
 800be76:	2310      	movs	r3, #16
 800be78:	9301      	str	r3, [sp, #4]
 800be7a:	2300      	movs	r3, #0
 800be7c:	b2b1      	uxth	r1, r6
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	9a02      	ldr	r2, [sp, #8]
 800be82:	003b      	movs	r3, r7
 800be84:	0028      	movs	r0, r5
 800be86:	f7fe fdcf 	bl	800aa28 <acc_confprogram_patch_offset>
 800be8a:	466b      	mov	r3, sp
 800be8c:	9a04      	ldr	r2, [sp, #16]
 800be8e:	8b99      	ldrh	r1, [r3, #28]
 800be90:	6820      	ldr	r0, [r4, #0]
 800be92:	9b03      	ldr	r3, [sp, #12]
 800be94:	f7f7 f84c 	bl	8002f30 <acc_sensor_r2_load_confmem>
 800be98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be9a:	18f6      	adds	r6, r6, r3
 800be9c:	4b7a      	ldr	r3, [pc, #488]	; (800c088 <acc_cpd_cbank_and_vana_calibration+0x2ca>)
 800be9e:	429e      	cmp	r6, r3
 800bea0:	d9aa      	bls.n	800bdf8 <acc_cpd_cbank_and_vana_calibration+0x3a>
 800bea2:	2118      	movs	r1, #24
 800bea4:	6820      	ldr	r0, [r4, #0]
 800bea6:	f7f6 feae 	bl	8002c06 <acc_sensor_protocol_r2_run_program>
 800beaa:	1e05      	subs	r5, r0, #0
 800beac:	d103      	bne.n	800beb6 <acc_cpd_cbank_and_vana_calibration+0xf8>
 800beae:	4b70      	ldr	r3, [pc, #448]	; (800c070 <acc_cpd_cbank_and_vana_calibration+0x2b2>)
 800beb0:	4a76      	ldr	r2, [pc, #472]	; (800c08c <acc_cpd_cbank_and_vana_calibration+0x2ce>)
 800beb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800beb4:	e79a      	b.n	800bdec <acc_cpd_cbank_and_vana_calibration+0x2e>
 800beb6:	21fa      	movs	r1, #250	; 0xfa
 800beb8:	6826      	ldr	r6, [r4, #0]
 800beba:	2300      	movs	r3, #0
 800bebc:	2203      	movs	r2, #3
 800bebe:	00c9      	lsls	r1, r1, #3
 800bec0:	0030      	movs	r0, r6
 800bec2:	f7f6 fe63 	bl	8002b8c <acc_sensor_protocol_r2_wait_for_specific_event>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d047      	beq.n	800bf5a <acc_cpd_cbank_and_vana_calibration+0x19c>
 800beca:	ad09      	add	r5, sp, #36	; 0x24
 800becc:	002a      	movs	r2, r5
 800bece:	219d      	movs	r1, #157	; 0x9d
 800bed0:	0030      	movs	r0, r6
 800bed2:	f7fe ff15 	bl	800ad00 <internal_reg_read.lto_priv.640>
 800bed6:	2207      	movs	r2, #7
 800bed8:	882b      	ldrh	r3, [r5, #0]
 800beda:	2006      	movs	r0, #6
 800bedc:	4013      	ands	r3, r2
 800bede:	802b      	strh	r3, [r5, #0]
 800bee0:	002a      	movs	r2, r5
 800bee2:	2301      	movs	r3, #1
 800bee4:	0031      	movs	r1, r6
 800bee6:	f7ff ff5b 	bl	800bda0 <acc_probes_execute_uint16>
 800beea:	0030      	movs	r0, r6
 800beec:	f7f5 fb14 	bl	8001518 <acc_sensor_protocol_r2_ack_event>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d032      	beq.n	800bf5a <acc_cpd_cbank_and_vana_calibration+0x19c>
 800bef4:	882e      	ldrh	r6, [r5, #0]
 800bef6:	9b05      	ldr	r3, [sp, #20]
 800bef8:	601e      	str	r6, [r3, #0]
 800befa:	23c0      	movs	r3, #192	; 0xc0
 800befc:	6824      	ldr	r4, [r4, #0]
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	802b      	strh	r3, [r5, #0]
 800bf02:	0020      	movs	r0, r4
 800bf04:	f7f6 fe72 	bl	8002bec <acc_sensor_protocol_r2_is_sensor_running>
 800bf08:	1e05      	subs	r5, r0, #0
 800bf0a:	d12e      	bne.n	800bf6a <acc_cpd_cbank_and_vana_calibration+0x1ac>
 800bf0c:	2311      	movs	r3, #17
 800bf0e:	003a      	movs	r2, r7
 800bf10:	495b      	ldr	r1, [pc, #364]	; (800c080 <acc_cpd_cbank_and_vana_calibration+0x2c2>)
 800bf12:	0020      	movs	r0, r4
 800bf14:	9600      	str	r6, [sp, #0]
 800bf16:	f7fd f98f 	bl	8009238 <acc_confprogram_live_patch.constprop.16>
 800bf1a:	9500      	str	r5, [sp, #0]
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	003a      	movs	r2, r7
 800bf20:	4957      	ldr	r1, [pc, #348]	; (800c080 <acc_cpd_cbank_and_vana_calibration+0x2c2>)
 800bf22:	0020      	movs	r0, r4
 800bf24:	f7fd f988 	bl	8009238 <acc_confprogram_live_patch.constprop.16>
 800bf28:	9502      	str	r5, [sp, #8]
 800bf2a:	9a02      	ldr	r2, [sp, #8]
 800bf2c:	ab09      	add	r3, sp, #36	; 0x24
 800bf2e:	5cd7      	ldrb	r7, [r2, r3]
 800bf30:	4953      	ldr	r1, [pc, #332]	; (800c080 <acc_cpd_cbank_and_vana_calibration+0x2c2>)
 800bf32:	0020      	movs	r0, r4
 800bf34:	9700      	str	r7, [sp, #0]
 800bf36:	231f      	movs	r3, #31
 800bf38:	4a52      	ldr	r2, [pc, #328]	; (800c084 <acc_cpd_cbank_and_vana_calibration+0x2c6>)
 800bf3a:	f7fd f97d 	bl	8009238 <acc_confprogram_live_patch.constprop.16>
 800bf3e:	21e8      	movs	r1, #232	; 0xe8
 800bf40:	0020      	movs	r0, r4
 800bf42:	0049      	lsls	r1, r1, #1
 800bf44:	f7f6 fe5f 	bl	8002c06 <acc_sensor_protocol_r2_run_program>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d119      	bne.n	800bf80 <acc_cpd_cbank_and_vana_calibration+0x1c2>
 800bf4c:	4b48      	ldr	r3, [pc, #288]	; (800c070 <acc_cpd_cbank_and_vana_calibration+0x2b2>)
 800bf4e:	4a50      	ldr	r2, [pc, #320]	; (800c090 <acc_cpd_cbank_and_vana_calibration+0x2d2>)
 800bf50:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800bf52:	003b      	movs	r3, r7
 800bf54:	4948      	ldr	r1, [pc, #288]	; (800c078 <acc_cpd_cbank_and_vana_calibration+0x2ba>)
 800bf56:	47a0      	blx	r4
 800bf58:	e00e      	b.n	800bf78 <acc_cpd_cbank_and_vana_calibration+0x1ba>
 800bf5a:	4b45      	ldr	r3, [pc, #276]	; (800c070 <acc_cpd_cbank_and_vana_calibration+0x2b2>)
 800bf5c:	4a4d      	ldr	r2, [pc, #308]	; (800c094 <acc_cpd_cbank_and_vana_calibration+0x2d6>)
 800bf5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf60:	4945      	ldr	r1, [pc, #276]	; (800c078 <acc_cpd_cbank_and_vana_calibration+0x2ba>)
 800bf62:	2000      	movs	r0, #0
 800bf64:	4798      	blx	r3
 800bf66:	2500      	movs	r5, #0
 800bf68:	e743      	b.n	800bdf2 <acc_cpd_cbank_and_vana_calibration+0x34>
 800bf6a:	4b41      	ldr	r3, [pc, #260]	; (800c070 <acc_cpd_cbank_and_vana_calibration+0x2b2>)
 800bf6c:	4a4a      	ldr	r2, [pc, #296]	; (800c098 <acc_cpd_cbank_and_vana_calibration+0x2da>)
 800bf6e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800bf70:	4941      	ldr	r1, [pc, #260]	; (800c078 <acc_cpd_cbank_and_vana_calibration+0x2ba>)
 800bf72:	0023      	movs	r3, r4
 800bf74:	2000      	movs	r0, #0
 800bf76:	47a8      	blx	r5
 800bf78:	4b3d      	ldr	r3, [pc, #244]	; (800c070 <acc_cpd_cbank_and_vana_calibration+0x2b2>)
 800bf7a:	4a48      	ldr	r2, [pc, #288]	; (800c09c <acc_cpd_cbank_and_vana_calibration+0x2de>)
 800bf7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf7e:	e7ef      	b.n	800bf60 <acc_cpd_cbank_and_vana_calibration+0x1a2>
 800bf80:	21fa      	movs	r1, #250	; 0xfa
 800bf82:	2300      	movs	r3, #0
 800bf84:	2209      	movs	r2, #9
 800bf86:	00c9      	lsls	r1, r1, #3
 800bf88:	0020      	movs	r0, r4
 800bf8a:	f7f6 fdff 	bl	8002b8c <acc_sensor_protocol_r2_wait_for_specific_event>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d008      	beq.n	800bfa4 <acc_cpd_cbank_and_vana_calibration+0x1e6>
 800bf92:	9b06      	ldr	r3, [sp, #24]
 800bf94:	2b25      	cmp	r3, #37	; 0x25
 800bf96:	d80c      	bhi.n	800bfb2 <acc_cpd_cbank_and_vana_calibration+0x1f4>
 800bf98:	4b35      	ldr	r3, [pc, #212]	; (800c070 <acc_cpd_cbank_and_vana_calibration+0x2b2>)
 800bf9a:	4a41      	ldr	r2, [pc, #260]	; (800c0a0 <acc_cpd_cbank_and_vana_calibration+0x2e2>)
 800bf9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf9e:	4936      	ldr	r1, [pc, #216]	; (800c078 <acc_cpd_cbank_and_vana_calibration+0x2ba>)
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	4798      	blx	r3
 800bfa4:	4b32      	ldr	r3, [pc, #200]	; (800c070 <acc_cpd_cbank_and_vana_calibration+0x2b2>)
 800bfa6:	4a3f      	ldr	r2, [pc, #252]	; (800c0a4 <acc_cpd_cbank_and_vana_calibration+0x2e6>)
 800bfa8:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800bfaa:	4933      	ldr	r1, [pc, #204]	; (800c078 <acc_cpd_cbank_and_vana_calibration+0x2ba>)
 800bfac:	003b      	movs	r3, r7
 800bfae:	2000      	movs	r0, #0
 800bfb0:	e7d1      	b.n	800bf56 <acc_cpd_cbank_and_vana_calibration+0x198>
 800bfb2:	2210      	movs	r2, #16
 800bfb4:	9904      	ldr	r1, [sp, #16]
 800bfb6:	0020      	movs	r0, r4
 800bfb8:	f7fd f8ea 	bl	8009190 <internal_buffer_processed_read.constprop.30>
 800bfbc:	2310      	movs	r3, #16
 800bfbe:	0002      	movs	r2, r0
 800bfc0:	0005      	movs	r5, r0
 800bfc2:	0021      	movs	r1, r4
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	f7ff feeb 	bl	800bda0 <acc_probes_execute_uint16>
 800bfca:	0020      	movs	r0, r4
 800bfcc:	f7f5 faa4 	bl	8001518 <acc_sensor_protocol_r2_ack_event>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d0e7      	beq.n	800bfa4 <acc_cpd_cbank_and_vana_calibration+0x1e6>
 800bfd4:	002b      	movs	r3, r5
 800bfd6:	331e      	adds	r3, #30
 800bfd8:	9303      	str	r3, [sp, #12]
 800bfda:	2300      	movs	r3, #0
 800bfdc:	002a      	movs	r2, r5
 800bfde:	0018      	movs	r0, r3
 800bfe0:	8816      	ldrh	r6, [r2, #0]
 800bfe2:	8851      	ldrh	r1, [r2, #2]
 800bfe4:	46b4      	mov	ip, r6
 800bfe6:	1840      	adds	r0, r0, r1
 800bfe8:	1b8e      	subs	r6, r1, r6
 800bfea:	4561      	cmp	r1, ip
 800bfec:	d201      	bcs.n	800bff2 <acc_cpd_cbank_and_vana_calibration+0x234>
 800bfee:	4666      	mov	r6, ip
 800bff0:	1a76      	subs	r6, r6, r1
 800bff2:	42b3      	cmp	r3, r6
 800bff4:	d200      	bcs.n	800bff8 <acc_cpd_cbank_and_vana_calibration+0x23a>
 800bff6:	0033      	movs	r3, r6
 800bff8:	9903      	ldr	r1, [sp, #12]
 800bffa:	3202      	adds	r2, #2
 800bffc:	4291      	cmp	r1, r2
 800bffe:	d1ef      	bne.n	800bfe0 <acc_cpd_cbank_and_vana_calibration+0x222>
 800c000:	882a      	ldrh	r2, [r5, #0]
 800c002:	4929      	ldr	r1, [pc, #164]	; (800c0a8 <acc_cpd_cbank_and_vana_calibration+0x2ea>)
 800c004:	1810      	adds	r0, r2, r0
 800c006:	4a29      	ldr	r2, [pc, #164]	; (800c0ac <acc_cpd_cbank_and_vana_calibration+0x2ee>)
 800c008:	0900      	lsrs	r0, r0, #4
 800c00a:	1882      	adds	r2, r0, r2
 800c00c:	b292      	uxth	r2, r2
 800c00e:	2500      	movs	r5, #0
 800c010:	428a      	cmp	r2, r1
 800c012:	d804      	bhi.n	800c01e <acc_cpd_cbank_and_vana_calibration+0x260>
 800c014:	22c8      	movs	r2, #200	; 0xc8
 800c016:	0092      	lsls	r2, r2, #2
 800c018:	429a      	cmp	r2, r3
 800c01a:	416d      	adcs	r5, r5
 800c01c:	b2ed      	uxtb	r5, r5
 800c01e:	4a14      	ldr	r2, [pc, #80]	; (800c070 <acc_cpd_cbank_and_vana_calibration+0x2b2>)
 800c020:	0011      	movs	r1, r2
 800c022:	3160      	adds	r1, #96	; 0x60
 800c024:	7809      	ldrb	r1, [r1, #0]
 800c026:	2903      	cmp	r1, #3
 800c028:	d908      	bls.n	800c03c <acc_cpd_cbank_and_vana_calibration+0x27e>
 800c02a:	b280      	uxth	r0, r0
 800c02c:	9301      	str	r3, [sp, #4]
 800c02e:	9000      	str	r0, [sp, #0]
 800c030:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800c032:	0023      	movs	r3, r4
 800c034:	4a1e      	ldr	r2, [pc, #120]	; (800c0b0 <acc_cpd_cbank_and_vana_calibration+0x2f2>)
 800c036:	4910      	ldr	r1, [pc, #64]	; (800c078 <acc_cpd_cbank_and_vana_calibration+0x2ba>)
 800c038:	2004      	movs	r0, #4
 800c03a:	47b0      	blx	r6
 800c03c:	2d00      	cmp	r5, #0
 800c03e:	d011      	beq.n	800c064 <acc_cpd_cbank_and_vana_calibration+0x2a6>
 800c040:	9b05      	ldr	r3, [sp, #20]
 800c042:	711f      	strb	r7, [r3, #4]
 800c044:	4b0a      	ldr	r3, [pc, #40]	; (800c070 <acc_cpd_cbank_and_vana_calibration+0x2b2>)
 800c046:	001a      	movs	r2, r3
 800c048:	3260      	adds	r2, #96	; 0x60
 800c04a:	7812      	ldrb	r2, [r2, #0]
 800c04c:	2a01      	cmp	r2, #1
 800c04e:	d800      	bhi.n	800c052 <acc_cpd_cbank_and_vana_calibration+0x294>
 800c050:	e6cf      	b.n	800bdf2 <acc_cpd_cbank_and_vana_calibration+0x34>
 800c052:	9700      	str	r7, [sp, #0]
 800c054:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800c056:	9b05      	ldr	r3, [sp, #20]
 800c058:	4a16      	ldr	r2, [pc, #88]	; (800c0b4 <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4906      	ldr	r1, [pc, #24]	; (800c078 <acc_cpd_cbank_and_vana_calibration+0x2ba>)
 800c05e:	2002      	movs	r0, #2
 800c060:	47a0      	blx	r4
 800c062:	e6c6      	b.n	800bdf2 <acc_cpd_cbank_and_vana_calibration+0x34>
 800c064:	9b02      	ldr	r3, [sp, #8]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d086      	beq.n	800bf78 <acc_cpd_cbank_and_vana_calibration+0x1ba>
 800c06a:	2301      	movs	r3, #1
 800c06c:	9302      	str	r3, [sp, #8]
 800c06e:	e75c      	b.n	800bf2a <acc_cpd_cbank_and_vana_calibration+0x16c>
 800c070:	200003b8 	.word	0x200003b8
 800c074:	0801d191 	.word	0x0801d191
 800c078:	0801d1d2 	.word	0x0801d1d2
 800c07c:	00000572 	.word	0x00000572
 800c080:	080190fc 	.word	0x080190fc
 800c084:	0801890c 	.word	0x0801890c
 800c088:	00000571 	.word	0x00000571
 800c08c:	0801d1f1 	.word	0x0801d1f1
 800c090:	0801d23b 	.word	0x0801d23b
 800c094:	0801d223 	.word	0x0801d223
 800c098:	0801c0f5 	.word	0x0801c0f5
 800c09c:	0801d2c4 	.word	0x0801d2c4
 800c0a0:	0801be3d 	.word	0x0801be3d
 800c0a4:	0801d299 	.word	0x0801d299
 800c0a8:	00000bb8 	.word	0x00000bb8
 800c0ac:	ffff86e8 	.word	0xffff86e8
 800c0b0:	0801d27b 	.word	0x0801d27b
 800c0b4:	0801d2db 	.word	0x0801d2db

0800c0b8 <acc_element_source_adc_inject_data>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	0004      	movs	r4, r0
 800c0bc:	0015      	movs	r5, r2
 800c0be:	6940      	ldr	r0, [r0, #20]
 800c0c0:	f008 fcf6 	bl	8014ab0 <memcpy>
 800c0c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0c6:	4a05      	ldr	r2, [pc, #20]	; (800c0dc <acc_element_source_adc_inject_data+0x24>)
 800c0c8:	601d      	str	r5, [r3, #0]
 800c0ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c0cc:	6820      	ldr	r0, [r4, #0]
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	6a23      	ldr	r3, [r4, #32]
 800c0d4:	601a      	str	r2, [r3, #0]
 800c0d6:	6843      	ldr	r3, [r0, #4]
 800c0d8:	4798      	blx	r3
 800c0da:	bd70      	pop	{r4, r5, r6, pc}
 800c0dc:	51645c3c 	.word	0x51645c3c

0800c0e0 <acc_element_source_adc_produce>:
 800c0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c0e4:	b08d      	sub	sp, #52	; 0x34
 800c0e6:	0005      	movs	r5, r0
 800c0e8:	2c00      	cmp	r4, #0
 800c0ea:	d100      	bne.n	800c0ee <acc_element_source_adc_produce+0xe>
 800c0ec:	e09e      	b.n	800c22c <acc_element_source_adc_produce+0x14c>
 800c0ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c0f0:	4a53      	ldr	r2, [pc, #332]	; (800c240 <acc_element_source_adc_produce+0x160>)
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	6a03      	ldr	r3, [r0, #32]
 800c0f6:	69a2      	ldr	r2, [r4, #24]
 800c0f8:	601a      	str	r2, [r3, #0]
 800c0fa:	6943      	ldr	r3, [r0, #20]
 800c0fc:	9303      	str	r3, [sp, #12]
 800c0fe:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800c100:	9304      	str	r3, [sp, #16]
 800c102:	69a3      	ldr	r3, [r4, #24]
 800c104:	9301      	str	r3, [sp, #4]
 800c106:	7866      	ldrb	r6, [r4, #1]
 800c108:	2e00      	cmp	r6, #0
 800c10a:	d000      	beq.n	800c10e <acc_element_source_adc_produce+0x2e>
 800c10c:	e089      	b.n	800c222 <acc_element_source_adc_produce+0x142>
 800c10e:	7823      	ldrb	r3, [r4, #0]
 800c110:	9302      	str	r3, [sp, #8]
 800c112:	2b02      	cmp	r3, #2
 800c114:	d134      	bne.n	800c180 <acc_element_source_adc_produce+0xa0>
 800c116:	0020      	movs	r0, r4
 800c118:	f7f7 fe1c 	bl	8003d54 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.248>
 800c11c:	2800      	cmp	r0, #0
 800c11e:	d028      	beq.n	800c172 <acc_element_source_adc_produce+0x92>
 800c120:	0020      	movs	r0, r4
 800c122:	2210      	movs	r2, #16
 800c124:	2100      	movs	r1, #0
 800c126:	3008      	adds	r0, #8
 800c128:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800c12a:	f006 f89d 	bl	8012268 <memset>
 800c12e:	0020      	movs	r0, r4
 800c130:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c132:	0039      	movs	r1, r7
 800c134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c136:	aa08      	add	r2, sp, #32
 800c138:	3018      	adds	r0, #24
 800c13a:	4798      	blx	r3
 800c13c:	ab08      	add	r3, sp, #32
 800c13e:	881b      	ldrh	r3, [r3, #0]
 800c140:	60e0      	str	r0, [r4, #12]
 800c142:	9305      	str	r3, [sp, #20]
 800c144:	8163      	strh	r3, [r4, #10]
 800c146:	aa08      	add	r2, sp, #32
 800c148:	7892      	ldrb	r2, [r2, #2]
 800c14a:	a908      	add	r1, sp, #32
 800c14c:	7222      	strb	r2, [r4, #8]
 800c14e:	78c9      	ldrb	r1, [r1, #3]
 800c150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c152:	7261      	strb	r1, [r4, #9]
 800c154:	468c      	mov	ip, r1
 800c156:	a908      	add	r1, sp, #32
 800c158:	7b0f      	ldrb	r7, [r1, #12]
 800c15a:	7427      	strb	r7, [r4, #16]
 800c15c:	7909      	ldrb	r1, [r1, #4]
 800c15e:	9306      	str	r3, [sp, #24]
 800c160:	7461      	strb	r1, [r4, #17]
 800c162:	6163      	str	r3, [r4, #20]
 800c164:	2800      	cmp	r0, #0
 800c166:	d163      	bne.n	800c230 <acc_element_source_adc_produce+0x150>
 800c168:	4b36      	ldr	r3, [pc, #216]	; (800c244 <acc_element_source_adc_produce+0x164>)
 800c16a:	4a37      	ldr	r2, [pc, #220]	; (800c248 <acc_element_source_adc_produce+0x168>)
 800c16c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c16e:	4937      	ldr	r1, [pc, #220]	; (800c24c <acc_element_source_adc_produce+0x16c>)
 800c170:	4798      	blx	r3
 800c172:	4b34      	ldr	r3, [pc, #208]	; (800c244 <acc_element_source_adc_produce+0x164>)
 800c174:	4a36      	ldr	r2, [pc, #216]	; (800c250 <acc_element_source_adc_produce+0x170>)
 800c176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c178:	4936      	ldr	r1, [pc, #216]	; (800c254 <acc_element_source_adc_produce+0x174>)
 800c17a:	2000      	movs	r0, #0
 800c17c:	4798      	blx	r3
 800c17e:	e046      	b.n	800c20e <acc_element_source_adc_produce+0x12e>
 800c180:	9b02      	ldr	r3, [sp, #8]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d1cc      	bne.n	800c120 <acc_element_source_adc_produce+0x40>
 800c186:	4b2f      	ldr	r3, [pc, #188]	; (800c244 <acc_element_source_adc_produce+0x164>)
 800c188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d0c8      	beq.n	800c120 <acc_element_source_adc_produce+0x40>
 800c18e:	9801      	ldr	r0, [sp, #4]
 800c190:	4798      	blx	r3
 800c192:	e7c5      	b.n	800c120 <acc_element_source_adc_produce+0x40>
 800c194:	9b04      	ldr	r3, [sp, #16]
 800c196:	9805      	ldr	r0, [sp, #20]
 800c198:	4283      	cmp	r3, r0
 800c19a:	d002      	beq.n	800c1a2 <acc_element_source_adc_produce+0xc2>
 800c19c:	21ca      	movs	r1, #202	; 0xca
 800c19e:	31ff      	adds	r1, #255	; 0xff
 800c1a0:	e04b      	b.n	800c23a <acc_element_source_adc_produce+0x15a>
 800c1a2:	4663      	mov	r3, ip
 800c1a4:	9305      	str	r3, [sp, #20]
 800c1a6:	2348      	movs	r3, #72	; 0x48
 800c1a8:	9207      	str	r2, [sp, #28]
 800c1aa:	9a01      	ldr	r2, [sp, #4]
 800c1ac:	000e      	movs	r6, r1
 800c1ae:	4353      	muls	r3, r2
 800c1b0:	4a29      	ldr	r2, [pc, #164]	; (800c258 <acc_element_source_adc_produce+0x178>)
 800c1b2:	3b48      	subs	r3, #72	; 0x48
 800c1b4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800c1b6:	18d3      	adds	r3, r2, r3
 800c1b8:	001a      	movs	r2, r3
 800c1ba:	3242      	adds	r2, #66	; 0x42
 800c1bc:	7011      	strb	r1, [r2, #0]
 800c1be:	9a06      	ldr	r2, [sp, #24]
 800c1c0:	645a      	str	r2, [r3, #68]	; 0x44
 800c1c2:	9b02      	ldr	r3, [sp, #8]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d125      	bne.n	800c214 <acc_element_source_adc_produce+0x134>
 800c1c8:	9801      	ldr	r0, [sp, #4]
 800c1ca:	f7f6 fee5 	bl	8002f98 <acc_rss_integration_sensor_device_power_off>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	70e3      	strb	r3, [r4, #3]
 800c1d2:	7863      	ldrb	r3, [r4, #1]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d105      	bne.n	800c1e4 <acc_element_source_adc_produce+0x104>
 800c1d8:	9b04      	ldr	r3, [sp, #16]
 800c1da:	9a03      	ldr	r2, [sp, #12]
 800c1dc:	9901      	ldr	r1, [sp, #4]
 800c1de:	2002      	movs	r0, #2
 800c1e0:	f7ff fdde 	bl	800bda0 <acc_probes_execute_uint16>
 800c1e4:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 800c1e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	6013      	str	r3, [r2, #0]
 800c1ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c1ee:	9a07      	ldr	r2, [sp, #28]
 800c1f0:	701a      	strb	r2, [r3, #0]
 800c1f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c1f4:	9a05      	ldr	r2, [sp, #20]
 800c1f6:	701a      	strb	r2, [r3, #0]
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	2e00      	cmp	r6, #0
 800c1fc:	d100      	bne.n	800c200 <acc_element_source_adc_produce+0x120>
 800c1fe:	003b      	movs	r3, r7
 800c200:	2601      	movs	r6, #1
 800c202:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800c204:	6828      	ldr	r0, [r5, #0]
 800c206:	4033      	ands	r3, r6
 800c208:	7013      	strb	r3, [r2, #0]
 800c20a:	6843      	ldr	r3, [r0, #4]
 800c20c:	4798      	blx	r3
 800c20e:	0030      	movs	r0, r6
 800c210:	b00d      	add	sp, #52	; 0x34
 800c212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c214:	9b02      	ldr	r3, [sp, #8]
 800c216:	2b01      	cmp	r3, #1
 800c218:	d1db      	bne.n	800c1d2 <acc_element_source_adc_produce+0xf2>
 800c21a:	0020      	movs	r0, r4
 800c21c:	f7f6 fe3c 	bl	8002e98 <acc_sensor_manager_hibernate_enter.lto_priv.247>
 800c220:	e7d7      	b.n	800c1d2 <acc_element_source_adc_produce+0xf2>
 800c222:	2600      	movs	r6, #0
 800c224:	0037      	movs	r7, r6
 800c226:	9605      	str	r6, [sp, #20]
 800c228:	9607      	str	r6, [sp, #28]
 800c22a:	e7d2      	b.n	800c1d2 <acc_element_source_adc_produce+0xf2>
 800c22c:	0026      	movs	r6, r4
 800c22e:	e7ee      	b.n	800c20e <acc_element_source_adc_produce+0x12e>
 800c230:	9b03      	ldr	r3, [sp, #12]
 800c232:	4283      	cmp	r3, r0
 800c234:	d0ae      	beq.n	800c194 <acc_element_source_adc_produce+0xb4>
 800c236:	21e4      	movs	r1, #228	; 0xe4
 800c238:	0049      	lsls	r1, r1, #1
 800c23a:	4808      	ldr	r0, [pc, #32]	; (800c25c <acc_element_source_adc_produce+0x17c>)
 800c23c:	f7f6 fb42 	bl	80028c4 <acc_assert_fail>
 800c240:	51645c3c 	.word	0x51645c3c
 800c244:	200003b8 	.word	0x200003b8
 800c248:	0801d2ee 	.word	0x0801d2ee
 800c24c:	0801b4fc 	.word	0x0801b4fc
 800c250:	0801d306 	.word	0x0801d306
 800c254:	0801d323 	.word	0x0801d323
 800c258:	20000538 	.word	0x20000538
 800c25c:	0801c54f 	.word	0x0801c54f

0800c260 <__aeabi_fadd>:
 800c260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c262:	4647      	mov	r7, r8
 800c264:	46ce      	mov	lr, r9
 800c266:	0243      	lsls	r3, r0, #9
 800c268:	0a5b      	lsrs	r3, r3, #9
 800c26a:	0044      	lsls	r4, r0, #1
 800c26c:	0fc2      	lsrs	r2, r0, #31
 800c26e:	469c      	mov	ip, r3
 800c270:	0048      	lsls	r0, r1, #1
 800c272:	00dd      	lsls	r5, r3, #3
 800c274:	024b      	lsls	r3, r1, #9
 800c276:	0e24      	lsrs	r4, r4, #24
 800c278:	0a5b      	lsrs	r3, r3, #9
 800c27a:	0e00      	lsrs	r0, r0, #24
 800c27c:	b580      	push	{r7, lr}
 800c27e:	4698      	mov	r8, r3
 800c280:	0026      	movs	r6, r4
 800c282:	4691      	mov	r9, r2
 800c284:	0fc9      	lsrs	r1, r1, #31
 800c286:	00db      	lsls	r3, r3, #3
 800c288:	1a27      	subs	r7, r4, r0
 800c28a:	428a      	cmp	r2, r1
 800c28c:	d029      	beq.n	800c2e2 <__aeabi_fadd+0x82>
 800c28e:	2f00      	cmp	r7, #0
 800c290:	dd15      	ble.n	800c2be <__aeabi_fadd+0x5e>
 800c292:	2800      	cmp	r0, #0
 800c294:	d14a      	bne.n	800c32c <__aeabi_fadd+0xcc>
 800c296:	2b00      	cmp	r3, #0
 800c298:	d000      	beq.n	800c29c <__aeabi_fadd+0x3c>
 800c29a:	e095      	b.n	800c3c8 <__aeabi_fadd+0x168>
 800c29c:	08ed      	lsrs	r5, r5, #3
 800c29e:	2cff      	cmp	r4, #255	; 0xff
 800c2a0:	d100      	bne.n	800c2a4 <__aeabi_fadd+0x44>
 800c2a2:	e088      	b.n	800c3b6 <__aeabi_fadd+0x156>
 800c2a4:	026b      	lsls	r3, r5, #9
 800c2a6:	0a5b      	lsrs	r3, r3, #9
 800c2a8:	b2e6      	uxtb	r6, r4
 800c2aa:	025b      	lsls	r3, r3, #9
 800c2ac:	05f6      	lsls	r6, r6, #23
 800c2ae:	0a58      	lsrs	r0, r3, #9
 800c2b0:	4330      	orrs	r0, r6
 800c2b2:	07d2      	lsls	r2, r2, #31
 800c2b4:	4310      	orrs	r0, r2
 800c2b6:	bc0c      	pop	{r2, r3}
 800c2b8:	4690      	mov	r8, r2
 800c2ba:	4699      	mov	r9, r3
 800c2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2be:	2f00      	cmp	r7, #0
 800c2c0:	d000      	beq.n	800c2c4 <__aeabi_fadd+0x64>
 800c2c2:	e087      	b.n	800c3d4 <__aeabi_fadd+0x174>
 800c2c4:	1c60      	adds	r0, r4, #1
 800c2c6:	b2c0      	uxtb	r0, r0
 800c2c8:	2801      	cmp	r0, #1
 800c2ca:	dc00      	bgt.n	800c2ce <__aeabi_fadd+0x6e>
 800c2cc:	e0b6      	b.n	800c43c <__aeabi_fadd+0x1dc>
 800c2ce:	1aee      	subs	r6, r5, r3
 800c2d0:	0172      	lsls	r2, r6, #5
 800c2d2:	d500      	bpl.n	800c2d6 <__aeabi_fadd+0x76>
 800c2d4:	e0c5      	b.n	800c462 <__aeabi_fadd+0x202>
 800c2d6:	2e00      	cmp	r6, #0
 800c2d8:	d13d      	bne.n	800c356 <__aeabi_fadd+0xf6>
 800c2da:	2200      	movs	r2, #0
 800c2dc:	2600      	movs	r6, #0
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e7e3      	b.n	800c2aa <__aeabi_fadd+0x4a>
 800c2e2:	2f00      	cmp	r7, #0
 800c2e4:	dc00      	bgt.n	800c2e8 <__aeabi_fadd+0x88>
 800c2e6:	e096      	b.n	800c416 <__aeabi_fadd+0x1b6>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d05d      	beq.n	800c3a8 <__aeabi_fadd+0x148>
 800c2ec:	2cff      	cmp	r4, #255	; 0xff
 800c2ee:	d060      	beq.n	800c3b2 <__aeabi_fadd+0x152>
 800c2f0:	2280      	movs	r2, #128	; 0x80
 800c2f2:	04d2      	lsls	r2, r2, #19
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	2f1b      	cmp	r7, #27
 800c2f8:	dd00      	ble.n	800c2fc <__aeabi_fadd+0x9c>
 800c2fa:	e0ec      	b.n	800c4d6 <__aeabi_fadd+0x276>
 800c2fc:	2220      	movs	r2, #32
 800c2fe:	1bd2      	subs	r2, r2, r7
 800c300:	0018      	movs	r0, r3
 800c302:	4093      	lsls	r3, r2
 800c304:	40f8      	lsrs	r0, r7
 800c306:	1e5a      	subs	r2, r3, #1
 800c308:	4193      	sbcs	r3, r2
 800c30a:	4303      	orrs	r3, r0
 800c30c:	18ed      	adds	r5, r5, r3
 800c30e:	016b      	lsls	r3, r5, #5
 800c310:	d57b      	bpl.n	800c40a <__aeabi_fadd+0x1aa>
 800c312:	3401      	adds	r4, #1
 800c314:	2cff      	cmp	r4, #255	; 0xff
 800c316:	d100      	bne.n	800c31a <__aeabi_fadd+0xba>
 800c318:	e0b7      	b.n	800c48a <__aeabi_fadd+0x22a>
 800c31a:	2201      	movs	r2, #1
 800c31c:	2607      	movs	r6, #7
 800c31e:	402a      	ands	r2, r5
 800c320:	086b      	lsrs	r3, r5, #1
 800c322:	4d9a      	ldr	r5, [pc, #616]	; (800c58c <__aeabi_fadd+0x32c>)
 800c324:	401d      	ands	r5, r3
 800c326:	4315      	orrs	r5, r2
 800c328:	402e      	ands	r6, r5
 800c32a:	e029      	b.n	800c380 <__aeabi_fadd+0x120>
 800c32c:	2cff      	cmp	r4, #255	; 0xff
 800c32e:	d0b5      	beq.n	800c29c <__aeabi_fadd+0x3c>
 800c330:	2280      	movs	r2, #128	; 0x80
 800c332:	04d2      	lsls	r2, r2, #19
 800c334:	4313      	orrs	r3, r2
 800c336:	2f1b      	cmp	r7, #27
 800c338:	dd00      	ble.n	800c33c <__aeabi_fadd+0xdc>
 800c33a:	e0b2      	b.n	800c4a2 <__aeabi_fadd+0x242>
 800c33c:	2220      	movs	r2, #32
 800c33e:	1bd2      	subs	r2, r2, r7
 800c340:	0019      	movs	r1, r3
 800c342:	4093      	lsls	r3, r2
 800c344:	40f9      	lsrs	r1, r7
 800c346:	1e5a      	subs	r2, r3, #1
 800c348:	4193      	sbcs	r3, r2
 800c34a:	430b      	orrs	r3, r1
 800c34c:	1aed      	subs	r5, r5, r3
 800c34e:	016b      	lsls	r3, r5, #5
 800c350:	d55b      	bpl.n	800c40a <__aeabi_fadd+0x1aa>
 800c352:	01ad      	lsls	r5, r5, #6
 800c354:	09ae      	lsrs	r6, r5, #6
 800c356:	0030      	movs	r0, r6
 800c358:	f000 fd24 	bl	800cda4 <__clzsi2>
 800c35c:	3805      	subs	r0, #5
 800c35e:	4086      	lsls	r6, r0
 800c360:	4284      	cmp	r4, r0
 800c362:	dc65      	bgt.n	800c430 <__aeabi_fadd+0x1d0>
 800c364:	1b04      	subs	r4, r0, r4
 800c366:	0033      	movs	r3, r6
 800c368:	2020      	movs	r0, #32
 800c36a:	3401      	adds	r4, #1
 800c36c:	40e3      	lsrs	r3, r4
 800c36e:	1b04      	subs	r4, r0, r4
 800c370:	40a6      	lsls	r6, r4
 800c372:	1e75      	subs	r5, r6, #1
 800c374:	41ae      	sbcs	r6, r5
 800c376:	4333      	orrs	r3, r6
 800c378:	2607      	movs	r6, #7
 800c37a:	001d      	movs	r5, r3
 800c37c:	2400      	movs	r4, #0
 800c37e:	401e      	ands	r6, r3
 800c380:	2201      	movs	r2, #1
 800c382:	464b      	mov	r3, r9
 800c384:	401a      	ands	r2, r3
 800c386:	2e00      	cmp	r6, #0
 800c388:	d004      	beq.n	800c394 <__aeabi_fadd+0x134>
 800c38a:	230f      	movs	r3, #15
 800c38c:	402b      	ands	r3, r5
 800c38e:	2b04      	cmp	r3, #4
 800c390:	d000      	beq.n	800c394 <__aeabi_fadd+0x134>
 800c392:	3504      	adds	r5, #4
 800c394:	016b      	lsls	r3, r5, #5
 800c396:	d400      	bmi.n	800c39a <__aeabi_fadd+0x13a>
 800c398:	e780      	b.n	800c29c <__aeabi_fadd+0x3c>
 800c39a:	3401      	adds	r4, #1
 800c39c:	b2e6      	uxtb	r6, r4
 800c39e:	2cff      	cmp	r4, #255	; 0xff
 800c3a0:	d12f      	bne.n	800c402 <__aeabi_fadd+0x1a2>
 800c3a2:	26ff      	movs	r6, #255	; 0xff
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	e780      	b.n	800c2aa <__aeabi_fadd+0x4a>
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d152      	bne.n	800c452 <__aeabi_fadd+0x1f2>
 800c3ac:	2cff      	cmp	r4, #255	; 0xff
 800c3ae:	d000      	beq.n	800c3b2 <__aeabi_fadd+0x152>
 800c3b0:	e774      	b.n	800c29c <__aeabi_fadd+0x3c>
 800c3b2:	000a      	movs	r2, r1
 800c3b4:	08ed      	lsrs	r5, r5, #3
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	d0f3      	beq.n	800c3a2 <__aeabi_fadd+0x142>
 800c3ba:	2380      	movs	r3, #128	; 0x80
 800c3bc:	03db      	lsls	r3, r3, #15
 800c3be:	432b      	orrs	r3, r5
 800c3c0:	025b      	lsls	r3, r3, #9
 800c3c2:	0a5b      	lsrs	r3, r3, #9
 800c3c4:	26ff      	movs	r6, #255	; 0xff
 800c3c6:	e770      	b.n	800c2aa <__aeabi_fadd+0x4a>
 800c3c8:	3f01      	subs	r7, #1
 800c3ca:	2f00      	cmp	r7, #0
 800c3cc:	d0be      	beq.n	800c34c <__aeabi_fadd+0xec>
 800c3ce:	2cff      	cmp	r4, #255	; 0xff
 800c3d0:	d1b1      	bne.n	800c336 <__aeabi_fadd+0xd6>
 800c3d2:	e763      	b.n	800c29c <__aeabi_fadd+0x3c>
 800c3d4:	2c00      	cmp	r4, #0
 800c3d6:	d047      	beq.n	800c468 <__aeabi_fadd+0x208>
 800c3d8:	28ff      	cmp	r0, #255	; 0xff
 800c3da:	d069      	beq.n	800c4b0 <__aeabi_fadd+0x250>
 800c3dc:	2480      	movs	r4, #128	; 0x80
 800c3de:	04e4      	lsls	r4, r4, #19
 800c3e0:	427a      	negs	r2, r7
 800c3e2:	4325      	orrs	r5, r4
 800c3e4:	2a1b      	cmp	r2, #27
 800c3e6:	dd00      	ble.n	800c3ea <__aeabi_fadd+0x18a>
 800c3e8:	e0c5      	b.n	800c576 <__aeabi_fadd+0x316>
 800c3ea:	002c      	movs	r4, r5
 800c3ec:	2620      	movs	r6, #32
 800c3ee:	40d4      	lsrs	r4, r2
 800c3f0:	1ab2      	subs	r2, r6, r2
 800c3f2:	4095      	lsls	r5, r2
 800c3f4:	1e6a      	subs	r2, r5, #1
 800c3f6:	4195      	sbcs	r5, r2
 800c3f8:	4325      	orrs	r5, r4
 800c3fa:	1b5d      	subs	r5, r3, r5
 800c3fc:	0004      	movs	r4, r0
 800c3fe:	4689      	mov	r9, r1
 800c400:	e7a5      	b.n	800c34e <__aeabi_fadd+0xee>
 800c402:	01ab      	lsls	r3, r5, #6
 800c404:	0a5b      	lsrs	r3, r3, #9
 800c406:	e750      	b.n	800c2aa <__aeabi_fadd+0x4a>
 800c408:	2400      	movs	r4, #0
 800c40a:	2201      	movs	r2, #1
 800c40c:	464b      	mov	r3, r9
 800c40e:	401a      	ands	r2, r3
 800c410:	076b      	lsls	r3, r5, #29
 800c412:	d1ba      	bne.n	800c38a <__aeabi_fadd+0x12a>
 800c414:	e742      	b.n	800c29c <__aeabi_fadd+0x3c>
 800c416:	2f00      	cmp	r7, #0
 800c418:	d13b      	bne.n	800c492 <__aeabi_fadd+0x232>
 800c41a:	3401      	adds	r4, #1
 800c41c:	b2e0      	uxtb	r0, r4
 800c41e:	2801      	cmp	r0, #1
 800c420:	dd4a      	ble.n	800c4b8 <__aeabi_fadd+0x258>
 800c422:	2cff      	cmp	r4, #255	; 0xff
 800c424:	d0bd      	beq.n	800c3a2 <__aeabi_fadd+0x142>
 800c426:	2607      	movs	r6, #7
 800c428:	18ed      	adds	r5, r5, r3
 800c42a:	086d      	lsrs	r5, r5, #1
 800c42c:	402e      	ands	r6, r5
 800c42e:	e7a7      	b.n	800c380 <__aeabi_fadd+0x120>
 800c430:	2307      	movs	r3, #7
 800c432:	4d57      	ldr	r5, [pc, #348]	; (800c590 <__aeabi_fadd+0x330>)
 800c434:	1a24      	subs	r4, r4, r0
 800c436:	4035      	ands	r5, r6
 800c438:	401e      	ands	r6, r3
 800c43a:	e7a1      	b.n	800c380 <__aeabi_fadd+0x120>
 800c43c:	2c00      	cmp	r4, #0
 800c43e:	d11b      	bne.n	800c478 <__aeabi_fadd+0x218>
 800c440:	2d00      	cmp	r5, #0
 800c442:	d16e      	bne.n	800c522 <__aeabi_fadd+0x2c2>
 800c444:	2b00      	cmp	r3, #0
 800c446:	d100      	bne.n	800c44a <__aeabi_fadd+0x1ea>
 800c448:	e09a      	b.n	800c580 <__aeabi_fadd+0x320>
 800c44a:	000a      	movs	r2, r1
 800c44c:	001d      	movs	r5, r3
 800c44e:	003c      	movs	r4, r7
 800c450:	e724      	b.n	800c29c <__aeabi_fadd+0x3c>
 800c452:	3f01      	subs	r7, #1
 800c454:	2f00      	cmp	r7, #0
 800c456:	d100      	bne.n	800c45a <__aeabi_fadd+0x1fa>
 800c458:	e758      	b.n	800c30c <__aeabi_fadd+0xac>
 800c45a:	2cff      	cmp	r4, #255	; 0xff
 800c45c:	d000      	beq.n	800c460 <__aeabi_fadd+0x200>
 800c45e:	e74a      	b.n	800c2f6 <__aeabi_fadd+0x96>
 800c460:	e7a7      	b.n	800c3b2 <__aeabi_fadd+0x152>
 800c462:	1b5e      	subs	r6, r3, r5
 800c464:	4689      	mov	r9, r1
 800c466:	e776      	b.n	800c356 <__aeabi_fadd+0xf6>
 800c468:	2d00      	cmp	r5, #0
 800c46a:	d11c      	bne.n	800c4a6 <__aeabi_fadd+0x246>
 800c46c:	000a      	movs	r2, r1
 800c46e:	28ff      	cmp	r0, #255	; 0xff
 800c470:	d01f      	beq.n	800c4b2 <__aeabi_fadd+0x252>
 800c472:	0004      	movs	r4, r0
 800c474:	001d      	movs	r5, r3
 800c476:	e711      	b.n	800c29c <__aeabi_fadd+0x3c>
 800c478:	2d00      	cmp	r5, #0
 800c47a:	d15d      	bne.n	800c538 <__aeabi_fadd+0x2d8>
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d117      	bne.n	800c4b0 <__aeabi_fadd+0x250>
 800c480:	2380      	movs	r3, #128	; 0x80
 800c482:	2200      	movs	r2, #0
 800c484:	03db      	lsls	r3, r3, #15
 800c486:	26ff      	movs	r6, #255	; 0xff
 800c488:	e70f      	b.n	800c2aa <__aeabi_fadd+0x4a>
 800c48a:	000a      	movs	r2, r1
 800c48c:	26ff      	movs	r6, #255	; 0xff
 800c48e:	2300      	movs	r3, #0
 800c490:	e70b      	b.n	800c2aa <__aeabi_fadd+0x4a>
 800c492:	2c00      	cmp	r4, #0
 800c494:	d121      	bne.n	800c4da <__aeabi_fadd+0x27a>
 800c496:	2d00      	cmp	r5, #0
 800c498:	d166      	bne.n	800c568 <__aeabi_fadd+0x308>
 800c49a:	28ff      	cmp	r0, #255	; 0xff
 800c49c:	d1e9      	bne.n	800c472 <__aeabi_fadd+0x212>
 800c49e:	001d      	movs	r5, r3
 800c4a0:	e787      	b.n	800c3b2 <__aeabi_fadd+0x152>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e752      	b.n	800c34c <__aeabi_fadd+0xec>
 800c4a6:	1c7a      	adds	r2, r7, #1
 800c4a8:	d0a7      	beq.n	800c3fa <__aeabi_fadd+0x19a>
 800c4aa:	43fa      	mvns	r2, r7
 800c4ac:	28ff      	cmp	r0, #255	; 0xff
 800c4ae:	d199      	bne.n	800c3e4 <__aeabi_fadd+0x184>
 800c4b0:	000a      	movs	r2, r1
 800c4b2:	001d      	movs	r5, r3
 800c4b4:	24ff      	movs	r4, #255	; 0xff
 800c4b6:	e6f1      	b.n	800c29c <__aeabi_fadd+0x3c>
 800c4b8:	2e00      	cmp	r6, #0
 800c4ba:	d121      	bne.n	800c500 <__aeabi_fadd+0x2a0>
 800c4bc:	2d00      	cmp	r5, #0
 800c4be:	d04f      	beq.n	800c560 <__aeabi_fadd+0x300>
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d04c      	beq.n	800c55e <__aeabi_fadd+0x2fe>
 800c4c4:	18ed      	adds	r5, r5, r3
 800c4c6:	016b      	lsls	r3, r5, #5
 800c4c8:	d59e      	bpl.n	800c408 <__aeabi_fadd+0x1a8>
 800c4ca:	4b31      	ldr	r3, [pc, #196]	; (800c590 <__aeabi_fadd+0x330>)
 800c4cc:	3607      	adds	r6, #7
 800c4ce:	402e      	ands	r6, r5
 800c4d0:	2401      	movs	r4, #1
 800c4d2:	401d      	ands	r5, r3
 800c4d4:	e754      	b.n	800c380 <__aeabi_fadd+0x120>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e718      	b.n	800c30c <__aeabi_fadd+0xac>
 800c4da:	28ff      	cmp	r0, #255	; 0xff
 800c4dc:	d0df      	beq.n	800c49e <__aeabi_fadd+0x23e>
 800c4de:	2480      	movs	r4, #128	; 0x80
 800c4e0:	04e4      	lsls	r4, r4, #19
 800c4e2:	427f      	negs	r7, r7
 800c4e4:	4325      	orrs	r5, r4
 800c4e6:	2f1b      	cmp	r7, #27
 800c4e8:	dc4d      	bgt.n	800c586 <__aeabi_fadd+0x326>
 800c4ea:	2620      	movs	r6, #32
 800c4ec:	1bf6      	subs	r6, r6, r7
 800c4ee:	002c      	movs	r4, r5
 800c4f0:	40b5      	lsls	r5, r6
 800c4f2:	40fc      	lsrs	r4, r7
 800c4f4:	1e6a      	subs	r2, r5, #1
 800c4f6:	4195      	sbcs	r5, r2
 800c4f8:	4325      	orrs	r5, r4
 800c4fa:	18ed      	adds	r5, r5, r3
 800c4fc:	0004      	movs	r4, r0
 800c4fe:	e706      	b.n	800c30e <__aeabi_fadd+0xae>
 800c500:	2d00      	cmp	r5, #0
 800c502:	d0cc      	beq.n	800c49e <__aeabi_fadd+0x23e>
 800c504:	2b00      	cmp	r3, #0
 800c506:	d100      	bne.n	800c50a <__aeabi_fadd+0x2aa>
 800c508:	e753      	b.n	800c3b2 <__aeabi_fadd+0x152>
 800c50a:	2180      	movs	r1, #128	; 0x80
 800c50c:	4660      	mov	r0, ip
 800c50e:	03c9      	lsls	r1, r1, #15
 800c510:	4208      	tst	r0, r1
 800c512:	d003      	beq.n	800c51c <__aeabi_fadd+0x2bc>
 800c514:	4640      	mov	r0, r8
 800c516:	4208      	tst	r0, r1
 800c518:	d100      	bne.n	800c51c <__aeabi_fadd+0x2bc>
 800c51a:	001d      	movs	r5, r3
 800c51c:	2101      	movs	r1, #1
 800c51e:	4011      	ands	r1, r2
 800c520:	e747      	b.n	800c3b2 <__aeabi_fadd+0x152>
 800c522:	2b00      	cmp	r3, #0
 800c524:	d100      	bne.n	800c528 <__aeabi_fadd+0x2c8>
 800c526:	e6b9      	b.n	800c29c <__aeabi_fadd+0x3c>
 800c528:	1aea      	subs	r2, r5, r3
 800c52a:	0150      	lsls	r0, r2, #5
 800c52c:	d525      	bpl.n	800c57a <__aeabi_fadd+0x31a>
 800c52e:	2607      	movs	r6, #7
 800c530:	1b5d      	subs	r5, r3, r5
 800c532:	402e      	ands	r6, r5
 800c534:	4689      	mov	r9, r1
 800c536:	e723      	b.n	800c380 <__aeabi_fadd+0x120>
 800c538:	24ff      	movs	r4, #255	; 0xff
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d100      	bne.n	800c540 <__aeabi_fadd+0x2e0>
 800c53e:	e6ad      	b.n	800c29c <__aeabi_fadd+0x3c>
 800c540:	2280      	movs	r2, #128	; 0x80
 800c542:	4660      	mov	r0, ip
 800c544:	03d2      	lsls	r2, r2, #15
 800c546:	4210      	tst	r0, r2
 800c548:	d004      	beq.n	800c554 <__aeabi_fadd+0x2f4>
 800c54a:	4640      	mov	r0, r8
 800c54c:	4210      	tst	r0, r2
 800c54e:	d101      	bne.n	800c554 <__aeabi_fadd+0x2f4>
 800c550:	001d      	movs	r5, r3
 800c552:	4689      	mov	r9, r1
 800c554:	2201      	movs	r2, #1
 800c556:	464b      	mov	r3, r9
 800c558:	24ff      	movs	r4, #255	; 0xff
 800c55a:	401a      	ands	r2, r3
 800c55c:	e69e      	b.n	800c29c <__aeabi_fadd+0x3c>
 800c55e:	002b      	movs	r3, r5
 800c560:	08dd      	lsrs	r5, r3, #3
 800c562:	000a      	movs	r2, r1
 800c564:	2400      	movs	r4, #0
 800c566:	e69d      	b.n	800c2a4 <__aeabi_fadd+0x44>
 800c568:	1c7a      	adds	r2, r7, #1
 800c56a:	d0c6      	beq.n	800c4fa <__aeabi_fadd+0x29a>
 800c56c:	43ff      	mvns	r7, r7
 800c56e:	28ff      	cmp	r0, #255	; 0xff
 800c570:	d1b9      	bne.n	800c4e6 <__aeabi_fadd+0x286>
 800c572:	001d      	movs	r5, r3
 800c574:	e71d      	b.n	800c3b2 <__aeabi_fadd+0x152>
 800c576:	2501      	movs	r5, #1
 800c578:	e73f      	b.n	800c3fa <__aeabi_fadd+0x19a>
 800c57a:	1e15      	subs	r5, r2, #0
 800c57c:	d000      	beq.n	800c580 <__aeabi_fadd+0x320>
 800c57e:	e744      	b.n	800c40a <__aeabi_fadd+0x1aa>
 800c580:	2200      	movs	r2, #0
 800c582:	2300      	movs	r3, #0
 800c584:	e691      	b.n	800c2aa <__aeabi_fadd+0x4a>
 800c586:	2501      	movs	r5, #1
 800c588:	e7b7      	b.n	800c4fa <__aeabi_fadd+0x29a>
 800c58a:	46c0      	nop			; (mov r8, r8)
 800c58c:	7dffffff 	.word	0x7dffffff
 800c590:	fbffffff 	.word	0xfbffffff

0800c594 <__aeabi_fdiv>:
 800c594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c596:	4657      	mov	r7, sl
 800c598:	464e      	mov	r6, r9
 800c59a:	4645      	mov	r5, r8
 800c59c:	46de      	mov	lr, fp
 800c59e:	0244      	lsls	r4, r0, #9
 800c5a0:	b5e0      	push	{r5, r6, r7, lr}
 800c5a2:	0046      	lsls	r6, r0, #1
 800c5a4:	4688      	mov	r8, r1
 800c5a6:	0a64      	lsrs	r4, r4, #9
 800c5a8:	0e36      	lsrs	r6, r6, #24
 800c5aa:	0fc7      	lsrs	r7, r0, #31
 800c5ac:	2e00      	cmp	r6, #0
 800c5ae:	d063      	beq.n	800c678 <__aeabi_fdiv+0xe4>
 800c5b0:	2eff      	cmp	r6, #255	; 0xff
 800c5b2:	d024      	beq.n	800c5fe <__aeabi_fdiv+0x6a>
 800c5b4:	2380      	movs	r3, #128	; 0x80
 800c5b6:	00e4      	lsls	r4, r4, #3
 800c5b8:	04db      	lsls	r3, r3, #19
 800c5ba:	431c      	orrs	r4, r3
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4699      	mov	r9, r3
 800c5c0:	469b      	mov	fp, r3
 800c5c2:	3e7f      	subs	r6, #127	; 0x7f
 800c5c4:	4643      	mov	r3, r8
 800c5c6:	4642      	mov	r2, r8
 800c5c8:	025d      	lsls	r5, r3, #9
 800c5ca:	0fd2      	lsrs	r2, r2, #31
 800c5cc:	005b      	lsls	r3, r3, #1
 800c5ce:	0a6d      	lsrs	r5, r5, #9
 800c5d0:	0e1b      	lsrs	r3, r3, #24
 800c5d2:	4690      	mov	r8, r2
 800c5d4:	4692      	mov	sl, r2
 800c5d6:	d065      	beq.n	800c6a4 <__aeabi_fdiv+0x110>
 800c5d8:	2bff      	cmp	r3, #255	; 0xff
 800c5da:	d055      	beq.n	800c688 <__aeabi_fdiv+0xf4>
 800c5dc:	2280      	movs	r2, #128	; 0x80
 800c5de:	2100      	movs	r1, #0
 800c5e0:	00ed      	lsls	r5, r5, #3
 800c5e2:	04d2      	lsls	r2, r2, #19
 800c5e4:	3b7f      	subs	r3, #127	; 0x7f
 800c5e6:	4315      	orrs	r5, r2
 800c5e8:	1af6      	subs	r6, r6, r3
 800c5ea:	4643      	mov	r3, r8
 800c5ec:	464a      	mov	r2, r9
 800c5ee:	407b      	eors	r3, r7
 800c5f0:	2a0f      	cmp	r2, #15
 800c5f2:	d900      	bls.n	800c5f6 <__aeabi_fdiv+0x62>
 800c5f4:	e08d      	b.n	800c712 <__aeabi_fdiv+0x17e>
 800c5f6:	486d      	ldr	r0, [pc, #436]	; (800c7ac <__aeabi_fdiv+0x218>)
 800c5f8:	0092      	lsls	r2, r2, #2
 800c5fa:	5882      	ldr	r2, [r0, r2]
 800c5fc:	4697      	mov	pc, r2
 800c5fe:	2c00      	cmp	r4, #0
 800c600:	d154      	bne.n	800c6ac <__aeabi_fdiv+0x118>
 800c602:	2308      	movs	r3, #8
 800c604:	4699      	mov	r9, r3
 800c606:	3b06      	subs	r3, #6
 800c608:	26ff      	movs	r6, #255	; 0xff
 800c60a:	469b      	mov	fp, r3
 800c60c:	e7da      	b.n	800c5c4 <__aeabi_fdiv+0x30>
 800c60e:	2500      	movs	r5, #0
 800c610:	4653      	mov	r3, sl
 800c612:	2902      	cmp	r1, #2
 800c614:	d01b      	beq.n	800c64e <__aeabi_fdiv+0xba>
 800c616:	2903      	cmp	r1, #3
 800c618:	d100      	bne.n	800c61c <__aeabi_fdiv+0x88>
 800c61a:	e0bf      	b.n	800c79c <__aeabi_fdiv+0x208>
 800c61c:	2901      	cmp	r1, #1
 800c61e:	d028      	beq.n	800c672 <__aeabi_fdiv+0xde>
 800c620:	0030      	movs	r0, r6
 800c622:	307f      	adds	r0, #127	; 0x7f
 800c624:	2800      	cmp	r0, #0
 800c626:	dd20      	ble.n	800c66a <__aeabi_fdiv+0xd6>
 800c628:	076a      	lsls	r2, r5, #29
 800c62a:	d004      	beq.n	800c636 <__aeabi_fdiv+0xa2>
 800c62c:	220f      	movs	r2, #15
 800c62e:	402a      	ands	r2, r5
 800c630:	2a04      	cmp	r2, #4
 800c632:	d000      	beq.n	800c636 <__aeabi_fdiv+0xa2>
 800c634:	3504      	adds	r5, #4
 800c636:	012a      	lsls	r2, r5, #4
 800c638:	d503      	bpl.n	800c642 <__aeabi_fdiv+0xae>
 800c63a:	0030      	movs	r0, r6
 800c63c:	4a5c      	ldr	r2, [pc, #368]	; (800c7b0 <__aeabi_fdiv+0x21c>)
 800c63e:	3080      	adds	r0, #128	; 0x80
 800c640:	4015      	ands	r5, r2
 800c642:	28fe      	cmp	r0, #254	; 0xfe
 800c644:	dc03      	bgt.n	800c64e <__aeabi_fdiv+0xba>
 800c646:	01ac      	lsls	r4, r5, #6
 800c648:	0a64      	lsrs	r4, r4, #9
 800c64a:	b2c2      	uxtb	r2, r0
 800c64c:	e001      	b.n	800c652 <__aeabi_fdiv+0xbe>
 800c64e:	22ff      	movs	r2, #255	; 0xff
 800c650:	2400      	movs	r4, #0
 800c652:	0264      	lsls	r4, r4, #9
 800c654:	05d2      	lsls	r2, r2, #23
 800c656:	0a60      	lsrs	r0, r4, #9
 800c658:	07db      	lsls	r3, r3, #31
 800c65a:	4310      	orrs	r0, r2
 800c65c:	4318      	orrs	r0, r3
 800c65e:	bc3c      	pop	{r2, r3, r4, r5}
 800c660:	4690      	mov	r8, r2
 800c662:	4699      	mov	r9, r3
 800c664:	46a2      	mov	sl, r4
 800c666:	46ab      	mov	fp, r5
 800c668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c66a:	2201      	movs	r2, #1
 800c66c:	1a10      	subs	r0, r2, r0
 800c66e:	281b      	cmp	r0, #27
 800c670:	dd7c      	ble.n	800c76c <__aeabi_fdiv+0x1d8>
 800c672:	2200      	movs	r2, #0
 800c674:	2400      	movs	r4, #0
 800c676:	e7ec      	b.n	800c652 <__aeabi_fdiv+0xbe>
 800c678:	2c00      	cmp	r4, #0
 800c67a:	d11d      	bne.n	800c6b8 <__aeabi_fdiv+0x124>
 800c67c:	2304      	movs	r3, #4
 800c67e:	4699      	mov	r9, r3
 800c680:	3b03      	subs	r3, #3
 800c682:	2600      	movs	r6, #0
 800c684:	469b      	mov	fp, r3
 800c686:	e79d      	b.n	800c5c4 <__aeabi_fdiv+0x30>
 800c688:	3eff      	subs	r6, #255	; 0xff
 800c68a:	2d00      	cmp	r5, #0
 800c68c:	d120      	bne.n	800c6d0 <__aeabi_fdiv+0x13c>
 800c68e:	2102      	movs	r1, #2
 800c690:	4643      	mov	r3, r8
 800c692:	464a      	mov	r2, r9
 800c694:	407b      	eors	r3, r7
 800c696:	430a      	orrs	r2, r1
 800c698:	2a0f      	cmp	r2, #15
 800c69a:	d8d8      	bhi.n	800c64e <__aeabi_fdiv+0xba>
 800c69c:	4845      	ldr	r0, [pc, #276]	; (800c7b4 <__aeabi_fdiv+0x220>)
 800c69e:	0092      	lsls	r2, r2, #2
 800c6a0:	5882      	ldr	r2, [r0, r2]
 800c6a2:	4697      	mov	pc, r2
 800c6a4:	2d00      	cmp	r5, #0
 800c6a6:	d119      	bne.n	800c6dc <__aeabi_fdiv+0x148>
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	e7f1      	b.n	800c690 <__aeabi_fdiv+0xfc>
 800c6ac:	230c      	movs	r3, #12
 800c6ae:	4699      	mov	r9, r3
 800c6b0:	3b09      	subs	r3, #9
 800c6b2:	26ff      	movs	r6, #255	; 0xff
 800c6b4:	469b      	mov	fp, r3
 800c6b6:	e785      	b.n	800c5c4 <__aeabi_fdiv+0x30>
 800c6b8:	0020      	movs	r0, r4
 800c6ba:	f000 fb73 	bl	800cda4 <__clzsi2>
 800c6be:	2676      	movs	r6, #118	; 0x76
 800c6c0:	1f43      	subs	r3, r0, #5
 800c6c2:	409c      	lsls	r4, r3
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	4276      	negs	r6, r6
 800c6c8:	1a36      	subs	r6, r6, r0
 800c6ca:	4699      	mov	r9, r3
 800c6cc:	469b      	mov	fp, r3
 800c6ce:	e779      	b.n	800c5c4 <__aeabi_fdiv+0x30>
 800c6d0:	464a      	mov	r2, r9
 800c6d2:	2303      	movs	r3, #3
 800c6d4:	431a      	orrs	r2, r3
 800c6d6:	4691      	mov	r9, r2
 800c6d8:	2103      	movs	r1, #3
 800c6da:	e786      	b.n	800c5ea <__aeabi_fdiv+0x56>
 800c6dc:	0028      	movs	r0, r5
 800c6de:	f000 fb61 	bl	800cda4 <__clzsi2>
 800c6e2:	1f43      	subs	r3, r0, #5
 800c6e4:	1836      	adds	r6, r6, r0
 800c6e6:	409d      	lsls	r5, r3
 800c6e8:	3676      	adds	r6, #118	; 0x76
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	e77d      	b.n	800c5ea <__aeabi_fdiv+0x56>
 800c6ee:	2480      	movs	r4, #128	; 0x80
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	03e4      	lsls	r4, r4, #15
 800c6f4:	22ff      	movs	r2, #255	; 0xff
 800c6f6:	e7ac      	b.n	800c652 <__aeabi_fdiv+0xbe>
 800c6f8:	2500      	movs	r5, #0
 800c6fa:	2380      	movs	r3, #128	; 0x80
 800c6fc:	03db      	lsls	r3, r3, #15
 800c6fe:	421c      	tst	r4, r3
 800c700:	d028      	beq.n	800c754 <__aeabi_fdiv+0x1c0>
 800c702:	421d      	tst	r5, r3
 800c704:	d126      	bne.n	800c754 <__aeabi_fdiv+0x1c0>
 800c706:	432b      	orrs	r3, r5
 800c708:	025c      	lsls	r4, r3, #9
 800c70a:	0a64      	lsrs	r4, r4, #9
 800c70c:	4643      	mov	r3, r8
 800c70e:	22ff      	movs	r2, #255	; 0xff
 800c710:	e79f      	b.n	800c652 <__aeabi_fdiv+0xbe>
 800c712:	0162      	lsls	r2, r4, #5
 800c714:	016c      	lsls	r4, r5, #5
 800c716:	42a2      	cmp	r2, r4
 800c718:	d224      	bcs.n	800c764 <__aeabi_fdiv+0x1d0>
 800c71a:	211b      	movs	r1, #27
 800c71c:	2500      	movs	r5, #0
 800c71e:	3e01      	subs	r6, #1
 800c720:	2701      	movs	r7, #1
 800c722:	0010      	movs	r0, r2
 800c724:	006d      	lsls	r5, r5, #1
 800c726:	0052      	lsls	r2, r2, #1
 800c728:	2800      	cmp	r0, #0
 800c72a:	db01      	blt.n	800c730 <__aeabi_fdiv+0x19c>
 800c72c:	4294      	cmp	r4, r2
 800c72e:	d801      	bhi.n	800c734 <__aeabi_fdiv+0x1a0>
 800c730:	1b12      	subs	r2, r2, r4
 800c732:	433d      	orrs	r5, r7
 800c734:	3901      	subs	r1, #1
 800c736:	2900      	cmp	r1, #0
 800c738:	d1f3      	bne.n	800c722 <__aeabi_fdiv+0x18e>
 800c73a:	0014      	movs	r4, r2
 800c73c:	1e62      	subs	r2, r4, #1
 800c73e:	4194      	sbcs	r4, r2
 800c740:	4325      	orrs	r5, r4
 800c742:	e76d      	b.n	800c620 <__aeabi_fdiv+0x8c>
 800c744:	46ba      	mov	sl, r7
 800c746:	4659      	mov	r1, fp
 800c748:	0025      	movs	r5, r4
 800c74a:	4653      	mov	r3, sl
 800c74c:	2902      	cmp	r1, #2
 800c74e:	d000      	beq.n	800c752 <__aeabi_fdiv+0x1be>
 800c750:	e761      	b.n	800c616 <__aeabi_fdiv+0x82>
 800c752:	e77c      	b.n	800c64e <__aeabi_fdiv+0xba>
 800c754:	2380      	movs	r3, #128	; 0x80
 800c756:	03db      	lsls	r3, r3, #15
 800c758:	431c      	orrs	r4, r3
 800c75a:	0264      	lsls	r4, r4, #9
 800c75c:	0a64      	lsrs	r4, r4, #9
 800c75e:	003b      	movs	r3, r7
 800c760:	22ff      	movs	r2, #255	; 0xff
 800c762:	e776      	b.n	800c652 <__aeabi_fdiv+0xbe>
 800c764:	1b12      	subs	r2, r2, r4
 800c766:	211a      	movs	r1, #26
 800c768:	2501      	movs	r5, #1
 800c76a:	e7d9      	b.n	800c720 <__aeabi_fdiv+0x18c>
 800c76c:	369e      	adds	r6, #158	; 0x9e
 800c76e:	002a      	movs	r2, r5
 800c770:	40b5      	lsls	r5, r6
 800c772:	002c      	movs	r4, r5
 800c774:	40c2      	lsrs	r2, r0
 800c776:	1e65      	subs	r5, r4, #1
 800c778:	41ac      	sbcs	r4, r5
 800c77a:	4314      	orrs	r4, r2
 800c77c:	0762      	lsls	r2, r4, #29
 800c77e:	d004      	beq.n	800c78a <__aeabi_fdiv+0x1f6>
 800c780:	220f      	movs	r2, #15
 800c782:	4022      	ands	r2, r4
 800c784:	2a04      	cmp	r2, #4
 800c786:	d000      	beq.n	800c78a <__aeabi_fdiv+0x1f6>
 800c788:	3404      	adds	r4, #4
 800c78a:	0162      	lsls	r2, r4, #5
 800c78c:	d403      	bmi.n	800c796 <__aeabi_fdiv+0x202>
 800c78e:	01a4      	lsls	r4, r4, #6
 800c790:	0a64      	lsrs	r4, r4, #9
 800c792:	2200      	movs	r2, #0
 800c794:	e75d      	b.n	800c652 <__aeabi_fdiv+0xbe>
 800c796:	2201      	movs	r2, #1
 800c798:	2400      	movs	r4, #0
 800c79a:	e75a      	b.n	800c652 <__aeabi_fdiv+0xbe>
 800c79c:	2480      	movs	r4, #128	; 0x80
 800c79e:	03e4      	lsls	r4, r4, #15
 800c7a0:	432c      	orrs	r4, r5
 800c7a2:	0264      	lsls	r4, r4, #9
 800c7a4:	0a64      	lsrs	r4, r4, #9
 800c7a6:	22ff      	movs	r2, #255	; 0xff
 800c7a8:	e753      	b.n	800c652 <__aeabi_fdiv+0xbe>
 800c7aa:	46c0      	nop			; (mov r8, r8)
 800c7ac:	0801aa00 	.word	0x0801aa00
 800c7b0:	f7ffffff 	.word	0xf7ffffff
 800c7b4:	0801aa40 	.word	0x0801aa40

0800c7b8 <__aeabi_fmul>:
 800c7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ba:	464e      	mov	r6, r9
 800c7bc:	4657      	mov	r7, sl
 800c7be:	4645      	mov	r5, r8
 800c7c0:	46de      	mov	lr, fp
 800c7c2:	b5e0      	push	{r5, r6, r7, lr}
 800c7c4:	0243      	lsls	r3, r0, #9
 800c7c6:	0a5b      	lsrs	r3, r3, #9
 800c7c8:	0045      	lsls	r5, r0, #1
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	1c0f      	adds	r7, r1, #0
 800c7ce:	4699      	mov	r9, r3
 800c7d0:	0e2d      	lsrs	r5, r5, #24
 800c7d2:	0fc6      	lsrs	r6, r0, #31
 800c7d4:	2d00      	cmp	r5, #0
 800c7d6:	d057      	beq.n	800c888 <__aeabi_fmul+0xd0>
 800c7d8:	2dff      	cmp	r5, #255	; 0xff
 800c7da:	d024      	beq.n	800c826 <__aeabi_fmul+0x6e>
 800c7dc:	2080      	movs	r0, #128	; 0x80
 800c7de:	00db      	lsls	r3, r3, #3
 800c7e0:	04c0      	lsls	r0, r0, #19
 800c7e2:	4318      	orrs	r0, r3
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4681      	mov	r9, r0
 800c7e8:	469a      	mov	sl, r3
 800c7ea:	469b      	mov	fp, r3
 800c7ec:	3d7f      	subs	r5, #127	; 0x7f
 800c7ee:	027c      	lsls	r4, r7, #9
 800c7f0:	007a      	lsls	r2, r7, #1
 800c7f2:	0ffb      	lsrs	r3, r7, #31
 800c7f4:	0a64      	lsrs	r4, r4, #9
 800c7f6:	0e12      	lsrs	r2, r2, #24
 800c7f8:	4698      	mov	r8, r3
 800c7fa:	d023      	beq.n	800c844 <__aeabi_fmul+0x8c>
 800c7fc:	2aff      	cmp	r2, #255	; 0xff
 800c7fe:	d04b      	beq.n	800c898 <__aeabi_fmul+0xe0>
 800c800:	00e3      	lsls	r3, r4, #3
 800c802:	2480      	movs	r4, #128	; 0x80
 800c804:	2000      	movs	r0, #0
 800c806:	04e4      	lsls	r4, r4, #19
 800c808:	3a7f      	subs	r2, #127	; 0x7f
 800c80a:	431c      	orrs	r4, r3
 800c80c:	18ad      	adds	r5, r5, r2
 800c80e:	1c6b      	adds	r3, r5, #1
 800c810:	4647      	mov	r7, r8
 800c812:	9301      	str	r3, [sp, #4]
 800c814:	4653      	mov	r3, sl
 800c816:	4077      	eors	r7, r6
 800c818:	003a      	movs	r2, r7
 800c81a:	2b0f      	cmp	r3, #15
 800c81c:	d848      	bhi.n	800c8b0 <__aeabi_fmul+0xf8>
 800c81e:	497d      	ldr	r1, [pc, #500]	; (800ca14 <__aeabi_fmul+0x25c>)
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	58cb      	ldr	r3, [r1, r3]
 800c824:	469f      	mov	pc, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	d000      	beq.n	800c82c <__aeabi_fmul+0x74>
 800c82a:	e085      	b.n	800c938 <__aeabi_fmul+0x180>
 800c82c:	3308      	adds	r3, #8
 800c82e:	469a      	mov	sl, r3
 800c830:	3b06      	subs	r3, #6
 800c832:	469b      	mov	fp, r3
 800c834:	027c      	lsls	r4, r7, #9
 800c836:	007a      	lsls	r2, r7, #1
 800c838:	0ffb      	lsrs	r3, r7, #31
 800c83a:	25ff      	movs	r5, #255	; 0xff
 800c83c:	0a64      	lsrs	r4, r4, #9
 800c83e:	0e12      	lsrs	r2, r2, #24
 800c840:	4698      	mov	r8, r3
 800c842:	d1db      	bne.n	800c7fc <__aeabi_fmul+0x44>
 800c844:	2c00      	cmp	r4, #0
 800c846:	d000      	beq.n	800c84a <__aeabi_fmul+0x92>
 800c848:	e090      	b.n	800c96c <__aeabi_fmul+0x1b4>
 800c84a:	4652      	mov	r2, sl
 800c84c:	2301      	movs	r3, #1
 800c84e:	431a      	orrs	r2, r3
 800c850:	4692      	mov	sl, r2
 800c852:	2001      	movs	r0, #1
 800c854:	e7db      	b.n	800c80e <__aeabi_fmul+0x56>
 800c856:	464c      	mov	r4, r9
 800c858:	4658      	mov	r0, fp
 800c85a:	0017      	movs	r7, r2
 800c85c:	2802      	cmp	r0, #2
 800c85e:	d024      	beq.n	800c8aa <__aeabi_fmul+0xf2>
 800c860:	2803      	cmp	r0, #3
 800c862:	d100      	bne.n	800c866 <__aeabi_fmul+0xae>
 800c864:	e0cf      	b.n	800ca06 <__aeabi_fmul+0x24e>
 800c866:	2200      	movs	r2, #0
 800c868:	2300      	movs	r3, #0
 800c86a:	2801      	cmp	r0, #1
 800c86c:	d14d      	bne.n	800c90a <__aeabi_fmul+0x152>
 800c86e:	0258      	lsls	r0, r3, #9
 800c870:	05d2      	lsls	r2, r2, #23
 800c872:	0a40      	lsrs	r0, r0, #9
 800c874:	07ff      	lsls	r7, r7, #31
 800c876:	4310      	orrs	r0, r2
 800c878:	4338      	orrs	r0, r7
 800c87a:	b003      	add	sp, #12
 800c87c:	bc3c      	pop	{r2, r3, r4, r5}
 800c87e:	4690      	mov	r8, r2
 800c880:	4699      	mov	r9, r3
 800c882:	46a2      	mov	sl, r4
 800c884:	46ab      	mov	fp, r5
 800c886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d15b      	bne.n	800c944 <__aeabi_fmul+0x18c>
 800c88c:	2304      	movs	r3, #4
 800c88e:	469a      	mov	sl, r3
 800c890:	3b03      	subs	r3, #3
 800c892:	2500      	movs	r5, #0
 800c894:	469b      	mov	fp, r3
 800c896:	e7aa      	b.n	800c7ee <__aeabi_fmul+0x36>
 800c898:	35ff      	adds	r5, #255	; 0xff
 800c89a:	2c00      	cmp	r4, #0
 800c89c:	d160      	bne.n	800c960 <__aeabi_fmul+0x1a8>
 800c89e:	4652      	mov	r2, sl
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	431a      	orrs	r2, r3
 800c8a4:	4692      	mov	sl, r2
 800c8a6:	2002      	movs	r0, #2
 800c8a8:	e7b1      	b.n	800c80e <__aeabi_fmul+0x56>
 800c8aa:	22ff      	movs	r2, #255	; 0xff
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	e7de      	b.n	800c86e <__aeabi_fmul+0xb6>
 800c8b0:	464b      	mov	r3, r9
 800c8b2:	0c1b      	lsrs	r3, r3, #16
 800c8b4:	469c      	mov	ip, r3
 800c8b6:	464b      	mov	r3, r9
 800c8b8:	0426      	lsls	r6, r4, #16
 800c8ba:	0c36      	lsrs	r6, r6, #16
 800c8bc:	0418      	lsls	r0, r3, #16
 800c8be:	4661      	mov	r1, ip
 800c8c0:	0033      	movs	r3, r6
 800c8c2:	0c22      	lsrs	r2, r4, #16
 800c8c4:	4664      	mov	r4, ip
 800c8c6:	0c00      	lsrs	r0, r0, #16
 800c8c8:	4343      	muls	r3, r0
 800c8ca:	434e      	muls	r6, r1
 800c8cc:	4350      	muls	r0, r2
 800c8ce:	4354      	muls	r4, r2
 800c8d0:	1980      	adds	r0, r0, r6
 800c8d2:	0c1a      	lsrs	r2, r3, #16
 800c8d4:	1812      	adds	r2, r2, r0
 800c8d6:	4296      	cmp	r6, r2
 800c8d8:	d903      	bls.n	800c8e2 <__aeabi_fmul+0x12a>
 800c8da:	2180      	movs	r1, #128	; 0x80
 800c8dc:	0249      	lsls	r1, r1, #9
 800c8de:	468c      	mov	ip, r1
 800c8e0:	4464      	add	r4, ip
 800c8e2:	041b      	lsls	r3, r3, #16
 800c8e4:	0c1b      	lsrs	r3, r3, #16
 800c8e6:	0410      	lsls	r0, r2, #16
 800c8e8:	18c0      	adds	r0, r0, r3
 800c8ea:	0183      	lsls	r3, r0, #6
 800c8ec:	1e5e      	subs	r6, r3, #1
 800c8ee:	41b3      	sbcs	r3, r6
 800c8f0:	0e80      	lsrs	r0, r0, #26
 800c8f2:	4318      	orrs	r0, r3
 800c8f4:	0c13      	lsrs	r3, r2, #16
 800c8f6:	191b      	adds	r3, r3, r4
 800c8f8:	019b      	lsls	r3, r3, #6
 800c8fa:	4303      	orrs	r3, r0
 800c8fc:	001c      	movs	r4, r3
 800c8fe:	0123      	lsls	r3, r4, #4
 800c900:	d579      	bpl.n	800c9f6 <__aeabi_fmul+0x23e>
 800c902:	2301      	movs	r3, #1
 800c904:	0862      	lsrs	r2, r4, #1
 800c906:	401c      	ands	r4, r3
 800c908:	4314      	orrs	r4, r2
 800c90a:	9a01      	ldr	r2, [sp, #4]
 800c90c:	327f      	adds	r2, #127	; 0x7f
 800c90e:	2a00      	cmp	r2, #0
 800c910:	dd4d      	ble.n	800c9ae <__aeabi_fmul+0x1f6>
 800c912:	0763      	lsls	r3, r4, #29
 800c914:	d004      	beq.n	800c920 <__aeabi_fmul+0x168>
 800c916:	230f      	movs	r3, #15
 800c918:	4023      	ands	r3, r4
 800c91a:	2b04      	cmp	r3, #4
 800c91c:	d000      	beq.n	800c920 <__aeabi_fmul+0x168>
 800c91e:	3404      	adds	r4, #4
 800c920:	0123      	lsls	r3, r4, #4
 800c922:	d503      	bpl.n	800c92c <__aeabi_fmul+0x174>
 800c924:	4b3c      	ldr	r3, [pc, #240]	; (800ca18 <__aeabi_fmul+0x260>)
 800c926:	9a01      	ldr	r2, [sp, #4]
 800c928:	401c      	ands	r4, r3
 800c92a:	3280      	adds	r2, #128	; 0x80
 800c92c:	2afe      	cmp	r2, #254	; 0xfe
 800c92e:	dcbc      	bgt.n	800c8aa <__aeabi_fmul+0xf2>
 800c930:	01a3      	lsls	r3, r4, #6
 800c932:	0a5b      	lsrs	r3, r3, #9
 800c934:	b2d2      	uxtb	r2, r2
 800c936:	e79a      	b.n	800c86e <__aeabi_fmul+0xb6>
 800c938:	230c      	movs	r3, #12
 800c93a:	469a      	mov	sl, r3
 800c93c:	3b09      	subs	r3, #9
 800c93e:	25ff      	movs	r5, #255	; 0xff
 800c940:	469b      	mov	fp, r3
 800c942:	e754      	b.n	800c7ee <__aeabi_fmul+0x36>
 800c944:	0018      	movs	r0, r3
 800c946:	f000 fa2d 	bl	800cda4 <__clzsi2>
 800c94a:	464a      	mov	r2, r9
 800c94c:	1f43      	subs	r3, r0, #5
 800c94e:	2576      	movs	r5, #118	; 0x76
 800c950:	409a      	lsls	r2, r3
 800c952:	2300      	movs	r3, #0
 800c954:	426d      	negs	r5, r5
 800c956:	4691      	mov	r9, r2
 800c958:	1a2d      	subs	r5, r5, r0
 800c95a:	469a      	mov	sl, r3
 800c95c:	469b      	mov	fp, r3
 800c95e:	e746      	b.n	800c7ee <__aeabi_fmul+0x36>
 800c960:	4652      	mov	r2, sl
 800c962:	2303      	movs	r3, #3
 800c964:	431a      	orrs	r2, r3
 800c966:	4692      	mov	sl, r2
 800c968:	2003      	movs	r0, #3
 800c96a:	e750      	b.n	800c80e <__aeabi_fmul+0x56>
 800c96c:	0020      	movs	r0, r4
 800c96e:	f000 fa19 	bl	800cda4 <__clzsi2>
 800c972:	1f43      	subs	r3, r0, #5
 800c974:	1a2d      	subs	r5, r5, r0
 800c976:	409c      	lsls	r4, r3
 800c978:	3d76      	subs	r5, #118	; 0x76
 800c97a:	2000      	movs	r0, #0
 800c97c:	e747      	b.n	800c80e <__aeabi_fmul+0x56>
 800c97e:	2380      	movs	r3, #128	; 0x80
 800c980:	2700      	movs	r7, #0
 800c982:	03db      	lsls	r3, r3, #15
 800c984:	22ff      	movs	r2, #255	; 0xff
 800c986:	e772      	b.n	800c86e <__aeabi_fmul+0xb6>
 800c988:	4642      	mov	r2, r8
 800c98a:	e766      	b.n	800c85a <__aeabi_fmul+0xa2>
 800c98c:	464c      	mov	r4, r9
 800c98e:	0032      	movs	r2, r6
 800c990:	4658      	mov	r0, fp
 800c992:	e762      	b.n	800c85a <__aeabi_fmul+0xa2>
 800c994:	2380      	movs	r3, #128	; 0x80
 800c996:	464a      	mov	r2, r9
 800c998:	03db      	lsls	r3, r3, #15
 800c99a:	421a      	tst	r2, r3
 800c99c:	d022      	beq.n	800c9e4 <__aeabi_fmul+0x22c>
 800c99e:	421c      	tst	r4, r3
 800c9a0:	d120      	bne.n	800c9e4 <__aeabi_fmul+0x22c>
 800c9a2:	4323      	orrs	r3, r4
 800c9a4:	025b      	lsls	r3, r3, #9
 800c9a6:	0a5b      	lsrs	r3, r3, #9
 800c9a8:	4647      	mov	r7, r8
 800c9aa:	22ff      	movs	r2, #255	; 0xff
 800c9ac:	e75f      	b.n	800c86e <__aeabi_fmul+0xb6>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	1a9a      	subs	r2, r3, r2
 800c9b2:	2a1b      	cmp	r2, #27
 800c9b4:	dc21      	bgt.n	800c9fa <__aeabi_fmul+0x242>
 800c9b6:	0023      	movs	r3, r4
 800c9b8:	9901      	ldr	r1, [sp, #4]
 800c9ba:	40d3      	lsrs	r3, r2
 800c9bc:	319e      	adds	r1, #158	; 0x9e
 800c9be:	408c      	lsls	r4, r1
 800c9c0:	001a      	movs	r2, r3
 800c9c2:	0023      	movs	r3, r4
 800c9c4:	1e5c      	subs	r4, r3, #1
 800c9c6:	41a3      	sbcs	r3, r4
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	075a      	lsls	r2, r3, #29
 800c9cc:	d004      	beq.n	800c9d8 <__aeabi_fmul+0x220>
 800c9ce:	220f      	movs	r2, #15
 800c9d0:	401a      	ands	r2, r3
 800c9d2:	2a04      	cmp	r2, #4
 800c9d4:	d000      	beq.n	800c9d8 <__aeabi_fmul+0x220>
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	015a      	lsls	r2, r3, #5
 800c9da:	d411      	bmi.n	800ca00 <__aeabi_fmul+0x248>
 800c9dc:	019b      	lsls	r3, r3, #6
 800c9de:	0a5b      	lsrs	r3, r3, #9
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	e744      	b.n	800c86e <__aeabi_fmul+0xb6>
 800c9e4:	2380      	movs	r3, #128	; 0x80
 800c9e6:	464a      	mov	r2, r9
 800c9e8:	03db      	lsls	r3, r3, #15
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	025b      	lsls	r3, r3, #9
 800c9ee:	0a5b      	lsrs	r3, r3, #9
 800c9f0:	0037      	movs	r7, r6
 800c9f2:	22ff      	movs	r2, #255	; 0xff
 800c9f4:	e73b      	b.n	800c86e <__aeabi_fmul+0xb6>
 800c9f6:	9501      	str	r5, [sp, #4]
 800c9f8:	e787      	b.n	800c90a <__aeabi_fmul+0x152>
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e736      	b.n	800c86e <__aeabi_fmul+0xb6>
 800ca00:	2201      	movs	r2, #1
 800ca02:	2300      	movs	r3, #0
 800ca04:	e733      	b.n	800c86e <__aeabi_fmul+0xb6>
 800ca06:	2380      	movs	r3, #128	; 0x80
 800ca08:	03db      	lsls	r3, r3, #15
 800ca0a:	4323      	orrs	r3, r4
 800ca0c:	025b      	lsls	r3, r3, #9
 800ca0e:	0a5b      	lsrs	r3, r3, #9
 800ca10:	22ff      	movs	r2, #255	; 0xff
 800ca12:	e72c      	b.n	800c86e <__aeabi_fmul+0xb6>
 800ca14:	0801aa80 	.word	0x0801aa80
 800ca18:	f7ffffff 	.word	0xf7ffffff

0800ca1c <__aeabi_fsub>:
 800ca1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1e:	4647      	mov	r7, r8
 800ca20:	46ce      	mov	lr, r9
 800ca22:	0044      	lsls	r4, r0, #1
 800ca24:	0fc2      	lsrs	r2, r0, #31
 800ca26:	b580      	push	{r7, lr}
 800ca28:	0247      	lsls	r7, r0, #9
 800ca2a:	0248      	lsls	r0, r1, #9
 800ca2c:	0a40      	lsrs	r0, r0, #9
 800ca2e:	4684      	mov	ip, r0
 800ca30:	4666      	mov	r6, ip
 800ca32:	0048      	lsls	r0, r1, #1
 800ca34:	0a7f      	lsrs	r7, r7, #9
 800ca36:	0e24      	lsrs	r4, r4, #24
 800ca38:	00f6      	lsls	r6, r6, #3
 800ca3a:	0025      	movs	r5, r4
 800ca3c:	4690      	mov	r8, r2
 800ca3e:	00fb      	lsls	r3, r7, #3
 800ca40:	0e00      	lsrs	r0, r0, #24
 800ca42:	0fc9      	lsrs	r1, r1, #31
 800ca44:	46b1      	mov	r9, r6
 800ca46:	28ff      	cmp	r0, #255	; 0xff
 800ca48:	d100      	bne.n	800ca4c <__aeabi_fsub+0x30>
 800ca4a:	e085      	b.n	800cb58 <__aeabi_fsub+0x13c>
 800ca4c:	2601      	movs	r6, #1
 800ca4e:	4071      	eors	r1, r6
 800ca50:	1a26      	subs	r6, r4, r0
 800ca52:	4291      	cmp	r1, r2
 800ca54:	d057      	beq.n	800cb06 <__aeabi_fsub+0xea>
 800ca56:	2e00      	cmp	r6, #0
 800ca58:	dd43      	ble.n	800cae2 <__aeabi_fsub+0xc6>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d000      	beq.n	800ca60 <__aeabi_fsub+0x44>
 800ca5e:	e07f      	b.n	800cb60 <__aeabi_fsub+0x144>
 800ca60:	4649      	mov	r1, r9
 800ca62:	2900      	cmp	r1, #0
 800ca64:	d100      	bne.n	800ca68 <__aeabi_fsub+0x4c>
 800ca66:	e0aa      	b.n	800cbbe <__aeabi_fsub+0x1a2>
 800ca68:	3e01      	subs	r6, #1
 800ca6a:	2e00      	cmp	r6, #0
 800ca6c:	d000      	beq.n	800ca70 <__aeabi_fsub+0x54>
 800ca6e:	e0f7      	b.n	800cc60 <__aeabi_fsub+0x244>
 800ca70:	1a5b      	subs	r3, r3, r1
 800ca72:	015a      	lsls	r2, r3, #5
 800ca74:	d400      	bmi.n	800ca78 <__aeabi_fsub+0x5c>
 800ca76:	e08b      	b.n	800cb90 <__aeabi_fsub+0x174>
 800ca78:	019b      	lsls	r3, r3, #6
 800ca7a:	099c      	lsrs	r4, r3, #6
 800ca7c:	0020      	movs	r0, r4
 800ca7e:	f000 f991 	bl	800cda4 <__clzsi2>
 800ca82:	3805      	subs	r0, #5
 800ca84:	4084      	lsls	r4, r0
 800ca86:	4285      	cmp	r5, r0
 800ca88:	dd00      	ble.n	800ca8c <__aeabi_fsub+0x70>
 800ca8a:	e0d3      	b.n	800cc34 <__aeabi_fsub+0x218>
 800ca8c:	1b45      	subs	r5, r0, r5
 800ca8e:	0023      	movs	r3, r4
 800ca90:	2020      	movs	r0, #32
 800ca92:	3501      	adds	r5, #1
 800ca94:	40eb      	lsrs	r3, r5
 800ca96:	1b45      	subs	r5, r0, r5
 800ca98:	40ac      	lsls	r4, r5
 800ca9a:	1e62      	subs	r2, r4, #1
 800ca9c:	4194      	sbcs	r4, r2
 800ca9e:	4323      	orrs	r3, r4
 800caa0:	2407      	movs	r4, #7
 800caa2:	2500      	movs	r5, #0
 800caa4:	401c      	ands	r4, r3
 800caa6:	2201      	movs	r2, #1
 800caa8:	4641      	mov	r1, r8
 800caaa:	400a      	ands	r2, r1
 800caac:	2c00      	cmp	r4, #0
 800caae:	d004      	beq.n	800caba <__aeabi_fsub+0x9e>
 800cab0:	210f      	movs	r1, #15
 800cab2:	4019      	ands	r1, r3
 800cab4:	2904      	cmp	r1, #4
 800cab6:	d000      	beq.n	800caba <__aeabi_fsub+0x9e>
 800cab8:	3304      	adds	r3, #4
 800caba:	0159      	lsls	r1, r3, #5
 800cabc:	d400      	bmi.n	800cac0 <__aeabi_fsub+0xa4>
 800cabe:	e080      	b.n	800cbc2 <__aeabi_fsub+0x1a6>
 800cac0:	3501      	adds	r5, #1
 800cac2:	b2ec      	uxtb	r4, r5
 800cac4:	2dff      	cmp	r5, #255	; 0xff
 800cac6:	d000      	beq.n	800caca <__aeabi_fsub+0xae>
 800cac8:	e0a3      	b.n	800cc12 <__aeabi_fsub+0x1f6>
 800caca:	24ff      	movs	r4, #255	; 0xff
 800cacc:	2300      	movs	r3, #0
 800cace:	025b      	lsls	r3, r3, #9
 800cad0:	05e4      	lsls	r4, r4, #23
 800cad2:	0a58      	lsrs	r0, r3, #9
 800cad4:	07d2      	lsls	r2, r2, #31
 800cad6:	4320      	orrs	r0, r4
 800cad8:	4310      	orrs	r0, r2
 800cada:	bc0c      	pop	{r2, r3}
 800cadc:	4690      	mov	r8, r2
 800cade:	4699      	mov	r9, r3
 800cae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae2:	2e00      	cmp	r6, #0
 800cae4:	d174      	bne.n	800cbd0 <__aeabi_fsub+0x1b4>
 800cae6:	1c60      	adds	r0, r4, #1
 800cae8:	b2c0      	uxtb	r0, r0
 800caea:	2801      	cmp	r0, #1
 800caec:	dc00      	bgt.n	800caf0 <__aeabi_fsub+0xd4>
 800caee:	e0a7      	b.n	800cc40 <__aeabi_fsub+0x224>
 800caf0:	464a      	mov	r2, r9
 800caf2:	1a9c      	subs	r4, r3, r2
 800caf4:	0162      	lsls	r2, r4, #5
 800caf6:	d500      	bpl.n	800cafa <__aeabi_fsub+0xde>
 800caf8:	e0b6      	b.n	800cc68 <__aeabi_fsub+0x24c>
 800cafa:	2c00      	cmp	r4, #0
 800cafc:	d1be      	bne.n	800ca7c <__aeabi_fsub+0x60>
 800cafe:	2200      	movs	r2, #0
 800cb00:	2400      	movs	r4, #0
 800cb02:	2300      	movs	r3, #0
 800cb04:	e7e3      	b.n	800cace <__aeabi_fsub+0xb2>
 800cb06:	2e00      	cmp	r6, #0
 800cb08:	dc00      	bgt.n	800cb0c <__aeabi_fsub+0xf0>
 800cb0a:	e085      	b.n	800cc18 <__aeabi_fsub+0x1fc>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d046      	beq.n	800cb9e <__aeabi_fsub+0x182>
 800cb10:	2cff      	cmp	r4, #255	; 0xff
 800cb12:	d049      	beq.n	800cba8 <__aeabi_fsub+0x18c>
 800cb14:	2280      	movs	r2, #128	; 0x80
 800cb16:	4648      	mov	r0, r9
 800cb18:	04d2      	lsls	r2, r2, #19
 800cb1a:	4310      	orrs	r0, r2
 800cb1c:	4681      	mov	r9, r0
 800cb1e:	2201      	movs	r2, #1
 800cb20:	2e1b      	cmp	r6, #27
 800cb22:	dc09      	bgt.n	800cb38 <__aeabi_fsub+0x11c>
 800cb24:	2020      	movs	r0, #32
 800cb26:	464c      	mov	r4, r9
 800cb28:	1b80      	subs	r0, r0, r6
 800cb2a:	4084      	lsls	r4, r0
 800cb2c:	464a      	mov	r2, r9
 800cb2e:	0020      	movs	r0, r4
 800cb30:	40f2      	lsrs	r2, r6
 800cb32:	1e44      	subs	r4, r0, #1
 800cb34:	41a0      	sbcs	r0, r4
 800cb36:	4302      	orrs	r2, r0
 800cb38:	189b      	adds	r3, r3, r2
 800cb3a:	015a      	lsls	r2, r3, #5
 800cb3c:	d528      	bpl.n	800cb90 <__aeabi_fsub+0x174>
 800cb3e:	3501      	adds	r5, #1
 800cb40:	2dff      	cmp	r5, #255	; 0xff
 800cb42:	d100      	bne.n	800cb46 <__aeabi_fsub+0x12a>
 800cb44:	e0a8      	b.n	800cc98 <__aeabi_fsub+0x27c>
 800cb46:	2201      	movs	r2, #1
 800cb48:	2407      	movs	r4, #7
 800cb4a:	4994      	ldr	r1, [pc, #592]	; (800cd9c <__aeabi_fsub+0x380>)
 800cb4c:	401a      	ands	r2, r3
 800cb4e:	085b      	lsrs	r3, r3, #1
 800cb50:	400b      	ands	r3, r1
 800cb52:	4313      	orrs	r3, r2
 800cb54:	401c      	ands	r4, r3
 800cb56:	e7a6      	b.n	800caa6 <__aeabi_fsub+0x8a>
 800cb58:	2e00      	cmp	r6, #0
 800cb5a:	d000      	beq.n	800cb5e <__aeabi_fsub+0x142>
 800cb5c:	e778      	b.n	800ca50 <__aeabi_fsub+0x34>
 800cb5e:	e775      	b.n	800ca4c <__aeabi_fsub+0x30>
 800cb60:	2cff      	cmp	r4, #255	; 0xff
 800cb62:	d054      	beq.n	800cc0e <__aeabi_fsub+0x1f2>
 800cb64:	2280      	movs	r2, #128	; 0x80
 800cb66:	4649      	mov	r1, r9
 800cb68:	04d2      	lsls	r2, r2, #19
 800cb6a:	4311      	orrs	r1, r2
 800cb6c:	4689      	mov	r9, r1
 800cb6e:	2201      	movs	r2, #1
 800cb70:	2e1b      	cmp	r6, #27
 800cb72:	dc09      	bgt.n	800cb88 <__aeabi_fsub+0x16c>
 800cb74:	2120      	movs	r1, #32
 800cb76:	4648      	mov	r0, r9
 800cb78:	1b89      	subs	r1, r1, r6
 800cb7a:	4088      	lsls	r0, r1
 800cb7c:	464a      	mov	r2, r9
 800cb7e:	0001      	movs	r1, r0
 800cb80:	40f2      	lsrs	r2, r6
 800cb82:	1e48      	subs	r0, r1, #1
 800cb84:	4181      	sbcs	r1, r0
 800cb86:	430a      	orrs	r2, r1
 800cb88:	1a9b      	subs	r3, r3, r2
 800cb8a:	015a      	lsls	r2, r3, #5
 800cb8c:	d500      	bpl.n	800cb90 <__aeabi_fsub+0x174>
 800cb8e:	e773      	b.n	800ca78 <__aeabi_fsub+0x5c>
 800cb90:	2201      	movs	r2, #1
 800cb92:	4641      	mov	r1, r8
 800cb94:	400a      	ands	r2, r1
 800cb96:	0759      	lsls	r1, r3, #29
 800cb98:	d000      	beq.n	800cb9c <__aeabi_fsub+0x180>
 800cb9a:	e789      	b.n	800cab0 <__aeabi_fsub+0x94>
 800cb9c:	e011      	b.n	800cbc2 <__aeabi_fsub+0x1a6>
 800cb9e:	4648      	mov	r0, r9
 800cba0:	2800      	cmp	r0, #0
 800cba2:	d158      	bne.n	800cc56 <__aeabi_fsub+0x23a>
 800cba4:	2cff      	cmp	r4, #255	; 0xff
 800cba6:	d10c      	bne.n	800cbc2 <__aeabi_fsub+0x1a6>
 800cba8:	08db      	lsrs	r3, r3, #3
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d100      	bne.n	800cbb0 <__aeabi_fsub+0x194>
 800cbae:	e78c      	b.n	800caca <__aeabi_fsub+0xae>
 800cbb0:	2080      	movs	r0, #128	; 0x80
 800cbb2:	03c0      	lsls	r0, r0, #15
 800cbb4:	4303      	orrs	r3, r0
 800cbb6:	025b      	lsls	r3, r3, #9
 800cbb8:	0a5b      	lsrs	r3, r3, #9
 800cbba:	24ff      	movs	r4, #255	; 0xff
 800cbbc:	e787      	b.n	800cace <__aeabi_fsub+0xb2>
 800cbbe:	2cff      	cmp	r4, #255	; 0xff
 800cbc0:	d025      	beq.n	800cc0e <__aeabi_fsub+0x1f2>
 800cbc2:	08db      	lsrs	r3, r3, #3
 800cbc4:	2dff      	cmp	r5, #255	; 0xff
 800cbc6:	d0f0      	beq.n	800cbaa <__aeabi_fsub+0x18e>
 800cbc8:	025b      	lsls	r3, r3, #9
 800cbca:	0a5b      	lsrs	r3, r3, #9
 800cbcc:	b2ec      	uxtb	r4, r5
 800cbce:	e77e      	b.n	800cace <__aeabi_fsub+0xb2>
 800cbd0:	2c00      	cmp	r4, #0
 800cbd2:	d04d      	beq.n	800cc70 <__aeabi_fsub+0x254>
 800cbd4:	28ff      	cmp	r0, #255	; 0xff
 800cbd6:	d018      	beq.n	800cc0a <__aeabi_fsub+0x1ee>
 800cbd8:	2480      	movs	r4, #128	; 0x80
 800cbda:	04e4      	lsls	r4, r4, #19
 800cbdc:	4272      	negs	r2, r6
 800cbde:	4323      	orrs	r3, r4
 800cbe0:	2a1b      	cmp	r2, #27
 800cbe2:	dd00      	ble.n	800cbe6 <__aeabi_fsub+0x1ca>
 800cbe4:	e0c4      	b.n	800cd70 <__aeabi_fsub+0x354>
 800cbe6:	001c      	movs	r4, r3
 800cbe8:	2520      	movs	r5, #32
 800cbea:	40d4      	lsrs	r4, r2
 800cbec:	1aaa      	subs	r2, r5, r2
 800cbee:	4093      	lsls	r3, r2
 800cbf0:	1e5a      	subs	r2, r3, #1
 800cbf2:	4193      	sbcs	r3, r2
 800cbf4:	4323      	orrs	r3, r4
 800cbf6:	464a      	mov	r2, r9
 800cbf8:	0005      	movs	r5, r0
 800cbfa:	1ad3      	subs	r3, r2, r3
 800cbfc:	4688      	mov	r8, r1
 800cbfe:	e738      	b.n	800ca72 <__aeabi_fsub+0x56>
 800cc00:	1c72      	adds	r2, r6, #1
 800cc02:	d0f8      	beq.n	800cbf6 <__aeabi_fsub+0x1da>
 800cc04:	43f2      	mvns	r2, r6
 800cc06:	28ff      	cmp	r0, #255	; 0xff
 800cc08:	d1ea      	bne.n	800cbe0 <__aeabi_fsub+0x1c4>
 800cc0a:	000a      	movs	r2, r1
 800cc0c:	464b      	mov	r3, r9
 800cc0e:	25ff      	movs	r5, #255	; 0xff
 800cc10:	e7d7      	b.n	800cbc2 <__aeabi_fsub+0x1a6>
 800cc12:	019b      	lsls	r3, r3, #6
 800cc14:	0a5b      	lsrs	r3, r3, #9
 800cc16:	e75a      	b.n	800cace <__aeabi_fsub+0xb2>
 800cc18:	2e00      	cmp	r6, #0
 800cc1a:	d141      	bne.n	800cca0 <__aeabi_fsub+0x284>
 800cc1c:	1c65      	adds	r5, r4, #1
 800cc1e:	b2e9      	uxtb	r1, r5
 800cc20:	2901      	cmp	r1, #1
 800cc22:	dd45      	ble.n	800ccb0 <__aeabi_fsub+0x294>
 800cc24:	2dff      	cmp	r5, #255	; 0xff
 800cc26:	d100      	bne.n	800cc2a <__aeabi_fsub+0x20e>
 800cc28:	e74f      	b.n	800caca <__aeabi_fsub+0xae>
 800cc2a:	2407      	movs	r4, #7
 800cc2c:	444b      	add	r3, r9
 800cc2e:	085b      	lsrs	r3, r3, #1
 800cc30:	401c      	ands	r4, r3
 800cc32:	e738      	b.n	800caa6 <__aeabi_fsub+0x8a>
 800cc34:	2207      	movs	r2, #7
 800cc36:	4b5a      	ldr	r3, [pc, #360]	; (800cda0 <__aeabi_fsub+0x384>)
 800cc38:	1a2d      	subs	r5, r5, r0
 800cc3a:	4023      	ands	r3, r4
 800cc3c:	4014      	ands	r4, r2
 800cc3e:	e732      	b.n	800caa6 <__aeabi_fsub+0x8a>
 800cc40:	2c00      	cmp	r4, #0
 800cc42:	d11d      	bne.n	800cc80 <__aeabi_fsub+0x264>
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d17a      	bne.n	800cd3e <__aeabi_fsub+0x322>
 800cc48:	464b      	mov	r3, r9
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d100      	bne.n	800cc50 <__aeabi_fsub+0x234>
 800cc4e:	e091      	b.n	800cd74 <__aeabi_fsub+0x358>
 800cc50:	000a      	movs	r2, r1
 800cc52:	2500      	movs	r5, #0
 800cc54:	e7b5      	b.n	800cbc2 <__aeabi_fsub+0x1a6>
 800cc56:	3e01      	subs	r6, #1
 800cc58:	2e00      	cmp	r6, #0
 800cc5a:	d119      	bne.n	800cc90 <__aeabi_fsub+0x274>
 800cc5c:	444b      	add	r3, r9
 800cc5e:	e76c      	b.n	800cb3a <__aeabi_fsub+0x11e>
 800cc60:	2cff      	cmp	r4, #255	; 0xff
 800cc62:	d184      	bne.n	800cb6e <__aeabi_fsub+0x152>
 800cc64:	25ff      	movs	r5, #255	; 0xff
 800cc66:	e7ac      	b.n	800cbc2 <__aeabi_fsub+0x1a6>
 800cc68:	464a      	mov	r2, r9
 800cc6a:	4688      	mov	r8, r1
 800cc6c:	1ad4      	subs	r4, r2, r3
 800cc6e:	e705      	b.n	800ca7c <__aeabi_fsub+0x60>
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1c5      	bne.n	800cc00 <__aeabi_fsub+0x1e4>
 800cc74:	000a      	movs	r2, r1
 800cc76:	28ff      	cmp	r0, #255	; 0xff
 800cc78:	d0c8      	beq.n	800cc0c <__aeabi_fsub+0x1f0>
 800cc7a:	0005      	movs	r5, r0
 800cc7c:	464b      	mov	r3, r9
 800cc7e:	e7a0      	b.n	800cbc2 <__aeabi_fsub+0x1a6>
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d149      	bne.n	800cd18 <__aeabi_fsub+0x2fc>
 800cc84:	464b      	mov	r3, r9
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d077      	beq.n	800cd7a <__aeabi_fsub+0x35e>
 800cc8a:	000a      	movs	r2, r1
 800cc8c:	25ff      	movs	r5, #255	; 0xff
 800cc8e:	e798      	b.n	800cbc2 <__aeabi_fsub+0x1a6>
 800cc90:	2cff      	cmp	r4, #255	; 0xff
 800cc92:	d000      	beq.n	800cc96 <__aeabi_fsub+0x27a>
 800cc94:	e743      	b.n	800cb1e <__aeabi_fsub+0x102>
 800cc96:	e787      	b.n	800cba8 <__aeabi_fsub+0x18c>
 800cc98:	000a      	movs	r2, r1
 800cc9a:	24ff      	movs	r4, #255	; 0xff
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	e716      	b.n	800cace <__aeabi_fsub+0xb2>
 800cca0:	2c00      	cmp	r4, #0
 800cca2:	d115      	bne.n	800ccd0 <__aeabi_fsub+0x2b4>
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d157      	bne.n	800cd58 <__aeabi_fsub+0x33c>
 800cca8:	28ff      	cmp	r0, #255	; 0xff
 800ccaa:	d1e6      	bne.n	800cc7a <__aeabi_fsub+0x25e>
 800ccac:	464b      	mov	r3, r9
 800ccae:	e77b      	b.n	800cba8 <__aeabi_fsub+0x18c>
 800ccb0:	2c00      	cmp	r4, #0
 800ccb2:	d120      	bne.n	800ccf6 <__aeabi_fsub+0x2da>
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d057      	beq.n	800cd68 <__aeabi_fsub+0x34c>
 800ccb8:	4649      	mov	r1, r9
 800ccba:	2900      	cmp	r1, #0
 800ccbc:	d053      	beq.n	800cd66 <__aeabi_fsub+0x34a>
 800ccbe:	444b      	add	r3, r9
 800ccc0:	015a      	lsls	r2, r3, #5
 800ccc2:	d568      	bpl.n	800cd96 <__aeabi_fsub+0x37a>
 800ccc4:	2407      	movs	r4, #7
 800ccc6:	4a36      	ldr	r2, [pc, #216]	; (800cda0 <__aeabi_fsub+0x384>)
 800ccc8:	401c      	ands	r4, r3
 800ccca:	2501      	movs	r5, #1
 800cccc:	4013      	ands	r3, r2
 800ccce:	e6ea      	b.n	800caa6 <__aeabi_fsub+0x8a>
 800ccd0:	28ff      	cmp	r0, #255	; 0xff
 800ccd2:	d0eb      	beq.n	800ccac <__aeabi_fsub+0x290>
 800ccd4:	2280      	movs	r2, #128	; 0x80
 800ccd6:	04d2      	lsls	r2, r2, #19
 800ccd8:	4276      	negs	r6, r6
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	2e1b      	cmp	r6, #27
 800ccde:	dc53      	bgt.n	800cd88 <__aeabi_fsub+0x36c>
 800cce0:	2520      	movs	r5, #32
 800cce2:	1bad      	subs	r5, r5, r6
 800cce4:	001a      	movs	r2, r3
 800cce6:	40ab      	lsls	r3, r5
 800cce8:	40f2      	lsrs	r2, r6
 800ccea:	1e5c      	subs	r4, r3, #1
 800ccec:	41a3      	sbcs	r3, r4
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	444b      	add	r3, r9
 800ccf2:	0005      	movs	r5, r0
 800ccf4:	e721      	b.n	800cb3a <__aeabi_fsub+0x11e>
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d0d8      	beq.n	800ccac <__aeabi_fsub+0x290>
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	2900      	cmp	r1, #0
 800ccfe:	d100      	bne.n	800cd02 <__aeabi_fsub+0x2e6>
 800cd00:	e752      	b.n	800cba8 <__aeabi_fsub+0x18c>
 800cd02:	2180      	movs	r1, #128	; 0x80
 800cd04:	03c9      	lsls	r1, r1, #15
 800cd06:	420f      	tst	r7, r1
 800cd08:	d100      	bne.n	800cd0c <__aeabi_fsub+0x2f0>
 800cd0a:	e74d      	b.n	800cba8 <__aeabi_fsub+0x18c>
 800cd0c:	4660      	mov	r0, ip
 800cd0e:	4208      	tst	r0, r1
 800cd10:	d000      	beq.n	800cd14 <__aeabi_fsub+0x2f8>
 800cd12:	e749      	b.n	800cba8 <__aeabi_fsub+0x18c>
 800cd14:	464b      	mov	r3, r9
 800cd16:	e747      	b.n	800cba8 <__aeabi_fsub+0x18c>
 800cd18:	4648      	mov	r0, r9
 800cd1a:	25ff      	movs	r5, #255	; 0xff
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d100      	bne.n	800cd22 <__aeabi_fsub+0x306>
 800cd20:	e74f      	b.n	800cbc2 <__aeabi_fsub+0x1a6>
 800cd22:	2280      	movs	r2, #128	; 0x80
 800cd24:	03d2      	lsls	r2, r2, #15
 800cd26:	4217      	tst	r7, r2
 800cd28:	d004      	beq.n	800cd34 <__aeabi_fsub+0x318>
 800cd2a:	4660      	mov	r0, ip
 800cd2c:	4210      	tst	r0, r2
 800cd2e:	d101      	bne.n	800cd34 <__aeabi_fsub+0x318>
 800cd30:	464b      	mov	r3, r9
 800cd32:	4688      	mov	r8, r1
 800cd34:	2201      	movs	r2, #1
 800cd36:	4641      	mov	r1, r8
 800cd38:	25ff      	movs	r5, #255	; 0xff
 800cd3a:	400a      	ands	r2, r1
 800cd3c:	e741      	b.n	800cbc2 <__aeabi_fsub+0x1a6>
 800cd3e:	4648      	mov	r0, r9
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d01f      	beq.n	800cd84 <__aeabi_fsub+0x368>
 800cd44:	1a1a      	subs	r2, r3, r0
 800cd46:	0150      	lsls	r0, r2, #5
 800cd48:	d520      	bpl.n	800cd8c <__aeabi_fsub+0x370>
 800cd4a:	464a      	mov	r2, r9
 800cd4c:	2407      	movs	r4, #7
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	401c      	ands	r4, r3
 800cd52:	4688      	mov	r8, r1
 800cd54:	2500      	movs	r5, #0
 800cd56:	e6a6      	b.n	800caa6 <__aeabi_fsub+0x8a>
 800cd58:	1c74      	adds	r4, r6, #1
 800cd5a:	d0c9      	beq.n	800ccf0 <__aeabi_fsub+0x2d4>
 800cd5c:	43f6      	mvns	r6, r6
 800cd5e:	28ff      	cmp	r0, #255	; 0xff
 800cd60:	d1bc      	bne.n	800ccdc <__aeabi_fsub+0x2c0>
 800cd62:	464b      	mov	r3, r9
 800cd64:	e720      	b.n	800cba8 <__aeabi_fsub+0x18c>
 800cd66:	4699      	mov	r9, r3
 800cd68:	464b      	mov	r3, r9
 800cd6a:	2500      	movs	r5, #0
 800cd6c:	08db      	lsrs	r3, r3, #3
 800cd6e:	e72b      	b.n	800cbc8 <__aeabi_fsub+0x1ac>
 800cd70:	2301      	movs	r3, #1
 800cd72:	e740      	b.n	800cbf6 <__aeabi_fsub+0x1da>
 800cd74:	2200      	movs	r2, #0
 800cd76:	2300      	movs	r3, #0
 800cd78:	e6a9      	b.n	800cace <__aeabi_fsub+0xb2>
 800cd7a:	2380      	movs	r3, #128	; 0x80
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	03db      	lsls	r3, r3, #15
 800cd80:	24ff      	movs	r4, #255	; 0xff
 800cd82:	e6a4      	b.n	800cace <__aeabi_fsub+0xb2>
 800cd84:	2500      	movs	r5, #0
 800cd86:	e71c      	b.n	800cbc2 <__aeabi_fsub+0x1a6>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e7b1      	b.n	800ccf0 <__aeabi_fsub+0x2d4>
 800cd8c:	2a00      	cmp	r2, #0
 800cd8e:	d0f1      	beq.n	800cd74 <__aeabi_fsub+0x358>
 800cd90:	0013      	movs	r3, r2
 800cd92:	2500      	movs	r5, #0
 800cd94:	e6fc      	b.n	800cb90 <__aeabi_fsub+0x174>
 800cd96:	2500      	movs	r5, #0
 800cd98:	e6fa      	b.n	800cb90 <__aeabi_fsub+0x174>
 800cd9a:	46c0      	nop			; (mov r8, r8)
 800cd9c:	7dffffff 	.word	0x7dffffff
 800cda0:	fbffffff 	.word	0xfbffffff

0800cda4 <__clzsi2>:
 800cda4:	211c      	movs	r1, #28
 800cda6:	2301      	movs	r3, #1
 800cda8:	041b      	lsls	r3, r3, #16
 800cdaa:	4298      	cmp	r0, r3
 800cdac:	d301      	bcc.n	800cdb2 <__clzsi2+0xe>
 800cdae:	0c00      	lsrs	r0, r0, #16
 800cdb0:	3910      	subs	r1, #16
 800cdb2:	0a1b      	lsrs	r3, r3, #8
 800cdb4:	4298      	cmp	r0, r3
 800cdb6:	d301      	bcc.n	800cdbc <__clzsi2+0x18>
 800cdb8:	0a00      	lsrs	r0, r0, #8
 800cdba:	3908      	subs	r1, #8
 800cdbc:	091b      	lsrs	r3, r3, #4
 800cdbe:	4298      	cmp	r0, r3
 800cdc0:	d301      	bcc.n	800cdc6 <__clzsi2+0x22>
 800cdc2:	0900      	lsrs	r0, r0, #4
 800cdc4:	3904      	subs	r1, #4
 800cdc6:	a202      	add	r2, pc, #8	; (adr r2, 800cdd0 <__clzsi2+0x2c>)
 800cdc8:	5c10      	ldrb	r0, [r2, r0]
 800cdca:	1840      	adds	r0, r0, r1
 800cdcc:	4770      	bx	lr
 800cdce:	46c0      	nop			; (mov r8, r8)
 800cdd0:	02020304 	.word	0x02020304
 800cdd4:	01010101 	.word	0x01010101
	...

0800cde0 <__gnu_thumb1_case_sqi>:
 800cde0:	b402      	push	{r1}
 800cde2:	4671      	mov	r1, lr
 800cde4:	0849      	lsrs	r1, r1, #1
 800cde6:	0049      	lsls	r1, r1, #1
 800cde8:	5609      	ldrsb	r1, [r1, r0]
 800cdea:	0049      	lsls	r1, r1, #1
 800cdec:	448e      	add	lr, r1
 800cdee:	bc02      	pop	{r1}
 800cdf0:	4770      	bx	lr
 800cdf2:	46c0      	nop			; (mov r8, r8)

0800cdf4 <__gnu_thumb1_case_uqi>:
 800cdf4:	b402      	push	{r1}
 800cdf6:	4671      	mov	r1, lr
 800cdf8:	0849      	lsrs	r1, r1, #1
 800cdfa:	0049      	lsls	r1, r1, #1
 800cdfc:	5c09      	ldrb	r1, [r1, r0]
 800cdfe:	0049      	lsls	r1, r1, #1
 800ce00:	448e      	add	lr, r1
 800ce02:	bc02      	pop	{r1}
 800ce04:	4770      	bx	lr
 800ce06:	46c0      	nop			; (mov r8, r8)

0800ce08 <__gnu_thumb1_case_uhi>:
 800ce08:	b403      	push	{r0, r1}
 800ce0a:	4671      	mov	r1, lr
 800ce0c:	0849      	lsrs	r1, r1, #1
 800ce0e:	0040      	lsls	r0, r0, #1
 800ce10:	0049      	lsls	r1, r1, #1
 800ce12:	5a09      	ldrh	r1, [r1, r0]
 800ce14:	0049      	lsls	r1, r1, #1
 800ce16:	448e      	add	lr, r1
 800ce18:	bc03      	pop	{r0, r1}
 800ce1a:	4770      	bx	lr

0800ce1c <__udivsi3>:
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	0843      	lsrs	r3, r0, #1
 800ce20:	428b      	cmp	r3, r1
 800ce22:	d374      	bcc.n	800cf0e <__udivsi3+0xf2>
 800ce24:	0903      	lsrs	r3, r0, #4
 800ce26:	428b      	cmp	r3, r1
 800ce28:	d35f      	bcc.n	800ceea <__udivsi3+0xce>
 800ce2a:	0a03      	lsrs	r3, r0, #8
 800ce2c:	428b      	cmp	r3, r1
 800ce2e:	d344      	bcc.n	800ceba <__udivsi3+0x9e>
 800ce30:	0b03      	lsrs	r3, r0, #12
 800ce32:	428b      	cmp	r3, r1
 800ce34:	d328      	bcc.n	800ce88 <__udivsi3+0x6c>
 800ce36:	0c03      	lsrs	r3, r0, #16
 800ce38:	428b      	cmp	r3, r1
 800ce3a:	d30d      	bcc.n	800ce58 <__udivsi3+0x3c>
 800ce3c:	22ff      	movs	r2, #255	; 0xff
 800ce3e:	0209      	lsls	r1, r1, #8
 800ce40:	ba12      	rev	r2, r2
 800ce42:	0c03      	lsrs	r3, r0, #16
 800ce44:	428b      	cmp	r3, r1
 800ce46:	d302      	bcc.n	800ce4e <__udivsi3+0x32>
 800ce48:	1212      	asrs	r2, r2, #8
 800ce4a:	0209      	lsls	r1, r1, #8
 800ce4c:	d065      	beq.n	800cf1a <__udivsi3+0xfe>
 800ce4e:	0b03      	lsrs	r3, r0, #12
 800ce50:	428b      	cmp	r3, r1
 800ce52:	d319      	bcc.n	800ce88 <__udivsi3+0x6c>
 800ce54:	e000      	b.n	800ce58 <__udivsi3+0x3c>
 800ce56:	0a09      	lsrs	r1, r1, #8
 800ce58:	0bc3      	lsrs	r3, r0, #15
 800ce5a:	428b      	cmp	r3, r1
 800ce5c:	d301      	bcc.n	800ce62 <__udivsi3+0x46>
 800ce5e:	03cb      	lsls	r3, r1, #15
 800ce60:	1ac0      	subs	r0, r0, r3
 800ce62:	4152      	adcs	r2, r2
 800ce64:	0b83      	lsrs	r3, r0, #14
 800ce66:	428b      	cmp	r3, r1
 800ce68:	d301      	bcc.n	800ce6e <__udivsi3+0x52>
 800ce6a:	038b      	lsls	r3, r1, #14
 800ce6c:	1ac0      	subs	r0, r0, r3
 800ce6e:	4152      	adcs	r2, r2
 800ce70:	0b43      	lsrs	r3, r0, #13
 800ce72:	428b      	cmp	r3, r1
 800ce74:	d301      	bcc.n	800ce7a <__udivsi3+0x5e>
 800ce76:	034b      	lsls	r3, r1, #13
 800ce78:	1ac0      	subs	r0, r0, r3
 800ce7a:	4152      	adcs	r2, r2
 800ce7c:	0b03      	lsrs	r3, r0, #12
 800ce7e:	428b      	cmp	r3, r1
 800ce80:	d301      	bcc.n	800ce86 <__udivsi3+0x6a>
 800ce82:	030b      	lsls	r3, r1, #12
 800ce84:	1ac0      	subs	r0, r0, r3
 800ce86:	4152      	adcs	r2, r2
 800ce88:	0ac3      	lsrs	r3, r0, #11
 800ce8a:	428b      	cmp	r3, r1
 800ce8c:	d301      	bcc.n	800ce92 <__udivsi3+0x76>
 800ce8e:	02cb      	lsls	r3, r1, #11
 800ce90:	1ac0      	subs	r0, r0, r3
 800ce92:	4152      	adcs	r2, r2
 800ce94:	0a83      	lsrs	r3, r0, #10
 800ce96:	428b      	cmp	r3, r1
 800ce98:	d301      	bcc.n	800ce9e <__udivsi3+0x82>
 800ce9a:	028b      	lsls	r3, r1, #10
 800ce9c:	1ac0      	subs	r0, r0, r3
 800ce9e:	4152      	adcs	r2, r2
 800cea0:	0a43      	lsrs	r3, r0, #9
 800cea2:	428b      	cmp	r3, r1
 800cea4:	d301      	bcc.n	800ceaa <__udivsi3+0x8e>
 800cea6:	024b      	lsls	r3, r1, #9
 800cea8:	1ac0      	subs	r0, r0, r3
 800ceaa:	4152      	adcs	r2, r2
 800ceac:	0a03      	lsrs	r3, r0, #8
 800ceae:	428b      	cmp	r3, r1
 800ceb0:	d301      	bcc.n	800ceb6 <__udivsi3+0x9a>
 800ceb2:	020b      	lsls	r3, r1, #8
 800ceb4:	1ac0      	subs	r0, r0, r3
 800ceb6:	4152      	adcs	r2, r2
 800ceb8:	d2cd      	bcs.n	800ce56 <__udivsi3+0x3a>
 800ceba:	09c3      	lsrs	r3, r0, #7
 800cebc:	428b      	cmp	r3, r1
 800cebe:	d301      	bcc.n	800cec4 <__udivsi3+0xa8>
 800cec0:	01cb      	lsls	r3, r1, #7
 800cec2:	1ac0      	subs	r0, r0, r3
 800cec4:	4152      	adcs	r2, r2
 800cec6:	0983      	lsrs	r3, r0, #6
 800cec8:	428b      	cmp	r3, r1
 800ceca:	d301      	bcc.n	800ced0 <__udivsi3+0xb4>
 800cecc:	018b      	lsls	r3, r1, #6
 800cece:	1ac0      	subs	r0, r0, r3
 800ced0:	4152      	adcs	r2, r2
 800ced2:	0943      	lsrs	r3, r0, #5
 800ced4:	428b      	cmp	r3, r1
 800ced6:	d301      	bcc.n	800cedc <__udivsi3+0xc0>
 800ced8:	014b      	lsls	r3, r1, #5
 800ceda:	1ac0      	subs	r0, r0, r3
 800cedc:	4152      	adcs	r2, r2
 800cede:	0903      	lsrs	r3, r0, #4
 800cee0:	428b      	cmp	r3, r1
 800cee2:	d301      	bcc.n	800cee8 <__udivsi3+0xcc>
 800cee4:	010b      	lsls	r3, r1, #4
 800cee6:	1ac0      	subs	r0, r0, r3
 800cee8:	4152      	adcs	r2, r2
 800ceea:	08c3      	lsrs	r3, r0, #3
 800ceec:	428b      	cmp	r3, r1
 800ceee:	d301      	bcc.n	800cef4 <__udivsi3+0xd8>
 800cef0:	00cb      	lsls	r3, r1, #3
 800cef2:	1ac0      	subs	r0, r0, r3
 800cef4:	4152      	adcs	r2, r2
 800cef6:	0883      	lsrs	r3, r0, #2
 800cef8:	428b      	cmp	r3, r1
 800cefa:	d301      	bcc.n	800cf00 <__udivsi3+0xe4>
 800cefc:	008b      	lsls	r3, r1, #2
 800cefe:	1ac0      	subs	r0, r0, r3
 800cf00:	4152      	adcs	r2, r2
 800cf02:	0843      	lsrs	r3, r0, #1
 800cf04:	428b      	cmp	r3, r1
 800cf06:	d301      	bcc.n	800cf0c <__udivsi3+0xf0>
 800cf08:	004b      	lsls	r3, r1, #1
 800cf0a:	1ac0      	subs	r0, r0, r3
 800cf0c:	4152      	adcs	r2, r2
 800cf0e:	1a41      	subs	r1, r0, r1
 800cf10:	d200      	bcs.n	800cf14 <__udivsi3+0xf8>
 800cf12:	4601      	mov	r1, r0
 800cf14:	4152      	adcs	r2, r2
 800cf16:	4610      	mov	r0, r2
 800cf18:	4770      	bx	lr
 800cf1a:	e7ff      	b.n	800cf1c <__udivsi3+0x100>
 800cf1c:	b501      	push	{r0, lr}
 800cf1e:	2000      	movs	r0, #0
 800cf20:	f000 f8f0 	bl	800d104 <__aeabi_idiv0>
 800cf24:	bd02      	pop	{r1, pc}
 800cf26:	46c0      	nop			; (mov r8, r8)

0800cf28 <__aeabi_uidivmod>:
 800cf28:	2900      	cmp	r1, #0
 800cf2a:	d0f7      	beq.n	800cf1c <__udivsi3+0x100>
 800cf2c:	e776      	b.n	800ce1c <__udivsi3>
 800cf2e:	4770      	bx	lr

0800cf30 <__divsi3>:
 800cf30:	4603      	mov	r3, r0
 800cf32:	430b      	orrs	r3, r1
 800cf34:	d47f      	bmi.n	800d036 <__divsi3+0x106>
 800cf36:	2200      	movs	r2, #0
 800cf38:	0843      	lsrs	r3, r0, #1
 800cf3a:	428b      	cmp	r3, r1
 800cf3c:	d374      	bcc.n	800d028 <__divsi3+0xf8>
 800cf3e:	0903      	lsrs	r3, r0, #4
 800cf40:	428b      	cmp	r3, r1
 800cf42:	d35f      	bcc.n	800d004 <__divsi3+0xd4>
 800cf44:	0a03      	lsrs	r3, r0, #8
 800cf46:	428b      	cmp	r3, r1
 800cf48:	d344      	bcc.n	800cfd4 <__divsi3+0xa4>
 800cf4a:	0b03      	lsrs	r3, r0, #12
 800cf4c:	428b      	cmp	r3, r1
 800cf4e:	d328      	bcc.n	800cfa2 <__divsi3+0x72>
 800cf50:	0c03      	lsrs	r3, r0, #16
 800cf52:	428b      	cmp	r3, r1
 800cf54:	d30d      	bcc.n	800cf72 <__divsi3+0x42>
 800cf56:	22ff      	movs	r2, #255	; 0xff
 800cf58:	0209      	lsls	r1, r1, #8
 800cf5a:	ba12      	rev	r2, r2
 800cf5c:	0c03      	lsrs	r3, r0, #16
 800cf5e:	428b      	cmp	r3, r1
 800cf60:	d302      	bcc.n	800cf68 <__divsi3+0x38>
 800cf62:	1212      	asrs	r2, r2, #8
 800cf64:	0209      	lsls	r1, r1, #8
 800cf66:	d065      	beq.n	800d034 <__divsi3+0x104>
 800cf68:	0b03      	lsrs	r3, r0, #12
 800cf6a:	428b      	cmp	r3, r1
 800cf6c:	d319      	bcc.n	800cfa2 <__divsi3+0x72>
 800cf6e:	e000      	b.n	800cf72 <__divsi3+0x42>
 800cf70:	0a09      	lsrs	r1, r1, #8
 800cf72:	0bc3      	lsrs	r3, r0, #15
 800cf74:	428b      	cmp	r3, r1
 800cf76:	d301      	bcc.n	800cf7c <__divsi3+0x4c>
 800cf78:	03cb      	lsls	r3, r1, #15
 800cf7a:	1ac0      	subs	r0, r0, r3
 800cf7c:	4152      	adcs	r2, r2
 800cf7e:	0b83      	lsrs	r3, r0, #14
 800cf80:	428b      	cmp	r3, r1
 800cf82:	d301      	bcc.n	800cf88 <__divsi3+0x58>
 800cf84:	038b      	lsls	r3, r1, #14
 800cf86:	1ac0      	subs	r0, r0, r3
 800cf88:	4152      	adcs	r2, r2
 800cf8a:	0b43      	lsrs	r3, r0, #13
 800cf8c:	428b      	cmp	r3, r1
 800cf8e:	d301      	bcc.n	800cf94 <__divsi3+0x64>
 800cf90:	034b      	lsls	r3, r1, #13
 800cf92:	1ac0      	subs	r0, r0, r3
 800cf94:	4152      	adcs	r2, r2
 800cf96:	0b03      	lsrs	r3, r0, #12
 800cf98:	428b      	cmp	r3, r1
 800cf9a:	d301      	bcc.n	800cfa0 <__divsi3+0x70>
 800cf9c:	030b      	lsls	r3, r1, #12
 800cf9e:	1ac0      	subs	r0, r0, r3
 800cfa0:	4152      	adcs	r2, r2
 800cfa2:	0ac3      	lsrs	r3, r0, #11
 800cfa4:	428b      	cmp	r3, r1
 800cfa6:	d301      	bcc.n	800cfac <__divsi3+0x7c>
 800cfa8:	02cb      	lsls	r3, r1, #11
 800cfaa:	1ac0      	subs	r0, r0, r3
 800cfac:	4152      	adcs	r2, r2
 800cfae:	0a83      	lsrs	r3, r0, #10
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	d301      	bcc.n	800cfb8 <__divsi3+0x88>
 800cfb4:	028b      	lsls	r3, r1, #10
 800cfb6:	1ac0      	subs	r0, r0, r3
 800cfb8:	4152      	adcs	r2, r2
 800cfba:	0a43      	lsrs	r3, r0, #9
 800cfbc:	428b      	cmp	r3, r1
 800cfbe:	d301      	bcc.n	800cfc4 <__divsi3+0x94>
 800cfc0:	024b      	lsls	r3, r1, #9
 800cfc2:	1ac0      	subs	r0, r0, r3
 800cfc4:	4152      	adcs	r2, r2
 800cfc6:	0a03      	lsrs	r3, r0, #8
 800cfc8:	428b      	cmp	r3, r1
 800cfca:	d301      	bcc.n	800cfd0 <__divsi3+0xa0>
 800cfcc:	020b      	lsls	r3, r1, #8
 800cfce:	1ac0      	subs	r0, r0, r3
 800cfd0:	4152      	adcs	r2, r2
 800cfd2:	d2cd      	bcs.n	800cf70 <__divsi3+0x40>
 800cfd4:	09c3      	lsrs	r3, r0, #7
 800cfd6:	428b      	cmp	r3, r1
 800cfd8:	d301      	bcc.n	800cfde <__divsi3+0xae>
 800cfda:	01cb      	lsls	r3, r1, #7
 800cfdc:	1ac0      	subs	r0, r0, r3
 800cfde:	4152      	adcs	r2, r2
 800cfe0:	0983      	lsrs	r3, r0, #6
 800cfe2:	428b      	cmp	r3, r1
 800cfe4:	d301      	bcc.n	800cfea <__divsi3+0xba>
 800cfe6:	018b      	lsls	r3, r1, #6
 800cfe8:	1ac0      	subs	r0, r0, r3
 800cfea:	4152      	adcs	r2, r2
 800cfec:	0943      	lsrs	r3, r0, #5
 800cfee:	428b      	cmp	r3, r1
 800cff0:	d301      	bcc.n	800cff6 <__divsi3+0xc6>
 800cff2:	014b      	lsls	r3, r1, #5
 800cff4:	1ac0      	subs	r0, r0, r3
 800cff6:	4152      	adcs	r2, r2
 800cff8:	0903      	lsrs	r3, r0, #4
 800cffa:	428b      	cmp	r3, r1
 800cffc:	d301      	bcc.n	800d002 <__divsi3+0xd2>
 800cffe:	010b      	lsls	r3, r1, #4
 800d000:	1ac0      	subs	r0, r0, r3
 800d002:	4152      	adcs	r2, r2
 800d004:	08c3      	lsrs	r3, r0, #3
 800d006:	428b      	cmp	r3, r1
 800d008:	d301      	bcc.n	800d00e <__divsi3+0xde>
 800d00a:	00cb      	lsls	r3, r1, #3
 800d00c:	1ac0      	subs	r0, r0, r3
 800d00e:	4152      	adcs	r2, r2
 800d010:	0883      	lsrs	r3, r0, #2
 800d012:	428b      	cmp	r3, r1
 800d014:	d301      	bcc.n	800d01a <__divsi3+0xea>
 800d016:	008b      	lsls	r3, r1, #2
 800d018:	1ac0      	subs	r0, r0, r3
 800d01a:	4152      	adcs	r2, r2
 800d01c:	0843      	lsrs	r3, r0, #1
 800d01e:	428b      	cmp	r3, r1
 800d020:	d301      	bcc.n	800d026 <__divsi3+0xf6>
 800d022:	004b      	lsls	r3, r1, #1
 800d024:	1ac0      	subs	r0, r0, r3
 800d026:	4152      	adcs	r2, r2
 800d028:	1a41      	subs	r1, r0, r1
 800d02a:	d200      	bcs.n	800d02e <__divsi3+0xfe>
 800d02c:	4601      	mov	r1, r0
 800d02e:	4152      	adcs	r2, r2
 800d030:	4610      	mov	r0, r2
 800d032:	4770      	bx	lr
 800d034:	e05d      	b.n	800d0f2 <__divsi3+0x1c2>
 800d036:	0fca      	lsrs	r2, r1, #31
 800d038:	d000      	beq.n	800d03c <__divsi3+0x10c>
 800d03a:	4249      	negs	r1, r1
 800d03c:	1003      	asrs	r3, r0, #32
 800d03e:	d300      	bcc.n	800d042 <__divsi3+0x112>
 800d040:	4240      	negs	r0, r0
 800d042:	4053      	eors	r3, r2
 800d044:	2200      	movs	r2, #0
 800d046:	469c      	mov	ip, r3
 800d048:	0903      	lsrs	r3, r0, #4
 800d04a:	428b      	cmp	r3, r1
 800d04c:	d32d      	bcc.n	800d0aa <__divsi3+0x17a>
 800d04e:	0a03      	lsrs	r3, r0, #8
 800d050:	428b      	cmp	r3, r1
 800d052:	d312      	bcc.n	800d07a <__divsi3+0x14a>
 800d054:	22fc      	movs	r2, #252	; 0xfc
 800d056:	0189      	lsls	r1, r1, #6
 800d058:	ba12      	rev	r2, r2
 800d05a:	0a03      	lsrs	r3, r0, #8
 800d05c:	428b      	cmp	r3, r1
 800d05e:	d30c      	bcc.n	800d07a <__divsi3+0x14a>
 800d060:	0189      	lsls	r1, r1, #6
 800d062:	1192      	asrs	r2, r2, #6
 800d064:	428b      	cmp	r3, r1
 800d066:	d308      	bcc.n	800d07a <__divsi3+0x14a>
 800d068:	0189      	lsls	r1, r1, #6
 800d06a:	1192      	asrs	r2, r2, #6
 800d06c:	428b      	cmp	r3, r1
 800d06e:	d304      	bcc.n	800d07a <__divsi3+0x14a>
 800d070:	0189      	lsls	r1, r1, #6
 800d072:	d03a      	beq.n	800d0ea <__divsi3+0x1ba>
 800d074:	1192      	asrs	r2, r2, #6
 800d076:	e000      	b.n	800d07a <__divsi3+0x14a>
 800d078:	0989      	lsrs	r1, r1, #6
 800d07a:	09c3      	lsrs	r3, r0, #7
 800d07c:	428b      	cmp	r3, r1
 800d07e:	d301      	bcc.n	800d084 <__divsi3+0x154>
 800d080:	01cb      	lsls	r3, r1, #7
 800d082:	1ac0      	subs	r0, r0, r3
 800d084:	4152      	adcs	r2, r2
 800d086:	0983      	lsrs	r3, r0, #6
 800d088:	428b      	cmp	r3, r1
 800d08a:	d301      	bcc.n	800d090 <__divsi3+0x160>
 800d08c:	018b      	lsls	r3, r1, #6
 800d08e:	1ac0      	subs	r0, r0, r3
 800d090:	4152      	adcs	r2, r2
 800d092:	0943      	lsrs	r3, r0, #5
 800d094:	428b      	cmp	r3, r1
 800d096:	d301      	bcc.n	800d09c <__divsi3+0x16c>
 800d098:	014b      	lsls	r3, r1, #5
 800d09a:	1ac0      	subs	r0, r0, r3
 800d09c:	4152      	adcs	r2, r2
 800d09e:	0903      	lsrs	r3, r0, #4
 800d0a0:	428b      	cmp	r3, r1
 800d0a2:	d301      	bcc.n	800d0a8 <__divsi3+0x178>
 800d0a4:	010b      	lsls	r3, r1, #4
 800d0a6:	1ac0      	subs	r0, r0, r3
 800d0a8:	4152      	adcs	r2, r2
 800d0aa:	08c3      	lsrs	r3, r0, #3
 800d0ac:	428b      	cmp	r3, r1
 800d0ae:	d301      	bcc.n	800d0b4 <__divsi3+0x184>
 800d0b0:	00cb      	lsls	r3, r1, #3
 800d0b2:	1ac0      	subs	r0, r0, r3
 800d0b4:	4152      	adcs	r2, r2
 800d0b6:	0883      	lsrs	r3, r0, #2
 800d0b8:	428b      	cmp	r3, r1
 800d0ba:	d301      	bcc.n	800d0c0 <__divsi3+0x190>
 800d0bc:	008b      	lsls	r3, r1, #2
 800d0be:	1ac0      	subs	r0, r0, r3
 800d0c0:	4152      	adcs	r2, r2
 800d0c2:	d2d9      	bcs.n	800d078 <__divsi3+0x148>
 800d0c4:	0843      	lsrs	r3, r0, #1
 800d0c6:	428b      	cmp	r3, r1
 800d0c8:	d301      	bcc.n	800d0ce <__divsi3+0x19e>
 800d0ca:	004b      	lsls	r3, r1, #1
 800d0cc:	1ac0      	subs	r0, r0, r3
 800d0ce:	4152      	adcs	r2, r2
 800d0d0:	1a41      	subs	r1, r0, r1
 800d0d2:	d200      	bcs.n	800d0d6 <__divsi3+0x1a6>
 800d0d4:	4601      	mov	r1, r0
 800d0d6:	4663      	mov	r3, ip
 800d0d8:	4152      	adcs	r2, r2
 800d0da:	105b      	asrs	r3, r3, #1
 800d0dc:	4610      	mov	r0, r2
 800d0de:	d301      	bcc.n	800d0e4 <__divsi3+0x1b4>
 800d0e0:	4240      	negs	r0, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d500      	bpl.n	800d0e8 <__divsi3+0x1b8>
 800d0e6:	4249      	negs	r1, r1
 800d0e8:	4770      	bx	lr
 800d0ea:	4663      	mov	r3, ip
 800d0ec:	105b      	asrs	r3, r3, #1
 800d0ee:	d300      	bcc.n	800d0f2 <__divsi3+0x1c2>
 800d0f0:	4240      	negs	r0, r0
 800d0f2:	b501      	push	{r0, lr}
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	f000 f805 	bl	800d104 <__aeabi_idiv0>
 800d0fa:	bd02      	pop	{r1, pc}

0800d0fc <__aeabi_idivmod>:
 800d0fc:	2900      	cmp	r1, #0
 800d0fe:	d0f8      	beq.n	800d0f2 <__divsi3+0x1c2>
 800d100:	e716      	b.n	800cf30 <__divsi3>
 800d102:	4770      	bx	lr

0800d104 <__aeabi_idiv0>:
 800d104:	4770      	bx	lr
 800d106:	46c0      	nop			; (mov r8, r8)

0800d108 <__aeabi_cdrcmple>:
 800d108:	4684      	mov	ip, r0
 800d10a:	1c10      	adds	r0, r2, #0
 800d10c:	4662      	mov	r2, ip
 800d10e:	468c      	mov	ip, r1
 800d110:	1c19      	adds	r1, r3, #0
 800d112:	4663      	mov	r3, ip
 800d114:	e000      	b.n	800d118 <__aeabi_cdcmpeq>
 800d116:	46c0      	nop			; (mov r8, r8)

0800d118 <__aeabi_cdcmpeq>:
 800d118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d11a:	f001 f9ab 	bl	800e474 <__ledf2>
 800d11e:	2800      	cmp	r0, #0
 800d120:	d401      	bmi.n	800d126 <__aeabi_cdcmpeq+0xe>
 800d122:	2100      	movs	r1, #0
 800d124:	42c8      	cmn	r0, r1
 800d126:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800d128 <__aeabi_dcmpeq>:
 800d128:	b510      	push	{r4, lr}
 800d12a:	f001 f903 	bl	800e334 <__eqdf2>
 800d12e:	4240      	negs	r0, r0
 800d130:	3001      	adds	r0, #1
 800d132:	bd10      	pop	{r4, pc}

0800d134 <__aeabi_dcmplt>:
 800d134:	b510      	push	{r4, lr}
 800d136:	f001 f99d 	bl	800e474 <__ledf2>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	db01      	blt.n	800d142 <__aeabi_dcmplt+0xe>
 800d13e:	2000      	movs	r0, #0
 800d140:	bd10      	pop	{r4, pc}
 800d142:	2001      	movs	r0, #1
 800d144:	bd10      	pop	{r4, pc}
 800d146:	46c0      	nop			; (mov r8, r8)

0800d148 <__aeabi_dcmple>:
 800d148:	b510      	push	{r4, lr}
 800d14a:	f001 f993 	bl	800e474 <__ledf2>
 800d14e:	2800      	cmp	r0, #0
 800d150:	dd01      	ble.n	800d156 <__aeabi_dcmple+0xe>
 800d152:	2000      	movs	r0, #0
 800d154:	bd10      	pop	{r4, pc}
 800d156:	2001      	movs	r0, #1
 800d158:	bd10      	pop	{r4, pc}
 800d15a:	46c0      	nop			; (mov r8, r8)

0800d15c <__aeabi_dcmpgt>:
 800d15c:	b510      	push	{r4, lr}
 800d15e:	f001 f925 	bl	800e3ac <__gedf2>
 800d162:	2800      	cmp	r0, #0
 800d164:	dc01      	bgt.n	800d16a <__aeabi_dcmpgt+0xe>
 800d166:	2000      	movs	r0, #0
 800d168:	bd10      	pop	{r4, pc}
 800d16a:	2001      	movs	r0, #1
 800d16c:	bd10      	pop	{r4, pc}
 800d16e:	46c0      	nop			; (mov r8, r8)

0800d170 <__aeabi_dcmpge>:
 800d170:	b510      	push	{r4, lr}
 800d172:	f001 f91b 	bl	800e3ac <__gedf2>
 800d176:	2800      	cmp	r0, #0
 800d178:	da01      	bge.n	800d17e <__aeabi_dcmpge+0xe>
 800d17a:	2000      	movs	r0, #0
 800d17c:	bd10      	pop	{r4, pc}
 800d17e:	2001      	movs	r0, #1
 800d180:	bd10      	pop	{r4, pc}
 800d182:	46c0      	nop			; (mov r8, r8)

0800d184 <__aeabi_cfrcmple>:
 800d184:	4684      	mov	ip, r0
 800d186:	1c08      	adds	r0, r1, #0
 800d188:	4661      	mov	r1, ip
 800d18a:	e7ff      	b.n	800d18c <__aeabi_cfcmpeq>

0800d18c <__aeabi_cfcmpeq>:
 800d18c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d18e:	f000 f9a3 	bl	800d4d8 <__lesf2>
 800d192:	2800      	cmp	r0, #0
 800d194:	d401      	bmi.n	800d19a <__aeabi_cfcmpeq+0xe>
 800d196:	2100      	movs	r1, #0
 800d198:	42c8      	cmn	r0, r1
 800d19a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800d19c <__aeabi_fcmpeq>:
 800d19c:	b510      	push	{r4, lr}
 800d19e:	f000 f925 	bl	800d3ec <__eqsf2>
 800d1a2:	4240      	negs	r0, r0
 800d1a4:	3001      	adds	r0, #1
 800d1a6:	bd10      	pop	{r4, pc}

0800d1a8 <__aeabi_fcmplt>:
 800d1a8:	b510      	push	{r4, lr}
 800d1aa:	f000 f995 	bl	800d4d8 <__lesf2>
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	db01      	blt.n	800d1b6 <__aeabi_fcmplt+0xe>
 800d1b2:	2000      	movs	r0, #0
 800d1b4:	bd10      	pop	{r4, pc}
 800d1b6:	2001      	movs	r0, #1
 800d1b8:	bd10      	pop	{r4, pc}
 800d1ba:	46c0      	nop			; (mov r8, r8)

0800d1bc <__aeabi_fcmple>:
 800d1bc:	b510      	push	{r4, lr}
 800d1be:	f000 f98b 	bl	800d4d8 <__lesf2>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	dd01      	ble.n	800d1ca <__aeabi_fcmple+0xe>
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	bd10      	pop	{r4, pc}
 800d1ca:	2001      	movs	r0, #1
 800d1cc:	bd10      	pop	{r4, pc}
 800d1ce:	46c0      	nop			; (mov r8, r8)

0800d1d0 <__aeabi_fcmpgt>:
 800d1d0:	b510      	push	{r4, lr}
 800d1d2:	f000 f933 	bl	800d43c <__gesf2>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	dc01      	bgt.n	800d1de <__aeabi_fcmpgt+0xe>
 800d1da:	2000      	movs	r0, #0
 800d1dc:	bd10      	pop	{r4, pc}
 800d1de:	2001      	movs	r0, #1
 800d1e0:	bd10      	pop	{r4, pc}
 800d1e2:	46c0      	nop			; (mov r8, r8)

0800d1e4 <__aeabi_fcmpge>:
 800d1e4:	b510      	push	{r4, lr}
 800d1e6:	f000 f929 	bl	800d43c <__gesf2>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	da01      	bge.n	800d1f2 <__aeabi_fcmpge+0xe>
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	bd10      	pop	{r4, pc}
 800d1f2:	2001      	movs	r0, #1
 800d1f4:	bd10      	pop	{r4, pc}
 800d1f6:	46c0      	nop			; (mov r8, r8)

0800d1f8 <__aeabi_uldivmod>:
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d111      	bne.n	800d220 <__aeabi_uldivmod+0x28>
 800d1fc:	2a00      	cmp	r2, #0
 800d1fe:	d10f      	bne.n	800d220 <__aeabi_uldivmod+0x28>
 800d200:	2900      	cmp	r1, #0
 800d202:	d100      	bne.n	800d206 <__aeabi_uldivmod+0xe>
 800d204:	2800      	cmp	r0, #0
 800d206:	d002      	beq.n	800d20e <__aeabi_uldivmod+0x16>
 800d208:	2100      	movs	r1, #0
 800d20a:	43c9      	mvns	r1, r1
 800d20c:	1c08      	adds	r0, r1, #0
 800d20e:	b407      	push	{r0, r1, r2}
 800d210:	4802      	ldr	r0, [pc, #8]	; (800d21c <__aeabi_uldivmod+0x24>)
 800d212:	a102      	add	r1, pc, #8	; (adr r1, 800d21c <__aeabi_uldivmod+0x24>)
 800d214:	1840      	adds	r0, r0, r1
 800d216:	9002      	str	r0, [sp, #8]
 800d218:	bd03      	pop	{r0, r1, pc}
 800d21a:	46c0      	nop			; (mov r8, r8)
 800d21c:	fffffee9 	.word	0xfffffee9
 800d220:	b403      	push	{r0, r1}
 800d222:	4668      	mov	r0, sp
 800d224:	b501      	push	{r0, lr}
 800d226:	9802      	ldr	r0, [sp, #8]
 800d228:	f000 f81e 	bl	800d268 <__udivmoddi4>
 800d22c:	9b01      	ldr	r3, [sp, #4]
 800d22e:	469e      	mov	lr, r3
 800d230:	b002      	add	sp, #8
 800d232:	bc0c      	pop	{r2, r3}
 800d234:	4770      	bx	lr
 800d236:	46c0      	nop			; (mov r8, r8)

0800d238 <__aeabi_f2uiz>:
 800d238:	219e      	movs	r1, #158	; 0x9e
 800d23a:	b510      	push	{r4, lr}
 800d23c:	05c9      	lsls	r1, r1, #23
 800d23e:	1c04      	adds	r4, r0, #0
 800d240:	f7ff ffd0 	bl	800d1e4 <__aeabi_fcmpge>
 800d244:	2800      	cmp	r0, #0
 800d246:	d103      	bne.n	800d250 <__aeabi_f2uiz+0x18>
 800d248:	1c20      	adds	r0, r4, #0
 800d24a:	f000 f9ab 	bl	800d5a4 <__aeabi_f2iz>
 800d24e:	bd10      	pop	{r4, pc}
 800d250:	219e      	movs	r1, #158	; 0x9e
 800d252:	1c20      	adds	r0, r4, #0
 800d254:	05c9      	lsls	r1, r1, #23
 800d256:	f7ff fbe1 	bl	800ca1c <__aeabi_fsub>
 800d25a:	f000 f9a3 	bl	800d5a4 <__aeabi_f2iz>
 800d25e:	2380      	movs	r3, #128	; 0x80
 800d260:	061b      	lsls	r3, r3, #24
 800d262:	469c      	mov	ip, r3
 800d264:	4460      	add	r0, ip
 800d266:	e7f2      	b.n	800d24e <__aeabi_f2uiz+0x16>

0800d268 <__udivmoddi4>:
 800d268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d26a:	464f      	mov	r7, r9
 800d26c:	4646      	mov	r6, r8
 800d26e:	46d6      	mov	lr, sl
 800d270:	b5c0      	push	{r6, r7, lr}
 800d272:	0004      	movs	r4, r0
 800d274:	b082      	sub	sp, #8
 800d276:	000d      	movs	r5, r1
 800d278:	4691      	mov	r9, r2
 800d27a:	4698      	mov	r8, r3
 800d27c:	428b      	cmp	r3, r1
 800d27e:	d82f      	bhi.n	800d2e0 <__udivmoddi4+0x78>
 800d280:	d02c      	beq.n	800d2dc <__udivmoddi4+0x74>
 800d282:	4641      	mov	r1, r8
 800d284:	4648      	mov	r0, r9
 800d286:	f002 f8ab 	bl	800f3e0 <__clzdi2>
 800d28a:	0029      	movs	r1, r5
 800d28c:	0006      	movs	r6, r0
 800d28e:	0020      	movs	r0, r4
 800d290:	f002 f8a6 	bl	800f3e0 <__clzdi2>
 800d294:	1a33      	subs	r3, r6, r0
 800d296:	469c      	mov	ip, r3
 800d298:	3b20      	subs	r3, #32
 800d29a:	469a      	mov	sl, r3
 800d29c:	d500      	bpl.n	800d2a0 <__udivmoddi4+0x38>
 800d29e:	e076      	b.n	800d38e <__udivmoddi4+0x126>
 800d2a0:	464b      	mov	r3, r9
 800d2a2:	4652      	mov	r2, sl
 800d2a4:	4093      	lsls	r3, r2
 800d2a6:	001f      	movs	r7, r3
 800d2a8:	464b      	mov	r3, r9
 800d2aa:	4662      	mov	r2, ip
 800d2ac:	4093      	lsls	r3, r2
 800d2ae:	001e      	movs	r6, r3
 800d2b0:	42af      	cmp	r7, r5
 800d2b2:	d828      	bhi.n	800d306 <__udivmoddi4+0x9e>
 800d2b4:	d025      	beq.n	800d302 <__udivmoddi4+0x9a>
 800d2b6:	4653      	mov	r3, sl
 800d2b8:	1ba4      	subs	r4, r4, r6
 800d2ba:	41bd      	sbcs	r5, r7
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	da00      	bge.n	800d2c2 <__udivmoddi4+0x5a>
 800d2c0:	e07b      	b.n	800d3ba <__udivmoddi4+0x152>
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	9200      	str	r2, [sp, #0]
 800d2c8:	9301      	str	r3, [sp, #4]
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	4652      	mov	r2, sl
 800d2ce:	4093      	lsls	r3, r2
 800d2d0:	9301      	str	r3, [sp, #4]
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	4662      	mov	r2, ip
 800d2d6:	4093      	lsls	r3, r2
 800d2d8:	9300      	str	r3, [sp, #0]
 800d2da:	e018      	b.n	800d30e <__udivmoddi4+0xa6>
 800d2dc:	4282      	cmp	r2, r0
 800d2de:	d9d0      	bls.n	800d282 <__udivmoddi4+0x1a>
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	9200      	str	r2, [sp, #0]
 800d2e6:	9301      	str	r3, [sp, #4]
 800d2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <__udivmoddi4+0x8a>
 800d2ee:	601c      	str	r4, [r3, #0]
 800d2f0:	605d      	str	r5, [r3, #4]
 800d2f2:	9800      	ldr	r0, [sp, #0]
 800d2f4:	9901      	ldr	r1, [sp, #4]
 800d2f6:	b002      	add	sp, #8
 800d2f8:	bc1c      	pop	{r2, r3, r4}
 800d2fa:	4690      	mov	r8, r2
 800d2fc:	4699      	mov	r9, r3
 800d2fe:	46a2      	mov	sl, r4
 800d300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d302:	42a3      	cmp	r3, r4
 800d304:	d9d7      	bls.n	800d2b6 <__udivmoddi4+0x4e>
 800d306:	2200      	movs	r2, #0
 800d308:	2300      	movs	r3, #0
 800d30a:	9200      	str	r2, [sp, #0]
 800d30c:	9301      	str	r3, [sp, #4]
 800d30e:	4663      	mov	r3, ip
 800d310:	2b00      	cmp	r3, #0
 800d312:	d0e9      	beq.n	800d2e8 <__udivmoddi4+0x80>
 800d314:	07fb      	lsls	r3, r7, #31
 800d316:	4698      	mov	r8, r3
 800d318:	4641      	mov	r1, r8
 800d31a:	0872      	lsrs	r2, r6, #1
 800d31c:	430a      	orrs	r2, r1
 800d31e:	087b      	lsrs	r3, r7, #1
 800d320:	4666      	mov	r6, ip
 800d322:	e00e      	b.n	800d342 <__udivmoddi4+0xda>
 800d324:	42ab      	cmp	r3, r5
 800d326:	d101      	bne.n	800d32c <__udivmoddi4+0xc4>
 800d328:	42a2      	cmp	r2, r4
 800d32a:	d80c      	bhi.n	800d346 <__udivmoddi4+0xde>
 800d32c:	1aa4      	subs	r4, r4, r2
 800d32e:	419d      	sbcs	r5, r3
 800d330:	2001      	movs	r0, #1
 800d332:	1924      	adds	r4, r4, r4
 800d334:	416d      	adcs	r5, r5
 800d336:	2100      	movs	r1, #0
 800d338:	3e01      	subs	r6, #1
 800d33a:	1824      	adds	r4, r4, r0
 800d33c:	414d      	adcs	r5, r1
 800d33e:	2e00      	cmp	r6, #0
 800d340:	d006      	beq.n	800d350 <__udivmoddi4+0xe8>
 800d342:	42ab      	cmp	r3, r5
 800d344:	d9ee      	bls.n	800d324 <__udivmoddi4+0xbc>
 800d346:	3e01      	subs	r6, #1
 800d348:	1924      	adds	r4, r4, r4
 800d34a:	416d      	adcs	r5, r5
 800d34c:	2e00      	cmp	r6, #0
 800d34e:	d1f8      	bne.n	800d342 <__udivmoddi4+0xda>
 800d350:	9800      	ldr	r0, [sp, #0]
 800d352:	9901      	ldr	r1, [sp, #4]
 800d354:	4653      	mov	r3, sl
 800d356:	1900      	adds	r0, r0, r4
 800d358:	4169      	adcs	r1, r5
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	db23      	blt.n	800d3a6 <__udivmoddi4+0x13e>
 800d35e:	002b      	movs	r3, r5
 800d360:	4652      	mov	r2, sl
 800d362:	40d3      	lsrs	r3, r2
 800d364:	002a      	movs	r2, r5
 800d366:	4664      	mov	r4, ip
 800d368:	40e2      	lsrs	r2, r4
 800d36a:	001c      	movs	r4, r3
 800d36c:	4653      	mov	r3, sl
 800d36e:	0015      	movs	r5, r2
 800d370:	2b00      	cmp	r3, #0
 800d372:	db2d      	blt.n	800d3d0 <__udivmoddi4+0x168>
 800d374:	0026      	movs	r6, r4
 800d376:	4657      	mov	r7, sl
 800d378:	40be      	lsls	r6, r7
 800d37a:	0033      	movs	r3, r6
 800d37c:	0026      	movs	r6, r4
 800d37e:	4667      	mov	r7, ip
 800d380:	40be      	lsls	r6, r7
 800d382:	0032      	movs	r2, r6
 800d384:	1a80      	subs	r0, r0, r2
 800d386:	4199      	sbcs	r1, r3
 800d388:	9000      	str	r0, [sp, #0]
 800d38a:	9101      	str	r1, [sp, #4]
 800d38c:	e7ac      	b.n	800d2e8 <__udivmoddi4+0x80>
 800d38e:	4662      	mov	r2, ip
 800d390:	2320      	movs	r3, #32
 800d392:	1a9b      	subs	r3, r3, r2
 800d394:	464a      	mov	r2, r9
 800d396:	40da      	lsrs	r2, r3
 800d398:	4661      	mov	r1, ip
 800d39a:	0013      	movs	r3, r2
 800d39c:	4642      	mov	r2, r8
 800d39e:	408a      	lsls	r2, r1
 800d3a0:	0017      	movs	r7, r2
 800d3a2:	431f      	orrs	r7, r3
 800d3a4:	e780      	b.n	800d2a8 <__udivmoddi4+0x40>
 800d3a6:	4662      	mov	r2, ip
 800d3a8:	2320      	movs	r3, #32
 800d3aa:	1a9b      	subs	r3, r3, r2
 800d3ac:	002a      	movs	r2, r5
 800d3ae:	4666      	mov	r6, ip
 800d3b0:	409a      	lsls	r2, r3
 800d3b2:	0023      	movs	r3, r4
 800d3b4:	40f3      	lsrs	r3, r6
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	e7d4      	b.n	800d364 <__udivmoddi4+0xfc>
 800d3ba:	4662      	mov	r2, ip
 800d3bc:	2320      	movs	r3, #32
 800d3be:	2100      	movs	r1, #0
 800d3c0:	1a9b      	subs	r3, r3, r2
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	9100      	str	r1, [sp, #0]
 800d3c6:	9201      	str	r2, [sp, #4]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	40da      	lsrs	r2, r3
 800d3cc:	9201      	str	r2, [sp, #4]
 800d3ce:	e780      	b.n	800d2d2 <__udivmoddi4+0x6a>
 800d3d0:	2320      	movs	r3, #32
 800d3d2:	4662      	mov	r2, ip
 800d3d4:	0026      	movs	r6, r4
 800d3d6:	1a9b      	subs	r3, r3, r2
 800d3d8:	40de      	lsrs	r6, r3
 800d3da:	002f      	movs	r7, r5
 800d3dc:	46b0      	mov	r8, r6
 800d3de:	4666      	mov	r6, ip
 800d3e0:	40b7      	lsls	r7, r6
 800d3e2:	4646      	mov	r6, r8
 800d3e4:	003b      	movs	r3, r7
 800d3e6:	4333      	orrs	r3, r6
 800d3e8:	e7c8      	b.n	800d37c <__udivmoddi4+0x114>
 800d3ea:	46c0      	nop			; (mov r8, r8)

0800d3ec <__eqsf2>:
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	0042      	lsls	r2, r0, #1
 800d3f0:	024e      	lsls	r6, r1, #9
 800d3f2:	004c      	lsls	r4, r1, #1
 800d3f4:	0245      	lsls	r5, r0, #9
 800d3f6:	0a6d      	lsrs	r5, r5, #9
 800d3f8:	0e12      	lsrs	r2, r2, #24
 800d3fa:	0fc3      	lsrs	r3, r0, #31
 800d3fc:	0a76      	lsrs	r6, r6, #9
 800d3fe:	0e24      	lsrs	r4, r4, #24
 800d400:	0fc9      	lsrs	r1, r1, #31
 800d402:	2aff      	cmp	r2, #255	; 0xff
 800d404:	d00f      	beq.n	800d426 <__eqsf2+0x3a>
 800d406:	2cff      	cmp	r4, #255	; 0xff
 800d408:	d011      	beq.n	800d42e <__eqsf2+0x42>
 800d40a:	2001      	movs	r0, #1
 800d40c:	42a2      	cmp	r2, r4
 800d40e:	d000      	beq.n	800d412 <__eqsf2+0x26>
 800d410:	bd70      	pop	{r4, r5, r6, pc}
 800d412:	42b5      	cmp	r5, r6
 800d414:	d1fc      	bne.n	800d410 <__eqsf2+0x24>
 800d416:	428b      	cmp	r3, r1
 800d418:	d00d      	beq.n	800d436 <__eqsf2+0x4a>
 800d41a:	2a00      	cmp	r2, #0
 800d41c:	d1f8      	bne.n	800d410 <__eqsf2+0x24>
 800d41e:	0028      	movs	r0, r5
 800d420:	1e45      	subs	r5, r0, #1
 800d422:	41a8      	sbcs	r0, r5
 800d424:	e7f4      	b.n	800d410 <__eqsf2+0x24>
 800d426:	2001      	movs	r0, #1
 800d428:	2d00      	cmp	r5, #0
 800d42a:	d1f1      	bne.n	800d410 <__eqsf2+0x24>
 800d42c:	e7eb      	b.n	800d406 <__eqsf2+0x1a>
 800d42e:	2001      	movs	r0, #1
 800d430:	2e00      	cmp	r6, #0
 800d432:	d1ed      	bne.n	800d410 <__eqsf2+0x24>
 800d434:	e7e9      	b.n	800d40a <__eqsf2+0x1e>
 800d436:	2000      	movs	r0, #0
 800d438:	e7ea      	b.n	800d410 <__eqsf2+0x24>
 800d43a:	46c0      	nop			; (mov r8, r8)

0800d43c <__gesf2>:
 800d43c:	b570      	push	{r4, r5, r6, lr}
 800d43e:	004a      	lsls	r2, r1, #1
 800d440:	024e      	lsls	r6, r1, #9
 800d442:	0245      	lsls	r5, r0, #9
 800d444:	0044      	lsls	r4, r0, #1
 800d446:	0a6d      	lsrs	r5, r5, #9
 800d448:	0e24      	lsrs	r4, r4, #24
 800d44a:	0fc3      	lsrs	r3, r0, #31
 800d44c:	0a76      	lsrs	r6, r6, #9
 800d44e:	0e12      	lsrs	r2, r2, #24
 800d450:	0fc9      	lsrs	r1, r1, #31
 800d452:	2cff      	cmp	r4, #255	; 0xff
 800d454:	d015      	beq.n	800d482 <__gesf2+0x46>
 800d456:	2aff      	cmp	r2, #255	; 0xff
 800d458:	d00e      	beq.n	800d478 <__gesf2+0x3c>
 800d45a:	2c00      	cmp	r4, #0
 800d45c:	d115      	bne.n	800d48a <__gesf2+0x4e>
 800d45e:	2a00      	cmp	r2, #0
 800d460:	d101      	bne.n	800d466 <__gesf2+0x2a>
 800d462:	2e00      	cmp	r6, #0
 800d464:	d01c      	beq.n	800d4a0 <__gesf2+0x64>
 800d466:	2d00      	cmp	r5, #0
 800d468:	d014      	beq.n	800d494 <__gesf2+0x58>
 800d46a:	428b      	cmp	r3, r1
 800d46c:	d027      	beq.n	800d4be <__gesf2+0x82>
 800d46e:	2002      	movs	r0, #2
 800d470:	3b01      	subs	r3, #1
 800d472:	4018      	ands	r0, r3
 800d474:	3801      	subs	r0, #1
 800d476:	bd70      	pop	{r4, r5, r6, pc}
 800d478:	2e00      	cmp	r6, #0
 800d47a:	d0ee      	beq.n	800d45a <__gesf2+0x1e>
 800d47c:	2002      	movs	r0, #2
 800d47e:	4240      	negs	r0, r0
 800d480:	e7f9      	b.n	800d476 <__gesf2+0x3a>
 800d482:	2d00      	cmp	r5, #0
 800d484:	d1fa      	bne.n	800d47c <__gesf2+0x40>
 800d486:	2aff      	cmp	r2, #255	; 0xff
 800d488:	d00e      	beq.n	800d4a8 <__gesf2+0x6c>
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	d10e      	bne.n	800d4ac <__gesf2+0x70>
 800d48e:	2e00      	cmp	r6, #0
 800d490:	d0ed      	beq.n	800d46e <__gesf2+0x32>
 800d492:	e00b      	b.n	800d4ac <__gesf2+0x70>
 800d494:	2301      	movs	r3, #1
 800d496:	3901      	subs	r1, #1
 800d498:	4399      	bics	r1, r3
 800d49a:	0008      	movs	r0, r1
 800d49c:	3001      	adds	r0, #1
 800d49e:	e7ea      	b.n	800d476 <__gesf2+0x3a>
 800d4a0:	2000      	movs	r0, #0
 800d4a2:	2d00      	cmp	r5, #0
 800d4a4:	d0e7      	beq.n	800d476 <__gesf2+0x3a>
 800d4a6:	e7e2      	b.n	800d46e <__gesf2+0x32>
 800d4a8:	2e00      	cmp	r6, #0
 800d4aa:	d1e7      	bne.n	800d47c <__gesf2+0x40>
 800d4ac:	428b      	cmp	r3, r1
 800d4ae:	d1de      	bne.n	800d46e <__gesf2+0x32>
 800d4b0:	4294      	cmp	r4, r2
 800d4b2:	dd05      	ble.n	800d4c0 <__gesf2+0x84>
 800d4b4:	2102      	movs	r1, #2
 800d4b6:	1e58      	subs	r0, r3, #1
 800d4b8:	4008      	ands	r0, r1
 800d4ba:	3801      	subs	r0, #1
 800d4bc:	e7db      	b.n	800d476 <__gesf2+0x3a>
 800d4be:	2400      	movs	r4, #0
 800d4c0:	42a2      	cmp	r2, r4
 800d4c2:	dc04      	bgt.n	800d4ce <__gesf2+0x92>
 800d4c4:	42b5      	cmp	r5, r6
 800d4c6:	d8d2      	bhi.n	800d46e <__gesf2+0x32>
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	42b5      	cmp	r5, r6
 800d4cc:	d2d3      	bcs.n	800d476 <__gesf2+0x3a>
 800d4ce:	1e58      	subs	r0, r3, #1
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	4398      	bics	r0, r3
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	e7ce      	b.n	800d476 <__gesf2+0x3a>

0800d4d8 <__lesf2>:
 800d4d8:	b530      	push	{r4, r5, lr}
 800d4da:	0042      	lsls	r2, r0, #1
 800d4dc:	0244      	lsls	r4, r0, #9
 800d4de:	024d      	lsls	r5, r1, #9
 800d4e0:	0fc3      	lsrs	r3, r0, #31
 800d4e2:	0048      	lsls	r0, r1, #1
 800d4e4:	0a64      	lsrs	r4, r4, #9
 800d4e6:	0e12      	lsrs	r2, r2, #24
 800d4e8:	0a6d      	lsrs	r5, r5, #9
 800d4ea:	0e00      	lsrs	r0, r0, #24
 800d4ec:	0fc9      	lsrs	r1, r1, #31
 800d4ee:	2aff      	cmp	r2, #255	; 0xff
 800d4f0:	d012      	beq.n	800d518 <__lesf2+0x40>
 800d4f2:	28ff      	cmp	r0, #255	; 0xff
 800d4f4:	d00c      	beq.n	800d510 <__lesf2+0x38>
 800d4f6:	2a00      	cmp	r2, #0
 800d4f8:	d112      	bne.n	800d520 <__lesf2+0x48>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d119      	bne.n	800d532 <__lesf2+0x5a>
 800d4fe:	2d00      	cmp	r5, #0
 800d500:	d117      	bne.n	800d532 <__lesf2+0x5a>
 800d502:	2c00      	cmp	r4, #0
 800d504:	d02b      	beq.n	800d55e <__lesf2+0x86>
 800d506:	2002      	movs	r0, #2
 800d508:	3b01      	subs	r3, #1
 800d50a:	4018      	ands	r0, r3
 800d50c:	3801      	subs	r0, #1
 800d50e:	e026      	b.n	800d55e <__lesf2+0x86>
 800d510:	2d00      	cmp	r5, #0
 800d512:	d0f0      	beq.n	800d4f6 <__lesf2+0x1e>
 800d514:	2002      	movs	r0, #2
 800d516:	e022      	b.n	800d55e <__lesf2+0x86>
 800d518:	2c00      	cmp	r4, #0
 800d51a:	d1fb      	bne.n	800d514 <__lesf2+0x3c>
 800d51c:	28ff      	cmp	r0, #255	; 0xff
 800d51e:	d01f      	beq.n	800d560 <__lesf2+0x88>
 800d520:	2800      	cmp	r0, #0
 800d522:	d11f      	bne.n	800d564 <__lesf2+0x8c>
 800d524:	2d00      	cmp	r5, #0
 800d526:	d11d      	bne.n	800d564 <__lesf2+0x8c>
 800d528:	2002      	movs	r0, #2
 800d52a:	3b01      	subs	r3, #1
 800d52c:	4018      	ands	r0, r3
 800d52e:	3801      	subs	r0, #1
 800d530:	e015      	b.n	800d55e <__lesf2+0x86>
 800d532:	2c00      	cmp	r4, #0
 800d534:	d00e      	beq.n	800d554 <__lesf2+0x7c>
 800d536:	428b      	cmp	r3, r1
 800d538:	d1e5      	bne.n	800d506 <__lesf2+0x2e>
 800d53a:	2200      	movs	r2, #0
 800d53c:	4290      	cmp	r0, r2
 800d53e:	dc04      	bgt.n	800d54a <__lesf2+0x72>
 800d540:	42ac      	cmp	r4, r5
 800d542:	d8e0      	bhi.n	800d506 <__lesf2+0x2e>
 800d544:	2000      	movs	r0, #0
 800d546:	42ac      	cmp	r4, r5
 800d548:	d209      	bcs.n	800d55e <__lesf2+0x86>
 800d54a:	1e58      	subs	r0, r3, #1
 800d54c:	2301      	movs	r3, #1
 800d54e:	4398      	bics	r0, r3
 800d550:	3001      	adds	r0, #1
 800d552:	e004      	b.n	800d55e <__lesf2+0x86>
 800d554:	2301      	movs	r3, #1
 800d556:	3901      	subs	r1, #1
 800d558:	4399      	bics	r1, r3
 800d55a:	0008      	movs	r0, r1
 800d55c:	3001      	adds	r0, #1
 800d55e:	bd30      	pop	{r4, r5, pc}
 800d560:	2d00      	cmp	r5, #0
 800d562:	d1d7      	bne.n	800d514 <__lesf2+0x3c>
 800d564:	428b      	cmp	r3, r1
 800d566:	d1ce      	bne.n	800d506 <__lesf2+0x2e>
 800d568:	4282      	cmp	r2, r0
 800d56a:	dde7      	ble.n	800d53c <__lesf2+0x64>
 800d56c:	2102      	movs	r1, #2
 800d56e:	1e58      	subs	r0, r3, #1
 800d570:	4008      	ands	r0, r1
 800d572:	3801      	subs	r0, #1
 800d574:	e7f3      	b.n	800d55e <__lesf2+0x86>
 800d576:	46c0      	nop			; (mov r8, r8)

0800d578 <__aeabi_fcmpun>:
 800d578:	0242      	lsls	r2, r0, #9
 800d57a:	024b      	lsls	r3, r1, #9
 800d57c:	0040      	lsls	r0, r0, #1
 800d57e:	0049      	lsls	r1, r1, #1
 800d580:	0a52      	lsrs	r2, r2, #9
 800d582:	0a5b      	lsrs	r3, r3, #9
 800d584:	0e09      	lsrs	r1, r1, #24
 800d586:	0e00      	lsrs	r0, r0, #24
 800d588:	28ff      	cmp	r0, #255	; 0xff
 800d58a:	d006      	beq.n	800d59a <__aeabi_fcmpun+0x22>
 800d58c:	2000      	movs	r0, #0
 800d58e:	29ff      	cmp	r1, #255	; 0xff
 800d590:	d102      	bne.n	800d598 <__aeabi_fcmpun+0x20>
 800d592:	0018      	movs	r0, r3
 800d594:	1e43      	subs	r3, r0, #1
 800d596:	4198      	sbcs	r0, r3
 800d598:	4770      	bx	lr
 800d59a:	38fe      	subs	r0, #254	; 0xfe
 800d59c:	2a00      	cmp	r2, #0
 800d59e:	d1fb      	bne.n	800d598 <__aeabi_fcmpun+0x20>
 800d5a0:	e7f4      	b.n	800d58c <__aeabi_fcmpun+0x14>
 800d5a2:	46c0      	nop			; (mov r8, r8)

0800d5a4 <__aeabi_f2iz>:
 800d5a4:	0241      	lsls	r1, r0, #9
 800d5a6:	0042      	lsls	r2, r0, #1
 800d5a8:	0fc3      	lsrs	r3, r0, #31
 800d5aa:	0a49      	lsrs	r1, r1, #9
 800d5ac:	0e12      	lsrs	r2, r2, #24
 800d5ae:	2000      	movs	r0, #0
 800d5b0:	2a7e      	cmp	r2, #126	; 0x7e
 800d5b2:	d90d      	bls.n	800d5d0 <__aeabi_f2iz+0x2c>
 800d5b4:	2a9d      	cmp	r2, #157	; 0x9d
 800d5b6:	d80c      	bhi.n	800d5d2 <__aeabi_f2iz+0x2e>
 800d5b8:	2080      	movs	r0, #128	; 0x80
 800d5ba:	0400      	lsls	r0, r0, #16
 800d5bc:	4301      	orrs	r1, r0
 800d5be:	2a95      	cmp	r2, #149	; 0x95
 800d5c0:	dc0a      	bgt.n	800d5d8 <__aeabi_f2iz+0x34>
 800d5c2:	2096      	movs	r0, #150	; 0x96
 800d5c4:	1a82      	subs	r2, r0, r2
 800d5c6:	40d1      	lsrs	r1, r2
 800d5c8:	4248      	negs	r0, r1
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d100      	bne.n	800d5d0 <__aeabi_f2iz+0x2c>
 800d5ce:	0008      	movs	r0, r1
 800d5d0:	4770      	bx	lr
 800d5d2:	4a03      	ldr	r2, [pc, #12]	; (800d5e0 <__aeabi_f2iz+0x3c>)
 800d5d4:	1898      	adds	r0, r3, r2
 800d5d6:	e7fb      	b.n	800d5d0 <__aeabi_f2iz+0x2c>
 800d5d8:	3a96      	subs	r2, #150	; 0x96
 800d5da:	4091      	lsls	r1, r2
 800d5dc:	e7f4      	b.n	800d5c8 <__aeabi_f2iz+0x24>
 800d5de:	46c0      	nop			; (mov r8, r8)
 800d5e0:	7fffffff 	.word	0x7fffffff

0800d5e4 <__aeabi_i2f>:
 800d5e4:	b570      	push	{r4, r5, r6, lr}
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d03d      	beq.n	800d666 <__aeabi_i2f+0x82>
 800d5ea:	17c3      	asrs	r3, r0, #31
 800d5ec:	18c5      	adds	r5, r0, r3
 800d5ee:	405d      	eors	r5, r3
 800d5f0:	0fc4      	lsrs	r4, r0, #31
 800d5f2:	0028      	movs	r0, r5
 800d5f4:	f7ff fbd6 	bl	800cda4 <__clzsi2>
 800d5f8:	229e      	movs	r2, #158	; 0x9e
 800d5fa:	1a12      	subs	r2, r2, r0
 800d5fc:	2a96      	cmp	r2, #150	; 0x96
 800d5fe:	dc07      	bgt.n	800d610 <__aeabi_i2f+0x2c>
 800d600:	b2d2      	uxtb	r2, r2
 800d602:	2808      	cmp	r0, #8
 800d604:	dd33      	ble.n	800d66e <__aeabi_i2f+0x8a>
 800d606:	3808      	subs	r0, #8
 800d608:	4085      	lsls	r5, r0
 800d60a:	0268      	lsls	r0, r5, #9
 800d60c:	0a40      	lsrs	r0, r0, #9
 800d60e:	e023      	b.n	800d658 <__aeabi_i2f+0x74>
 800d610:	2a99      	cmp	r2, #153	; 0x99
 800d612:	dd0b      	ble.n	800d62c <__aeabi_i2f+0x48>
 800d614:	2305      	movs	r3, #5
 800d616:	0029      	movs	r1, r5
 800d618:	1a1b      	subs	r3, r3, r0
 800d61a:	40d9      	lsrs	r1, r3
 800d61c:	0003      	movs	r3, r0
 800d61e:	331b      	adds	r3, #27
 800d620:	409d      	lsls	r5, r3
 800d622:	002b      	movs	r3, r5
 800d624:	1e5d      	subs	r5, r3, #1
 800d626:	41ab      	sbcs	r3, r5
 800d628:	4319      	orrs	r1, r3
 800d62a:	000d      	movs	r5, r1
 800d62c:	2805      	cmp	r0, #5
 800d62e:	dd01      	ble.n	800d634 <__aeabi_i2f+0x50>
 800d630:	1f43      	subs	r3, r0, #5
 800d632:	409d      	lsls	r5, r3
 800d634:	002b      	movs	r3, r5
 800d636:	490f      	ldr	r1, [pc, #60]	; (800d674 <__aeabi_i2f+0x90>)
 800d638:	400b      	ands	r3, r1
 800d63a:	076e      	lsls	r6, r5, #29
 800d63c:	d009      	beq.n	800d652 <__aeabi_i2f+0x6e>
 800d63e:	260f      	movs	r6, #15
 800d640:	4035      	ands	r5, r6
 800d642:	2d04      	cmp	r5, #4
 800d644:	d005      	beq.n	800d652 <__aeabi_i2f+0x6e>
 800d646:	3304      	adds	r3, #4
 800d648:	015d      	lsls	r5, r3, #5
 800d64a:	d502      	bpl.n	800d652 <__aeabi_i2f+0x6e>
 800d64c:	229f      	movs	r2, #159	; 0x9f
 800d64e:	400b      	ands	r3, r1
 800d650:	1a12      	subs	r2, r2, r0
 800d652:	019b      	lsls	r3, r3, #6
 800d654:	0a58      	lsrs	r0, r3, #9
 800d656:	b2d2      	uxtb	r2, r2
 800d658:	0240      	lsls	r0, r0, #9
 800d65a:	05d2      	lsls	r2, r2, #23
 800d65c:	0a40      	lsrs	r0, r0, #9
 800d65e:	07e4      	lsls	r4, r4, #31
 800d660:	4310      	orrs	r0, r2
 800d662:	4320      	orrs	r0, r4
 800d664:	bd70      	pop	{r4, r5, r6, pc}
 800d666:	2400      	movs	r4, #0
 800d668:	2200      	movs	r2, #0
 800d66a:	2000      	movs	r0, #0
 800d66c:	e7f4      	b.n	800d658 <__aeabi_i2f+0x74>
 800d66e:	0268      	lsls	r0, r5, #9
 800d670:	0a40      	lsrs	r0, r0, #9
 800d672:	e7f1      	b.n	800d658 <__aeabi_i2f+0x74>
 800d674:	fbffffff 	.word	0xfbffffff

0800d678 <__aeabi_ui2f>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	1e04      	subs	r4, r0, #0
 800d67c:	d034      	beq.n	800d6e8 <__aeabi_ui2f+0x70>
 800d67e:	f7ff fb91 	bl	800cda4 <__clzsi2>
 800d682:	229e      	movs	r2, #158	; 0x9e
 800d684:	1a12      	subs	r2, r2, r0
 800d686:	2a96      	cmp	r2, #150	; 0x96
 800d688:	dc07      	bgt.n	800d69a <__aeabi_ui2f+0x22>
 800d68a:	b2d2      	uxtb	r2, r2
 800d68c:	2808      	cmp	r0, #8
 800d68e:	dd2e      	ble.n	800d6ee <__aeabi_ui2f+0x76>
 800d690:	3808      	subs	r0, #8
 800d692:	4084      	lsls	r4, r0
 800d694:	0260      	lsls	r0, r4, #9
 800d696:	0a40      	lsrs	r0, r0, #9
 800d698:	e021      	b.n	800d6de <__aeabi_ui2f+0x66>
 800d69a:	2a99      	cmp	r2, #153	; 0x99
 800d69c:	dd09      	ble.n	800d6b2 <__aeabi_ui2f+0x3a>
 800d69e:	0003      	movs	r3, r0
 800d6a0:	0021      	movs	r1, r4
 800d6a2:	331b      	adds	r3, #27
 800d6a4:	4099      	lsls	r1, r3
 800d6a6:	1e4b      	subs	r3, r1, #1
 800d6a8:	4199      	sbcs	r1, r3
 800d6aa:	2305      	movs	r3, #5
 800d6ac:	1a1b      	subs	r3, r3, r0
 800d6ae:	40dc      	lsrs	r4, r3
 800d6b0:	430c      	orrs	r4, r1
 800d6b2:	2805      	cmp	r0, #5
 800d6b4:	dd01      	ble.n	800d6ba <__aeabi_ui2f+0x42>
 800d6b6:	1f43      	subs	r3, r0, #5
 800d6b8:	409c      	lsls	r4, r3
 800d6ba:	0023      	movs	r3, r4
 800d6bc:	490d      	ldr	r1, [pc, #52]	; (800d6f4 <__aeabi_ui2f+0x7c>)
 800d6be:	400b      	ands	r3, r1
 800d6c0:	0765      	lsls	r5, r4, #29
 800d6c2:	d009      	beq.n	800d6d8 <__aeabi_ui2f+0x60>
 800d6c4:	250f      	movs	r5, #15
 800d6c6:	402c      	ands	r4, r5
 800d6c8:	2c04      	cmp	r4, #4
 800d6ca:	d005      	beq.n	800d6d8 <__aeabi_ui2f+0x60>
 800d6cc:	3304      	adds	r3, #4
 800d6ce:	015c      	lsls	r4, r3, #5
 800d6d0:	d502      	bpl.n	800d6d8 <__aeabi_ui2f+0x60>
 800d6d2:	229f      	movs	r2, #159	; 0x9f
 800d6d4:	400b      	ands	r3, r1
 800d6d6:	1a12      	subs	r2, r2, r0
 800d6d8:	019b      	lsls	r3, r3, #6
 800d6da:	0a58      	lsrs	r0, r3, #9
 800d6dc:	b2d2      	uxtb	r2, r2
 800d6de:	0240      	lsls	r0, r0, #9
 800d6e0:	05d2      	lsls	r2, r2, #23
 800d6e2:	0a40      	lsrs	r0, r0, #9
 800d6e4:	4310      	orrs	r0, r2
 800d6e6:	bd70      	pop	{r4, r5, r6, pc}
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	2000      	movs	r0, #0
 800d6ec:	e7f7      	b.n	800d6de <__aeabi_ui2f+0x66>
 800d6ee:	0260      	lsls	r0, r4, #9
 800d6f0:	0a40      	lsrs	r0, r0, #9
 800d6f2:	e7f4      	b.n	800d6de <__aeabi_ui2f+0x66>
 800d6f4:	fbffffff 	.word	0xfbffffff

0800d6f8 <__aeabi_dadd>:
 800d6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6fa:	464f      	mov	r7, r9
 800d6fc:	4646      	mov	r6, r8
 800d6fe:	46d6      	mov	lr, sl
 800d700:	000c      	movs	r4, r1
 800d702:	0309      	lsls	r1, r1, #12
 800d704:	b5c0      	push	{r6, r7, lr}
 800d706:	0a49      	lsrs	r1, r1, #9
 800d708:	0f47      	lsrs	r7, r0, #29
 800d70a:	005e      	lsls	r6, r3, #1
 800d70c:	4339      	orrs	r1, r7
 800d70e:	031f      	lsls	r7, r3, #12
 800d710:	0fdb      	lsrs	r3, r3, #31
 800d712:	469c      	mov	ip, r3
 800d714:	0065      	lsls	r5, r4, #1
 800d716:	0a7b      	lsrs	r3, r7, #9
 800d718:	0f57      	lsrs	r7, r2, #29
 800d71a:	431f      	orrs	r7, r3
 800d71c:	0d6d      	lsrs	r5, r5, #21
 800d71e:	0fe4      	lsrs	r4, r4, #31
 800d720:	0d76      	lsrs	r6, r6, #21
 800d722:	46a1      	mov	r9, r4
 800d724:	00c0      	lsls	r0, r0, #3
 800d726:	46b8      	mov	r8, r7
 800d728:	00d2      	lsls	r2, r2, #3
 800d72a:	1bab      	subs	r3, r5, r6
 800d72c:	4564      	cmp	r4, ip
 800d72e:	d07b      	beq.n	800d828 <__aeabi_dadd+0x130>
 800d730:	2b00      	cmp	r3, #0
 800d732:	dd5f      	ble.n	800d7f4 <__aeabi_dadd+0xfc>
 800d734:	2e00      	cmp	r6, #0
 800d736:	d000      	beq.n	800d73a <__aeabi_dadd+0x42>
 800d738:	e0a4      	b.n	800d884 <__aeabi_dadd+0x18c>
 800d73a:	003e      	movs	r6, r7
 800d73c:	4316      	orrs	r6, r2
 800d73e:	d100      	bne.n	800d742 <__aeabi_dadd+0x4a>
 800d740:	e112      	b.n	800d968 <__aeabi_dadd+0x270>
 800d742:	1e5e      	subs	r6, r3, #1
 800d744:	2e00      	cmp	r6, #0
 800d746:	d000      	beq.n	800d74a <__aeabi_dadd+0x52>
 800d748:	e19e      	b.n	800da88 <__aeabi_dadd+0x390>
 800d74a:	1a87      	subs	r7, r0, r2
 800d74c:	4643      	mov	r3, r8
 800d74e:	42b8      	cmp	r0, r7
 800d750:	4180      	sbcs	r0, r0
 800d752:	2501      	movs	r5, #1
 800d754:	1ac9      	subs	r1, r1, r3
 800d756:	4240      	negs	r0, r0
 800d758:	1a09      	subs	r1, r1, r0
 800d75a:	020b      	lsls	r3, r1, #8
 800d75c:	d400      	bmi.n	800d760 <__aeabi_dadd+0x68>
 800d75e:	e131      	b.n	800d9c4 <__aeabi_dadd+0x2cc>
 800d760:	0249      	lsls	r1, r1, #9
 800d762:	0a4e      	lsrs	r6, r1, #9
 800d764:	2e00      	cmp	r6, #0
 800d766:	d100      	bne.n	800d76a <__aeabi_dadd+0x72>
 800d768:	e16e      	b.n	800da48 <__aeabi_dadd+0x350>
 800d76a:	0030      	movs	r0, r6
 800d76c:	f7ff fb1a 	bl	800cda4 <__clzsi2>
 800d770:	0003      	movs	r3, r0
 800d772:	3b08      	subs	r3, #8
 800d774:	2b1f      	cmp	r3, #31
 800d776:	dd00      	ble.n	800d77a <__aeabi_dadd+0x82>
 800d778:	e161      	b.n	800da3e <__aeabi_dadd+0x346>
 800d77a:	2220      	movs	r2, #32
 800d77c:	0039      	movs	r1, r7
 800d77e:	1ad2      	subs	r2, r2, r3
 800d780:	409e      	lsls	r6, r3
 800d782:	40d1      	lsrs	r1, r2
 800d784:	409f      	lsls	r7, r3
 800d786:	430e      	orrs	r6, r1
 800d788:	429d      	cmp	r5, r3
 800d78a:	dd00      	ble.n	800d78e <__aeabi_dadd+0x96>
 800d78c:	e151      	b.n	800da32 <__aeabi_dadd+0x33a>
 800d78e:	1b5d      	subs	r5, r3, r5
 800d790:	1c6b      	adds	r3, r5, #1
 800d792:	2b1f      	cmp	r3, #31
 800d794:	dd00      	ble.n	800d798 <__aeabi_dadd+0xa0>
 800d796:	e17c      	b.n	800da92 <__aeabi_dadd+0x39a>
 800d798:	2120      	movs	r1, #32
 800d79a:	1ac9      	subs	r1, r1, r3
 800d79c:	003d      	movs	r5, r7
 800d79e:	0030      	movs	r0, r6
 800d7a0:	408f      	lsls	r7, r1
 800d7a2:	4088      	lsls	r0, r1
 800d7a4:	40dd      	lsrs	r5, r3
 800d7a6:	1e79      	subs	r1, r7, #1
 800d7a8:	418f      	sbcs	r7, r1
 800d7aa:	0031      	movs	r1, r6
 800d7ac:	2207      	movs	r2, #7
 800d7ae:	4328      	orrs	r0, r5
 800d7b0:	40d9      	lsrs	r1, r3
 800d7b2:	2500      	movs	r5, #0
 800d7b4:	4307      	orrs	r7, r0
 800d7b6:	403a      	ands	r2, r7
 800d7b8:	2a00      	cmp	r2, #0
 800d7ba:	d009      	beq.n	800d7d0 <__aeabi_dadd+0xd8>
 800d7bc:	230f      	movs	r3, #15
 800d7be:	403b      	ands	r3, r7
 800d7c0:	2b04      	cmp	r3, #4
 800d7c2:	d005      	beq.n	800d7d0 <__aeabi_dadd+0xd8>
 800d7c4:	1d3b      	adds	r3, r7, #4
 800d7c6:	42bb      	cmp	r3, r7
 800d7c8:	41bf      	sbcs	r7, r7
 800d7ca:	427f      	negs	r7, r7
 800d7cc:	19c9      	adds	r1, r1, r7
 800d7ce:	001f      	movs	r7, r3
 800d7d0:	020b      	lsls	r3, r1, #8
 800d7d2:	d400      	bmi.n	800d7d6 <__aeabi_dadd+0xde>
 800d7d4:	e226      	b.n	800dc24 <__aeabi_dadd+0x52c>
 800d7d6:	1c6a      	adds	r2, r5, #1
 800d7d8:	4bc6      	ldr	r3, [pc, #792]	; (800daf4 <__aeabi_dadd+0x3fc>)
 800d7da:	0555      	lsls	r5, r2, #21
 800d7dc:	0d6d      	lsrs	r5, r5, #21
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d100      	bne.n	800d7e4 <__aeabi_dadd+0xec>
 800d7e2:	e106      	b.n	800d9f2 <__aeabi_dadd+0x2fa>
 800d7e4:	4ac4      	ldr	r2, [pc, #784]	; (800daf8 <__aeabi_dadd+0x400>)
 800d7e6:	08ff      	lsrs	r7, r7, #3
 800d7e8:	400a      	ands	r2, r1
 800d7ea:	0753      	lsls	r3, r2, #29
 800d7ec:	0252      	lsls	r2, r2, #9
 800d7ee:	433b      	orrs	r3, r7
 800d7f0:	0b12      	lsrs	r2, r2, #12
 800d7f2:	e08e      	b.n	800d912 <__aeabi_dadd+0x21a>
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d000      	beq.n	800d7fa <__aeabi_dadd+0x102>
 800d7f8:	e0b8      	b.n	800d96c <__aeabi_dadd+0x274>
 800d7fa:	1c6b      	adds	r3, r5, #1
 800d7fc:	055b      	lsls	r3, r3, #21
 800d7fe:	0d5b      	lsrs	r3, r3, #21
 800d800:	2b01      	cmp	r3, #1
 800d802:	dc00      	bgt.n	800d806 <__aeabi_dadd+0x10e>
 800d804:	e130      	b.n	800da68 <__aeabi_dadd+0x370>
 800d806:	1a87      	subs	r7, r0, r2
 800d808:	4643      	mov	r3, r8
 800d80a:	42b8      	cmp	r0, r7
 800d80c:	41b6      	sbcs	r6, r6
 800d80e:	1acb      	subs	r3, r1, r3
 800d810:	4276      	negs	r6, r6
 800d812:	1b9e      	subs	r6, r3, r6
 800d814:	0233      	lsls	r3, r6, #8
 800d816:	d500      	bpl.n	800d81a <__aeabi_dadd+0x122>
 800d818:	e14c      	b.n	800dab4 <__aeabi_dadd+0x3bc>
 800d81a:	003b      	movs	r3, r7
 800d81c:	4333      	orrs	r3, r6
 800d81e:	d1a1      	bne.n	800d764 <__aeabi_dadd+0x6c>
 800d820:	2200      	movs	r2, #0
 800d822:	2400      	movs	r4, #0
 800d824:	2500      	movs	r5, #0
 800d826:	e070      	b.n	800d90a <__aeabi_dadd+0x212>
 800d828:	2b00      	cmp	r3, #0
 800d82a:	dc00      	bgt.n	800d82e <__aeabi_dadd+0x136>
 800d82c:	e0e5      	b.n	800d9fa <__aeabi_dadd+0x302>
 800d82e:	2e00      	cmp	r6, #0
 800d830:	d100      	bne.n	800d834 <__aeabi_dadd+0x13c>
 800d832:	e083      	b.n	800d93c <__aeabi_dadd+0x244>
 800d834:	4eaf      	ldr	r6, [pc, #700]	; (800daf4 <__aeabi_dadd+0x3fc>)
 800d836:	42b5      	cmp	r5, r6
 800d838:	d060      	beq.n	800d8fc <__aeabi_dadd+0x204>
 800d83a:	2680      	movs	r6, #128	; 0x80
 800d83c:	0436      	lsls	r6, r6, #16
 800d83e:	4337      	orrs	r7, r6
 800d840:	46b8      	mov	r8, r7
 800d842:	2b38      	cmp	r3, #56	; 0x38
 800d844:	dc00      	bgt.n	800d848 <__aeabi_dadd+0x150>
 800d846:	e13e      	b.n	800dac6 <__aeabi_dadd+0x3ce>
 800d848:	4643      	mov	r3, r8
 800d84a:	4313      	orrs	r3, r2
 800d84c:	001f      	movs	r7, r3
 800d84e:	1e7a      	subs	r2, r7, #1
 800d850:	4197      	sbcs	r7, r2
 800d852:	183f      	adds	r7, r7, r0
 800d854:	4287      	cmp	r7, r0
 800d856:	4180      	sbcs	r0, r0
 800d858:	4240      	negs	r0, r0
 800d85a:	1809      	adds	r1, r1, r0
 800d85c:	020b      	lsls	r3, r1, #8
 800d85e:	d400      	bmi.n	800d862 <__aeabi_dadd+0x16a>
 800d860:	e0b0      	b.n	800d9c4 <__aeabi_dadd+0x2cc>
 800d862:	4ba4      	ldr	r3, [pc, #656]	; (800daf4 <__aeabi_dadd+0x3fc>)
 800d864:	3501      	adds	r5, #1
 800d866:	429d      	cmp	r5, r3
 800d868:	d100      	bne.n	800d86c <__aeabi_dadd+0x174>
 800d86a:	e0c3      	b.n	800d9f4 <__aeabi_dadd+0x2fc>
 800d86c:	4aa2      	ldr	r2, [pc, #648]	; (800daf8 <__aeabi_dadd+0x400>)
 800d86e:	087b      	lsrs	r3, r7, #1
 800d870:	400a      	ands	r2, r1
 800d872:	2101      	movs	r1, #1
 800d874:	400f      	ands	r7, r1
 800d876:	431f      	orrs	r7, r3
 800d878:	0851      	lsrs	r1, r2, #1
 800d87a:	07d3      	lsls	r3, r2, #31
 800d87c:	2207      	movs	r2, #7
 800d87e:	431f      	orrs	r7, r3
 800d880:	403a      	ands	r2, r7
 800d882:	e799      	b.n	800d7b8 <__aeabi_dadd+0xc0>
 800d884:	4e9b      	ldr	r6, [pc, #620]	; (800daf4 <__aeabi_dadd+0x3fc>)
 800d886:	42b5      	cmp	r5, r6
 800d888:	d038      	beq.n	800d8fc <__aeabi_dadd+0x204>
 800d88a:	2680      	movs	r6, #128	; 0x80
 800d88c:	0436      	lsls	r6, r6, #16
 800d88e:	4337      	orrs	r7, r6
 800d890:	46b8      	mov	r8, r7
 800d892:	2b38      	cmp	r3, #56	; 0x38
 800d894:	dd00      	ble.n	800d898 <__aeabi_dadd+0x1a0>
 800d896:	e0dc      	b.n	800da52 <__aeabi_dadd+0x35a>
 800d898:	2b1f      	cmp	r3, #31
 800d89a:	dc00      	bgt.n	800d89e <__aeabi_dadd+0x1a6>
 800d89c:	e130      	b.n	800db00 <__aeabi_dadd+0x408>
 800d89e:	001e      	movs	r6, r3
 800d8a0:	4647      	mov	r7, r8
 800d8a2:	3e20      	subs	r6, #32
 800d8a4:	40f7      	lsrs	r7, r6
 800d8a6:	46bc      	mov	ip, r7
 800d8a8:	2b20      	cmp	r3, #32
 800d8aa:	d004      	beq.n	800d8b6 <__aeabi_dadd+0x1be>
 800d8ac:	2640      	movs	r6, #64	; 0x40
 800d8ae:	1af3      	subs	r3, r6, r3
 800d8b0:	4646      	mov	r6, r8
 800d8b2:	409e      	lsls	r6, r3
 800d8b4:	4332      	orrs	r2, r6
 800d8b6:	0017      	movs	r7, r2
 800d8b8:	4663      	mov	r3, ip
 800d8ba:	1e7a      	subs	r2, r7, #1
 800d8bc:	4197      	sbcs	r7, r2
 800d8be:	431f      	orrs	r7, r3
 800d8c0:	e0cc      	b.n	800da5c <__aeabi_dadd+0x364>
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d100      	bne.n	800d8c8 <__aeabi_dadd+0x1d0>
 800d8c6:	e204      	b.n	800dcd2 <__aeabi_dadd+0x5da>
 800d8c8:	4643      	mov	r3, r8
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	d100      	bne.n	800d8d0 <__aeabi_dadd+0x1d8>
 800d8ce:	e159      	b.n	800db84 <__aeabi_dadd+0x48c>
 800d8d0:	074b      	lsls	r3, r1, #29
 800d8d2:	08c0      	lsrs	r0, r0, #3
 800d8d4:	4318      	orrs	r0, r3
 800d8d6:	2380      	movs	r3, #128	; 0x80
 800d8d8:	08c9      	lsrs	r1, r1, #3
 800d8da:	031b      	lsls	r3, r3, #12
 800d8dc:	4219      	tst	r1, r3
 800d8de:	d008      	beq.n	800d8f2 <__aeabi_dadd+0x1fa>
 800d8e0:	4645      	mov	r5, r8
 800d8e2:	08ed      	lsrs	r5, r5, #3
 800d8e4:	421d      	tst	r5, r3
 800d8e6:	d104      	bne.n	800d8f2 <__aeabi_dadd+0x1fa>
 800d8e8:	4643      	mov	r3, r8
 800d8ea:	08d0      	lsrs	r0, r2, #3
 800d8ec:	0759      	lsls	r1, r3, #29
 800d8ee:	4308      	orrs	r0, r1
 800d8f0:	0029      	movs	r1, r5
 800d8f2:	0f42      	lsrs	r2, r0, #29
 800d8f4:	00c9      	lsls	r1, r1, #3
 800d8f6:	4d7f      	ldr	r5, [pc, #508]	; (800daf4 <__aeabi_dadd+0x3fc>)
 800d8f8:	4311      	orrs	r1, r2
 800d8fa:	00c0      	lsls	r0, r0, #3
 800d8fc:	074b      	lsls	r3, r1, #29
 800d8fe:	08ca      	lsrs	r2, r1, #3
 800d900:	497c      	ldr	r1, [pc, #496]	; (800daf4 <__aeabi_dadd+0x3fc>)
 800d902:	08c0      	lsrs	r0, r0, #3
 800d904:	4303      	orrs	r3, r0
 800d906:	428d      	cmp	r5, r1
 800d908:	d068      	beq.n	800d9dc <__aeabi_dadd+0x2e4>
 800d90a:	0312      	lsls	r2, r2, #12
 800d90c:	056d      	lsls	r5, r5, #21
 800d90e:	0b12      	lsrs	r2, r2, #12
 800d910:	0d6d      	lsrs	r5, r5, #21
 800d912:	2100      	movs	r1, #0
 800d914:	0312      	lsls	r2, r2, #12
 800d916:	0018      	movs	r0, r3
 800d918:	0b13      	lsrs	r3, r2, #12
 800d91a:	0d0a      	lsrs	r2, r1, #20
 800d91c:	0512      	lsls	r2, r2, #20
 800d91e:	431a      	orrs	r2, r3
 800d920:	4b76      	ldr	r3, [pc, #472]	; (800dafc <__aeabi_dadd+0x404>)
 800d922:	052d      	lsls	r5, r5, #20
 800d924:	4013      	ands	r3, r2
 800d926:	432b      	orrs	r3, r5
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	07e4      	lsls	r4, r4, #31
 800d92c:	085b      	lsrs	r3, r3, #1
 800d92e:	4323      	orrs	r3, r4
 800d930:	0019      	movs	r1, r3
 800d932:	bc1c      	pop	{r2, r3, r4}
 800d934:	4690      	mov	r8, r2
 800d936:	4699      	mov	r9, r3
 800d938:	46a2      	mov	sl, r4
 800d93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d93c:	003e      	movs	r6, r7
 800d93e:	4316      	orrs	r6, r2
 800d940:	d012      	beq.n	800d968 <__aeabi_dadd+0x270>
 800d942:	1e5e      	subs	r6, r3, #1
 800d944:	2e00      	cmp	r6, #0
 800d946:	d000      	beq.n	800d94a <__aeabi_dadd+0x252>
 800d948:	e100      	b.n	800db4c <__aeabi_dadd+0x454>
 800d94a:	1887      	adds	r7, r0, r2
 800d94c:	4287      	cmp	r7, r0
 800d94e:	4180      	sbcs	r0, r0
 800d950:	4441      	add	r1, r8
 800d952:	4240      	negs	r0, r0
 800d954:	1809      	adds	r1, r1, r0
 800d956:	2501      	movs	r5, #1
 800d958:	020b      	lsls	r3, r1, #8
 800d95a:	d533      	bpl.n	800d9c4 <__aeabi_dadd+0x2cc>
 800d95c:	2502      	movs	r5, #2
 800d95e:	e785      	b.n	800d86c <__aeabi_dadd+0x174>
 800d960:	4664      	mov	r4, ip
 800d962:	0033      	movs	r3, r6
 800d964:	4641      	mov	r1, r8
 800d966:	0010      	movs	r0, r2
 800d968:	001d      	movs	r5, r3
 800d96a:	e7c7      	b.n	800d8fc <__aeabi_dadd+0x204>
 800d96c:	2d00      	cmp	r5, #0
 800d96e:	d000      	beq.n	800d972 <__aeabi_dadd+0x27a>
 800d970:	e0da      	b.n	800db28 <__aeabi_dadd+0x430>
 800d972:	000c      	movs	r4, r1
 800d974:	4304      	orrs	r4, r0
 800d976:	d0f3      	beq.n	800d960 <__aeabi_dadd+0x268>
 800d978:	1c5c      	adds	r4, r3, #1
 800d97a:	d100      	bne.n	800d97e <__aeabi_dadd+0x286>
 800d97c:	e19f      	b.n	800dcbe <__aeabi_dadd+0x5c6>
 800d97e:	4c5d      	ldr	r4, [pc, #372]	; (800daf4 <__aeabi_dadd+0x3fc>)
 800d980:	42a6      	cmp	r6, r4
 800d982:	d100      	bne.n	800d986 <__aeabi_dadd+0x28e>
 800d984:	e12f      	b.n	800dbe6 <__aeabi_dadd+0x4ee>
 800d986:	43db      	mvns	r3, r3
 800d988:	2b38      	cmp	r3, #56	; 0x38
 800d98a:	dd00      	ble.n	800d98e <__aeabi_dadd+0x296>
 800d98c:	e166      	b.n	800dc5c <__aeabi_dadd+0x564>
 800d98e:	2b1f      	cmp	r3, #31
 800d990:	dd00      	ble.n	800d994 <__aeabi_dadd+0x29c>
 800d992:	e183      	b.n	800dc9c <__aeabi_dadd+0x5a4>
 800d994:	2420      	movs	r4, #32
 800d996:	0005      	movs	r5, r0
 800d998:	1ae4      	subs	r4, r4, r3
 800d99a:	000f      	movs	r7, r1
 800d99c:	40dd      	lsrs	r5, r3
 800d99e:	40d9      	lsrs	r1, r3
 800d9a0:	40a0      	lsls	r0, r4
 800d9a2:	4643      	mov	r3, r8
 800d9a4:	40a7      	lsls	r7, r4
 800d9a6:	1a5b      	subs	r3, r3, r1
 800d9a8:	1e44      	subs	r4, r0, #1
 800d9aa:	41a0      	sbcs	r0, r4
 800d9ac:	4698      	mov	r8, r3
 800d9ae:	432f      	orrs	r7, r5
 800d9b0:	4338      	orrs	r0, r7
 800d9b2:	1a17      	subs	r7, r2, r0
 800d9b4:	42ba      	cmp	r2, r7
 800d9b6:	4192      	sbcs	r2, r2
 800d9b8:	4643      	mov	r3, r8
 800d9ba:	4252      	negs	r2, r2
 800d9bc:	1a99      	subs	r1, r3, r2
 800d9be:	4664      	mov	r4, ip
 800d9c0:	0035      	movs	r5, r6
 800d9c2:	e6ca      	b.n	800d75a <__aeabi_dadd+0x62>
 800d9c4:	2207      	movs	r2, #7
 800d9c6:	403a      	ands	r2, r7
 800d9c8:	2a00      	cmp	r2, #0
 800d9ca:	d000      	beq.n	800d9ce <__aeabi_dadd+0x2d6>
 800d9cc:	e6f6      	b.n	800d7bc <__aeabi_dadd+0xc4>
 800d9ce:	074b      	lsls	r3, r1, #29
 800d9d0:	08ca      	lsrs	r2, r1, #3
 800d9d2:	4948      	ldr	r1, [pc, #288]	; (800daf4 <__aeabi_dadd+0x3fc>)
 800d9d4:	08ff      	lsrs	r7, r7, #3
 800d9d6:	433b      	orrs	r3, r7
 800d9d8:	428d      	cmp	r5, r1
 800d9da:	d196      	bne.n	800d90a <__aeabi_dadd+0x212>
 800d9dc:	0019      	movs	r1, r3
 800d9de:	4311      	orrs	r1, r2
 800d9e0:	d100      	bne.n	800d9e4 <__aeabi_dadd+0x2ec>
 800d9e2:	e19e      	b.n	800dd22 <__aeabi_dadd+0x62a>
 800d9e4:	2180      	movs	r1, #128	; 0x80
 800d9e6:	0309      	lsls	r1, r1, #12
 800d9e8:	430a      	orrs	r2, r1
 800d9ea:	0312      	lsls	r2, r2, #12
 800d9ec:	0b12      	lsrs	r2, r2, #12
 800d9ee:	4d41      	ldr	r5, [pc, #260]	; (800daf4 <__aeabi_dadd+0x3fc>)
 800d9f0:	e78f      	b.n	800d912 <__aeabi_dadd+0x21a>
 800d9f2:	0015      	movs	r5, r2
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e78b      	b.n	800d912 <__aeabi_dadd+0x21a>
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d000      	beq.n	800da00 <__aeabi_dadd+0x308>
 800d9fe:	e0c7      	b.n	800db90 <__aeabi_dadd+0x498>
 800da00:	1c6b      	adds	r3, r5, #1
 800da02:	055f      	lsls	r7, r3, #21
 800da04:	0d7f      	lsrs	r7, r7, #21
 800da06:	2f01      	cmp	r7, #1
 800da08:	dc00      	bgt.n	800da0c <__aeabi_dadd+0x314>
 800da0a:	e0f1      	b.n	800dbf0 <__aeabi_dadd+0x4f8>
 800da0c:	4d39      	ldr	r5, [pc, #228]	; (800daf4 <__aeabi_dadd+0x3fc>)
 800da0e:	42ab      	cmp	r3, r5
 800da10:	d100      	bne.n	800da14 <__aeabi_dadd+0x31c>
 800da12:	e0b9      	b.n	800db88 <__aeabi_dadd+0x490>
 800da14:	1885      	adds	r5, r0, r2
 800da16:	000a      	movs	r2, r1
 800da18:	4285      	cmp	r5, r0
 800da1a:	4189      	sbcs	r1, r1
 800da1c:	4442      	add	r2, r8
 800da1e:	4249      	negs	r1, r1
 800da20:	1851      	adds	r1, r2, r1
 800da22:	2207      	movs	r2, #7
 800da24:	07cf      	lsls	r7, r1, #31
 800da26:	086d      	lsrs	r5, r5, #1
 800da28:	432f      	orrs	r7, r5
 800da2a:	0849      	lsrs	r1, r1, #1
 800da2c:	403a      	ands	r2, r7
 800da2e:	001d      	movs	r5, r3
 800da30:	e6c2      	b.n	800d7b8 <__aeabi_dadd+0xc0>
 800da32:	2207      	movs	r2, #7
 800da34:	4930      	ldr	r1, [pc, #192]	; (800daf8 <__aeabi_dadd+0x400>)
 800da36:	1aed      	subs	r5, r5, r3
 800da38:	4031      	ands	r1, r6
 800da3a:	403a      	ands	r2, r7
 800da3c:	e6bc      	b.n	800d7b8 <__aeabi_dadd+0xc0>
 800da3e:	003e      	movs	r6, r7
 800da40:	3828      	subs	r0, #40	; 0x28
 800da42:	4086      	lsls	r6, r0
 800da44:	2700      	movs	r7, #0
 800da46:	e69f      	b.n	800d788 <__aeabi_dadd+0x90>
 800da48:	0038      	movs	r0, r7
 800da4a:	f7ff f9ab 	bl	800cda4 <__clzsi2>
 800da4e:	3020      	adds	r0, #32
 800da50:	e68e      	b.n	800d770 <__aeabi_dadd+0x78>
 800da52:	4643      	mov	r3, r8
 800da54:	4313      	orrs	r3, r2
 800da56:	001f      	movs	r7, r3
 800da58:	1e7a      	subs	r2, r7, #1
 800da5a:	4197      	sbcs	r7, r2
 800da5c:	1bc7      	subs	r7, r0, r7
 800da5e:	42b8      	cmp	r0, r7
 800da60:	4180      	sbcs	r0, r0
 800da62:	4240      	negs	r0, r0
 800da64:	1a09      	subs	r1, r1, r0
 800da66:	e678      	b.n	800d75a <__aeabi_dadd+0x62>
 800da68:	000e      	movs	r6, r1
 800da6a:	003b      	movs	r3, r7
 800da6c:	4306      	orrs	r6, r0
 800da6e:	4313      	orrs	r3, r2
 800da70:	2d00      	cmp	r5, #0
 800da72:	d161      	bne.n	800db38 <__aeabi_dadd+0x440>
 800da74:	2e00      	cmp	r6, #0
 800da76:	d000      	beq.n	800da7a <__aeabi_dadd+0x382>
 800da78:	e0f4      	b.n	800dc64 <__aeabi_dadd+0x56c>
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d100      	bne.n	800da80 <__aeabi_dadd+0x388>
 800da7e:	e11b      	b.n	800dcb8 <__aeabi_dadd+0x5c0>
 800da80:	4664      	mov	r4, ip
 800da82:	0039      	movs	r1, r7
 800da84:	0010      	movs	r0, r2
 800da86:	e739      	b.n	800d8fc <__aeabi_dadd+0x204>
 800da88:	4f1a      	ldr	r7, [pc, #104]	; (800daf4 <__aeabi_dadd+0x3fc>)
 800da8a:	42bb      	cmp	r3, r7
 800da8c:	d07a      	beq.n	800db84 <__aeabi_dadd+0x48c>
 800da8e:	0033      	movs	r3, r6
 800da90:	e6ff      	b.n	800d892 <__aeabi_dadd+0x19a>
 800da92:	0030      	movs	r0, r6
 800da94:	3d1f      	subs	r5, #31
 800da96:	40e8      	lsrs	r0, r5
 800da98:	2b20      	cmp	r3, #32
 800da9a:	d003      	beq.n	800daa4 <__aeabi_dadd+0x3ac>
 800da9c:	2140      	movs	r1, #64	; 0x40
 800da9e:	1acb      	subs	r3, r1, r3
 800daa0:	409e      	lsls	r6, r3
 800daa2:	4337      	orrs	r7, r6
 800daa4:	1e7b      	subs	r3, r7, #1
 800daa6:	419f      	sbcs	r7, r3
 800daa8:	2207      	movs	r2, #7
 800daaa:	4307      	orrs	r7, r0
 800daac:	403a      	ands	r2, r7
 800daae:	2100      	movs	r1, #0
 800dab0:	2500      	movs	r5, #0
 800dab2:	e789      	b.n	800d9c8 <__aeabi_dadd+0x2d0>
 800dab4:	1a17      	subs	r7, r2, r0
 800dab6:	4643      	mov	r3, r8
 800dab8:	42ba      	cmp	r2, r7
 800daba:	41b6      	sbcs	r6, r6
 800dabc:	1a59      	subs	r1, r3, r1
 800dabe:	4276      	negs	r6, r6
 800dac0:	1b8e      	subs	r6, r1, r6
 800dac2:	4664      	mov	r4, ip
 800dac4:	e64e      	b.n	800d764 <__aeabi_dadd+0x6c>
 800dac6:	2b1f      	cmp	r3, #31
 800dac8:	dd00      	ble.n	800dacc <__aeabi_dadd+0x3d4>
 800daca:	e0ad      	b.n	800dc28 <__aeabi_dadd+0x530>
 800dacc:	2620      	movs	r6, #32
 800dace:	4647      	mov	r7, r8
 800dad0:	1af6      	subs	r6, r6, r3
 800dad2:	40b7      	lsls	r7, r6
 800dad4:	46b9      	mov	r9, r7
 800dad6:	0017      	movs	r7, r2
 800dad8:	46b2      	mov	sl, r6
 800dada:	40df      	lsrs	r7, r3
 800dadc:	464e      	mov	r6, r9
 800dade:	433e      	orrs	r6, r7
 800dae0:	0037      	movs	r7, r6
 800dae2:	4656      	mov	r6, sl
 800dae4:	40b2      	lsls	r2, r6
 800dae6:	1e56      	subs	r6, r2, #1
 800dae8:	41b2      	sbcs	r2, r6
 800daea:	4317      	orrs	r7, r2
 800daec:	4642      	mov	r2, r8
 800daee:	40da      	lsrs	r2, r3
 800daf0:	1889      	adds	r1, r1, r2
 800daf2:	e6ae      	b.n	800d852 <__aeabi_dadd+0x15a>
 800daf4:	000007ff 	.word	0x000007ff
 800daf8:	ff7fffff 	.word	0xff7fffff
 800dafc:	800fffff 	.word	0x800fffff
 800db00:	2620      	movs	r6, #32
 800db02:	4647      	mov	r7, r8
 800db04:	1af6      	subs	r6, r6, r3
 800db06:	40b7      	lsls	r7, r6
 800db08:	46b9      	mov	r9, r7
 800db0a:	0017      	movs	r7, r2
 800db0c:	46b2      	mov	sl, r6
 800db0e:	40df      	lsrs	r7, r3
 800db10:	464e      	mov	r6, r9
 800db12:	433e      	orrs	r6, r7
 800db14:	0037      	movs	r7, r6
 800db16:	4656      	mov	r6, sl
 800db18:	40b2      	lsls	r2, r6
 800db1a:	1e56      	subs	r6, r2, #1
 800db1c:	41b2      	sbcs	r2, r6
 800db1e:	4317      	orrs	r7, r2
 800db20:	4642      	mov	r2, r8
 800db22:	40da      	lsrs	r2, r3
 800db24:	1a89      	subs	r1, r1, r2
 800db26:	e799      	b.n	800da5c <__aeabi_dadd+0x364>
 800db28:	4c7f      	ldr	r4, [pc, #508]	; (800dd28 <__aeabi_dadd+0x630>)
 800db2a:	42a6      	cmp	r6, r4
 800db2c:	d05b      	beq.n	800dbe6 <__aeabi_dadd+0x4ee>
 800db2e:	2480      	movs	r4, #128	; 0x80
 800db30:	0424      	lsls	r4, r4, #16
 800db32:	425b      	negs	r3, r3
 800db34:	4321      	orrs	r1, r4
 800db36:	e727      	b.n	800d988 <__aeabi_dadd+0x290>
 800db38:	2e00      	cmp	r6, #0
 800db3a:	d10c      	bne.n	800db56 <__aeabi_dadd+0x45e>
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d100      	bne.n	800db42 <__aeabi_dadd+0x44a>
 800db40:	e0cb      	b.n	800dcda <__aeabi_dadd+0x5e2>
 800db42:	4664      	mov	r4, ip
 800db44:	0039      	movs	r1, r7
 800db46:	0010      	movs	r0, r2
 800db48:	4d77      	ldr	r5, [pc, #476]	; (800dd28 <__aeabi_dadd+0x630>)
 800db4a:	e6d7      	b.n	800d8fc <__aeabi_dadd+0x204>
 800db4c:	4f76      	ldr	r7, [pc, #472]	; (800dd28 <__aeabi_dadd+0x630>)
 800db4e:	42bb      	cmp	r3, r7
 800db50:	d018      	beq.n	800db84 <__aeabi_dadd+0x48c>
 800db52:	0033      	movs	r3, r6
 800db54:	e675      	b.n	800d842 <__aeabi_dadd+0x14a>
 800db56:	2b00      	cmp	r3, #0
 800db58:	d014      	beq.n	800db84 <__aeabi_dadd+0x48c>
 800db5a:	074b      	lsls	r3, r1, #29
 800db5c:	08c0      	lsrs	r0, r0, #3
 800db5e:	4318      	orrs	r0, r3
 800db60:	2380      	movs	r3, #128	; 0x80
 800db62:	08c9      	lsrs	r1, r1, #3
 800db64:	031b      	lsls	r3, r3, #12
 800db66:	4219      	tst	r1, r3
 800db68:	d007      	beq.n	800db7a <__aeabi_dadd+0x482>
 800db6a:	08fc      	lsrs	r4, r7, #3
 800db6c:	421c      	tst	r4, r3
 800db6e:	d104      	bne.n	800db7a <__aeabi_dadd+0x482>
 800db70:	0779      	lsls	r1, r7, #29
 800db72:	08d0      	lsrs	r0, r2, #3
 800db74:	4308      	orrs	r0, r1
 800db76:	46e1      	mov	r9, ip
 800db78:	0021      	movs	r1, r4
 800db7a:	464c      	mov	r4, r9
 800db7c:	0f42      	lsrs	r2, r0, #29
 800db7e:	00c9      	lsls	r1, r1, #3
 800db80:	4311      	orrs	r1, r2
 800db82:	00c0      	lsls	r0, r0, #3
 800db84:	4d68      	ldr	r5, [pc, #416]	; (800dd28 <__aeabi_dadd+0x630>)
 800db86:	e6b9      	b.n	800d8fc <__aeabi_dadd+0x204>
 800db88:	001d      	movs	r5, r3
 800db8a:	2200      	movs	r2, #0
 800db8c:	2300      	movs	r3, #0
 800db8e:	e6c0      	b.n	800d912 <__aeabi_dadd+0x21a>
 800db90:	2d00      	cmp	r5, #0
 800db92:	d15b      	bne.n	800dc4c <__aeabi_dadd+0x554>
 800db94:	000d      	movs	r5, r1
 800db96:	4305      	orrs	r5, r0
 800db98:	d100      	bne.n	800db9c <__aeabi_dadd+0x4a4>
 800db9a:	e6e2      	b.n	800d962 <__aeabi_dadd+0x26a>
 800db9c:	1c5d      	adds	r5, r3, #1
 800db9e:	d100      	bne.n	800dba2 <__aeabi_dadd+0x4aa>
 800dba0:	e0b0      	b.n	800dd04 <__aeabi_dadd+0x60c>
 800dba2:	4d61      	ldr	r5, [pc, #388]	; (800dd28 <__aeabi_dadd+0x630>)
 800dba4:	42ae      	cmp	r6, r5
 800dba6:	d01f      	beq.n	800dbe8 <__aeabi_dadd+0x4f0>
 800dba8:	43db      	mvns	r3, r3
 800dbaa:	2b38      	cmp	r3, #56	; 0x38
 800dbac:	dc71      	bgt.n	800dc92 <__aeabi_dadd+0x59a>
 800dbae:	2b1f      	cmp	r3, #31
 800dbb0:	dd00      	ble.n	800dbb4 <__aeabi_dadd+0x4bc>
 800dbb2:	e096      	b.n	800dce2 <__aeabi_dadd+0x5ea>
 800dbb4:	2520      	movs	r5, #32
 800dbb6:	000f      	movs	r7, r1
 800dbb8:	1aed      	subs	r5, r5, r3
 800dbba:	40af      	lsls	r7, r5
 800dbbc:	46b9      	mov	r9, r7
 800dbbe:	0007      	movs	r7, r0
 800dbc0:	46aa      	mov	sl, r5
 800dbc2:	40df      	lsrs	r7, r3
 800dbc4:	464d      	mov	r5, r9
 800dbc6:	433d      	orrs	r5, r7
 800dbc8:	002f      	movs	r7, r5
 800dbca:	4655      	mov	r5, sl
 800dbcc:	40a8      	lsls	r0, r5
 800dbce:	40d9      	lsrs	r1, r3
 800dbd0:	1e45      	subs	r5, r0, #1
 800dbd2:	41a8      	sbcs	r0, r5
 800dbd4:	4488      	add	r8, r1
 800dbd6:	4307      	orrs	r7, r0
 800dbd8:	18bf      	adds	r7, r7, r2
 800dbda:	4297      	cmp	r7, r2
 800dbdc:	4192      	sbcs	r2, r2
 800dbde:	4251      	negs	r1, r2
 800dbe0:	4441      	add	r1, r8
 800dbe2:	0035      	movs	r5, r6
 800dbe4:	e63a      	b.n	800d85c <__aeabi_dadd+0x164>
 800dbe6:	4664      	mov	r4, ip
 800dbe8:	0035      	movs	r5, r6
 800dbea:	4641      	mov	r1, r8
 800dbec:	0010      	movs	r0, r2
 800dbee:	e685      	b.n	800d8fc <__aeabi_dadd+0x204>
 800dbf0:	000b      	movs	r3, r1
 800dbf2:	4303      	orrs	r3, r0
 800dbf4:	2d00      	cmp	r5, #0
 800dbf6:	d000      	beq.n	800dbfa <__aeabi_dadd+0x502>
 800dbf8:	e663      	b.n	800d8c2 <__aeabi_dadd+0x1ca>
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d0f5      	beq.n	800dbea <__aeabi_dadd+0x4f2>
 800dbfe:	4643      	mov	r3, r8
 800dc00:	4313      	orrs	r3, r2
 800dc02:	d100      	bne.n	800dc06 <__aeabi_dadd+0x50e>
 800dc04:	e67a      	b.n	800d8fc <__aeabi_dadd+0x204>
 800dc06:	1887      	adds	r7, r0, r2
 800dc08:	4287      	cmp	r7, r0
 800dc0a:	4180      	sbcs	r0, r0
 800dc0c:	2207      	movs	r2, #7
 800dc0e:	4441      	add	r1, r8
 800dc10:	4240      	negs	r0, r0
 800dc12:	1809      	adds	r1, r1, r0
 800dc14:	403a      	ands	r2, r7
 800dc16:	020b      	lsls	r3, r1, #8
 800dc18:	d400      	bmi.n	800dc1c <__aeabi_dadd+0x524>
 800dc1a:	e6d5      	b.n	800d9c8 <__aeabi_dadd+0x2d0>
 800dc1c:	4b43      	ldr	r3, [pc, #268]	; (800dd2c <__aeabi_dadd+0x634>)
 800dc1e:	3501      	adds	r5, #1
 800dc20:	4019      	ands	r1, r3
 800dc22:	e5c9      	b.n	800d7b8 <__aeabi_dadd+0xc0>
 800dc24:	0038      	movs	r0, r7
 800dc26:	e669      	b.n	800d8fc <__aeabi_dadd+0x204>
 800dc28:	001e      	movs	r6, r3
 800dc2a:	4647      	mov	r7, r8
 800dc2c:	3e20      	subs	r6, #32
 800dc2e:	40f7      	lsrs	r7, r6
 800dc30:	46bc      	mov	ip, r7
 800dc32:	2b20      	cmp	r3, #32
 800dc34:	d004      	beq.n	800dc40 <__aeabi_dadd+0x548>
 800dc36:	2640      	movs	r6, #64	; 0x40
 800dc38:	1af3      	subs	r3, r6, r3
 800dc3a:	4646      	mov	r6, r8
 800dc3c:	409e      	lsls	r6, r3
 800dc3e:	4332      	orrs	r2, r6
 800dc40:	0017      	movs	r7, r2
 800dc42:	4663      	mov	r3, ip
 800dc44:	1e7a      	subs	r2, r7, #1
 800dc46:	4197      	sbcs	r7, r2
 800dc48:	431f      	orrs	r7, r3
 800dc4a:	e602      	b.n	800d852 <__aeabi_dadd+0x15a>
 800dc4c:	4d36      	ldr	r5, [pc, #216]	; (800dd28 <__aeabi_dadd+0x630>)
 800dc4e:	42ae      	cmp	r6, r5
 800dc50:	d0ca      	beq.n	800dbe8 <__aeabi_dadd+0x4f0>
 800dc52:	2580      	movs	r5, #128	; 0x80
 800dc54:	042d      	lsls	r5, r5, #16
 800dc56:	425b      	negs	r3, r3
 800dc58:	4329      	orrs	r1, r5
 800dc5a:	e7a6      	b.n	800dbaa <__aeabi_dadd+0x4b2>
 800dc5c:	4308      	orrs	r0, r1
 800dc5e:	1e41      	subs	r1, r0, #1
 800dc60:	4188      	sbcs	r0, r1
 800dc62:	e6a6      	b.n	800d9b2 <__aeabi_dadd+0x2ba>
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d100      	bne.n	800dc6a <__aeabi_dadd+0x572>
 800dc68:	e648      	b.n	800d8fc <__aeabi_dadd+0x204>
 800dc6a:	1a87      	subs	r7, r0, r2
 800dc6c:	4643      	mov	r3, r8
 800dc6e:	42b8      	cmp	r0, r7
 800dc70:	41b6      	sbcs	r6, r6
 800dc72:	1acb      	subs	r3, r1, r3
 800dc74:	4276      	negs	r6, r6
 800dc76:	1b9e      	subs	r6, r3, r6
 800dc78:	0233      	lsls	r3, r6, #8
 800dc7a:	d54b      	bpl.n	800dd14 <__aeabi_dadd+0x61c>
 800dc7c:	1a17      	subs	r7, r2, r0
 800dc7e:	4643      	mov	r3, r8
 800dc80:	42ba      	cmp	r2, r7
 800dc82:	4192      	sbcs	r2, r2
 800dc84:	1a59      	subs	r1, r3, r1
 800dc86:	4252      	negs	r2, r2
 800dc88:	1a89      	subs	r1, r1, r2
 800dc8a:	2207      	movs	r2, #7
 800dc8c:	4664      	mov	r4, ip
 800dc8e:	403a      	ands	r2, r7
 800dc90:	e592      	b.n	800d7b8 <__aeabi_dadd+0xc0>
 800dc92:	4301      	orrs	r1, r0
 800dc94:	000f      	movs	r7, r1
 800dc96:	1e79      	subs	r1, r7, #1
 800dc98:	418f      	sbcs	r7, r1
 800dc9a:	e79d      	b.n	800dbd8 <__aeabi_dadd+0x4e0>
 800dc9c:	001c      	movs	r4, r3
 800dc9e:	000f      	movs	r7, r1
 800dca0:	3c20      	subs	r4, #32
 800dca2:	40e7      	lsrs	r7, r4
 800dca4:	2b20      	cmp	r3, #32
 800dca6:	d003      	beq.n	800dcb0 <__aeabi_dadd+0x5b8>
 800dca8:	2440      	movs	r4, #64	; 0x40
 800dcaa:	1ae3      	subs	r3, r4, r3
 800dcac:	4099      	lsls	r1, r3
 800dcae:	4308      	orrs	r0, r1
 800dcb0:	1e41      	subs	r1, r0, #1
 800dcb2:	4188      	sbcs	r0, r1
 800dcb4:	4338      	orrs	r0, r7
 800dcb6:	e67c      	b.n	800d9b2 <__aeabi_dadd+0x2ba>
 800dcb8:	2200      	movs	r2, #0
 800dcba:	2400      	movs	r4, #0
 800dcbc:	e625      	b.n	800d90a <__aeabi_dadd+0x212>
 800dcbe:	1a17      	subs	r7, r2, r0
 800dcc0:	4643      	mov	r3, r8
 800dcc2:	42ba      	cmp	r2, r7
 800dcc4:	4192      	sbcs	r2, r2
 800dcc6:	1a59      	subs	r1, r3, r1
 800dcc8:	4252      	negs	r2, r2
 800dcca:	1a89      	subs	r1, r1, r2
 800dccc:	4664      	mov	r4, ip
 800dcce:	0035      	movs	r5, r6
 800dcd0:	e543      	b.n	800d75a <__aeabi_dadd+0x62>
 800dcd2:	4641      	mov	r1, r8
 800dcd4:	0010      	movs	r0, r2
 800dcd6:	4d14      	ldr	r5, [pc, #80]	; (800dd28 <__aeabi_dadd+0x630>)
 800dcd8:	e610      	b.n	800d8fc <__aeabi_dadd+0x204>
 800dcda:	2280      	movs	r2, #128	; 0x80
 800dcdc:	2400      	movs	r4, #0
 800dcde:	0312      	lsls	r2, r2, #12
 800dce0:	e680      	b.n	800d9e4 <__aeabi_dadd+0x2ec>
 800dce2:	001d      	movs	r5, r3
 800dce4:	000f      	movs	r7, r1
 800dce6:	3d20      	subs	r5, #32
 800dce8:	40ef      	lsrs	r7, r5
 800dcea:	46bc      	mov	ip, r7
 800dcec:	2b20      	cmp	r3, #32
 800dcee:	d003      	beq.n	800dcf8 <__aeabi_dadd+0x600>
 800dcf0:	2540      	movs	r5, #64	; 0x40
 800dcf2:	1aeb      	subs	r3, r5, r3
 800dcf4:	4099      	lsls	r1, r3
 800dcf6:	4308      	orrs	r0, r1
 800dcf8:	0007      	movs	r7, r0
 800dcfa:	4663      	mov	r3, ip
 800dcfc:	1e78      	subs	r0, r7, #1
 800dcfe:	4187      	sbcs	r7, r0
 800dd00:	431f      	orrs	r7, r3
 800dd02:	e769      	b.n	800dbd8 <__aeabi_dadd+0x4e0>
 800dd04:	1887      	adds	r7, r0, r2
 800dd06:	4297      	cmp	r7, r2
 800dd08:	419b      	sbcs	r3, r3
 800dd0a:	4441      	add	r1, r8
 800dd0c:	425b      	negs	r3, r3
 800dd0e:	18c9      	adds	r1, r1, r3
 800dd10:	0035      	movs	r5, r6
 800dd12:	e5a3      	b.n	800d85c <__aeabi_dadd+0x164>
 800dd14:	003b      	movs	r3, r7
 800dd16:	4333      	orrs	r3, r6
 800dd18:	d0ce      	beq.n	800dcb8 <__aeabi_dadd+0x5c0>
 800dd1a:	2207      	movs	r2, #7
 800dd1c:	0031      	movs	r1, r6
 800dd1e:	403a      	ands	r2, r7
 800dd20:	e652      	b.n	800d9c8 <__aeabi_dadd+0x2d0>
 800dd22:	2300      	movs	r3, #0
 800dd24:	001a      	movs	r2, r3
 800dd26:	e5f4      	b.n	800d912 <__aeabi_dadd+0x21a>
 800dd28:	000007ff 	.word	0x000007ff
 800dd2c:	ff7fffff 	.word	0xff7fffff

0800dd30 <__aeabi_ddiv>:
 800dd30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd32:	4657      	mov	r7, sl
 800dd34:	46de      	mov	lr, fp
 800dd36:	464e      	mov	r6, r9
 800dd38:	4645      	mov	r5, r8
 800dd3a:	b5e0      	push	{r5, r6, r7, lr}
 800dd3c:	4683      	mov	fp, r0
 800dd3e:	0007      	movs	r7, r0
 800dd40:	030e      	lsls	r6, r1, #12
 800dd42:	0048      	lsls	r0, r1, #1
 800dd44:	b085      	sub	sp, #20
 800dd46:	4692      	mov	sl, r2
 800dd48:	001c      	movs	r4, r3
 800dd4a:	0b36      	lsrs	r6, r6, #12
 800dd4c:	0d40      	lsrs	r0, r0, #21
 800dd4e:	0fcd      	lsrs	r5, r1, #31
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d100      	bne.n	800dd56 <__aeabi_ddiv+0x26>
 800dd54:	e09d      	b.n	800de92 <__aeabi_ddiv+0x162>
 800dd56:	4b95      	ldr	r3, [pc, #596]	; (800dfac <__aeabi_ddiv+0x27c>)
 800dd58:	4298      	cmp	r0, r3
 800dd5a:	d039      	beq.n	800ddd0 <__aeabi_ddiv+0xa0>
 800dd5c:	2380      	movs	r3, #128	; 0x80
 800dd5e:	00f6      	lsls	r6, r6, #3
 800dd60:	041b      	lsls	r3, r3, #16
 800dd62:	431e      	orrs	r6, r3
 800dd64:	4a92      	ldr	r2, [pc, #584]	; (800dfb0 <__aeabi_ddiv+0x280>)
 800dd66:	0f7b      	lsrs	r3, r7, #29
 800dd68:	4333      	orrs	r3, r6
 800dd6a:	4699      	mov	r9, r3
 800dd6c:	4694      	mov	ip, r2
 800dd6e:	0003      	movs	r3, r0
 800dd70:	4463      	add	r3, ip
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	2300      	movs	r3, #0
 800dd76:	2600      	movs	r6, #0
 800dd78:	00ff      	lsls	r7, r7, #3
 800dd7a:	9302      	str	r3, [sp, #8]
 800dd7c:	0323      	lsls	r3, r4, #12
 800dd7e:	0b1b      	lsrs	r3, r3, #12
 800dd80:	4698      	mov	r8, r3
 800dd82:	0063      	lsls	r3, r4, #1
 800dd84:	0fe4      	lsrs	r4, r4, #31
 800dd86:	4652      	mov	r2, sl
 800dd88:	0d5b      	lsrs	r3, r3, #21
 800dd8a:	9401      	str	r4, [sp, #4]
 800dd8c:	d100      	bne.n	800dd90 <__aeabi_ddiv+0x60>
 800dd8e:	e0b3      	b.n	800def8 <__aeabi_ddiv+0x1c8>
 800dd90:	4986      	ldr	r1, [pc, #536]	; (800dfac <__aeabi_ddiv+0x27c>)
 800dd92:	428b      	cmp	r3, r1
 800dd94:	d100      	bne.n	800dd98 <__aeabi_ddiv+0x68>
 800dd96:	e09e      	b.n	800ded6 <__aeabi_ddiv+0x1a6>
 800dd98:	4642      	mov	r2, r8
 800dd9a:	00d1      	lsls	r1, r2, #3
 800dd9c:	2280      	movs	r2, #128	; 0x80
 800dd9e:	0412      	lsls	r2, r2, #16
 800dda0:	430a      	orrs	r2, r1
 800dda2:	4651      	mov	r1, sl
 800dda4:	0f49      	lsrs	r1, r1, #29
 800dda6:	4311      	orrs	r1, r2
 800dda8:	468b      	mov	fp, r1
 800ddaa:	4981      	ldr	r1, [pc, #516]	; (800dfb0 <__aeabi_ddiv+0x280>)
 800ddac:	4652      	mov	r2, sl
 800ddae:	468c      	mov	ip, r1
 800ddb0:	9900      	ldr	r1, [sp, #0]
 800ddb2:	4463      	add	r3, ip
 800ddb4:	1acb      	subs	r3, r1, r3
 800ddb6:	2100      	movs	r1, #0
 800ddb8:	00d2      	lsls	r2, r2, #3
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	002b      	movs	r3, r5
 800ddbe:	4063      	eors	r3, r4
 800ddc0:	469a      	mov	sl, r3
 800ddc2:	2e0f      	cmp	r6, #15
 800ddc4:	d900      	bls.n	800ddc8 <__aeabi_ddiv+0x98>
 800ddc6:	e105      	b.n	800dfd4 <__aeabi_ddiv+0x2a4>
 800ddc8:	4b7a      	ldr	r3, [pc, #488]	; (800dfb4 <__aeabi_ddiv+0x284>)
 800ddca:	00b6      	lsls	r6, r6, #2
 800ddcc:	599b      	ldr	r3, [r3, r6]
 800ddce:	469f      	mov	pc, r3
 800ddd0:	465b      	mov	r3, fp
 800ddd2:	4333      	orrs	r3, r6
 800ddd4:	4699      	mov	r9, r3
 800ddd6:	d000      	beq.n	800ddda <__aeabi_ddiv+0xaa>
 800ddd8:	e0b8      	b.n	800df4c <__aeabi_ddiv+0x21c>
 800ddda:	2302      	movs	r3, #2
 800dddc:	2608      	movs	r6, #8
 800ddde:	2700      	movs	r7, #0
 800dde0:	9000      	str	r0, [sp, #0]
 800dde2:	9302      	str	r3, [sp, #8]
 800dde4:	e7ca      	b.n	800dd7c <__aeabi_ddiv+0x4c>
 800dde6:	46cb      	mov	fp, r9
 800dde8:	003a      	movs	r2, r7
 800ddea:	9902      	ldr	r1, [sp, #8]
 800ddec:	9501      	str	r5, [sp, #4]
 800ddee:	9b01      	ldr	r3, [sp, #4]
 800ddf0:	469a      	mov	sl, r3
 800ddf2:	2902      	cmp	r1, #2
 800ddf4:	d027      	beq.n	800de46 <__aeabi_ddiv+0x116>
 800ddf6:	2903      	cmp	r1, #3
 800ddf8:	d100      	bne.n	800ddfc <__aeabi_ddiv+0xcc>
 800ddfa:	e280      	b.n	800e2fe <__aeabi_ddiv+0x5ce>
 800ddfc:	2901      	cmp	r1, #1
 800ddfe:	d044      	beq.n	800de8a <__aeabi_ddiv+0x15a>
 800de00:	496d      	ldr	r1, [pc, #436]	; (800dfb8 <__aeabi_ddiv+0x288>)
 800de02:	9b00      	ldr	r3, [sp, #0]
 800de04:	468c      	mov	ip, r1
 800de06:	4463      	add	r3, ip
 800de08:	001c      	movs	r4, r3
 800de0a:	2c00      	cmp	r4, #0
 800de0c:	dd38      	ble.n	800de80 <__aeabi_ddiv+0x150>
 800de0e:	0753      	lsls	r3, r2, #29
 800de10:	d000      	beq.n	800de14 <__aeabi_ddiv+0xe4>
 800de12:	e213      	b.n	800e23c <__aeabi_ddiv+0x50c>
 800de14:	08d2      	lsrs	r2, r2, #3
 800de16:	465b      	mov	r3, fp
 800de18:	01db      	lsls	r3, r3, #7
 800de1a:	d509      	bpl.n	800de30 <__aeabi_ddiv+0x100>
 800de1c:	4659      	mov	r1, fp
 800de1e:	4b67      	ldr	r3, [pc, #412]	; (800dfbc <__aeabi_ddiv+0x28c>)
 800de20:	4019      	ands	r1, r3
 800de22:	468b      	mov	fp, r1
 800de24:	2180      	movs	r1, #128	; 0x80
 800de26:	00c9      	lsls	r1, r1, #3
 800de28:	468c      	mov	ip, r1
 800de2a:	9b00      	ldr	r3, [sp, #0]
 800de2c:	4463      	add	r3, ip
 800de2e:	001c      	movs	r4, r3
 800de30:	4b63      	ldr	r3, [pc, #396]	; (800dfc0 <__aeabi_ddiv+0x290>)
 800de32:	429c      	cmp	r4, r3
 800de34:	dc07      	bgt.n	800de46 <__aeabi_ddiv+0x116>
 800de36:	465b      	mov	r3, fp
 800de38:	0564      	lsls	r4, r4, #21
 800de3a:	075f      	lsls	r7, r3, #29
 800de3c:	025b      	lsls	r3, r3, #9
 800de3e:	4317      	orrs	r7, r2
 800de40:	0b1b      	lsrs	r3, r3, #12
 800de42:	0d62      	lsrs	r2, r4, #21
 800de44:	e002      	b.n	800de4c <__aeabi_ddiv+0x11c>
 800de46:	2300      	movs	r3, #0
 800de48:	2700      	movs	r7, #0
 800de4a:	4a58      	ldr	r2, [pc, #352]	; (800dfac <__aeabi_ddiv+0x27c>)
 800de4c:	2100      	movs	r1, #0
 800de4e:	031b      	lsls	r3, r3, #12
 800de50:	0b1c      	lsrs	r4, r3, #12
 800de52:	0d0b      	lsrs	r3, r1, #20
 800de54:	051b      	lsls	r3, r3, #20
 800de56:	4323      	orrs	r3, r4
 800de58:	0514      	lsls	r4, r2, #20
 800de5a:	4a5a      	ldr	r2, [pc, #360]	; (800dfc4 <__aeabi_ddiv+0x294>)
 800de5c:	0038      	movs	r0, r7
 800de5e:	4013      	ands	r3, r2
 800de60:	431c      	orrs	r4, r3
 800de62:	4653      	mov	r3, sl
 800de64:	0064      	lsls	r4, r4, #1
 800de66:	07db      	lsls	r3, r3, #31
 800de68:	0864      	lsrs	r4, r4, #1
 800de6a:	431c      	orrs	r4, r3
 800de6c:	0021      	movs	r1, r4
 800de6e:	b005      	add	sp, #20
 800de70:	bc3c      	pop	{r2, r3, r4, r5}
 800de72:	4690      	mov	r8, r2
 800de74:	4699      	mov	r9, r3
 800de76:	46a2      	mov	sl, r4
 800de78:	46ab      	mov	fp, r5
 800de7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de7c:	2201      	movs	r2, #1
 800de7e:	4252      	negs	r2, r2
 800de80:	2301      	movs	r3, #1
 800de82:	1b1b      	subs	r3, r3, r4
 800de84:	2b38      	cmp	r3, #56	; 0x38
 800de86:	dc00      	bgt.n	800de8a <__aeabi_ddiv+0x15a>
 800de88:	e1ad      	b.n	800e1e6 <__aeabi_ddiv+0x4b6>
 800de8a:	2200      	movs	r2, #0
 800de8c:	2300      	movs	r3, #0
 800de8e:	2700      	movs	r7, #0
 800de90:	e7dc      	b.n	800de4c <__aeabi_ddiv+0x11c>
 800de92:	465b      	mov	r3, fp
 800de94:	4333      	orrs	r3, r6
 800de96:	4699      	mov	r9, r3
 800de98:	d05e      	beq.n	800df58 <__aeabi_ddiv+0x228>
 800de9a:	2e00      	cmp	r6, #0
 800de9c:	d100      	bne.n	800dea0 <__aeabi_ddiv+0x170>
 800de9e:	e18a      	b.n	800e1b6 <__aeabi_ddiv+0x486>
 800dea0:	0030      	movs	r0, r6
 800dea2:	f7fe ff7f 	bl	800cda4 <__clzsi2>
 800dea6:	0003      	movs	r3, r0
 800dea8:	3b0b      	subs	r3, #11
 800deaa:	2b1c      	cmp	r3, #28
 800deac:	dd00      	ble.n	800deb0 <__aeabi_ddiv+0x180>
 800deae:	e17b      	b.n	800e1a8 <__aeabi_ddiv+0x478>
 800deb0:	221d      	movs	r2, #29
 800deb2:	1ad3      	subs	r3, r2, r3
 800deb4:	465a      	mov	r2, fp
 800deb6:	0001      	movs	r1, r0
 800deb8:	40da      	lsrs	r2, r3
 800deba:	3908      	subs	r1, #8
 800debc:	408e      	lsls	r6, r1
 800debe:	0013      	movs	r3, r2
 800dec0:	465f      	mov	r7, fp
 800dec2:	4333      	orrs	r3, r6
 800dec4:	4699      	mov	r9, r3
 800dec6:	408f      	lsls	r7, r1
 800dec8:	4b3f      	ldr	r3, [pc, #252]	; (800dfc8 <__aeabi_ddiv+0x298>)
 800deca:	2600      	movs	r6, #0
 800decc:	1a1b      	subs	r3, r3, r0
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	2300      	movs	r3, #0
 800ded2:	9302      	str	r3, [sp, #8]
 800ded4:	e752      	b.n	800dd7c <__aeabi_ddiv+0x4c>
 800ded6:	4641      	mov	r1, r8
 800ded8:	4653      	mov	r3, sl
 800deda:	430b      	orrs	r3, r1
 800dedc:	493b      	ldr	r1, [pc, #236]	; (800dfcc <__aeabi_ddiv+0x29c>)
 800dede:	469b      	mov	fp, r3
 800dee0:	468c      	mov	ip, r1
 800dee2:	9b00      	ldr	r3, [sp, #0]
 800dee4:	4463      	add	r3, ip
 800dee6:	9300      	str	r3, [sp, #0]
 800dee8:	465b      	mov	r3, fp
 800deea:	2b00      	cmp	r3, #0
 800deec:	d13b      	bne.n	800df66 <__aeabi_ddiv+0x236>
 800deee:	2302      	movs	r3, #2
 800def0:	2200      	movs	r2, #0
 800def2:	431e      	orrs	r6, r3
 800def4:	2102      	movs	r1, #2
 800def6:	e761      	b.n	800ddbc <__aeabi_ddiv+0x8c>
 800def8:	4643      	mov	r3, r8
 800defa:	4313      	orrs	r3, r2
 800defc:	469b      	mov	fp, r3
 800defe:	d037      	beq.n	800df70 <__aeabi_ddiv+0x240>
 800df00:	4643      	mov	r3, r8
 800df02:	2b00      	cmp	r3, #0
 800df04:	d100      	bne.n	800df08 <__aeabi_ddiv+0x1d8>
 800df06:	e162      	b.n	800e1ce <__aeabi_ddiv+0x49e>
 800df08:	4640      	mov	r0, r8
 800df0a:	f7fe ff4b 	bl	800cda4 <__clzsi2>
 800df0e:	0003      	movs	r3, r0
 800df10:	3b0b      	subs	r3, #11
 800df12:	2b1c      	cmp	r3, #28
 800df14:	dd00      	ble.n	800df18 <__aeabi_ddiv+0x1e8>
 800df16:	e153      	b.n	800e1c0 <__aeabi_ddiv+0x490>
 800df18:	0002      	movs	r2, r0
 800df1a:	4641      	mov	r1, r8
 800df1c:	3a08      	subs	r2, #8
 800df1e:	4091      	lsls	r1, r2
 800df20:	4688      	mov	r8, r1
 800df22:	211d      	movs	r1, #29
 800df24:	1acb      	subs	r3, r1, r3
 800df26:	4651      	mov	r1, sl
 800df28:	40d9      	lsrs	r1, r3
 800df2a:	000b      	movs	r3, r1
 800df2c:	4641      	mov	r1, r8
 800df2e:	430b      	orrs	r3, r1
 800df30:	469b      	mov	fp, r3
 800df32:	4653      	mov	r3, sl
 800df34:	4093      	lsls	r3, r2
 800df36:	001a      	movs	r2, r3
 800df38:	9b00      	ldr	r3, [sp, #0]
 800df3a:	4925      	ldr	r1, [pc, #148]	; (800dfd0 <__aeabi_ddiv+0x2a0>)
 800df3c:	469c      	mov	ip, r3
 800df3e:	4460      	add	r0, ip
 800df40:	0003      	movs	r3, r0
 800df42:	468c      	mov	ip, r1
 800df44:	4463      	add	r3, ip
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	2100      	movs	r1, #0
 800df4a:	e737      	b.n	800ddbc <__aeabi_ddiv+0x8c>
 800df4c:	2303      	movs	r3, #3
 800df4e:	46b1      	mov	r9, r6
 800df50:	9000      	str	r0, [sp, #0]
 800df52:	260c      	movs	r6, #12
 800df54:	9302      	str	r3, [sp, #8]
 800df56:	e711      	b.n	800dd7c <__aeabi_ddiv+0x4c>
 800df58:	2300      	movs	r3, #0
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	3301      	adds	r3, #1
 800df5e:	2604      	movs	r6, #4
 800df60:	2700      	movs	r7, #0
 800df62:	9302      	str	r3, [sp, #8]
 800df64:	e70a      	b.n	800dd7c <__aeabi_ddiv+0x4c>
 800df66:	2303      	movs	r3, #3
 800df68:	46c3      	mov	fp, r8
 800df6a:	431e      	orrs	r6, r3
 800df6c:	2103      	movs	r1, #3
 800df6e:	e725      	b.n	800ddbc <__aeabi_ddiv+0x8c>
 800df70:	3301      	adds	r3, #1
 800df72:	431e      	orrs	r6, r3
 800df74:	2200      	movs	r2, #0
 800df76:	2101      	movs	r1, #1
 800df78:	e720      	b.n	800ddbc <__aeabi_ddiv+0x8c>
 800df7a:	2300      	movs	r3, #0
 800df7c:	469a      	mov	sl, r3
 800df7e:	2380      	movs	r3, #128	; 0x80
 800df80:	2700      	movs	r7, #0
 800df82:	031b      	lsls	r3, r3, #12
 800df84:	4a09      	ldr	r2, [pc, #36]	; (800dfac <__aeabi_ddiv+0x27c>)
 800df86:	e761      	b.n	800de4c <__aeabi_ddiv+0x11c>
 800df88:	2380      	movs	r3, #128	; 0x80
 800df8a:	4649      	mov	r1, r9
 800df8c:	031b      	lsls	r3, r3, #12
 800df8e:	4219      	tst	r1, r3
 800df90:	d100      	bne.n	800df94 <__aeabi_ddiv+0x264>
 800df92:	e0e2      	b.n	800e15a <__aeabi_ddiv+0x42a>
 800df94:	4659      	mov	r1, fp
 800df96:	4219      	tst	r1, r3
 800df98:	d000      	beq.n	800df9c <__aeabi_ddiv+0x26c>
 800df9a:	e0de      	b.n	800e15a <__aeabi_ddiv+0x42a>
 800df9c:	430b      	orrs	r3, r1
 800df9e:	031b      	lsls	r3, r3, #12
 800dfa0:	0017      	movs	r7, r2
 800dfa2:	0b1b      	lsrs	r3, r3, #12
 800dfa4:	46a2      	mov	sl, r4
 800dfa6:	4a01      	ldr	r2, [pc, #4]	; (800dfac <__aeabi_ddiv+0x27c>)
 800dfa8:	e750      	b.n	800de4c <__aeabi_ddiv+0x11c>
 800dfaa:	46c0      	nop			; (mov r8, r8)
 800dfac:	000007ff 	.word	0x000007ff
 800dfb0:	fffffc01 	.word	0xfffffc01
 800dfb4:	0801aac0 	.word	0x0801aac0
 800dfb8:	000003ff 	.word	0x000003ff
 800dfbc:	feffffff 	.word	0xfeffffff
 800dfc0:	000007fe 	.word	0x000007fe
 800dfc4:	800fffff 	.word	0x800fffff
 800dfc8:	fffffc0d 	.word	0xfffffc0d
 800dfcc:	fffff801 	.word	0xfffff801
 800dfd0:	000003f3 	.word	0x000003f3
 800dfd4:	45d9      	cmp	r9, fp
 800dfd6:	d900      	bls.n	800dfda <__aeabi_ddiv+0x2aa>
 800dfd8:	e0cb      	b.n	800e172 <__aeabi_ddiv+0x442>
 800dfda:	d100      	bne.n	800dfde <__aeabi_ddiv+0x2ae>
 800dfdc:	e0c6      	b.n	800e16c <__aeabi_ddiv+0x43c>
 800dfde:	003c      	movs	r4, r7
 800dfe0:	4648      	mov	r0, r9
 800dfe2:	2700      	movs	r7, #0
 800dfe4:	9b00      	ldr	r3, [sp, #0]
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	465b      	mov	r3, fp
 800dfec:	0e16      	lsrs	r6, r2, #24
 800dfee:	021b      	lsls	r3, r3, #8
 800dff0:	431e      	orrs	r6, r3
 800dff2:	0213      	lsls	r3, r2, #8
 800dff4:	4698      	mov	r8, r3
 800dff6:	0433      	lsls	r3, r6, #16
 800dff8:	0c1b      	lsrs	r3, r3, #16
 800dffa:	4699      	mov	r9, r3
 800dffc:	0c31      	lsrs	r1, r6, #16
 800dffe:	9101      	str	r1, [sp, #4]
 800e000:	f7fe ff92 	bl	800cf28 <__aeabi_uidivmod>
 800e004:	464a      	mov	r2, r9
 800e006:	4342      	muls	r2, r0
 800e008:	040b      	lsls	r3, r1, #16
 800e00a:	0c21      	lsrs	r1, r4, #16
 800e00c:	0005      	movs	r5, r0
 800e00e:	4319      	orrs	r1, r3
 800e010:	428a      	cmp	r2, r1
 800e012:	d907      	bls.n	800e024 <__aeabi_ddiv+0x2f4>
 800e014:	1989      	adds	r1, r1, r6
 800e016:	3d01      	subs	r5, #1
 800e018:	428e      	cmp	r6, r1
 800e01a:	d803      	bhi.n	800e024 <__aeabi_ddiv+0x2f4>
 800e01c:	428a      	cmp	r2, r1
 800e01e:	d901      	bls.n	800e024 <__aeabi_ddiv+0x2f4>
 800e020:	1e85      	subs	r5, r0, #2
 800e022:	1989      	adds	r1, r1, r6
 800e024:	1a88      	subs	r0, r1, r2
 800e026:	9901      	ldr	r1, [sp, #4]
 800e028:	f7fe ff7e 	bl	800cf28 <__aeabi_uidivmod>
 800e02c:	0409      	lsls	r1, r1, #16
 800e02e:	468c      	mov	ip, r1
 800e030:	464a      	mov	r2, r9
 800e032:	0421      	lsls	r1, r4, #16
 800e034:	4664      	mov	r4, ip
 800e036:	4342      	muls	r2, r0
 800e038:	0c09      	lsrs	r1, r1, #16
 800e03a:	0003      	movs	r3, r0
 800e03c:	4321      	orrs	r1, r4
 800e03e:	428a      	cmp	r2, r1
 800e040:	d904      	bls.n	800e04c <__aeabi_ddiv+0x31c>
 800e042:	1989      	adds	r1, r1, r6
 800e044:	3b01      	subs	r3, #1
 800e046:	428e      	cmp	r6, r1
 800e048:	d800      	bhi.n	800e04c <__aeabi_ddiv+0x31c>
 800e04a:	e0f1      	b.n	800e230 <__aeabi_ddiv+0x500>
 800e04c:	042d      	lsls	r5, r5, #16
 800e04e:	431d      	orrs	r5, r3
 800e050:	46ab      	mov	fp, r5
 800e052:	4643      	mov	r3, r8
 800e054:	1a89      	subs	r1, r1, r2
 800e056:	4642      	mov	r2, r8
 800e058:	0c28      	lsrs	r0, r5, #16
 800e05a:	0412      	lsls	r2, r2, #16
 800e05c:	0c1d      	lsrs	r5, r3, #16
 800e05e:	465b      	mov	r3, fp
 800e060:	0c14      	lsrs	r4, r2, #16
 800e062:	0022      	movs	r2, r4
 800e064:	041b      	lsls	r3, r3, #16
 800e066:	0c1b      	lsrs	r3, r3, #16
 800e068:	435a      	muls	r2, r3
 800e06a:	9403      	str	r4, [sp, #12]
 800e06c:	436b      	muls	r3, r5
 800e06e:	4344      	muls	r4, r0
 800e070:	9502      	str	r5, [sp, #8]
 800e072:	4368      	muls	r0, r5
 800e074:	191b      	adds	r3, r3, r4
 800e076:	0c15      	lsrs	r5, r2, #16
 800e078:	18eb      	adds	r3, r5, r3
 800e07a:	429c      	cmp	r4, r3
 800e07c:	d903      	bls.n	800e086 <__aeabi_ddiv+0x356>
 800e07e:	2480      	movs	r4, #128	; 0x80
 800e080:	0264      	lsls	r4, r4, #9
 800e082:	46a4      	mov	ip, r4
 800e084:	4460      	add	r0, ip
 800e086:	0c1c      	lsrs	r4, r3, #16
 800e088:	0415      	lsls	r5, r2, #16
 800e08a:	041b      	lsls	r3, r3, #16
 800e08c:	0c2d      	lsrs	r5, r5, #16
 800e08e:	1820      	adds	r0, r4, r0
 800e090:	195d      	adds	r5, r3, r5
 800e092:	4281      	cmp	r1, r0
 800e094:	d377      	bcc.n	800e186 <__aeabi_ddiv+0x456>
 800e096:	d073      	beq.n	800e180 <__aeabi_ddiv+0x450>
 800e098:	1a0c      	subs	r4, r1, r0
 800e09a:	4aa2      	ldr	r2, [pc, #648]	; (800e324 <__aeabi_ddiv+0x5f4>)
 800e09c:	1b7d      	subs	r5, r7, r5
 800e09e:	42af      	cmp	r7, r5
 800e0a0:	41bf      	sbcs	r7, r7
 800e0a2:	4694      	mov	ip, r2
 800e0a4:	9b00      	ldr	r3, [sp, #0]
 800e0a6:	427f      	negs	r7, r7
 800e0a8:	4463      	add	r3, ip
 800e0aa:	1be0      	subs	r0, r4, r7
 800e0ac:	001c      	movs	r4, r3
 800e0ae:	4286      	cmp	r6, r0
 800e0b0:	d100      	bne.n	800e0b4 <__aeabi_ddiv+0x384>
 800e0b2:	e0db      	b.n	800e26c <__aeabi_ddiv+0x53c>
 800e0b4:	9901      	ldr	r1, [sp, #4]
 800e0b6:	f7fe ff37 	bl	800cf28 <__aeabi_uidivmod>
 800e0ba:	464a      	mov	r2, r9
 800e0bc:	4342      	muls	r2, r0
 800e0be:	040b      	lsls	r3, r1, #16
 800e0c0:	0c29      	lsrs	r1, r5, #16
 800e0c2:	0007      	movs	r7, r0
 800e0c4:	4319      	orrs	r1, r3
 800e0c6:	428a      	cmp	r2, r1
 800e0c8:	d907      	bls.n	800e0da <__aeabi_ddiv+0x3aa>
 800e0ca:	1989      	adds	r1, r1, r6
 800e0cc:	3f01      	subs	r7, #1
 800e0ce:	428e      	cmp	r6, r1
 800e0d0:	d803      	bhi.n	800e0da <__aeabi_ddiv+0x3aa>
 800e0d2:	428a      	cmp	r2, r1
 800e0d4:	d901      	bls.n	800e0da <__aeabi_ddiv+0x3aa>
 800e0d6:	1e87      	subs	r7, r0, #2
 800e0d8:	1989      	adds	r1, r1, r6
 800e0da:	1a88      	subs	r0, r1, r2
 800e0dc:	9901      	ldr	r1, [sp, #4]
 800e0de:	f7fe ff23 	bl	800cf28 <__aeabi_uidivmod>
 800e0e2:	0409      	lsls	r1, r1, #16
 800e0e4:	464a      	mov	r2, r9
 800e0e6:	4689      	mov	r9, r1
 800e0e8:	0429      	lsls	r1, r5, #16
 800e0ea:	464d      	mov	r5, r9
 800e0ec:	4342      	muls	r2, r0
 800e0ee:	0c09      	lsrs	r1, r1, #16
 800e0f0:	0003      	movs	r3, r0
 800e0f2:	4329      	orrs	r1, r5
 800e0f4:	428a      	cmp	r2, r1
 800e0f6:	d907      	bls.n	800e108 <__aeabi_ddiv+0x3d8>
 800e0f8:	1989      	adds	r1, r1, r6
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	428e      	cmp	r6, r1
 800e0fe:	d803      	bhi.n	800e108 <__aeabi_ddiv+0x3d8>
 800e100:	428a      	cmp	r2, r1
 800e102:	d901      	bls.n	800e108 <__aeabi_ddiv+0x3d8>
 800e104:	1e83      	subs	r3, r0, #2
 800e106:	1989      	adds	r1, r1, r6
 800e108:	043f      	lsls	r7, r7, #16
 800e10a:	1a89      	subs	r1, r1, r2
 800e10c:	003a      	movs	r2, r7
 800e10e:	9f03      	ldr	r7, [sp, #12]
 800e110:	431a      	orrs	r2, r3
 800e112:	0038      	movs	r0, r7
 800e114:	0413      	lsls	r3, r2, #16
 800e116:	0c1b      	lsrs	r3, r3, #16
 800e118:	4358      	muls	r0, r3
 800e11a:	4681      	mov	r9, r0
 800e11c:	9802      	ldr	r0, [sp, #8]
 800e11e:	0c15      	lsrs	r5, r2, #16
 800e120:	436f      	muls	r7, r5
 800e122:	4343      	muls	r3, r0
 800e124:	4345      	muls	r5, r0
 800e126:	4648      	mov	r0, r9
 800e128:	0c00      	lsrs	r0, r0, #16
 800e12a:	4684      	mov	ip, r0
 800e12c:	19db      	adds	r3, r3, r7
 800e12e:	4463      	add	r3, ip
 800e130:	429f      	cmp	r7, r3
 800e132:	d903      	bls.n	800e13c <__aeabi_ddiv+0x40c>
 800e134:	2080      	movs	r0, #128	; 0x80
 800e136:	0240      	lsls	r0, r0, #9
 800e138:	4684      	mov	ip, r0
 800e13a:	4465      	add	r5, ip
 800e13c:	4648      	mov	r0, r9
 800e13e:	0c1f      	lsrs	r7, r3, #16
 800e140:	0400      	lsls	r0, r0, #16
 800e142:	041b      	lsls	r3, r3, #16
 800e144:	0c00      	lsrs	r0, r0, #16
 800e146:	197d      	adds	r5, r7, r5
 800e148:	1818      	adds	r0, r3, r0
 800e14a:	42a9      	cmp	r1, r5
 800e14c:	d200      	bcs.n	800e150 <__aeabi_ddiv+0x420>
 800e14e:	e084      	b.n	800e25a <__aeabi_ddiv+0x52a>
 800e150:	d100      	bne.n	800e154 <__aeabi_ddiv+0x424>
 800e152:	e07f      	b.n	800e254 <__aeabi_ddiv+0x524>
 800e154:	2301      	movs	r3, #1
 800e156:	431a      	orrs	r2, r3
 800e158:	e657      	b.n	800de0a <__aeabi_ddiv+0xda>
 800e15a:	2380      	movs	r3, #128	; 0x80
 800e15c:	464a      	mov	r2, r9
 800e15e:	031b      	lsls	r3, r3, #12
 800e160:	4313      	orrs	r3, r2
 800e162:	031b      	lsls	r3, r3, #12
 800e164:	0b1b      	lsrs	r3, r3, #12
 800e166:	46aa      	mov	sl, r5
 800e168:	4a6f      	ldr	r2, [pc, #444]	; (800e328 <__aeabi_ddiv+0x5f8>)
 800e16a:	e66f      	b.n	800de4c <__aeabi_ddiv+0x11c>
 800e16c:	42ba      	cmp	r2, r7
 800e16e:	d900      	bls.n	800e172 <__aeabi_ddiv+0x442>
 800e170:	e735      	b.n	800dfde <__aeabi_ddiv+0x2ae>
 800e172:	464b      	mov	r3, r9
 800e174:	07dc      	lsls	r4, r3, #31
 800e176:	0858      	lsrs	r0, r3, #1
 800e178:	087b      	lsrs	r3, r7, #1
 800e17a:	431c      	orrs	r4, r3
 800e17c:	07ff      	lsls	r7, r7, #31
 800e17e:	e734      	b.n	800dfea <__aeabi_ddiv+0x2ba>
 800e180:	2400      	movs	r4, #0
 800e182:	42af      	cmp	r7, r5
 800e184:	d289      	bcs.n	800e09a <__aeabi_ddiv+0x36a>
 800e186:	4447      	add	r7, r8
 800e188:	4547      	cmp	r7, r8
 800e18a:	41a4      	sbcs	r4, r4
 800e18c:	465b      	mov	r3, fp
 800e18e:	4264      	negs	r4, r4
 800e190:	19a4      	adds	r4, r4, r6
 800e192:	1864      	adds	r4, r4, r1
 800e194:	3b01      	subs	r3, #1
 800e196:	42a6      	cmp	r6, r4
 800e198:	d21e      	bcs.n	800e1d8 <__aeabi_ddiv+0x4a8>
 800e19a:	42a0      	cmp	r0, r4
 800e19c:	d86d      	bhi.n	800e27a <__aeabi_ddiv+0x54a>
 800e19e:	d100      	bne.n	800e1a2 <__aeabi_ddiv+0x472>
 800e1a0:	e0b6      	b.n	800e310 <__aeabi_ddiv+0x5e0>
 800e1a2:	1a24      	subs	r4, r4, r0
 800e1a4:	469b      	mov	fp, r3
 800e1a6:	e778      	b.n	800e09a <__aeabi_ddiv+0x36a>
 800e1a8:	0003      	movs	r3, r0
 800e1aa:	465a      	mov	r2, fp
 800e1ac:	3b28      	subs	r3, #40	; 0x28
 800e1ae:	409a      	lsls	r2, r3
 800e1b0:	2700      	movs	r7, #0
 800e1b2:	4691      	mov	r9, r2
 800e1b4:	e688      	b.n	800dec8 <__aeabi_ddiv+0x198>
 800e1b6:	4658      	mov	r0, fp
 800e1b8:	f7fe fdf4 	bl	800cda4 <__clzsi2>
 800e1bc:	3020      	adds	r0, #32
 800e1be:	e672      	b.n	800dea6 <__aeabi_ddiv+0x176>
 800e1c0:	0003      	movs	r3, r0
 800e1c2:	4652      	mov	r2, sl
 800e1c4:	3b28      	subs	r3, #40	; 0x28
 800e1c6:	409a      	lsls	r2, r3
 800e1c8:	4693      	mov	fp, r2
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	e6b4      	b.n	800df38 <__aeabi_ddiv+0x208>
 800e1ce:	4650      	mov	r0, sl
 800e1d0:	f7fe fde8 	bl	800cda4 <__clzsi2>
 800e1d4:	3020      	adds	r0, #32
 800e1d6:	e69a      	b.n	800df0e <__aeabi_ddiv+0x1de>
 800e1d8:	42a6      	cmp	r6, r4
 800e1da:	d1e2      	bne.n	800e1a2 <__aeabi_ddiv+0x472>
 800e1dc:	45b8      	cmp	r8, r7
 800e1de:	d9dc      	bls.n	800e19a <__aeabi_ddiv+0x46a>
 800e1e0:	1a34      	subs	r4, r6, r0
 800e1e2:	469b      	mov	fp, r3
 800e1e4:	e759      	b.n	800e09a <__aeabi_ddiv+0x36a>
 800e1e6:	2b1f      	cmp	r3, #31
 800e1e8:	dc65      	bgt.n	800e2b6 <__aeabi_ddiv+0x586>
 800e1ea:	4c50      	ldr	r4, [pc, #320]	; (800e32c <__aeabi_ddiv+0x5fc>)
 800e1ec:	9900      	ldr	r1, [sp, #0]
 800e1ee:	46a4      	mov	ip, r4
 800e1f0:	465c      	mov	r4, fp
 800e1f2:	4461      	add	r1, ip
 800e1f4:	0008      	movs	r0, r1
 800e1f6:	408c      	lsls	r4, r1
 800e1f8:	0011      	movs	r1, r2
 800e1fa:	4082      	lsls	r2, r0
 800e1fc:	40d9      	lsrs	r1, r3
 800e1fe:	1e50      	subs	r0, r2, #1
 800e200:	4182      	sbcs	r2, r0
 800e202:	430c      	orrs	r4, r1
 800e204:	4314      	orrs	r4, r2
 800e206:	465a      	mov	r2, fp
 800e208:	40da      	lsrs	r2, r3
 800e20a:	0013      	movs	r3, r2
 800e20c:	0762      	lsls	r2, r4, #29
 800e20e:	d009      	beq.n	800e224 <__aeabi_ddiv+0x4f4>
 800e210:	220f      	movs	r2, #15
 800e212:	4022      	ands	r2, r4
 800e214:	2a04      	cmp	r2, #4
 800e216:	d005      	beq.n	800e224 <__aeabi_ddiv+0x4f4>
 800e218:	0022      	movs	r2, r4
 800e21a:	1d14      	adds	r4, r2, #4
 800e21c:	4294      	cmp	r4, r2
 800e21e:	4189      	sbcs	r1, r1
 800e220:	4249      	negs	r1, r1
 800e222:	185b      	adds	r3, r3, r1
 800e224:	021a      	lsls	r2, r3, #8
 800e226:	d562      	bpl.n	800e2ee <__aeabi_ddiv+0x5be>
 800e228:	2201      	movs	r2, #1
 800e22a:	2300      	movs	r3, #0
 800e22c:	2700      	movs	r7, #0
 800e22e:	e60d      	b.n	800de4c <__aeabi_ddiv+0x11c>
 800e230:	428a      	cmp	r2, r1
 800e232:	d800      	bhi.n	800e236 <__aeabi_ddiv+0x506>
 800e234:	e70a      	b.n	800e04c <__aeabi_ddiv+0x31c>
 800e236:	1e83      	subs	r3, r0, #2
 800e238:	1989      	adds	r1, r1, r6
 800e23a:	e707      	b.n	800e04c <__aeabi_ddiv+0x31c>
 800e23c:	230f      	movs	r3, #15
 800e23e:	4013      	ands	r3, r2
 800e240:	2b04      	cmp	r3, #4
 800e242:	d100      	bne.n	800e246 <__aeabi_ddiv+0x516>
 800e244:	e5e6      	b.n	800de14 <__aeabi_ddiv+0xe4>
 800e246:	1d17      	adds	r7, r2, #4
 800e248:	4297      	cmp	r7, r2
 800e24a:	4192      	sbcs	r2, r2
 800e24c:	4253      	negs	r3, r2
 800e24e:	449b      	add	fp, r3
 800e250:	08fa      	lsrs	r2, r7, #3
 800e252:	e5e0      	b.n	800de16 <__aeabi_ddiv+0xe6>
 800e254:	2800      	cmp	r0, #0
 800e256:	d100      	bne.n	800e25a <__aeabi_ddiv+0x52a>
 800e258:	e5d7      	b.n	800de0a <__aeabi_ddiv+0xda>
 800e25a:	1871      	adds	r1, r6, r1
 800e25c:	1e53      	subs	r3, r2, #1
 800e25e:	42b1      	cmp	r1, r6
 800e260:	d327      	bcc.n	800e2b2 <__aeabi_ddiv+0x582>
 800e262:	42a9      	cmp	r1, r5
 800e264:	d315      	bcc.n	800e292 <__aeabi_ddiv+0x562>
 800e266:	d058      	beq.n	800e31a <__aeabi_ddiv+0x5ea>
 800e268:	001a      	movs	r2, r3
 800e26a:	e773      	b.n	800e154 <__aeabi_ddiv+0x424>
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	dc00      	bgt.n	800e272 <__aeabi_ddiv+0x542>
 800e270:	e604      	b.n	800de7c <__aeabi_ddiv+0x14c>
 800e272:	2301      	movs	r3, #1
 800e274:	2200      	movs	r2, #0
 800e276:	449b      	add	fp, r3
 800e278:	e5cd      	b.n	800de16 <__aeabi_ddiv+0xe6>
 800e27a:	2302      	movs	r3, #2
 800e27c:	4447      	add	r7, r8
 800e27e:	4547      	cmp	r7, r8
 800e280:	4189      	sbcs	r1, r1
 800e282:	425b      	negs	r3, r3
 800e284:	469c      	mov	ip, r3
 800e286:	4249      	negs	r1, r1
 800e288:	1989      	adds	r1, r1, r6
 800e28a:	190c      	adds	r4, r1, r4
 800e28c:	44e3      	add	fp, ip
 800e28e:	1a24      	subs	r4, r4, r0
 800e290:	e703      	b.n	800e09a <__aeabi_ddiv+0x36a>
 800e292:	4643      	mov	r3, r8
 800e294:	005f      	lsls	r7, r3, #1
 800e296:	4547      	cmp	r7, r8
 800e298:	419b      	sbcs	r3, r3
 800e29a:	46b8      	mov	r8, r7
 800e29c:	425b      	negs	r3, r3
 800e29e:	199e      	adds	r6, r3, r6
 800e2a0:	3a02      	subs	r2, #2
 800e2a2:	1989      	adds	r1, r1, r6
 800e2a4:	42a9      	cmp	r1, r5
 800e2a6:	d000      	beq.n	800e2aa <__aeabi_ddiv+0x57a>
 800e2a8:	e754      	b.n	800e154 <__aeabi_ddiv+0x424>
 800e2aa:	4540      	cmp	r0, r8
 800e2ac:	d000      	beq.n	800e2b0 <__aeabi_ddiv+0x580>
 800e2ae:	e751      	b.n	800e154 <__aeabi_ddiv+0x424>
 800e2b0:	e5ab      	b.n	800de0a <__aeabi_ddiv+0xda>
 800e2b2:	001a      	movs	r2, r3
 800e2b4:	e7f6      	b.n	800e2a4 <__aeabi_ddiv+0x574>
 800e2b6:	211f      	movs	r1, #31
 800e2b8:	465f      	mov	r7, fp
 800e2ba:	4249      	negs	r1, r1
 800e2bc:	1b0c      	subs	r4, r1, r4
 800e2be:	40e7      	lsrs	r7, r4
 800e2c0:	2b20      	cmp	r3, #32
 800e2c2:	d007      	beq.n	800e2d4 <__aeabi_ddiv+0x5a4>
 800e2c4:	491a      	ldr	r1, [pc, #104]	; (800e330 <__aeabi_ddiv+0x600>)
 800e2c6:	9b00      	ldr	r3, [sp, #0]
 800e2c8:	468c      	mov	ip, r1
 800e2ca:	4463      	add	r3, ip
 800e2cc:	0018      	movs	r0, r3
 800e2ce:	465b      	mov	r3, fp
 800e2d0:	4083      	lsls	r3, r0
 800e2d2:	431a      	orrs	r2, r3
 800e2d4:	1e50      	subs	r0, r2, #1
 800e2d6:	4182      	sbcs	r2, r0
 800e2d8:	433a      	orrs	r2, r7
 800e2da:	2707      	movs	r7, #7
 800e2dc:	2300      	movs	r3, #0
 800e2de:	4017      	ands	r7, r2
 800e2e0:	d009      	beq.n	800e2f6 <__aeabi_ddiv+0x5c6>
 800e2e2:	210f      	movs	r1, #15
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	4011      	ands	r1, r2
 800e2e8:	0014      	movs	r4, r2
 800e2ea:	2904      	cmp	r1, #4
 800e2ec:	d195      	bne.n	800e21a <__aeabi_ddiv+0x4ea>
 800e2ee:	0022      	movs	r2, r4
 800e2f0:	075f      	lsls	r7, r3, #29
 800e2f2:	025b      	lsls	r3, r3, #9
 800e2f4:	0b1b      	lsrs	r3, r3, #12
 800e2f6:	08d2      	lsrs	r2, r2, #3
 800e2f8:	4317      	orrs	r7, r2
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	e5a6      	b.n	800de4c <__aeabi_ddiv+0x11c>
 800e2fe:	2380      	movs	r3, #128	; 0x80
 800e300:	4659      	mov	r1, fp
 800e302:	031b      	lsls	r3, r3, #12
 800e304:	430b      	orrs	r3, r1
 800e306:	031b      	lsls	r3, r3, #12
 800e308:	0017      	movs	r7, r2
 800e30a:	0b1b      	lsrs	r3, r3, #12
 800e30c:	4a06      	ldr	r2, [pc, #24]	; (800e328 <__aeabi_ddiv+0x5f8>)
 800e30e:	e59d      	b.n	800de4c <__aeabi_ddiv+0x11c>
 800e310:	42bd      	cmp	r5, r7
 800e312:	d8b2      	bhi.n	800e27a <__aeabi_ddiv+0x54a>
 800e314:	469b      	mov	fp, r3
 800e316:	2400      	movs	r4, #0
 800e318:	e6bf      	b.n	800e09a <__aeabi_ddiv+0x36a>
 800e31a:	4580      	cmp	r8, r0
 800e31c:	d3b9      	bcc.n	800e292 <__aeabi_ddiv+0x562>
 800e31e:	001a      	movs	r2, r3
 800e320:	e7c3      	b.n	800e2aa <__aeabi_ddiv+0x57a>
 800e322:	46c0      	nop			; (mov r8, r8)
 800e324:	000003ff 	.word	0x000003ff
 800e328:	000007ff 	.word	0x000007ff
 800e32c:	0000041e 	.word	0x0000041e
 800e330:	0000043e 	.word	0x0000043e

0800e334 <__eqdf2>:
 800e334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e336:	464f      	mov	r7, r9
 800e338:	4646      	mov	r6, r8
 800e33a:	46d6      	mov	lr, sl
 800e33c:	4684      	mov	ip, r0
 800e33e:	b5c0      	push	{r6, r7, lr}
 800e340:	4680      	mov	r8, r0
 800e342:	4e19      	ldr	r6, [pc, #100]	; (800e3a8 <__eqdf2+0x74>)
 800e344:	0318      	lsls	r0, r3, #12
 800e346:	030f      	lsls	r7, r1, #12
 800e348:	004d      	lsls	r5, r1, #1
 800e34a:	0b00      	lsrs	r0, r0, #12
 800e34c:	005c      	lsls	r4, r3, #1
 800e34e:	4682      	mov	sl, r0
 800e350:	0b3f      	lsrs	r7, r7, #12
 800e352:	0d6d      	lsrs	r5, r5, #21
 800e354:	0fc9      	lsrs	r1, r1, #31
 800e356:	4691      	mov	r9, r2
 800e358:	0d64      	lsrs	r4, r4, #21
 800e35a:	0fdb      	lsrs	r3, r3, #31
 800e35c:	2001      	movs	r0, #1
 800e35e:	42b5      	cmp	r5, r6
 800e360:	d00a      	beq.n	800e378 <__eqdf2+0x44>
 800e362:	42b4      	cmp	r4, r6
 800e364:	d003      	beq.n	800e36e <__eqdf2+0x3a>
 800e366:	42a5      	cmp	r5, r4
 800e368:	d101      	bne.n	800e36e <__eqdf2+0x3a>
 800e36a:	4557      	cmp	r7, sl
 800e36c:	d00c      	beq.n	800e388 <__eqdf2+0x54>
 800e36e:	bc1c      	pop	{r2, r3, r4}
 800e370:	4690      	mov	r8, r2
 800e372:	4699      	mov	r9, r3
 800e374:	46a2      	mov	sl, r4
 800e376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e378:	4666      	mov	r6, ip
 800e37a:	433e      	orrs	r6, r7
 800e37c:	d1f7      	bne.n	800e36e <__eqdf2+0x3a>
 800e37e:	42ac      	cmp	r4, r5
 800e380:	d1f5      	bne.n	800e36e <__eqdf2+0x3a>
 800e382:	4654      	mov	r4, sl
 800e384:	4314      	orrs	r4, r2
 800e386:	d1f2      	bne.n	800e36e <__eqdf2+0x3a>
 800e388:	2001      	movs	r0, #1
 800e38a:	45c8      	cmp	r8, r9
 800e38c:	d1ef      	bne.n	800e36e <__eqdf2+0x3a>
 800e38e:	4299      	cmp	r1, r3
 800e390:	d007      	beq.n	800e3a2 <__eqdf2+0x6e>
 800e392:	2d00      	cmp	r5, #0
 800e394:	d1eb      	bne.n	800e36e <__eqdf2+0x3a>
 800e396:	4663      	mov	r3, ip
 800e398:	431f      	orrs	r7, r3
 800e39a:	0038      	movs	r0, r7
 800e39c:	1e47      	subs	r7, r0, #1
 800e39e:	41b8      	sbcs	r0, r7
 800e3a0:	e7e5      	b.n	800e36e <__eqdf2+0x3a>
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	e7e3      	b.n	800e36e <__eqdf2+0x3a>
 800e3a6:	46c0      	nop			; (mov r8, r8)
 800e3a8:	000007ff 	.word	0x000007ff

0800e3ac <__gedf2>:
 800e3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ae:	464f      	mov	r7, r9
 800e3b0:	4646      	mov	r6, r8
 800e3b2:	46d6      	mov	lr, sl
 800e3b4:	004d      	lsls	r5, r1, #1
 800e3b6:	b5c0      	push	{r6, r7, lr}
 800e3b8:	030e      	lsls	r6, r1, #12
 800e3ba:	0fc9      	lsrs	r1, r1, #31
 800e3bc:	468a      	mov	sl, r1
 800e3be:	492c      	ldr	r1, [pc, #176]	; (800e470 <__gedf2+0xc4>)
 800e3c0:	031f      	lsls	r7, r3, #12
 800e3c2:	005c      	lsls	r4, r3, #1
 800e3c4:	4680      	mov	r8, r0
 800e3c6:	0b36      	lsrs	r6, r6, #12
 800e3c8:	0d6d      	lsrs	r5, r5, #21
 800e3ca:	4691      	mov	r9, r2
 800e3cc:	0b3f      	lsrs	r7, r7, #12
 800e3ce:	0d64      	lsrs	r4, r4, #21
 800e3d0:	0fdb      	lsrs	r3, r3, #31
 800e3d2:	428d      	cmp	r5, r1
 800e3d4:	d01e      	beq.n	800e414 <__gedf2+0x68>
 800e3d6:	428c      	cmp	r4, r1
 800e3d8:	d016      	beq.n	800e408 <__gedf2+0x5c>
 800e3da:	2d00      	cmp	r5, #0
 800e3dc:	d11e      	bne.n	800e41c <__gedf2+0x70>
 800e3de:	4330      	orrs	r0, r6
 800e3e0:	4684      	mov	ip, r0
 800e3e2:	2c00      	cmp	r4, #0
 800e3e4:	d101      	bne.n	800e3ea <__gedf2+0x3e>
 800e3e6:	433a      	orrs	r2, r7
 800e3e8:	d023      	beq.n	800e432 <__gedf2+0x86>
 800e3ea:	4662      	mov	r2, ip
 800e3ec:	2a00      	cmp	r2, #0
 800e3ee:	d01a      	beq.n	800e426 <__gedf2+0x7a>
 800e3f0:	459a      	cmp	sl, r3
 800e3f2:	d029      	beq.n	800e448 <__gedf2+0x9c>
 800e3f4:	4651      	mov	r1, sl
 800e3f6:	2002      	movs	r0, #2
 800e3f8:	3901      	subs	r1, #1
 800e3fa:	4008      	ands	r0, r1
 800e3fc:	3801      	subs	r0, #1
 800e3fe:	bc1c      	pop	{r2, r3, r4}
 800e400:	4690      	mov	r8, r2
 800e402:	4699      	mov	r9, r3
 800e404:	46a2      	mov	sl, r4
 800e406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e408:	0039      	movs	r1, r7
 800e40a:	4311      	orrs	r1, r2
 800e40c:	d0e5      	beq.n	800e3da <__gedf2+0x2e>
 800e40e:	2002      	movs	r0, #2
 800e410:	4240      	negs	r0, r0
 800e412:	e7f4      	b.n	800e3fe <__gedf2+0x52>
 800e414:	4330      	orrs	r0, r6
 800e416:	d1fa      	bne.n	800e40e <__gedf2+0x62>
 800e418:	42ac      	cmp	r4, r5
 800e41a:	d00f      	beq.n	800e43c <__gedf2+0x90>
 800e41c:	2c00      	cmp	r4, #0
 800e41e:	d10f      	bne.n	800e440 <__gedf2+0x94>
 800e420:	433a      	orrs	r2, r7
 800e422:	d0e7      	beq.n	800e3f4 <__gedf2+0x48>
 800e424:	e00c      	b.n	800e440 <__gedf2+0x94>
 800e426:	2201      	movs	r2, #1
 800e428:	3b01      	subs	r3, #1
 800e42a:	4393      	bics	r3, r2
 800e42c:	0018      	movs	r0, r3
 800e42e:	3001      	adds	r0, #1
 800e430:	e7e5      	b.n	800e3fe <__gedf2+0x52>
 800e432:	4663      	mov	r3, ip
 800e434:	2000      	movs	r0, #0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d0e1      	beq.n	800e3fe <__gedf2+0x52>
 800e43a:	e7db      	b.n	800e3f4 <__gedf2+0x48>
 800e43c:	433a      	orrs	r2, r7
 800e43e:	d1e6      	bne.n	800e40e <__gedf2+0x62>
 800e440:	459a      	cmp	sl, r3
 800e442:	d1d7      	bne.n	800e3f4 <__gedf2+0x48>
 800e444:	42a5      	cmp	r5, r4
 800e446:	dcd5      	bgt.n	800e3f4 <__gedf2+0x48>
 800e448:	42a5      	cmp	r5, r4
 800e44a:	db05      	blt.n	800e458 <__gedf2+0xac>
 800e44c:	42be      	cmp	r6, r7
 800e44e:	d8d1      	bhi.n	800e3f4 <__gedf2+0x48>
 800e450:	d008      	beq.n	800e464 <__gedf2+0xb8>
 800e452:	2000      	movs	r0, #0
 800e454:	42be      	cmp	r6, r7
 800e456:	d2d2      	bcs.n	800e3fe <__gedf2+0x52>
 800e458:	4650      	mov	r0, sl
 800e45a:	2301      	movs	r3, #1
 800e45c:	3801      	subs	r0, #1
 800e45e:	4398      	bics	r0, r3
 800e460:	3001      	adds	r0, #1
 800e462:	e7cc      	b.n	800e3fe <__gedf2+0x52>
 800e464:	45c8      	cmp	r8, r9
 800e466:	d8c5      	bhi.n	800e3f4 <__gedf2+0x48>
 800e468:	2000      	movs	r0, #0
 800e46a:	45c8      	cmp	r8, r9
 800e46c:	d3f4      	bcc.n	800e458 <__gedf2+0xac>
 800e46e:	e7c6      	b.n	800e3fe <__gedf2+0x52>
 800e470:	000007ff 	.word	0x000007ff

0800e474 <__ledf2>:
 800e474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e476:	464f      	mov	r7, r9
 800e478:	4646      	mov	r6, r8
 800e47a:	46d6      	mov	lr, sl
 800e47c:	004d      	lsls	r5, r1, #1
 800e47e:	b5c0      	push	{r6, r7, lr}
 800e480:	030e      	lsls	r6, r1, #12
 800e482:	0fc9      	lsrs	r1, r1, #31
 800e484:	468a      	mov	sl, r1
 800e486:	492e      	ldr	r1, [pc, #184]	; (800e540 <__ledf2+0xcc>)
 800e488:	031f      	lsls	r7, r3, #12
 800e48a:	005c      	lsls	r4, r3, #1
 800e48c:	4680      	mov	r8, r0
 800e48e:	0b36      	lsrs	r6, r6, #12
 800e490:	0d6d      	lsrs	r5, r5, #21
 800e492:	4691      	mov	r9, r2
 800e494:	0b3f      	lsrs	r7, r7, #12
 800e496:	0d64      	lsrs	r4, r4, #21
 800e498:	0fdb      	lsrs	r3, r3, #31
 800e49a:	428d      	cmp	r5, r1
 800e49c:	d018      	beq.n	800e4d0 <__ledf2+0x5c>
 800e49e:	428c      	cmp	r4, r1
 800e4a0:	d011      	beq.n	800e4c6 <__ledf2+0x52>
 800e4a2:	2d00      	cmp	r5, #0
 800e4a4:	d118      	bne.n	800e4d8 <__ledf2+0x64>
 800e4a6:	4330      	orrs	r0, r6
 800e4a8:	4684      	mov	ip, r0
 800e4aa:	2c00      	cmp	r4, #0
 800e4ac:	d11e      	bne.n	800e4ec <__ledf2+0x78>
 800e4ae:	433a      	orrs	r2, r7
 800e4b0:	d11c      	bne.n	800e4ec <__ledf2+0x78>
 800e4b2:	4663      	mov	r3, ip
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d030      	beq.n	800e51c <__ledf2+0xa8>
 800e4ba:	4651      	mov	r1, sl
 800e4bc:	2002      	movs	r0, #2
 800e4be:	3901      	subs	r1, #1
 800e4c0:	4008      	ands	r0, r1
 800e4c2:	3801      	subs	r0, #1
 800e4c4:	e02a      	b.n	800e51c <__ledf2+0xa8>
 800e4c6:	0039      	movs	r1, r7
 800e4c8:	4311      	orrs	r1, r2
 800e4ca:	d0ea      	beq.n	800e4a2 <__ledf2+0x2e>
 800e4cc:	2002      	movs	r0, #2
 800e4ce:	e025      	b.n	800e51c <__ledf2+0xa8>
 800e4d0:	4330      	orrs	r0, r6
 800e4d2:	d1fb      	bne.n	800e4cc <__ledf2+0x58>
 800e4d4:	42ac      	cmp	r4, r5
 800e4d6:	d026      	beq.n	800e526 <__ledf2+0xb2>
 800e4d8:	2c00      	cmp	r4, #0
 800e4da:	d126      	bne.n	800e52a <__ledf2+0xb6>
 800e4dc:	433a      	orrs	r2, r7
 800e4de:	d124      	bne.n	800e52a <__ledf2+0xb6>
 800e4e0:	4651      	mov	r1, sl
 800e4e2:	2002      	movs	r0, #2
 800e4e4:	3901      	subs	r1, #1
 800e4e6:	4008      	ands	r0, r1
 800e4e8:	3801      	subs	r0, #1
 800e4ea:	e017      	b.n	800e51c <__ledf2+0xa8>
 800e4ec:	4662      	mov	r2, ip
 800e4ee:	2a00      	cmp	r2, #0
 800e4f0:	d00f      	beq.n	800e512 <__ledf2+0x9e>
 800e4f2:	459a      	cmp	sl, r3
 800e4f4:	d1e1      	bne.n	800e4ba <__ledf2+0x46>
 800e4f6:	42a5      	cmp	r5, r4
 800e4f8:	db05      	blt.n	800e506 <__ledf2+0x92>
 800e4fa:	42be      	cmp	r6, r7
 800e4fc:	d8dd      	bhi.n	800e4ba <__ledf2+0x46>
 800e4fe:	d019      	beq.n	800e534 <__ledf2+0xc0>
 800e500:	2000      	movs	r0, #0
 800e502:	42be      	cmp	r6, r7
 800e504:	d20a      	bcs.n	800e51c <__ledf2+0xa8>
 800e506:	4650      	mov	r0, sl
 800e508:	2301      	movs	r3, #1
 800e50a:	3801      	subs	r0, #1
 800e50c:	4398      	bics	r0, r3
 800e50e:	3001      	adds	r0, #1
 800e510:	e004      	b.n	800e51c <__ledf2+0xa8>
 800e512:	2201      	movs	r2, #1
 800e514:	3b01      	subs	r3, #1
 800e516:	4393      	bics	r3, r2
 800e518:	0018      	movs	r0, r3
 800e51a:	3001      	adds	r0, #1
 800e51c:	bc1c      	pop	{r2, r3, r4}
 800e51e:	4690      	mov	r8, r2
 800e520:	4699      	mov	r9, r3
 800e522:	46a2      	mov	sl, r4
 800e524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e526:	433a      	orrs	r2, r7
 800e528:	d1d0      	bne.n	800e4cc <__ledf2+0x58>
 800e52a:	459a      	cmp	sl, r3
 800e52c:	d1c5      	bne.n	800e4ba <__ledf2+0x46>
 800e52e:	42a5      	cmp	r5, r4
 800e530:	dcc3      	bgt.n	800e4ba <__ledf2+0x46>
 800e532:	e7e0      	b.n	800e4f6 <__ledf2+0x82>
 800e534:	45c8      	cmp	r8, r9
 800e536:	d8c0      	bhi.n	800e4ba <__ledf2+0x46>
 800e538:	2000      	movs	r0, #0
 800e53a:	45c8      	cmp	r8, r9
 800e53c:	d3e3      	bcc.n	800e506 <__ledf2+0x92>
 800e53e:	e7ed      	b.n	800e51c <__ledf2+0xa8>
 800e540:	000007ff 	.word	0x000007ff

0800e544 <__aeabi_dmul>:
 800e544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e546:	4657      	mov	r7, sl
 800e548:	46de      	mov	lr, fp
 800e54a:	464e      	mov	r6, r9
 800e54c:	4645      	mov	r5, r8
 800e54e:	b5e0      	push	{r5, r6, r7, lr}
 800e550:	4683      	mov	fp, r0
 800e552:	0006      	movs	r6, r0
 800e554:	030f      	lsls	r7, r1, #12
 800e556:	0048      	lsls	r0, r1, #1
 800e558:	b087      	sub	sp, #28
 800e55a:	4692      	mov	sl, r2
 800e55c:	001d      	movs	r5, r3
 800e55e:	0b3f      	lsrs	r7, r7, #12
 800e560:	0d40      	lsrs	r0, r0, #21
 800e562:	0fcc      	lsrs	r4, r1, #31
 800e564:	2800      	cmp	r0, #0
 800e566:	d100      	bne.n	800e56a <__aeabi_dmul+0x26>
 800e568:	e06f      	b.n	800e64a <__aeabi_dmul+0x106>
 800e56a:	4bde      	ldr	r3, [pc, #888]	; (800e8e4 <__aeabi_dmul+0x3a0>)
 800e56c:	4298      	cmp	r0, r3
 800e56e:	d038      	beq.n	800e5e2 <__aeabi_dmul+0x9e>
 800e570:	2380      	movs	r3, #128	; 0x80
 800e572:	00ff      	lsls	r7, r7, #3
 800e574:	041b      	lsls	r3, r3, #16
 800e576:	431f      	orrs	r7, r3
 800e578:	0f73      	lsrs	r3, r6, #29
 800e57a:	433b      	orrs	r3, r7
 800e57c:	9301      	str	r3, [sp, #4]
 800e57e:	4bda      	ldr	r3, [pc, #872]	; (800e8e8 <__aeabi_dmul+0x3a4>)
 800e580:	2700      	movs	r7, #0
 800e582:	4699      	mov	r9, r3
 800e584:	2300      	movs	r3, #0
 800e586:	469b      	mov	fp, r3
 800e588:	00f6      	lsls	r6, r6, #3
 800e58a:	4481      	add	r9, r0
 800e58c:	032b      	lsls	r3, r5, #12
 800e58e:	0069      	lsls	r1, r5, #1
 800e590:	0b1b      	lsrs	r3, r3, #12
 800e592:	4652      	mov	r2, sl
 800e594:	4698      	mov	r8, r3
 800e596:	0d49      	lsrs	r1, r1, #21
 800e598:	0fed      	lsrs	r5, r5, #31
 800e59a:	2900      	cmp	r1, #0
 800e59c:	d100      	bne.n	800e5a0 <__aeabi_dmul+0x5c>
 800e59e:	e085      	b.n	800e6ac <__aeabi_dmul+0x168>
 800e5a0:	4bd0      	ldr	r3, [pc, #832]	; (800e8e4 <__aeabi_dmul+0x3a0>)
 800e5a2:	4299      	cmp	r1, r3
 800e5a4:	d100      	bne.n	800e5a8 <__aeabi_dmul+0x64>
 800e5a6:	e073      	b.n	800e690 <__aeabi_dmul+0x14c>
 800e5a8:	4643      	mov	r3, r8
 800e5aa:	00da      	lsls	r2, r3, #3
 800e5ac:	2380      	movs	r3, #128	; 0x80
 800e5ae:	041b      	lsls	r3, r3, #16
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	4652      	mov	r2, sl
 800e5b4:	48cc      	ldr	r0, [pc, #816]	; (800e8e8 <__aeabi_dmul+0x3a4>)
 800e5b6:	0f52      	lsrs	r2, r2, #29
 800e5b8:	4684      	mov	ip, r0
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	4652      	mov	r2, sl
 800e5be:	2000      	movs	r0, #0
 800e5c0:	4461      	add	r1, ip
 800e5c2:	00d2      	lsls	r2, r2, #3
 800e5c4:	4489      	add	r9, r1
 800e5c6:	0021      	movs	r1, r4
 800e5c8:	4069      	eors	r1, r5
 800e5ca:	9100      	str	r1, [sp, #0]
 800e5cc:	468c      	mov	ip, r1
 800e5ce:	2101      	movs	r1, #1
 800e5d0:	4449      	add	r1, r9
 800e5d2:	468a      	mov	sl, r1
 800e5d4:	2f0f      	cmp	r7, #15
 800e5d6:	d900      	bls.n	800e5da <__aeabi_dmul+0x96>
 800e5d8:	e090      	b.n	800e6fc <__aeabi_dmul+0x1b8>
 800e5da:	49c4      	ldr	r1, [pc, #784]	; (800e8ec <__aeabi_dmul+0x3a8>)
 800e5dc:	00bf      	lsls	r7, r7, #2
 800e5de:	59cf      	ldr	r7, [r1, r7]
 800e5e0:	46bf      	mov	pc, r7
 800e5e2:	465b      	mov	r3, fp
 800e5e4:	433b      	orrs	r3, r7
 800e5e6:	9301      	str	r3, [sp, #4]
 800e5e8:	d000      	beq.n	800e5ec <__aeabi_dmul+0xa8>
 800e5ea:	e16a      	b.n	800e8c2 <__aeabi_dmul+0x37e>
 800e5ec:	2302      	movs	r3, #2
 800e5ee:	2708      	movs	r7, #8
 800e5f0:	2600      	movs	r6, #0
 800e5f2:	4681      	mov	r9, r0
 800e5f4:	469b      	mov	fp, r3
 800e5f6:	e7c9      	b.n	800e58c <__aeabi_dmul+0x48>
 800e5f8:	0032      	movs	r2, r6
 800e5fa:	4658      	mov	r0, fp
 800e5fc:	9b01      	ldr	r3, [sp, #4]
 800e5fe:	4661      	mov	r1, ip
 800e600:	9100      	str	r1, [sp, #0]
 800e602:	2802      	cmp	r0, #2
 800e604:	d100      	bne.n	800e608 <__aeabi_dmul+0xc4>
 800e606:	e075      	b.n	800e6f4 <__aeabi_dmul+0x1b0>
 800e608:	2803      	cmp	r0, #3
 800e60a:	d100      	bne.n	800e60e <__aeabi_dmul+0xca>
 800e60c:	e1fe      	b.n	800ea0c <__aeabi_dmul+0x4c8>
 800e60e:	2801      	cmp	r0, #1
 800e610:	d000      	beq.n	800e614 <__aeabi_dmul+0xd0>
 800e612:	e12c      	b.n	800e86e <__aeabi_dmul+0x32a>
 800e614:	2300      	movs	r3, #0
 800e616:	2700      	movs	r7, #0
 800e618:	2600      	movs	r6, #0
 800e61a:	2500      	movs	r5, #0
 800e61c:	033f      	lsls	r7, r7, #12
 800e61e:	0d2a      	lsrs	r2, r5, #20
 800e620:	0b3f      	lsrs	r7, r7, #12
 800e622:	48b3      	ldr	r0, [pc, #716]	; (800e8f0 <__aeabi_dmul+0x3ac>)
 800e624:	0512      	lsls	r2, r2, #20
 800e626:	433a      	orrs	r2, r7
 800e628:	4002      	ands	r2, r0
 800e62a:	051b      	lsls	r3, r3, #20
 800e62c:	4313      	orrs	r3, r2
 800e62e:	9a00      	ldr	r2, [sp, #0]
 800e630:	005b      	lsls	r3, r3, #1
 800e632:	07d1      	lsls	r1, r2, #31
 800e634:	085b      	lsrs	r3, r3, #1
 800e636:	430b      	orrs	r3, r1
 800e638:	0030      	movs	r0, r6
 800e63a:	0019      	movs	r1, r3
 800e63c:	b007      	add	sp, #28
 800e63e:	bc3c      	pop	{r2, r3, r4, r5}
 800e640:	4690      	mov	r8, r2
 800e642:	4699      	mov	r9, r3
 800e644:	46a2      	mov	sl, r4
 800e646:	46ab      	mov	fp, r5
 800e648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e64a:	465b      	mov	r3, fp
 800e64c:	433b      	orrs	r3, r7
 800e64e:	9301      	str	r3, [sp, #4]
 800e650:	d100      	bne.n	800e654 <__aeabi_dmul+0x110>
 800e652:	e12f      	b.n	800e8b4 <__aeabi_dmul+0x370>
 800e654:	2f00      	cmp	r7, #0
 800e656:	d100      	bne.n	800e65a <__aeabi_dmul+0x116>
 800e658:	e1a5      	b.n	800e9a6 <__aeabi_dmul+0x462>
 800e65a:	0038      	movs	r0, r7
 800e65c:	f7fe fba2 	bl	800cda4 <__clzsi2>
 800e660:	0003      	movs	r3, r0
 800e662:	3b0b      	subs	r3, #11
 800e664:	2b1c      	cmp	r3, #28
 800e666:	dd00      	ble.n	800e66a <__aeabi_dmul+0x126>
 800e668:	e196      	b.n	800e998 <__aeabi_dmul+0x454>
 800e66a:	221d      	movs	r2, #29
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	465a      	mov	r2, fp
 800e670:	0001      	movs	r1, r0
 800e672:	40da      	lsrs	r2, r3
 800e674:	465e      	mov	r6, fp
 800e676:	3908      	subs	r1, #8
 800e678:	408f      	lsls	r7, r1
 800e67a:	0013      	movs	r3, r2
 800e67c:	408e      	lsls	r6, r1
 800e67e:	433b      	orrs	r3, r7
 800e680:	9301      	str	r3, [sp, #4]
 800e682:	4b9c      	ldr	r3, [pc, #624]	; (800e8f4 <__aeabi_dmul+0x3b0>)
 800e684:	2700      	movs	r7, #0
 800e686:	1a1b      	subs	r3, r3, r0
 800e688:	4699      	mov	r9, r3
 800e68a:	2300      	movs	r3, #0
 800e68c:	469b      	mov	fp, r3
 800e68e:	e77d      	b.n	800e58c <__aeabi_dmul+0x48>
 800e690:	4641      	mov	r1, r8
 800e692:	4653      	mov	r3, sl
 800e694:	430b      	orrs	r3, r1
 800e696:	4993      	ldr	r1, [pc, #588]	; (800e8e4 <__aeabi_dmul+0x3a0>)
 800e698:	468c      	mov	ip, r1
 800e69a:	44e1      	add	r9, ip
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d000      	beq.n	800e6a2 <__aeabi_dmul+0x15e>
 800e6a0:	e11a      	b.n	800e8d8 <__aeabi_dmul+0x394>
 800e6a2:	2202      	movs	r2, #2
 800e6a4:	2002      	movs	r0, #2
 800e6a6:	4317      	orrs	r7, r2
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	e78c      	b.n	800e5c6 <__aeabi_dmul+0x82>
 800e6ac:	4313      	orrs	r3, r2
 800e6ae:	d100      	bne.n	800e6b2 <__aeabi_dmul+0x16e>
 800e6b0:	e10d      	b.n	800e8ce <__aeabi_dmul+0x38a>
 800e6b2:	4643      	mov	r3, r8
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d100      	bne.n	800e6ba <__aeabi_dmul+0x176>
 800e6b8:	e181      	b.n	800e9be <__aeabi_dmul+0x47a>
 800e6ba:	4640      	mov	r0, r8
 800e6bc:	f7fe fb72 	bl	800cda4 <__clzsi2>
 800e6c0:	0002      	movs	r2, r0
 800e6c2:	3a0b      	subs	r2, #11
 800e6c4:	2a1c      	cmp	r2, #28
 800e6c6:	dd00      	ble.n	800e6ca <__aeabi_dmul+0x186>
 800e6c8:	e172      	b.n	800e9b0 <__aeabi_dmul+0x46c>
 800e6ca:	0001      	movs	r1, r0
 800e6cc:	4643      	mov	r3, r8
 800e6ce:	3908      	subs	r1, #8
 800e6d0:	408b      	lsls	r3, r1
 800e6d2:	4698      	mov	r8, r3
 800e6d4:	231d      	movs	r3, #29
 800e6d6:	1a9a      	subs	r2, r3, r2
 800e6d8:	4653      	mov	r3, sl
 800e6da:	40d3      	lsrs	r3, r2
 800e6dc:	001a      	movs	r2, r3
 800e6de:	4643      	mov	r3, r8
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	4652      	mov	r2, sl
 800e6e4:	408a      	lsls	r2, r1
 800e6e6:	4649      	mov	r1, r9
 800e6e8:	1a08      	subs	r0, r1, r0
 800e6ea:	4982      	ldr	r1, [pc, #520]	; (800e8f4 <__aeabi_dmul+0x3b0>)
 800e6ec:	4689      	mov	r9, r1
 800e6ee:	4481      	add	r9, r0
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	e768      	b.n	800e5c6 <__aeabi_dmul+0x82>
 800e6f4:	4b7b      	ldr	r3, [pc, #492]	; (800e8e4 <__aeabi_dmul+0x3a0>)
 800e6f6:	2700      	movs	r7, #0
 800e6f8:	2600      	movs	r6, #0
 800e6fa:	e78e      	b.n	800e61a <__aeabi_dmul+0xd6>
 800e6fc:	0c14      	lsrs	r4, r2, #16
 800e6fe:	0412      	lsls	r2, r2, #16
 800e700:	0c12      	lsrs	r2, r2, #16
 800e702:	0011      	movs	r1, r2
 800e704:	0c37      	lsrs	r7, r6, #16
 800e706:	0436      	lsls	r6, r6, #16
 800e708:	0c35      	lsrs	r5, r6, #16
 800e70a:	4379      	muls	r1, r7
 800e70c:	0028      	movs	r0, r5
 800e70e:	468c      	mov	ip, r1
 800e710:	002e      	movs	r6, r5
 800e712:	4360      	muls	r0, r4
 800e714:	4460      	add	r0, ip
 800e716:	4683      	mov	fp, r0
 800e718:	4356      	muls	r6, r2
 800e71a:	0021      	movs	r1, r4
 800e71c:	0c30      	lsrs	r0, r6, #16
 800e71e:	4680      	mov	r8, r0
 800e720:	4658      	mov	r0, fp
 800e722:	4379      	muls	r1, r7
 800e724:	4440      	add	r0, r8
 800e726:	9102      	str	r1, [sp, #8]
 800e728:	4584      	cmp	ip, r0
 800e72a:	d906      	bls.n	800e73a <__aeabi_dmul+0x1f6>
 800e72c:	4688      	mov	r8, r1
 800e72e:	2180      	movs	r1, #128	; 0x80
 800e730:	0249      	lsls	r1, r1, #9
 800e732:	468c      	mov	ip, r1
 800e734:	44e0      	add	r8, ip
 800e736:	4641      	mov	r1, r8
 800e738:	9102      	str	r1, [sp, #8]
 800e73a:	0436      	lsls	r6, r6, #16
 800e73c:	0c01      	lsrs	r1, r0, #16
 800e73e:	0c36      	lsrs	r6, r6, #16
 800e740:	0400      	lsls	r0, r0, #16
 800e742:	468b      	mov	fp, r1
 800e744:	1981      	adds	r1, r0, r6
 800e746:	0c1e      	lsrs	r6, r3, #16
 800e748:	041b      	lsls	r3, r3, #16
 800e74a:	0c1b      	lsrs	r3, r3, #16
 800e74c:	9103      	str	r1, [sp, #12]
 800e74e:	0019      	movs	r1, r3
 800e750:	4379      	muls	r1, r7
 800e752:	468c      	mov	ip, r1
 800e754:	0028      	movs	r0, r5
 800e756:	4375      	muls	r5, r6
 800e758:	4465      	add	r5, ip
 800e75a:	46a8      	mov	r8, r5
 800e75c:	4358      	muls	r0, r3
 800e75e:	0c05      	lsrs	r5, r0, #16
 800e760:	4445      	add	r5, r8
 800e762:	4377      	muls	r7, r6
 800e764:	42a9      	cmp	r1, r5
 800e766:	d903      	bls.n	800e770 <__aeabi_dmul+0x22c>
 800e768:	2180      	movs	r1, #128	; 0x80
 800e76a:	0249      	lsls	r1, r1, #9
 800e76c:	468c      	mov	ip, r1
 800e76e:	4467      	add	r7, ip
 800e770:	0c29      	lsrs	r1, r5, #16
 800e772:	468c      	mov	ip, r1
 800e774:	0039      	movs	r1, r7
 800e776:	0400      	lsls	r0, r0, #16
 800e778:	0c00      	lsrs	r0, r0, #16
 800e77a:	042d      	lsls	r5, r5, #16
 800e77c:	182d      	adds	r5, r5, r0
 800e77e:	4461      	add	r1, ip
 800e780:	44ab      	add	fp, r5
 800e782:	9105      	str	r1, [sp, #20]
 800e784:	4659      	mov	r1, fp
 800e786:	9104      	str	r1, [sp, #16]
 800e788:	9901      	ldr	r1, [sp, #4]
 800e78a:	040f      	lsls	r7, r1, #16
 800e78c:	0c3f      	lsrs	r7, r7, #16
 800e78e:	0c08      	lsrs	r0, r1, #16
 800e790:	0039      	movs	r1, r7
 800e792:	4351      	muls	r1, r2
 800e794:	4342      	muls	r2, r0
 800e796:	4690      	mov	r8, r2
 800e798:	0002      	movs	r2, r0
 800e79a:	468c      	mov	ip, r1
 800e79c:	0c09      	lsrs	r1, r1, #16
 800e79e:	468b      	mov	fp, r1
 800e7a0:	4362      	muls	r2, r4
 800e7a2:	437c      	muls	r4, r7
 800e7a4:	4444      	add	r4, r8
 800e7a6:	445c      	add	r4, fp
 800e7a8:	45a0      	cmp	r8, r4
 800e7aa:	d903      	bls.n	800e7b4 <__aeabi_dmul+0x270>
 800e7ac:	2180      	movs	r1, #128	; 0x80
 800e7ae:	0249      	lsls	r1, r1, #9
 800e7b0:	4688      	mov	r8, r1
 800e7b2:	4442      	add	r2, r8
 800e7b4:	0c21      	lsrs	r1, r4, #16
 800e7b6:	4688      	mov	r8, r1
 800e7b8:	4661      	mov	r1, ip
 800e7ba:	0409      	lsls	r1, r1, #16
 800e7bc:	0c09      	lsrs	r1, r1, #16
 800e7be:	468c      	mov	ip, r1
 800e7c0:	0039      	movs	r1, r7
 800e7c2:	4359      	muls	r1, r3
 800e7c4:	4343      	muls	r3, r0
 800e7c6:	4370      	muls	r0, r6
 800e7c8:	437e      	muls	r6, r7
 800e7ca:	0c0f      	lsrs	r7, r1, #16
 800e7cc:	18f6      	adds	r6, r6, r3
 800e7ce:	0424      	lsls	r4, r4, #16
 800e7d0:	19be      	adds	r6, r7, r6
 800e7d2:	4464      	add	r4, ip
 800e7d4:	4442      	add	r2, r8
 800e7d6:	468c      	mov	ip, r1
 800e7d8:	42b3      	cmp	r3, r6
 800e7da:	d903      	bls.n	800e7e4 <__aeabi_dmul+0x2a0>
 800e7dc:	2380      	movs	r3, #128	; 0x80
 800e7de:	025b      	lsls	r3, r3, #9
 800e7e0:	4698      	mov	r8, r3
 800e7e2:	4440      	add	r0, r8
 800e7e4:	9b02      	ldr	r3, [sp, #8]
 800e7e6:	4661      	mov	r1, ip
 800e7e8:	4698      	mov	r8, r3
 800e7ea:	9b04      	ldr	r3, [sp, #16]
 800e7ec:	0437      	lsls	r7, r6, #16
 800e7ee:	4443      	add	r3, r8
 800e7f0:	469b      	mov	fp, r3
 800e7f2:	45ab      	cmp	fp, r5
 800e7f4:	41ad      	sbcs	r5, r5
 800e7f6:	426b      	negs	r3, r5
 800e7f8:	040d      	lsls	r5, r1, #16
 800e7fa:	9905      	ldr	r1, [sp, #20]
 800e7fc:	0c2d      	lsrs	r5, r5, #16
 800e7fe:	468c      	mov	ip, r1
 800e800:	197f      	adds	r7, r7, r5
 800e802:	4467      	add	r7, ip
 800e804:	18fd      	adds	r5, r7, r3
 800e806:	46a8      	mov	r8, r5
 800e808:	465d      	mov	r5, fp
 800e80a:	192d      	adds	r5, r5, r4
 800e80c:	42a5      	cmp	r5, r4
 800e80e:	41a4      	sbcs	r4, r4
 800e810:	4693      	mov	fp, r2
 800e812:	4264      	negs	r4, r4
 800e814:	46a4      	mov	ip, r4
 800e816:	44c3      	add	fp, r8
 800e818:	44dc      	add	ip, fp
 800e81a:	428f      	cmp	r7, r1
 800e81c:	41bf      	sbcs	r7, r7
 800e81e:	4598      	cmp	r8, r3
 800e820:	419b      	sbcs	r3, r3
 800e822:	4593      	cmp	fp, r2
 800e824:	4192      	sbcs	r2, r2
 800e826:	45a4      	cmp	ip, r4
 800e828:	41a4      	sbcs	r4, r4
 800e82a:	425b      	negs	r3, r3
 800e82c:	427f      	negs	r7, r7
 800e82e:	431f      	orrs	r7, r3
 800e830:	0c36      	lsrs	r6, r6, #16
 800e832:	4252      	negs	r2, r2
 800e834:	4264      	negs	r4, r4
 800e836:	19bf      	adds	r7, r7, r6
 800e838:	4322      	orrs	r2, r4
 800e83a:	18bf      	adds	r7, r7, r2
 800e83c:	4662      	mov	r2, ip
 800e83e:	1838      	adds	r0, r7, r0
 800e840:	0243      	lsls	r3, r0, #9
 800e842:	0dd2      	lsrs	r2, r2, #23
 800e844:	9903      	ldr	r1, [sp, #12]
 800e846:	4313      	orrs	r3, r2
 800e848:	026a      	lsls	r2, r5, #9
 800e84a:	430a      	orrs	r2, r1
 800e84c:	1e50      	subs	r0, r2, #1
 800e84e:	4182      	sbcs	r2, r0
 800e850:	4661      	mov	r1, ip
 800e852:	0ded      	lsrs	r5, r5, #23
 800e854:	432a      	orrs	r2, r5
 800e856:	024e      	lsls	r6, r1, #9
 800e858:	4332      	orrs	r2, r6
 800e85a:	01d9      	lsls	r1, r3, #7
 800e85c:	d400      	bmi.n	800e860 <__aeabi_dmul+0x31c>
 800e85e:	e0b3      	b.n	800e9c8 <__aeabi_dmul+0x484>
 800e860:	2601      	movs	r6, #1
 800e862:	0850      	lsrs	r0, r2, #1
 800e864:	4032      	ands	r2, r6
 800e866:	4302      	orrs	r2, r0
 800e868:	07de      	lsls	r6, r3, #31
 800e86a:	4332      	orrs	r2, r6
 800e86c:	085b      	lsrs	r3, r3, #1
 800e86e:	4c22      	ldr	r4, [pc, #136]	; (800e8f8 <__aeabi_dmul+0x3b4>)
 800e870:	4454      	add	r4, sl
 800e872:	2c00      	cmp	r4, #0
 800e874:	dd62      	ble.n	800e93c <__aeabi_dmul+0x3f8>
 800e876:	0751      	lsls	r1, r2, #29
 800e878:	d009      	beq.n	800e88e <__aeabi_dmul+0x34a>
 800e87a:	200f      	movs	r0, #15
 800e87c:	4010      	ands	r0, r2
 800e87e:	2804      	cmp	r0, #4
 800e880:	d005      	beq.n	800e88e <__aeabi_dmul+0x34a>
 800e882:	1d10      	adds	r0, r2, #4
 800e884:	4290      	cmp	r0, r2
 800e886:	4192      	sbcs	r2, r2
 800e888:	4252      	negs	r2, r2
 800e88a:	189b      	adds	r3, r3, r2
 800e88c:	0002      	movs	r2, r0
 800e88e:	01d9      	lsls	r1, r3, #7
 800e890:	d504      	bpl.n	800e89c <__aeabi_dmul+0x358>
 800e892:	2480      	movs	r4, #128	; 0x80
 800e894:	4819      	ldr	r0, [pc, #100]	; (800e8fc <__aeabi_dmul+0x3b8>)
 800e896:	00e4      	lsls	r4, r4, #3
 800e898:	4003      	ands	r3, r0
 800e89a:	4454      	add	r4, sl
 800e89c:	4818      	ldr	r0, [pc, #96]	; (800e900 <__aeabi_dmul+0x3bc>)
 800e89e:	4284      	cmp	r4, r0
 800e8a0:	dd00      	ble.n	800e8a4 <__aeabi_dmul+0x360>
 800e8a2:	e727      	b.n	800e6f4 <__aeabi_dmul+0x1b0>
 800e8a4:	075e      	lsls	r6, r3, #29
 800e8a6:	025b      	lsls	r3, r3, #9
 800e8a8:	08d2      	lsrs	r2, r2, #3
 800e8aa:	0b1f      	lsrs	r7, r3, #12
 800e8ac:	0563      	lsls	r3, r4, #21
 800e8ae:	4316      	orrs	r6, r2
 800e8b0:	0d5b      	lsrs	r3, r3, #21
 800e8b2:	e6b2      	b.n	800e61a <__aeabi_dmul+0xd6>
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	4699      	mov	r9, r3
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	2704      	movs	r7, #4
 800e8bc:	2600      	movs	r6, #0
 800e8be:	469b      	mov	fp, r3
 800e8c0:	e664      	b.n	800e58c <__aeabi_dmul+0x48>
 800e8c2:	2303      	movs	r3, #3
 800e8c4:	9701      	str	r7, [sp, #4]
 800e8c6:	4681      	mov	r9, r0
 800e8c8:	270c      	movs	r7, #12
 800e8ca:	469b      	mov	fp, r3
 800e8cc:	e65e      	b.n	800e58c <__aeabi_dmul+0x48>
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	2001      	movs	r0, #1
 800e8d2:	4317      	orrs	r7, r2
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	e676      	b.n	800e5c6 <__aeabi_dmul+0x82>
 800e8d8:	2303      	movs	r3, #3
 800e8da:	2003      	movs	r0, #3
 800e8dc:	431f      	orrs	r7, r3
 800e8de:	4643      	mov	r3, r8
 800e8e0:	e671      	b.n	800e5c6 <__aeabi_dmul+0x82>
 800e8e2:	46c0      	nop			; (mov r8, r8)
 800e8e4:	000007ff 	.word	0x000007ff
 800e8e8:	fffffc01 	.word	0xfffffc01
 800e8ec:	0801ab00 	.word	0x0801ab00
 800e8f0:	800fffff 	.word	0x800fffff
 800e8f4:	fffffc0d 	.word	0xfffffc0d
 800e8f8:	000003ff 	.word	0x000003ff
 800e8fc:	feffffff 	.word	0xfeffffff
 800e900:	000007fe 	.word	0x000007fe
 800e904:	2300      	movs	r3, #0
 800e906:	2780      	movs	r7, #128	; 0x80
 800e908:	9300      	str	r3, [sp, #0]
 800e90a:	033f      	lsls	r7, r7, #12
 800e90c:	2600      	movs	r6, #0
 800e90e:	4b43      	ldr	r3, [pc, #268]	; (800ea1c <__aeabi_dmul+0x4d8>)
 800e910:	e683      	b.n	800e61a <__aeabi_dmul+0xd6>
 800e912:	9b01      	ldr	r3, [sp, #4]
 800e914:	0032      	movs	r2, r6
 800e916:	46a4      	mov	ip, r4
 800e918:	4658      	mov	r0, fp
 800e91a:	e670      	b.n	800e5fe <__aeabi_dmul+0xba>
 800e91c:	46ac      	mov	ip, r5
 800e91e:	e66e      	b.n	800e5fe <__aeabi_dmul+0xba>
 800e920:	2780      	movs	r7, #128	; 0x80
 800e922:	9901      	ldr	r1, [sp, #4]
 800e924:	033f      	lsls	r7, r7, #12
 800e926:	4239      	tst	r1, r7
 800e928:	d02d      	beq.n	800e986 <__aeabi_dmul+0x442>
 800e92a:	423b      	tst	r3, r7
 800e92c:	d12b      	bne.n	800e986 <__aeabi_dmul+0x442>
 800e92e:	431f      	orrs	r7, r3
 800e930:	033f      	lsls	r7, r7, #12
 800e932:	0b3f      	lsrs	r7, r7, #12
 800e934:	9500      	str	r5, [sp, #0]
 800e936:	0016      	movs	r6, r2
 800e938:	4b38      	ldr	r3, [pc, #224]	; (800ea1c <__aeabi_dmul+0x4d8>)
 800e93a:	e66e      	b.n	800e61a <__aeabi_dmul+0xd6>
 800e93c:	2501      	movs	r5, #1
 800e93e:	1b2d      	subs	r5, r5, r4
 800e940:	2d38      	cmp	r5, #56	; 0x38
 800e942:	dd00      	ble.n	800e946 <__aeabi_dmul+0x402>
 800e944:	e666      	b.n	800e614 <__aeabi_dmul+0xd0>
 800e946:	2d1f      	cmp	r5, #31
 800e948:	dc40      	bgt.n	800e9cc <__aeabi_dmul+0x488>
 800e94a:	4835      	ldr	r0, [pc, #212]	; (800ea20 <__aeabi_dmul+0x4dc>)
 800e94c:	001c      	movs	r4, r3
 800e94e:	4450      	add	r0, sl
 800e950:	0016      	movs	r6, r2
 800e952:	4082      	lsls	r2, r0
 800e954:	4084      	lsls	r4, r0
 800e956:	40ee      	lsrs	r6, r5
 800e958:	1e50      	subs	r0, r2, #1
 800e95a:	4182      	sbcs	r2, r0
 800e95c:	4334      	orrs	r4, r6
 800e95e:	4314      	orrs	r4, r2
 800e960:	40eb      	lsrs	r3, r5
 800e962:	0762      	lsls	r2, r4, #29
 800e964:	d009      	beq.n	800e97a <__aeabi_dmul+0x436>
 800e966:	220f      	movs	r2, #15
 800e968:	4022      	ands	r2, r4
 800e96a:	2a04      	cmp	r2, #4
 800e96c:	d005      	beq.n	800e97a <__aeabi_dmul+0x436>
 800e96e:	0022      	movs	r2, r4
 800e970:	1d14      	adds	r4, r2, #4
 800e972:	4294      	cmp	r4, r2
 800e974:	4180      	sbcs	r0, r0
 800e976:	4240      	negs	r0, r0
 800e978:	181b      	adds	r3, r3, r0
 800e97a:	021a      	lsls	r2, r3, #8
 800e97c:	d53e      	bpl.n	800e9fc <__aeabi_dmul+0x4b8>
 800e97e:	2301      	movs	r3, #1
 800e980:	2700      	movs	r7, #0
 800e982:	2600      	movs	r6, #0
 800e984:	e649      	b.n	800e61a <__aeabi_dmul+0xd6>
 800e986:	2780      	movs	r7, #128	; 0x80
 800e988:	9b01      	ldr	r3, [sp, #4]
 800e98a:	033f      	lsls	r7, r7, #12
 800e98c:	431f      	orrs	r7, r3
 800e98e:	033f      	lsls	r7, r7, #12
 800e990:	0b3f      	lsrs	r7, r7, #12
 800e992:	9400      	str	r4, [sp, #0]
 800e994:	4b21      	ldr	r3, [pc, #132]	; (800ea1c <__aeabi_dmul+0x4d8>)
 800e996:	e640      	b.n	800e61a <__aeabi_dmul+0xd6>
 800e998:	0003      	movs	r3, r0
 800e99a:	465a      	mov	r2, fp
 800e99c:	3b28      	subs	r3, #40	; 0x28
 800e99e:	409a      	lsls	r2, r3
 800e9a0:	2600      	movs	r6, #0
 800e9a2:	9201      	str	r2, [sp, #4]
 800e9a4:	e66d      	b.n	800e682 <__aeabi_dmul+0x13e>
 800e9a6:	4658      	mov	r0, fp
 800e9a8:	f7fe f9fc 	bl	800cda4 <__clzsi2>
 800e9ac:	3020      	adds	r0, #32
 800e9ae:	e657      	b.n	800e660 <__aeabi_dmul+0x11c>
 800e9b0:	0003      	movs	r3, r0
 800e9b2:	4652      	mov	r2, sl
 800e9b4:	3b28      	subs	r3, #40	; 0x28
 800e9b6:	409a      	lsls	r2, r3
 800e9b8:	0013      	movs	r3, r2
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	e693      	b.n	800e6e6 <__aeabi_dmul+0x1a2>
 800e9be:	4650      	mov	r0, sl
 800e9c0:	f7fe f9f0 	bl	800cda4 <__clzsi2>
 800e9c4:	3020      	adds	r0, #32
 800e9c6:	e67b      	b.n	800e6c0 <__aeabi_dmul+0x17c>
 800e9c8:	46ca      	mov	sl, r9
 800e9ca:	e750      	b.n	800e86e <__aeabi_dmul+0x32a>
 800e9cc:	201f      	movs	r0, #31
 800e9ce:	001e      	movs	r6, r3
 800e9d0:	4240      	negs	r0, r0
 800e9d2:	1b04      	subs	r4, r0, r4
 800e9d4:	40e6      	lsrs	r6, r4
 800e9d6:	2d20      	cmp	r5, #32
 800e9d8:	d003      	beq.n	800e9e2 <__aeabi_dmul+0x49e>
 800e9da:	4c12      	ldr	r4, [pc, #72]	; (800ea24 <__aeabi_dmul+0x4e0>)
 800e9dc:	4454      	add	r4, sl
 800e9de:	40a3      	lsls	r3, r4
 800e9e0:	431a      	orrs	r2, r3
 800e9e2:	1e50      	subs	r0, r2, #1
 800e9e4:	4182      	sbcs	r2, r0
 800e9e6:	4332      	orrs	r2, r6
 800e9e8:	2607      	movs	r6, #7
 800e9ea:	2700      	movs	r7, #0
 800e9ec:	4016      	ands	r6, r2
 800e9ee:	d009      	beq.n	800ea04 <__aeabi_dmul+0x4c0>
 800e9f0:	200f      	movs	r0, #15
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	4010      	ands	r0, r2
 800e9f6:	0014      	movs	r4, r2
 800e9f8:	2804      	cmp	r0, #4
 800e9fa:	d1b9      	bne.n	800e970 <__aeabi_dmul+0x42c>
 800e9fc:	0022      	movs	r2, r4
 800e9fe:	075e      	lsls	r6, r3, #29
 800ea00:	025b      	lsls	r3, r3, #9
 800ea02:	0b1f      	lsrs	r7, r3, #12
 800ea04:	08d2      	lsrs	r2, r2, #3
 800ea06:	4316      	orrs	r6, r2
 800ea08:	2300      	movs	r3, #0
 800ea0a:	e606      	b.n	800e61a <__aeabi_dmul+0xd6>
 800ea0c:	2780      	movs	r7, #128	; 0x80
 800ea0e:	033f      	lsls	r7, r7, #12
 800ea10:	431f      	orrs	r7, r3
 800ea12:	033f      	lsls	r7, r7, #12
 800ea14:	0b3f      	lsrs	r7, r7, #12
 800ea16:	0016      	movs	r6, r2
 800ea18:	4b00      	ldr	r3, [pc, #0]	; (800ea1c <__aeabi_dmul+0x4d8>)
 800ea1a:	e5fe      	b.n	800e61a <__aeabi_dmul+0xd6>
 800ea1c:	000007ff 	.word	0x000007ff
 800ea20:	0000041e 	.word	0x0000041e
 800ea24:	0000043e 	.word	0x0000043e

0800ea28 <__aeabi_dsub>:
 800ea28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea2a:	4657      	mov	r7, sl
 800ea2c:	464e      	mov	r6, r9
 800ea2e:	4645      	mov	r5, r8
 800ea30:	46de      	mov	lr, fp
 800ea32:	000c      	movs	r4, r1
 800ea34:	0309      	lsls	r1, r1, #12
 800ea36:	b5e0      	push	{r5, r6, r7, lr}
 800ea38:	0a49      	lsrs	r1, r1, #9
 800ea3a:	0f46      	lsrs	r6, r0, #29
 800ea3c:	005f      	lsls	r7, r3, #1
 800ea3e:	4331      	orrs	r1, r6
 800ea40:	031e      	lsls	r6, r3, #12
 800ea42:	0fdb      	lsrs	r3, r3, #31
 800ea44:	0a76      	lsrs	r6, r6, #9
 800ea46:	469b      	mov	fp, r3
 800ea48:	0f53      	lsrs	r3, r2, #29
 800ea4a:	4333      	orrs	r3, r6
 800ea4c:	4ec8      	ldr	r6, [pc, #800]	; (800ed70 <__aeabi_dsub+0x348>)
 800ea4e:	0065      	lsls	r5, r4, #1
 800ea50:	00c0      	lsls	r0, r0, #3
 800ea52:	0fe4      	lsrs	r4, r4, #31
 800ea54:	00d2      	lsls	r2, r2, #3
 800ea56:	0d6d      	lsrs	r5, r5, #21
 800ea58:	46a2      	mov	sl, r4
 800ea5a:	4681      	mov	r9, r0
 800ea5c:	0d7f      	lsrs	r7, r7, #21
 800ea5e:	469c      	mov	ip, r3
 800ea60:	4690      	mov	r8, r2
 800ea62:	42b7      	cmp	r7, r6
 800ea64:	d100      	bne.n	800ea68 <__aeabi_dsub+0x40>
 800ea66:	e0b9      	b.n	800ebdc <__aeabi_dsub+0x1b4>
 800ea68:	465b      	mov	r3, fp
 800ea6a:	2601      	movs	r6, #1
 800ea6c:	4073      	eors	r3, r6
 800ea6e:	469b      	mov	fp, r3
 800ea70:	1bee      	subs	r6, r5, r7
 800ea72:	45a3      	cmp	fp, r4
 800ea74:	d100      	bne.n	800ea78 <__aeabi_dsub+0x50>
 800ea76:	e083      	b.n	800eb80 <__aeabi_dsub+0x158>
 800ea78:	2e00      	cmp	r6, #0
 800ea7a:	dd63      	ble.n	800eb44 <__aeabi_dsub+0x11c>
 800ea7c:	2f00      	cmp	r7, #0
 800ea7e:	d000      	beq.n	800ea82 <__aeabi_dsub+0x5a>
 800ea80:	e0b1      	b.n	800ebe6 <__aeabi_dsub+0x1be>
 800ea82:	4663      	mov	r3, ip
 800ea84:	4313      	orrs	r3, r2
 800ea86:	d100      	bne.n	800ea8a <__aeabi_dsub+0x62>
 800ea88:	e123      	b.n	800ecd2 <__aeabi_dsub+0x2aa>
 800ea8a:	1e73      	subs	r3, r6, #1
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d000      	beq.n	800ea92 <__aeabi_dsub+0x6a>
 800ea90:	e1ba      	b.n	800ee08 <__aeabi_dsub+0x3e0>
 800ea92:	1a86      	subs	r6, r0, r2
 800ea94:	4663      	mov	r3, ip
 800ea96:	42b0      	cmp	r0, r6
 800ea98:	4180      	sbcs	r0, r0
 800ea9a:	2501      	movs	r5, #1
 800ea9c:	1ac9      	subs	r1, r1, r3
 800ea9e:	4240      	negs	r0, r0
 800eaa0:	1a09      	subs	r1, r1, r0
 800eaa2:	020b      	lsls	r3, r1, #8
 800eaa4:	d400      	bmi.n	800eaa8 <__aeabi_dsub+0x80>
 800eaa6:	e147      	b.n	800ed38 <__aeabi_dsub+0x310>
 800eaa8:	0249      	lsls	r1, r1, #9
 800eaaa:	0a4b      	lsrs	r3, r1, #9
 800eaac:	4698      	mov	r8, r3
 800eaae:	4643      	mov	r3, r8
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d100      	bne.n	800eab6 <__aeabi_dsub+0x8e>
 800eab4:	e189      	b.n	800edca <__aeabi_dsub+0x3a2>
 800eab6:	4640      	mov	r0, r8
 800eab8:	f7fe f974 	bl	800cda4 <__clzsi2>
 800eabc:	0003      	movs	r3, r0
 800eabe:	3b08      	subs	r3, #8
 800eac0:	2b1f      	cmp	r3, #31
 800eac2:	dd00      	ble.n	800eac6 <__aeabi_dsub+0x9e>
 800eac4:	e17c      	b.n	800edc0 <__aeabi_dsub+0x398>
 800eac6:	2220      	movs	r2, #32
 800eac8:	0030      	movs	r0, r6
 800eaca:	1ad2      	subs	r2, r2, r3
 800eacc:	4641      	mov	r1, r8
 800eace:	40d0      	lsrs	r0, r2
 800ead0:	4099      	lsls	r1, r3
 800ead2:	0002      	movs	r2, r0
 800ead4:	409e      	lsls	r6, r3
 800ead6:	430a      	orrs	r2, r1
 800ead8:	429d      	cmp	r5, r3
 800eada:	dd00      	ble.n	800eade <__aeabi_dsub+0xb6>
 800eadc:	e16a      	b.n	800edb4 <__aeabi_dsub+0x38c>
 800eade:	1b5d      	subs	r5, r3, r5
 800eae0:	1c6b      	adds	r3, r5, #1
 800eae2:	2b1f      	cmp	r3, #31
 800eae4:	dd00      	ble.n	800eae8 <__aeabi_dsub+0xc0>
 800eae6:	e194      	b.n	800ee12 <__aeabi_dsub+0x3ea>
 800eae8:	2120      	movs	r1, #32
 800eaea:	0010      	movs	r0, r2
 800eaec:	0035      	movs	r5, r6
 800eaee:	1ac9      	subs	r1, r1, r3
 800eaf0:	408e      	lsls	r6, r1
 800eaf2:	40da      	lsrs	r2, r3
 800eaf4:	4088      	lsls	r0, r1
 800eaf6:	40dd      	lsrs	r5, r3
 800eaf8:	1e71      	subs	r1, r6, #1
 800eafa:	418e      	sbcs	r6, r1
 800eafc:	0011      	movs	r1, r2
 800eafe:	2207      	movs	r2, #7
 800eb00:	4328      	orrs	r0, r5
 800eb02:	2500      	movs	r5, #0
 800eb04:	4306      	orrs	r6, r0
 800eb06:	4032      	ands	r2, r6
 800eb08:	2a00      	cmp	r2, #0
 800eb0a:	d009      	beq.n	800eb20 <__aeabi_dsub+0xf8>
 800eb0c:	230f      	movs	r3, #15
 800eb0e:	4033      	ands	r3, r6
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	d005      	beq.n	800eb20 <__aeabi_dsub+0xf8>
 800eb14:	1d33      	adds	r3, r6, #4
 800eb16:	42b3      	cmp	r3, r6
 800eb18:	41b6      	sbcs	r6, r6
 800eb1a:	4276      	negs	r6, r6
 800eb1c:	1989      	adds	r1, r1, r6
 800eb1e:	001e      	movs	r6, r3
 800eb20:	020b      	lsls	r3, r1, #8
 800eb22:	d400      	bmi.n	800eb26 <__aeabi_dsub+0xfe>
 800eb24:	e23d      	b.n	800efa2 <__aeabi_dsub+0x57a>
 800eb26:	1c6a      	adds	r2, r5, #1
 800eb28:	4b91      	ldr	r3, [pc, #580]	; (800ed70 <__aeabi_dsub+0x348>)
 800eb2a:	0555      	lsls	r5, r2, #21
 800eb2c:	0d6d      	lsrs	r5, r5, #21
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d100      	bne.n	800eb34 <__aeabi_dsub+0x10c>
 800eb32:	e119      	b.n	800ed68 <__aeabi_dsub+0x340>
 800eb34:	4a8f      	ldr	r2, [pc, #572]	; (800ed74 <__aeabi_dsub+0x34c>)
 800eb36:	08f6      	lsrs	r6, r6, #3
 800eb38:	400a      	ands	r2, r1
 800eb3a:	0757      	lsls	r7, r2, #29
 800eb3c:	0252      	lsls	r2, r2, #9
 800eb3e:	4337      	orrs	r7, r6
 800eb40:	0b12      	lsrs	r2, r2, #12
 800eb42:	e09b      	b.n	800ec7c <__aeabi_dsub+0x254>
 800eb44:	2e00      	cmp	r6, #0
 800eb46:	d000      	beq.n	800eb4a <__aeabi_dsub+0x122>
 800eb48:	e0c5      	b.n	800ecd6 <__aeabi_dsub+0x2ae>
 800eb4a:	1c6e      	adds	r6, r5, #1
 800eb4c:	0576      	lsls	r6, r6, #21
 800eb4e:	0d76      	lsrs	r6, r6, #21
 800eb50:	2e01      	cmp	r6, #1
 800eb52:	dc00      	bgt.n	800eb56 <__aeabi_dsub+0x12e>
 800eb54:	e148      	b.n	800ede8 <__aeabi_dsub+0x3c0>
 800eb56:	4667      	mov	r7, ip
 800eb58:	1a86      	subs	r6, r0, r2
 800eb5a:	1bcb      	subs	r3, r1, r7
 800eb5c:	42b0      	cmp	r0, r6
 800eb5e:	41bf      	sbcs	r7, r7
 800eb60:	427f      	negs	r7, r7
 800eb62:	46b8      	mov	r8, r7
 800eb64:	001f      	movs	r7, r3
 800eb66:	4643      	mov	r3, r8
 800eb68:	1aff      	subs	r7, r7, r3
 800eb6a:	003b      	movs	r3, r7
 800eb6c:	46b8      	mov	r8, r7
 800eb6e:	021b      	lsls	r3, r3, #8
 800eb70:	d500      	bpl.n	800eb74 <__aeabi_dsub+0x14c>
 800eb72:	e15f      	b.n	800ee34 <__aeabi_dsub+0x40c>
 800eb74:	4337      	orrs	r7, r6
 800eb76:	d19a      	bne.n	800eaae <__aeabi_dsub+0x86>
 800eb78:	2200      	movs	r2, #0
 800eb7a:	2400      	movs	r4, #0
 800eb7c:	2500      	movs	r5, #0
 800eb7e:	e079      	b.n	800ec74 <__aeabi_dsub+0x24c>
 800eb80:	2e00      	cmp	r6, #0
 800eb82:	dc00      	bgt.n	800eb86 <__aeabi_dsub+0x15e>
 800eb84:	e0fa      	b.n	800ed7c <__aeabi_dsub+0x354>
 800eb86:	2f00      	cmp	r7, #0
 800eb88:	d100      	bne.n	800eb8c <__aeabi_dsub+0x164>
 800eb8a:	e08d      	b.n	800eca8 <__aeabi_dsub+0x280>
 800eb8c:	4b78      	ldr	r3, [pc, #480]	; (800ed70 <__aeabi_dsub+0x348>)
 800eb8e:	429d      	cmp	r5, r3
 800eb90:	d067      	beq.n	800ec62 <__aeabi_dsub+0x23a>
 800eb92:	2380      	movs	r3, #128	; 0x80
 800eb94:	4667      	mov	r7, ip
 800eb96:	041b      	lsls	r3, r3, #16
 800eb98:	431f      	orrs	r7, r3
 800eb9a:	46bc      	mov	ip, r7
 800eb9c:	2e38      	cmp	r6, #56	; 0x38
 800eb9e:	dc00      	bgt.n	800eba2 <__aeabi_dsub+0x17a>
 800eba0:	e152      	b.n	800ee48 <__aeabi_dsub+0x420>
 800eba2:	4663      	mov	r3, ip
 800eba4:	4313      	orrs	r3, r2
 800eba6:	1e5a      	subs	r2, r3, #1
 800eba8:	4193      	sbcs	r3, r2
 800ebaa:	181e      	adds	r6, r3, r0
 800ebac:	4286      	cmp	r6, r0
 800ebae:	4180      	sbcs	r0, r0
 800ebb0:	4240      	negs	r0, r0
 800ebb2:	1809      	adds	r1, r1, r0
 800ebb4:	020b      	lsls	r3, r1, #8
 800ebb6:	d400      	bmi.n	800ebba <__aeabi_dsub+0x192>
 800ebb8:	e0be      	b.n	800ed38 <__aeabi_dsub+0x310>
 800ebba:	4b6d      	ldr	r3, [pc, #436]	; (800ed70 <__aeabi_dsub+0x348>)
 800ebbc:	3501      	adds	r5, #1
 800ebbe:	429d      	cmp	r5, r3
 800ebc0:	d100      	bne.n	800ebc4 <__aeabi_dsub+0x19c>
 800ebc2:	e0d2      	b.n	800ed6a <__aeabi_dsub+0x342>
 800ebc4:	4a6b      	ldr	r2, [pc, #428]	; (800ed74 <__aeabi_dsub+0x34c>)
 800ebc6:	0873      	lsrs	r3, r6, #1
 800ebc8:	400a      	ands	r2, r1
 800ebca:	2101      	movs	r1, #1
 800ebcc:	400e      	ands	r6, r1
 800ebce:	431e      	orrs	r6, r3
 800ebd0:	0851      	lsrs	r1, r2, #1
 800ebd2:	07d3      	lsls	r3, r2, #31
 800ebd4:	2207      	movs	r2, #7
 800ebd6:	431e      	orrs	r6, r3
 800ebd8:	4032      	ands	r2, r6
 800ebda:	e795      	b.n	800eb08 <__aeabi_dsub+0xe0>
 800ebdc:	001e      	movs	r6, r3
 800ebde:	4316      	orrs	r6, r2
 800ebe0:	d000      	beq.n	800ebe4 <__aeabi_dsub+0x1bc>
 800ebe2:	e745      	b.n	800ea70 <__aeabi_dsub+0x48>
 800ebe4:	e740      	b.n	800ea68 <__aeabi_dsub+0x40>
 800ebe6:	4b62      	ldr	r3, [pc, #392]	; (800ed70 <__aeabi_dsub+0x348>)
 800ebe8:	429d      	cmp	r5, r3
 800ebea:	d03a      	beq.n	800ec62 <__aeabi_dsub+0x23a>
 800ebec:	2380      	movs	r3, #128	; 0x80
 800ebee:	4667      	mov	r7, ip
 800ebf0:	041b      	lsls	r3, r3, #16
 800ebf2:	431f      	orrs	r7, r3
 800ebf4:	46bc      	mov	ip, r7
 800ebf6:	2e38      	cmp	r6, #56	; 0x38
 800ebf8:	dd00      	ble.n	800ebfc <__aeabi_dsub+0x1d4>
 800ebfa:	e0eb      	b.n	800edd4 <__aeabi_dsub+0x3ac>
 800ebfc:	2e1f      	cmp	r6, #31
 800ebfe:	dc00      	bgt.n	800ec02 <__aeabi_dsub+0x1da>
 800ec00:	e13a      	b.n	800ee78 <__aeabi_dsub+0x450>
 800ec02:	0033      	movs	r3, r6
 800ec04:	4667      	mov	r7, ip
 800ec06:	3b20      	subs	r3, #32
 800ec08:	40df      	lsrs	r7, r3
 800ec0a:	003b      	movs	r3, r7
 800ec0c:	2e20      	cmp	r6, #32
 800ec0e:	d005      	beq.n	800ec1c <__aeabi_dsub+0x1f4>
 800ec10:	2740      	movs	r7, #64	; 0x40
 800ec12:	1bbf      	subs	r7, r7, r6
 800ec14:	4666      	mov	r6, ip
 800ec16:	40be      	lsls	r6, r7
 800ec18:	4332      	orrs	r2, r6
 800ec1a:	4690      	mov	r8, r2
 800ec1c:	4646      	mov	r6, r8
 800ec1e:	1e72      	subs	r2, r6, #1
 800ec20:	4196      	sbcs	r6, r2
 800ec22:	4333      	orrs	r3, r6
 800ec24:	e0da      	b.n	800eddc <__aeabi_dsub+0x3b4>
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d100      	bne.n	800ec2c <__aeabi_dsub+0x204>
 800ec2a:	e214      	b.n	800f056 <__aeabi_dsub+0x62e>
 800ec2c:	4663      	mov	r3, ip
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	d100      	bne.n	800ec34 <__aeabi_dsub+0x20c>
 800ec32:	e168      	b.n	800ef06 <__aeabi_dsub+0x4de>
 800ec34:	2380      	movs	r3, #128	; 0x80
 800ec36:	074e      	lsls	r6, r1, #29
 800ec38:	08c0      	lsrs	r0, r0, #3
 800ec3a:	08c9      	lsrs	r1, r1, #3
 800ec3c:	031b      	lsls	r3, r3, #12
 800ec3e:	4306      	orrs	r6, r0
 800ec40:	4219      	tst	r1, r3
 800ec42:	d008      	beq.n	800ec56 <__aeabi_dsub+0x22e>
 800ec44:	4660      	mov	r0, ip
 800ec46:	08c0      	lsrs	r0, r0, #3
 800ec48:	4218      	tst	r0, r3
 800ec4a:	d104      	bne.n	800ec56 <__aeabi_dsub+0x22e>
 800ec4c:	4663      	mov	r3, ip
 800ec4e:	0001      	movs	r1, r0
 800ec50:	08d2      	lsrs	r2, r2, #3
 800ec52:	075e      	lsls	r6, r3, #29
 800ec54:	4316      	orrs	r6, r2
 800ec56:	00f3      	lsls	r3, r6, #3
 800ec58:	4699      	mov	r9, r3
 800ec5a:	00c9      	lsls	r1, r1, #3
 800ec5c:	0f72      	lsrs	r2, r6, #29
 800ec5e:	4d44      	ldr	r5, [pc, #272]	; (800ed70 <__aeabi_dsub+0x348>)
 800ec60:	4311      	orrs	r1, r2
 800ec62:	464b      	mov	r3, r9
 800ec64:	08de      	lsrs	r6, r3, #3
 800ec66:	4b42      	ldr	r3, [pc, #264]	; (800ed70 <__aeabi_dsub+0x348>)
 800ec68:	074f      	lsls	r7, r1, #29
 800ec6a:	4337      	orrs	r7, r6
 800ec6c:	08ca      	lsrs	r2, r1, #3
 800ec6e:	429d      	cmp	r5, r3
 800ec70:	d100      	bne.n	800ec74 <__aeabi_dsub+0x24c>
 800ec72:	e06e      	b.n	800ed52 <__aeabi_dsub+0x32a>
 800ec74:	0312      	lsls	r2, r2, #12
 800ec76:	056d      	lsls	r5, r5, #21
 800ec78:	0b12      	lsrs	r2, r2, #12
 800ec7a:	0d6d      	lsrs	r5, r5, #21
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	0312      	lsls	r2, r2, #12
 800ec80:	0b13      	lsrs	r3, r2, #12
 800ec82:	0d0a      	lsrs	r2, r1, #20
 800ec84:	0512      	lsls	r2, r2, #20
 800ec86:	431a      	orrs	r2, r3
 800ec88:	4b3b      	ldr	r3, [pc, #236]	; (800ed78 <__aeabi_dsub+0x350>)
 800ec8a:	052d      	lsls	r5, r5, #20
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	432b      	orrs	r3, r5
 800ec90:	005b      	lsls	r3, r3, #1
 800ec92:	07e4      	lsls	r4, r4, #31
 800ec94:	085b      	lsrs	r3, r3, #1
 800ec96:	4323      	orrs	r3, r4
 800ec98:	0038      	movs	r0, r7
 800ec9a:	0019      	movs	r1, r3
 800ec9c:	bc3c      	pop	{r2, r3, r4, r5}
 800ec9e:	4690      	mov	r8, r2
 800eca0:	4699      	mov	r9, r3
 800eca2:	46a2      	mov	sl, r4
 800eca4:	46ab      	mov	fp, r5
 800eca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eca8:	4663      	mov	r3, ip
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	d011      	beq.n	800ecd2 <__aeabi_dsub+0x2aa>
 800ecae:	1e73      	subs	r3, r6, #1
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d000      	beq.n	800ecb6 <__aeabi_dsub+0x28e>
 800ecb4:	e107      	b.n	800eec6 <__aeabi_dsub+0x49e>
 800ecb6:	1886      	adds	r6, r0, r2
 800ecb8:	4286      	cmp	r6, r0
 800ecba:	4180      	sbcs	r0, r0
 800ecbc:	4461      	add	r1, ip
 800ecbe:	4240      	negs	r0, r0
 800ecc0:	1809      	adds	r1, r1, r0
 800ecc2:	2501      	movs	r5, #1
 800ecc4:	020b      	lsls	r3, r1, #8
 800ecc6:	d537      	bpl.n	800ed38 <__aeabi_dsub+0x310>
 800ecc8:	2502      	movs	r5, #2
 800ecca:	e77b      	b.n	800ebc4 <__aeabi_dsub+0x19c>
 800eccc:	003e      	movs	r6, r7
 800ecce:	4661      	mov	r1, ip
 800ecd0:	4691      	mov	r9, r2
 800ecd2:	0035      	movs	r5, r6
 800ecd4:	e7c5      	b.n	800ec62 <__aeabi_dsub+0x23a>
 800ecd6:	465c      	mov	r4, fp
 800ecd8:	2d00      	cmp	r5, #0
 800ecda:	d000      	beq.n	800ecde <__aeabi_dsub+0x2b6>
 800ecdc:	e0e1      	b.n	800eea2 <__aeabi_dsub+0x47a>
 800ecde:	000b      	movs	r3, r1
 800ece0:	4303      	orrs	r3, r0
 800ece2:	d0f3      	beq.n	800eccc <__aeabi_dsub+0x2a4>
 800ece4:	1c73      	adds	r3, r6, #1
 800ece6:	d100      	bne.n	800ecea <__aeabi_dsub+0x2c2>
 800ece8:	e1ac      	b.n	800f044 <__aeabi_dsub+0x61c>
 800ecea:	4b21      	ldr	r3, [pc, #132]	; (800ed70 <__aeabi_dsub+0x348>)
 800ecec:	429f      	cmp	r7, r3
 800ecee:	d100      	bne.n	800ecf2 <__aeabi_dsub+0x2ca>
 800ecf0:	e13a      	b.n	800ef68 <__aeabi_dsub+0x540>
 800ecf2:	43f3      	mvns	r3, r6
 800ecf4:	2b38      	cmp	r3, #56	; 0x38
 800ecf6:	dd00      	ble.n	800ecfa <__aeabi_dsub+0x2d2>
 800ecf8:	e16f      	b.n	800efda <__aeabi_dsub+0x5b2>
 800ecfa:	2b1f      	cmp	r3, #31
 800ecfc:	dd00      	ble.n	800ed00 <__aeabi_dsub+0x2d8>
 800ecfe:	e18c      	b.n	800f01a <__aeabi_dsub+0x5f2>
 800ed00:	2520      	movs	r5, #32
 800ed02:	000e      	movs	r6, r1
 800ed04:	1aed      	subs	r5, r5, r3
 800ed06:	40ae      	lsls	r6, r5
 800ed08:	46b0      	mov	r8, r6
 800ed0a:	0006      	movs	r6, r0
 800ed0c:	46aa      	mov	sl, r5
 800ed0e:	40de      	lsrs	r6, r3
 800ed10:	4645      	mov	r5, r8
 800ed12:	4335      	orrs	r5, r6
 800ed14:	002e      	movs	r6, r5
 800ed16:	4655      	mov	r5, sl
 800ed18:	40d9      	lsrs	r1, r3
 800ed1a:	40a8      	lsls	r0, r5
 800ed1c:	4663      	mov	r3, ip
 800ed1e:	1e45      	subs	r5, r0, #1
 800ed20:	41a8      	sbcs	r0, r5
 800ed22:	1a5b      	subs	r3, r3, r1
 800ed24:	469c      	mov	ip, r3
 800ed26:	4330      	orrs	r0, r6
 800ed28:	1a16      	subs	r6, r2, r0
 800ed2a:	42b2      	cmp	r2, r6
 800ed2c:	4192      	sbcs	r2, r2
 800ed2e:	4663      	mov	r3, ip
 800ed30:	4252      	negs	r2, r2
 800ed32:	1a99      	subs	r1, r3, r2
 800ed34:	003d      	movs	r5, r7
 800ed36:	e6b4      	b.n	800eaa2 <__aeabi_dsub+0x7a>
 800ed38:	2207      	movs	r2, #7
 800ed3a:	4032      	ands	r2, r6
 800ed3c:	2a00      	cmp	r2, #0
 800ed3e:	d000      	beq.n	800ed42 <__aeabi_dsub+0x31a>
 800ed40:	e6e4      	b.n	800eb0c <__aeabi_dsub+0xe4>
 800ed42:	4b0b      	ldr	r3, [pc, #44]	; (800ed70 <__aeabi_dsub+0x348>)
 800ed44:	08f6      	lsrs	r6, r6, #3
 800ed46:	074f      	lsls	r7, r1, #29
 800ed48:	4337      	orrs	r7, r6
 800ed4a:	08ca      	lsrs	r2, r1, #3
 800ed4c:	429d      	cmp	r5, r3
 800ed4e:	d000      	beq.n	800ed52 <__aeabi_dsub+0x32a>
 800ed50:	e790      	b.n	800ec74 <__aeabi_dsub+0x24c>
 800ed52:	003b      	movs	r3, r7
 800ed54:	4313      	orrs	r3, r2
 800ed56:	d100      	bne.n	800ed5a <__aeabi_dsub+0x332>
 800ed58:	e1a6      	b.n	800f0a8 <__aeabi_dsub+0x680>
 800ed5a:	2380      	movs	r3, #128	; 0x80
 800ed5c:	031b      	lsls	r3, r3, #12
 800ed5e:	431a      	orrs	r2, r3
 800ed60:	0312      	lsls	r2, r2, #12
 800ed62:	0b12      	lsrs	r2, r2, #12
 800ed64:	4d02      	ldr	r5, [pc, #8]	; (800ed70 <__aeabi_dsub+0x348>)
 800ed66:	e789      	b.n	800ec7c <__aeabi_dsub+0x254>
 800ed68:	0015      	movs	r5, r2
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	2700      	movs	r7, #0
 800ed6e:	e785      	b.n	800ec7c <__aeabi_dsub+0x254>
 800ed70:	000007ff 	.word	0x000007ff
 800ed74:	ff7fffff 	.word	0xff7fffff
 800ed78:	800fffff 	.word	0x800fffff
 800ed7c:	2e00      	cmp	r6, #0
 800ed7e:	d000      	beq.n	800ed82 <__aeabi_dsub+0x35a>
 800ed80:	e0c7      	b.n	800ef12 <__aeabi_dsub+0x4ea>
 800ed82:	1c6b      	adds	r3, r5, #1
 800ed84:	055e      	lsls	r6, r3, #21
 800ed86:	0d76      	lsrs	r6, r6, #21
 800ed88:	2e01      	cmp	r6, #1
 800ed8a:	dc00      	bgt.n	800ed8e <__aeabi_dsub+0x366>
 800ed8c:	e0f0      	b.n	800ef70 <__aeabi_dsub+0x548>
 800ed8e:	4dc8      	ldr	r5, [pc, #800]	; (800f0b0 <__aeabi_dsub+0x688>)
 800ed90:	42ab      	cmp	r3, r5
 800ed92:	d100      	bne.n	800ed96 <__aeabi_dsub+0x36e>
 800ed94:	e0b9      	b.n	800ef0a <__aeabi_dsub+0x4e2>
 800ed96:	1885      	adds	r5, r0, r2
 800ed98:	000a      	movs	r2, r1
 800ed9a:	4285      	cmp	r5, r0
 800ed9c:	4189      	sbcs	r1, r1
 800ed9e:	4462      	add	r2, ip
 800eda0:	4249      	negs	r1, r1
 800eda2:	1851      	adds	r1, r2, r1
 800eda4:	2207      	movs	r2, #7
 800eda6:	07ce      	lsls	r6, r1, #31
 800eda8:	086d      	lsrs	r5, r5, #1
 800edaa:	432e      	orrs	r6, r5
 800edac:	0849      	lsrs	r1, r1, #1
 800edae:	4032      	ands	r2, r6
 800edb0:	001d      	movs	r5, r3
 800edb2:	e6a9      	b.n	800eb08 <__aeabi_dsub+0xe0>
 800edb4:	49bf      	ldr	r1, [pc, #764]	; (800f0b4 <__aeabi_dsub+0x68c>)
 800edb6:	1aed      	subs	r5, r5, r3
 800edb8:	4011      	ands	r1, r2
 800edba:	2207      	movs	r2, #7
 800edbc:	4032      	ands	r2, r6
 800edbe:	e6a3      	b.n	800eb08 <__aeabi_dsub+0xe0>
 800edc0:	0032      	movs	r2, r6
 800edc2:	3828      	subs	r0, #40	; 0x28
 800edc4:	4082      	lsls	r2, r0
 800edc6:	2600      	movs	r6, #0
 800edc8:	e686      	b.n	800ead8 <__aeabi_dsub+0xb0>
 800edca:	0030      	movs	r0, r6
 800edcc:	f7fd ffea 	bl	800cda4 <__clzsi2>
 800edd0:	3020      	adds	r0, #32
 800edd2:	e673      	b.n	800eabc <__aeabi_dsub+0x94>
 800edd4:	4663      	mov	r3, ip
 800edd6:	4313      	orrs	r3, r2
 800edd8:	1e5a      	subs	r2, r3, #1
 800edda:	4193      	sbcs	r3, r2
 800eddc:	1ac6      	subs	r6, r0, r3
 800edde:	42b0      	cmp	r0, r6
 800ede0:	4180      	sbcs	r0, r0
 800ede2:	4240      	negs	r0, r0
 800ede4:	1a09      	subs	r1, r1, r0
 800ede6:	e65c      	b.n	800eaa2 <__aeabi_dsub+0x7a>
 800ede8:	000e      	movs	r6, r1
 800edea:	4667      	mov	r7, ip
 800edec:	4306      	orrs	r6, r0
 800edee:	4317      	orrs	r7, r2
 800edf0:	2d00      	cmp	r5, #0
 800edf2:	d15e      	bne.n	800eeb2 <__aeabi_dsub+0x48a>
 800edf4:	2e00      	cmp	r6, #0
 800edf6:	d000      	beq.n	800edfa <__aeabi_dsub+0x3d2>
 800edf8:	e0f3      	b.n	800efe2 <__aeabi_dsub+0x5ba>
 800edfa:	2f00      	cmp	r7, #0
 800edfc:	d100      	bne.n	800ee00 <__aeabi_dsub+0x3d8>
 800edfe:	e11e      	b.n	800f03e <__aeabi_dsub+0x616>
 800ee00:	465c      	mov	r4, fp
 800ee02:	4661      	mov	r1, ip
 800ee04:	4691      	mov	r9, r2
 800ee06:	e72c      	b.n	800ec62 <__aeabi_dsub+0x23a>
 800ee08:	4fa9      	ldr	r7, [pc, #676]	; (800f0b0 <__aeabi_dsub+0x688>)
 800ee0a:	42be      	cmp	r6, r7
 800ee0c:	d07b      	beq.n	800ef06 <__aeabi_dsub+0x4de>
 800ee0e:	001e      	movs	r6, r3
 800ee10:	e6f1      	b.n	800ebf6 <__aeabi_dsub+0x1ce>
 800ee12:	0010      	movs	r0, r2
 800ee14:	3d1f      	subs	r5, #31
 800ee16:	40e8      	lsrs	r0, r5
 800ee18:	2b20      	cmp	r3, #32
 800ee1a:	d003      	beq.n	800ee24 <__aeabi_dsub+0x3fc>
 800ee1c:	2140      	movs	r1, #64	; 0x40
 800ee1e:	1acb      	subs	r3, r1, r3
 800ee20:	409a      	lsls	r2, r3
 800ee22:	4316      	orrs	r6, r2
 800ee24:	1e73      	subs	r3, r6, #1
 800ee26:	419e      	sbcs	r6, r3
 800ee28:	2207      	movs	r2, #7
 800ee2a:	4306      	orrs	r6, r0
 800ee2c:	4032      	ands	r2, r6
 800ee2e:	2100      	movs	r1, #0
 800ee30:	2500      	movs	r5, #0
 800ee32:	e783      	b.n	800ed3c <__aeabi_dsub+0x314>
 800ee34:	1a16      	subs	r6, r2, r0
 800ee36:	4663      	mov	r3, ip
 800ee38:	42b2      	cmp	r2, r6
 800ee3a:	4180      	sbcs	r0, r0
 800ee3c:	1a59      	subs	r1, r3, r1
 800ee3e:	4240      	negs	r0, r0
 800ee40:	1a0b      	subs	r3, r1, r0
 800ee42:	4698      	mov	r8, r3
 800ee44:	465c      	mov	r4, fp
 800ee46:	e632      	b.n	800eaae <__aeabi_dsub+0x86>
 800ee48:	2e1f      	cmp	r6, #31
 800ee4a:	dd00      	ble.n	800ee4e <__aeabi_dsub+0x426>
 800ee4c:	e0ab      	b.n	800efa6 <__aeabi_dsub+0x57e>
 800ee4e:	2720      	movs	r7, #32
 800ee50:	1bbb      	subs	r3, r7, r6
 800ee52:	469a      	mov	sl, r3
 800ee54:	4663      	mov	r3, ip
 800ee56:	4657      	mov	r7, sl
 800ee58:	40bb      	lsls	r3, r7
 800ee5a:	4699      	mov	r9, r3
 800ee5c:	0013      	movs	r3, r2
 800ee5e:	464f      	mov	r7, r9
 800ee60:	40f3      	lsrs	r3, r6
 800ee62:	431f      	orrs	r7, r3
 800ee64:	003b      	movs	r3, r7
 800ee66:	4657      	mov	r7, sl
 800ee68:	40ba      	lsls	r2, r7
 800ee6a:	1e57      	subs	r7, r2, #1
 800ee6c:	41ba      	sbcs	r2, r7
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	4662      	mov	r2, ip
 800ee72:	40f2      	lsrs	r2, r6
 800ee74:	1889      	adds	r1, r1, r2
 800ee76:	e698      	b.n	800ebaa <__aeabi_dsub+0x182>
 800ee78:	2720      	movs	r7, #32
 800ee7a:	1bbb      	subs	r3, r7, r6
 800ee7c:	469a      	mov	sl, r3
 800ee7e:	4663      	mov	r3, ip
 800ee80:	4657      	mov	r7, sl
 800ee82:	40bb      	lsls	r3, r7
 800ee84:	4699      	mov	r9, r3
 800ee86:	0013      	movs	r3, r2
 800ee88:	464f      	mov	r7, r9
 800ee8a:	40f3      	lsrs	r3, r6
 800ee8c:	431f      	orrs	r7, r3
 800ee8e:	003b      	movs	r3, r7
 800ee90:	4657      	mov	r7, sl
 800ee92:	40ba      	lsls	r2, r7
 800ee94:	1e57      	subs	r7, r2, #1
 800ee96:	41ba      	sbcs	r2, r7
 800ee98:	4313      	orrs	r3, r2
 800ee9a:	4662      	mov	r2, ip
 800ee9c:	40f2      	lsrs	r2, r6
 800ee9e:	1a89      	subs	r1, r1, r2
 800eea0:	e79c      	b.n	800eddc <__aeabi_dsub+0x3b4>
 800eea2:	4b83      	ldr	r3, [pc, #524]	; (800f0b0 <__aeabi_dsub+0x688>)
 800eea4:	429f      	cmp	r7, r3
 800eea6:	d05f      	beq.n	800ef68 <__aeabi_dsub+0x540>
 800eea8:	2580      	movs	r5, #128	; 0x80
 800eeaa:	042d      	lsls	r5, r5, #16
 800eeac:	4273      	negs	r3, r6
 800eeae:	4329      	orrs	r1, r5
 800eeb0:	e720      	b.n	800ecf4 <__aeabi_dsub+0x2cc>
 800eeb2:	2e00      	cmp	r6, #0
 800eeb4:	d10c      	bne.n	800eed0 <__aeabi_dsub+0x4a8>
 800eeb6:	2f00      	cmp	r7, #0
 800eeb8:	d100      	bne.n	800eebc <__aeabi_dsub+0x494>
 800eeba:	e0d0      	b.n	800f05e <__aeabi_dsub+0x636>
 800eebc:	465c      	mov	r4, fp
 800eebe:	4661      	mov	r1, ip
 800eec0:	4691      	mov	r9, r2
 800eec2:	4d7b      	ldr	r5, [pc, #492]	; (800f0b0 <__aeabi_dsub+0x688>)
 800eec4:	e6cd      	b.n	800ec62 <__aeabi_dsub+0x23a>
 800eec6:	4f7a      	ldr	r7, [pc, #488]	; (800f0b0 <__aeabi_dsub+0x688>)
 800eec8:	42be      	cmp	r6, r7
 800eeca:	d01c      	beq.n	800ef06 <__aeabi_dsub+0x4de>
 800eecc:	001e      	movs	r6, r3
 800eece:	e665      	b.n	800eb9c <__aeabi_dsub+0x174>
 800eed0:	2f00      	cmp	r7, #0
 800eed2:	d018      	beq.n	800ef06 <__aeabi_dsub+0x4de>
 800eed4:	08c0      	lsrs	r0, r0, #3
 800eed6:	074e      	lsls	r6, r1, #29
 800eed8:	4306      	orrs	r6, r0
 800eeda:	2080      	movs	r0, #128	; 0x80
 800eedc:	08c9      	lsrs	r1, r1, #3
 800eede:	0300      	lsls	r0, r0, #12
 800eee0:	4201      	tst	r1, r0
 800eee2:	d008      	beq.n	800eef6 <__aeabi_dsub+0x4ce>
 800eee4:	4663      	mov	r3, ip
 800eee6:	08dc      	lsrs	r4, r3, #3
 800eee8:	4204      	tst	r4, r0
 800eeea:	d104      	bne.n	800eef6 <__aeabi_dsub+0x4ce>
 800eeec:	0021      	movs	r1, r4
 800eeee:	46da      	mov	sl, fp
 800eef0:	08d2      	lsrs	r2, r2, #3
 800eef2:	075e      	lsls	r6, r3, #29
 800eef4:	4316      	orrs	r6, r2
 800eef6:	00f3      	lsls	r3, r6, #3
 800eef8:	4699      	mov	r9, r3
 800eefa:	2401      	movs	r4, #1
 800eefc:	4653      	mov	r3, sl
 800eefe:	00c9      	lsls	r1, r1, #3
 800ef00:	0f72      	lsrs	r2, r6, #29
 800ef02:	4311      	orrs	r1, r2
 800ef04:	401c      	ands	r4, r3
 800ef06:	4d6a      	ldr	r5, [pc, #424]	; (800f0b0 <__aeabi_dsub+0x688>)
 800ef08:	e6ab      	b.n	800ec62 <__aeabi_dsub+0x23a>
 800ef0a:	001d      	movs	r5, r3
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	2700      	movs	r7, #0
 800ef10:	e6b4      	b.n	800ec7c <__aeabi_dsub+0x254>
 800ef12:	2d00      	cmp	r5, #0
 800ef14:	d159      	bne.n	800efca <__aeabi_dsub+0x5a2>
 800ef16:	000b      	movs	r3, r1
 800ef18:	4303      	orrs	r3, r0
 800ef1a:	d100      	bne.n	800ef1e <__aeabi_dsub+0x4f6>
 800ef1c:	e6d6      	b.n	800eccc <__aeabi_dsub+0x2a4>
 800ef1e:	1c73      	adds	r3, r6, #1
 800ef20:	d100      	bne.n	800ef24 <__aeabi_dsub+0x4fc>
 800ef22:	e0b2      	b.n	800f08a <__aeabi_dsub+0x662>
 800ef24:	4b62      	ldr	r3, [pc, #392]	; (800f0b0 <__aeabi_dsub+0x688>)
 800ef26:	429f      	cmp	r7, r3
 800ef28:	d01e      	beq.n	800ef68 <__aeabi_dsub+0x540>
 800ef2a:	43f3      	mvns	r3, r6
 800ef2c:	2b38      	cmp	r3, #56	; 0x38
 800ef2e:	dc6f      	bgt.n	800f010 <__aeabi_dsub+0x5e8>
 800ef30:	2b1f      	cmp	r3, #31
 800ef32:	dd00      	ble.n	800ef36 <__aeabi_dsub+0x50e>
 800ef34:	e097      	b.n	800f066 <__aeabi_dsub+0x63e>
 800ef36:	2520      	movs	r5, #32
 800ef38:	000e      	movs	r6, r1
 800ef3a:	1aed      	subs	r5, r5, r3
 800ef3c:	40ae      	lsls	r6, r5
 800ef3e:	46b0      	mov	r8, r6
 800ef40:	0006      	movs	r6, r0
 800ef42:	46aa      	mov	sl, r5
 800ef44:	40de      	lsrs	r6, r3
 800ef46:	4645      	mov	r5, r8
 800ef48:	4335      	orrs	r5, r6
 800ef4a:	002e      	movs	r6, r5
 800ef4c:	4655      	mov	r5, sl
 800ef4e:	40a8      	lsls	r0, r5
 800ef50:	40d9      	lsrs	r1, r3
 800ef52:	1e45      	subs	r5, r0, #1
 800ef54:	41a8      	sbcs	r0, r5
 800ef56:	448c      	add	ip, r1
 800ef58:	4306      	orrs	r6, r0
 800ef5a:	18b6      	adds	r6, r6, r2
 800ef5c:	4296      	cmp	r6, r2
 800ef5e:	4192      	sbcs	r2, r2
 800ef60:	4251      	negs	r1, r2
 800ef62:	4461      	add	r1, ip
 800ef64:	003d      	movs	r5, r7
 800ef66:	e625      	b.n	800ebb4 <__aeabi_dsub+0x18c>
 800ef68:	003d      	movs	r5, r7
 800ef6a:	4661      	mov	r1, ip
 800ef6c:	4691      	mov	r9, r2
 800ef6e:	e678      	b.n	800ec62 <__aeabi_dsub+0x23a>
 800ef70:	000b      	movs	r3, r1
 800ef72:	4303      	orrs	r3, r0
 800ef74:	2d00      	cmp	r5, #0
 800ef76:	d000      	beq.n	800ef7a <__aeabi_dsub+0x552>
 800ef78:	e655      	b.n	800ec26 <__aeabi_dsub+0x1fe>
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d0f5      	beq.n	800ef6a <__aeabi_dsub+0x542>
 800ef7e:	4663      	mov	r3, ip
 800ef80:	4313      	orrs	r3, r2
 800ef82:	d100      	bne.n	800ef86 <__aeabi_dsub+0x55e>
 800ef84:	e66d      	b.n	800ec62 <__aeabi_dsub+0x23a>
 800ef86:	1886      	adds	r6, r0, r2
 800ef88:	4286      	cmp	r6, r0
 800ef8a:	4180      	sbcs	r0, r0
 800ef8c:	4461      	add	r1, ip
 800ef8e:	4240      	negs	r0, r0
 800ef90:	1809      	adds	r1, r1, r0
 800ef92:	2200      	movs	r2, #0
 800ef94:	020b      	lsls	r3, r1, #8
 800ef96:	d400      	bmi.n	800ef9a <__aeabi_dsub+0x572>
 800ef98:	e6d0      	b.n	800ed3c <__aeabi_dsub+0x314>
 800ef9a:	4b46      	ldr	r3, [pc, #280]	; (800f0b4 <__aeabi_dsub+0x68c>)
 800ef9c:	3501      	adds	r5, #1
 800ef9e:	4019      	ands	r1, r3
 800efa0:	e5b2      	b.n	800eb08 <__aeabi_dsub+0xe0>
 800efa2:	46b1      	mov	r9, r6
 800efa4:	e65d      	b.n	800ec62 <__aeabi_dsub+0x23a>
 800efa6:	0033      	movs	r3, r6
 800efa8:	4667      	mov	r7, ip
 800efaa:	3b20      	subs	r3, #32
 800efac:	40df      	lsrs	r7, r3
 800efae:	003b      	movs	r3, r7
 800efb0:	2e20      	cmp	r6, #32
 800efb2:	d005      	beq.n	800efc0 <__aeabi_dsub+0x598>
 800efb4:	2740      	movs	r7, #64	; 0x40
 800efb6:	1bbf      	subs	r7, r7, r6
 800efb8:	4666      	mov	r6, ip
 800efba:	40be      	lsls	r6, r7
 800efbc:	4332      	orrs	r2, r6
 800efbe:	4690      	mov	r8, r2
 800efc0:	4646      	mov	r6, r8
 800efc2:	1e72      	subs	r2, r6, #1
 800efc4:	4196      	sbcs	r6, r2
 800efc6:	4333      	orrs	r3, r6
 800efc8:	e5ef      	b.n	800ebaa <__aeabi_dsub+0x182>
 800efca:	4b39      	ldr	r3, [pc, #228]	; (800f0b0 <__aeabi_dsub+0x688>)
 800efcc:	429f      	cmp	r7, r3
 800efce:	d0cb      	beq.n	800ef68 <__aeabi_dsub+0x540>
 800efd0:	2580      	movs	r5, #128	; 0x80
 800efd2:	042d      	lsls	r5, r5, #16
 800efd4:	4273      	negs	r3, r6
 800efd6:	4329      	orrs	r1, r5
 800efd8:	e7a8      	b.n	800ef2c <__aeabi_dsub+0x504>
 800efda:	4308      	orrs	r0, r1
 800efdc:	1e41      	subs	r1, r0, #1
 800efde:	4188      	sbcs	r0, r1
 800efe0:	e6a2      	b.n	800ed28 <__aeabi_dsub+0x300>
 800efe2:	2f00      	cmp	r7, #0
 800efe4:	d100      	bne.n	800efe8 <__aeabi_dsub+0x5c0>
 800efe6:	e63c      	b.n	800ec62 <__aeabi_dsub+0x23a>
 800efe8:	4663      	mov	r3, ip
 800efea:	1a86      	subs	r6, r0, r2
 800efec:	1acf      	subs	r7, r1, r3
 800efee:	42b0      	cmp	r0, r6
 800eff0:	419b      	sbcs	r3, r3
 800eff2:	425b      	negs	r3, r3
 800eff4:	1afb      	subs	r3, r7, r3
 800eff6:	4698      	mov	r8, r3
 800eff8:	021b      	lsls	r3, r3, #8
 800effa:	d54e      	bpl.n	800f09a <__aeabi_dsub+0x672>
 800effc:	1a16      	subs	r6, r2, r0
 800effe:	4663      	mov	r3, ip
 800f000:	42b2      	cmp	r2, r6
 800f002:	4192      	sbcs	r2, r2
 800f004:	1a59      	subs	r1, r3, r1
 800f006:	4252      	negs	r2, r2
 800f008:	1a89      	subs	r1, r1, r2
 800f00a:	465c      	mov	r4, fp
 800f00c:	2200      	movs	r2, #0
 800f00e:	e57b      	b.n	800eb08 <__aeabi_dsub+0xe0>
 800f010:	4301      	orrs	r1, r0
 800f012:	000e      	movs	r6, r1
 800f014:	1e71      	subs	r1, r6, #1
 800f016:	418e      	sbcs	r6, r1
 800f018:	e79f      	b.n	800ef5a <__aeabi_dsub+0x532>
 800f01a:	001d      	movs	r5, r3
 800f01c:	000e      	movs	r6, r1
 800f01e:	3d20      	subs	r5, #32
 800f020:	40ee      	lsrs	r6, r5
 800f022:	46b0      	mov	r8, r6
 800f024:	2b20      	cmp	r3, #32
 800f026:	d004      	beq.n	800f032 <__aeabi_dsub+0x60a>
 800f028:	2540      	movs	r5, #64	; 0x40
 800f02a:	1aeb      	subs	r3, r5, r3
 800f02c:	4099      	lsls	r1, r3
 800f02e:	4308      	orrs	r0, r1
 800f030:	4681      	mov	r9, r0
 800f032:	4648      	mov	r0, r9
 800f034:	4643      	mov	r3, r8
 800f036:	1e41      	subs	r1, r0, #1
 800f038:	4188      	sbcs	r0, r1
 800f03a:	4318      	orrs	r0, r3
 800f03c:	e674      	b.n	800ed28 <__aeabi_dsub+0x300>
 800f03e:	2200      	movs	r2, #0
 800f040:	2400      	movs	r4, #0
 800f042:	e617      	b.n	800ec74 <__aeabi_dsub+0x24c>
 800f044:	1a16      	subs	r6, r2, r0
 800f046:	4663      	mov	r3, ip
 800f048:	42b2      	cmp	r2, r6
 800f04a:	4192      	sbcs	r2, r2
 800f04c:	1a59      	subs	r1, r3, r1
 800f04e:	4252      	negs	r2, r2
 800f050:	1a89      	subs	r1, r1, r2
 800f052:	003d      	movs	r5, r7
 800f054:	e525      	b.n	800eaa2 <__aeabi_dsub+0x7a>
 800f056:	4661      	mov	r1, ip
 800f058:	4691      	mov	r9, r2
 800f05a:	4d15      	ldr	r5, [pc, #84]	; (800f0b0 <__aeabi_dsub+0x688>)
 800f05c:	e601      	b.n	800ec62 <__aeabi_dsub+0x23a>
 800f05e:	2280      	movs	r2, #128	; 0x80
 800f060:	2400      	movs	r4, #0
 800f062:	0312      	lsls	r2, r2, #12
 800f064:	e679      	b.n	800ed5a <__aeabi_dsub+0x332>
 800f066:	001d      	movs	r5, r3
 800f068:	000e      	movs	r6, r1
 800f06a:	3d20      	subs	r5, #32
 800f06c:	40ee      	lsrs	r6, r5
 800f06e:	46b0      	mov	r8, r6
 800f070:	2b20      	cmp	r3, #32
 800f072:	d004      	beq.n	800f07e <__aeabi_dsub+0x656>
 800f074:	2540      	movs	r5, #64	; 0x40
 800f076:	1aeb      	subs	r3, r5, r3
 800f078:	4099      	lsls	r1, r3
 800f07a:	4308      	orrs	r0, r1
 800f07c:	4681      	mov	r9, r0
 800f07e:	464e      	mov	r6, r9
 800f080:	4643      	mov	r3, r8
 800f082:	1e71      	subs	r1, r6, #1
 800f084:	418e      	sbcs	r6, r1
 800f086:	431e      	orrs	r6, r3
 800f088:	e767      	b.n	800ef5a <__aeabi_dsub+0x532>
 800f08a:	1886      	adds	r6, r0, r2
 800f08c:	4296      	cmp	r6, r2
 800f08e:	419b      	sbcs	r3, r3
 800f090:	4461      	add	r1, ip
 800f092:	425b      	negs	r3, r3
 800f094:	18c9      	adds	r1, r1, r3
 800f096:	003d      	movs	r5, r7
 800f098:	e58c      	b.n	800ebb4 <__aeabi_dsub+0x18c>
 800f09a:	4647      	mov	r7, r8
 800f09c:	4337      	orrs	r7, r6
 800f09e:	d0ce      	beq.n	800f03e <__aeabi_dsub+0x616>
 800f0a0:	2207      	movs	r2, #7
 800f0a2:	4641      	mov	r1, r8
 800f0a4:	4032      	ands	r2, r6
 800f0a6:	e649      	b.n	800ed3c <__aeabi_dsub+0x314>
 800f0a8:	2700      	movs	r7, #0
 800f0aa:	003a      	movs	r2, r7
 800f0ac:	e5e6      	b.n	800ec7c <__aeabi_dsub+0x254>
 800f0ae:	46c0      	nop			; (mov r8, r8)
 800f0b0:	000007ff 	.word	0x000007ff
 800f0b4:	ff7fffff 	.word	0xff7fffff

0800f0b8 <__aeabi_dcmpun>:
 800f0b8:	b570      	push	{r4, r5, r6, lr}
 800f0ba:	4e0c      	ldr	r6, [pc, #48]	; (800f0ec <__aeabi_dcmpun+0x34>)
 800f0bc:	030d      	lsls	r5, r1, #12
 800f0be:	031c      	lsls	r4, r3, #12
 800f0c0:	0049      	lsls	r1, r1, #1
 800f0c2:	005b      	lsls	r3, r3, #1
 800f0c4:	0b2d      	lsrs	r5, r5, #12
 800f0c6:	0d49      	lsrs	r1, r1, #21
 800f0c8:	0b24      	lsrs	r4, r4, #12
 800f0ca:	0d5b      	lsrs	r3, r3, #21
 800f0cc:	42b1      	cmp	r1, r6
 800f0ce:	d008      	beq.n	800f0e2 <__aeabi_dcmpun+0x2a>
 800f0d0:	4906      	ldr	r1, [pc, #24]	; (800f0ec <__aeabi_dcmpun+0x34>)
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	428b      	cmp	r3, r1
 800f0d6:	d103      	bne.n	800f0e0 <__aeabi_dcmpun+0x28>
 800f0d8:	4314      	orrs	r4, r2
 800f0da:	0020      	movs	r0, r4
 800f0dc:	1e44      	subs	r4, r0, #1
 800f0de:	41a0      	sbcs	r0, r4
 800f0e0:	bd70      	pop	{r4, r5, r6, pc}
 800f0e2:	4305      	orrs	r5, r0
 800f0e4:	2001      	movs	r0, #1
 800f0e6:	2d00      	cmp	r5, #0
 800f0e8:	d1fa      	bne.n	800f0e0 <__aeabi_dcmpun+0x28>
 800f0ea:	e7f1      	b.n	800f0d0 <__aeabi_dcmpun+0x18>
 800f0ec:	000007ff 	.word	0x000007ff

0800f0f0 <__aeabi_d2iz>:
 800f0f0:	b530      	push	{r4, r5, lr}
 800f0f2:	4d14      	ldr	r5, [pc, #80]	; (800f144 <__aeabi_d2iz+0x54>)
 800f0f4:	030a      	lsls	r2, r1, #12
 800f0f6:	004b      	lsls	r3, r1, #1
 800f0f8:	0b12      	lsrs	r2, r2, #12
 800f0fa:	0d5b      	lsrs	r3, r3, #21
 800f0fc:	0fc9      	lsrs	r1, r1, #31
 800f0fe:	2400      	movs	r4, #0
 800f100:	42ab      	cmp	r3, r5
 800f102:	dd11      	ble.n	800f128 <__aeabi_d2iz+0x38>
 800f104:	4c10      	ldr	r4, [pc, #64]	; (800f148 <__aeabi_d2iz+0x58>)
 800f106:	42a3      	cmp	r3, r4
 800f108:	dc10      	bgt.n	800f12c <__aeabi_d2iz+0x3c>
 800f10a:	2480      	movs	r4, #128	; 0x80
 800f10c:	0364      	lsls	r4, r4, #13
 800f10e:	4322      	orrs	r2, r4
 800f110:	4c0e      	ldr	r4, [pc, #56]	; (800f14c <__aeabi_d2iz+0x5c>)
 800f112:	1ae4      	subs	r4, r4, r3
 800f114:	2c1f      	cmp	r4, #31
 800f116:	dd0c      	ble.n	800f132 <__aeabi_d2iz+0x42>
 800f118:	480d      	ldr	r0, [pc, #52]	; (800f150 <__aeabi_d2iz+0x60>)
 800f11a:	1ac3      	subs	r3, r0, r3
 800f11c:	40da      	lsrs	r2, r3
 800f11e:	0013      	movs	r3, r2
 800f120:	425c      	negs	r4, r3
 800f122:	2900      	cmp	r1, #0
 800f124:	d100      	bne.n	800f128 <__aeabi_d2iz+0x38>
 800f126:	001c      	movs	r4, r3
 800f128:	0020      	movs	r0, r4
 800f12a:	bd30      	pop	{r4, r5, pc}
 800f12c:	4b09      	ldr	r3, [pc, #36]	; (800f154 <__aeabi_d2iz+0x64>)
 800f12e:	18cc      	adds	r4, r1, r3
 800f130:	e7fa      	b.n	800f128 <__aeabi_d2iz+0x38>
 800f132:	4d09      	ldr	r5, [pc, #36]	; (800f158 <__aeabi_d2iz+0x68>)
 800f134:	40e0      	lsrs	r0, r4
 800f136:	46ac      	mov	ip, r5
 800f138:	4463      	add	r3, ip
 800f13a:	409a      	lsls	r2, r3
 800f13c:	0013      	movs	r3, r2
 800f13e:	4303      	orrs	r3, r0
 800f140:	e7ee      	b.n	800f120 <__aeabi_d2iz+0x30>
 800f142:	46c0      	nop			; (mov r8, r8)
 800f144:	000003fe 	.word	0x000003fe
 800f148:	0000041d 	.word	0x0000041d
 800f14c:	00000433 	.word	0x00000433
 800f150:	00000413 	.word	0x00000413
 800f154:	7fffffff 	.word	0x7fffffff
 800f158:	fffffbed 	.word	0xfffffbed

0800f15c <__aeabi_i2d>:
 800f15c:	b570      	push	{r4, r5, r6, lr}
 800f15e:	2800      	cmp	r0, #0
 800f160:	d02d      	beq.n	800f1be <__aeabi_i2d+0x62>
 800f162:	17c3      	asrs	r3, r0, #31
 800f164:	18c5      	adds	r5, r0, r3
 800f166:	405d      	eors	r5, r3
 800f168:	0fc4      	lsrs	r4, r0, #31
 800f16a:	0028      	movs	r0, r5
 800f16c:	f7fd fe1a 	bl	800cda4 <__clzsi2>
 800f170:	4b15      	ldr	r3, [pc, #84]	; (800f1c8 <__aeabi_i2d+0x6c>)
 800f172:	1a1b      	subs	r3, r3, r0
 800f174:	055b      	lsls	r3, r3, #21
 800f176:	0d5b      	lsrs	r3, r3, #21
 800f178:	280a      	cmp	r0, #10
 800f17a:	dd15      	ble.n	800f1a8 <__aeabi_i2d+0x4c>
 800f17c:	380b      	subs	r0, #11
 800f17e:	4085      	lsls	r5, r0
 800f180:	2200      	movs	r2, #0
 800f182:	032d      	lsls	r5, r5, #12
 800f184:	0b2d      	lsrs	r5, r5, #12
 800f186:	2100      	movs	r1, #0
 800f188:	0010      	movs	r0, r2
 800f18a:	032d      	lsls	r5, r5, #12
 800f18c:	0d0a      	lsrs	r2, r1, #20
 800f18e:	0b2d      	lsrs	r5, r5, #12
 800f190:	0512      	lsls	r2, r2, #20
 800f192:	432a      	orrs	r2, r5
 800f194:	4d0d      	ldr	r5, [pc, #52]	; (800f1cc <__aeabi_i2d+0x70>)
 800f196:	051b      	lsls	r3, r3, #20
 800f198:	402a      	ands	r2, r5
 800f19a:	4313      	orrs	r3, r2
 800f19c:	005b      	lsls	r3, r3, #1
 800f19e:	07e4      	lsls	r4, r4, #31
 800f1a0:	085b      	lsrs	r3, r3, #1
 800f1a2:	4323      	orrs	r3, r4
 800f1a4:	0019      	movs	r1, r3
 800f1a6:	bd70      	pop	{r4, r5, r6, pc}
 800f1a8:	0002      	movs	r2, r0
 800f1aa:	0029      	movs	r1, r5
 800f1ac:	3215      	adds	r2, #21
 800f1ae:	4091      	lsls	r1, r2
 800f1b0:	000a      	movs	r2, r1
 800f1b2:	210b      	movs	r1, #11
 800f1b4:	1a08      	subs	r0, r1, r0
 800f1b6:	40c5      	lsrs	r5, r0
 800f1b8:	032d      	lsls	r5, r5, #12
 800f1ba:	0b2d      	lsrs	r5, r5, #12
 800f1bc:	e7e3      	b.n	800f186 <__aeabi_i2d+0x2a>
 800f1be:	2400      	movs	r4, #0
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	2500      	movs	r5, #0
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	e7de      	b.n	800f186 <__aeabi_i2d+0x2a>
 800f1c8:	0000041e 	.word	0x0000041e
 800f1cc:	800fffff 	.word	0x800fffff

0800f1d0 <__aeabi_ui2d>:
 800f1d0:	b510      	push	{r4, lr}
 800f1d2:	1e04      	subs	r4, r0, #0
 800f1d4:	d025      	beq.n	800f222 <__aeabi_ui2d+0x52>
 800f1d6:	f7fd fde5 	bl	800cda4 <__clzsi2>
 800f1da:	4b14      	ldr	r3, [pc, #80]	; (800f22c <__aeabi_ui2d+0x5c>)
 800f1dc:	1a1b      	subs	r3, r3, r0
 800f1de:	055b      	lsls	r3, r3, #21
 800f1e0:	0d5b      	lsrs	r3, r3, #21
 800f1e2:	280a      	cmp	r0, #10
 800f1e4:	dd12      	ble.n	800f20c <__aeabi_ui2d+0x3c>
 800f1e6:	380b      	subs	r0, #11
 800f1e8:	4084      	lsls	r4, r0
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	0324      	lsls	r4, r4, #12
 800f1ee:	0b24      	lsrs	r4, r4, #12
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	0010      	movs	r0, r2
 800f1f4:	0324      	lsls	r4, r4, #12
 800f1f6:	0d0a      	lsrs	r2, r1, #20
 800f1f8:	0b24      	lsrs	r4, r4, #12
 800f1fa:	0512      	lsls	r2, r2, #20
 800f1fc:	4322      	orrs	r2, r4
 800f1fe:	4c0c      	ldr	r4, [pc, #48]	; (800f230 <__aeabi_ui2d+0x60>)
 800f200:	051b      	lsls	r3, r3, #20
 800f202:	4022      	ands	r2, r4
 800f204:	4313      	orrs	r3, r2
 800f206:	005b      	lsls	r3, r3, #1
 800f208:	0859      	lsrs	r1, r3, #1
 800f20a:	bd10      	pop	{r4, pc}
 800f20c:	0002      	movs	r2, r0
 800f20e:	0021      	movs	r1, r4
 800f210:	3215      	adds	r2, #21
 800f212:	4091      	lsls	r1, r2
 800f214:	000a      	movs	r2, r1
 800f216:	210b      	movs	r1, #11
 800f218:	1a08      	subs	r0, r1, r0
 800f21a:	40c4      	lsrs	r4, r0
 800f21c:	0324      	lsls	r4, r4, #12
 800f21e:	0b24      	lsrs	r4, r4, #12
 800f220:	e7e6      	b.n	800f1f0 <__aeabi_ui2d+0x20>
 800f222:	2300      	movs	r3, #0
 800f224:	2400      	movs	r4, #0
 800f226:	2200      	movs	r2, #0
 800f228:	e7e2      	b.n	800f1f0 <__aeabi_ui2d+0x20>
 800f22a:	46c0      	nop			; (mov r8, r8)
 800f22c:	0000041e 	.word	0x0000041e
 800f230:	800fffff 	.word	0x800fffff

0800f234 <__aeabi_f2d>:
 800f234:	0041      	lsls	r1, r0, #1
 800f236:	0e09      	lsrs	r1, r1, #24
 800f238:	1c4b      	adds	r3, r1, #1
 800f23a:	b570      	push	{r4, r5, r6, lr}
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	0246      	lsls	r6, r0, #9
 800f240:	0a75      	lsrs	r5, r6, #9
 800f242:	0fc4      	lsrs	r4, r0, #31
 800f244:	2b01      	cmp	r3, #1
 800f246:	dd14      	ble.n	800f272 <__aeabi_f2d+0x3e>
 800f248:	23e0      	movs	r3, #224	; 0xe0
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	076d      	lsls	r5, r5, #29
 800f24e:	0b36      	lsrs	r6, r6, #12
 800f250:	18cb      	adds	r3, r1, r3
 800f252:	2100      	movs	r1, #0
 800f254:	0d0a      	lsrs	r2, r1, #20
 800f256:	0028      	movs	r0, r5
 800f258:	0512      	lsls	r2, r2, #20
 800f25a:	4d1c      	ldr	r5, [pc, #112]	; (800f2cc <__aeabi_f2d+0x98>)
 800f25c:	4332      	orrs	r2, r6
 800f25e:	055b      	lsls	r3, r3, #21
 800f260:	402a      	ands	r2, r5
 800f262:	085b      	lsrs	r3, r3, #1
 800f264:	4313      	orrs	r3, r2
 800f266:	005b      	lsls	r3, r3, #1
 800f268:	07e4      	lsls	r4, r4, #31
 800f26a:	085b      	lsrs	r3, r3, #1
 800f26c:	4323      	orrs	r3, r4
 800f26e:	0019      	movs	r1, r3
 800f270:	bd70      	pop	{r4, r5, r6, pc}
 800f272:	2900      	cmp	r1, #0
 800f274:	d114      	bne.n	800f2a0 <__aeabi_f2d+0x6c>
 800f276:	2d00      	cmp	r5, #0
 800f278:	d01e      	beq.n	800f2b8 <__aeabi_f2d+0x84>
 800f27a:	0028      	movs	r0, r5
 800f27c:	f7fd fd92 	bl	800cda4 <__clzsi2>
 800f280:	280a      	cmp	r0, #10
 800f282:	dc1c      	bgt.n	800f2be <__aeabi_f2d+0x8a>
 800f284:	230b      	movs	r3, #11
 800f286:	002a      	movs	r2, r5
 800f288:	1a1b      	subs	r3, r3, r0
 800f28a:	40da      	lsrs	r2, r3
 800f28c:	0003      	movs	r3, r0
 800f28e:	3315      	adds	r3, #21
 800f290:	409d      	lsls	r5, r3
 800f292:	4b0f      	ldr	r3, [pc, #60]	; (800f2d0 <__aeabi_f2d+0x9c>)
 800f294:	0312      	lsls	r2, r2, #12
 800f296:	1a1b      	subs	r3, r3, r0
 800f298:	055b      	lsls	r3, r3, #21
 800f29a:	0b16      	lsrs	r6, r2, #12
 800f29c:	0d5b      	lsrs	r3, r3, #21
 800f29e:	e7d8      	b.n	800f252 <__aeabi_f2d+0x1e>
 800f2a0:	2d00      	cmp	r5, #0
 800f2a2:	d006      	beq.n	800f2b2 <__aeabi_f2d+0x7e>
 800f2a4:	0b32      	lsrs	r2, r6, #12
 800f2a6:	2680      	movs	r6, #128	; 0x80
 800f2a8:	0336      	lsls	r6, r6, #12
 800f2aa:	076d      	lsls	r5, r5, #29
 800f2ac:	4316      	orrs	r6, r2
 800f2ae:	4b09      	ldr	r3, [pc, #36]	; (800f2d4 <__aeabi_f2d+0xa0>)
 800f2b0:	e7cf      	b.n	800f252 <__aeabi_f2d+0x1e>
 800f2b2:	4b08      	ldr	r3, [pc, #32]	; (800f2d4 <__aeabi_f2d+0xa0>)
 800f2b4:	2600      	movs	r6, #0
 800f2b6:	e7cc      	b.n	800f252 <__aeabi_f2d+0x1e>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	2600      	movs	r6, #0
 800f2bc:	e7c9      	b.n	800f252 <__aeabi_f2d+0x1e>
 800f2be:	0003      	movs	r3, r0
 800f2c0:	002a      	movs	r2, r5
 800f2c2:	3b0b      	subs	r3, #11
 800f2c4:	409a      	lsls	r2, r3
 800f2c6:	2500      	movs	r5, #0
 800f2c8:	e7e3      	b.n	800f292 <__aeabi_f2d+0x5e>
 800f2ca:	46c0      	nop			; (mov r8, r8)
 800f2cc:	800fffff 	.word	0x800fffff
 800f2d0:	00000389 	.word	0x00000389
 800f2d4:	000007ff 	.word	0x000007ff

0800f2d8 <__aeabi_d2f>:
 800f2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2da:	004c      	lsls	r4, r1, #1
 800f2dc:	0d64      	lsrs	r4, r4, #21
 800f2de:	030b      	lsls	r3, r1, #12
 800f2e0:	1c62      	adds	r2, r4, #1
 800f2e2:	0a5b      	lsrs	r3, r3, #9
 800f2e4:	0f46      	lsrs	r6, r0, #29
 800f2e6:	0552      	lsls	r2, r2, #21
 800f2e8:	0fc9      	lsrs	r1, r1, #31
 800f2ea:	431e      	orrs	r6, r3
 800f2ec:	00c5      	lsls	r5, r0, #3
 800f2ee:	0d52      	lsrs	r2, r2, #21
 800f2f0:	2a01      	cmp	r2, #1
 800f2f2:	dd29      	ble.n	800f348 <__aeabi_d2f+0x70>
 800f2f4:	4b37      	ldr	r3, [pc, #220]	; (800f3d4 <__aeabi_d2f+0xfc>)
 800f2f6:	18e7      	adds	r7, r4, r3
 800f2f8:	2ffe      	cmp	r7, #254	; 0xfe
 800f2fa:	dc1c      	bgt.n	800f336 <__aeabi_d2f+0x5e>
 800f2fc:	2f00      	cmp	r7, #0
 800f2fe:	dd3b      	ble.n	800f378 <__aeabi_d2f+0xa0>
 800f300:	0180      	lsls	r0, r0, #6
 800f302:	1e43      	subs	r3, r0, #1
 800f304:	4198      	sbcs	r0, r3
 800f306:	2207      	movs	r2, #7
 800f308:	00f3      	lsls	r3, r6, #3
 800f30a:	0f6d      	lsrs	r5, r5, #29
 800f30c:	4303      	orrs	r3, r0
 800f30e:	432b      	orrs	r3, r5
 800f310:	401a      	ands	r2, r3
 800f312:	2a00      	cmp	r2, #0
 800f314:	d004      	beq.n	800f320 <__aeabi_d2f+0x48>
 800f316:	220f      	movs	r2, #15
 800f318:	401a      	ands	r2, r3
 800f31a:	2a04      	cmp	r2, #4
 800f31c:	d000      	beq.n	800f320 <__aeabi_d2f+0x48>
 800f31e:	3304      	adds	r3, #4
 800f320:	2280      	movs	r2, #128	; 0x80
 800f322:	04d2      	lsls	r2, r2, #19
 800f324:	401a      	ands	r2, r3
 800f326:	d024      	beq.n	800f372 <__aeabi_d2f+0x9a>
 800f328:	3701      	adds	r7, #1
 800f32a:	b2fa      	uxtb	r2, r7
 800f32c:	2fff      	cmp	r7, #255	; 0xff
 800f32e:	d002      	beq.n	800f336 <__aeabi_d2f+0x5e>
 800f330:	019b      	lsls	r3, r3, #6
 800f332:	0a58      	lsrs	r0, r3, #9
 800f334:	e001      	b.n	800f33a <__aeabi_d2f+0x62>
 800f336:	22ff      	movs	r2, #255	; 0xff
 800f338:	2000      	movs	r0, #0
 800f33a:	0240      	lsls	r0, r0, #9
 800f33c:	05d2      	lsls	r2, r2, #23
 800f33e:	0a40      	lsrs	r0, r0, #9
 800f340:	07c9      	lsls	r1, r1, #31
 800f342:	4310      	orrs	r0, r2
 800f344:	4308      	orrs	r0, r1
 800f346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f348:	4335      	orrs	r5, r6
 800f34a:	2c00      	cmp	r4, #0
 800f34c:	d104      	bne.n	800f358 <__aeabi_d2f+0x80>
 800f34e:	2d00      	cmp	r5, #0
 800f350:	d10a      	bne.n	800f368 <__aeabi_d2f+0x90>
 800f352:	2200      	movs	r2, #0
 800f354:	2000      	movs	r0, #0
 800f356:	e7f0      	b.n	800f33a <__aeabi_d2f+0x62>
 800f358:	2d00      	cmp	r5, #0
 800f35a:	d0ec      	beq.n	800f336 <__aeabi_d2f+0x5e>
 800f35c:	2080      	movs	r0, #128	; 0x80
 800f35e:	03c0      	lsls	r0, r0, #15
 800f360:	4330      	orrs	r0, r6
 800f362:	22ff      	movs	r2, #255	; 0xff
 800f364:	e7e9      	b.n	800f33a <__aeabi_d2f+0x62>
 800f366:	2400      	movs	r4, #0
 800f368:	2300      	movs	r3, #0
 800f36a:	025b      	lsls	r3, r3, #9
 800f36c:	0a58      	lsrs	r0, r3, #9
 800f36e:	b2e2      	uxtb	r2, r4
 800f370:	e7e3      	b.n	800f33a <__aeabi_d2f+0x62>
 800f372:	08db      	lsrs	r3, r3, #3
 800f374:	003c      	movs	r4, r7
 800f376:	e7f8      	b.n	800f36a <__aeabi_d2f+0x92>
 800f378:	003b      	movs	r3, r7
 800f37a:	3317      	adds	r3, #23
 800f37c:	dbf3      	blt.n	800f366 <__aeabi_d2f+0x8e>
 800f37e:	2380      	movs	r3, #128	; 0x80
 800f380:	041b      	lsls	r3, r3, #16
 800f382:	4333      	orrs	r3, r6
 800f384:	261e      	movs	r6, #30
 800f386:	1bf6      	subs	r6, r6, r7
 800f388:	2e1f      	cmp	r6, #31
 800f38a:	dd14      	ble.n	800f3b6 <__aeabi_d2f+0xde>
 800f38c:	2202      	movs	r2, #2
 800f38e:	4252      	negs	r2, r2
 800f390:	1bd7      	subs	r7, r2, r7
 800f392:	001a      	movs	r2, r3
 800f394:	40fa      	lsrs	r2, r7
 800f396:	0017      	movs	r7, r2
 800f398:	2e20      	cmp	r6, #32
 800f39a:	d004      	beq.n	800f3a6 <__aeabi_d2f+0xce>
 800f39c:	4a0e      	ldr	r2, [pc, #56]	; (800f3d8 <__aeabi_d2f+0x100>)
 800f39e:	4694      	mov	ip, r2
 800f3a0:	4464      	add	r4, ip
 800f3a2:	40a3      	lsls	r3, r4
 800f3a4:	431d      	orrs	r5, r3
 800f3a6:	002b      	movs	r3, r5
 800f3a8:	1e5d      	subs	r5, r3, #1
 800f3aa:	41ab      	sbcs	r3, r5
 800f3ac:	2207      	movs	r2, #7
 800f3ae:	433b      	orrs	r3, r7
 800f3b0:	401a      	ands	r2, r3
 800f3b2:	2700      	movs	r7, #0
 800f3b4:	e7ad      	b.n	800f312 <__aeabi_d2f+0x3a>
 800f3b6:	4a09      	ldr	r2, [pc, #36]	; (800f3dc <__aeabi_d2f+0x104>)
 800f3b8:	0028      	movs	r0, r5
 800f3ba:	18a2      	adds	r2, r4, r2
 800f3bc:	4095      	lsls	r5, r2
 800f3be:	4093      	lsls	r3, r2
 800f3c0:	1e6c      	subs	r4, r5, #1
 800f3c2:	41a5      	sbcs	r5, r4
 800f3c4:	40f0      	lsrs	r0, r6
 800f3c6:	2207      	movs	r2, #7
 800f3c8:	432b      	orrs	r3, r5
 800f3ca:	4303      	orrs	r3, r0
 800f3cc:	401a      	ands	r2, r3
 800f3ce:	2700      	movs	r7, #0
 800f3d0:	e79f      	b.n	800f312 <__aeabi_d2f+0x3a>
 800f3d2:	46c0      	nop			; (mov r8, r8)
 800f3d4:	fffffc80 	.word	0xfffffc80
 800f3d8:	fffffca2 	.word	0xfffffca2
 800f3dc:	fffffc82 	.word	0xfffffc82

0800f3e0 <__clzdi2>:
 800f3e0:	b510      	push	{r4, lr}
 800f3e2:	2900      	cmp	r1, #0
 800f3e4:	d103      	bne.n	800f3ee <__clzdi2+0xe>
 800f3e6:	f7fd fcdd 	bl	800cda4 <__clzsi2>
 800f3ea:	3020      	adds	r0, #32
 800f3ec:	e002      	b.n	800f3f4 <__clzdi2+0x14>
 800f3ee:	1c08      	adds	r0, r1, #0
 800f3f0:	f7fd fcd8 	bl	800cda4 <__clzsi2>
 800f3f4:	bd10      	pop	{r4, pc}
 800f3f6:	46c0      	nop			; (mov r8, r8)

0800f3f8 <strlen>:
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	5cc2      	ldrb	r2, [r0, r3]
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	2a00      	cmp	r2, #0
 800f400:	d1fb      	bne.n	800f3fa <strlen+0x2>
 800f402:	1e58      	subs	r0, r3, #1
 800f404:	4770      	bx	lr
	...

0800f408 <main>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f408:	2380      	movs	r3, #128	; 0x80
{
 800f40a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f40c:	4cf9      	ldr	r4, [pc, #996]	; (800f7f4 <main+0x3ec>)
 800f40e:	005b      	lsls	r3, r3, #1
 800f410:	6822      	ldr	r2, [r4, #0]
 800f412:	b0c7      	sub	sp, #284	; 0x11c
 800f414:	4313      	orrs	r3, r2
 800f416:	af02      	add	r7, sp, #8
 800f418:	6023      	str	r3, [r4, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f41a:	2000      	movs	r0, #0
 800f41c:	f7fa f938 	bl	8009690 <HAL_InitTick>
 800f420:	2208      	movs	r2, #8
 800f422:	23b4      	movs	r3, #180	; 0xb4
 800f424:	18ba      	adds	r2, r7, r2
 800f426:	18d3      	adds	r3, r2, r3
 800f428:	601c      	str	r4, [r3, #0]
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d123      	bne.n	800f476 <main+0x6e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f42e:	2101      	movs	r1, #1
 800f430:	4bf1      	ldr	r3, [pc, #964]	; (800f7f8 <main+0x3f0>)
 800f432:	3008      	adds	r0, #8
 800f434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f436:	1838      	adds	r0, r7, r0
 800f438:	430a      	orrs	r2, r1
 800f43a:	641a      	str	r2, [r3, #64]	; 0x40
 800f43c:	001a      	movs	r2, r3
 800f43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f440:	400b      	ands	r3, r1
 800f442:	31c7      	adds	r1, #199	; 0xc7
 800f444:	1841      	adds	r1, r0, r1
 800f446:	600b      	str	r3, [r1, #0]
 800f448:	23c8      	movs	r3, #200	; 0xc8
  __HAL_RCC_PWR_CLK_ENABLE();
 800f44a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f44c:	18c3      	adds	r3, r0, r3
 800f44e:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f450:	0013      	movs	r3, r2
 800f452:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f454:	0549      	lsls	r1, r1, #21
 800f456:	430a      	orrs	r2, r1
 800f458:	63da      	str	r2, [r3, #60]	; 0x3c
 800f45a:	22c4      	movs	r2, #196	; 0xc4
 800f45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f45e:	1882      	adds	r2, r0, r2
 800f460:	400b      	ands	r3, r1
 800f462:	6013      	str	r3, [r2, #0]
 800f464:	23c4      	movs	r3, #196	; 0xc4
 800f466:	18c3      	adds	r3, r0, r3
 800f468:	681b      	ldr	r3, [r3, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 800f46a:	23c0      	movs	r3, #192	; 0xc0
 800f46c:	4ae3      	ldr	r2, [pc, #908]	; (800f7fc <main+0x3f4>)
 800f46e:	00db      	lsls	r3, r3, #3
 800f470:	6811      	ldr	r1, [r2, #0]
 800f472:	430b      	orrs	r3, r1
 800f474:	6013      	str	r3, [r2, #0]
  SystemClock_Config();
 800f476:	f7f2 fe7d 	bl	8002174 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f47a:	2108      	movs	r1, #8
 800f47c:	22b8      	movs	r2, #184	; 0xb8
 800f47e:	2408      	movs	r4, #8
 800f480:	2328      	movs	r3, #40	; 0x28
 800f482:	20b8      	movs	r0, #184	; 0xb8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f484:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f486:	1879      	adds	r1, r7, r1
 800f488:	193c      	adds	r4, r7, r4
 800f48a:	188a      	adds	r2, r1, r2
 800f48c:	18d6      	adds	r6, r2, r3
 800f48e:	1820      	adds	r0, r4, r0
 800f490:	3304      	adds	r3, #4
 800f492:	2210      	movs	r2, #16
 800f494:	2100      	movs	r1, #0
 800f496:	18c0      	adds	r0, r0, r3
 800f498:	f002 fee6 	bl	8012268 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f49c:	21c0      	movs	r1, #192	; 0xc0
 800f49e:	4ad6      	ldr	r2, [pc, #856]	; (800f7f8 <main+0x3f0>)
 800f4a0:	1861      	adds	r1, r4, r1
 800f4a2:	6b53      	ldr	r3, [r2, #52]	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMU_ENABLE_GPIO_Port, PMU_ENABLE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : MISC_GPIO2_Pin MISC_GPIO0_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 800f4a4:	2008      	movs	r0, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f4a6:	432b      	orrs	r3, r5
 800f4a8:	6353      	str	r3, [r2, #52]	; 0x34
 800f4aa:	6b53      	ldr	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 800f4ac:	1838      	adds	r0, r7, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f4ae:	402b      	ands	r3, r5
 800f4b0:	600b      	str	r3, [r1, #0]
 800f4b2:	23c0      	movs	r3, #192	; 0xc0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f4b4:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f4b6:	18e3      	adds	r3, r4, r3
 800f4b8:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f4ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f4bc:	430b      	orrs	r3, r1
 800f4be:	6353      	str	r3, [r2, #52]	; 0x34
 800f4c0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f4c2:	22bc      	movs	r2, #188	; 0xbc
 800f4c4:	400b      	ands	r3, r1
 800f4c6:	18a2      	adds	r2, r4, r2
 800f4c8:	6013      	str	r3, [r2, #0]
 800f4ca:	23bc      	movs	r3, #188	; 0xbc
 800f4cc:	18e3      	adds	r3, r4, r3
 800f4ce:	681b      	ldr	r3, [r3, #0]
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f4d0:	24a0      	movs	r4, #160	; 0xa0
 800f4d2:	2388      	movs	r3, #136	; 0x88
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 800f4d4:	22e0      	movs	r2, #224	; 0xe0
 800f4d6:	005b      	lsls	r3, r3, #1
 800f4d8:	05e4      	lsls	r4, r4, #23
 800f4da:	62a3      	str	r3, [r4, #40]	; 0x28
 800f4dc:	4cc8      	ldr	r4, [pc, #800]	; (800f800 <main+0x3f8>)
 800f4de:	4bc9      	ldr	r3, [pc, #804]	; (800f804 <main+0x3fc>)
 800f4e0:	1882      	adds	r2, r0, r2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4e2:	20a0      	movs	r0, #160	; 0xa0
 800f4e4:	62a3      	str	r3, [r4, #40]	; 0x28
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 800f4e6:	2303      	movs	r3, #3
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f4e8:	61a1      	str	r1, [r4, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4ea:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f4ec:	60b1      	str	r1, [r6, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4ee:	0031      	movs	r1, r6
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 800f4f0:	6013      	str	r3, [r2, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4f2:	f7fa fbb9 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_INT_Pin */
  GPIO_InitStruct.Pin = MCU_INT_Pin;
 800f4f6:	2108      	movs	r1, #8
 800f4f8:	23e0      	movs	r3, #224	; 0xe0
 800f4fa:	2210      	movs	r2, #16
 800f4fc:	1879      	adds	r1, r7, r1
 800f4fe:	18cb      	adds	r3, r1, r3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 800f500:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = MCU_INT_Pin;
 800f502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f504:	6075      	str	r5, [r6, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f506:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f508:	2500      	movs	r5, #0
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 800f50a:	0031      	movs	r1, r6
 800f50c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f50e:	60f3      	str	r3, [r6, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f510:	60b5      	str	r5, [r6, #8]
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 800f512:	f7fa fba9 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_CS_N_Pin PMU_ENABLE_Pin PS_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
 800f516:	2108      	movs	r1, #8
 800f518:	22e0      	movs	r2, #224	; 0xe0
 800f51a:	4bbb      	ldr	r3, [pc, #748]	; (800f808 <main+0x400>)
 800f51c:	1879      	adds	r1, r7, r1
 800f51e:	188a      	adds	r2, r1, r2
 800f520:	6013      	str	r3, [r2, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f522:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f524:	0031      	movs	r1, r6
 800f526:	0020      	movs	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f528:	6073      	str	r3, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f52a:	60b5      	str	r5, [r6, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f52c:	60f5      	str	r5, [r6, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f52e:	f7fa fb9b 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_ADDRESS_Pin MISC_GPIO1_Pin */
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 800f532:	2108      	movs	r1, #8
 800f534:	22e0      	movs	r2, #224	; 0xe0
 800f536:	1879      	adds	r1, r7, r1
 800f538:	188a      	adds	r2, r1, r2
 800f53a:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f53c:	2102      	movs	r1, #2
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 800f53e:	011b      	lsls	r3, r3, #4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f540:	60b1      	str	r1, [r6, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f542:	0020      	movs	r0, r4
 800f544:	0031      	movs	r1, r6
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 800f546:	6013      	str	r3, [r2, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f548:	6075      	str	r5, [r6, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f54a:	f7fa fb8d 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 800f54e:	2108      	movs	r1, #8
 800f550:	2380      	movs	r3, #128	; 0x80
 800f552:	22e0      	movs	r2, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800f554:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 800f556:	1879      	adds	r1, r7, r1
 800f558:	188a      	adds	r2, r1, r2
 800f55a:	005b      	lsls	r3, r3, #1
 800f55c:	6013      	str	r3, [r2, #0]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800f55e:	0031      	movs	r1, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f560:	3bff      	subs	r3, #255	; 0xff
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800f562:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f564:	6073      	str	r3, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f566:	60b5      	str	r5, [r6, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f568:	60f5      	str	r5, [r6, #12]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800f56a:	f7fa fb7d 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 800f56e:	2308      	movs	r3, #8
 800f570:	22e0      	movs	r2, #224	; 0xe0
 800f572:	18f9      	adds	r1, r7, r3
 800f574:	188a      	adds	r2, r1, r2
 800f576:	6013      	str	r3, [r2, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f578:	4ba4      	ldr	r3, [pc, #656]	; (800f80c <main+0x404>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 800f57a:	0031      	movs	r1, r6
 800f57c:	0020      	movs	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f57e:	6073      	str	r3, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f580:	60b5      	str	r5, [r6, #8]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 800f582:	f7fa fb71 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_CTRL_Pin */
  GPIO_InitStruct.Pin = A111_CTRL_Pin;
 800f586:	2108      	movs	r1, #8
 800f588:	23e0      	movs	r3, #224	; 0xe0
 800f58a:	2210      	movs	r2, #16
 800f58c:	1879      	adds	r1, r7, r1
 800f58e:	18cb      	adds	r3, r1, r3
 800f590:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f592:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 800f594:	0031      	movs	r1, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f596:	6073      	str	r3, [r6, #4]
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 800f598:	0020      	movs	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f59a:	3302      	adds	r3, #2
 800f59c:	60f3      	str	r3, [r6, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f59e:	60b5      	str	r5, [r6, #8]
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 800f5a0:	f7fa fb62 	bl	8009c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKE_UP_Pin */
  GPIO_InitStruct.Pin = WAKE_UP_Pin;
 800f5a4:	2108      	movs	r1, #8
 800f5a6:	22e0      	movs	r2, #224	; 0xe0
 800f5a8:	2320      	movs	r3, #32
 800f5aa:	1879      	adds	r1, r7, r1
 800f5ac:	188a      	adds	r2, r1, r2
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f5ae:	2102      	movs	r1, #2
  GPIO_InitStruct.Pin = WAKE_UP_Pin;
 800f5b0:	6013      	str	r3, [r2, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800f5b2:	4b97      	ldr	r3, [pc, #604]	; (800f810 <main+0x408>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f5b4:	60b1      	str	r1, [r6, #8]
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 800f5b6:	0020      	movs	r0, r4
 800f5b8:	0031      	movs	r1, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800f5ba:	6073      	str	r3, [r6, #4]
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 800f5bc:	f7fa fb54 	bl	8009c68 <HAL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f5c0:	20c1      	movs	r0, #193	; 0xc1
 800f5c2:	4b94      	ldr	r3, [pc, #592]	; (800f814 <main+0x40c>)
 800f5c4:	0080      	lsls	r0, r0, #2
 800f5c6:	581a      	ldr	r2, [r3, r0]
 800f5c8:	4993      	ldr	r1, [pc, #588]	; (800f818 <main+0x410>)
 800f5ca:	400a      	ands	r2, r1
 800f5cc:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f5ce:	2240      	movs	r2, #64	; 0x40
 800f5d0:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f5d2:	581a      	ldr	r2, [r3, r0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800f5d4:	2101      	movs	r1, #1
 800f5d6:	0212      	lsls	r2, r2, #8
 800f5d8:	0a12      	lsrs	r2, r2, #8
 800f5da:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f5dc:	2280      	movs	r2, #128	; 0x80
 800f5de:	4886      	ldr	r0, [pc, #536]	; (800f7f8 <main+0x3f0>)
 800f5e0:	601a      	str	r2, [r3, #0]
 800f5e2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800f5e4:	430a      	orrs	r2, r1
 800f5e6:	6382      	str	r2, [r0, #56]	; 0x38
 800f5e8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800f5ea:	2008      	movs	r0, #8
 800f5ec:	400a      	ands	r2, r1
 800f5ee:	1838      	adds	r0, r7, r0
 800f5f0:	31b7      	adds	r1, #183	; 0xb7
 800f5f2:	1841      	adds	r1, r0, r1
 800f5f4:	600a      	str	r2, [r1, #0]
 800f5f6:	22b8      	movs	r2, #184	; 0xb8
 800f5f8:	1882      	adds	r2, r0, r2
 800f5fa:	6812      	ldr	r2, [r2, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f5fc:	22c2      	movs	r2, #194	; 0xc2
 800f5fe:	0092      	lsls	r2, r2, #2
 800f600:	5898      	ldr	r0, [r3, r2]
 800f602:	4986      	ldr	r1, [pc, #536]	; (800f81c <main+0x414>)
 800f604:	4008      	ands	r0, r1
 800f606:	5098      	str	r0, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f608:	2080      	movs	r0, #128	; 0x80
 800f60a:	0080      	lsls	r0, r0, #2
 800f60c:	6018      	str	r0, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f60e:	5898      	ldr	r0, [r3, r2]
 800f610:	4981      	ldr	r1, [pc, #516]	; (800f818 <main+0x410>)
 800f612:	4008      	ands	r0, r1
 800f614:	5098      	str	r0, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f616:	32f8      	adds	r2, #248	; 0xf8
 800f618:	601a      	str	r2, [r3, #0]
  hi2c1.Instance = I2C1;
 800f61a:	4881      	ldr	r0, [pc, #516]	; (800f820 <main+0x418>)
 800f61c:	4a81      	ldr	r2, [pc, #516]	; (800f824 <main+0x41c>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f61e:	2101      	movs	r1, #1
  hi2c1.Instance = I2C1;
 800f620:	6742      	str	r2, [r0, #116]	; 0x74
  hi2c1.Init.Timing = 0x10707DBC;
 800f622:	4a81      	ldr	r2, [pc, #516]	; (800f828 <main+0x420>)
 800f624:	6782      	str	r2, [r0, #120]	; 0x78
  hi2c1.Init.OwnAddress1 = 164;
 800f626:	22a4      	movs	r2, #164	; 0xa4
 800f628:	67c2      	str	r2, [r0, #124]	; 0x7c
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f62a:	0002      	movs	r2, r0
 800f62c:	3204      	adds	r2, #4
 800f62e:	67d1      	str	r1, [r2, #124]	; 0x7c
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f630:	0002      	movs	r2, r0
 800f632:	3208      	adds	r2, #8
 800f634:	67d5      	str	r5, [r2, #124]	; 0x7c
  hi2c1.Init.OwnAddress2 = 0;
 800f636:	0002      	movs	r2, r0
 800f638:	3288      	adds	r2, #136	; 0x88
 800f63a:	6015      	str	r5, [r2, #0]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f63c:	0002      	movs	r2, r0
 800f63e:	328c      	adds	r2, #140	; 0x8c
 800f640:	6015      	str	r5, [r2, #0]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f642:	0002      	movs	r2, r0
 800f644:	3290      	adds	r2, #144	; 0x90
 800f646:	6015      	str	r5, [r2, #0]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f648:	0002      	movs	r2, r0
 800f64a:	3294      	adds	r2, #148	; 0x94
 800f64c:	6015      	str	r5, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f64e:	0002      	movs	r2, r0
 800f650:	2008      	movs	r0, #8
 800f652:	31af      	adds	r1, #175	; 0xaf
 800f654:	1838      	adds	r0, r7, r0
 800f656:	1841      	adds	r1, r0, r1
 800f658:	32b5      	adds	r2, #181	; 0xb5
 800f65a:	2008      	movs	r0, #8
 800f65c:	7812      	ldrb	r2, [r2, #0]
 800f65e:	600b      	str	r3, [r1, #0]
 800f660:	21ac      	movs	r1, #172	; 0xac
 800f662:	4b6d      	ldr	r3, [pc, #436]	; (800f818 <main+0x410>)
 800f664:	1838      	adds	r0, r7, r0
 800f666:	1841      	adds	r1, r0, r1
 800f668:	b2d2      	uxtb	r2, r2
 800f66a:	600b      	str	r3, [r1, #0]
 800f66c:	42aa      	cmp	r2, r5
 800f66e:	d143      	bne.n	800f6f8 <main+0x2f0>
    hi2c->Lock = HAL_UNLOCKED;
 800f670:	4b6b      	ldr	r3, [pc, #428]	; (800f820 <main+0x418>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f672:	60f2      	str	r2, [r6, #12]
 800f674:	33b4      	adds	r3, #180	; 0xb4
 800f676:	701a      	strb	r2, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f678:	2202      	movs	r2, #2
 800f67a:	4d5f      	ldr	r5, [pc, #380]	; (800f7f8 <main+0x3f0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f67c:	0031      	movs	r1, r6
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f67e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f680:	4313      	orrs	r3, r2
 800f682:	636b      	str	r3, [r5, #52]	; 0x34
 800f684:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f686:	4013      	ands	r3, r2
 800f688:	32ce      	adds	r2, #206	; 0xce
 800f68a:	1882      	adds	r2, r0, r2
 800f68c:	6013      	str	r3, [r2, #0]
 800f68e:	23d0      	movs	r3, #208	; 0xd0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f690:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f692:	18c3      	adds	r3, r0, r3
 800f694:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f696:	23c0      	movs	r3, #192	; 0xc0
 800f698:	1882      	adds	r2, r0, r2
 800f69a:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f69c:	3bae      	subs	r3, #174	; 0xae
 800f69e:	6073      	str	r3, [r6, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f6a0:	3b11      	subs	r3, #17
 800f6a2:	60b3      	str	r3, [r6, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f6a4:	0020      	movs	r0, r4
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800f6a6:	3305      	adds	r3, #5
 800f6a8:	6133      	str	r3, [r6, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f6aa:	f7fa fadd 	bl	8009c68 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800f6ae:	2180      	movs	r1, #128	; 0x80
 800f6b0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800f6b2:	0389      	lsls	r1, r1, #14
 800f6b4:	430a      	orrs	r2, r1
 800f6b6:	63ea      	str	r2, [r5, #60]	; 0x3c
 800f6b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f6ba:	22cc      	movs	r2, #204	; 0xcc
 800f6bc:	400b      	ands	r3, r1
 800f6be:	2108      	movs	r1, #8
 800f6c0:	1879      	adds	r1, r7, r1
 800f6c2:	188a      	adds	r2, r1, r2
 800f6c4:	6013      	str	r3, [r2, #0]
 800f6c6:	23cc      	movs	r3, #204	; 0xcc
 800f6c8:	18cb      	adds	r3, r1, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f6ca:	2108      	movs	r1, #8
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	23b0      	movs	r3, #176	; 0xb0
 800f6d0:	22c5      	movs	r2, #197	; 0xc5
 800f6d2:	1879      	adds	r1, r7, r1
 800f6d4:	2008      	movs	r0, #8
 800f6d6:	18cb      	adds	r3, r1, r3
 800f6d8:	21b0      	movs	r1, #176	; 0xb0
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	0092      	lsls	r2, r2, #2
 800f6de:	589b      	ldr	r3, [r3, r2]
 800f6e0:	1838      	adds	r0, r7, r0
 800f6e2:	1841      	adds	r1, r0, r1
 800f6e4:	6809      	ldr	r1, [r1, #0]
 800f6e6:	021b      	lsls	r3, r3, #8
 800f6e8:	0a1b      	lsrs	r3, r3, #8
 800f6ea:	508b      	str	r3, [r1, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f6ec:	22b0      	movs	r2, #176	; 0xb0
 800f6ee:	2380      	movs	r3, #128	; 0x80
 800f6f0:	1882      	adds	r2, r0, r2
 800f6f2:	6812      	ldr	r2, [r2, #0]
 800f6f4:	041b      	lsls	r3, r3, #16
 800f6f6:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800f6f8:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800f6fa:	2101      	movs	r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f6fc:	2008      	movs	r0, #8
  hi2c->State = HAL_I2C_STATE_BUSY;
 800f6fe:	4b48      	ldr	r3, [pc, #288]	; (800f820 <main+0x418>)
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f700:	1838      	adds	r0, r7, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800f702:	33b5      	adds	r3, #181	; 0xb5
 800f704:	701a      	strb	r2, [r3, #0]
  __HAL_I2C_DISABLE(hi2c);
 800f706:	4b46      	ldr	r3, [pc, #280]	; (800f820 <main+0x418>)
 800f708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	438a      	bics	r2, r1
 800f70e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f710:	4a43      	ldr	r2, [pc, #268]	; (800f820 <main+0x418>)
 800f712:	31ab      	adds	r1, #171	; 0xab
 800f714:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800f716:	1841      	adds	r1, r0, r1
 800f718:	2008      	movs	r0, #8
 800f71a:	600a      	str	r2, [r1, #0]
 800f71c:	21ac      	movs	r1, #172	; 0xac
 800f71e:	1838      	adds	r0, r7, r0
 800f720:	1841      	adds	r1, r0, r1
 800f722:	6809      	ldr	r1, [r1, #0]
 800f724:	4a41      	ldr	r2, [pc, #260]	; (800f82c <main+0x424>)
 800f726:	400a      	ands	r2, r1
 800f728:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f72a:	6899      	ldr	r1, [r3, #8]
 800f72c:	4a40      	ldr	r2, [pc, #256]	; (800f830 <main+0x428>)
 800f72e:	4011      	ands	r1, r2
 800f730:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f732:	493b      	ldr	r1, [pc, #236]	; (800f820 <main+0x418>)
 800f734:	3104      	adds	r1, #4
 800f736:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
 800f738:	4939      	ldr	r1, [pc, #228]	; (800f820 <main+0x418>)
 800f73a:	6fcc      	ldr	r4, [r1, #124]	; 0x7c
 800f73c:	2801      	cmp	r0, #1
 800f73e:	d000      	beq.n	800f742 <main+0x33a>
 800f740:	e33e      	b.n	800fdc0 <main+0x9b8>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f742:	2180      	movs	r1, #128	; 0x80
 800f744:	0209      	lsls	r1, r1, #8
 800f746:	4321      	orrs	r1, r4
 800f748:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f74a:	6858      	ldr	r0, [r3, #4]
 800f74c:	4939      	ldr	r1, [pc, #228]	; (800f834 <main+0x42c>)
 800f74e:	4301      	orrs	r1, r0
 800f750:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f752:	68d9      	ldr	r1, [r3, #12]
  hi2c->State = HAL_I2C_STATE_READY;
 800f754:	2020      	movs	r0, #32
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f756:	400a      	ands	r2, r1
 800f758:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800f75a:	4931      	ldr	r1, [pc, #196]	; (800f820 <main+0x418>)
 800f75c:	4a30      	ldr	r2, [pc, #192]	; (800f820 <main+0x418>)
 800f75e:	3188      	adds	r1, #136	; 0x88
 800f760:	3208      	adds	r2, #8
 800f762:	6809      	ldr	r1, [r1, #0]
 800f764:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f766:	430a      	orrs	r2, r1
 800f768:	492d      	ldr	r1, [pc, #180]	; (800f820 <main+0x418>)
 800f76a:	318c      	adds	r1, #140	; 0x8c
 800f76c:	6809      	ldr	r1, [r1, #0]
 800f76e:	0209      	lsls	r1, r1, #8
 800f770:	430a      	orrs	r2, r1
 800f772:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f774:	492a      	ldr	r1, [pc, #168]	; (800f820 <main+0x418>)
 800f776:	4a2a      	ldr	r2, [pc, #168]	; (800f820 <main+0x418>)
 800f778:	3194      	adds	r1, #148	; 0x94
 800f77a:	3290      	adds	r2, #144	; 0x90
 800f77c:	6809      	ldr	r1, [r1, #0]
 800f77e:	6812      	ldr	r2, [r2, #0]
 800f780:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 800f782:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f784:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	468c      	mov	ip, r1
 800f78a:	430a      	orrs	r2, r1
 800f78c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f78e:	2200      	movs	r2, #0
 800f790:	4923      	ldr	r1, [pc, #140]	; (800f820 <main+0x418>)
 800f792:	31b8      	adds	r1, #184	; 0xb8
 800f794:	600a      	str	r2, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800f796:	4922      	ldr	r1, [pc, #136]	; (800f820 <main+0x418>)
 800f798:	31b5      	adds	r1, #181	; 0xb5
 800f79a:	7008      	strb	r0, [r1, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800f79c:	4820      	ldr	r0, [pc, #128]	; (800f820 <main+0x418>)
 800f79e:	30a4      	adds	r0, #164	; 0xa4
 800f7a0:	6002      	str	r2, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f7a2:	481f      	ldr	r0, [pc, #124]	; (800f820 <main+0x418>)
 800f7a4:	30b6      	adds	r0, #182	; 0xb6
 800f7a6:	7002      	strb	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f7a8:	7808      	ldrb	r0, [r1, #0]
 800f7aa:	b2c0      	uxtb	r0, r0
 800f7ac:	6038      	str	r0, [r7, #0]
 800f7ae:	2820      	cmp	r0, #32
 800f7b0:	d146      	bne.n	800f840 <main+0x438>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f7b2:	2408      	movs	r4, #8
 800f7b4:	308c      	adds	r0, #140	; 0x8c
 800f7b6:	193c      	adds	r4, r7, r4
 800f7b8:	1820      	adds	r0, r4, r0
 800f7ba:	2408      	movs	r4, #8
 800f7bc:	4d18      	ldr	r5, [pc, #96]	; (800f820 <main+0x418>)
 800f7be:	193c      	adds	r4, r7, r4
 800f7c0:	35b4      	adds	r5, #180	; 0xb4
 800f7c2:	6005      	str	r5, [r0, #0]
 800f7c4:	7828      	ldrb	r0, [r5, #0]
 800f7c6:	4560      	cmp	r0, ip
 800f7c8:	d03a      	beq.n	800f840 <main+0x438>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f7ca:	2024      	movs	r0, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f7cc:	4665      	mov	r5, ip
    hi2c->State = HAL_I2C_STATE_BUSY;
 800f7ce:	7008      	strb	r0, [r1, #0]
    __HAL_I2C_DISABLE(hi2c);
 800f7d0:	6818      	ldr	r0, [r3, #0]
 800f7d2:	43a8      	bics	r0, r5
 800f7d4:	6018      	str	r0, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f7d6:	6818      	ldr	r0, [r3, #0]
 800f7d8:	4d17      	ldr	r5, [pc, #92]	; (800f838 <main+0x430>)
 800f7da:	4028      	ands	r0, r5

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;

    __HAL_I2C_ENABLE(hi2c);
 800f7dc:	4665      	mov	r5, ip
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f7de:	6018      	str	r0, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800f7e0:	6818      	ldr	r0, [r3, #0]
 800f7e2:	6018      	str	r0, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800f7e4:	6818      	ldr	r0, [r3, #0]
 800f7e6:	4328      	orrs	r0, r5
 800f7e8:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f7ea:	6838      	ldr	r0, [r7, #0]
 800f7ec:	7008      	strb	r0, [r1, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f7ee:	21ac      	movs	r1, #172	; 0xac
 800f7f0:	1861      	adds	r1, r4, r1
 800f7f2:	e023      	b.n	800f83c <main+0x434>
 800f7f4:	40022000 	.word	0x40022000
 800f7f8:	40021000 	.word	0x40021000
 800f7fc:	40010000 	.word	0x40010000
 800f800:	50000400 	.word	0x50000400
 800f804:	00000211 	.word	0x00000211
 800f808:	00000203 	.word	0x00000203
 800f80c:	10110000 	.word	0x10110000
 800f810:	10310000 	.word	0x10310000
 800f814:	e000e100 	.word	0xe000e100
 800f818:	ff00ffff 	.word	0xff00ffff
 800f81c:	ffff00ff 	.word	0xffff00ff
 800f820:	2000018c 	.word	0x2000018c
 800f824:	40005400 	.word	0x40005400
 800f828:	10707dbc 	.word	0x10707dbc
 800f82c:	f0ffffff 	.word	0xf0ffffff
 800f830:	ffff7fff 	.word	0xffff7fff
 800f834:	02008000 	.word	0x02008000
 800f838:	ffffefff 	.word	0xffffefff
 800f83c:	6809      	ldr	r1, [r1, #0]
 800f83e:	700a      	strb	r2, [r1, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f840:	4dee      	ldr	r5, [pc, #952]	; (800fbfc <main+0x7f4>)
 800f842:	0029      	movs	r1, r5
 800f844:	31b5      	adds	r1, #181	; 0xb5
 800f846:	780a      	ldrb	r2, [r1, #0]
 800f848:	b2d2      	uxtb	r2, r2
 800f84a:	4694      	mov	ip, r2
 800f84c:	2a20      	cmp	r2, #32
 800f84e:	d114      	bne.n	800f87a <main+0x472>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f850:	35b4      	adds	r5, #180	; 0xb4
 800f852:	782a      	ldrb	r2, [r5, #0]
 800f854:	2a01      	cmp	r2, #1
 800f856:	d010      	beq.n	800f87a <main+0x472>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f858:	2224      	movs	r2, #36	; 0x24
 800f85a:	700a      	strb	r2, [r1, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f85c:	6818      	ldr	r0, [r3, #0]
 800f85e:	3a23      	subs	r2, #35	; 0x23
 800f860:	4390      	bics	r0, r2
 800f862:	6018      	str	r0, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f864:	6818      	ldr	r0, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f866:	4ce6      	ldr	r4, [pc, #920]	; (800fc00 <main+0x7f8>)
 800f868:	4020      	ands	r0, r4

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f86a:	6018      	str	r0, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f86c:	6818      	ldr	r0, [r3, #0]
 800f86e:	4302      	orrs	r2, r0
 800f870:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f872:	4663      	mov	r3, ip
 800f874:	700b      	strb	r3, [r1, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f876:	2300      	movs	r3, #0
 800f878:	702b      	strb	r3, [r5, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800f87a:	2228      	movs	r2, #40	; 0x28
 800f87c:	2100      	movs	r1, #0
 800f87e:	0030      	movs	r0, r6
 800f880:	f002 fcf2 	bl	8012268 <memset>
  hrtc.Init.AsynchPrediv = 31;
 800f884:	211f      	movs	r1, #31
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800f886:	2300      	movs	r3, #0
  hrtc.Instance = RTC;
 800f888:	4cde      	ldr	r4, [pc, #888]	; (800fc04 <main+0x7fc>)
 800f88a:	4adf      	ldr	r2, [pc, #892]	; (800fc08 <main+0x800>)
  hrtc.Init.AsynchPrediv = 31;
 800f88c:	60e1      	str	r1, [r4, #12]
  hrtc.Init.SynchPrediv = 999;
 800f88e:	49df      	ldr	r1, [pc, #892]	; (800fc0c <main+0x804>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800f890:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 999;
 800f892:	6121      	str	r1, [r4, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f894:	2180      	movs	r1, #128	; 0x80
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800f896:	6163      	str	r3, [r4, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800f898:	61a3      	str	r3, [r4, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800f89a:	61e3      	str	r3, [r4, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800f89c:	6263      	str	r3, [r4, #36]	; 0x24
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800f89e:	0023      	movs	r3, r4
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f8a0:	05c9      	lsls	r1, r1, #23
  hrtc.Instance = RTC;
 800f8a2:	6022      	str	r2, [r4, #0]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800f8a4:	6221      	str	r1, [r4, #32]
 800f8a6:	3329      	adds	r3, #41	; 0x29
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d130      	bne.n	800f912 <main+0x50a>
    hrtc->Lock = HAL_UNLOCKED;
 800f8b0:	0021      	movs	r1, r4
 800f8b2:	3128      	adds	r1, #40	; 0x28
 800f8b4:	700b      	strb	r3, [r1, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800f8b6:	2388      	movs	r3, #136	; 0x88
 800f8b8:	021b      	lsls	r3, r3, #8
 800f8ba:	6063      	str	r3, [r4, #4]
    __HAL_RCC_RTC_ENABLE();
 800f8bc:	2380      	movs	r3, #128	; 0x80
 800f8be:	48d4      	ldr	r0, [pc, #848]	; (800fc10 <main+0x808>)
 800f8c0:	021b      	lsls	r3, r3, #8
 800f8c2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f8c4:	2508      	movs	r5, #8
 800f8c6:	430b      	orrs	r3, r1
 800f8c8:	65c3      	str	r3, [r0, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800f8ca:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800f8cc:	0003      	movs	r3, r0
 800f8ce:	2080      	movs	r0, #128	; 0x80
 800f8d0:	00c0      	lsls	r0, r0, #3
 800f8d2:	4301      	orrs	r1, r0
 800f8d4:	63d9      	str	r1, [r3, #60]	; 0x3c
 800f8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8d8:	21d4      	movs	r1, #212	; 0xd4
 800f8da:	4003      	ands	r3, r0
 800f8dc:	2008      	movs	r0, #8
 800f8de:	1838      	adds	r0, r7, r0
 800f8e0:	1841      	adds	r1, r0, r1
 800f8e2:	600b      	str	r3, [r1, #0]
 800f8e4:	23d4      	movs	r3, #212	; 0xd4
 800f8e6:	18c3      	adds	r3, r0, r3
 800f8e8:	2008      	movs	r0, #8
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	23b0      	movs	r3, #176	; 0xb0
 800f8ee:	21c0      	movs	r1, #192	; 0xc0
 800f8f0:	1838      	adds	r0, r7, r0
 800f8f2:	18c3      	adds	r3, r0, r3
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	0089      	lsls	r1, r1, #2
 800f8f8:	585b      	ldr	r3, [r3, r1]
 800f8fa:	48c6      	ldr	r0, [pc, #792]	; (800fc14 <main+0x80c>)
 800f8fc:	197d      	adds	r5, r7, r5
 800f8fe:	4003      	ands	r3, r0
 800f900:	20b0      	movs	r0, #176	; 0xb0
 800f902:	1828      	adds	r0, r5, r0
 800f904:	6800      	ldr	r0, [r0, #0]
 800f906:	5043      	str	r3, [r0, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f908:	21b0      	movs	r1, #176	; 0xb0
 800f90a:	2304      	movs	r3, #4
 800f90c:	1869      	adds	r1, r5, r1
 800f90e:	6809      	ldr	r1, [r1, #0]
 800f910:	600b      	str	r3, [r1, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 800f912:	0023      	movs	r3, r4
 800f914:	2102      	movs	r1, #2
 800f916:	3329      	adds	r3, #41	; 0x29
 800f918:	7019      	strb	r1, [r3, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f91a:	23ca      	movs	r3, #202	; 0xca
 800f91c:	6253      	str	r3, [r2, #36]	; 0x24
 800f91e:	3b77      	subs	r3, #119	; 0x77
 800f920:	6253      	str	r3, [r2, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800f922:	f7f9 fb2f 	bl	8008f84 <RTC_EnterInitMode.constprop.105>
    if(status == HAL_OK)
 800f926:	2800      	cmp	r0, #0
 800f928:	d124      	bne.n	800f974 <main+0x56c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800f92a:	6823      	ldr	r3, [r4, #0]
 800f92c:	49ba      	ldr	r1, [pc, #744]	; (800fc18 <main+0x810>)
 800f92e:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f930:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800f932:	400a      	ands	r2, r1
 800f934:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f936:	68a2      	ldr	r2, [r4, #8]
 800f938:	6999      	ldr	r1, [r3, #24]
 800f93a:	4302      	orrs	r2, r0
 800f93c:	69e0      	ldr	r0, [r4, #28]
 800f93e:	4302      	orrs	r2, r0
 800f940:	430a      	orrs	r2, r1
 800f942:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800f944:	6922      	ldr	r2, [r4, #16]
 800f946:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800f948:	68e2      	ldr	r2, [r4, #12]
 800f94a:	6919      	ldr	r1, [r3, #16]
 800f94c:	0412      	lsls	r2, r2, #16
 800f94e:	430a      	orrs	r2, r1
 800f950:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800f952:	f7f9 faef 	bl	8008f34 <RTC_ExitInitMode.constprop.106>
      if (status == HAL_OK)
 800f956:	2800      	cmp	r0, #0
 800f958:	d10c      	bne.n	800f974 <main+0x56c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800f95a:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f95c:	6a25      	ldr	r5, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800f95e:	6993      	ldr	r3, [r2, #24]
 800f960:	00db      	lsls	r3, r3, #3
 800f962:	08db      	lsrs	r3, r3, #3
 800f964:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f968:	6991      	ldr	r1, [r2, #24]
 800f96a:	432b      	orrs	r3, r5
 800f96c:	69a5      	ldr	r5, [r4, #24]
 800f96e:	432b      	orrs	r3, r5
 800f970:	430b      	orrs	r3, r1
 800f972:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f974:	22ff      	movs	r2, #255	; 0xff
 800f976:	6823      	ldr	r3, [r4, #0]
 800f978:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800f97a:	2800      	cmp	r0, #0
 800f97c:	d103      	bne.n	800f986 <main+0x57e>
      hrtc->State = HAL_RTC_STATE_READY;
 800f97e:	0022      	movs	r2, r4
 800f980:	2101      	movs	r1, #1
 800f982:	3229      	adds	r2, #41	; 0x29
 800f984:	7011      	strb	r1, [r2, #0]
  __HAL_LOCK(hrtc);
 800f986:	0022      	movs	r2, r4
 800f988:	3228      	adds	r2, #40	; 0x28
 800f98a:	7811      	ldrb	r1, [r2, #0]
 800f98c:	2901      	cmp	r1, #1
 800f98e:	d02e      	beq.n	800f9ee <main+0x5e6>
 800f990:	2101      	movs	r1, #1
 800f992:	7011      	strb	r1, [r2, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f994:	0022      	movs	r2, r4
 800f996:	1849      	adds	r1, r1, r1
 800f998:	3229      	adds	r2, #41	; 0x29
 800f99a:	7011      	strb	r1, [r2, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f99c:	22ca      	movs	r2, #202	; 0xca
 800f99e:	625a      	str	r2, [r3, #36]	; 0x24
 800f9a0:	3a77      	subs	r2, #119	; 0x77
 800f9a2:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800f9a4:	f7f9 faee 	bl	8008f84 <RTC_EnterInitMode.constprop.105>
  if(status == HAL_OK)
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	d113      	bne.n	800f9d4 <main+0x5cc>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f9ac:	6825      	ldr	r5, [r4, #0]
 800f9ae:	69ab      	ldr	r3, [r5, #24]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f9b0:	f7f9 fdc4 	bl	800953c <RTC_ByteToBcd2>
 800f9b4:	0002      	movs	r2, r0
 800f9b6:	0403      	lsls	r3, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f9b8:	0200      	lsls	r0, r0, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f9ba:	4318      	orrs	r0, r3
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f9bc:	4b97      	ldr	r3, [pc, #604]	; (800fc1c <main+0x814>)
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f9be:	4310      	orrs	r0, r2
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f9c0:	4018      	ands	r0, r3
 800f9c2:	6028      	str	r0, [r5, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f9c4:	69ab      	ldr	r3, [r5, #24]
 800f9c6:	4a96      	ldr	r2, [pc, #600]	; (800fc20 <main+0x818>)
 800f9c8:	4013      	ands	r3, r2
 800f9ca:	61ab      	str	r3, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f9cc:	69ab      	ldr	r3, [r5, #24]
 800f9ce:	61ab      	str	r3, [r5, #24]
    status = RTC_ExitInitMode(hrtc);
 800f9d0:	f7f9 fab0 	bl	8008f34 <RTC_ExitInitMode.constprop.106>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f9d4:	22ff      	movs	r2, #255	; 0xff
 800f9d6:	6823      	ldr	r3, [r4, #0]
 800f9d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	d103      	bne.n	800f9e6 <main+0x5de>
   hrtc->State = HAL_RTC_STATE_READY;
 800f9de:	0023      	movs	r3, r4
 800f9e0:	3afe      	subs	r2, #254	; 0xfe
 800f9e2:	3329      	adds	r3, #41	; 0x29
 800f9e4:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800f9e6:	0023      	movs	r3, r4
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	3328      	adds	r3, #40	; 0x28
 800f9ec:	701a      	strb	r2, [r3, #0]
 __HAL_LOCK(hrtc);
 800f9ee:	0023      	movs	r3, r4
 800f9f0:	3328      	adds	r3, #40	; 0x28
 800f9f2:	781a      	ldrb	r2, [r3, #0]
 800f9f4:	2a01      	cmp	r2, #1
 800f9f6:	d037      	beq.n	800fa68 <main+0x660>
 800f9f8:	2501      	movs	r5, #1
 800f9fa:	701d      	strb	r5, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f9fc:	0023      	movs	r3, r4
 800f9fe:	2202      	movs	r2, #2
 800fa00:	3329      	adds	r3, #41	; 0x29
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800fa02:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fa04:	701a      	strb	r2, [r3, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800fa06:	f7f9 fd99 	bl	800953c <RTC_ByteToBcd2>
 800fa0a:	2208      	movs	r2, #8
 800fa0c:	23b0      	movs	r3, #176	; 0xb0
 800fa0e:	18ba      	adds	r2, r7, r2
 800fa10:	18d3      	adds	r3, r2, r3
 800fa12:	6018      	str	r0, [r3, #0]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800fa14:	0028      	movs	r0, r5
 800fa16:	f7f9 fd91 	bl	800953c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800fa1a:	2208      	movs	r2, #8
 800fa1c:	23b0      	movs	r3, #176	; 0xb0
 800fa1e:	18ba      	adds	r2, r7, r2
 800fa20:	18d3      	adds	r3, r2, r3
 800fa22:	681b      	ldr	r3, [r3, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fa24:	22ca      	movs	r2, #202	; 0xca
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800fa26:	041d      	lsls	r5, r3, #16
 800fa28:	2380      	movs	r3, #128	; 0x80
 800fa2a:	019b      	lsls	r3, r3, #6
 800fa2c:	4303      	orrs	r3, r0
 800fa2e:	431d      	orrs	r5, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fa30:	6823      	ldr	r3, [r4, #0]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800fa32:	0200      	lsls	r0, r0, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fa34:	625a      	str	r2, [r3, #36]	; 0x24
 800fa36:	3a77      	subs	r2, #119	; 0x77
 800fa38:	625a      	str	r2, [r3, #36]	; 0x24
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800fa3a:	4305      	orrs	r5, r0
  status = RTC_EnterInitMode(hrtc);
 800fa3c:	f7f9 faa2 	bl	8008f84 <RTC_EnterInitMode.constprop.105>
  if(status == HAL_OK)
 800fa40:	2800      	cmp	r0, #0
 800fa42:	d105      	bne.n	800fa50 <main+0x648>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800fa44:	4877      	ldr	r0, [pc, #476]	; (800fc24 <main+0x81c>)
 800fa46:	6823      	ldr	r3, [r4, #0]
 800fa48:	4005      	ands	r5, r0
 800fa4a:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 800fa4c:	f7f9 fa72 	bl	8008f34 <RTC_ExitInitMode.constprop.106>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fa50:	22ff      	movs	r2, #255	; 0xff
 800fa52:	6823      	ldr	r3, [r4, #0]
 800fa54:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d103      	bne.n	800fa62 <main+0x65a>
    hrtc->State = HAL_RTC_STATE_READY;
 800fa5a:	0023      	movs	r3, r4
 800fa5c:	3afe      	subs	r2, #254	; 0xfe
 800fa5e:	3329      	adds	r3, #41	; 0x29
 800fa60:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800fa62:	2300      	movs	r3, #0
 800fa64:	3428      	adds	r4, #40	; 0x28
 800fa66:	7023      	strb	r3, [r4, #0]
  sAlarm.AlarmDateWeekDay = 1;
 800fa68:	2108      	movs	r1, #8
 800fa6a:	22b8      	movs	r2, #184	; 0xb8
 800fa6c:	2329      	movs	r3, #41	; 0x29
 800fa6e:	1879      	adds	r1, r7, r1
 800fa70:	188a      	adds	r2, r1, r2
  sAlarm.AlarmTime.Hours = 0;
 800fa72:	2500      	movs	r5, #0
  sAlarm.AlarmDateWeekDay = 1;
 800fa74:	18d3      	adds	r3, r2, r3
 800fa76:	2201      	movs	r2, #1
  sAlarm.AlarmTime.Hours = 0;
 800fa78:	8035      	strh	r5, [r6, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800fa7a:	70b5      	strb	r5, [r6, #2]
  sAlarm.AlarmDateWeekDay = 1;
 800fa7c:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 800fa7e:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800fa80:	0030      	movs	r0, r6
  sAlarm.Alarm = RTC_ALARM_A;
 800fa82:	005b      	lsls	r3, r3, #1
 800fa84:	6273      	str	r3, [r6, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = 0;
 800fa86:	6075      	str	r5, [r6, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800fa88:	60f5      	str	r5, [r6, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800fa8a:	6135      	str	r5, [r6, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800fa8c:	6175      	str	r5, [r6, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800fa8e:	61b5      	str	r5, [r6, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800fa90:	61f5      	str	r5, [r6, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800fa92:	f7f9 fd5e 	bl	8009552 <HAL_RTC_SetAlarm_IT.constprop.129>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800fa96:	0029      	movs	r1, r5
 800fa98:	4863      	ldr	r0, [pc, #396]	; (800fc28 <main+0x820>)
 800fa9a:	f7f9 f90f 	bl	8008cbc <HAL_RTCEx_SetWakeUpTimer_IT.constprop.147>
  if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 800fa9e:	f7f9 f8cd 	bl	8008c3c <HAL_RTCEx_DeactivateWakeUpTimer.constprop.148>
  hspi1.Instance = SPI1;
 800faa2:	4c62      	ldr	r4, [pc, #392]	; (800fc2c <main+0x824>)
 800faa4:	4b62      	ldr	r3, [pc, #392]	; (800fc30 <main+0x828>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800faa6:	60a5      	str	r5, [r4, #8]
  hspi1.Instance = SPI1;
 800faa8:	6023      	str	r3, [r4, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800faaa:	2382      	movs	r3, #130	; 0x82
 800faac:	005b      	lsls	r3, r3, #1
 800faae:	6063      	str	r3, [r4, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800fab0:	23e0      	movs	r3, #224	; 0xe0
 800fab2:	00db      	lsls	r3, r3, #3
 800fab4:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800fab6:	2380      	movs	r3, #128	; 0x80
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	61a3      	str	r3, [r4, #24]
  hspi1.Init.CRCPolynomial = 7;
 800fabc:	3bfa      	subs	r3, #250	; 0xfa
 800fabe:	3bff      	subs	r3, #255	; 0xff
 800fac0:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800fac2:	3301      	adds	r3, #1
 800fac4:	6363      	str	r3, [r4, #52]	; 0x34
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fac6:	0023      	movs	r3, r4
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800fac8:	6125      	str	r5, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800faca:	6165      	str	r5, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800facc:	61e5      	str	r5, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800face:	6225      	str	r5, [r4, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800fad0:	6265      	str	r5, [r4, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fad2:	62a5      	str	r5, [r4, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800fad4:	6325      	str	r5, [r4, #48]	; 0x30
 800fad6:	335d      	adds	r3, #93	; 0x5d
 800fad8:	7819      	ldrb	r1, [r3, #0]
 800fada:	b2c9      	uxtb	r1, r1
 800fadc:	42a9      	cmp	r1, r5
 800fade:	d132      	bne.n	800fb46 <main+0x73e>
    hspi->Lock = HAL_UNLOCKED;
 800fae0:	0023      	movs	r3, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fae2:	20b8      	movs	r0, #184	; 0xb8
 800fae4:	335c      	adds	r3, #92	; 0x5c
 800fae6:	7019      	strb	r1, [r3, #0]
 800fae8:	2330      	movs	r3, #48	; 0x30
 800faea:	3508      	adds	r5, #8
 800faec:	197d      	adds	r5, r7, r5
 800faee:	1828      	adds	r0, r5, r0
 800faf0:	220c      	movs	r2, #12
 800faf2:	18c0      	adds	r0, r0, r3
 800faf4:	f002 fbb8 	bl	8012268 <memset>
    __HAL_RCC_SPI1_CLK_ENABLE();
 800faf8:	2180      	movs	r1, #128	; 0x80
 800fafa:	4b45      	ldr	r3, [pc, #276]	; (800fc10 <main+0x808>)
 800fafc:	0149      	lsls	r1, r1, #5
 800fafe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb00:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800fb02:	430a      	orrs	r2, r1
 800fb04:	641a      	str	r2, [r3, #64]	; 0x40
 800fb06:	001a      	movs	r2, r3
 800fb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb0a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 800fb0c:	400b      	ands	r3, r1
 800fb0e:	21dc      	movs	r1, #220	; 0xdc
 800fb10:	1869      	adds	r1, r5, r1
 800fb12:	600b      	str	r3, [r1, #0]
 800fb14:	23dc      	movs	r3, #220	; 0xdc
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fb16:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 800fb18:	18eb      	adds	r3, r5, r3
 800fb1a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fb1c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fb1e:	430b      	orrs	r3, r1
 800fb20:	6353      	str	r3, [r2, #52]	; 0x34
 800fb22:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fb24:	22d8      	movs	r2, #216	; 0xd8
 800fb26:	400b      	ands	r3, r1
 800fb28:	18aa      	adds	r2, r5, r2
 800fb2a:	6013      	str	r3, [r2, #0]
 800fb2c:	23d8      	movs	r3, #216	; 0xd8
 800fb2e:	18eb      	adds	r3, r5, r3
 800fb30:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 800fb32:	23e0      	movs	r3, #224	; 0xe0
 800fb34:	18ea      	adds	r2, r5, r3
 800fb36:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb38:	3bde      	subs	r3, #222	; 0xde
 800fb3a:	6073      	str	r3, [r6, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb3c:	0031      	movs	r1, r6
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb3e:	3301      	adds	r3, #1
 800fb40:	60f3      	str	r3, [r6, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb42:	f7fa f891 	bl	8009c68 <HAL_GPIO_Init>
  hspi->State = HAL_SPI_STATE_BUSY;
 800fb46:	0023      	movs	r3, r4
 800fb48:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 800fb4a:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800fb4c:	335d      	adds	r3, #93	; 0x5d
 800fb4e:	701a      	strb	r2, [r3, #0]
  __HAL_SPI_DISABLE(hspi);
 800fb50:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb52:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800fb54:	6813      	ldr	r3, [r2, #0]
 800fb56:	438b      	bics	r3, r1
 800fb58:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb5a:	23e0      	movs	r3, #224	; 0xe0
 800fb5c:	00db      	lsls	r3, r3, #3
 800fb5e:	4298      	cmp	r0, r3
 800fb60:	d901      	bls.n	800fb66 <main+0x75e>
 800fb62:	f002 f85e 	bl	8011c22 <main+0x281a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fb66:	2580      	movs	r5, #128	; 0x80
 800fb68:	016d      	lsls	r5, r5, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fb6a:	4298      	cmp	r0, r3
 800fb6c:	d001      	beq.n	800fb72 <main+0x76a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800fb72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d106      	bne.n	800fb86 <main+0x77e>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb78:	23e0      	movs	r3, #224	; 0xe0
 800fb7a:	00db      	lsls	r3, r3, #3
 800fb7c:	4298      	cmp	r0, r3
 800fb7e:	d800      	bhi.n	800fb82 <main+0x77a>
 800fb80:	e129      	b.n	800fdd6 <main+0x9ce>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800fb82:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800fb84:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800fb86:	68a6      	ldr	r6, [r4, #8]
 800fb88:	6863      	ldr	r3, [r4, #4]
 800fb8a:	69a1      	ldr	r1, [r4, #24]
 800fb8c:	4333      	orrs	r3, r6
 800fb8e:	6926      	ldr	r6, [r4, #16]
 800fb90:	4333      	orrs	r3, r6
 800fb92:	6966      	ldr	r6, [r4, #20]
 800fb94:	4333      	orrs	r3, r6
 800fb96:	69e6      	ldr	r6, [r4, #28]
 800fb98:	4333      	orrs	r3, r6
 800fb9a:	6a26      	ldr	r6, [r4, #32]
 800fb9c:	4333      	orrs	r3, r6
 800fb9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fba0:	4333      	orrs	r3, r6
 800fba2:	2680      	movs	r6, #128	; 0x80
 800fba4:	00b6      	lsls	r6, r6, #2
 800fba6:	400e      	ands	r6, r1
 800fba8:	4333      	orrs	r3, r6
 800fbaa:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800fbac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbae:	0c09      	lsrs	r1, r1, #16
 800fbb0:	4318      	orrs	r0, r3
 800fbb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
  hspi->State     = HAL_SPI_STATE_READY;
 800fbb4:	2601      	movs	r6, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800fbb6:	4318      	orrs	r0, r3
 800fbb8:	2304      	movs	r3, #4
 800fbba:	4019      	ands	r1, r3
 800fbbc:	4308      	orrs	r0, r1
 800fbbe:	4305      	orrs	r5, r0
 800fbc0:	6055      	str	r5, [r2, #4]
  MX_USART1_UART_Init(115200);
 800fbc2:	20e1      	movs	r0, #225	; 0xe1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fbc4:	2500      	movs	r5, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fbc6:	69d3      	ldr	r3, [r2, #28]
 800fbc8:	491a      	ldr	r1, [pc, #104]	; (800fc34 <main+0x82c>)
 800fbca:	0240      	lsls	r0, r0, #9
 800fbcc:	400b      	ands	r3, r1
 800fbce:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fbd0:	6625      	str	r5, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800fbd2:	345d      	adds	r4, #93	; 0x5d
 800fbd4:	7026      	strb	r6, [r4, #0]
 800fbd6:	f7f2 fa19 	bl	800200c <MX_USART1_UART_Init>
  huart2.Instance = USART2;
 800fbda:	4c17      	ldr	r4, [pc, #92]	; (800fc38 <main+0x830>)
 800fbdc:	4b17      	ldr	r3, [pc, #92]	; (800fc3c <main+0x834>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800fbde:	0020      	movs	r0, r4
  huart2.Instance = USART2;
 800fbe0:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 921600;
 800fbe2:	23e1      	movs	r3, #225	; 0xe1
 800fbe4:	031b      	lsls	r3, r3, #12
 800fbe6:	6063      	str	r3, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800fbe8:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800fbea:	60a5      	str	r5, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800fbec:	6163      	str	r3, [r4, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800fbee:	60e5      	str	r5, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800fbf0:	6125      	str	r5, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fbf2:	61a5      	str	r5, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800fbf4:	61e5      	str	r5, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fbf6:	6225      	str	r5, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800fbf8:	6265      	str	r5, [r4, #36]	; 0x24
 800fbfa:	e021      	b.n	800fc40 <main+0x838>
 800fbfc:	2000018c 	.word	0x2000018c
 800fc00:	fffff0ff 	.word	0xfffff0ff
 800fc04:	200003b8 	.word	0x200003b8
 800fc08:	40002800 	.word	0x40002800
 800fc0c:	000003e7 	.word	0x000003e7
 800fc10:	40021000 	.word	0x40021000
 800fc14:	ff00ffff 	.word	0xff00ffff
 800fc18:	fb8fffbf 	.word	0xfb8fffbf
 800fc1c:	007f7f7f 	.word	0x007f7f7f
 800fc20:	fffbffff 	.word	0xfffbffff
 800fc24:	00ffff3f 	.word	0x00ffff3f
 800fc28:	0000ffff 	.word	0x0000ffff
 800fc2c:	20000420 	.word	0x20000420
 800fc30:	40013000 	.word	0x40013000
 800fc34:	fffff7ff 	.word	0xfffff7ff
 800fc38:	20000638 	.word	0x20000638
 800fc3c:	40004400 	.word	0x40004400
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fc40:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800fc42:	f7fa f8b9 	bl	8009db8 <HAL_UART_Init.constprop.94>
  __HAL_LOCK(huart);
 800fc46:	4bdb      	ldr	r3, [pc, #876]	; (800ffb4 <main+0xbac>)
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	42b3      	cmp	r3, r6
 800fc4c:	d023      	beq.n	800fc96 <main+0x88e>
 800fc4e:	4bd9      	ldr	r3, [pc, #868]	; (800ffb4 <main+0xbac>)
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc50:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 800fc52:	701e      	strb	r6, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800fc54:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800fc56:	0031      	movs	r1, r6
  huart->gState = HAL_UART_STATE_BUSY;
 800fc58:	1d26      	adds	r6, r4, #4
 800fc5a:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc5c:	6813      	ldr	r3, [r2, #0]
 800fc5e:	20b0      	movs	r0, #176	; 0xb0
 800fc60:	603b      	str	r3, [r7, #0]
 800fc62:	2308      	movs	r3, #8
 800fc64:	18fb      	adds	r3, r7, r3
 800fc66:	1818      	adds	r0, r3, r0
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	6003      	str	r3, [r0, #0]
  __HAL_UART_DISABLE(huart);
 800fc6c:	6813      	ldr	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 800fc6e:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800fc70:	438b      	bics	r3, r1
 800fc72:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc74:	6893      	ldr	r3, [r2, #8]
 800fc76:	00db      	lsls	r3, r3, #3
 800fc78:	08db      	lsrs	r3, r3, #3
 800fc7a:	6093      	str	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800fc7c:	f7f9 fba6 	bl	80093cc <UARTEx_SetNbDataToProcess.lto_priv.643>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc80:	2108      	movs	r1, #8
 800fc82:	22b0      	movs	r2, #176	; 0xb0
 800fc84:	1879      	adds	r1, r7, r1
 800fc86:	188a      	adds	r2, r1, r2
 800fc88:	6823      	ldr	r3, [r4, #0]
 800fc8a:	6812      	ldr	r2, [r2, #0]
 800fc8c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800fc8e:	2320      	movs	r3, #32
 800fc90:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800fc92:	4bc8      	ldr	r3, [pc, #800]	; (800ffb4 <main+0xbac>)
 800fc94:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(huart);
 800fc96:	4bc7      	ldr	r3, [pc, #796]	; (800ffb4 <main+0xbac>)
 800fc98:	4dc7      	ldr	r5, [pc, #796]	; (800ffb8 <main+0xbb0>)
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d024      	beq.n	800fcea <main+0x8e2>
 800fca0:	2101      	movs	r1, #1
 800fca2:	4bc4      	ldr	r3, [pc, #784]	; (800ffb4 <main+0xbac>)
  huart->gState = HAL_UART_STATE_BUSY;
 800fca4:	1d2e      	adds	r6, r5, #4
  __HAL_LOCK(huart);
 800fca6:	7019      	strb	r1, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800fca8:	2324      	movs	r3, #36	; 0x24
 800fcaa:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcac:	682b      	ldr	r3, [r5, #0]
 800fcae:	20b0      	movs	r0, #176	; 0xb0
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	603a      	str	r2, [r7, #0]
 800fcb4:	2208      	movs	r2, #8
 800fcb6:	18ba      	adds	r2, r7, r2
 800fcb8:	1810      	adds	r0, r2, r0
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	6002      	str	r2, [r0, #0]
  __HAL_UART_DISABLE(huart);
 800fcbe:	681a      	ldr	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 800fcc0:	0028      	movs	r0, r5
  __HAL_UART_DISABLE(huart);
 800fcc2:	438a      	bics	r2, r1
 800fcc4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fcc6:	689a      	ldr	r2, [r3, #8]
 800fcc8:	49bc      	ldr	r1, [pc, #752]	; (800ffbc <main+0xbb4>)
 800fcca:	400a      	ands	r2, r1
 800fccc:	609a      	str	r2, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800fcce:	f7f9 fb7d 	bl	80093cc <UARTEx_SetNbDataToProcess.lto_priv.643>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcd2:	2108      	movs	r1, #8
 800fcd4:	22b0      	movs	r2, #176	; 0xb0
 800fcd6:	1879      	adds	r1, r7, r1
 800fcd8:	188a      	adds	r2, r1, r2
 800fcda:	6812      	ldr	r2, [r2, #0]
 800fcdc:	682b      	ldr	r3, [r5, #0]
 800fcde:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800fce0:	2320      	movs	r3, #32
 800fce2:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800fce4:	2300      	movs	r3, #0
 800fce6:	4ab3      	ldr	r2, [pc, #716]	; (800ffb4 <main+0xbac>)
 800fce8:	7013      	strb	r3, [r2, #0]
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800fcea:	0020      	movs	r0, r4
 800fcec:	f7f9 fba0 	bl	8009430 <HAL_UARTEx_DisableFifoMode>
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
  }
  else
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800fcf0:	2208      	movs	r2, #8
 800fcf2:	23b4      	movs	r3, #180	; 0xb4
 800fcf4:	18ba      	adds	r2, r7, r2
 800fcf6:	18d3      	adds	r3, r2, r3
 800fcf8:	681b      	ldr	r3, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 800fcfa:	2208      	movs	r2, #8
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800fcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 800fcfe:	23b4      	movs	r3, #180	; 0xb4
 800fd00:	18ba      	adds	r2, r7, r2
 800fd02:	18d3      	adds	r3, r2, r3
 800fd04:	681b      	ldr	r3, [r3, #0]
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800fd06:	2208      	movs	r2, #8
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 800fd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800fd0a:	23b4      	movs	r3, #180	; 0xb4
 800fd0c:	18ba      	adds	r2, r7, r2
 800fd0e:	18d3      	adds	r3, r2, r3
 800fd10:	681b      	ldr	r3, [r3, #0]
  *         @ref FLASH_OB_USER_INPUT_RESET_HOLDER(*)
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 800fd12:	2208      	movs	r2, #8
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800fd14:	6a1b      	ldr	r3, [r3, #32]
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 800fd16:	23b4      	movs	r3, #180	; 0xb4
 800fd18:	18ba      	adds	r2, r7, r2
 800fd1a:	18d3      	adds	r3, r2, r3
 800fd1c:	681b      	ldr	r3, [r3, #0]
  */
static void FLASH_OB_GetPCROP1A(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr)
{
  uint32_t pcrop;

  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 800fd1e:	2208      	movs	r2, #8
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 800fd20:	6a1c      	ldr	r4, [r3, #32]
  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 800fd22:	23b4      	movs	r3, #180	; 0xb4
 800fd24:	18ba      	adds	r2, r7, r2
 800fd26:	18d3      	adds	r3, r2, r3
 800fd28:	681b      	ldr	r3, [r3, #0]
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1AStartAddr += FLASH_BASE;

  pcrop = FLASH->PCROP1AER;
 800fd2a:	2208      	movs	r2, #8
  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 800fd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  pcrop = FLASH->PCROP1AER;
 800fd2e:	23b4      	movs	r3, #180	; 0xb4
 800fd30:	18ba      	adds	r2, r7, r2
 800fd32:	18d3      	adds	r3, r2, r3
 800fd34:	681b      	ldr	r3, [r3, #0]
  */
static void FLASH_OB_GetPCROP1B(uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
  uint32_t pcrop;

  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 800fd36:	2208      	movs	r2, #8
  pcrop = FLASH->PCROP1AER;
 800fd38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 800fd3a:	23b4      	movs	r3, #180	; 0xb4
 800fd3c:	18ba      	adds	r2, r7, r2
 800fd3e:	18d3      	adds	r3, r2, r3
 800fd40:	681b      	ldr	r3, [r3, #0]
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1BStartAddr += FLASH_BASE;

  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 800fd42:	2208      	movs	r2, #8
  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 800fd44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 800fd46:	23b4      	movs	r3, #180	; 0xb4
 800fd48:	18ba      	adds	r2, r7, r2
 800fd4a:	18d3      	adds	r3, r2, r3
 800fd4c:	681b      	ldr	r3, [r3, #0]
  if (((obInit.USERConfig & OB_USER_nBOOT1) == OB_BOOT1_SYSTEM) &&
 800fd4e:	2580      	movs	r5, #128	; 0x80
 800fd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  *         beginning of the Flash (page 0).
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize)
{
  uint32_t secmem = FLASH->SECR;
 800fd52:	4b9b      	ldr	r3, [pc, #620]	; (800ffc0 <main+0xbb8>)
 800fd54:	04ad      	lsls	r5, r5, #18
 800fd56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd58:	23c0      	movs	r3, #192	; 0xc0
 800fd5a:	049b      	lsls	r3, r3, #18
 800fd5c:	4023      	ands	r3, r4
    printf("Boot config OK\n");
 800fd5e:	4899      	ldr	r0, [pc, #612]	; (800ffc4 <main+0xbbc>)
  if (((obInit.USERConfig & OB_USER_nBOOT1) == OB_BOOT1_SYSTEM) &&
 800fd60:	42ab      	cmp	r3, r5
 800fd62:	d04f      	beq.n	800fe04 <main+0x9fc>
  printf("Enabling BOOT0\n");
 800fd64:	4898      	ldr	r0, [pc, #608]	; (800ffc8 <main+0xbc0>)
 800fd66:	f004 fac1 	bl	80142ec <__wrap_puts>
  obInit.USERConfig &= ~OB_USER_nBOOT_SEL;
 800fd6a:	4b98      	ldr	r3, [pc, #608]	; (800ffcc <main+0xbc4>)
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800fd6c:	2208      	movs	r2, #8
 800fd6e:	401c      	ands	r4, r3
 800fd70:	23b4      	movs	r3, #180	; 0xb4
  obInit.USERConfig |= OB_BOOT1_SYSTEM;
 800fd72:	0029      	movs	r1, r5
 800fd74:	18ba      	adds	r2, r7, r2
 800fd76:	18d3      	adds	r3, r2, r3
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4321      	orrs	r1, r4
 800fd7c:	695b      	ldr	r3, [r3, #20]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	db2b      	blt.n	800fdda <main+0x9d2>
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 800fd82:	2208      	movs	r2, #8
 800fd84:	23b4      	movs	r3, #180	; 0xb4
 800fd86:	18ba      	adds	r2, r7, r2
 800fd88:	18d3      	adds	r3, r2, r3
 800fd8a:	2280      	movs	r2, #128	; 0x80
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	05d2      	lsls	r2, r2, #23
 800fd90:	695b      	ldr	r3, [r3, #20]
 800fd92:	4213      	tst	r3, r2
 800fd94:	d000      	beq.n	800fd98 <main+0x990>
 800fd96:	e151      	b.n	801003c <main+0xc34>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800fd98:	2208      	movs	r2, #8
 800fd9a:	23b4      	movs	r3, #180	; 0xb4
 800fd9c:	18ba      	adds	r2, r7, r2
 800fd9e:	18d3      	adds	r3, r2, r3
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	2108      	movs	r1, #8
 800fda4:	695a      	ldr	r2, [r3, #20]
 800fda6:	2380      	movs	r3, #128	; 0x80
 800fda8:	061b      	lsls	r3, r3, #24
 800fdaa:	4313      	orrs	r3, r2
 800fdac:	22b4      	movs	r2, #180	; 0xb4
 800fdae:	1879      	adds	r1, r7, r1
 800fdb0:	188a      	adds	r2, r1, r2
 800fdb2:	6812      	ldr	r2, [r2, #0]
 800fdb4:	6153      	str	r3, [r2, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800fdb6:	23b4      	movs	r3, #180	; 0xb4
 800fdb8:	18cb      	adds	r3, r1, r3
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	695b      	ldr	r3, [r3, #20]
 800fdbe:	e020      	b.n	800fe02 <main+0x9fa>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800fdc0:	2184      	movs	r1, #132	; 0x84
 800fdc2:	0209      	lsls	r1, r1, #8
 800fdc4:	4321      	orrs	r1, r4
 800fdc6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fdc8:	2802      	cmp	r0, #2
 800fdca:	d000      	beq.n	800fdce <main+0x9c6>
 800fdcc:	e4bd      	b.n	800f74a <main+0x342>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800fdce:	2180      	movs	r1, #128	; 0x80
 800fdd0:	0109      	lsls	r1, r1, #4
 800fdd2:	6059      	str	r1, [r3, #4]
 800fdd4:	e4b9      	b.n	800f74a <main+0x342>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e6d4      	b.n	800fb84 <main+0x77c>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800fdda:	2008      	movs	r0, #8
 800fddc:	22b4      	movs	r2, #180	; 0xb4
 800fdde:	1838      	adds	r0, r7, r0
 800fde0:	1882      	adds	r2, r0, r2
 800fde2:	4b7b      	ldr	r3, [pc, #492]	; (800ffd0 <main+0xbc8>)
 800fde4:	6812      	ldr	r2, [r2, #0]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800fde6:	2008      	movs	r0, #8
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800fde8:	6093      	str	r3, [r2, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800fdea:	22b4      	movs	r2, #180	; 0xb4
 800fdec:	1838      	adds	r0, r7, r0
 800fdee:	1882      	adds	r2, r0, r2
 800fdf0:	4b78      	ldr	r3, [pc, #480]	; (800ffd4 <main+0xbcc>)
 800fdf2:	6812      	ldr	r2, [r2, #0]
 800fdf4:	6093      	str	r3, [r2, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800fdf6:	23b4      	movs	r3, #180	; 0xb4
 800fdf8:	18c3      	adds	r3, r0, r3
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	695b      	ldr	r3, [r3, #20]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	dabf      	bge.n	800fd82 <main+0x97a>
  printf("BOOT0 enable failed\n");
 800fe02:	4875      	ldr	r0, [pc, #468]	; (800ffd8 <main+0xbd0>)
 800fe04:	f004 fa72 	bl	80142ec <__wrap_puts>
  return uwTick;
 800fe08:	4a74      	ldr	r2, [pc, #464]	; (800ffdc <main+0xbd4>)
 800fe0a:	6811      	ldr	r1, [r2, #0]
 800fe0c:	6813      	ldr	r3, [r2, #0]
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800fe0e:	1a5b      	subs	r3, r3, r1
 800fe10:	2b0a      	cmp	r3, #10
 800fe12:	d9fb      	bls.n	800fe0c <main+0xa04>
	queue_cmd_end = 0;
 800fe14:	2400      	movs	r4, #0
 800fe16:	4b72      	ldr	r3, [pc, #456]	; (800ffe0 <main+0xbd8>)
 800fe18:	3370      	adds	r3, #112	; 0x70
 800fe1a:	701c      	strb	r4, [r3, #0]
		if(i == 3){continue;}//writing to this reg controlls the RSS.//remove if works
 800fe1c:	2c03      	cmp	r4, #3
 800fe1e:	d004      	beq.n	800fe2a <main+0xa22>
		RegInt_setregf(i, 0, 1);
 800fe20:	2201      	movs	r2, #1
 800fe22:	2100      	movs	r1, #0
 800fe24:	0020      	movs	r0, r4
 800fe26:	f7f5 fe61 	bl	8005aec <RegInt_setregf>
	for(uint8_t i = 0; i < 0xFF; i++){
 800fe2a:	3401      	adds	r4, #1
 800fe2c:	b2e4      	uxtb	r4, r4
 800fe2e:	2cff      	cmp	r4, #255	; 0xff
 800fe30:	d1f4      	bne.n	800fe1c <main+0xa14>
	RegInt_setregf(0x07, 115200, 1);//set default baud rate
 800fe32:	21e1      	movs	r1, #225	; 0xe1
 800fe34:	2201      	movs	r2, #1
 800fe36:	0249      	lsls	r1, r1, #9
 800fe38:	2007      	movs	r0, #7
 800fe3a:	f7f5 fe57 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0x0A, 0, 1);//set default baud rate
 800fe3e:	2201      	movs	r2, #1
 800fe40:	2100      	movs	r1, #0
 800fe42:	200a      	movs	r0, #10
 800fe44:	f7f5 fe52 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0x10, HARDWARE_REVISION, 1);//set product identification register
 800fe48:	2201      	movs	r2, #1
 800fe4a:	4966      	ldr	r1, [pc, #408]	; (800ffe4 <main+0xbdc>)
 800fe4c:	2010      	movs	r0, #16
 800fe4e:	f7f5 fe4d 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0x11, FIRMWARE_REVISION, 1);//set firmware revision register
 800fe52:	2201      	movs	r2, #1
 800fe54:	4964      	ldr	r1, [pc, #400]	; (800ffe8 <main+0xbe0>)
 800fe56:	2011      	movs	r0, #17
 800fe58:	f7f5 fe48 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0xD4, 600, 1);//set default mean sq distance threshold
 800fe5c:	2196      	movs	r1, #150	; 0x96
 800fe5e:	2201      	movs	r2, #1
 800fe60:	0089      	lsls	r1, r1, #2
 800fe62:	20d4      	movs	r0, #212	; 0xd4
 800fe64:	f7f5 fe42 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0xD5, 1000, 1);//set default radius for gf kernal
 800fe68:	21fa      	movs	r1, #250	; 0xfa
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	0089      	lsls	r1, r1, #2
 800fe6e:	20d5      	movs	r0, #213	; 0xd5
 800fe70:	f7f5 fe3c 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0xD6, 0x0000000F, 1);//set default eval mode
 800fe74:	2201      	movs	r2, #1
 800fe76:	210f      	movs	r1, #15
 800fe78:	20d6      	movs	r0, #214	; 0xd6
 800fe7a:	f7f5 fe37 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0xD7, 0x00000002, 1);//set default radius for averaging
 800fe7e:	2201      	movs	r2, #1
 800fe80:	2102      	movs	r1, #2
 800fe82:	20d7      	movs	r0, #215	; 0xd7
 800fe84:	f7f5 fe32 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0xD8, 500, 1);//sets theshold data zeroing
 800fe88:	21fa      	movs	r1, #250	; 0xfa
	uart_state = 0;
 800fe8a:	2500      	movs	r5, #0
	RegInt_setregf(0xD8, 500, 1);//sets theshold data zeroing
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	0049      	lsls	r1, r1, #1
 800fe90:	20d8      	movs	r0, #216	; 0xd8
 800fe92:	f7f5 fe2b 	bl	8005aec <RegInt_setregf>
	RegInt_setregf(0xD9, 0x00000000, 1);//sets no bandstop
 800fe96:	2201      	movs	r2, #1
 800fe98:	2100      	movs	r1, #0
 800fe9a:	20d9      	movs	r0, #217	; 0xd9
 800fe9c:	f7f5 fe26 	bl	8005aec <RegInt_setregf>
	uart_state = 0;
 800fea0:	4b4f      	ldr	r3, [pc, #316]	; (800ffe0 <main+0xbd8>)
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 800fea2:	2101      	movs	r1, #1
	uart_state = 0;
 800fea4:	334c      	adds	r3, #76	; 0x4c
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 800fea6:	4851      	ldr	r0, [pc, #324]	; (800ffec <main+0xbe4>)
	uart_state = 0;
 800fea8:	701d      	strb	r5, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 800feaa:	f7f9 f8cb 	bl	8009044 <HAL_UART_Receive_IT.constprop.83>
	DBG_PRINTLN("Registers Initialised");
 800feae:	4850      	ldr	r0, [pc, #320]	; (800fff0 <main+0xbe8>)
 800feb0:	f004 fa2e 	bl	8014310 <__wrap_printf>
 800feb4:	484f      	ldr	r0, [pc, #316]	; (800fff4 <main+0xbec>)
 800feb6:	f004 fa2b 	bl	8014310 <__wrap_printf>
 800feba:	4c4f      	ldr	r4, [pc, #316]	; (800fff8 <main+0xbf0>)
 800febc:	2285      	movs	r2, #133	; 0x85
 800febe:	0021      	movs	r1, r4
 800fec0:	484e      	ldr	r0, [pc, #312]	; (800fffc <main+0xbf4>)
 800fec2:	f004 fa25 	bl	8014310 <__wrap_printf>
	INF_PRINTLN("build at %s %s", __DATE__, __TIME__);
 800fec6:	4e4e      	ldr	r6, [pc, #312]	; (8010000 <main+0xbf8>)
 800fec8:	0030      	movs	r0, r6
 800feca:	f004 fa21 	bl	8014310 <__wrap_printf>
 800fece:	4a4d      	ldr	r2, [pc, #308]	; (8010004 <main+0xbfc>)
 800fed0:	494d      	ldr	r1, [pc, #308]	; (8010008 <main+0xc00>)
 800fed2:	484e      	ldr	r0, [pc, #312]	; (801000c <main+0xc04>)
 800fed4:	f004 fa1c 	bl	8014310 <__wrap_printf>
 800fed8:	22a7      	movs	r2, #167	; 0xa7
 800feda:	0021      	movs	r1, r4
 800fedc:	0052      	lsls	r2, r2, #1
 800fede:	4847      	ldr	r0, [pc, #284]	; (800fffc <main+0xbf4>)
 800fee0:	f004 fa16 	bl	8014310 <__wrap_printf>
	INF_PRINTLN("of firmware revision: %d.%d.%d", get_byte(FIRMWARE_REVISION,2),get_byte(FIRMWARE_REVISION,1),get_byte(FIRMWARE_REVISION,0) );
 800fee4:	0030      	movs	r0, r6
 800fee6:	f004 fa13 	bl	8014310 <__wrap_printf>
 800feea:	002b      	movs	r3, r5
 800feec:	2204      	movs	r2, #4
 800feee:	2101      	movs	r1, #1
 800fef0:	4847      	ldr	r0, [pc, #284]	; (8010010 <main+0xc08>)
 800fef2:	f004 fa0d 	bl	8014310 <__wrap_printf>
 800fef6:	2250      	movs	r2, #80	; 0x50
 800fef8:	0021      	movs	r1, r4
 800fefa:	32ff      	adds	r2, #255	; 0xff
 800fefc:	483f      	ldr	r0, [pc, #252]	; (800fffc <main+0xbf4>)
 800fefe:	f004 fa07 	bl	8014310 <__wrap_printf>
	INF_PRINTLN("for hardware revision: %d.%d.%d", get_byte(HARDWARE_REVISION,2),get_byte(HARDWARE_REVISION,1),get_byte(HARDWARE_REVISION,0) );
 800ff02:	0030      	movs	r0, r6
 800ff04:	f004 fa04 	bl	8014310 <__wrap_printf>
 800ff08:	2201      	movs	r2, #1
 800ff0a:	002b      	movs	r3, r5
 800ff0c:	0011      	movs	r1, r2
 800ff0e:	4841      	ldr	r0, [pc, #260]	; (8010014 <main+0xc0c>)
 800ff10:	f004 f9fe 	bl	8014310 <__wrap_printf>
 800ff14:	22a8      	movs	r2, #168	; 0xa8
 800ff16:	0021      	movs	r1, r4
 800ff18:	0052      	lsls	r2, r2, #1
 800ff1a:	4838      	ldr	r0, [pc, #224]	; (800fffc <main+0xbf4>)
 800ff1c:	f004 f9f8 	bl	8014310 <__wrap_printf>
	radar_hal = *acc_hal_integration_get_implementation();
 800ff20:	4e3d      	ldr	r6, [pc, #244]	; (8010018 <main+0xc10>)
 800ff22:	493e      	ldr	r1, [pc, #248]	; (801001c <main+0xc14>)
 800ff24:	3644      	adds	r6, #68	; 0x44
 800ff26:	2238      	movs	r2, #56	; 0x38
 800ff28:	3134      	adds	r1, #52	; 0x34
 800ff2a:	0030      	movs	r0, r6
 800ff2c:	f004 fdc0 	bl	8014ab0 <memcpy>
 800ff30:	4b39      	ldr	r3, [pc, #228]	; (8010018 <main+0xc10>)
 800ff32:	4d3b      	ldr	r5, [pc, #236]	; (8010020 <main+0xc18>)
 800ff34:	337c      	adds	r3, #124	; 0x7c
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d000      	beq.n	800ff3e <main+0xb36>
 800ff3c:	e298      	b.n	8010470 <main+0x1068>
 800ff3e:	2238      	movs	r2, #56	; 0x38
 800ff40:	0031      	movs	r1, r6
 800ff42:	0028      	movs	r0, r5
 800ff44:	f004 fdb4 	bl	8014ab0 <memcpy>
 800ff48:	4b36      	ldr	r3, [pc, #216]	; (8010024 <main+0xc1c>)
 800ff4a:	781a      	ldrb	r2, [r3, #0]
 800ff4c:	2a00      	cmp	r2, #0
 800ff4e:	d104      	bne.n	800ff5a <main+0xb52>
 800ff50:	2101      	movs	r1, #1
 800ff52:	4a35      	ldr	r2, [pc, #212]	; (8010028 <main+0xc20>)
 800ff54:	7019      	strb	r1, [r3, #0]
 800ff56:	3270      	adds	r2, #112	; 0x70
 800ff58:	7011      	strb	r1, [r2, #0]
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d100      	bne.n	800ff62 <main+0xb5a>
 800ff60:	e114      	b.n	801018c <main+0xd84>
 800ff62:	4b2d      	ldr	r3, [pc, #180]	; (8010018 <main+0xc10>)
 800ff64:	337d      	adds	r3, #125	; 0x7d
 800ff66:	781e      	ldrb	r6, [r3, #0]
 800ff68:	2e00      	cmp	r6, #0
 800ff6a:	d113      	bne.n	800ff94 <main+0xb8c>
 800ff6c:	2254      	movs	r2, #84	; 0x54
 800ff6e:	492f      	ldr	r1, [pc, #188]	; (801002c <main+0xc24>)
 800ff70:	32ff      	adds	r2, #255	; 0xff
 800ff72:	2048      	movs	r0, #72	; 0x48
 800ff74:	f7f2 ffac 	bl	8002ed0 <acc_rss_integration_mem_alloc_debug>
 800ff78:	4b2d      	ldr	r3, [pc, #180]	; (8010030 <main+0xc28>)
 800ff7a:	6018      	str	r0, [r3, #0]
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d100      	bne.n	800ff82 <main+0xb7a>
 800ff80:	e104      	b.n	801018c <main+0xd84>
 800ff82:	4b27      	ldr	r3, [pc, #156]	; (8010020 <main+0xc18>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	429e      	cmp	r6, r3
 800ff88:	d200      	bcs.n	800ff8c <main+0xb84>
 800ff8a:	e0d9      	b.n	8010140 <main+0xd38>
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	4b22      	ldr	r3, [pc, #136]	; (8010018 <main+0xc10>)
 800ff90:	337d      	adds	r3, #125	; 0x7d
 800ff92:	701a      	strb	r2, [r3, #0]
 800ff94:	2201      	movs	r2, #1
 800ff96:	4b20      	ldr	r3, [pc, #128]	; (8010018 <main+0xc10>)
 800ff98:	337c      	adds	r3, #124	; 0x7c
 800ff9a:	701a      	strb	r2, [r3, #0]
 800ff9c:	4b20      	ldr	r3, [pc, #128]	; (8010020 <main+0xc18>)
 800ff9e:	001a      	movs	r2, r3
 800ffa0:	3230      	adds	r2, #48	; 0x30
 800ffa2:	7812      	ldrb	r2, [r2, #0]
 800ffa4:	2a01      	cmp	r2, #1
 800ffa6:	d800      	bhi.n	800ffaa <main+0xba2>
 800ffa8:	e106      	b.n	80101b8 <main+0xdb0>
 800ffaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffac:	4a21      	ldr	r2, [pc, #132]	; (8010034 <main+0xc2c>)
 800ffae:	4922      	ldr	r1, [pc, #136]	; (8010038 <main+0xc30>)
 800ffb0:	2002      	movs	r0, #2
 800ffb2:	e0ef      	b.n	8010194 <main+0xd8c>
 800ffb4:	200006b4 	.word	0x200006b4
 800ffb8:	20000638 	.word	0x20000638
 800ffbc:	f1ffffff 	.word	0xf1ffffff
 800ffc0:	40022004 	.word	0x40022004
 800ffc4:	0801c48d 	.word	0x0801c48d
 800ffc8:	0801c49c 	.word	0x0801c49c
 800ffcc:	3c4fff00 	.word	0x3c4fff00
 800ffd0:	45670123 	.word	0x45670123
 800ffd4:	cdef89ab 	.word	0xcdef89ab
 800ffd8:	0801c4bc 	.word	0x0801c4bc
 800ffdc:	200003e4 	.word	0x200003e4
 800ffe0:	2000018c 	.word	0x2000018c
 800ffe4:	bd010100 	.word	0xbd010100
 800ffe8:	bf010400 	.word	0xbf010400
 800ffec:	200005a0 	.word	0x200005a0
 800fff0:	0801b1ea 	.word	0x0801b1ea
 800fff4:	0801c4d0 	.word	0x0801c4d0
 800fff8:	0801b202 	.word	0x0801b202
 800fffc:	0801bcb9 	.word	0x0801bcb9
 8010000:	0801c4e6 	.word	0x0801c4e6
 8010004:	0801c4ec 	.word	0x0801c4ec
 8010008:	0801c4f5 	.word	0x0801c4f5
 801000c:	0801c501 	.word	0x0801c501
 8010010:	0801c510 	.word	0x0801c510
 8010014:	0801c52f 	.word	0x0801c52f
 8010018:	2000020c 	.word	0x2000020c
 801001c:	08014c00 	.word	0x08014c00
 8010020:	200003e8 	.word	0x200003e8
 8010024:	2000008c 	.word	0x2000008c
 8010028:	2000010c 	.word	0x2000010c
 801002c:	0801c54f 	.word	0x0801c54f
 8010030:	20000598 	.word	0x20000598
 8010034:	0801c57e 	.word	0x0801c57e
 8010038:	0801c59e 	.word	0x0801c59e
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 801003c:	2408      	movs	r4, #8
 801003e:	20b4      	movs	r0, #180	; 0xb4
 8010040:	193c      	adds	r4, r7, r4
 8010042:	1820      	adds	r0, r4, r0
 8010044:	4b49      	ldr	r3, [pc, #292]	; (801016c <main+0xd64>)
 8010046:	6800      	ldr	r0, [r0, #0]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8010048:	2408      	movs	r4, #8
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 801004a:	60c3      	str	r3, [r0, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 801004c:	20b4      	movs	r0, #180	; 0xb4
 801004e:	193c      	adds	r4, r7, r4
 8010050:	1820      	adds	r0, r4, r0
 8010052:	4b47      	ldr	r3, [pc, #284]	; (8010170 <main+0xd68>)
 8010054:	6800      	ldr	r0, [r0, #0]
 8010056:	60c3      	str	r3, [r0, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8010058:	23b4      	movs	r3, #180	; 0xb4
 801005a:	18e3      	adds	r3, r4, r3
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	0020      	movs	r0, r4
 8010060:	695b      	ldr	r3, [r3, #20]
 8010062:	4013      	ands	r3, r2
 8010064:	d000      	beq.n	8010068 <main+0xc60>
 8010066:	e697      	b.n	800fd98 <main+0x990>
  __HAL_LOCK(&pFlash);
 8010068:	4c42      	ldr	r4, [pc, #264]	; (8010174 <main+0xd6c>)
 801006a:	7822      	ldrb	r2, [r4, #0]
 801006c:	2a01      	cmp	r2, #1
 801006e:	d053      	beq.n	8010118 <main+0xd10>
 8010070:	2201      	movs	r2, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010072:	6063      	str	r3, [r4, #4]
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8010074:	33b4      	adds	r3, #180	; 0xb4
 8010076:	18c3      	adds	r3, r0, r3
 8010078:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(&pFlash);
 801007a:	7022      	strb	r2, [r4, #0]
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 801007c:	6a1b      	ldr	r3, [r3, #32]
 801007e:	b2db      	uxtb	r3, r3
  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8010080:	2baa      	cmp	r3, #170	; 0xaa
 8010082:	d002      	beq.n	801008a <main+0xc82>
 8010084:	2bcc      	cmp	r3, #204	; 0xcc
 8010086:	d000      	beq.n	801008a <main+0xc82>
    return (OB_RDP_LEVEL_1);
 8010088:	23bb      	movs	r3, #187	; 0xbb
  optr = FLASH->OPTR;
 801008a:	2008      	movs	r0, #8
 801008c:	22b4      	movs	r2, #180	; 0xb4
 801008e:	1838      	adds	r0, r7, r0
 8010090:	1882      	adds	r2, r0, r2
 8010092:	6812      	ldr	r2, [r2, #0]
 8010094:	6a15      	ldr	r5, [r2, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8010096:	4a38      	ldr	r2, [pc, #224]	; (8010178 <main+0xd70>)
 8010098:	4015      	ands	r5, r2
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 801009a:	430d      	orrs	r5, r1
 801009c:	431d      	orrs	r5, r3
 801009e:	23b4      	movs	r3, #180	; 0xb4
 80100a0:	18c3      	adds	r3, r0, r3
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	621d      	str	r5, [r3, #32]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80100a6:	f7f8 ff8f 	bl	8008fc8 <FLASH_WaitForLastOperation.constprop.92>
  if (status == HAL_OK)
 80100aa:	2800      	cmp	r0, #0
 80100ac:	d11e      	bne.n	80100ec <main+0xce4>
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80100ae:	2208      	movs	r2, #8
 80100b0:	23b4      	movs	r3, #180	; 0xb4
 80100b2:	18ba      	adds	r2, r7, r2
 80100b4:	18d3      	adds	r3, r2, r3
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2108      	movs	r1, #8
 80100ba:	695a      	ldr	r2, [r3, #20]
 80100bc:	2380      	movs	r3, #128	; 0x80
 80100be:	029b      	lsls	r3, r3, #10
 80100c0:	4313      	orrs	r3, r2
 80100c2:	22b4      	movs	r2, #180	; 0xb4
 80100c4:	1879      	adds	r1, r7, r1
 80100c6:	188a      	adds	r2, r1, r2
 80100c8:	6812      	ldr	r2, [r2, #0]
 80100ca:	6153      	str	r3, [r2, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80100cc:	f7f8 ff7c 	bl	8008fc8 <FLASH_WaitForLastOperation.constprop.92>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80100d0:	2208      	movs	r2, #8
 80100d2:	23b4      	movs	r3, #180	; 0xb4
 80100d4:	18ba      	adds	r2, r7, r2
 80100d6:	18d3      	adds	r3, r2, r3
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4a28      	ldr	r2, [pc, #160]	; (801017c <main+0xd74>)
 80100dc:	695b      	ldr	r3, [r3, #20]
 80100de:	2108      	movs	r1, #8
 80100e0:	4013      	ands	r3, r2
 80100e2:	22b4      	movs	r2, #180	; 0xb4
 80100e4:	1879      	adds	r1, r7, r1
 80100e6:	188a      	adds	r2, r1, r2
 80100e8:	6812      	ldr	r2, [r2, #0]
 80100ea:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80100ec:	2300      	movs	r3, #0
 80100ee:	7023      	strb	r3, [r4, #0]
      if (result == HAL_OK)
 80100f0:	4298      	cmp	r0, r3
 80100f2:	d111      	bne.n	8010118 <main+0xd10>
        printf("Reset and reload\n");
 80100f4:	4822      	ldr	r0, [pc, #136]	; (8010180 <main+0xd78>)
 80100f6:	f004 f8f9 	bl	80142ec <__wrap_puts>
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80100fa:	2208      	movs	r2, #8
 80100fc:	23b4      	movs	r3, #180	; 0xb4
 80100fe:	18ba      	adds	r2, r7, r2
 8010100:	18d3      	adds	r3, r2, r3
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2108      	movs	r1, #8
 8010106:	695a      	ldr	r2, [r3, #20]
 8010108:	2380      	movs	r3, #128	; 0x80
 801010a:	051b      	lsls	r3, r3, #20
 801010c:	4313      	orrs	r3, r2
 801010e:	22b4      	movs	r2, #180	; 0xb4
 8010110:	1879      	adds	r1, r7, r1
 8010112:	188a      	adds	r2, r1, r2
 8010114:	6812      	ldr	r2, [r2, #0]
 8010116:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8010118:	2208      	movs	r2, #8
 801011a:	23b4      	movs	r3, #180	; 0xb4
 801011c:	18ba      	adds	r2, r7, r2
 801011e:	18d3      	adds	r3, r2, r3
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2108      	movs	r1, #8
 8010124:	695a      	ldr	r2, [r3, #20]
 8010126:	2380      	movs	r3, #128	; 0x80
 8010128:	05db      	lsls	r3, r3, #23
 801012a:	4313      	orrs	r3, r2
 801012c:	22b4      	movs	r2, #180	; 0xb4
 801012e:	1879      	adds	r1, r7, r1
 8010130:	188a      	adds	r2, r1, r2
 8010132:	6812      	ldr	r2, [r2, #0]
 8010134:	6153      	str	r3, [r2, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 8010136:	23b4      	movs	r3, #180	; 0xb4
 8010138:	18cb      	adds	r3, r1, r3
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	695b      	ldr	r3, [r3, #20]
 801013e:	e62b      	b.n	800fd98 <main+0x990>
 8010140:	2348      	movs	r3, #72	; 0x48
 8010142:	4a10      	ldr	r2, [pc, #64]	; (8010184 <main+0xd7c>)
 8010144:	4373      	muls	r3, r6
 8010146:	6815      	ldr	r5, [r2, #0]
 8010148:	2100      	movs	r1, #0
 801014a:	18ed      	adds	r5, r5, r3
 801014c:	2244      	movs	r2, #68	; 0x44
 801014e:	0028      	movs	r0, r5
 8010150:	f002 f88a 	bl	8012268 <memset>
 8010154:	002a      	movs	r2, r5
 8010156:	2300      	movs	r3, #0
 8010158:	3241      	adds	r2, #65	; 0x41
 801015a:	7013      	strb	r3, [r2, #0]
 801015c:	3a01      	subs	r2, #1
 801015e:	7013      	strb	r3, [r2, #0]
 8010160:	7093      	strb	r3, [r2, #2]
 8010162:	4b09      	ldr	r3, [pc, #36]	; (8010188 <main+0xd80>)
 8010164:	3601      	adds	r6, #1
 8010166:	646b      	str	r3, [r5, #68]	; 0x44
 8010168:	e70b      	b.n	800ff82 <main+0xb7a>
 801016a:	46c0      	nop			; (mov r8, r8)
 801016c:	08192a3b 	.word	0x08192a3b
 8010170:	4c5d6e7f 	.word	0x4c5d6e7f
 8010174:	20000488 	.word	0x20000488
 8010178:	c0b00000 	.word	0xc0b00000
 801017c:	fffdffff 	.word	0xfffdffff
 8010180:	0801c4ab 	.word	0x0801c4ab
 8010184:	20000598 	.word	0x20000598
 8010188:	ff800000 	.word	0xff800000
 801018c:	2000      	movs	r0, #0
 801018e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010190:	4abc      	ldr	r2, [pc, #752]	; (8010484 <main+0x107c>)
 8010192:	49bd      	ldr	r1, [pc, #756]	; (8010488 <main+0x1080>)
 8010194:	4798      	blx	r3
 8010196:	4bbd      	ldr	r3, [pc, #756]	; (801048c <main+0x1084>)
 8010198:	337c      	adds	r3, #124	; 0x7c
	if (!acc_rss_activate(&radar_hal))
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d10b      	bne.n	80101b8 <main+0xdb0>
		ERR_PRINTLN("RSS activation fail");
 80101a0:	48bb      	ldr	r0, [pc, #748]	; (8010490 <main+0x1088>)
 80101a2:	f004 f8b5 	bl	8014310 <__wrap_printf>
 80101a6:	48bb      	ldr	r0, [pc, #748]	; (8010494 <main+0x108c>)
 80101a8:	f004 f8b2 	bl	8014310 <__wrap_printf>
 80101ac:	2258      	movs	r2, #88	; 0x58
 80101ae:	0021      	movs	r1, r4
 80101b0:	32ff      	adds	r2, #255	; 0xff
 80101b2:	48b9      	ldr	r0, [pc, #740]	; (8010498 <main+0x1090>)
 80101b4:	f004 f8ac 	bl	8014310 <__wrap_printf>
 80101b8:	2201      	movs	r2, #1
 80101ba:	4bb8      	ldr	r3, [pc, #736]	; (801049c <main+0x1094>)
 80101bc:	705a      	strb	r2, [r3, #1]
	sparse_config = acc_service_sparse_configuration_create();
 80101be:	f7f1 fb95 	bl	80018ec <acc_service_sparse_configuration_create>
 80101c2:	4bb7      	ldr	r3, [pc, #732]	; (80104a0 <main+0x1098>)
 80101c4:	6418      	str	r0, [r3, #64]	; 0x40
	if (sparse_config == NULL)
 80101c6:	2800      	cmp	r0, #0
 80101c8:	d10b      	bne.n	80101e2 <main+0xdda>
		ERR_PRINTLN("sparse config creation fail");
 80101ca:	48b1      	ldr	r0, [pc, #708]	; (8010490 <main+0x1088>)
 80101cc:	f004 f8a0 	bl	8014310 <__wrap_printf>
 80101d0:	48b4      	ldr	r0, [pc, #720]	; (80104a4 <main+0x109c>)
 80101d2:	f004 f89d 	bl	8014310 <__wrap_printf>
 80101d6:	22b0      	movs	r2, #176	; 0xb0
 80101d8:	0021      	movs	r1, r4
 80101da:	0052      	lsls	r2, r2, #1
 80101dc:	48ae      	ldr	r0, [pc, #696]	; (8010498 <main+0x1090>)
 80101de:	f004 f897 	bl	8014310 <__wrap_printf>
	sparse_config_far = acc_service_sparse_configuration_create();
 80101e2:	f7f1 fb83 	bl	80018ec <acc_service_sparse_configuration_create>
 80101e6:	4bb0      	ldr	r3, [pc, #704]	; (80104a8 <main+0x10a0>)
 80101e8:	66d8      	str	r0, [r3, #108]	; 0x6c
	if (sparse_config_far == NULL)
 80101ea:	2800      	cmp	r0, #0
 80101ec:	d10b      	bne.n	8010206 <main+0xdfe>
		ERR_PRINTLN("far sparse config creation fail");
 80101ee:	48a8      	ldr	r0, [pc, #672]	; (8010490 <main+0x1088>)
 80101f0:	f004 f88e 	bl	8014310 <__wrap_printf>
 80101f4:	48ad      	ldr	r0, [pc, #692]	; (80104ac <main+0x10a4>)
 80101f6:	f004 f88b 	bl	8014310 <__wrap_printf>
 80101fa:	22b4      	movs	r2, #180	; 0xb4
 80101fc:	0021      	movs	r1, r4
 80101fe:	0052      	lsls	r2, r2, #1
 8010200:	48a5      	ldr	r0, [pc, #660]	; (8010498 <main+0x1090>)
 8010202:	f004 f885 	bl	8014310 <__wrap_printf>
 8010206:	226d      	movs	r2, #109	; 0x6d
 8010208:	49a9      	ldr	r1, [pc, #676]	; (80104b0 <main+0x10a8>)
 801020a:	2090      	movs	r0, #144	; 0x90
 801020c:	f7f8 ffb4 	bl	8009178 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8010210:	1e04      	subs	r4, r0, #0
 8010212:	d101      	bne.n	8010218 <main+0xe10>
 8010214:	f001 fd7a 	bl	8011d0c <main+0x2904>
 8010218:	4ba6      	ldr	r3, [pc, #664]	; (80104b4 <main+0x10ac>)
 801021a:	0005      	movs	r5, r0
 801021c:	6003      	str	r3, [r0, #0]
 801021e:	4ba6      	ldr	r3, [pc, #664]	; (80104b8 <main+0x10b0>)
 8010220:	2600      	movs	r6, #0
 8010222:	6083      	str	r3, [r0, #8]
 8010224:	4ba5      	ldr	r3, [pc, #660]	; (80104bc <main+0x10b4>)
 8010226:	351c      	adds	r5, #28
 8010228:	6143      	str	r3, [r0, #20]
 801022a:	2358      	movs	r3, #88	; 0x58
 801022c:	7106      	strb	r6, [r0, #4]
 801022e:	8303      	strh	r3, [r0, #24]
 8010230:	6105      	str	r5, [r0, #16]
 8010232:	2102      	movs	r1, #2
 8010234:	f7f0 fcc6 	bl	8000bc4 <acc_service_profile_set>
 8010238:	0020      	movs	r0, r4
 801023a:	0031      	movs	r1, r6
 801023c:	f7f0 fcb0 	bl	8000ba0 <acc_service_maximize_signal_attenuation_set>
 8010240:	0028      	movs	r0, r5
 8010242:	f7f0 faad 	bl	80007a0 <configuration_is_valid>
 8010246:	42b0      	cmp	r0, r6
 8010248:	d001      	beq.n	801024e <main+0xe46>
 801024a:	4b9d      	ldr	r3, [pc, #628]	; (80104c0 <main+0x10b8>)
 801024c:	6423      	str	r3, [r4, #64]	; 0x40
 801024e:	0028      	movs	r0, r5
 8010250:	f7f0 faa6 	bl	80007a0 <configuration_is_valid>
 8010254:	2800      	cmp	r0, #0
 8010256:	d001      	beq.n	801025c <main+0xe54>
 8010258:	4b9a      	ldr	r3, [pc, #616]	; (80104c4 <main+0x10bc>)
 801025a:	6463      	str	r3, [r4, #68]	; 0x44
 801025c:	0028      	movs	r0, r5
 801025e:	f7f0 fa9f 	bl	80007a0 <configuration_is_valid>
 8010262:	2800      	cmp	r0, #0
 8010264:	d003      	beq.n	801026e <main+0xe66>
 8010266:	0023      	movs	r3, r4
 8010268:	2206      	movs	r2, #6
 801026a:	334e      	adds	r3, #78	; 0x4e
 801026c:	701a      	strb	r2, [r3, #0]
 801026e:	0028      	movs	r0, r5
 8010270:	f7f0 fa96 	bl	80007a0 <configuration_is_valid>
 8010274:	2800      	cmp	r0, #0
 8010276:	d003      	beq.n	8010280 <main+0xe78>
 8010278:	0023      	movs	r3, r4
 801027a:	220a      	movs	r2, #10
 801027c:	3358      	adds	r3, #88	; 0x58
 801027e:	801a      	strh	r2, [r3, #0]
 8010280:	0028      	movs	r0, r5
 8010282:	f7f0 fa8d 	bl	80007a0 <configuration_is_valid>
 8010286:	2800      	cmp	r0, #0
 8010288:	d001      	beq.n	801028e <main+0xe86>
 801028a:	2301      	movs	r3, #1
 801028c:	62a3      	str	r3, [r4, #40]	; 0x28
 801028e:	0028      	movs	r0, r5
 8010290:	f7f0 fb65 	bl	800095e <acc_base_configuration_repetition_mode_on_demand_set>
 8010294:	0028      	movs	r0, r5
 8010296:	f7f0 fa83 	bl	80007a0 <configuration_is_valid>
 801029a:	2800      	cmp	r0, #0
 801029c:	d001      	beq.n	80102a2 <main+0xe9a>
 801029e:	2302      	movs	r3, #2
 80102a0:	6563      	str	r3, [r4, #84]	; 0x54
 80102a2:	0028      	movs	r0, r5
 80102a4:	f7f0 fa7c 	bl	80007a0 <configuration_is_valid>
 80102a8:	2800      	cmp	r0, #0
 80102aa:	d003      	beq.n	80102b4 <main+0xeac>
 80102ac:	0023      	movs	r3, r4
 80102ae:	2200      	movs	r2, #0
 80102b0:	3348      	adds	r3, #72	; 0x48
 80102b2:	701a      	strb	r2, [r3, #0]
 80102b4:	0028      	movs	r0, r5
 80102b6:	f7f0 fa73 	bl	80007a0 <configuration_is_valid>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d003      	beq.n	80102c6 <main+0xebe>
 80102be:	0023      	movs	r3, r4
 80102c0:	2200      	movs	r2, #0
 80102c2:	3362      	adds	r3, #98	; 0x62
 80102c4:	701a      	strb	r2, [r3, #0]
 80102c6:	0028      	movs	r0, r5
 80102c8:	f7f0 fa6a 	bl	80007a0 <configuration_is_valid>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	d003      	beq.n	80102d8 <main+0xed0>
 80102d0:	0023      	movs	r3, r4
 80102d2:	2200      	movs	r2, #0
 80102d4:	3363      	adds	r3, #99	; 0x63
 80102d6:	701a      	strb	r2, [r3, #0]
 80102d8:	0028      	movs	r0, r5
 80102da:	f7f0 fa61 	bl	80007a0 <configuration_is_valid>
 80102de:	2800      	cmp	r0, #0
 80102e0:	d003      	beq.n	80102ea <main+0xee2>
 80102e2:	0023      	movs	r3, r4
 80102e4:	2200      	movs	r2, #0
 80102e6:	3364      	adds	r3, #100	; 0x64
 80102e8:	701a      	strb	r2, [r3, #0]
 80102ea:	0028      	movs	r0, r5
 80102ec:	f7f0 fa58 	bl	80007a0 <configuration_is_valid>
 80102f0:	2800      	cmp	r0, #0
 80102f2:	d007      	beq.n	8010304 <main+0xefc>
 80102f4:	0023      	movs	r3, r4
 80102f6:	2200      	movs	r2, #0
 80102f8:	336b      	adds	r3, #107	; 0x6b
 80102fa:	705a      	strb	r2, [r3, #1]
 80102fc:	701a      	strb	r2, [r3, #0]
 80102fe:	3301      	adds	r3, #1
 8010300:	3240      	adds	r2, #64	; 0x40
 8010302:	805a      	strh	r2, [r3, #2]
 8010304:	0028      	movs	r0, r5
 8010306:	f7f0 fa4b 	bl	80007a0 <configuration_is_valid>
 801030a:	2800      	cmp	r0, #0
 801030c:	d003      	beq.n	8010316 <main+0xf0e>
 801030e:	0023      	movs	r3, r4
 8010310:	22ff      	movs	r2, #255	; 0xff
 8010312:	3372      	adds	r3, #114	; 0x72
 8010314:	801a      	strh	r2, [r3, #0]
 8010316:	0028      	movs	r0, r5
 8010318:	f7f0 fa42 	bl	80007a0 <configuration_is_valid>
 801031c:	2800      	cmp	r0, #0
 801031e:	d003      	beq.n	8010328 <main+0xf20>
 8010320:	0023      	movs	r3, r4
 8010322:	2200      	movs	r2, #0
 8010324:	3374      	adds	r3, #116	; 0x74
 8010326:	701a      	strb	r2, [r3, #0]
 8010328:	0028      	movs	r0, r5
 801032a:	f7f0 fa39 	bl	80007a0 <configuration_is_valid>
 801032e:	2800      	cmp	r0, #0
 8010330:	d004      	beq.n	801033c <main+0xf34>
 8010332:	0023      	movs	r3, r4
 8010334:	2200      	movs	r2, #0
 8010336:	3376      	adds	r3, #118	; 0x76
 8010338:	701a      	strb	r2, [r3, #0]
 801033a:	67a2      	str	r2, [r4, #120]	; 0x78
 801033c:	0028      	movs	r0, r5
 801033e:	2101      	movs	r1, #1
 8010340:	f7f0 fa5a 	bl	80007f8 <acc_base_configuration_downsampling_factor_set>
 8010344:	0028      	movs	r0, r5
 8010346:	f7f0 fa2b 	bl	80007a0 <configuration_is_valid>
 801034a:	2800      	cmp	r0, #0
 801034c:	d003      	beq.n	8010356 <main+0xf4e>
 801034e:	0023      	movs	r3, r4
 8010350:	220b      	movs	r2, #11
 8010352:	335a      	adds	r3, #90	; 0x5a
 8010354:	801a      	strh	r2, [r3, #0]
 8010356:	0028      	movs	r0, r5
 8010358:	f7f0 fa22 	bl	80007a0 <configuration_is_valid>
 801035c:	2800      	cmp	r0, #0
 801035e:	d003      	beq.n	8010368 <main+0xf60>
 8010360:	0023      	movs	r3, r4
 8010362:	2201      	movs	r2, #1
 8010364:	3365      	adds	r3, #101	; 0x65
 8010366:	701a      	strb	r2, [r3, #0]
 8010368:	0028      	movs	r0, r5
 801036a:	f7f0 fa19 	bl	80007a0 <configuration_is_valid>
 801036e:	2800      	cmp	r0, #0
 8010370:	d001      	beq.n	8010376 <main+0xf6e>
 8010372:	4b55      	ldr	r3, [pc, #340]	; (80104c8 <main+0x10c0>)
 8010374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010376:	0028      	movs	r0, r5
 8010378:	f7f0 fa12 	bl	80007a0 <configuration_is_valid>
 801037c:	2800      	cmp	r0, #0
 801037e:	d005      	beq.n	801038c <main+0xf84>
 8010380:	4b52      	ldr	r3, [pc, #328]	; (80104cc <main+0x10c4>)
 8010382:	2201      	movs	r2, #1
 8010384:	6323      	str	r3, [r4, #48]	; 0x30
 8010386:	0023      	movs	r3, r4
 8010388:	3334      	adds	r3, #52	; 0x34
 801038a:	701a      	strb	r2, [r3, #0]
 801038c:	0028      	movs	r0, r5
 801038e:	f7f0 fa07 	bl	80007a0 <configuration_is_valid>
 8010392:	2800      	cmp	r0, #0
 8010394:	d003      	beq.n	801039e <main+0xf96>
 8010396:	0023      	movs	r3, r4
 8010398:	2201      	movs	r2, #1
 801039a:	3338      	adds	r3, #56	; 0x38
 801039c:	701a      	strb	r2, [r3, #0]
 801039e:	0028      	movs	r0, r5
 80103a0:	f7f0 f9fe 	bl	80007a0 <configuration_is_valid>
 80103a4:	2800      	cmp	r0, #0
 80103a6:	d003      	beq.n	80103b0 <main+0xfa8>
 80103a8:	0023      	movs	r3, r4
 80103aa:	2201      	movs	r2, #1
 80103ac:	336a      	adds	r3, #106	; 0x6a
 80103ae:	701a      	strb	r2, [r3, #0]
 80103b0:	0028      	movs	r0, r5
 80103b2:	f7f0 f9f5 	bl	80007a0 <configuration_is_valid>
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d004      	beq.n	80103c4 <main+0xfbc>
 80103ba:	2296      	movs	r2, #150	; 0x96
 80103bc:	0023      	movs	r3, r4
 80103be:	0152      	lsls	r2, r2, #5
 80103c0:	3370      	adds	r3, #112	; 0x70
 80103c2:	801a      	strh	r2, [r3, #0]
 80103c4:	0028      	movs	r0, r5
 80103c6:	f7f0 f9eb 	bl	80007a0 <configuration_is_valid>
 80103ca:	2800      	cmp	r0, #0
 80103cc:	d001      	beq.n	80103d2 <main+0xfca>
 80103ce:	4b40      	ldr	r3, [pc, #256]	; (80104d0 <main+0x10c8>)
 80103d0:	61e3      	str	r3, [r4, #28]
    envelope_config = acc_service_envelope_configuration_create();
 80103d2:	4b35      	ldr	r3, [pc, #212]	; (80104a8 <main+0x10a0>)
 80103d4:	659c      	str	r4, [r3, #88]	; 0x58
	if (uart_state != 4){return;}
 80103d6:	4c34      	ldr	r4, [pc, #208]	; (80104a8 <main+0x10a0>)
 80103d8:	0023      	movs	r3, r4
 80103da:	334c      	adds	r3, #76	; 0x4c
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	2b04      	cmp	r3, #4
 80103e0:	d12c      	bne.n	801043c <main+0x1034>
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 80103e2:	4b3c      	ldr	r3, [pc, #240]	; (80104d4 <main+0x10cc>)
 80103e4:	781a      	ldrb	r2, [r3, #0]
 80103e6:	2af8      	cmp	r2, #248	; 0xf8
 80103e8:	d000      	beq.n	80103ec <main+0xfe4>
 80103ea:	e07f      	b.n	80104ec <main+0x10e4>
 80103ec:	344d      	adds	r4, #77	; 0x4d
 80103ee:	7822      	ldrb	r2, [r4, #0]
 80103f0:	2a01      	cmp	r2, #1
 80103f2:	d11b      	bne.n	801042c <main+0x1024>
		uint8_t reg = uart_rx_buff[1];
 80103f4:	785c      	ldrb	r4, [r3, #1]
		uint32_t val = RegInt_getreg(reg);
 80103f6:	0020      	movs	r0, r4
 80103f8:	f7f5 fa2e 	bl	8005858 <RegInt_getreg>
		uart_tx_buff[0] = 0xCC;
 80103fc:	22cc      	movs	r2, #204	; 0xcc
 80103fe:	4b23      	ldr	r3, [pc, #140]	; (801048c <main+0x1084>)
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8010400:	210a      	movs	r1, #10
		uart_tx_buff[0] = 0xCC;
 8010402:	337e      	adds	r3, #126	; 0x7e
 8010404:	701a      	strb	r2, [r3, #0]
		uart_tx_buff[1] = 0x05;
 8010406:	3ac7      	subs	r2, #199	; 0xc7
 8010408:	705a      	strb	r2, [r3, #1]
		uart_tx_buff[2] = 0x00;
 801040a:	2200      	movs	r2, #0
 801040c:	709a      	strb	r2, [r3, #2]
		uart_tx_buff[3] = 0xF6;
 801040e:	32f6      	adds	r2, #246	; 0xf6
 8010410:	70da      	strb	r2, [r3, #3]
	return (val & (0xFFL << (8*byte))) >> (8*byte);
 8010412:	0a02      	lsrs	r2, r0, #8
		uart_tx_buff[6] = get_byte(val,1);
 8010414:	719a      	strb	r2, [r3, #6]
 8010416:	0c02      	lsrs	r2, r0, #16
		uart_tx_buff[5] = get_byte(val,0);
 8010418:	7158      	strb	r0, [r3, #5]
		uart_tx_buff[7] = get_byte(val,2);
 801041a:	71da      	strb	r2, [r3, #7]
 801041c:	0e00      	lsrs	r0, r0, #24
		uart_tx_buff[9] = 0xCD;
 801041e:	22cd      	movs	r2, #205	; 0xcd
		uart_tx_buff[8] = get_byte(val,3);
 8010420:	7218      	strb	r0, [r3, #8]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8010422:	0018      	movs	r0, r3
		uart_tx_buff[4] = reg;
 8010424:	711c      	strb	r4, [r3, #4]
		uart_tx_buff[9] = 0xCD;
 8010426:	725a      	strb	r2, [r3, #9]
		HAL_UART_Transmit_IT(&huart1, ((uint8_t*) *data + offst), datalen);
 8010428:	f7f8 fd20 	bl	8008e6c <HAL_UART_Transmit_IT.constprop.119>
	uart_state = 0;
 801042c:	2200      	movs	r2, #0
 801042e:	4b1e      	ldr	r3, [pc, #120]	; (80104a8 <main+0x10a0>)
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8010430:	2101      	movs	r1, #1
	uart_state = 0;
 8010432:	334c      	adds	r3, #76	; 0x4c
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8010434:	4828      	ldr	r0, [pc, #160]	; (80104d8 <main+0x10d0>)
	uart_state = 0;
 8010436:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8010438:	f7f8 fe04 	bl	8009044 <HAL_UART_Receive_IT.constprop.83>
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 801043c:	2202      	movs	r2, #2
    }
  }
  else
  {
    /* If in low-power run mode at this point, exit it */
    if((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 801043e:	2580      	movs	r5, #128	; 0x80
 8010440:	4c26      	ldr	r4, [pc, #152]	; (80104dc <main+0x10d4>)
 8010442:	4e27      	ldr	r6, [pc, #156]	; (80104e0 <main+0x10d8>)
 8010444:	6823      	ldr	r3, [r4, #0]
 8010446:	00ad      	lsls	r5, r5, #2
 8010448:	4393      	bics	r3, r2
 801044a:	6023      	str	r3, [r4, #0]
 801044c:	6973      	ldr	r3, [r6, #20]
 801044e:	422b      	tst	r3, r5
 8010450:	d001      	beq.n	8010456 <main+0x104e>
 8010452:	f001 fbce 	bl	8011bf2 <main+0x27ea>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8010456:	2104      	movs	r1, #4
 8010458:	4a22      	ldr	r2, [pc, #136]	; (80104e4 <main+0x10dc>)
 801045a:	6913      	ldr	r3, [r2, #16]
 801045c:	438b      	bics	r3, r1
 801045e:	6113      	str	r3, [r2, #16]
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8010460:	bf40      	sev
    __WFE();
 8010462:	bf20      	wfe
    __WFE();
 8010464:	bf20      	wfe
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8010466:	2302      	movs	r3, #2
 8010468:	6822      	ldr	r2, [r4, #0]
 801046a:	4313      	orrs	r3, r2
 801046c:	6023      	str	r3, [r4, #0]
 801046e:	e7b2      	b.n	80103d6 <main+0xfce>
 8010470:	002b      	movs	r3, r5
 8010472:	3330      	adds	r3, #48	; 0x30
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	2b01      	cmp	r3, #1
 8010478:	d800      	bhi.n	801047c <main+0x1074>
 801047a:	e69d      	b.n	80101b8 <main+0xdb0>
 801047c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801047e:	4a1a      	ldr	r2, [pc, #104]	; (80104e8 <main+0x10e0>)
 8010480:	e595      	b.n	800ffae <main+0xba6>
 8010482:	46c0      	nop			; (mov r8, r8)
 8010484:	0801c5a2 	.word	0x0801c5a2
 8010488:	0801c59e 	.word	0x0801c59e
 801048c:	2000020c 	.word	0x2000020c
 8010490:	0801b226 	.word	0x0801b226
 8010494:	0801c5e0 	.word	0x0801c5e0
 8010498:	0801bcb9 	.word	0x0801bcb9
 801049c:	2000008c 	.word	0x2000008c
 80104a0:	2000010c 	.word	0x2000010c
 80104a4:	0801c5f8 	.word	0x0801c5f8
 80104a8:	2000018c 	.word	0x2000018c
 80104ac:	0801c5f4 	.word	0x0801c5f4
 80104b0:	0801c614 	.word	0x0801c614
 80104b4:	acc09dd7 	.word	0xacc09dd7
 80104b8:	08000d99 	.word	0x08000d99
 80104bc:	0800315d 	.word	0x0800315d
 80104c0:	3e4ccccd 	.word	0x3e4ccccd
 80104c4:	3ecccccd 	.word	0x3ecccccd
 80104c8:	3dcccccd 	.word	0x3dcccccd
 80104cc:	3e99999a 	.word	0x3e99999a
 80104d0:	08001899 	.word	0x08001899
 80104d4:	200004a0 	.word	0x200004a0
 80104d8:	200005a0 	.word	0x200005a0
 80104dc:	e000e010 	.word	0xe000e010
 80104e0:	40007000 	.word	0x40007000
 80104e4:	e000ed00 	.word	0xe000ed00
 80104e8:	0801c5b8 	.word	0x0801c5b8
	}else if (uart_rx_buff[0] == 0xF9 && cmd_length == 5){
 80104ec:	2af9      	cmp	r2, #249	; 0xf9
 80104ee:	d001      	beq.n	80104f4 <main+0x10ec>
 80104f0:	f001 faf0 	bl	8011ad4 <main+0x26cc>
 80104f4:	0022      	movs	r2, r4
 80104f6:	324d      	adds	r2, #77	; 0x4d
 80104f8:	7812      	ldrb	r2, [r2, #0]
 80104fa:	2a05      	cmp	r2, #5
 80104fc:	d196      	bne.n	801042c <main+0x1024>
		uint8_t reg = uart_rx_buff[1];
 80104fe:	2008      	movs	r0, #8
 8010500:	21a8      	movs	r1, #168	; 0xa8
 8010502:	785a      	ldrb	r2, [r3, #1]
 8010504:	1838      	adds	r0, r7, r0
 8010506:	1841      	adds	r1, r0, r1
 8010508:	600a      	str	r2, [r1, #0]
			val |= uart_rx_buff[2+i] << (i%4)*8;
 801050a:	789d      	ldrb	r5, [r3, #2]
 801050c:	1c9a      	adds	r2, r3, #2
 801050e:	78db      	ldrb	r3, [r3, #3]
	int8_t success = RegInt_setregf(reg, val, 0);
 8010510:	2008      	movs	r0, #8
			val |= uart_rx_buff[2+i] << (i%4)*8;
 8010512:	021b      	lsls	r3, r3, #8
 8010514:	432b      	orrs	r3, r5
 8010516:	7895      	ldrb	r5, [r2, #2]
	int8_t success = RegInt_setregf(reg, val, 0);
 8010518:	1838      	adds	r0, r7, r0
			val |= uart_rx_buff[2+i] << (i%4)*8;
 801051a:	042d      	lsls	r5, r5, #16
 801051c:	432b      	orrs	r3, r5
 801051e:	78d5      	ldrb	r5, [r2, #3]
	int8_t success = RegInt_setregf(reg, val, 0);
 8010520:	2200      	movs	r2, #0
			val |= uart_rx_buff[2+i] << (i%4)*8;
 8010522:	062d      	lsls	r5, r5, #24
 8010524:	431d      	orrs	r5, r3
	int8_t success = RegInt_setregf(reg, val, 0);
 8010526:	23a8      	movs	r3, #168	; 0xa8
 8010528:	18c3      	adds	r3, r0, r3
 801052a:	0029      	movs	r1, r5
 801052c:	6818      	ldr	r0, [r3, #0]
 801052e:	f7f5 fadd 	bl	8005aec <RegInt_setregf>
		if(RegInt_setreg(reg, val)){RegInt_regaction(reg, val);}
 8010532:	2800      	cmp	r0, #0
 8010534:	d00c      	beq.n	8010550 <main+0x1148>
	if(reg == 0x03){
 8010536:	2208      	movs	r2, #8
 8010538:	23a8      	movs	r3, #168	; 0xa8
 801053a:	18ba      	adds	r2, r7, r2
 801053c:	18d3      	adds	r3, r2, r3
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2b03      	cmp	r3, #3
 8010542:	d001      	beq.n	8010548 <main+0x1140>
 8010544:	f001 fa3e 	bl	80119c4 <main+0x25bc>
	if (val == 0x00){stopService();}
 8010548:	2d00      	cmp	r5, #0
 801054a:	d124      	bne.n	8010596 <main+0x118e>
 801054c:	f7f5 fb0c 	bl	8005b68 <stopService>
		val = RegInt_getreg(reg);
 8010550:	2208      	movs	r2, #8
 8010552:	23a8      	movs	r3, #168	; 0xa8
 8010554:	18ba      	adds	r2, r7, r2
 8010556:	18d3      	adds	r3, r2, r3
 8010558:	6818      	ldr	r0, [r3, #0]
 801055a:	f7f5 f97d 	bl	8005858 <RegInt_getreg>
		uart_tx_buff[0] = 0xCC;
 801055e:	23cc      	movs	r3, #204	; 0xcc
 8010560:	4abd      	ldr	r2, [pc, #756]	; (8010858 <main+0x1450>)
		uart_tx_buff[4] = reg;
 8010562:	2108      	movs	r1, #8
		uart_tx_buff[0] = 0xCC;
 8010564:	327e      	adds	r2, #126	; 0x7e
 8010566:	7013      	strb	r3, [r2, #0]
		uart_tx_buff[1] = 0x05;
 8010568:	3bc7      	subs	r3, #199	; 0xc7
 801056a:	7053      	strb	r3, [r2, #1]
		uart_tx_buff[2] = 0x00;
 801056c:	2300      	movs	r3, #0
 801056e:	7093      	strb	r3, [r2, #2]
		uart_tx_buff[3] = 0xF5;
 8010570:	33f5      	adds	r3, #245	; 0xf5
		uart_tx_buff[4] = reg;
 8010572:	1879      	adds	r1, r7, r1
		uart_tx_buff[3] = 0xF5;
 8010574:	70d3      	strb	r3, [r2, #3]
		uart_tx_buff[4] = reg;
 8010576:	3b4d      	subs	r3, #77	; 0x4d
 8010578:	18cb      	adds	r3, r1, r3
 801057a:	681b      	ldr	r3, [r3, #0]
		uart_tx_buff[5] = get_byte(val,0);
 801057c:	7150      	strb	r0, [r2, #5]
		uart_tx_buff[4] = reg;
 801057e:	7113      	strb	r3, [r2, #4]
 8010580:	0a03      	lsrs	r3, r0, #8
		uart_tx_buff[6] = get_byte(val,1);
 8010582:	7193      	strb	r3, [r2, #6]
 8010584:	0c03      	lsrs	r3, r0, #16
		uart_tx_buff[7] = get_byte(val,2);
 8010586:	71d3      	strb	r3, [r2, #7]
		uart_tx_buff[9] = 0xCD;
 8010588:	23cd      	movs	r3, #205	; 0xcd
 801058a:	0e00      	lsrs	r0, r0, #24
		uart_tx_buff[8] = get_byte(val,3);
 801058c:	7210      	strb	r0, [r2, #8]
		uart_tx_buff[9] = 0xCD;
 801058e:	7253      	strb	r3, [r2, #9]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8010590:	210a      	movs	r1, #10
 8010592:	0010      	movs	r0, r2
 8010594:	e748      	b.n	8010428 <main+0x1020>
	if (val == 0x01){createService();}
 8010596:	2d01      	cmp	r5, #1
 8010598:	d102      	bne.n	80105a0 <main+0x1198>
 801059a:	f7f5 fbb5 	bl	8005d08 <createService>
 801059e:	e7d7      	b.n	8010550 <main+0x1148>
	if (val == 0x02){activateService();}
 80105a0:	2d02      	cmp	r5, #2
 80105a2:	d102      	bne.n	80105aa <main+0x11a2>
		if(createService()){activateService();}
 80105a4:	f7f5 f95d 	bl	8005862 <activateService>
 80105a8:	e7d2      	b.n	8010550 <main+0x1148>
	if (val == 0x03){
 80105aa:	2d03      	cmp	r5, #3
 80105ac:	d104      	bne.n	80105b8 <main+0x11b0>
		if(createService()){activateService();}
 80105ae:	f7f5 fbab 	bl	8005d08 <createService>
 80105b2:	2800      	cmp	r0, #0
 80105b4:	d0cc      	beq.n	8010550 <main+0x1148>
 80105b6:	e7f5      	b.n	80105a4 <main+0x119c>
	if (val == 0x04){Reg_regand(0x06,0x000000FF);}//clear error bits
 80105b8:	2d04      	cmp	r5, #4
 80105ba:	d108      	bne.n	80105ce <main+0x11c6>
	uint32_t flags = RegInt_getreg(reg); 
 80105bc:	2006      	movs	r0, #6
 80105be:	f7f5 f94b 	bl	8005858 <RegInt_getreg>
	RegInt_setregf(reg, flags, 1);
 80105c2:	2201      	movs	r2, #1
	flags &= andbits;
 80105c4:	b2c1      	uxtb	r1, r0
	RegInt_setregf(reg, flags, 1);
 80105c6:	2006      	movs	r0, #6
    RegInt_setregf(0x0A,0x00000000,1);
 80105c8:	f7f5 fa90 	bl	8005aec <RegInt_setregf>
 80105cc:	e7c0      	b.n	8010550 <main+0x1148>
	if (val == 0x05){sparseMeasure();}
 80105ce:	2d05      	cmp	r5, #5
 80105d0:	d001      	beq.n	80105d6 <main+0x11ce>
 80105d2:	f001 fb2b 	bl	8011c2c <main+0x2824>
	INF_PRINTLN("Start Sparse measurement");
 80105d6:	48a1      	ldr	r0, [pc, #644]	; (801085c <main+0x1454>)
 80105d8:	f003 fe9a 	bl	8014310 <__wrap_printf>
 80105dc:	48a0      	ldr	r0, [pc, #640]	; (8010860 <main+0x1458>)
 80105de:	f003 fe97 	bl	8014310 <__wrap_printf>
 80105e2:	22ad      	movs	r2, #173	; 0xad
 80105e4:	499f      	ldr	r1, [pc, #636]	; (8010864 <main+0x145c>)
 80105e6:	0092      	lsls	r2, r2, #2
 80105e8:	489f      	ldr	r0, [pc, #636]	; (8010868 <main+0x1460>)
 80105ea:	f003 fe91 	bl	8014310 <__wrap_printf>
 80105ee:	4a9f      	ldr	r2, [pc, #636]	; (801086c <main+0x1464>)
 80105f0:	499e      	ldr	r1, [pc, #632]	; (801086c <main+0x1464>)
 80105f2:	323e      	adds	r2, #62	; 0x3e
 80105f4:	3144      	adds	r1, #68	; 0x44
 80105f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80105f8:	f7f3 fc9e 	bl	8003f38 <acc_service_sparse_get_next_by_reference.part.9>
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 80105fc:	2008      	movs	r0, #8
 80105fe:	21b0      	movs	r1, #176	; 0xb0
 8010600:	4b9b      	ldr	r3, [pc, #620]	; (8010870 <main+0x1468>)
 8010602:	1838      	adds	r0, r7, r0
 8010604:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8010606:	1841      	adds	r1, r0, r1
 8010608:	600a      	str	r2, [r1, #0]
 801060a:	330e      	adds	r3, #14
 801060c:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 801060e:	6809      	ldr	r1, [r1, #0]
 8010610:	f7fc fc04 	bl	800ce1c <__udivsi3>
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 8010614:	2108      	movs	r1, #8
 8010616:	22b4      	movs	r2, #180	; 0xb4
 8010618:	1879      	adds	r1, r7, r1
 801061a:	b280      	uxth	r0, r0
 801061c:	188a      	adds	r2, r1, r2
 801061e:	0043      	lsls	r3, r0, #1
 8010620:	6013      	str	r3, [r2, #0]
 8010622:	23b4      	movs	r3, #180	; 0xb4
 8010624:	2500      	movs	r5, #0
 8010626:	18cb      	adds	r3, r1, r3
 8010628:	2108      	movs	r1, #8
 801062a:	22ac      	movs	r2, #172	; 0xac
 801062c:	002e      	movs	r6, r5
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	1879      	adds	r1, r7, r1
 8010632:	425b      	negs	r3, r3
 8010634:	188a      	adds	r2, r1, r2
 8010636:	6013      	str	r3, [r2, #0]
 8010638:	2208      	movs	r2, #8
 801063a:	23b4      	movs	r3, #180	; 0xb4
 801063c:	18ba      	adds	r2, r7, r2
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 801063e:	2108      	movs	r1, #8
 8010640:	18d3      	adds	r3, r2, r3
 8010642:	22b0      	movs	r2, #176	; 0xb0
 8010644:	1879      	adds	r1, r7, r1
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	188a      	adds	r2, r1, r2
 801064a:	6812      	ldr	r2, [r2, #0]
 801064c:	18ed      	adds	r5, r5, r3
 801064e:	b2b3      	uxth	r3, r6
 8010650:	4293      	cmp	r3, r2
 8010652:	d200      	bcs.n	8010656 <main+0x124e>
 8010654:	e09d      	b.n	8010792 <main+0x138a>
	INF_PRINTLN("Sparse measurement complete");
 8010656:	4881      	ldr	r0, [pc, #516]	; (801085c <main+0x1454>)
 8010658:	f003 fe5a 	bl	8014310 <__wrap_printf>
 801065c:	4885      	ldr	r0, [pc, #532]	; (8010874 <main+0x146c>)
 801065e:	f003 fe57 	bl	8014310 <__wrap_printf>
 8010662:	22ae      	movs	r2, #174	; 0xae
 8010664:	4d80      	ldr	r5, [pc, #512]	; (8010868 <main+0x1460>)
 8010666:	0092      	lsls	r2, r2, #2
 8010668:	497e      	ldr	r1, [pc, #504]	; (8010864 <main+0x145c>)
 801066a:	0028      	movs	r0, r5
 801066c:	f003 fe50 	bl	8014310 <__wrap_printf>
	if(far_active){
 8010670:	4b7f      	ldr	r3, [pc, #508]	; (8010870 <main+0x1468>)
 8010672:	3358      	adds	r3, #88	; 0x58
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d100      	bne.n	801067c <main+0x1274>
 801067a:	e769      	b.n	8010550 <main+0x1148>
		if(!acc_service_deactivate(sparse_handle)){
 801067c:	4e7e      	ldr	r6, [pc, #504]	; (8010878 <main+0x1470>)
 801067e:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8010680:	f7f3 fc16 	bl	8003eb0 <acc_service_deactivate>
 8010684:	2800      	cmp	r0, #0
 8010686:	d10b      	bne.n	80106a0 <main+0x1298>
			ERR_PRINTLN("acc_service_deactivate() for sparse failed");
 8010688:	487c      	ldr	r0, [pc, #496]	; (801087c <main+0x1474>)
 801068a:	f003 fe41 	bl	8014310 <__wrap_printf>
 801068e:	487c      	ldr	r0, [pc, #496]	; (8010880 <main+0x1478>)
 8010690:	f003 fe3e 	bl	8014310 <__wrap_printf>
 8010694:	22af      	movs	r2, #175	; 0xaf
 8010696:	4973      	ldr	r1, [pc, #460]	; (8010864 <main+0x145c>)
 8010698:	0092      	lsls	r2, r2, #2
 801069a:	0028      	movs	r0, r5
 801069c:	f003 fe38 	bl	8014310 <__wrap_printf>
		if (!acc_service_activate(sparse_handle_far)){
 80106a0:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 80106a2:	f7f3 fb7d 	bl	8003da0 <acc_service_activate>
 80106a6:	2800      	cmp	r0, #0
 80106a8:	d10b      	bne.n	80106c2 <main+0x12ba>
			ERR_PRINTLN("acc_service_activate() for sparse far failed");
 80106aa:	4874      	ldr	r0, [pc, #464]	; (801087c <main+0x1474>)
 80106ac:	f003 fe30 	bl	8014310 <__wrap_printf>
 80106b0:	4874      	ldr	r0, [pc, #464]	; (8010884 <main+0x147c>)
 80106b2:	f003 fe2d 	bl	8014310 <__wrap_printf>
 80106b6:	22b0      	movs	r2, #176	; 0xb0
 80106b8:	496a      	ldr	r1, [pc, #424]	; (8010864 <main+0x145c>)
 80106ba:	0092      	lsls	r2, r2, #2
 80106bc:	0028      	movs	r0, r5
 80106be:	f003 fe27 	bl	8014310 <__wrap_printf>
 80106c2:	4a6a      	ldr	r2, [pc, #424]	; (801086c <main+0x1464>)
 80106c4:	4969      	ldr	r1, [pc, #420]	; (801086c <main+0x1464>)
 80106c6:	3248      	adds	r2, #72	; 0x48
 80106c8:	314c      	adds	r1, #76	; 0x4c
 80106ca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80106cc:	f7f3 fc34 	bl	8003f38 <acc_service_sparse_get_next_by_reference.part.9>
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 80106d0:	2108      	movs	r1, #8
 80106d2:	22b4      	movs	r2, #180	; 0xb4
 80106d4:	4c66      	ldr	r4, [pc, #408]	; (8010870 <main+0x1468>)
 80106d6:	1879      	adds	r1, r7, r1
 80106d8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80106da:	188a      	adds	r2, r1, r2
 80106dc:	6013      	str	r3, [r2, #0]
 80106de:	0023      	movs	r3, r4
 80106e0:	330e      	adds	r3, #14
 80106e2:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 80106e4:	23b4      	movs	r3, #180	; 0xb4
 80106e6:	18cb      	adds	r3, r1, r3
 80106e8:	6819      	ldr	r1, [r3, #0]
 80106ea:	f7fc fb97 	bl	800ce1c <__udivsi3>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 80106ee:	2108      	movs	r1, #8
 80106f0:	22ac      	movs	r2, #172	; 0xac
 80106f2:	1879      	adds	r1, r7, r1
 80106f4:	b280      	uxth	r0, r0
 80106f6:	188a      	adds	r2, r1, r2
 80106f8:	0043      	lsls	r3, r0, #1
 80106fa:	6013      	str	r3, [r2, #0]
		bins_far = sparse_metadata_far.data_length/sweeps;
 80106fc:	23b4      	movs	r3, #180	; 0xb4
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 80106fe:	2600      	movs	r6, #0
		bins_far = sparse_metadata_far.data_length/sweeps;
 8010700:	18cb      	adds	r3, r1, r3
 8010702:	345c      	adds	r4, #92	; 0x5c
 8010704:	8920      	ldrh	r0, [r4, #8]
 8010706:	6819      	ldr	r1, [r3, #0]
 8010708:	f7fc fb88 	bl	800ce1c <__udivsi3>
 801070c:	2108      	movs	r1, #8
 801070e:	22b0      	movs	r2, #176	; 0xb0
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 8010710:	0035      	movs	r5, r6
 8010712:	b284      	uxth	r4, r0
 8010714:	0064      	lsls	r4, r4, #1
 8010716:	1879      	adds	r1, r7, r1
 8010718:	4263      	negs	r3, r4
 801071a:	188a      	adds	r2, r1, r2
 801071c:	6013      	str	r3, [r2, #0]
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 801071e:	2108      	movs	r1, #8
 8010720:	22b4      	movs	r2, #180	; 0xb4
 8010722:	1879      	adds	r1, r7, r1
 8010724:	188a      	adds	r2, r1, r2
 8010726:	6812      	ldr	r2, [r2, #0]
 8010728:	b2ab      	uxth	r3, r5
 801072a:	1936      	adds	r6, r6, r4
 801072c:	429a      	cmp	r2, r3
 801072e:	d846      	bhi.n	80107be <main+0x13b6>
		if(!acc_service_deactivate(sparse_handle_far)){
 8010730:	4e51      	ldr	r6, [pc, #324]	; (8010878 <main+0x1470>)
 8010732:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8010734:	f7f3 fbbc 	bl	8003eb0 <acc_service_deactivate>
 8010738:	4d4a      	ldr	r5, [pc, #296]	; (8010864 <main+0x145c>)
 801073a:	4c4b      	ldr	r4, [pc, #300]	; (8010868 <main+0x1460>)
 801073c:	2800      	cmp	r0, #0
 801073e:	d10a      	bne.n	8010756 <main+0x134e>
			ERR_PRINTLN("acc_service_deactivate() for sparse far failed");
 8010740:	484e      	ldr	r0, [pc, #312]	; (801087c <main+0x1474>)
 8010742:	f003 fde5 	bl	8014310 <__wrap_printf>
 8010746:	4850      	ldr	r0, [pc, #320]	; (8010888 <main+0x1480>)
 8010748:	f003 fde2 	bl	8014310 <__wrap_printf>
 801074c:	4a4f      	ldr	r2, [pc, #316]	; (801088c <main+0x1484>)
 801074e:	0029      	movs	r1, r5
 8010750:	0020      	movs	r0, r4
 8010752:	f003 fddd 	bl	8014310 <__wrap_printf>
		if (!acc_service_activate(sparse_handle)){
 8010756:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8010758:	f7f3 fb22 	bl	8003da0 <acc_service_activate>
 801075c:	2800      	cmp	r0, #0
 801075e:	d10b      	bne.n	8010778 <main+0x1370>
			ERR_PRINTLN("acc_service_activate() for sparse failed");
 8010760:	4846      	ldr	r0, [pc, #280]	; (801087c <main+0x1474>)
 8010762:	f003 fdd5 	bl	8014310 <__wrap_printf>
 8010766:	484a      	ldr	r0, [pc, #296]	; (8010890 <main+0x1488>)
 8010768:	f003 fdd2 	bl	8014310 <__wrap_printf>
 801076c:	22b3      	movs	r2, #179	; 0xb3
 801076e:	0029      	movs	r1, r5
 8010770:	0092      	lsls	r2, r2, #2
 8010772:	0020      	movs	r0, r4
 8010774:	f003 fdcc 	bl	8014310 <__wrap_printf>
		INF_PRINTLN("Sparse Far measurement complete");
 8010778:	4838      	ldr	r0, [pc, #224]	; (801085c <main+0x1454>)
 801077a:	f003 fdc9 	bl	8014310 <__wrap_printf>
 801077e:	4845      	ldr	r0, [pc, #276]	; (8010894 <main+0x148c>)
 8010780:	f003 fdc6 	bl	8014310 <__wrap_printf>
 8010784:	22b4      	movs	r2, #180	; 0xb4
 8010786:	0092      	lsls	r2, r2, #2
void print_sparse_results(void){
		INF_PRINTLN("RESULTS");
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 8010788:	0029      	movs	r1, r5
 801078a:	0020      	movs	r0, r4
 801078c:	f003 fdc0 	bl	8014310 <__wrap_printf>
 8010790:	e6de      	b.n	8010550 <main+0x1148>
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 8010792:	4b37      	ldr	r3, [pc, #220]	; (8010870 <main+0x1468>)
 8010794:	00b2      	lsls	r2, r6, #2
 8010796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010798:	3601      	adds	r6, #1
 801079a:	58d0      	ldr	r0, [r2, r3]
 801079c:	2208      	movs	r2, #8
 801079e:	23ac      	movs	r3, #172	; 0xac
 80107a0:	18ba      	adds	r2, r7, r2
 80107a2:	18d3      	adds	r3, r2, r3
 80107a4:	4a31      	ldr	r2, [pc, #196]	; (801086c <main+0x1464>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80107aa:	195b      	adds	r3, r3, r5
 80107ac:	2208      	movs	r2, #8
 80107ae:	18c9      	adds	r1, r1, r3
 80107b0:	23b4      	movs	r3, #180	; 0xb4
 80107b2:	18ba      	adds	r2, r7, r2
 80107b4:	18d3      	adds	r3, r2, r3
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	f004 f97a 	bl	8014ab0 <memcpy>
 80107bc:	e73c      	b.n	8010638 <main+0x1230>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 80107be:	4b2c      	ldr	r3, [pc, #176]	; (8010870 <main+0x1468>)
 80107c0:	00aa      	lsls	r2, r5, #2
 80107c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107c4:	3501      	adds	r5, #1
 80107c6:	58d0      	ldr	r0, [r2, r3]
 80107c8:	2208      	movs	r2, #8
 80107ca:	23ac      	movs	r3, #172	; 0xac
 80107cc:	18ba      	adds	r2, r7, r2
 80107ce:	18d3      	adds	r3, r2, r3
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	2208      	movs	r2, #8
 80107d4:	18c0      	adds	r0, r0, r3
 80107d6:	23b0      	movs	r3, #176	; 0xb0
 80107d8:	18ba      	adds	r2, r7, r2
 80107da:	18d3      	adds	r3, r2, r3
 80107dc:	4a23      	ldr	r2, [pc, #140]	; (801086c <main+0x1464>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80107e2:	18f3      	adds	r3, r6, r3
 80107e4:	18c9      	adds	r1, r1, r3
 80107e6:	0022      	movs	r2, r4
 80107e8:	f004 f962 	bl	8014ab0 <memcpy>
 80107ec:	e797      	b.n	801071e <main+0x1316>
			accumulator += data[j][i];
 80107ee:	2408      	movs	r4, #8
 80107f0:	21b0      	movs	r1, #176	; 0xb0
 80107f2:	193c      	adds	r4, r7, r4
 80107f4:	1861      	adds	r1, r4, r1
 80107f6:	6809      	ldr	r1, [r1, #0]
 80107f8:	009a      	lsls	r2, r3, #2
 80107fa:	2408      	movs	r4, #8
 80107fc:	588a      	ldr	r2, [r1, r2]
 80107fe:	21a0      	movs	r1, #160	; 0xa0
 8010800:	193c      	adds	r4, r7, r4
 8010802:	1861      	adds	r1, r4, r1
 8010804:	6809      	ldr	r1, [r1, #0]
 8010806:	3301      	adds	r3, #1
 8010808:	5a52      	ldrh	r2, [r2, r1]
 801080a:	1880      	adds	r0, r0, r2
		for(uint16_t j = 0; j<sweeps; j++){
 801080c:	6839      	ldr	r1, [r7, #0]
 801080e:	b29a      	uxth	r2, r3
 8010810:	4291      	cmp	r1, r2
 8010812:	d8ec      	bhi.n	80107ee <main+0x13e6>
		uint32_t average = accumulator/sweeps;
 8010814:	2208      	movs	r2, #8
 8010816:	23b4      	movs	r3, #180	; 0xb4
 8010818:	18ba      	adds	r2, r7, r2
 801081a:	18d3      	adds	r3, r2, r3
 801081c:	6819      	ldr	r1, [r3, #0]
 801081e:	f7fc fafd 	bl	800ce1c <__udivsi3>
 8010822:	2300      	movs	r3, #0
		for(uint16_t j = 0; j<sweeps; j++){
 8010824:	6839      	ldr	r1, [r7, #0]
 8010826:	b29a      	uxth	r2, r3
 8010828:	428a      	cmp	r2, r1
 801082a:	d302      	bcc.n	8010832 <main+0x142a>
 801082c:	3501      	adds	r5, #1
 801082e:	f001 fa59 	bl	8011ce4 <main+0x28dc>
			data[j][i] -= average;
 8010832:	2408      	movs	r4, #8
 8010834:	21b0      	movs	r1, #176	; 0xb0
 8010836:	193c      	adds	r4, r7, r4
 8010838:	1861      	adds	r1, r4, r1
 801083a:	6809      	ldr	r1, [r1, #0]
 801083c:	009a      	lsls	r2, r3, #2
 801083e:	2408      	movs	r4, #8
 8010840:	588a      	ldr	r2, [r1, r2]
 8010842:	21a0      	movs	r1, #160	; 0xa0
 8010844:	193c      	adds	r4, r7, r4
 8010846:	1861      	adds	r1, r4, r1
 8010848:	6809      	ldr	r1, [r1, #0]
 801084a:	3301      	adds	r3, #1
 801084c:	1852      	adds	r2, r2, r1
 801084e:	8811      	ldrh	r1, [r2, #0]
 8010850:	1a09      	subs	r1, r1, r0
 8010852:	8011      	strh	r1, [r2, #0]
 8010854:	e7e6      	b.n	8010824 <main+0x141c>
 8010856:	46c0      	nop			; (mov r8, r8)
 8010858:	2000020c 	.word	0x2000020c
 801085c:	0801c4e6 	.word	0x0801c4e6
 8010860:	0801c637 	.word	0x0801c637
 8010864:	0801b202 	.word	0x0801b202
 8010868:	0801bcb9 	.word	0x0801bcb9
 801086c:	2000028c 	.word	0x2000028c
 8010870:	2000010c 	.word	0x2000010c
 8010874:	0801c650 	.word	0x0801c650
 8010878:	2000018c 	.word	0x2000018c
 801087c:	0801b226 	.word	0x0801b226
 8010880:	0801c66c 	.word	0x0801c66c
 8010884:	0801c697 	.word	0x0801c697
 8010888:	0801c6c4 	.word	0x0801c6c4
 801088c:	000002c9 	.word	0x000002c9
 8010890:	0801c6f3 	.word	0x0801c6f3
 8010894:	0801c71c 	.word	0x0801c71c
	if(mode & 0x00000002){min_scale = dofft(data, data_size);}
 8010898:	2208      	movs	r2, #8
 801089a:	23ac      	movs	r3, #172	; 0xac
 801089c:	18ba      	adds	r2, r7, r2
 801089e:	18d3      	adds	r3, r2, r3
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	079b      	lsls	r3, r3, #30
 80108a4:	d401      	bmi.n	80108aa <main+0x14a2>
 80108a6:	f000 fc88 	bl	80111ba <main+0x1db2>
 80108aa:	2108      	movs	r1, #8
 80108ac:	22a0      	movs	r2, #160	; 0xa0
 80108ae:	4bd7      	ldr	r3, [pc, #860]	; (8010c0c <main+0x1804>)
 80108b0:	1879      	adds	r1, r7, r1
 80108b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108b4:	188a      	adds	r2, r1, r2
 80108b6:	6013      	str	r3, [r2, #0]
float dofft(uint16_t** data, uint8v2_t data_size){
 80108b8:	466b      	mov	r3, sp
	float scales[bins];
 80108ba:	466a      	mov	r2, sp
float dofft(uint16_t** data, uint8v2_t data_size){
 80108bc:	60fb      	str	r3, [r7, #12]
	float scales[bins];
 80108be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
	int16_t real[sweeps];
 80108c0:	2008      	movs	r0, #8
	float scales[bins];
 80108c2:	009b      	lsls	r3, r3, #2
 80108c4:	330a      	adds	r3, #10
 80108c6:	08db      	lsrs	r3, r3, #3
 80108c8:	00db      	lsls	r3, r3, #3
 80108ca:	1ad3      	subs	r3, r2, r3
 80108cc:	469d      	mov	sp, r3
 80108ce:	2284      	movs	r2, #132	; 0x84
 80108d0:	ab02      	add	r3, sp, #8
 80108d2:	18ba      	adds	r2, r7, r2
 80108d4:	6013      	str	r3, [r2, #0]
	int16_t real[sweeps];
 80108d6:	23b4      	movs	r3, #180	; 0xb4
 80108d8:	466a      	mov	r2, sp
 80108da:	18cb      	adds	r3, r1, r3
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	21b0      	movs	r1, #176	; 0xb0
 80108e0:	005b      	lsls	r3, r3, #1
 80108e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80108e4:	3308      	adds	r3, #8
 80108e6:	08db      	lsrs	r3, r3, #3
 80108e8:	00db      	lsls	r3, r3, #3
 80108ea:	1ad2      	subs	r2, r2, r3
 80108ec:	4695      	mov	sp, r2
 80108ee:	1838      	adds	r0, r7, r0
 80108f0:	aa02      	add	r2, sp, #8
 80108f2:	1841      	adds	r1, r0, r1
 80108f4:	600a      	str	r2, [r1, #0]
	int16_t imag[sweeps];
 80108f6:	466a      	mov	r2, sp
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	469d      	mov	sp, r3
 80108fc:	2280      	movs	r2, #128	; 0x80
 80108fe:	ab02      	add	r3, sp, #8
 8010900:	18ba      	adds	r2, r7, r2
 8010902:	6013      	str	r3, [r2, #0]
 8010904:	23ff      	movs	r3, #255	; 0xff
 8010906:	2280      	movs	r2, #128	; 0x80
 8010908:	401e      	ands	r6, r3
 801090a:	1882      	adds	r2, r0, r2
 801090c:	6016      	str	r6, [r2, #0]

void fftWindowing(int16_t *vData, uint16_t samples, uint8_t dir)
{// Weighing factors are computed once before multiple use of FFT
// The weighing function is symetric; half the weighs are recorded
	double samplesMinusOne = ((double)samples - 1.0);
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 801090e:	0872      	lsrs	r2, r6, #1
 8010910:	637a      	str	r2, [r7, #52]	; 0x34
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8010912:	22b4      	movs	r2, #180	; 0xb4
 8010914:	1882      	adds	r2, r0, r2
 8010916:	6812      	ldr	r2, [r2, #0]
 8010918:	0852      	lsrs	r2, r2, #1
 801091a:	b291      	uxth	r1, r2
 801091c:	0092      	lsls	r2, r2, #2
 801091e:	633a      	str	r2, [r7, #48]	; 0x30
 8010920:	22a0      	movs	r2, #160	; 0xa0
 8010922:	6539      	str	r1, [r7, #80]	; 0x50
 8010924:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010926:	1882      	adds	r2, r0, r2
 8010928:	468c      	mov	ip, r1
 801092a:	6812      	ldr	r2, [r2, #0]
 801092c:	2008      	movs	r0, #8
 801092e:	4462      	add	r2, ip
 8010930:	2184      	movs	r1, #132	; 0x84
 8010932:	60ba      	str	r2, [r7, #8]
 8010934:	2200      	movs	r2, #0
 8010936:	1838      	adds	r0, r7, r0
 8010938:	1841      	adds	r1, r0, r1
 801093a:	600a      	str	r2, [r1, #0]
	for(uint16_t i = 0; i<bins; i++){
 801093c:	32a4      	adds	r2, #164	; 0xa4
 801093e:	1882      	adds	r2, r0, r2
 8010940:	6812      	ldr	r2, [r2, #0]
 8010942:	401a      	ands	r2, r3
 8010944:	663a      	str	r2, [r7, #96]	; 0x60
 8010946:	2208      	movs	r2, #8
 8010948:	2384      	movs	r3, #132	; 0x84
 801094a:	18ba      	adds	r2, r7, r2
 801094c:	18d3      	adds	r3, r2, r3
 801094e:	881b      	ldrh	r3, [r3, #0]
 8010950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010952:	429a      	cmp	r2, r3
 8010954:	d800      	bhi.n	8010958 <main+0x1550>
 8010956:	e2f1      	b.n	8010f3c <main+0x1b34>
 8010958:	2208      	movs	r2, #8
 801095a:	2384      	movs	r3, #132	; 0x84
 801095c:	18ba      	adds	r2, r7, r2
 801095e:	18d3      	adds	r3, r2, r3
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	005b      	lsls	r3, r3, #1
 8010964:	673b      	str	r3, [r7, #112]	; 0x70
 8010966:	2300      	movs	r3, #0
 8010968:	e010      	b.n	801098c <main+0x1584>
		  real[j] = data[j][i];
 801096a:	2408      	movs	r4, #8
 801096c:	20a0      	movs	r0, #160	; 0xa0
 801096e:	193c      	adds	r4, r7, r4
 8010970:	1820      	adds	r0, r4, r0
 8010972:	6800      	ldr	r0, [r0, #0]
 8010974:	0099      	lsls	r1, r3, #2
 8010976:	5841      	ldr	r1, [r0, r1]
 8010978:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801097a:	2408      	movs	r4, #8
 801097c:	5a09      	ldrh	r1, [r1, r0]
 801097e:	20b0      	movs	r0, #176	; 0xb0
 8010980:	193c      	adds	r4, r7, r4
 8010982:	1820      	adds	r0, r4, r0
 8010984:	6800      	ldr	r0, [r0, #0]
 8010986:	005a      	lsls	r2, r3, #1
 8010988:	5281      	strh	r1, [r0, r2]
 801098a:	3301      	adds	r3, #1
		for (uint16_t j = 0; j < sweeps; j++) {
 801098c:	2008      	movs	r0, #8
 801098e:	2180      	movs	r1, #128	; 0x80
 8010990:	1838      	adds	r0, r7, r0
 8010992:	1841      	adds	r1, r0, r1
 8010994:	6809      	ldr	r1, [r1, #0]
 8010996:	b29a      	uxth	r2, r3
 8010998:	428a      	cmp	r2, r1
 801099a:	d3e6      	bcc.n	801096a <main+0x1562>
 801099c:	2300      	movs	r3, #0
 801099e:	0019      	movs	r1, r3
		for (uint16_t j = 0; j < sweeps; j++) {
 80109a0:	2408      	movs	r4, #8
 80109a2:	2080      	movs	r0, #128	; 0x80
 80109a4:	193c      	adds	r4, r7, r4
 80109a6:	1820      	adds	r0, r4, r0
 80109a8:	6800      	ldr	r0, [r0, #0]
 80109aa:	b29a      	uxth	r2, r3
 80109ac:	4282      	cmp	r2, r0
 80109ae:	d200      	bcs.n	80109b2 <main+0x15aa>
 80109b0:	e092      	b.n	8010ad8 <main+0x16d0>
	for(int i =0; i<(samples);i++){
 80109b2:	2300      	movs	r3, #0
	int max = 0;
 80109b4:	0018      	movs	r0, r3
	for(int i =0; i<(samples);i++){
 80109b6:	2108      	movs	r1, #8
 80109b8:	22b4      	movs	r2, #180	; 0xb4
 80109ba:	1879      	adds	r1, r7, r1
 80109bc:	188a      	adds	r2, r1, r2
 80109be:	6812      	ldr	r2, [r2, #0]
 80109c0:	4293      	cmp	r3, r2
 80109c2:	da00      	bge.n	80109c6 <main+0x15be>
 80109c4:	e08f      	b.n	8010ae6 <main+0x16de>
	float scaler = 256.0f/max;
 80109c6:	f7fc fe0d 	bl	800d5e4 <__aeabi_i2f>
 80109ca:	1c01      	adds	r1, r0, #0
 80109cc:	2087      	movs	r0, #135	; 0x87
 80109ce:	05c0      	lsls	r0, r0, #23
 80109d0:	f7fb fde0 	bl	800c594 <__aeabi_fdiv>
 80109d4:	2208      	movs	r2, #8
 80109d6:	2398      	movs	r3, #152	; 0x98
 80109d8:	18ba      	adds	r2, r7, r2
 80109da:	18d3      	adds	r3, r2, r3
 80109dc:	2208      	movs	r2, #8
 80109de:	6018      	str	r0, [r3, #0]
 80109e0:	23b0      	movs	r3, #176	; 0xb0
 80109e2:	18ba      	adds	r2, r7, r2
 80109e4:	18d3      	adds	r3, r2, r3
 80109e6:	681e      	ldr	r6, [r3, #0]
	for(int i =0; i<(samples);i++){
 80109e8:	2500      	movs	r5, #0
	float scaler = 256.0f/max;
 80109ea:	0034      	movs	r4, r6
	for(int i =0; i<(samples);i++){
 80109ec:	2208      	movs	r2, #8
 80109ee:	23b4      	movs	r3, #180	; 0xb4
 80109f0:	18ba      	adds	r2, r7, r2
 80109f2:	18d3      	adds	r3, r2, r3
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	42ab      	cmp	r3, r5
 80109f8:	dd00      	ble.n	80109fc <main+0x15f4>
 80109fa:	e083      	b.n	8010b04 <main+0x16fc>
		scales[i] = fftRangeScaling(real, sweeps);
 80109fc:	2208      	movs	r2, #8
 80109fe:	2384      	movs	r3, #132	; 0x84
 8010a00:	18ba      	adds	r2, r7, r2
 8010a02:	2008      	movs	r0, #8
 8010a04:	18d3      	adds	r3, r2, r3
 8010a06:	2198      	movs	r1, #152	; 0x98
 8010a08:	2284      	movs	r2, #132	; 0x84
 8010a0a:	1838      	adds	r0, r7, r0
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	1841      	adds	r1, r0, r1
 8010a10:	18ba      	adds	r2, r7, r2
 8010a12:	6812      	ldr	r2, [r2, #0]
 8010a14:	6809      	ldr	r1, [r1, #0]
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	50d1      	str	r1, [r2, r3]
	double samplesMinusOne = ((double)samples - 1.0);
 8010a1a:	23b4      	movs	r3, #180	; 0xb4
 8010a1c:	18c3      	adds	r3, r0, r3
 8010a1e:	6818      	ldr	r0, [r3, #0]
 8010a20:	f7fe fbd6 	bl	800f1d0 <__aeabi_ui2d>
 8010a24:	2200      	movs	r2, #0
 8010a26:	4b7a      	ldr	r3, [pc, #488]	; (8010c10 <main+0x1808>)
 8010a28:	f7fd fffe 	bl	800ea28 <__aeabi_dsub>
 8010a2c:	2208      	movs	r2, #8
 8010a2e:	2390      	movs	r3, #144	; 0x90
 8010a30:	2500      	movs	r5, #0
 8010a32:	18ba      	adds	r2, r7, r2
 8010a34:	18d3      	adds	r3, r2, r3
 8010a36:	6018      	str	r0, [r3, #0]
 8010a38:	6059      	str	r1, [r3, #4]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8010a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a3c:	b2a8      	uxth	r0, r5
 8010a3e:	4298      	cmp	r0, r3
 8010a40:	d371      	bcc.n	8010b26 <main+0x171e>


uint8_t fftExponent(int16_t value)
{
	// Calculates the base 2 logarithm of a value
	uint8_t result = 0;
 8010a42:	2300      	movs	r3, #0
 8010a44:	677b      	str	r3, [r7, #116]	; 0x74
	while (((value >> result) & 1) != 1) result++;
 8010a46:	3301      	adds	r3, #1
 8010a48:	2108      	movs	r1, #8
 8010a4a:	22b4      	movs	r2, #180	; 0xb4
 8010a4c:	1879      	adds	r1, r7, r1
 8010a4e:	188a      	adds	r2, r1, r2
 8010a50:	6812      	ldr	r2, [r2, #0]
 8010a52:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010a54:	410a      	asrs	r2, r1
 8010a56:	421a      	tst	r2, r3
 8010a58:	d100      	bne.n	8010a5c <main+0x1654>
 8010a5a:	e0af      	b.n	8010bbc <main+0x17b4>
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8010a5c:	2008      	movs	r0, #8
 8010a5e:	21b4      	movs	r1, #180	; 0xb4
 8010a60:	2200      	movs	r2, #0
 8010a62:	1838      	adds	r0, r7, r0
 8010a64:	1841      	adds	r1, r0, r1
 8010a66:	6809      	ldr	r1, [r1, #0]
	uint16_t j = 0;
 8010a68:	0013      	movs	r3, r2
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8010a6a:	3901      	subs	r1, #1
 8010a6c:	468c      	mov	ip, r1
 8010a6e:	4562      	cmp	r2, ip
 8010a70:	da00      	bge.n	8010a74 <main+0x166c>
 8010a72:	e0a8      	b.n	8010bc6 <main+0x17be>
	for (uint8_t l = 0; (l < power); l++) {
 8010a74:	2300      	movs	r3, #0
 8010a76:	667b      	str	r3, [r7, #100]	; 0x64
	uint16_t l2 = 1;
 8010a78:	3301      	adds	r3, #1
 8010a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
	double c2 = 0.0;
 8010a7c:	2300      	movs	r3, #0
	double c1 = -1.0;
 8010a7e:	2108      	movs	r1, #8
 8010a80:	2288      	movs	r2, #136	; 0x88
	double c2 = 0.0;
 8010a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a84:	65bb      	str	r3, [r7, #88]	; 0x58
	double c1 = -1.0;
 8010a86:	2300      	movs	r3, #0
 8010a88:	4c62      	ldr	r4, [pc, #392]	; (8010c14 <main+0x180c>)
 8010a8a:	1879      	adds	r1, r7, r1
 8010a8c:	188a      	adds	r2, r1, r2
 8010a8e:	6013      	str	r3, [r2, #0]
 8010a90:	6054      	str	r4, [r2, #4]
	for (uint8_t l = 0; (l < power); l++) {
 8010a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d000      	beq.n	8010a9c <main+0x1694>
 8010a9a:	e0c9      	b.n	8010c30 <main+0x1828>
 8010a9c:	2400      	movs	r4, #0
	for (int16_t i = 0; i < samples; i++) {
 8010a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010aa0:	429c      	cmp	r4, r3
 8010aa2:	d000      	beq.n	8010aa6 <main+0x169e>
 8010aa4:	e202      	b.n	8010eac <main+0x1aa4>
 8010aa6:	2300      	movs	r3, #0
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8010aa8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	4291      	cmp	r1, r2
 8010aae:	d900      	bls.n	8010ab2 <main+0x16aa>
 8010ab0:	e227      	b.n	8010f02 <main+0x1afa>
 8010ab2:	000b      	movs	r3, r1
		  data[j][i] = 0;
 8010ab4:	2100      	movs	r1, #0
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8010ab6:	68ba      	ldr	r2, [r7, #8]
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8010ab8:	2408      	movs	r4, #8
 8010aba:	2080      	movs	r0, #128	; 0x80
 8010abc:	193c      	adds	r4, r7, r4
 8010abe:	1820      	adds	r0, r4, r0
 8010ac0:	6800      	ldr	r0, [r0, #0]
 8010ac2:	4283      	cmp	r3, r0
 8010ac4:	d200      	bcs.n	8010ac8 <main+0x16c0>
 8010ac6:	e22e      	b.n	8010f26 <main+0x1b1e>
 8010ac8:	2384      	movs	r3, #132	; 0x84
 8010aca:	2284      	movs	r2, #132	; 0x84
 8010acc:	18e3      	adds	r3, r4, r3
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	18a2      	adds	r2, r4, r2
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	6013      	str	r3, [r2, #0]
 8010ad6:	e736      	b.n	8010946 <main+0x153e>
		  imag[j] = 0;
 8010ad8:	2080      	movs	r0, #128	; 0x80
 8010ada:	1838      	adds	r0, r7, r0
 8010adc:	6800      	ldr	r0, [r0, #0]
 8010ade:	005a      	lsls	r2, r3, #1
 8010ae0:	5281      	strh	r1, [r0, r2]
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	e75c      	b.n	80109a0 <main+0x1598>
		if (max < vReal[i]){
 8010ae6:	2408      	movs	r4, #8
 8010ae8:	21b0      	movs	r1, #176	; 0xb0
 8010aea:	193c      	adds	r4, r7, r4
 8010aec:	1861      	adds	r1, r4, r1
 8010aee:	6809      	ldr	r1, [r1, #0]
 8010af0:	005a      	lsls	r2, r3, #1
 8010af2:	5e8a      	ldrsh	r2, [r1, r2]
 8010af4:	17d1      	asrs	r1, r2, #31
 8010af6:	1852      	adds	r2, r2, r1
 8010af8:	404a      	eors	r2, r1
 8010afa:	4290      	cmp	r0, r2
 8010afc:	da00      	bge.n	8010b00 <main+0x16f8>
 8010afe:	0010      	movs	r0, r2
	for(int i =0; i<(samples);i++){
 8010b00:	3301      	adds	r3, #1
 8010b02:	e758      	b.n	80109b6 <main+0x15ae>
		vReal[i] = (int16_t) (vReal[i] * scaler);
 8010b04:	2300      	movs	r3, #0
 8010b06:	5ee0      	ldrsh	r0, [r4, r3]
 8010b08:	f7fc fd6c 	bl	800d5e4 <__aeabi_i2f>
 8010b0c:	2208      	movs	r2, #8
 8010b0e:	2398      	movs	r3, #152	; 0x98
 8010b10:	18ba      	adds	r2, r7, r2
 8010b12:	18d3      	adds	r3, r2, r3
 8010b14:	6819      	ldr	r1, [r3, #0]
 8010b16:	f7fb fe4f 	bl	800c7b8 <__aeabi_fmul>
 8010b1a:	f7fc fd43 	bl	800d5a4 <__aeabi_f2iz>
	for(int i =0; i<(samples);i++){
 8010b1e:	3501      	adds	r5, #1
		vReal[i] = (int16_t) (vReal[i] * scaler);
 8010b20:	8020      	strh	r0, [r4, #0]
 8010b22:	3402      	adds	r4, #2
 8010b24:	e762      	b.n	80109ec <main+0x15e4>
		double indexMinusOne = (double)i;
 8010b26:	f7fe fb53 	bl	800f1d0 <__aeabi_ui2d>
		double ratio = (indexMinusOne / samplesMinusOne);
 8010b2a:	2208      	movs	r2, #8
 8010b2c:	2390      	movs	r3, #144	; 0x90
 8010b2e:	18ba      	adds	r2, r7, r2
 8010b30:	18d3      	adds	r3, r2, r3
 8010b32:	681a      	ldr	r2, [r3, #0]
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	f7fd f8fb 	bl	800dd30 <__aeabi_ddiv>
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 8010b3a:	4a37      	ldr	r2, [pc, #220]	; (8010c18 <main+0x1810>)
 8010b3c:	4b37      	ldr	r3, [pc, #220]	; (8010c1c <main+0x1814>)
 8010b3e:	f7fd fd01 	bl	800e544 <__aeabi_dmul>
 8010b42:	f001 fd07 	bl	8012554 <cos>
 8010b46:	4a36      	ldr	r2, [pc, #216]	; (8010c20 <main+0x1818>)
 8010b48:	4b36      	ldr	r3, [pc, #216]	; (8010c24 <main+0x181c>)
 8010b4a:	f7fd fcfb 	bl	800e544 <__aeabi_dmul>
 8010b4e:	0002      	movs	r2, r0
 8010b50:	000b      	movs	r3, r1
 8010b52:	4835      	ldr	r0, [pc, #212]	; (8010c28 <main+0x1820>)
 8010b54:	4935      	ldr	r1, [pc, #212]	; (8010c2c <main+0x1824>)
 8010b56:	f7fd ff67 	bl	800ea28 <__aeabi_dsub>
 8010b5a:	2208      	movs	r2, #8
 8010b5c:	2398      	movs	r3, #152	; 0x98
 8010b5e:	18ba      	adds	r2, r7, r2
 8010b60:	18d3      	adds	r3, r2, r3
 8010b62:	6018      	str	r0, [r3, #0]
 8010b64:	6059      	str	r1, [r3, #4]
			vData[i] = (int16_t) vData[i]* weighingFactor;
 8010b66:	2300      	movs	r3, #0
 8010b68:	5ef0      	ldrsh	r0, [r6, r3]
 8010b6a:	f7fe faf7 	bl	800f15c <__aeabi_i2d>
 8010b6e:	2208      	movs	r2, #8
 8010b70:	2398      	movs	r3, #152	; 0x98
 8010b72:	18ba      	adds	r2, r7, r2
 8010b74:	18d3      	adds	r3, r2, r3
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	f7fd fce3 	bl	800e544 <__aeabi_dmul>
 8010b7e:	f7fe fab7 	bl	800f0f0 <__aeabi_d2iz>
 8010b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b84:	006c      	lsls	r4, r5, #1
 8010b86:	2208      	movs	r2, #8
 8010b88:	1b1c      	subs	r4, r3, r4
 8010b8a:	23b0      	movs	r3, #176	; 0xb0
 8010b8c:	18ba      	adds	r2, r7, r2
 8010b8e:	18d3      	adds	r3, r2, r3
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	3c02      	subs	r4, #2
 8010b94:	191c      	adds	r4, r3, r4
 8010b96:	8030      	strh	r0, [r6, #0]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]*weighingFactor;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	5ee0      	ldrsh	r0, [r4, r3]
 8010b9c:	f7fe fade 	bl	800f15c <__aeabi_i2d>
 8010ba0:	2208      	movs	r2, #8
 8010ba2:	2398      	movs	r3, #152	; 0x98
 8010ba4:	18ba      	adds	r2, r7, r2
 8010ba6:	18d3      	adds	r3, r2, r3
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	f7fd fcca 	bl	800e544 <__aeabi_dmul>
 8010bb0:	f7fe fa9e 	bl	800f0f0 <__aeabi_d2iz>
 8010bb4:	3501      	adds	r5, #1
 8010bb6:	8020      	strh	r0, [r4, #0]
 8010bb8:	3602      	adds	r6, #2
 8010bba:	e73e      	b.n	8010a3a <main+0x1632>
	while (((value >> result) & 1) != 1) result++;
 8010bbc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010bbe:	3201      	adds	r2, #1
 8010bc0:	b2d2      	uxtb	r2, r2
 8010bc2:	677a      	str	r2, [r7, #116]	; 0x74
 8010bc4:	e740      	b.n	8010a48 <main+0x1640>
		if (i < j) {
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d913      	bls.n	8010bf2 <main+0x17ea>
			fftSwap(&vReal[i], &vReal[j]);
 8010bca:	2408      	movs	r4, #8
 8010bcc:	21b0      	movs	r1, #176	; 0xb0
 8010bce:	193c      	adds	r4, r7, r4
 8010bd0:	2508      	movs	r5, #8
 8010bd2:	1861      	adds	r1, r4, r1
 8010bd4:	24b0      	movs	r4, #176	; 0xb0
 8010bd6:	197d      	adds	r5, r7, r5
 8010bd8:	6809      	ldr	r1, [r1, #0]
 8010bda:	192c      	adds	r4, r5, r4
 8010bdc:	6825      	ldr	r5, [r4, #0]
 8010bde:	0050      	lsls	r0, r2, #1
 8010be0:	1808      	adds	r0, r1, r0
 8010be2:	0059      	lsls	r1, r3, #1
 8010be4:	1869      	adds	r1, r5, r1

// Private functions

void fftSwap(int16_t *x, int16_t *y)
{
	int16_t temp = *x;
 8010be6:	2600      	movs	r6, #0
 8010be8:	5f85      	ldrsh	r5, [r0, r6]
	*x = *y;
 8010bea:	2400      	movs	r4, #0
 8010bec:	5f0e      	ldrsh	r6, [r1, r4]
 8010bee:	8006      	strh	r6, [r0, #0]
	*y = temp;
 8010bf0:	800d      	strh	r5, [r1, #0]
	uint8_t result = 0;
 8010bf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
		while (k <= j) {
 8010bf4:	428b      	cmp	r3, r1
 8010bf6:	d204      	bcs.n	8010c02 <main+0x17fa>
		j += k;
 8010bf8:	185b      	adds	r3, r3, r1
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8010bfa:	3201      	adds	r2, #1
		j += k;
 8010bfc:	b29b      	uxth	r3, r3
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8010bfe:	b292      	uxth	r2, r2
 8010c00:	e735      	b.n	8010a6e <main+0x1666>
			j -= k;
 8010c02:	1a5b      	subs	r3, r3, r1
 8010c04:	b29b      	uxth	r3, r3
			k >>= 1;
 8010c06:	0849      	lsrs	r1, r1, #1
 8010c08:	e7f4      	b.n	8010bf4 <main+0x17ec>
 8010c0a:	46c0      	nop			; (mov r8, r8)
 8010c0c:	2000010c 	.word	0x2000010c
 8010c10:	3ff00000 	.word	0x3ff00000
 8010c14:	bff00000 	.word	0xbff00000
 8010c18:	5474a168 	.word	0x5474a168
 8010c1c:	401921fb 	.word	0x401921fb
 8010c20:	d70a3d71 	.word	0xd70a3d71
 8010c24:	3fdd70a3 	.word	0x3fdd70a3
 8010c28:	147ae148 	.word	0x147ae148
 8010c2c:	3fe147ae 	.word	0x3fe147ae
		l2 <<= 1;
 8010c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		double u2 = 0.0;
 8010c32:	2108      	movs	r1, #8
		l2 <<= 1;
 8010c34:	005b      	lsls	r3, r3, #1
 8010c36:	b29b      	uxth	r3, r3
		double u2 = 0.0;
 8010c38:	2290      	movs	r2, #144	; 0x90
 8010c3a:	2400      	movs	r4, #0
		l2 <<= 1;
 8010c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
		double u2 = 0.0;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	1879      	adds	r1, r7, r1
 8010c42:	188a      	adds	r2, r1, r2
		double u1 = 1.0;
 8010c44:	2108      	movs	r1, #8
		double u2 = 0.0;
 8010c46:	6013      	str	r3, [r2, #0]
 8010c48:	6054      	str	r4, [r2, #4]
		double u1 = 1.0;
 8010c4a:	2298      	movs	r2, #152	; 0x98
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	4cb9      	ldr	r4, [pc, #740]	; (8010f34 <main+0x1b2c>)
 8010c50:	1879      	adds	r1, r7, r1
 8010c52:	188a      	adds	r2, r1, r2
 8010c54:	6013      	str	r3, [r2, #0]
 8010c56:	6054      	str	r4, [r2, #4]
		for (j = 0; j < l1; j++) {
 8010c58:	2300      	movs	r3, #0
 8010c5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8010c5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d000      	beq.n	8010c66 <main+0x185e>
 8010c64:	e120      	b.n	8010ea8 <main+0x1aa0>
		c2 = sqrt((1.0 - c1) / 2.0);
 8010c66:	2208      	movs	r2, #8
 8010c68:	2388      	movs	r3, #136	; 0x88
 8010c6a:	18ba      	adds	r2, r7, r2
 8010c6c:	18d3      	adds	r3, r2, r3
 8010c6e:	681a      	ldr	r2, [r3, #0]
 8010c70:	685b      	ldr	r3, [r3, #4]
 8010c72:	2000      	movs	r0, #0
 8010c74:	49af      	ldr	r1, [pc, #700]	; (8010f34 <main+0x1b2c>)
 8010c76:	f7fd fed7 	bl	800ea28 <__aeabi_dsub>
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	4bae      	ldr	r3, [pc, #696]	; (8010f38 <main+0x1b30>)
 8010c7e:	f7fd fc61 	bl	800e544 <__aeabi_dmul>
 8010c82:	f001 fd05 	bl	8012690 <sqrt>
			c2 = -c2;
 8010c86:	2380      	movs	r3, #128	; 0x80
 8010c88:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010c8a:	061b      	lsls	r3, r3, #24
		c1 = sqrt((1.0 + c1) / 2.0);
 8010c8c:	2008      	movs	r0, #8
			c2 = -c2;
 8010c8e:	18cb      	adds	r3, r1, r3
		c1 = sqrt((1.0 + c1) / 2.0);
 8010c90:	2188      	movs	r1, #136	; 0x88
 8010c92:	1838      	adds	r0, r7, r0
 8010c94:	1841      	adds	r1, r0, r1
			c2 = -c2;
 8010c96:	65bb      	str	r3, [r7, #88]	; 0x58
		c1 = sqrt((1.0 + c1) / 2.0);
 8010c98:	2200      	movs	r2, #0
 8010c9a:	6808      	ldr	r0, [r1, #0]
 8010c9c:	6849      	ldr	r1, [r1, #4]
 8010c9e:	4ba5      	ldr	r3, [pc, #660]	; (8010f34 <main+0x1b2c>)
 8010ca0:	f7fc fd2a 	bl	800d6f8 <__aeabi_dadd>
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	4ba4      	ldr	r3, [pc, #656]	; (8010f38 <main+0x1b30>)
 8010ca8:	f7fd fc4c 	bl	800e544 <__aeabi_dmul>
 8010cac:	f001 fcf0 	bl	8012690 <sqrt>
 8010cb0:	2208      	movs	r2, #8
 8010cb2:	2388      	movs	r3, #136	; 0x88
 8010cb4:	18ba      	adds	r2, r7, r2
 8010cb6:	18d3      	adds	r3, r2, r3
 8010cb8:	6018      	str	r0, [r3, #0]
 8010cba:	6059      	str	r1, [r3, #4]
	for (uint8_t l = 0; (l < power); l++) {
 8010cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	667b      	str	r3, [r7, #100]	; 0x64
		l2 <<= 1;
 8010cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010cc8:	e6e3      	b.n	8010a92 <main+0x168a>
					uint16_t i1 = i + l1;
 8010cca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 8010ccc:	2208      	movs	r2, #8
					uint16_t i1 = i + l1;
 8010cce:	199c      	adds	r4, r3, r6
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 8010cd0:	23b0      	movs	r3, #176	; 0xb0
 8010cd2:	18ba      	adds	r2, r7, r2
 8010cd4:	18d3      	adds	r3, r2, r3
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	b2a4      	uxth	r4, r4
 8010cda:	0064      	lsls	r4, r4, #1
 8010cdc:	191b      	adds	r3, r3, r4
 8010cde:	643b      	str	r3, [r7, #64]	; 0x40
 8010ce0:	2000      	movs	r0, #0
 8010ce2:	5e18      	ldrsh	r0, [r3, r0]
 8010ce4:	f7fe fa3a 	bl	800f15c <__aeabi_i2d>
 8010ce8:	2380      	movs	r3, #128	; 0x80
 8010cea:	18fb      	adds	r3, r7, r3
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	63b8      	str	r0, [r7, #56]	; 0x38
 8010cf0:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010cf2:	191b      	adds	r3, r3, r4
 8010cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8010cf6:	2000      	movs	r0, #0
 8010cf8:	5e18      	ldrsh	r0, [r3, r0]
 8010cfa:	f7fe fa2f 	bl	800f15c <__aeabi_i2d>
 8010cfe:	2208      	movs	r2, #8
 8010d00:	2398      	movs	r3, #152	; 0x98
 8010d02:	18ba      	adds	r2, r7, r2
 8010d04:	18d3      	adds	r3, r2, r3
 8010d06:	681a      	ldr	r2, [r3, #0]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	0004      	movs	r4, r0
 8010d0c:	000d      	movs	r5, r1
 8010d0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d12:	f7fd fc17 	bl	800e544 <__aeabi_dmul>
 8010d16:	2208      	movs	r2, #8
 8010d18:	2390      	movs	r3, #144	; 0x90
 8010d1a:	18ba      	adds	r2, r7, r2
 8010d1c:	18d3      	adds	r3, r2, r3
 8010d1e:	681a      	ldr	r2, [r3, #0]
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	62b8      	str	r0, [r7, #40]	; 0x28
 8010d24:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010d26:	0020      	movs	r0, r4
 8010d28:	0029      	movs	r1, r5
 8010d2a:	f7fd fc0b 	bl	800e544 <__aeabi_dmul>
 8010d2e:	0002      	movs	r2, r0
 8010d30:	000b      	movs	r3, r1
 8010d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d36:	f7fd fe77 	bl	800ea28 <__aeabi_dsub>
 8010d3a:	62b8      	str	r0, [r7, #40]	; 0x28
 8010d3c:	62f9      	str	r1, [r7, #44]	; 0x2c
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8010d3e:	2008      	movs	r0, #8
 8010d40:	2198      	movs	r1, #152	; 0x98
 8010d42:	1838      	adds	r0, r7, r0
 8010d44:	1841      	adds	r1, r0, r1
 8010d46:	0022      	movs	r2, r4
 8010d48:	6808      	ldr	r0, [r1, #0]
 8010d4a:	6849      	ldr	r1, [r1, #4]
 8010d4c:	002b      	movs	r3, r5
 8010d4e:	f7fd fbf9 	bl	800e544 <__aeabi_dmul>
 8010d52:	2208      	movs	r2, #8
 8010d54:	2390      	movs	r3, #144	; 0x90
 8010d56:	18ba      	adds	r2, r7, r2
 8010d58:	18d3      	adds	r3, r2, r3
 8010d5a:	681a      	ldr	r2, [r3, #0]
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	0004      	movs	r4, r0
 8010d60:	000d      	movs	r5, r1
 8010d62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d66:	f7fd fbed 	bl	800e544 <__aeabi_dmul>
 8010d6a:	0002      	movs	r2, r0
 8010d6c:	000b      	movs	r3, r1
 8010d6e:	0020      	movs	r0, r4
 8010d70:	0029      	movs	r1, r5
 8010d72:	f7fc fcc1 	bl	800d6f8 <__aeabi_dadd>
					vReal[i1] = (int16_t) (vReal[i] - t1);
 8010d76:	2208      	movs	r2, #8
 8010d78:	23b0      	movs	r3, #176	; 0xb0
 8010d7a:	18ba      	adds	r2, r7, r2
 8010d7c:	18d3      	adds	r3, r2, r3
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	0074      	lsls	r4, r6, #1
 8010d82:	191d      	adds	r5, r3, r4
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8010d84:	63b8      	str	r0, [r7, #56]	; 0x38
 8010d86:	63f9      	str	r1, [r7, #60]	; 0x3c
					vReal[i1] = (int16_t) (vReal[i] - t1);
 8010d88:	2300      	movs	r3, #0
 8010d8a:	5ee8      	ldrsh	r0, [r5, r3]
 8010d8c:	f7fe f9e6 	bl	800f15c <__aeabi_i2d>
 8010d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d94:	f7fd fe48 	bl	800ea28 <__aeabi_dsub>
 8010d98:	f7fe f9aa 	bl	800f0f0 <__aeabi_d2iz>
 8010d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d9e:	8018      	strh	r0, [r3, #0]
					vImag[i1] = (int16_t) (vImag[i] - t2);
 8010da0:	2380      	movs	r3, #128	; 0x80
 8010da2:	18fb      	adds	r3, r7, r3
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	191c      	adds	r4, r3, r4
 8010da8:	2300      	movs	r3, #0
 8010daa:	5ee0      	ldrsh	r0, [r4, r3]
 8010dac:	f7fe f9d6 	bl	800f15c <__aeabi_i2d>
 8010db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010db4:	f7fd fe38 	bl	800ea28 <__aeabi_dsub>
 8010db8:	f7fe f99a 	bl	800f0f0 <__aeabi_d2iz>
 8010dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dbe:	8018      	strh	r0, [r3, #0]
					vReal[i] = (int16_t) (vReal[i] + t1);
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	5ee8      	ldrsh	r0, [r5, r3]
 8010dc4:	f7fe f9ca 	bl	800f15c <__aeabi_i2d>
 8010dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dcc:	f7fc fc94 	bl	800d6f8 <__aeabi_dadd>
 8010dd0:	f7fe f98e 	bl	800f0f0 <__aeabi_d2iz>
 8010dd4:	8028      	strh	r0, [r5, #0]
					vImag[i] = (int16_t) (vImag[i] +t2);
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	5ee0      	ldrsh	r0, [r4, r3]
 8010dda:	f7fe f9bf 	bl	800f15c <__aeabi_i2d>
 8010dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010de2:	f7fc fc89 	bl	800d6f8 <__aeabi_dadd>
 8010de6:	f7fe f983 	bl	800f0f0 <__aeabi_d2iz>
			 for (uint16_t i = j; i < samples; i += l2) {
 8010dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
					vImag[i] = (int16_t) (vImag[i] +t2);
 8010dec:	8020      	strh	r0, [r4, #0]
			 for (uint16_t i = j; i < samples; i += l2) {
 8010dee:	199e      	adds	r6, r3, r6
 8010df0:	b2b6      	uxth	r6, r6
 8010df2:	2208      	movs	r2, #8
 8010df4:	2380      	movs	r3, #128	; 0x80
 8010df6:	18ba      	adds	r2, r7, r2
 8010df8:	18d3      	adds	r3, r2, r3
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	429e      	cmp	r6, r3
 8010dfe:	d200      	bcs.n	8010e02 <main+0x19fa>
 8010e00:	e763      	b.n	8010cca <main+0x18c2>
			 double z = ((u1 * c1) - (u2 * c2));
 8010e02:	2208      	movs	r2, #8
 8010e04:	2008      	movs	r0, #8
 8010e06:	2388      	movs	r3, #136	; 0x88
 8010e08:	2198      	movs	r1, #152	; 0x98
 8010e0a:	18ba      	adds	r2, r7, r2
 8010e0c:	1838      	adds	r0, r7, r0
 8010e0e:	18d3      	adds	r3, r2, r3
 8010e10:	1841      	adds	r1, r0, r1
 8010e12:	681a      	ldr	r2, [r3, #0]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	6808      	ldr	r0, [r1, #0]
 8010e18:	6849      	ldr	r1, [r1, #4]
 8010e1a:	f7fd fb93 	bl	800e544 <__aeabi_dmul>
 8010e1e:	0004      	movs	r4, r0
 8010e20:	2008      	movs	r0, #8
 8010e22:	000d      	movs	r5, r1
 8010e24:	2190      	movs	r1, #144	; 0x90
 8010e26:	1838      	adds	r0, r7, r0
 8010e28:	1841      	adds	r1, r0, r1
 8010e2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e2e:	6808      	ldr	r0, [r1, #0]
 8010e30:	6849      	ldr	r1, [r1, #4]
 8010e32:	f7fd fb87 	bl	800e544 <__aeabi_dmul>
 8010e36:	0002      	movs	r2, r0
 8010e38:	000b      	movs	r3, r1
 8010e3a:	0020      	movs	r0, r4
 8010e3c:	0029      	movs	r1, r5
 8010e3e:	f7fd fdf3 	bl	800ea28 <__aeabi_dsub>
			 u2 = ((u1 * c2) + (u2 * c1));
 8010e42:	2208      	movs	r2, #8
			 double z = ((u1 * c1) - (u2 * c2));
 8010e44:	6438      	str	r0, [r7, #64]	; 0x40
 8010e46:	6479      	str	r1, [r7, #68]	; 0x44
			 u2 = ((u1 * c2) + (u2 * c1));
 8010e48:	2008      	movs	r0, #8
 8010e4a:	2388      	movs	r3, #136	; 0x88
 8010e4c:	2190      	movs	r1, #144	; 0x90
 8010e4e:	18ba      	adds	r2, r7, r2
 8010e50:	1838      	adds	r0, r7, r0
 8010e52:	18d3      	adds	r3, r2, r3
 8010e54:	1841      	adds	r1, r0, r1
 8010e56:	681a      	ldr	r2, [r3, #0]
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	6808      	ldr	r0, [r1, #0]
 8010e5c:	6849      	ldr	r1, [r1, #4]
 8010e5e:	f7fd fb71 	bl	800e544 <__aeabi_dmul>
 8010e62:	0004      	movs	r4, r0
 8010e64:	2008      	movs	r0, #8
 8010e66:	000d      	movs	r5, r1
 8010e68:	2198      	movs	r1, #152	; 0x98
 8010e6a:	1838      	adds	r0, r7, r0
 8010e6c:	1841      	adds	r1, r0, r1
 8010e6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e72:	6808      	ldr	r0, [r1, #0]
 8010e74:	6849      	ldr	r1, [r1, #4]
 8010e76:	f7fd fb65 	bl	800e544 <__aeabi_dmul>
 8010e7a:	0022      	movs	r2, r4
 8010e7c:	002b      	movs	r3, r5
 8010e7e:	f7fc fc3b 	bl	800d6f8 <__aeabi_dadd>
 8010e82:	2208      	movs	r2, #8
 8010e84:	2390      	movs	r3, #144	; 0x90
 8010e86:	18ba      	adds	r2, r7, r2
 8010e88:	18d3      	adds	r3, r2, r3
 8010e8a:	6018      	str	r0, [r3, #0]
 8010e8c:	6059      	str	r1, [r3, #4]
			 u1 = z;
 8010e8e:	2108      	movs	r1, #8
 8010e90:	2298      	movs	r2, #152	; 0x98
		for (j = 0; j < l1; j++) {
 8010e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
			 u1 = z;
 8010e94:	1879      	adds	r1, r7, r1
		for (j = 0; j < l1; j++) {
 8010e96:	3301      	adds	r3, #1
 8010e98:	b29b      	uxth	r3, r3
			 u1 = z;
 8010e9a:	188a      	adds	r2, r1, r2
		for (j = 0; j < l1; j++) {
 8010e9c:	67bb      	str	r3, [r7, #120]	; 0x78
			 u1 = z;
 8010e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ea0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8010ea2:	6013      	str	r3, [r2, #0]
 8010ea4:	6054      	str	r4, [r2, #4]
 8010ea6:	e6d9      	b.n	8010c5c <main+0x1854>
		for (j = 0; j < l1; j++) {
 8010ea8:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8010eaa:	e7a2      	b.n	8010df2 <main+0x19ea>
		vReal[i] = (int16_t) sqrt(sq((float)vReal[i]) + sq((float)vImag[i]));
 8010eac:	2208      	movs	r2, #8
 8010eae:	23b0      	movs	r3, #176	; 0xb0
 8010eb0:	18ba      	adds	r2, r7, r2
 8010eb2:	18d3      	adds	r3, r2, r3
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	5f18      	ldrsh	r0, [r3, r4]
 8010eb8:	f7fc fb94 	bl	800d5e4 <__aeabi_i2f>
 8010ebc:	2380      	movs	r3, #128	; 0x80
 8010ebe:	18fb      	adds	r3, r7, r3
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	1c06      	adds	r6, r0, #0
 8010ec4:	5f18      	ldrsh	r0, [r3, r4]
 8010ec6:	f7fc fb8d 	bl	800d5e4 <__aeabi_i2f>
 8010eca:	1c31      	adds	r1, r6, #0
 8010ecc:	1c05      	adds	r5, r0, #0
 8010ece:	1c30      	adds	r0, r6, #0
 8010ed0:	f7fb fc72 	bl	800c7b8 <__aeabi_fmul>
 8010ed4:	1c29      	adds	r1, r5, #0
 8010ed6:	1c06      	adds	r6, r0, #0
 8010ed8:	1c28      	adds	r0, r5, #0
 8010eda:	f7fb fc6d 	bl	800c7b8 <__aeabi_fmul>
 8010ede:	1c01      	adds	r1, r0, #0
 8010ee0:	1c30      	adds	r0, r6, #0
 8010ee2:	f7fb f9bd 	bl	800c260 <__aeabi_fadd>
 8010ee6:	f7fe f9a5 	bl	800f234 <__aeabi_f2d>
 8010eea:	f001 fbd1 	bl	8012690 <sqrt>
 8010eee:	f7fe f8ff 	bl	800f0f0 <__aeabi_d2iz>
 8010ef2:	2208      	movs	r2, #8
 8010ef4:	23b0      	movs	r3, #176	; 0xb0
 8010ef6:	18ba      	adds	r2, r7, r2
 8010ef8:	18d3      	adds	r3, r2, r3
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	5318      	strh	r0, [r3, r4]
 8010efe:	3402      	adds	r4, #2
 8010f00:	e5cd      	b.n	8010a9e <main+0x1696>
		  data[j][i] = real[j];
 8010f02:	2008      	movs	r0, #8
 8010f04:	21a0      	movs	r1, #160	; 0xa0
 8010f06:	1838      	adds	r0, r7, r0
 8010f08:	2408      	movs	r4, #8
 8010f0a:	1841      	adds	r1, r0, r1
 8010f0c:	20b0      	movs	r0, #176	; 0xb0
 8010f0e:	193c      	adds	r4, r7, r4
 8010f10:	6809      	ldr	r1, [r1, #0]
 8010f12:	1820      	adds	r0, r4, r0
 8010f14:	009a      	lsls	r2, r3, #2
 8010f16:	6800      	ldr	r0, [r0, #0]
 8010f18:	588a      	ldr	r2, [r1, r2]
 8010f1a:	0059      	lsls	r1, r3, #1
 8010f1c:	5a41      	ldrh	r1, [r0, r1]
 8010f1e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010f20:	3301      	adds	r3, #1
 8010f22:	5211      	strh	r1, [r2, r0]
 8010f24:	e5c0      	b.n	8010aa8 <main+0x16a0>
		  data[j][i] = 0;
 8010f26:	ca01      	ldmia	r2!, {r0}
 8010f28:	6f3c      	ldr	r4, [r7, #112]	; 0x70
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8010f2a:	3301      	adds	r3, #1
		  data[j][i] = 0;
 8010f2c:	5301      	strh	r1, [r0, r4]
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	e5c2      	b.n	8010ab8 <main+0x16b0>
 8010f32:	46c0      	nop			; (mov r8, r8)
 8010f34:	3ff00000 	.word	0x3ff00000
 8010f38:	3fe00000 	.word	0x3fe00000
	float min_scale = scales[0];
 8010f3c:	2384      	movs	r3, #132	; 0x84
 8010f3e:	2108      	movs	r1, #8
 8010f40:	22b0      	movs	r2, #176	; 0xb0
 8010f42:	2401      	movs	r4, #1
 8010f44:	18fb      	adds	r3, r7, r3
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	1879      	adds	r1, r7, r1
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	188a      	adds	r2, r1, r2
 8010f4e:	6013      	str	r3, [r2, #0]
	for(uint16_t i =1; i<bins; i++){
 8010f50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010f52:	b2a3      	uxth	r3, r4
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d900      	bls.n	8010f5a <main+0x1b52>
 8010f58:	e0dc      	b.n	8011114 <main+0x1d0c>
 8010f5a:	2108      	movs	r1, #8
 8010f5c:	22a0      	movs	r2, #160	; 0xa0
 8010f5e:	1879      	adds	r1, r7, r1
 8010f60:	188a      	adds	r2, r1, r2
 8010f62:	6812      	ldr	r2, [r2, #0]
 8010f64:	2108      	movs	r1, #8
 8010f66:	4694      	mov	ip, r2
 8010f68:	2298      	movs	r2, #152	; 0x98
 8010f6a:	2400      	movs	r4, #0
 8010f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6e:	1879      	adds	r1, r7, r1
 8010f70:	4463      	add	r3, ip
 8010f72:	188a      	adds	r2, r1, r2
 8010f74:	6013      	str	r3, [r2, #0]
	for(uint16_t i =0; i<bins; i++){
 8010f76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010f78:	b2a3      	uxth	r3, r4
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d900      	bls.n	8010f80 <main+0x1b78>
 8010f7e:	e0e4      	b.n	801114a <main+0x1d42>
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	469d      	mov	sp, r3
	if(mode & 0x00000020){dobandstop(data, data_size, band_filt);}
 8010f84:	2208      	movs	r2, #8
 8010f86:	23ac      	movs	r3, #172	; 0xac
 8010f88:	18ba      	adds	r2, r7, r2
 8010f8a:	18d3      	adds	r3, r2, r3
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	069b      	lsls	r3, r3, #26
 8010f90:	d500      	bpl.n	8010f94 <main+0x1b8c>
 8010f92:	e11a      	b.n	80111ca <main+0x1dc2>
	if(mode & 0x00000004){
 8010f94:	2208      	movs	r2, #8
 8010f96:	23ac      	movs	r3, #172	; 0xac
 8010f98:	18ba      	adds	r2, r7, r2
 8010f9a:	18d3      	adds	r3, r2, r3
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	075b      	lsls	r3, r3, #29
 8010fa0:	d57e      	bpl.n	80110a0 <main+0x1c98>
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 8010fa2:	20d5      	movs	r0, #213	; 0xd5
 8010fa4:	f7f4 fc58 	bl	8005858 <RegInt_getreg>
 8010fa8:	f7fc fb66 	bl	800d678 <__aeabi_ui2f>
 8010fac:	49e8      	ldr	r1, [pc, #928]	; (8011350 <main+0x1f48>)
 8010fae:	f7fb faf1 	bl	800c594 <__aeabi_fdiv>
		doconv(data, data_size, st_dev);
 8010fb2:	4ae8      	ldr	r2, [pc, #928]	; (8011354 <main+0x1f4c>)
	_conv_data = data;
 8010fb4:	4be8      	ldr	r3, [pc, #928]	; (8011358 <main+0x1f50>)
 8010fb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
	_sweeps = data_size.x1;
 8010fb8:	2108      	movs	r1, #8
	_conv_data = data;
 8010fba:	60da      	str	r2, [r3, #12]
	_sweeps = data_size.x1;
 8010fbc:	22b4      	movs	r2, #180	; 0xb4
 8010fbe:	1879      	adds	r1, r7, r1
 8010fc0:	188a      	adds	r2, r1, r2
 8010fc2:	6812      	ldr	r2, [r2, #0]
		kernel[i] =  expf(t);
 8010fc4:	2108      	movs	r1, #8
	_sweeps = data_size.x1;
 8010fc6:	721a      	strb	r2, [r3, #8]
	_bins = data_size.x2;
 8010fc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010fca:	2404      	movs	r4, #4
 8010fcc:	725a      	strb	r2, [r3, #9]
		kernel[i] =  expf(t);
 8010fce:	22a0      	movs	r2, #160	; 0xa0
	float norm = 0;
 8010fd0:	2500      	movs	r5, #0
		kernel[i] =  expf(t);
 8010fd2:	4be2      	ldr	r3, [pc, #904]	; (801135c <main+0x1f54>)
 8010fd4:	1879      	adds	r1, r7, r1
 8010fd6:	3350      	adds	r3, #80	; 0x50
 8010fd8:	188a      	adds	r2, r1, r2
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 8010fda:	1c06      	adds	r6, r0, #0
	_bins = data_size.x2;
 8010fdc:	4264      	negs	r4, r4
		kernel[i] =  expf(t);
 8010fde:	6013      	str	r3, [r2, #0]
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8010fe0:	0020      	movs	r0, r4
 8010fe2:	f7fc faff 	bl	800d5e4 <__aeabi_i2f>
 8010fe6:	1c31      	adds	r1, r6, #0
 8010fe8:	f7fb fad4 	bl	800c594 <__aeabi_fdiv>
		t = -t*t/2;
 8010fec:	2380      	movs	r3, #128	; 0x80
 8010fee:	061b      	lsls	r3, r3, #24
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8010ff0:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 8010ff2:	18c0      	adds	r0, r0, r3
 8010ff4:	f7fb fbe0 	bl	800c7b8 <__aeabi_fmul>
 8010ff8:	21fc      	movs	r1, #252	; 0xfc
 8010ffa:	0589      	lsls	r1, r1, #22
 8010ffc:	f7fb fbdc 	bl	800c7b8 <__aeabi_fmul>
		kernel[i] =  expf(t);
 8011000:	f001 fba6 	bl	8012750 <expf>
 8011004:	1c01      	adds	r1, r0, #0
 8011006:	2008      	movs	r0, #8
 8011008:	22a0      	movs	r2, #160	; 0xa0
 801100a:	1838      	adds	r0, r7, r0
 801100c:	1882      	adds	r2, r0, r2
 801100e:	6812      	ldr	r2, [r2, #0]
 8011010:	00a3      	lsls	r3, r4, #2
 8011012:	18d3      	adds	r3, r2, r3
		norm += kernel[i];
 8011014:	1c28      	adds	r0, r5, #0
		kernel[i] =  expf(t);
 8011016:	6119      	str	r1, [r3, #16]
		norm += kernel[i];
 8011018:	f7fb f922 	bl	800c260 <__aeabi_fadd>
 801101c:	3401      	adds	r4, #1
 801101e:	1c05      	adds	r5, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 8011020:	2c05      	cmp	r4, #5
 8011022:	d1dd      	bne.n	8010fe0 <main+0x1bd8>
	float sclfact = 1/norm;
 8011024:	1c01      	adds	r1, r0, #0
 8011026:	20fe      	movs	r0, #254	; 0xfe
 8011028:	0580      	lsls	r0, r0, #22
 801102a:	f7fb fab3 	bl	800c594 <__aeabi_fdiv>
 801102e:	2208      	movs	r2, #8
 8011030:	23a0      	movs	r3, #160	; 0xa0
 8011032:	2400      	movs	r4, #0
 8011034:	18ba      	adds	r2, r7, r2
		kernel[i] *= sclfact;
 8011036:	4dc9      	ldr	r5, [pc, #804]	; (801135c <main+0x1f54>)
	float sclfact = 1/norm;
 8011038:	18d3      	adds	r3, r2, r3
 801103a:	6018      	str	r0, [r3, #0]
		kernel[i] *= sclfact;
 801103c:	3550      	adds	r5, #80	; 0x50
 801103e:	2208      	movs	r2, #8
 8011040:	23a0      	movs	r3, #160	; 0xa0
 8011042:	18ba      	adds	r2, r7, r2
 8011044:	00a6      	lsls	r6, r4, #2
 8011046:	18d3      	adds	r3, r2, r3
 8011048:	5970      	ldr	r0, [r6, r5]
 801104a:	6819      	ldr	r1, [r3, #0]
 801104c:	f7fb fbb4 	bl	800c7b8 <__aeabi_fmul>
 8011050:	3401      	adds	r4, #1
 8011052:	5170      	str	r0, [r6, r5]
	for(uint16_t i = 0; i < CONVKER; i++){
 8011054:	2c09      	cmp	r4, #9
 8011056:	d1f2      	bne.n	801103e <main+0x1c36>
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 8011058:	2208      	movs	r2, #8
 801105a:	23b4      	movs	r3, #180	; 0xb4
 801105c:	18ba      	adds	r2, r7, r2
 801105e:	2108      	movs	r1, #8
 8011060:	18d3      	adds	r3, r2, r3
 8011062:	2288      	movs	r2, #136	; 0x88
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	1879      	adds	r1, r7, r1
 8011068:	085b      	lsrs	r3, r3, #1
 801106a:	188a      	adds	r2, r1, r2
 801106c:	3306      	adds	r3, #6
 801106e:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i < _bins; i++){
 8011070:	23a4      	movs	r3, #164	; 0xa4
 8011072:	18cb      	adds	r3, r1, r3
 8011074:	2108      	movs	r1, #8
 8011076:	2280      	movs	r2, #128	; 0x80
 8011078:	2600      	movs	r6, #0
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	1879      	adds	r1, r7, r1
 801107e:	188a      	adds	r2, r1, r2
 8011080:	6013      	str	r3, [r2, #0]
 8011082:	2208      	movs	r2, #8
 8011084:	2380      	movs	r3, #128	; 0x80
 8011086:	18ba      	adds	r2, r7, r2
 8011088:	18d3      	adds	r3, r2, r3
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	42b3      	cmp	r3, r6
 801108e:	d900      	bls.n	8011092 <main+0x1c8a>
 8011090:	e0cb      	b.n	801122a <main+0x1e22>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8011092:	2600      	movs	r6, #0
 8011094:	4bb0      	ldr	r3, [pc, #704]	; (8011358 <main+0x1f50>)
 8011096:	7a19      	ldrb	r1, [r3, #8]
 8011098:	084b      	lsrs	r3, r1, #1
 801109a:	42b3      	cmp	r3, r6
 801109c:	d900      	bls.n	80110a0 <main+0x1c98>
 801109e:	e13c      	b.n	801131a <main+0x1f12>
	if(mode & 0x00000008){
 80110a0:	2208      	movs	r2, #8
 80110a2:	23ac      	movs	r3, #172	; 0xac
 80110a4:	18ba      	adds	r2, r7, r2
 80110a6:	18d3      	adds	r3, r2, r3
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	071b      	lsls	r3, r3, #28
 80110ac:	d401      	bmi.n	80110b2 <main+0x1caa>
 80110ae:	f7ff fa4f 	bl	8010550 <main+0x1148>
		uint8v2_t max_index = max2d(data, data_size);
 80110b2:	4ba8      	ldr	r3, [pc, #672]	; (8011354 <main+0x1f4c>)
	uint16_t apex = 0;
	uint8_t mbin = 0;
	uint8_t msweep = 0;
	
	for(uint16_t i = 0; i<bins; i++){
		for(uint16_t j = 0; j<sweeps/2; j++){
 80110b4:	2208      	movs	r2, #8
 80110b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80110b8:	23b4      	movs	r3, #180	; 0xb4
 80110ba:	18ba      	adds	r2, r7, r2
 80110bc:	2008      	movs	r0, #8
 80110be:	18d3      	adds	r3, r2, r3
 80110c0:	2290      	movs	r2, #144	; 0x90
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	1838      	adds	r0, r7, r0
 80110c6:	1882      	adds	r2, r0, r2
 80110c8:	085b      	lsrs	r3, r3, #1
 80110ca:	6013      	str	r3, [r2, #0]
 80110cc:	2390      	movs	r3, #144	; 0x90
 80110ce:	18c3      	adds	r3, r0, r3
 80110d0:	881b      	ldrh	r3, [r3, #0]
	uint8_t msweep = 0;
 80110d2:	2008      	movs	r0, #8
 80110d4:	22a0      	movs	r2, #160	; 0xa0
		for(uint16_t j = 0; j<sweeps/2; j++){
 80110d6:	469c      	mov	ip, r3
 80110d8:	2300      	movs	r3, #0
	uint8_t msweep = 0;
 80110da:	1838      	adds	r0, r7, r0
 80110dc:	1882      	adds	r2, r0, r2
	uint8_t mbin = 0;
 80110de:	2008      	movs	r0, #8
	uint8_t msweep = 0;
 80110e0:	6013      	str	r3, [r2, #0]
	uint8_t mbin = 0;
 80110e2:	22b4      	movs	r2, #180	; 0xb4
 80110e4:	1838      	adds	r0, r7, r0
 80110e6:	1882      	adds	r2, r0, r2
	for(uint16_t i = 0; i<bins; i++){
 80110e8:	2408      	movs	r4, #8
	uint8_t mbin = 0;
 80110ea:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i<bins; i++){
 80110ec:	22a4      	movs	r2, #164	; 0xa4
 80110ee:	193c      	adds	r4, r7, r4
 80110f0:	18a2      	adds	r2, r4, r2
 80110f2:	2484      	movs	r4, #132	; 0x84
	uint16_t apex = 0;
 80110f4:	0018      	movs	r0, r3
	for(uint16_t i = 0; i<bins; i++){
 80110f6:	7812      	ldrb	r2, [r2, #0]
 80110f8:	193c      	adds	r4, r7, r4
 80110fa:	6022      	str	r2, [r4, #0]
 80110fc:	2484      	movs	r4, #132	; 0x84
 80110fe:	193c      	adds	r4, r7, r4
 8011100:	6824      	ldr	r4, [r4, #0]
 8011102:	b29a      	uxth	r2, r3
 8011104:	4294      	cmp	r4, r2
 8011106:	d800      	bhi.n	801110a <main+0x1d02>
 8011108:	e1b7      	b.n	801147a <main+0x2072>
				if(data[j][i] > apex){
					apex = data[j][i];
					mbin = i;
 801110a:	b2dc      	uxtb	r4, r3
 801110c:	005e      	lsls	r6, r3, #1
	for(uint16_t i = 0; i<bins; i++){
 801110e:	2200      	movs	r2, #0
					mbin = i;
 8011110:	607c      	str	r4, [r7, #4]
 8011112:	e1ad      	b.n	8011470 <main+0x2068>
		if (scales[i] < min_scale){
 8011114:	2284      	movs	r2, #132	; 0x84
 8011116:	18ba      	adds	r2, r7, r2
 8011118:	6812      	ldr	r2, [r2, #0]
 801111a:	00a3      	lsls	r3, r4, #2
 801111c:	58d5      	ldr	r5, [r2, r3]
 801111e:	2208      	movs	r2, #8
 8011120:	23b0      	movs	r3, #176	; 0xb0
 8011122:	18ba      	adds	r2, r7, r2
 8011124:	18d3      	adds	r3, r2, r3
 8011126:	6819      	ldr	r1, [r3, #0]
 8011128:	1c28      	adds	r0, r5, #0
 801112a:	f7fc f83d 	bl	800d1a8 <__aeabi_fcmplt>
 801112e:	2800      	cmp	r0, #0
 8011130:	d104      	bne.n	801113c <main+0x1d34>
 8011132:	2208      	movs	r2, #8
 8011134:	23b0      	movs	r3, #176	; 0xb0
 8011136:	18ba      	adds	r2, r7, r2
 8011138:	18d3      	adds	r3, r2, r3
 801113a:	681d      	ldr	r5, [r3, #0]
	float min_scale = scales[0];
 801113c:	2208      	movs	r2, #8
 801113e:	23b0      	movs	r3, #176	; 0xb0
 8011140:	18ba      	adds	r2, r7, r2
 8011142:	18d3      	adds	r3, r2, r3
 8011144:	3401      	adds	r4, #1
 8011146:	601d      	str	r5, [r3, #0]
 8011148:	e702      	b.n	8010f50 <main+0x1b48>
		float scaling_factor = min_scale/scales[i]; 
 801114a:	2284      	movs	r2, #132	; 0x84
 801114c:	18ba      	adds	r2, r7, r2
 801114e:	6812      	ldr	r2, [r2, #0]
 8011150:	00a3      	lsls	r3, r4, #2
 8011152:	58d1      	ldr	r1, [r2, r3]
 8011154:	2208      	movs	r2, #8
 8011156:	23b0      	movs	r3, #176	; 0xb0
 8011158:	18ba      	adds	r2, r7, r2
 801115a:	18d3      	adds	r3, r2, r3
 801115c:	6818      	ldr	r0, [r3, #0]
 801115e:	f7fb fa19 	bl	800c594 <__aeabi_fdiv>
 8011162:	2208      	movs	r2, #8
 8011164:	2388      	movs	r3, #136	; 0x88
 8011166:	18ba      	adds	r2, r7, r2
 8011168:	2108      	movs	r1, #8
 801116a:	18d3      	adds	r3, r2, r3
 801116c:	2290      	movs	r2, #144	; 0x90
 801116e:	1879      	adds	r1, r7, r1
 8011170:	6018      	str	r0, [r3, #0]
 8011172:	188a      	adds	r2, r1, r2
 8011174:	0063      	lsls	r3, r4, #1
 8011176:	6013      	str	r3, [r2, #0]
 8011178:	23a0      	movs	r3, #160	; 0xa0
 801117a:	18cb      	adds	r3, r1, r3
 801117c:	681e      	ldr	r6, [r3, #0]
		for(uint16_t j = 0; j < sweeps/2; j++){
 801117e:	2208      	movs	r2, #8
 8011180:	2398      	movs	r3, #152	; 0x98
 8011182:	18ba      	adds	r2, r7, r2
 8011184:	18d3      	adds	r3, r2, r3
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	42b3      	cmp	r3, r6
 801118a:	d101      	bne.n	8011190 <main+0x1d88>
 801118c:	3401      	adds	r4, #1
 801118e:	e6f2      	b.n	8010f76 <main+0x1b6e>
			data[j][i] *= scaling_factor;
 8011190:	2208      	movs	r2, #8
 8011192:	2390      	movs	r3, #144	; 0x90
 8011194:	18ba      	adds	r2, r7, r2
 8011196:	18d3      	adds	r3, r2, r3
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	ce20      	ldmia	r6!, {r5}
 801119c:	18ed      	adds	r5, r5, r3
 801119e:	8828      	ldrh	r0, [r5, #0]
 80111a0:	f7fc fa20 	bl	800d5e4 <__aeabi_i2f>
 80111a4:	2208      	movs	r2, #8
 80111a6:	2388      	movs	r3, #136	; 0x88
 80111a8:	18ba      	adds	r2, r7, r2
 80111aa:	18d3      	adds	r3, r2, r3
 80111ac:	6819      	ldr	r1, [r3, #0]
 80111ae:	f7fb fb03 	bl	800c7b8 <__aeabi_fmul>
 80111b2:	f7fc f841 	bl	800d238 <__aeabi_f2uiz>
 80111b6:	8028      	strh	r0, [r5, #0]
 80111b8:	e7e1      	b.n	801117e <main+0x1d76>
	float min_scale = 1.0f;
 80111ba:	2108      	movs	r1, #8
 80111bc:	23fe      	movs	r3, #254	; 0xfe
 80111be:	22b0      	movs	r2, #176	; 0xb0
 80111c0:	1879      	adds	r1, r7, r1
 80111c2:	059b      	lsls	r3, r3, #22
 80111c4:	188a      	adds	r2, r1, r2
 80111c6:	6013      	str	r3, [r2, #0]
 80111c8:	e6dc      	b.n	8010f84 <main+0x1b7c>
	for(uint16_t j = 0; j<sweeps/2; j++){
 80111ca:	2208      	movs	r2, #8
 80111cc:	23b4      	movs	r3, #180	; 0xb4
 80111ce:	18ba      	adds	r2, r7, r2
 80111d0:	2108      	movs	r1, #8
 80111d2:	18d3      	adds	r3, r2, r3
 80111d4:	22a0      	movs	r2, #160	; 0xa0
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	1879      	adds	r1, r7, r1
 80111da:	188a      	adds	r2, r1, r2
 80111dc:	085b      	lsrs	r3, r3, #1
 80111de:	6013      	str	r3, [r2, #0]
	if(mode & 0x00000020){dobandstop(data, data_size, band_filt);}
 80111e0:	4b5c      	ldr	r3, [pc, #368]	; (8011354 <main+0x1f4c>)
			for(uint16_t i = 0; i<bins; i++){
 80111e2:	2008      	movs	r0, #8
 80111e4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80111e6:	23a4      	movs	r3, #164	; 0xa4
	for(uint16_t j = 0; j<sweeps/2; j++){
 80111e8:	2200      	movs	r2, #0
			for(uint16_t i = 0; i<bins; i++){
 80111ea:	1838      	adds	r0, r7, r0
 80111ec:	18c3      	adds	r3, r0, r3
 80111ee:	781d      	ldrb	r5, [r3, #0]
	for(uint16_t j = 0; j<sweeps/2; j++){
 80111f0:	2408      	movs	r4, #8
 80111f2:	20a0      	movs	r0, #160	; 0xa0
 80111f4:	193c      	adds	r4, r7, r4
 80111f6:	1820      	adds	r0, r4, r0
 80111f8:	6800      	ldr	r0, [r0, #0]
 80111fa:	b293      	uxth	r3, r2
 80111fc:	4283      	cmp	r3, r0
 80111fe:	d300      	bcc.n	8011202 <main+0x1dfa>
 8011200:	e6c8      	b.n	8010f94 <main+0x1b8c>
		if(mask & (1<<j)){
 8011202:	2301      	movs	r3, #1
 8011204:	4093      	lsls	r3, r2
 8011206:	693e      	ldr	r6, [r7, #16]
 8011208:	421e      	tst	r6, r3
 801120a:	d10b      	bne.n	8011224 <main+0x1e1c>
 801120c:	3201      	adds	r2, #1
 801120e:	3104      	adds	r1, #4
 8011210:	e7ee      	b.n	80111f0 <main+0x1de8>
					data[j][i] = 0;
 8011212:	4660      	mov	r0, ip
 8011214:	680c      	ldr	r4, [r1, #0]
 8011216:	005e      	lsls	r6, r3, #1
 8011218:	5330      	strh	r0, [r6, r4]
 801121a:	3301      	adds	r3, #1
			for(uint16_t i = 0; i<bins; i++){
 801121c:	b29e      	uxth	r6, r3
 801121e:	42b5      	cmp	r5, r6
 8011220:	d8f7      	bhi.n	8011212 <main+0x1e0a>
 8011222:	e7f3      	b.n	801120c <main+0x1e04>
		if(mask & (1<<j)){
 8011224:	2300      	movs	r3, #0
					data[j][i] = 0;
 8011226:	469c      	mov	ip, r3
 8011228:	e7f8      	b.n	801121c <main+0x1e14>
	for(int i = 0; i < CONVKER; i++){
 801122a:	2300      	movs	r3, #0
	convstack[i] = 0.0f;
 801122c:	4a4b      	ldr	r2, [pc, #300]	; (801135c <main+0x1f54>)
 801122e:	3274      	adds	r2, #116	; 0x74
 8011230:	2000      	movs	r0, #0
 8011232:	0099      	lsls	r1, r3, #2
	for(int i = 0; i < CONVKER; i++){
 8011234:	3301      	adds	r3, #1
	convstack[i] = 0.0f;
 8011236:	5088      	str	r0, [r1, r2]
	for(int i = 0; i < CONVKER; i++){
 8011238:	2b09      	cmp	r3, #9
 801123a:	d1f9      	bne.n	8011230 <main+0x1e28>
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 801123c:	2500      	movs	r5, #0
			float sum = 0.0f;
 801123e:	2108      	movs	r1, #8
 8011240:	22a0      	movs	r2, #160	; 0xa0
 8011242:	2300      	movs	r3, #0
 8011244:	1879      	adds	r1, r7, r1
 8011246:	188a      	adds	r2, r1, r2
 8011248:	2108      	movs	r1, #8
 801124a:	6013      	str	r3, [r2, #0]
 801124c:	2290      	movs	r2, #144	; 0x90
 801124e:	1879      	adds	r1, r7, r1
 8011250:	188a      	adds	r2, r1, r2
 8011252:	b2ab      	uxth	r3, r5
				sum += kernel[j]*getdata(i-j+cent, indx);
 8011254:	2108      	movs	r1, #8
 8011256:	6013      	str	r3, [r2, #0]
 8011258:	2298      	movs	r2, #152	; 0x98
 801125a:	1879      	adds	r1, r7, r1
 801125c:	188a      	adds	r2, r1, r2
 801125e:	b233      	sxth	r3, r6
 8011260:	2108      	movs	r1, #8
 8011262:	6013      	str	r3, [r2, #0]
 8011264:	2284      	movs	r2, #132	; 0x84
			for(int j = 0; j < CONVKER; j++){
 8011266:	2400      	movs	r4, #0
				sum += kernel[j]*getdata(i-j+cent, indx);
 8011268:	b2ab      	uxth	r3, r5
 801126a:	1879      	adds	r1, r7, r1
 801126c:	3304      	adds	r3, #4
 801126e:	188a      	adds	r2, r1, r2
 8011270:	6013      	str	r3, [r2, #0]
 8011272:	2208      	movs	r2, #8
 8011274:	2384      	movs	r3, #132	; 0x84
 8011276:	18ba      	adds	r2, r7, r2
 8011278:	18d3      	adds	r3, r2, r3
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	2208      	movs	r2, #8
 801127e:	1b18      	subs	r0, r3, r4
 8011280:	2398      	movs	r3, #152	; 0x98
 8011282:	18ba      	adds	r2, r7, r2
 8011284:	18d3      	adds	r3, r2, r3
 8011286:	6819      	ldr	r1, [r3, #0]
 8011288:	b200      	sxth	r0, r0
 801128a:	f7ef fdd9 	bl	8000e40 <getdata>
 801128e:	f7fc f9a9 	bl	800d5e4 <__aeabi_i2f>
 8011292:	4b33      	ldr	r3, [pc, #204]	; (8011360 <main+0x1f58>)
 8011294:	00a2      	lsls	r2, r4, #2
 8011296:	58d1      	ldr	r1, [r2, r3]
 8011298:	f7fb fa8e 	bl	800c7b8 <__aeabi_fmul>
 801129c:	2208      	movs	r2, #8
 801129e:	23a0      	movs	r3, #160	; 0xa0
 80112a0:	18ba      	adds	r2, r7, r2
 80112a2:	18d3      	adds	r3, r2, r3
 80112a4:	1c01      	adds	r1, r0, #0
 80112a6:	6818      	ldr	r0, [r3, #0]
 80112a8:	f7fa ffda 	bl	800c260 <__aeabi_fadd>
 80112ac:	2208      	movs	r2, #8
 80112ae:	23a0      	movs	r3, #160	; 0xa0
 80112b0:	18ba      	adds	r2, r7, r2
 80112b2:	18d3      	adds	r3, r2, r3
			for(int j = 0; j < CONVKER; j++){
 80112b4:	3401      	adds	r4, #1
				sum += kernel[j]*getdata(i-j+cent, indx);
 80112b6:	6018      	str	r0, [r3, #0]
			for(int j = 0; j < CONVKER; j++){
 80112b8:	2c09      	cmp	r4, #9
 80112ba:	d1da      	bne.n	8011272 <main+0x1e6a>
	convstack[i] = convstack[i+1];
 80112bc:	4a27      	ldr	r2, [pc, #156]	; (801135c <main+0x1f54>)
	float popped = convstack[0];
 80112be:	4b27      	ldr	r3, [pc, #156]	; (801135c <main+0x1f54>)
	convstack[i] = convstack[i+1];
 80112c0:	0011      	movs	r1, r2
	float popped = convstack[0];
 80112c2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80112c4:	2300      	movs	r3, #0
	convstack[i] = convstack[i+1];
 80112c6:	3174      	adds	r1, #116	; 0x74
 80112c8:	18cc      	adds	r4, r1, r3
 80112ca:	6864      	ldr	r4, [r4, #4]
 80112cc:	505c      	str	r4, [r3, r1]
 80112ce:	3304      	adds	r3, #4
	for(int i = 0; i < CONVKER-1; i++){
 80112d0:	2b20      	cmp	r3, #32
 80112d2:	d1f9      	bne.n	80112c8 <main+0x1ec0>
	convstack[(CONVKER-1)/2 -1] = val;
 80112d4:	2108      	movs	r1, #8
 80112d6:	3380      	adds	r3, #128	; 0x80
 80112d8:	1879      	adds	r1, r7, r1
 80112da:	18cb      	adds	r3, r1, r3
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	3204      	adds	r2, #4
 80112e0:	67d3      	str	r3, [r2, #124]	; 0x7c
			setdata(i-cent, indx, pop);
 80112e2:	f7fb ffa9 	bl	800d238 <__aeabi_f2uiz>
 80112e6:	2108      	movs	r1, #8
 80112e8:	2390      	movs	r3, #144	; 0x90
 80112ea:	1879      	adds	r1, r7, r1
 80112ec:	18cb      	adds	r3, r1, r3
 80112ee:	2108      	movs	r1, #8
 80112f0:	b282      	uxth	r2, r0
 80112f2:	6818      	ldr	r0, [r3, #0]
 80112f4:	2398      	movs	r3, #152	; 0x98
 80112f6:	1879      	adds	r1, r7, r1
 80112f8:	18cb      	adds	r3, r1, r3
 80112fa:	3804      	subs	r0, #4
 80112fc:	6819      	ldr	r1, [r3, #0]
 80112fe:	b200      	sxth	r0, r0
 8011300:	f7ef fd8a 	bl	8000e18 <setdata>
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 8011304:	2208      	movs	r2, #8
 8011306:	2388      	movs	r3, #136	; 0x88
 8011308:	18ba      	adds	r2, r7, r2
 801130a:	18d3      	adds	r3, r2, r3
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	3501      	adds	r5, #1
 8011310:	429d      	cmp	r5, r3
 8011312:	dd94      	ble.n	801123e <main+0x1e36>
	for(uint16_t i = 0; i < _bins; i++){
 8011314:	3601      	adds	r6, #1
 8011316:	b2b6      	uxth	r6, r6
 8011318:	e6b3      	b.n	8011082 <main+0x1c7a>
	for(int i = 0; i < CONVKER; i++){
 801131a:	2300      	movs	r3, #0
	convstack[i] = 0.0f;
 801131c:	4a0f      	ldr	r2, [pc, #60]	; (801135c <main+0x1f54>)
 801131e:	3274      	adds	r2, #116	; 0x74
 8011320:	2400      	movs	r4, #0
 8011322:	0098      	lsls	r0, r3, #2
	for(int i = 0; i < CONVKER; i++){
 8011324:	3301      	adds	r3, #1
	convstack[i] = 0.0f;
 8011326:	5084      	str	r4, [r0, r2]
	for(int i = 0; i < CONVKER; i++){
 8011328:	2b09      	cmp	r3, #9
 801132a:	d1f9      	bne.n	8011320 <main+0x1f18>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 801132c:	2500      	movs	r5, #0
		if(indx >= _sweeps){
 801132e:	428e      	cmp	r6, r1
 8011330:	d200      	bcs.n	8011334 <main+0x1f2c>
 8011332:	e082      	b.n	801143a <main+0x2032>
			ERR_PRINTLN("sweep count too great to convolve");
 8011334:	480b      	ldr	r0, [pc, #44]	; (8011364 <main+0x1f5c>)
 8011336:	f002 ffeb 	bl	8014310 <__wrap_printf>
 801133a:	480b      	ldr	r0, [pc, #44]	; (8011368 <main+0x1f60>)
 801133c:	f002 ffe8 	bl	8014310 <__wrap_printf>
 8011340:	229d      	movs	r2, #157	; 0x9d
 8011342:	490a      	ldr	r1, [pc, #40]	; (801136c <main+0x1f64>)
 8011344:	480a      	ldr	r0, [pc, #40]	; (8011370 <main+0x1f68>)
 8011346:	f002 ffe3 	bl	8014310 <__wrap_printf>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 801134a:	3601      	adds	r6, #1
 801134c:	b2b6      	uxth	r6, r6
 801134e:	e6a1      	b.n	8011094 <main+0x1c8c>
 8011350:	447a0000 	.word	0x447a0000
 8011354:	2000010c 	.word	0x2000010c
 8011358:	2000008c 	.word	0x2000008c
 801135c:	2000028c 	.word	0x2000028c
 8011360:	200002dc 	.word	0x200002dc
 8011364:	0801b226 	.word	0x0801b226
 8011368:	0801c73c 	.word	0x0801c73c
 801136c:	0801c75e 	.word	0x0801c75e
 8011370:	0801bcb9 	.word	0x0801bcb9
			float sum = 0.0f;
 8011374:	2108      	movs	r1, #8
 8011376:	22a0      	movs	r2, #160	; 0xa0
 8011378:	2300      	movs	r3, #0
 801137a:	1879      	adds	r1, r7, r1
 801137c:	188a      	adds	r2, r1, r2
				sum += kernel[j]*getdata(indx, i-j+cent);
 801137e:	2108      	movs	r1, #8
			float sum = 0.0f;
 8011380:	6013      	str	r3, [r2, #0]
				sum += kernel[j]*getdata(indx, i-j+cent);
 8011382:	2298      	movs	r2, #152	; 0x98
 8011384:	1879      	adds	r1, r7, r1
 8011386:	188a      	adds	r2, r1, r2
 8011388:	b233      	sxth	r3, r6
 801138a:	2108      	movs	r1, #8
 801138c:	6013      	str	r3, [r2, #0]
 801138e:	2290      	movs	r2, #144	; 0x90
 8011390:	1879      	adds	r1, r7, r1
 8011392:	188a      	adds	r2, r1, r2
 8011394:	b2ab      	uxth	r3, r5
 8011396:	2108      	movs	r1, #8
 8011398:	6013      	str	r3, [r2, #0]
 801139a:	2288      	movs	r2, #136	; 0x88
			for(int j = 0; j < CONVKER; j++){
 801139c:	2400      	movs	r4, #0
				sum += kernel[j]*getdata(indx, i-j+cent);
 801139e:	1879      	adds	r1, r7, r1
 80113a0:	3304      	adds	r3, #4
 80113a2:	188a      	adds	r2, r1, r2
 80113a4:	6013      	str	r3, [r2, #0]
 80113a6:	2208      	movs	r2, #8
 80113a8:	2388      	movs	r3, #136	; 0x88
 80113aa:	18ba      	adds	r2, r7, r2
 80113ac:	18d3      	adds	r3, r2, r3
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	2208      	movs	r2, #8
 80113b2:	1b19      	subs	r1, r3, r4
 80113b4:	2398      	movs	r3, #152	; 0x98
 80113b6:	18ba      	adds	r2, r7, r2
 80113b8:	18d3      	adds	r3, r2, r3
 80113ba:	6818      	ldr	r0, [r3, #0]
 80113bc:	b209      	sxth	r1, r1
 80113be:	f7ef fd3f 	bl	8000e40 <getdata>
 80113c2:	f7fc f90f 	bl	800d5e4 <__aeabi_i2f>
 80113c6:	4bb5      	ldr	r3, [pc, #724]	; (801169c <main+0x2294>)
 80113c8:	00a2      	lsls	r2, r4, #2
 80113ca:	58d1      	ldr	r1, [r2, r3]
 80113cc:	f7fb f9f4 	bl	800c7b8 <__aeabi_fmul>
 80113d0:	2208      	movs	r2, #8
 80113d2:	23a0      	movs	r3, #160	; 0xa0
 80113d4:	18ba      	adds	r2, r7, r2
 80113d6:	18d3      	adds	r3, r2, r3
 80113d8:	1c01      	adds	r1, r0, #0
 80113da:	6818      	ldr	r0, [r3, #0]
 80113dc:	f7fa ff40 	bl	800c260 <__aeabi_fadd>
 80113e0:	2208      	movs	r2, #8
 80113e2:	23a0      	movs	r3, #160	; 0xa0
 80113e4:	18ba      	adds	r2, r7, r2
 80113e6:	18d3      	adds	r3, r2, r3
			for(int j = 0; j < CONVKER; j++){
 80113e8:	3401      	adds	r4, #1
				sum += kernel[j]*getdata(indx, i-j+cent);
 80113ea:	6018      	str	r0, [r3, #0]
			for(int j = 0; j < CONVKER; j++){
 80113ec:	2c09      	cmp	r4, #9
 80113ee:	d1da      	bne.n	80113a6 <main+0x1f9e>
	convstack[i] = convstack[i+1];
 80113f0:	4aab      	ldr	r2, [pc, #684]	; (80116a0 <main+0x2298>)
	float popped = convstack[0];
 80113f2:	4bab      	ldr	r3, [pc, #684]	; (80116a0 <main+0x2298>)
	convstack[i] = convstack[i+1];
 80113f4:	0011      	movs	r1, r2
	float popped = convstack[0];
 80113f6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80113f8:	2300      	movs	r3, #0
	convstack[i] = convstack[i+1];
 80113fa:	3174      	adds	r1, #116	; 0x74
 80113fc:	18cc      	adds	r4, r1, r3
 80113fe:	6864      	ldr	r4, [r4, #4]
 8011400:	505c      	str	r4, [r3, r1]
 8011402:	3304      	adds	r3, #4
	for(int i = 0; i < CONVKER-1; i++){
 8011404:	2b20      	cmp	r3, #32
 8011406:	d1f9      	bne.n	80113fc <main+0x1ff4>
	convstack[(CONVKER-1)/2 -1] = val;
 8011408:	2108      	movs	r1, #8
 801140a:	3380      	adds	r3, #128	; 0x80
 801140c:	1879      	adds	r1, r7, r1
 801140e:	18cb      	adds	r3, r1, r3
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	3204      	adds	r2, #4
 8011414:	67d3      	str	r3, [r2, #124]	; 0x7c
			setdata(indx, i-cent, pop);
 8011416:	f7fb ff0f 	bl	800d238 <__aeabi_f2uiz>
 801141a:	2108      	movs	r1, #8
 801141c:	2390      	movs	r3, #144	; 0x90
 801141e:	1879      	adds	r1, r7, r1
 8011420:	b282      	uxth	r2, r0
 8011422:	18cb      	adds	r3, r1, r3
 8011424:	2008      	movs	r0, #8
 8011426:	6819      	ldr	r1, [r3, #0]
 8011428:	2398      	movs	r3, #152	; 0x98
 801142a:	1838      	adds	r0, r7, r0
 801142c:	18c3      	adds	r3, r0, r3
 801142e:	3904      	subs	r1, #4
 8011430:	b209      	sxth	r1, r1
 8011432:	6818      	ldr	r0, [r3, #0]
 8011434:	f7ef fcf0 	bl	8000e18 <setdata>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8011438:	3501      	adds	r5, #1
 801143a:	4b9a      	ldr	r3, [pc, #616]	; (80116a4 <main+0x229c>)
 801143c:	7a5b      	ldrb	r3, [r3, #9]
 801143e:	3306      	adds	r3, #6
 8011440:	429d      	cmp	r5, r3
 8011442:	dd97      	ble.n	8011374 <main+0x1f6c>
 8011444:	e781      	b.n	801134a <main+0x1f42>
				if(data[j][i] > apex){
 8011446:	0094      	lsls	r4, r2, #2
 8011448:	590c      	ldr	r4, [r1, r4]
 801144a:	5ba4      	ldrh	r4, [r4, r6]
 801144c:	4284      	cmp	r4, r0
 801144e:	d90e      	bls.n	801146e <main+0x2066>
					mbin = i;
 8011450:	2508      	movs	r5, #8
 8011452:	20b4      	movs	r0, #180	; 0xb4
 8011454:	197d      	adds	r5, r7, r5
 8011456:	1828      	adds	r0, r5, r0
 8011458:	687d      	ldr	r5, [r7, #4]
 801145a:	6005      	str	r5, [r0, #0]
					msweep = j;
 801145c:	b2d0      	uxtb	r0, r2
 801145e:	6038      	str	r0, [r7, #0]
 8011460:	2008      	movs	r0, #8
 8011462:	25a0      	movs	r5, #160	; 0xa0
 8011464:	1838      	adds	r0, r7, r0
 8011466:	1945      	adds	r5, r0, r5
 8011468:	6838      	ldr	r0, [r7, #0]
 801146a:	6028      	str	r0, [r5, #0]
 801146c:	0020      	movs	r0, r4
 801146e:	3201      	adds	r2, #1
		for(uint16_t j = 0; j<sweeps/2; j++){
 8011470:	b294      	uxth	r4, r2
 8011472:	4564      	cmp	r4, ip
 8011474:	d3e7      	bcc.n	8011446 <main+0x203e>
 8011476:	3301      	adds	r3, #1
 8011478:	e640      	b.n	80110fc <main+0x1cf4>
		uint16_t apex = data[max_index.x1][max_index.x2];
 801147a:	2208      	movs	r2, #8
 801147c:	23a0      	movs	r3, #160	; 0xa0
 801147e:	18ba      	adds	r2, r7, r2
 8011480:	2008      	movs	r0, #8
 8011482:	18d3      	adds	r3, r2, r3
 8011484:	22b4      	movs	r2, #180	; 0xb4
 8011486:	1838      	adds	r0, r7, r0
 8011488:	1882      	adds	r2, r0, r2
 801148a:	6812      	ldr	r2, [r2, #0]
 801148c:	2008      	movs	r0, #8
 801148e:	0054      	lsls	r4, r2, #1
 8011490:	22a4      	movs	r2, #164	; 0xa4
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	1838      	adds	r0, r7, r0
 8011496:	1882      	adds	r2, r0, r2
 8011498:	009b      	lsls	r3, r3, #2
 801149a:	6013      	str	r3, [r2, #0]
 801149c:	23a4      	movs	r3, #164	; 0xa4
		DBG_PRINTINT(apex);
 801149e:	2288      	movs	r2, #136	; 0x88
		uint16_t apex = data[max_index.x1][max_index.x2];
 80114a0:	18c3      	adds	r3, r0, r3
 80114a2:	681b      	ldr	r3, [r3, #0]
		DBG_PRINTINT(apex);
 80114a4:	1882      	adds	r2, r0, r2
		uint16_t apex = data[max_index.x1][max_index.x2];
 80114a6:	58cb      	ldr	r3, [r1, r3]
		DBG_PRINTINT(apex);
 80114a8:	4e7f      	ldr	r6, [pc, #508]	; (80116a8 <main+0x22a0>)
 80114aa:	5b1b      	ldrh	r3, [r3, r4]
 80114ac:	4d7f      	ldr	r5, [pc, #508]	; (80116ac <main+0x22a4>)
 80114ae:	6013      	str	r3, [r2, #0]
 80114b0:	2288      	movs	r2, #136	; 0x88
 80114b2:	4b7f      	ldr	r3, [pc, #508]	; (80116b0 <main+0x22a8>)
 80114b4:	1882      	adds	r2, r0, r2
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	6812      	ldr	r2, [r2, #0]
 80114ba:	0033      	movs	r3, r6
 80114bc:	497d      	ldr	r1, [pc, #500]	; (80116b4 <main+0x22ac>)
 80114be:	0028      	movs	r0, r5
 80114c0:	f002 ff26 	bl	8014310 <__wrap_printf>
		DBG_PRINTINT(max_index.x1);
 80114c4:	2108      	movs	r1, #8
 80114c6:	22a0      	movs	r2, #160	; 0xa0
 80114c8:	4b7b      	ldr	r3, [pc, #492]	; (80116b8 <main+0x22b0>)
 80114ca:	1879      	adds	r1, r7, r1
 80114cc:	9300      	str	r3, [sp, #0]
 80114ce:	188a      	adds	r2, r1, r2
 80114d0:	0033      	movs	r3, r6
 80114d2:	6812      	ldr	r2, [r2, #0]
 80114d4:	4979      	ldr	r1, [pc, #484]	; (80116bc <main+0x22b4>)
 80114d6:	0028      	movs	r0, r5
 80114d8:	f002 ff1a 	bl	8014310 <__wrap_printf>
		DBG_PRINTINT(max_index.x2);
 80114dc:	2108      	movs	r1, #8
 80114de:	22b4      	movs	r2, #180	; 0xb4
 80114e0:	4b77      	ldr	r3, [pc, #476]	; (80116c0 <main+0x22b8>)
 80114e2:	1879      	adds	r1, r7, r1
 80114e4:	9300      	str	r3, [sp, #0]
 80114e6:	188a      	adds	r2, r1, r2
 80114e8:	0033      	movs	r3, r6
 80114ea:	6812      	ldr	r2, [r2, #0]
 80114ec:	4975      	ldr	r1, [pc, #468]	; (80116c4 <main+0x22bc>)
 80114ee:	0028      	movs	r0, r5
 80114f0:	f002 ff0e 	bl	8014310 <__wrap_printf>
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 80114f4:	2108      	movs	r1, #8
 80114f6:	2298      	movs	r2, #152	; 0x98
 80114f8:	4b73      	ldr	r3, [pc, #460]	; (80116c8 <main+0x22c0>)
 80114fa:	1879      	adds	r1, r7, r1
 80114fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114fe:	188a      	adds	r2, r1, r2
 8011500:	6013      	str	r3, [r2, #0]
	uint8_t mbin = max.x2;
	
	float meansqdist = 0.0f;
	float mass = 0.0f;
	
	uint16_t apex = data[msweep][mbin];
 8011502:	2398      	movs	r3, #152	; 0x98
 8011504:	18cb      	adds	r3, r1, r3
 8011506:	2108      	movs	r1, #8
 8011508:	22a4      	movs	r2, #164	; 0xa4
 801150a:	1879      	adds	r1, r7, r1
 801150c:	188a      	adds	r2, r1, r2
 801150e:	6812      	ldr	r2, [r2, #0]
 8011510:	681b      	ldr	r3, [r3, #0]

	uint16_t halfpex = (uint16_t)(apex * threshold);
	//calulate the mean square distance from peak if above half max
	for(int16_t i = 0; i<bins; i++){
	for(int16_t j = 0; j<sweeps/2; j++){
 8011512:	2600      	movs	r6, #0
	uint16_t apex = data[msweep][mbin];
 8011514:	589b      	ldr	r3, [r3, r2]
	uint16_t halfpex = (uint16_t)(apex * threshold);
 8011516:	5b18      	ldrh	r0, [r3, r4]
 8011518:	f7fc f864 	bl	800d5e4 <__aeabi_i2f>
 801151c:	2208      	movs	r2, #8
 801151e:	2384      	movs	r3, #132	; 0x84
 8011520:	18ba      	adds	r2, r7, r2
 8011522:	18d3      	adds	r3, r2, r3
 8011524:	6018      	str	r0, [r3, #0]
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 8011526:	69b8      	ldr	r0, [r7, #24]
 8011528:	f7fc f8a6 	bl	800d678 <__aeabi_ui2f>
 801152c:	4967      	ldr	r1, [pc, #412]	; (80116cc <main+0x22c4>)
 801152e:	f7fb f831 	bl	800c594 <__aeabi_fdiv>
 8011532:	2208      	movs	r2, #8
 8011534:	2384      	movs	r3, #132	; 0x84
 8011536:	18ba      	adds	r2, r7, r2
 8011538:	18d3      	adds	r3, r2, r3
 801153a:	6819      	ldr	r1, [r3, #0]
 801153c:	f7fb f93c 	bl	800c7b8 <__aeabi_fmul>
 8011540:	f7fb fe7a 	bl	800d238 <__aeabi_f2uiz>
 8011544:	2280      	movs	r2, #128	; 0x80
 8011546:	b283      	uxth	r3, r0
 8011548:	18ba      	adds	r2, r7, r2
 801154a:	6013      	str	r3, [r2, #0]
	float meansqdist = 0.0f;
 801154c:	2208      	movs	r2, #8
 801154e:	23a4      	movs	r3, #164	; 0xa4
	float mass = 0.0f;
 8011550:	2400      	movs	r4, #0
	float meansqdist = 0.0f;
 8011552:	18ba      	adds	r2, r7, r2
 8011554:	18d3      	adds	r3, r2, r3
 8011556:	601c      	str	r4, [r3, #0]
	for(int16_t i = 0; i<bins; i++){
 8011558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801155a:	42b3      	cmp	r3, r6
 801155c:	dd4e      	ble.n	80115fc <main+0x21f4>
 801155e:	0073      	lsls	r3, r6, #1
 8011560:	2208      	movs	r2, #8
 8011562:	67bb      	str	r3, [r7, #120]	; 0x78
 8011564:	23b4      	movs	r3, #180	; 0xb4
 8011566:	18ba      	adds	r2, r7, r2
 8011568:	18d3      	adds	r3, r2, r3
 801156a:	681b      	ldr	r3, [r3, #0]
		if (data[j][i] > halfpex){
			mass += data[j][i];
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 801156c:	2500      	movs	r5, #0
 801156e:	1af3      	subs	r3, r6, r3
 8011570:	435b      	muls	r3, r3
 8011572:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011574:	e039      	b.n	80115ea <main+0x21e2>
		if (data[j][i] > halfpex){
 8011576:	2108      	movs	r1, #8
 8011578:	2298      	movs	r2, #152	; 0x98
 801157a:	1879      	adds	r1, r7, r1
 801157c:	188a      	adds	r2, r1, r2
 801157e:	6812      	ldr	r2, [r2, #0]
 8011580:	00ab      	lsls	r3, r5, #2
 8011582:	58d3      	ldr	r3, [r2, r3]
 8011584:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011586:	5a98      	ldrh	r0, [r3, r2]
 8011588:	2380      	movs	r3, #128	; 0x80
 801158a:	18fb      	adds	r3, r7, r3
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	4283      	cmp	r3, r0
 8011590:	d22a      	bcs.n	80115e8 <main+0x21e0>
			mass += data[j][i];
 8011592:	f7fc f827 	bl	800d5e4 <__aeabi_i2f>
 8011596:	2208      	movs	r2, #8
 8011598:	2380      	movs	r3, #128	; 0x80
 801159a:	18ba      	adds	r2, r7, r2
 801159c:	18d3      	adds	r3, r2, r3
 801159e:	1c01      	adds	r1, r0, #0
 80115a0:	6018      	str	r0, [r3, #0]
 80115a2:	1c20      	adds	r0, r4, #0
 80115a4:	f7fa fe5c 	bl	800c260 <__aeabi_fadd>
 80115a8:	2208      	movs	r2, #8
 80115aa:	23a0      	movs	r3, #160	; 0xa0
 80115ac:	18ba      	adds	r2, r7, r2
 80115ae:	18d3      	adds	r3, r2, r3
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	1c04      	adds	r4, r0, #0
 80115b4:	1ae8      	subs	r0, r5, r3
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 80115b6:	4340      	muls	r0, r0
 80115b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80115ba:	18c0      	adds	r0, r0, r3
			meansqdist += (float)abs(data[j][i])*(float)(dist);
 80115bc:	f7fc f85c 	bl	800d678 <__aeabi_ui2f>
 80115c0:	2208      	movs	r2, #8
 80115c2:	2380      	movs	r3, #128	; 0x80
 80115c4:	18ba      	adds	r2, r7, r2
 80115c6:	18d3      	adds	r3, r2, r3
 80115c8:	6819      	ldr	r1, [r3, #0]
 80115ca:	f7fb f8f5 	bl	800c7b8 <__aeabi_fmul>
 80115ce:	2208      	movs	r2, #8
 80115d0:	23a4      	movs	r3, #164	; 0xa4
 80115d2:	18ba      	adds	r2, r7, r2
 80115d4:	18d3      	adds	r3, r2, r3
 80115d6:	1c01      	adds	r1, r0, #0
 80115d8:	6818      	ldr	r0, [r3, #0]
 80115da:	f7fa fe41 	bl	800c260 <__aeabi_fadd>
 80115de:	2208      	movs	r2, #8
 80115e0:	23a4      	movs	r3, #164	; 0xa4
 80115e2:	18ba      	adds	r2, r7, r2
 80115e4:	18d3      	adds	r3, r2, r3
 80115e6:	6018      	str	r0, [r3, #0]
 80115e8:	3501      	adds	r5, #1
	for(int16_t j = 0; j<sweeps/2; j++){
 80115ea:	2208      	movs	r2, #8
 80115ec:	2390      	movs	r3, #144	; 0x90
 80115ee:	18ba      	adds	r2, r7, r2
 80115f0:	18d3      	adds	r3, r2, r3
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	42ab      	cmp	r3, r5
 80115f6:	dcbe      	bgt.n	8011576 <main+0x216e>
 80115f8:	3601      	adds	r6, #1
 80115fa:	e7ad      	b.n	8011558 <main+0x2150>
		}
	}
	}
	if(mass != 0.0f){
 80115fc:	2100      	movs	r1, #0
 80115fe:	1c20      	adds	r0, r4, #0
 8011600:	f7fb fdcc 	bl	800d19c <__aeabi_fcmpeq>
 8011604:	2800      	cmp	r0, #0
 8011606:	d10c      	bne.n	8011622 <main+0x221a>
		meansqdist /= mass;
 8011608:	2208      	movs	r2, #8
 801160a:	23a4      	movs	r3, #164	; 0xa4
 801160c:	18ba      	adds	r2, r7, r2
 801160e:	18d3      	adds	r3, r2, r3
 8011610:	6818      	ldr	r0, [r3, #0]
 8011612:	1c21      	adds	r1, r4, #0
 8011614:	f7fa ffbe 	bl	800c594 <__aeabi_fdiv>
 8011618:	2208      	movs	r2, #8
 801161a:	23a4      	movs	r3, #164	; 0xa4
 801161c:	18ba      	adds	r2, r7, r2
 801161e:	18d3      	adds	r3, r2, r3
 8011620:	6018      	str	r0, [r3, #0]
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 8011622:	2208      	movs	r2, #8
 8011624:	23ac      	movs	r3, #172	; 0xac
 8011626:	18ba      	adds	r2, r7, r2
 8011628:	18d3      	adds	r3, r2, r3
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	06db      	lsls	r3, r3, #27
 801162e:	d54f      	bpl.n	80116d0 <main+0x22c8>
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 8011630:	6978      	ldr	r0, [r7, #20]
 8011632:	f7fc f821 	bl	800d678 <__aeabi_ui2f>
 8011636:	4925      	ldr	r1, [pc, #148]	; (80116cc <main+0x22c4>)
 8011638:	f7fa ffac 	bl	800c594 <__aeabi_fdiv>
	
	uint8_t msweep = max.x1;
	uint8_t mbin = max.x2;
	
	uint16_t apex = data[msweep][mbin];
	uint16_t halfpex = apex*threshold;
 801163c:	2208      	movs	r2, #8
 801163e:	2384      	movs	r3, #132	; 0x84
 8011640:	18ba      	adds	r2, r7, r2
 8011642:	18d3      	adds	r3, r2, r3
 8011644:	6819      	ldr	r1, [r3, #0]
 8011646:	f7fb f8b7 	bl	800c7b8 <__aeabi_fmul>
 801164a:	f7fb fdf5 	bl	800d238 <__aeabi_f2uiz>
 801164e:	2208      	movs	r2, #8
 8011650:	2390      	movs	r3, #144	; 0x90
 8011652:	18ba      	adds	r2, r7, r2
 8011654:	2108      	movs	r1, #8
 8011656:	18d3      	adds	r3, r2, r3
 8011658:	2298      	movs	r2, #152	; 0x98
 801165a:	1879      	adds	r1, r7, r1
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	188a      	adds	r2, r1, r2
 8011660:	6812      	ldr	r2, [r2, #0]
 8011662:	009b      	lsls	r3, r3, #2
 8011664:	18d3      	adds	r3, r2, r3
 8011666:	2200      	movs	r2, #0
 8011668:	b280      	uxth	r0, r0
	
	for(uint16_t i = 0; i<bins; i++){
 801166a:	2484      	movs	r4, #132	; 0x84
 801166c:	193c      	adds	r4, r7, r4
 801166e:	6824      	ldr	r4, [r4, #0]
 8011670:	b291      	uxth	r1, r2
 8011672:	42a1      	cmp	r1, r4
 8011674:	d22c      	bcs.n	80116d0 <main+0x22c8>
 8011676:	2408      	movs	r4, #8
 8011678:	2198      	movs	r1, #152	; 0x98
 801167a:	193c      	adds	r4, r7, r4
 801167c:	1861      	adds	r1, r4, r1
 801167e:	0055      	lsls	r5, r2, #1
 8011680:	6809      	ldr	r1, [r1, #0]
 8011682:	e007      	b.n	8011694 <main+0x228c>
	for(uint16_t j = 0; j<sweeps/2; j++){
		if(data[j][i] > halfpex){
 8011684:	680c      	ldr	r4, [r1, #0]
 8011686:	1964      	adds	r4, r4, r5
 8011688:	8826      	ldrh	r6, [r4, #0]
 801168a:	4286      	cmp	r6, r0
 801168c:	d901      	bls.n	8011692 <main+0x228a>
			data[j][i] = 0;
 801168e:	2600      	movs	r6, #0
 8011690:	8026      	strh	r6, [r4, #0]
 8011692:	3104      	adds	r1, #4
	for(uint16_t j = 0; j<sweeps/2; j++){
 8011694:	428b      	cmp	r3, r1
 8011696:	d1f5      	bne.n	8011684 <main+0x227c>
 8011698:	3201      	adds	r2, #1
 801169a:	e7e6      	b.n	801166a <main+0x2262>
 801169c:	200002dc 	.word	0x200002dc
 80116a0:	2000028c 	.word	0x2000028c
 80116a4:	2000008c 	.word	0x2000008c
 80116a8:	0801b202 	.word	0x0801b202
 80116ac:	0801bcb2 	.word	0x0801bcb2
 80116b0:	00000329 	.word	0x00000329
 80116b4:	0801c76e 	.word	0x0801c76e
 80116b8:	0000032a 	.word	0x0000032a
 80116bc:	0801c773 	.word	0x0801c773
 80116c0:	0000032b 	.word	0x0000032b
 80116c4:	0801c780 	.word	0x0801c780
 80116c8:	2000010c 	.word	0x2000010c
 80116cc:	447a0000 	.word	0x447a0000
	uint8_t mbin = max.x2;
	
	float mass = 0.0f;	
	floatv2_t center = {0.0f,0.0f};
	
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 80116d0:	2208      	movs	r2, #8
 80116d2:	234c      	movs	r3, #76	; 0x4c
 80116d4:	18ba      	adds	r2, r7, r2
 80116d6:	2108      	movs	r1, #8
 80116d8:	18d3      	adds	r3, r2, r3
 80116da:	22b4      	movs	r2, #180	; 0xb4
 80116dc:	1879      	adds	r1, r7, r1
 80116de:	2008      	movs	r0, #8
 80116e0:	188a      	adds	r2, r1, r2
 80116e2:	2198      	movs	r1, #152	; 0x98
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	6812      	ldr	r2, [r2, #0]
 80116e8:	1838      	adds	r0, r7, r0
 80116ea:	1ad2      	subs	r2, r2, r3
 80116ec:	1841      	adds	r1, r0, r1
 80116ee:	b212      	sxth	r2, r2
 80116f0:	600a      	str	r2, [r1, #0]
	float mass = 0.0f;	
 80116f2:	22ac      	movs	r2, #172	; 0xac
	floatv2_t center = {0.0f,0.0f};
 80116f4:	2400      	movs	r4, #0
	float mass = 0.0f;	
 80116f6:	1882      	adds	r2, r0, r2
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 80116f8:	2008      	movs	r0, #8
	float mass = 0.0f;	
 80116fa:	6014      	str	r4, [r2, #0]
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 80116fc:	2190      	movs	r1, #144	; 0x90
 80116fe:	22b4      	movs	r2, #180	; 0xb4
 8011700:	1838      	adds	r0, r7, r0
 8011702:	1841      	adds	r1, r0, r1
 8011704:	1882      	adds	r2, r0, r2
 8011706:	2008      	movs	r0, #8
 8011708:	600b      	str	r3, [r1, #0]
 801170a:	469c      	mov	ip, r3
 801170c:	2180      	movs	r1, #128	; 0x80
 801170e:	6812      	ldr	r2, [r2, #0]
 8011710:	1838      	adds	r0, r7, r0
 8011712:	4462      	add	r2, ip
 8011714:	1841      	adds	r1, r0, r1
 8011716:	600a      	str	r2, [r1, #0]
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 8011718:	22a0      	movs	r2, #160	; 0xa0
 801171a:	1882      	adds	r2, r0, r2
 801171c:	6812      	ldr	r2, [r2, #0]
	floatv2_t center = {0.0f,0.0f};
 801171e:	1c25      	adds	r5, r4, #0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 8011720:	1ad3      	subs	r3, r2, r3
 8011722:	2284      	movs	r2, #132	; 0x84
 8011724:	18ba      	adds	r2, r7, r2
 8011726:	6013      	str	r3, [r2, #0]
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8011728:	2208      	movs	r2, #8
 801172a:	2398      	movs	r3, #152	; 0x98
 801172c:	18ba      	adds	r2, r7, r2
 801172e:	2108      	movs	r1, #8
 8011730:	18d3      	adds	r3, r2, r3
 8011732:	2280      	movs	r2, #128	; 0x80
 8011734:	1879      	adds	r1, r7, r1
 8011736:	188a      	adds	r2, r1, r2
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	6812      	ldr	r2, [r2, #0]
 801173c:	4293      	cmp	r3, r2
 801173e:	dc00      	bgt.n	8011742 <main+0x233a>
 8011740:	e0cc      	b.n	80118dc <main+0x24d4>
			mass += getdata(j,i);
			center.x1 += (float)getdata(j,i)*(float)j;
			center.x2 += (float)getdata(j,i)*(float)i;
	}
	}
	if(mass != 0.0f){	
 8011742:	2208      	movs	r2, #8
 8011744:	23ac      	movs	r3, #172	; 0xac
 8011746:	18ba      	adds	r2, r7, r2
 8011748:	18d3      	adds	r3, r2, r3
 801174a:	2100      	movs	r1, #0
 801174c:	6818      	ldr	r0, [r3, #0]
 801174e:	f7fb fd25 	bl	800d19c <__aeabi_fcmpeq>
 8011752:	2800      	cmp	r0, #0
 8011754:	d111      	bne.n	801177a <main+0x2372>
		center.x1 /= mass;
 8011756:	2208      	movs	r2, #8
 8011758:	23ac      	movs	r3, #172	; 0xac
 801175a:	18ba      	adds	r2, r7, r2
 801175c:	18d3      	adds	r3, r2, r3
 801175e:	6819      	ldr	r1, [r3, #0]
 8011760:	1c28      	adds	r0, r5, #0
 8011762:	f7fa ff17 	bl	800c594 <__aeabi_fdiv>
		center.x2 /= mass;
 8011766:	2208      	movs	r2, #8
 8011768:	23ac      	movs	r3, #172	; 0xac
 801176a:	18ba      	adds	r2, r7, r2
 801176c:	18d3      	adds	r3, r2, r3
		center.x1 /= mass;
 801176e:	1c05      	adds	r5, r0, #0
		center.x2 /= mass;
 8011770:	6819      	ldr	r1, [r3, #0]
 8011772:	1c20      	adds	r0, r4, #0
 8011774:	f7fa ff0e 	bl	800c594 <__aeabi_fdiv>
 8011778:	1c04      	adds	r4, r0, #0
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 801177a:	49c2      	ldr	r1, [pc, #776]	; (8011a84 <main+0x267c>)
 801177c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801177e:	f7fb f81b 	bl	800c7b8 <__aeabi_fmul>
 8011782:	f7fb fd59 	bl	800d238 <__aeabi_f2uiz>
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 8011786:	b280      	uxth	r0, r0
 8011788:	f7fb ff2c 	bl	800d5e4 <__aeabi_i2f>
 801178c:	1c21      	adds	r1, r4, #0
 801178e:	f7fb f813 	bl	800c7b8 <__aeabi_fmul>
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 8011792:	49bc      	ldr	r1, [pc, #752]	; (8011a84 <main+0x267c>)
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 8011794:	1c04      	adds	r4, r0, #0
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 8011796:	6a38      	ldr	r0, [r7, #32]
 8011798:	f7fb f80e 	bl	800c7b8 <__aeabi_fmul>
 801179c:	f7fb fd4c 	bl	800d238 <__aeabi_f2uiz>
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 80117a0:	b280      	uxth	r0, r0
 80117a2:	f7fb ff1f 	bl	800d5e4 <__aeabi_i2f>
 80117a6:	1c01      	adds	r1, r0, #0
 80117a8:	1c20      	adds	r0, r4, #0
 80117aa:	f7fa fd59 	bl	800c260 <__aeabi_fadd>
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 80117ae:	4bb6      	ldr	r3, [pc, #728]	; (8011a88 <main+0x2680>)
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 80117b0:	1c06      	adds	r6, r0, #0
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 80117b2:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
 80117b4:	f7fb ff16 	bl	800d5e4 <__aeabi_i2f>
 80117b8:	1c01      	adds	r1, r0, #0
 80117ba:	69f8      	ldr	r0, [r7, #28]
 80117bc:	f7fa feea 	bl	800c594 <__aeabi_fdiv>
 80117c0:	1c29      	adds	r1, r5, #0
 80117c2:	f7fa fff9 	bl	800c7b8 <__aeabi_fmul>
 80117c6:	49b1      	ldr	r1, [pc, #708]	; (8011a8c <main+0x2684>)
 80117c8:	f7fa fff6 	bl	800c7b8 <__aeabi_fmul>
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 80117cc:	2208      	movs	r2, #8
 80117ce:	23b0      	movs	r3, #176	; 0xb0
 80117d0:	18ba      	adds	r2, r7, r2
 80117d2:	18d3      	adds	r3, r2, r3
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 80117d4:	1c05      	adds	r5, r0, #0
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 80117d6:	2100      	movs	r1, #0
 80117d8:	6818      	ldr	r0, [r3, #0]
 80117da:	f7fb fcdf 	bl	800d19c <__aeabi_fcmpeq>
		else{amplitude = 0;}
 80117de:	2400      	movs	r4, #0
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 80117e0:	2800      	cmp	r0, #0
 80117e2:	d10e      	bne.n	8011802 <main+0x23fa>
 80117e4:	2208      	movs	r2, #8
 80117e6:	2388      	movs	r3, #136	; 0x88
 80117e8:	18ba      	adds	r2, r7, r2
 80117ea:	18d3      	adds	r3, r2, r3
 80117ec:	6818      	ldr	r0, [r3, #0]
 80117ee:	f7fb fef9 	bl	800d5e4 <__aeabi_i2f>
 80117f2:	2208      	movs	r2, #8
 80117f4:	23b0      	movs	r3, #176	; 0xb0
 80117f6:	18ba      	adds	r2, r7, r2
 80117f8:	18d3      	adds	r3, r2, r3
 80117fa:	6819      	ldr	r1, [r3, #0]
 80117fc:	f7fa feca 	bl	800c594 <__aeabi_fdiv>
 8011800:	1c04      	adds	r4, r0, #0
		RegInt_setregf(0xD0,(uint32_t)velocity, 1);
 8011802:	1c28      	adds	r0, r5, #0
 8011804:	f7fb fd18 	bl	800d238 <__aeabi_f2uiz>
 8011808:	2201      	movs	r2, #1
 801180a:	0001      	movs	r1, r0
 801180c:	20d0      	movs	r0, #208	; 0xd0
 801180e:	f7f4 f96d 	bl	8005aec <RegInt_setregf>
		RegInt_setregf(0xD1,(uint32_t)distance, 1);
 8011812:	1c30      	adds	r0, r6, #0
 8011814:	f7fb fd10 	bl	800d238 <__aeabi_f2uiz>
 8011818:	2201      	movs	r2, #1
 801181a:	0001      	movs	r1, r0
 801181c:	20d1      	movs	r0, #209	; 0xd1
 801181e:	f7f4 f965 	bl	8005aec <RegInt_setregf>
		RegInt_setregf(0xD2,(uint32_t)amplitude, 1);
 8011822:	1c20      	adds	r0, r4, #0
 8011824:	f7fb fd08 	bl	800d238 <__aeabi_f2uiz>
 8011828:	2201      	movs	r2, #1
 801182a:	0001      	movs	r1, r0
 801182c:	20d2      	movs	r0, #210	; 0xd2
 801182e:	f7f4 f95d 	bl	8005aec <RegInt_setregf>
		RegInt_setregf(0xD3,(uint32_t)meansqdist, 1);
 8011832:	2208      	movs	r2, #8
 8011834:	23a4      	movs	r3, #164	; 0xa4
 8011836:	18ba      	adds	r2, r7, r2
 8011838:	18d3      	adds	r3, r2, r3
 801183a:	6818      	ldr	r0, [r3, #0]
 801183c:	f7fb fcfc 	bl	800d238 <__aeabi_f2uiz>
 8011840:	2201      	movs	r2, #1
 8011842:	0001      	movs	r1, r0
 8011844:	20d3      	movs	r0, #211	; 0xd3
 8011846:	f7f4 f951 	bl	8005aec <RegInt_setregf>
		INF_PRINTLN("RESULTS");
 801184a:	4e91      	ldr	r6, [pc, #580]	; (8011a90 <main+0x2688>)
 801184c:	0030      	movs	r0, r6
 801184e:	f002 fd5f 	bl	8014310 <__wrap_printf>
 8011852:	4890      	ldr	r0, [pc, #576]	; (8011a94 <main+0x268c>)
 8011854:	f002 fd5c 	bl	8014310 <__wrap_printf>
 8011858:	4d8f      	ldr	r5, [pc, #572]	; (8011a98 <main+0x2690>)
 801185a:	4c90      	ldr	r4, [pc, #576]	; (8011a9c <main+0x2694>)
 801185c:	4a90      	ldr	r2, [pc, #576]	; (8011aa0 <main+0x2698>)
 801185e:	0029      	movs	r1, r5
 8011860:	0020      	movs	r0, r4
 8011862:	f002 fd55 	bl	8014310 <__wrap_printf>
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
 8011866:	0030      	movs	r0, r6
 8011868:	f002 fd52 	bl	8014310 <__wrap_printf>
 801186c:	20d0      	movs	r0, #208	; 0xd0
 801186e:	f7f3 fff3 	bl	8005858 <RegInt_getreg>
 8011872:	0001      	movs	r1, r0
 8011874:	488b      	ldr	r0, [pc, #556]	; (8011aa4 <main+0x269c>)
 8011876:	f002 fd4b 	bl	8014310 <__wrap_printf>
 801187a:	22d2      	movs	r2, #210	; 0xd2
 801187c:	0029      	movs	r1, r5
 801187e:	0092      	lsls	r2, r2, #2
 8011880:	0020      	movs	r0, r4
 8011882:	f002 fd45 	bl	8014310 <__wrap_printf>
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
 8011886:	0030      	movs	r0, r6
 8011888:	f002 fd42 	bl	8014310 <__wrap_printf>
 801188c:	20d1      	movs	r0, #209	; 0xd1
 801188e:	f7f3 ffe3 	bl	8005858 <RegInt_getreg>
 8011892:	0001      	movs	r1, r0
 8011894:	4884      	ldr	r0, [pc, #528]	; (8011aa8 <main+0x26a0>)
 8011896:	f002 fd3b 	bl	8014310 <__wrap_printf>
 801189a:	4a84      	ldr	r2, [pc, #528]	; (8011aac <main+0x26a4>)
 801189c:	0029      	movs	r1, r5
 801189e:	0020      	movs	r0, r4
 80118a0:	f002 fd36 	bl	8014310 <__wrap_printf>
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
 80118a4:	0030      	movs	r0, r6
 80118a6:	f002 fd33 	bl	8014310 <__wrap_printf>
 80118aa:	20d2      	movs	r0, #210	; 0xd2
 80118ac:	f7f3 ffd4 	bl	8005858 <RegInt_getreg>
 80118b0:	0001      	movs	r1, r0
 80118b2:	487f      	ldr	r0, [pc, #508]	; (8011ab0 <main+0x26a8>)
 80118b4:	f002 fd2c 	bl	8014310 <__wrap_printf>
 80118b8:	4a7e      	ldr	r2, [pc, #504]	; (8011ab4 <main+0x26ac>)
 80118ba:	0029      	movs	r1, r5
 80118bc:	0020      	movs	r0, r4
 80118be:	f002 fd27 	bl	8014310 <__wrap_printf>
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 80118c2:	0030      	movs	r0, r6
 80118c4:	f002 fd24 	bl	8014310 <__wrap_printf>
 80118c8:	20d3      	movs	r0, #211	; 0xd3
 80118ca:	f7f3 ffc5 	bl	8005858 <RegInt_getreg>
 80118ce:	0001      	movs	r1, r0
 80118d0:	4879      	ldr	r0, [pc, #484]	; (8011ab8 <main+0x26b0>)
 80118d2:	f002 fd1d 	bl	8014310 <__wrap_printf>
 80118d6:	4a79      	ldr	r2, [pc, #484]	; (8011abc <main+0x26b4>)
 80118d8:	f7fe ff56 	bl	8010788 <main+0x1380>
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80118dc:	2384      	movs	r3, #132	; 0x84
 80118de:	2108      	movs	r1, #8
 80118e0:	22b4      	movs	r2, #180	; 0xb4
 80118e2:	18fb      	adds	r3, r7, r3
 80118e4:	1879      	adds	r1, r7, r1
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	188a      	adds	r2, r1, r2
 80118ea:	6013      	str	r3, [r2, #0]
 80118ec:	23a0      	movs	r3, #160	; 0xa0
 80118ee:	18cb      	adds	r3, r1, r3
 80118f0:	2108      	movs	r1, #8
 80118f2:	2290      	movs	r2, #144	; 0x90
 80118f4:	1879      	adds	r1, r7, r1
 80118f6:	188a      	adds	r2, r1, r2
 80118f8:	6812      	ldr	r2, [r2, #0]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4694      	mov	ip, r2
 80118fe:	2284      	movs	r2, #132	; 0x84
 8011900:	4463      	add	r3, ip
 8011902:	2108      	movs	r1, #8
 8011904:	1879      	adds	r1, r7, r1
 8011906:	188a      	adds	r2, r1, r2
 8011908:	6013      	str	r3, [r2, #0]
 801190a:	2208      	movs	r2, #8
 801190c:	23b4      	movs	r3, #180	; 0xb4
 801190e:	18ba      	adds	r2, r7, r2
 8011910:	2108      	movs	r1, #8
 8011912:	18d3      	adds	r3, r2, r3
 8011914:	2284      	movs	r2, #132	; 0x84
 8011916:	1879      	adds	r1, r7, r1
 8011918:	188a      	adds	r2, r1, r2
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	6812      	ldr	r2, [r2, #0]
 801191e:	4293      	cmp	r3, r2
 8011920:	dd09      	ble.n	8011936 <main+0x252e>
 8011922:	2398      	movs	r3, #152	; 0x98
 8011924:	18cb      	adds	r3, r1, r3
 8011926:	2108      	movs	r1, #8
 8011928:	2298      	movs	r2, #152	; 0x98
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	1879      	adds	r1, r7, r1
 801192e:	3301      	adds	r3, #1
 8011930:	b21b      	sxth	r3, r3
 8011932:	188a      	adds	r2, r1, r2
 8011934:	e6f7      	b.n	8011726 <main+0x231e>
			mass += getdata(j,i);
 8011936:	2208      	movs	r2, #8
 8011938:	2398      	movs	r3, #152	; 0x98
 801193a:	18ba      	adds	r2, r7, r2
 801193c:	18d3      	adds	r3, r2, r3
 801193e:	2208      	movs	r2, #8
 8011940:	6819      	ldr	r1, [r3, #0]
 8011942:	23b4      	movs	r3, #180	; 0xb4
 8011944:	18ba      	adds	r2, r7, r2
 8011946:	18d3      	adds	r3, r2, r3
 8011948:	6818      	ldr	r0, [r3, #0]
 801194a:	f7ef fa79 	bl	8000e40 <getdata>
 801194e:	0006      	movs	r6, r0
 8011950:	f7fb fe48 	bl	800d5e4 <__aeabi_i2f>
 8011954:	2208      	movs	r2, #8
 8011956:	23ac      	movs	r3, #172	; 0xac
 8011958:	18ba      	adds	r2, r7, r2
 801195a:	18d3      	adds	r3, r2, r3
 801195c:	1c01      	adds	r1, r0, #0
 801195e:	6818      	ldr	r0, [r3, #0]
 8011960:	f7fa fc7e 	bl	800c260 <__aeabi_fadd>
 8011964:	2208      	movs	r2, #8
 8011966:	23ac      	movs	r3, #172	; 0xac
 8011968:	18ba      	adds	r2, r7, r2
 801196a:	18d3      	adds	r3, r2, r3
 801196c:	6018      	str	r0, [r3, #0]
			center.x1 += (float)getdata(j,i)*(float)j;
 801196e:	0030      	movs	r0, r6
 8011970:	f7fb fe82 	bl	800d678 <__aeabi_ui2f>
 8011974:	2208      	movs	r2, #8
 8011976:	23b4      	movs	r3, #180	; 0xb4
 8011978:	18ba      	adds	r2, r7, r2
 801197a:	18d3      	adds	r3, r2, r3
 801197c:	1c06      	adds	r6, r0, #0
 801197e:	6818      	ldr	r0, [r3, #0]
 8011980:	f7fb fe30 	bl	800d5e4 <__aeabi_i2f>
 8011984:	1c31      	adds	r1, r6, #0
 8011986:	f7fa ff17 	bl	800c7b8 <__aeabi_fmul>
 801198a:	1c01      	adds	r1, r0, #0
 801198c:	1c28      	adds	r0, r5, #0
 801198e:	f7fa fc67 	bl	800c260 <__aeabi_fadd>
			center.x2 += (float)getdata(j,i)*(float)i;
 8011992:	2208      	movs	r2, #8
 8011994:	2398      	movs	r3, #152	; 0x98
 8011996:	18ba      	adds	r2, r7, r2
 8011998:	18d3      	adds	r3, r2, r3
			center.x1 += (float)getdata(j,i)*(float)j;
 801199a:	1c05      	adds	r5, r0, #0
			center.x2 += (float)getdata(j,i)*(float)i;
 801199c:	6818      	ldr	r0, [r3, #0]
 801199e:	f7fb fe21 	bl	800d5e4 <__aeabi_i2f>
 80119a2:	1c31      	adds	r1, r6, #0
 80119a4:	f7fa ff08 	bl	800c7b8 <__aeabi_fmul>
 80119a8:	1c01      	adds	r1, r0, #0
 80119aa:	1c20      	adds	r0, r4, #0
 80119ac:	f7fa fc58 	bl	800c260 <__aeabi_fadd>
 80119b0:	2208      	movs	r2, #8
 80119b2:	23b4      	movs	r3, #180	; 0xb4
 80119b4:	18ba      	adds	r2, r7, r2
 80119b6:	18d3      	adds	r3, r2, r3
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	1c04      	adds	r4, r0, #0
 80119bc:	3301      	adds	r3, #1
 80119be:	b21b      	sxth	r3, r3
 80119c0:	22b4      	movs	r2, #180	; 0xb4
 80119c2:	e79e      	b.n	8011902 <main+0x24fa>
	if(reg == 0x07){
 80119c4:	2208      	movs	r2, #8
 80119c6:	23a8      	movs	r3, #168	; 0xa8
 80119c8:	18ba      	adds	r2, r7, r2
 80119ca:	18d3      	adds	r3, r2, r3
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2b07      	cmp	r3, #7
 80119d0:	d104      	bne.n	80119dc <main+0x25d4>
		changeUART1baud(val);
 80119d2:	0028      	movs	r0, r5
 80119d4:	f7f0 fb72 	bl	80020bc <changeUART1baud>
 80119d8:	f7fe fdba 	bl	8010550 <main+0x1148>
    if(reg == 0x0A){
 80119dc:	2208      	movs	r2, #8
 80119de:	23a8      	movs	r3, #168	; 0xa8
 80119e0:	18ba      	adds	r2, r7, r2
 80119e2:	18d3      	adds	r3, r2, r3
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	2b0a      	cmp	r3, #10
 80119e8:	d001      	beq.n	80119ee <main+0x25e6>
 80119ea:	f7fe fdb1 	bl	8010550 <main+0x1148>
    if(mode == 0x00000000){return;}
 80119ee:	2d00      	cmp	r5, #0
 80119f0:	d101      	bne.n	80119f6 <main+0x25ee>
 80119f2:	f7fe fdad 	bl	8010550 <main+0x1148>
    if(mode == 0x00000001){    
 80119f6:	2d01      	cmp	r5, #1
 80119f8:	d13e      	bne.n	8011a78 <main+0x2670>
        stopService();
 80119fa:	f7f4 f8b5 	bl	8005b68 <stopService>
        INF_PRINTLN("STM32 Sleep");
 80119fe:	4e24      	ldr	r6, [pc, #144]	; (8011a90 <main+0x2688>)
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8011a00:	4c2f      	ldr	r4, [pc, #188]	; (8011ac0 <main+0x26b8>)
 8011a02:	0030      	movs	r0, r6
 8011a04:	f002 fc84 	bl	8014310 <__wrap_printf>
 8011a08:	482e      	ldr	r0, [pc, #184]	; (8011ac4 <main+0x26bc>)
 8011a0a:	f002 fc81 	bl	8014310 <__wrap_printf>
 8011a0e:	2295      	movs	r2, #149	; 0x95
 8011a10:	4921      	ldr	r1, [pc, #132]	; (8011a98 <main+0x2690>)
 8011a12:	0052      	lsls	r2, r2, #1
 8011a14:	4821      	ldr	r0, [pc, #132]	; (8011a9c <main+0x2694>)
 8011a16:	f002 fc7b 	bl	8014310 <__wrap_printf>
 8011a1a:	6823      	ldr	r3, [r4, #0]
 8011a1c:	3501      	adds	r5, #1
 8011a1e:	43ab      	bics	r3, r5
 8011a20:	6023      	str	r3, [r4, #0]
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011a22:	4b29      	ldr	r3, [pc, #164]	; (8011ac8 <main+0x26c0>)
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8011a24:	4829      	ldr	r0, [pc, #164]	; (8011acc <main+0x26c4>)
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011a26:	691a      	ldr	r2, [r3, #16]
 8011a28:	43aa      	bics	r2, r5
 8011a2a:	611a      	str	r2, [r3, #16]
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8011a2c:	2207      	movs	r2, #7
 8011a2e:	6801      	ldr	r1, [r0, #0]
 8011a30:	4391      	bics	r1, r2
 8011a32:	3a06      	subs	r2, #6
 8011a34:	430a      	orrs	r2, r1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011a36:	2104      	movs	r1, #4
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8011a38:	6002      	str	r2, [r0, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011a3a:	691a      	ldr	r2, [r3, #16]
 8011a3c:	430a      	orrs	r2, r1
 8011a3e:	611a      	str	r2, [r3, #16]
    __SEV();
 8011a40:	bf40      	sev
    __WFE();
 8011a42:	bf20      	wfe
    __WFE();
 8011a44:	bf20      	wfe
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011a46:	691a      	ldr	r2, [r3, #16]
 8011a48:	438a      	bics	r2, r1
 8011a4a:	611a      	str	r2, [r3, #16]
        SystemClock_Config();
 8011a4c:	f7f0 fb92 	bl	8002174 <SystemClock_Config>
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8011a50:	6823      	ldr	r3, [r4, #0]
        uint32_t baudrate = RegInt_getreg(0x07);
 8011a52:	2007      	movs	r0, #7
 8011a54:	432b      	orrs	r3, r5
 8011a56:	6023      	str	r3, [r4, #0]
 8011a58:	f7f3 fefe 	bl	8005858 <RegInt_getreg>
        changeUART1baud(baudrate);
 8011a5c:	f7f0 fb2e 	bl	80020bc <changeUART1baud>
        INF_PRINTLN("STM32 Wake");
 8011a60:	0030      	movs	r0, r6
 8011a62:	f002 fc55 	bl	8014310 <__wrap_printf>
 8011a66:	481a      	ldr	r0, [pc, #104]	; (8011ad0 <main+0x26c8>)
 8011a68:	f002 fc52 	bl	8014310 <__wrap_printf>
 8011a6c:	2236      	movs	r2, #54	; 0x36
 8011a6e:	490a      	ldr	r1, [pc, #40]	; (8011a98 <main+0x2690>)
 8011a70:	32ff      	adds	r2, #255	; 0xff
 8011a72:	480a      	ldr	r0, [pc, #40]	; (8011a9c <main+0x2694>)
 8011a74:	f002 fc4c 	bl	8014310 <__wrap_printf>
    RegInt_setregf(0x0A,0x00000000,1);
 8011a78:	2201      	movs	r2, #1
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	200a      	movs	r0, #10
 8011a7e:	f7fe fda3 	bl	80105c8 <main+0x11c0>
 8011a82:	46c0      	nop			; (mov r8, r8)
 8011a84:	447a0000 	.word	0x447a0000
 8011a88:	2000010c 	.word	0x2000010c
 8011a8c:	401c7ae1 	.word	0x401c7ae1
 8011a90:	0801c4e6 	.word	0x0801c4e6
 8011a94:	0801c78d 	.word	0x0801c78d
 8011a98:	0801b202 	.word	0x0801b202
 8011a9c:	0801bcb9 	.word	0x0801bcb9
 8011aa0:	00000347 	.word	0x00000347
 8011aa4:	0801c795 	.word	0x0801c795
 8011aa8:	0801c7a8 	.word	0x0801c7a8
 8011aac:	00000349 	.word	0x00000349
 8011ab0:	0801c7b9 	.word	0x0801c7b9
 8011ab4:	0000034a 	.word	0x0000034a
 8011ab8:	0801c7cc 	.word	0x0801c7cc
 8011abc:	0000034b 	.word	0x0000034b
 8011ac0:	e000e010 	.word	0xe000e010
 8011ac4:	0801c7ea 	.word	0x0801c7ea
 8011ac8:	e000ed00 	.word	0xe000ed00
 8011acc:	40007000 	.word	0x40007000
 8011ad0:	0801c7f6 	.word	0x0801c7f6
	}else if (uart_rx_buff[0] == 0xFA && ((uart_rx_buff[1] == 0xE8) || (uart_rx_buff[1] == 0xE9)) && cmd_length == 3){
 8011ad4:	2afa      	cmp	r2, #250	; 0xfa
 8011ad6:	d001      	beq.n	8011adc <main+0x26d4>
 8011ad8:	f7fe fca8 	bl	801042c <main+0x1024>
 8011adc:	785a      	ldrb	r2, [r3, #1]
 8011ade:	0011      	movs	r1, r2
 8011ae0:	3118      	adds	r1, #24
 8011ae2:	b2c9      	uxtb	r1, r1
 8011ae4:	2901      	cmp	r1, #1
 8011ae6:	d901      	bls.n	8011aec <main+0x26e4>
 8011ae8:	f7fe fca0 	bl	801042c <main+0x1024>
 8011aec:	344d      	adds	r4, #77	; 0x4d
 8011aee:	7821      	ldrb	r1, [r4, #0]
 8011af0:	2903      	cmp	r1, #3
 8011af2:	d001      	beq.n	8011af8 <main+0x26f0>
 8011af4:	f7fe fc9a 	bl	801042c <main+0x1024>
		uint16_t offst = (offst_h << 8) | offst_l;
 8011af8:	78d8      	ldrb	r0, [r3, #3]
 8011afa:	789b      	ldrb	r3, [r3, #2]
 8011afc:	0200      	lsls	r0, r0, #8
 8011afe:	4303      	orrs	r3, r0
 8011b00:	2008      	movs	r0, #8
 8011b02:	31ad      	adds	r1, #173	; 0xad
 8011b04:	1838      	adds	r0, r7, r0
 8011b06:	1841      	adds	r1, r0, r1
		bufflen = (sparse_metadata.data_length)*sizeof(uint16_t);
 8011b08:	4884      	ldr	r0, [pc, #528]	; (8011d1c <main+0x2914>)
		uint16_t offst = (offst_h << 8) | offst_l;
 8011b0a:	600b      	str	r3, [r1, #0]
		bufflen = (sparse_metadata.data_length)*sizeof(uint16_t);
 8011b0c:	0003      	movs	r3, r0
 8011b0e:	330e      	adds	r3, #14
 8011b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011b12:	4983      	ldr	r1, [pc, #524]	; (8011d20 <main+0x2918>)
 8011b14:	005b      	lsls	r3, r3, #1
 8011b16:	618b      	str	r3, [r1, #24]
		bufflen_far = (sparse_metadata_far.data_length)*sizeof(uint16_t);
 8011b18:	0003      	movs	r3, r0
 8011b1a:	335c      	adds	r3, #92	; 0x5c
 8011b1c:	891b      	ldrh	r3, [r3, #8]
 8011b1e:	005b      	lsls	r3, r3, #1
 8011b20:	61cb      	str	r3, [r1, #28]
		if(uart_rx_buff[1] == 0xE8){
 8011b22:	2ae8      	cmp	r2, #232	; 0xe8
 8011b24:	d162      	bne.n	8011bec <main+0x27e4>
		datalen = sweeps*bins*sizeof(uint16_t);
 8011b26:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8011b28:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8011b2a:	4359      	muls	r1, r3
 8011b2c:	004b      	lsls	r3, r1, #1
		datalen = 128*sizeof(uint16_t);
 8011b2e:	2008      	movs	r0, #8
 8011b30:	21b4      	movs	r1, #180	; 0xb4
 8011b32:	1838      	adds	r0, r7, r0
 8011b34:	1841      	adds	r1, r0, r1
 8011b36:	600b      	str	r3, [r1, #0]
		uart_tx_buff[0] = 0xCC;
 8011b38:	23cc      	movs	r3, #204	; 0xcc
		uart_tx_buff[1] = get_byte(datalen+1,0);
 8011b3a:	2108      	movs	r1, #8
		uart_tx_buff[0] = 0xCC;
 8011b3c:	4c79      	ldr	r4, [pc, #484]	; (8011d24 <main+0x291c>)
		uart_tx_buff[1] = get_byte(datalen+1,0);
 8011b3e:	1879      	adds	r1, r7, r1
		uart_tx_buff[0] = 0xCC;
 8011b40:	347e      	adds	r4, #126	; 0x7e
 8011b42:	7023      	strb	r3, [r4, #0]
		uart_tx_buff[1] = get_byte(datalen+1,0);
 8011b44:	3b18      	subs	r3, #24
 8011b46:	18cb      	adds	r3, r1, r3
 8011b48:	681b      	ldr	r3, [r3, #0]
		DBG_PRINTLN("buffer transmitt");
 8011b4a:	4877      	ldr	r0, [pc, #476]	; (8011d28 <main+0x2920>)
		uart_tx_buff[1] = get_byte(datalen+1,0);
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	7063      	strb	r3, [r4, #1]
 8011b50:	0a1b      	lsrs	r3, r3, #8
		uart_tx_buff[2] = get_byte(datalen+1,1);
 8011b52:	70a3      	strb	r3, [r4, #2]
		uart_tx_buff[3] = 0xF7;
 8011b54:	23f7      	movs	r3, #247	; 0xf7
		uart_tx_buff[4] = uart_rx_buff[1];
 8011b56:	7122      	strb	r2, [r4, #4]
		uart_tx_buff[3] = 0xF7;
 8011b58:	70e3      	strb	r3, [r4, #3]
		DBG_PRINTLN("buffer transmitt");
 8011b5a:	f002 fbd9 	bl	8014310 <__wrap_printf>
 8011b5e:	4873      	ldr	r0, [pc, #460]	; (8011d2c <main+0x2924>)
 8011b60:	f002 fbd6 	bl	8014310 <__wrap_printf>
 8011b64:	4d72      	ldr	r5, [pc, #456]	; (8011d30 <main+0x2928>)
 8011b66:	22c7      	movs	r2, #199	; 0xc7
 8011b68:	0029      	movs	r1, r5
 8011b6a:	4872      	ldr	r0, [pc, #456]	; (8011d34 <main+0x292c>)
 8011b6c:	f002 fbd0 	bl	8014310 <__wrap_printf>
		DBG_PRINTINT(datalen);
 8011b70:	2108      	movs	r1, #8
 8011b72:	23c8      	movs	r3, #200	; 0xc8
 8011b74:	22b4      	movs	r2, #180	; 0xb4
 8011b76:	1879      	adds	r1, r7, r1
 8011b78:	9300      	str	r3, [sp, #0]
 8011b7a:	188a      	adds	r2, r1, r2
 8011b7c:	002b      	movs	r3, r5
 8011b7e:	6812      	ldr	r2, [r2, #0]
 8011b80:	496d      	ldr	r1, [pc, #436]	; (8011d38 <main+0x2930>)
 8011b82:	486e      	ldr	r0, [pc, #440]	; (8011d3c <main+0x2934>)
 8011b84:	f002 fbc4 	bl	8014310 <__wrap_printf>
		DBG_PRINTINT(bufflen);
 8011b88:	23c9      	movs	r3, #201	; 0xc9
 8011b8a:	4e65      	ldr	r6, [pc, #404]	; (8011d20 <main+0x2918>)
 8011b8c:	9300      	str	r3, [sp, #0]
 8011b8e:	69b2      	ldr	r2, [r6, #24]
 8011b90:	002b      	movs	r3, r5
 8011b92:	496b      	ldr	r1, [pc, #428]	; (8011d40 <main+0x2938>)
 8011b94:	4869      	ldr	r0, [pc, #420]	; (8011d3c <main+0x2934>)
 8011b96:	f002 fbbb 	bl	8014310 <__wrap_printf>
		DBG_PRINTINT(bufflen_far);
 8011b9a:	23ca      	movs	r3, #202	; 0xca
 8011b9c:	9300      	str	r3, [sp, #0]
 8011b9e:	69f2      	ldr	r2, [r6, #28]
 8011ba0:	002b      	movs	r3, r5
 8011ba2:	4968      	ldr	r1, [pc, #416]	; (8011d44 <main+0x293c>)
 8011ba4:	4865      	ldr	r0, [pc, #404]	; (8011d3c <main+0x2934>)
 8011ba6:	f002 fbb3 	bl	8014310 <__wrap_printf>
		HAL_UART_Transmit(&huart1, uart_tx_buff, 5, 10);
 8011baa:	230a      	movs	r3, #10
 8011bac:	2205      	movs	r2, #5
 8011bae:	0021      	movs	r1, r4
 8011bb0:	4865      	ldr	r0, [pc, #404]	; (8011d48 <main+0x2940>)
 8011bb2:	f7f7 fc59 	bl	8009468 <HAL_UART_Transmit>
		queue_cmd_end = 1;
 8011bb6:	2201      	movs	r2, #1
 8011bb8:	4b64      	ldr	r3, [pc, #400]	; (8011d4c <main+0x2944>)
		DBG_PRINTINT(queue_cmd_end);
 8011bba:	4965      	ldr	r1, [pc, #404]	; (8011d50 <main+0x2948>)
		queue_cmd_end = 1;
 8011bbc:	3370      	adds	r3, #112	; 0x70
 8011bbe:	701a      	strb	r2, [r3, #0]
		DBG_PRINTINT(queue_cmd_end);
 8011bc0:	23ce      	movs	r3, #206	; 0xce
 8011bc2:	485e      	ldr	r0, [pc, #376]	; (8011d3c <main+0x2934>)
 8011bc4:	9300      	str	r3, [sp, #0]
 8011bc6:	002b      	movs	r3, r5
 8011bc8:	f002 fba2 	bl	8014310 <__wrap_printf>
		HAL_UART_Transmit_IT(&huart1, ((uint8_t*) *data + offst), datalen);
 8011bcc:	2208      	movs	r2, #8
 8011bce:	23b4      	movs	r3, #180	; 0xb4
 8011bd0:	18ba      	adds	r2, r7, r2
 8011bd2:	18d3      	adds	r3, r2, r3
 8011bd4:	8819      	ldrh	r1, [r3, #0]
 8011bd6:	4b51      	ldr	r3, [pc, #324]	; (8011d1c <main+0x2914>)
 8011bd8:	2208      	movs	r2, #8
 8011bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bdc:	18ba      	adds	r2, r7, r2
 8011bde:	6818      	ldr	r0, [r3, #0]
 8011be0:	23b0      	movs	r3, #176	; 0xb0
 8011be2:	18d3      	adds	r3, r2, r3
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	18c0      	adds	r0, r0, r3
 8011be8:	f7fe fc1e 	bl	8010428 <main+0x1020>
		datalen = 128*sizeof(uint16_t);
 8011bec:	2380      	movs	r3, #128	; 0x80
 8011bee:	005b      	lsls	r3, r3, #1
 8011bf0:	e79d      	b.n	8011b2e <main+0x2726>
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8011bf2:	4b58      	ldr	r3, [pc, #352]	; (8011d54 <main+0x294c>)
 8011bf4:	4958      	ldr	r1, [pc, #352]	; (8011d58 <main+0x2950>)
 8011bf6:	6818      	ldr	r0, [r3, #0]
 8011bf8:	2306      	movs	r3, #6
 8011bfa:	4358      	muls	r0, r3
 8011bfc:	f7fb f90e 	bl	800ce1c <__udivsi3>

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8011c00:	6833      	ldr	r3, [r6, #0]
 8011c02:	4a56      	ldr	r2, [pc, #344]	; (8011d5c <main+0x2954>)
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8011c04:	3001      	adds	r0, #1
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8011c06:	4013      	ands	r3, r2
 8011c08:	6033      	str	r3, [r6, #0]

  /* Wait until REGLPF is reset */
  while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8011c0a:	4b55      	ldr	r3, [pc, #340]	; (8011d60 <main+0x2958>)
 8011c0c:	695b      	ldr	r3, [r3, #20]
 8011c0e:	422b      	tst	r3, r5
 8011c10:	d101      	bne.n	8011c16 <main+0x280e>
 8011c12:	f7fe fc20 	bl	8010456 <main+0x104e>
  {
    if(wait_loop_index != 0U)
 8011c16:	2800      	cmp	r0, #0
 8011c18:	d101      	bne.n	8011c1e <main+0x2816>
 8011c1a:	f7fe fc24 	bl	8010466 <main+0x105e>
    {
      wait_loop_index--;
 8011c1e:	3801      	subs	r0, #1
 8011c20:	e7f3      	b.n	8011c0a <main+0x2802>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011c22:	23f0      	movs	r3, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011c24:	2500      	movs	r5, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011c26:	011b      	lsls	r3, r3, #4
 8011c28:	f7fd ff9f 	bl	800fb6a <main+0x762>
	if (val == 0x06){evalData();}
 8011c2c:	2d06      	cmp	r5, #6
 8011c2e:	d001      	beq.n	8011c34 <main+0x282c>
 8011c30:	f7fe fc8e 	bl	8010550 <main+0x1148>
	uint8v2_t data_size = {sweeps,bins};
 8011c34:	2108      	movs	r1, #8
 8011c36:	22b4      	movs	r2, #180	; 0xb4
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 8011c38:	4c38      	ldr	r4, [pc, #224]	; (8011d1c <main+0x2914>)
	uint8v2_t data_size = {sweeps,bins};
 8011c3a:	1879      	adds	r1, r7, r1
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 8011c3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
	uint8v2_t data_size = {sweeps,bins};
 8011c3e:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 8011c40:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 8011c42:	6c63      	ldr	r3, [r4, #68]	; 0x44
	uint8v2_t data_size = {sweeps,bins};
 8011c44:	188a      	adds	r2, r1, r2
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 8011c46:	623b      	str	r3, [r7, #32]
	float sweep_rate = sparse_metadata.sweep_rate;
 8011c48:	6d23      	ldr	r3, [r4, #80]	; 0x50
	uint8v2_t data_size = {sweeps,bins};
 8011c4a:	2108      	movs	r1, #8
	float sweep_rate = sparse_metadata.sweep_rate;
 8011c4c:	61fb      	str	r3, [r7, #28]
	uint8v2_t data_size = {sweeps,bins};
 8011c4e:	b2f3      	uxtb	r3, r6
 8011c50:	6013      	str	r3, [r2, #0]
 8011c52:	22a4      	movs	r2, #164	; 0xa4
 8011c54:	1879      	adds	r1, r7, r1
 8011c56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8011c58:	188a      	adds	r2, r1, r2
 8011c5a:	6013      	str	r3, [r2, #0]
 8011c5c:	23a4      	movs	r3, #164	; 0xa4
 8011c5e:	18cb      	adds	r3, r1, r3
 8011c60:	781b      	ldrb	r3, [r3, #0]
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 8011c62:	20d4      	movs	r0, #212	; 0xd4
	uint8v2_t data_size = {sweeps,bins};
 8011c64:	66fb      	str	r3, [r7, #108]	; 0x6c
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 8011c66:	f7f3 fdf7 	bl	8005858 <RegInt_getreg>
 8011c6a:	61b8      	str	r0, [r7, #24]
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 8011c6c:	20d8      	movs	r0, #216	; 0xd8
 8011c6e:	f7f3 fdf3 	bl	8005858 <RegInt_getreg>
 8011c72:	6178      	str	r0, [r7, #20]
	uint32_t mode = RegInt_getreg(0xD6);
 8011c74:	20d6      	movs	r0, #214	; 0xd6
 8011c76:	f7f3 fdef 	bl	8005858 <RegInt_getreg>
 8011c7a:	2208      	movs	r2, #8
 8011c7c:	23ac      	movs	r3, #172	; 0xac
 8011c7e:	18ba      	adds	r2, r7, r2
 8011c80:	18d3      	adds	r3, r2, r3
 8011c82:	6018      	str	r0, [r3, #0]
	uint8_t roi_radius = RegInt_getreg(0xD7);
 8011c84:	20d7      	movs	r0, #215	; 0xd7
 8011c86:	f7f3 fde7 	bl	8005858 <RegInt_getreg>
 8011c8a:	6578      	str	r0, [r7, #84]	; 0x54
	uint32_t band_filt = RegInt_getreg(0xD9);
 8011c8c:	20d9      	movs	r0, #217	; 0xd9
 8011c8e:	f7f3 fde3 	bl	8005858 <RegInt_getreg>
	DBG_PRINTINT(mode);
 8011c92:	2108      	movs	r1, #8
 8011c94:	22ac      	movs	r2, #172	; 0xac
 8011c96:	4b33      	ldr	r3, [pc, #204]	; (8011d64 <main+0x295c>)
 8011c98:	1879      	adds	r1, r7, r1
	uint32_t band_filt = RegInt_getreg(0xD9);
 8011c9a:	6138      	str	r0, [r7, #16]
	DBG_PRINTINT(mode);
 8011c9c:	188a      	adds	r2, r1, r2
 8011c9e:	9300      	str	r3, [sp, #0]
 8011ca0:	6812      	ldr	r2, [r2, #0]
 8011ca2:	4b23      	ldr	r3, [pc, #140]	; (8011d30 <main+0x2928>)
 8011ca4:	4930      	ldr	r1, [pc, #192]	; (8011d68 <main+0x2960>)
 8011ca6:	4825      	ldr	r0, [pc, #148]	; (8011d3c <main+0x2934>)
 8011ca8:	f002 fb32 	bl	8014310 <__wrap_printf>
	if(mode & 0x00000001){dcdatarm(data, data_size);}
 8011cac:	2208      	movs	r2, #8
 8011cae:	23ac      	movs	r3, #172	; 0xac
 8011cb0:	18ba      	adds	r2, r7, r2
 8011cb2:	18d3      	adds	r3, r2, r3
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	07db      	lsls	r3, r3, #31
 8011cb8:	d401      	bmi.n	8011cbe <main+0x28b6>
 8011cba:	f7fe fded 	bl	8010898 <main+0x1490>
 8011cbe:	2108      	movs	r1, #8
 8011cc0:	22b0      	movs	r2, #176	; 0xb0
 8011cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011cc4:	1879      	adds	r1, r7, r1
 8011cc6:	188a      	adds	r2, r1, r2
 8011cc8:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i<bins; i++){
 8011cca:	23a4      	movs	r3, #164	; 0xa4
 8011ccc:	18cb      	adds	r3, r1, r3
 8011cce:	2108      	movs	r1, #8
 8011cd0:	24ff      	movs	r4, #255	; 0xff
 8011cd2:	2298      	movs	r2, #152	; 0x98
 8011cd4:	2500      	movs	r5, #0
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	1879      	adds	r1, r7, r1
 8011cda:	4023      	ands	r3, r4
 8011cdc:	188a      	adds	r2, r1, r2
		for(uint16_t j = 0; j<sweeps; j++){
 8011cde:	4034      	ands	r4, r6
	for(uint16_t i = 0; i<bins; i++){
 8011ce0:	6013      	str	r3, [r2, #0]
		for(uint16_t j = 0; j<sweeps; j++){
 8011ce2:	603c      	str	r4, [r7, #0]
	for(uint16_t i = 0; i<bins; i++){
 8011ce4:	2108      	movs	r1, #8
 8011ce6:	2298      	movs	r2, #152	; 0x98
 8011ce8:	1879      	adds	r1, r7, r1
 8011cea:	188a      	adds	r2, r1, r2
 8011cec:	6812      	ldr	r2, [r2, #0]
 8011cee:	b2ab      	uxth	r3, r5
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d801      	bhi.n	8011cf8 <main+0x28f0>
 8011cf4:	f7fe fdd0 	bl	8010898 <main+0x1490>
 8011cf8:	2108      	movs	r1, #8
 8011cfa:	22a0      	movs	r2, #160	; 0xa0
 8011cfc:	1879      	adds	r1, r7, r1
 8011cfe:	006b      	lsls	r3, r5, #1
 8011d00:	188a      	adds	r2, r1, r2
 8011d02:	6013      	str	r3, [r2, #0]
 8011d04:	2300      	movs	r3, #0
		uint32_t accumulator = 0;
 8011d06:	0018      	movs	r0, r3
 8011d08:	f7fe fd80 	bl	801080c <main+0x1404>
    envelope_config = acc_service_envelope_configuration_create();
 8011d0c:	4b0f      	ldr	r3, [pc, #60]	; (8011d4c <main+0x2944>)
 8011d0e:	6598      	str	r0, [r3, #88]	; 0x58
		printf("envelope config creation fail");
 8011d10:	4816      	ldr	r0, [pc, #88]	; (8011d6c <main+0x2964>)
 8011d12:	f002 fafd 	bl	8014310 <__wrap_printf>
 8011d16:	f7fe fb5e 	bl	80103d6 <main+0xfce>
 8011d1a:	46c0      	nop			; (mov r8, r8)
 8011d1c:	2000010c 	.word	0x2000010c
 8011d20:	2000030c 	.word	0x2000030c
 8011d24:	2000020c 	.word	0x2000020c
 8011d28:	0801b1ea 	.word	0x0801b1ea
 8011d2c:	0801c801 	.word	0x0801c801
 8011d30:	0801b202 	.word	0x0801b202
 8011d34:	0801bcb9 	.word	0x0801bcb9
 8011d38:	0801c812 	.word	0x0801c812
 8011d3c:	0801bcb2 	.word	0x0801bcb2
 8011d40:	0801c81a 	.word	0x0801c81a
 8011d44:	0801c822 	.word	0x0801c822
 8011d48:	200005a0 	.word	0x200005a0
 8011d4c:	2000018c 	.word	0x2000018c
 8011d50:	0801c82e 	.word	0x0801c82e
 8011d54:	20000000 	.word	0x20000000
 8011d58:	000f4240 	.word	0x000f4240
 8011d5c:	ffffbfff 	.word	0xffffbfff
 8011d60:	40007000 	.word	0x40007000
 8011d64:	00000313 	.word	0x00000313
 8011d68:	0801ac6d 	.word	0x0801ac6d
 8011d6c:	0801c83c 	.word	0x0801c83c

08011d70 <_write>:
extern UART_HandleTypeDef DEBUG_UART_HANDLE;

int _write(int file, char *ptr, int len);

int _write(int file, char *ptr, int len)
{
 8011d70:	b510      	push	{r4, lr}
 8011d72:	0014      	movs	r4, r2
	(void)file;
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t*)ptr, len, 0xFFFF);
 8011d74:	4b03      	ldr	r3, [pc, #12]	; (8011d84 <_write+0x14>)
 8011d76:	b292      	uxth	r2, r2
 8011d78:	4803      	ldr	r0, [pc, #12]	; (8011d88 <_write+0x18>)
 8011d7a:	f7f7 fb75 	bl	8009468 <HAL_UART_Transmit>
	return len;
}
 8011d7e:	0020      	movs	r0, r4
 8011d80:	bd10      	pop	{r4, pc}
 8011d82:	46c0      	nop			; (mov r8, r8)
 8011d84:	0000ffff 	.word	0x0000ffff
 8011d88:	20000638 	.word	0x20000638

08011d8c <Reset_Handler>:
 8011d8c:	480d      	ldr	r0, [pc, #52]	; (8011dc4 <LoopForever+0x2>)
 8011d8e:	4685      	mov	sp, r0
 8011d90:	2100      	movs	r1, #0
 8011d92:	e003      	b.n	8011d9c <LoopCopyDataInit>

08011d94 <CopyDataInit>:
 8011d94:	4b0c      	ldr	r3, [pc, #48]	; (8011dc8 <LoopForever+0x6>)
 8011d96:	585b      	ldr	r3, [r3, r1]
 8011d98:	5043      	str	r3, [r0, r1]
 8011d9a:	3104      	adds	r1, #4

08011d9c <LoopCopyDataInit>:
 8011d9c:	480b      	ldr	r0, [pc, #44]	; (8011dcc <LoopForever+0xa>)
 8011d9e:	4b0c      	ldr	r3, [pc, #48]	; (8011dd0 <LoopForever+0xe>)
 8011da0:	1842      	adds	r2, r0, r1
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d3f6      	bcc.n	8011d94 <CopyDataInit>
 8011da6:	4a0b      	ldr	r2, [pc, #44]	; (8011dd4 <LoopForever+0x12>)
 8011da8:	e002      	b.n	8011db0 <LoopFillZerobss>

08011daa <FillZerobss>:
 8011daa:	2300      	movs	r3, #0
 8011dac:	6013      	str	r3, [r2, #0]
 8011dae:	3204      	adds	r2, #4

08011db0 <LoopFillZerobss>:
 8011db0:	4b09      	ldr	r3, [pc, #36]	; (8011dd8 <LoopForever+0x16>)
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d3f9      	bcc.n	8011daa <FillZerobss>
 8011db6:	f7f4 fac1 	bl	800633c <SystemInit>
 8011dba:	f000 fa31 	bl	8012220 <__libc_init_array>
 8011dbe:	f7fd fb23 	bl	800f408 <main>

08011dc2 <LoopForever>:
 8011dc2:	e7fe      	b.n	8011dc2 <LoopForever>
 8011dc4:	20009000 	.word	0x20009000
 8011dc8:	0801d660 	.word	0x0801d660
 8011dcc:	20000000 	.word	0x20000000
 8011dd0:	20000070 	.word	0x20000070
 8011dd4:	20000070 	.word	0x20000070
 8011dd8:	200006c8 	.word	0x200006c8

08011ddc <ADC1_COMP_IRQHandler>:
 8011ddc:	e7fe      	b.n	8011ddc <ADC1_COMP_IRQHandler>
	...

08011de0 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011de0:	4b0b      	ldr	r3, [pc, #44]	; (8011e10 <_sbrk+0x30>)
 8011de2:	490c      	ldr	r1, [pc, #48]	; (8011e14 <_sbrk+0x34>)
{
 8011de4:	0002      	movs	r2, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011de6:	1ac9      	subs	r1, r1, r3
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8011de8:	4b0b      	ldr	r3, [pc, #44]	; (8011e18 <_sbrk+0x38>)
{
 8011dea:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8011dec:	6818      	ldr	r0, [r3, #0]
 8011dee:	2800      	cmp	r0, #0
 8011df0:	d101      	bne.n	8011df6 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8011df2:	480a      	ldr	r0, [pc, #40]	; (8011e1c <_sbrk+0x3c>)
 8011df4:	6018      	str	r0, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8011df6:	6818      	ldr	r0, [r3, #0]
 8011df8:	1882      	adds	r2, r0, r2
 8011dfa:	428a      	cmp	r2, r1
 8011dfc:	d906      	bls.n	8011e0c <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8011dfe:	f000 f869 	bl	8011ed4 <__errno>
 8011e02:	230c      	movs	r3, #12
 8011e04:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8011e06:	2001      	movs	r0, #1
 8011e08:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8011e0a:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8011e0c:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8011e0e:	e7fc      	b.n	8011e0a <_sbrk+0x2a>
 8011e10:	00001400 	.word	0x00001400
 8011e14:	20009000 	.word	0x20009000
 8011e18:	2000062c 	.word	0x2000062c
 8011e1c:	200006c8 	.word	0x200006c8

08011e20 <__ieee754_sqrtf>:
 8011e20:	492a      	ldr	r1, [pc, #168]	; (8011ecc <__ieee754_sqrtf+0xac>)
 8011e22:	0043      	lsls	r3, r0, #1
 8011e24:	b570      	push	{r4, r5, r6, lr}
 8011e26:	0002      	movs	r2, r0
 8011e28:	1c04      	adds	r4, r0, #0
 8011e2a:	085b      	lsrs	r3, r3, #1
 8011e2c:	428b      	cmp	r3, r1
 8011e2e:	d83b      	bhi.n	8011ea8 <__ieee754_sqrtf+0x88>
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d038      	beq.n	8011ea6 <__ieee754_sqrtf+0x86>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	db3e      	blt.n	8011eb6 <__ieee754_sqrtf+0x96>
 8011e38:	4925      	ldr	r1, [pc, #148]	; (8011ed0 <__ieee754_sqrtf+0xb0>)
 8011e3a:	15c6      	asrs	r6, r0, #23
 8011e3c:	428b      	cmp	r3, r1
 8011e3e:	d80b      	bhi.n	8011e58 <__ieee754_sqrtf+0x38>
 8011e40:	2080      	movs	r0, #128	; 0x80
 8011e42:	0400      	lsls	r0, r0, #16
 8011e44:	4220      	tst	r0, r4
 8011e46:	d13d      	bne.n	8011ec4 <__ieee754_sqrtf+0xa4>
 8011e48:	2300      	movs	r3, #0
 8011e4a:	e000      	b.n	8011e4e <__ieee754_sqrtf+0x2e>
 8011e4c:	000b      	movs	r3, r1
 8011e4e:	0052      	lsls	r2, r2, #1
 8011e50:	1c59      	adds	r1, r3, #1
 8011e52:	4202      	tst	r2, r0
 8011e54:	d0fa      	beq.n	8011e4c <__ieee754_sqrtf+0x2c>
 8011e56:	1af6      	subs	r6, r6, r3
 8011e58:	2380      	movs	r3, #128	; 0x80
 8011e5a:	0252      	lsls	r2, r2, #9
 8011e5c:	041b      	lsls	r3, r3, #16
 8011e5e:	0a52      	lsrs	r2, r2, #9
 8011e60:	431a      	orrs	r2, r3
 8011e62:	3e7f      	subs	r6, #127	; 0x7f
 8011e64:	0053      	lsls	r3, r2, #1
 8011e66:	07f1      	lsls	r1, r6, #31
 8011e68:	d500      	bpl.n	8011e6c <__ieee754_sqrtf+0x4c>
 8011e6a:	0093      	lsls	r3, r2, #2
 8011e6c:	2280      	movs	r2, #128	; 0x80
 8011e6e:	1070      	asrs	r0, r6, #1
 8011e70:	2119      	movs	r1, #25
 8011e72:	2600      	movs	r6, #0
 8011e74:	2500      	movs	r5, #0
 8011e76:	0452      	lsls	r2, r2, #17
 8011e78:	18ac      	adds	r4, r5, r2
 8011e7a:	429c      	cmp	r4, r3
 8011e7c:	dc02      	bgt.n	8011e84 <__ieee754_sqrtf+0x64>
 8011e7e:	18a5      	adds	r5, r4, r2
 8011e80:	1b1b      	subs	r3, r3, r4
 8011e82:	18b6      	adds	r6, r6, r2
 8011e84:	3901      	subs	r1, #1
 8011e86:	005b      	lsls	r3, r3, #1
 8011e88:	0852      	lsrs	r2, r2, #1
 8011e8a:	2900      	cmp	r1, #0
 8011e8c:	d1f4      	bne.n	8011e78 <__ieee754_sqrtf+0x58>
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d002      	beq.n	8011e98 <__ieee754_sqrtf+0x78>
 8011e92:	2301      	movs	r3, #1
 8011e94:	3601      	adds	r6, #1
 8011e96:	439e      	bics	r6, r3
 8011e98:	23fc      	movs	r3, #252	; 0xfc
 8011e9a:	059b      	lsls	r3, r3, #22
 8011e9c:	469c      	mov	ip, r3
 8011e9e:	1076      	asrs	r6, r6, #1
 8011ea0:	4466      	add	r6, ip
 8011ea2:	05c0      	lsls	r0, r0, #23
 8011ea4:	1980      	adds	r0, r0, r6
 8011ea6:	bd70      	pop	{r4, r5, r6, pc}
 8011ea8:	1c01      	adds	r1, r0, #0
 8011eaa:	f7fa fc85 	bl	800c7b8 <__aeabi_fmul>
 8011eae:	1c21      	adds	r1, r4, #0
 8011eb0:	f7fa f9d6 	bl	800c260 <__aeabi_fadd>
 8011eb4:	e7f7      	b.n	8011ea6 <__ieee754_sqrtf+0x86>
 8011eb6:	1c01      	adds	r1, r0, #0
 8011eb8:	f7fa fdb0 	bl	800ca1c <__aeabi_fsub>
 8011ebc:	1c01      	adds	r1, r0, #0
 8011ebe:	f7fa fb69 	bl	800c594 <__aeabi_fdiv>
 8011ec2:	e7f0      	b.n	8011ea6 <__ieee754_sqrtf+0x86>
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	425b      	negs	r3, r3
 8011ec8:	e7c5      	b.n	8011e56 <__ieee754_sqrtf+0x36>
 8011eca:	46c0      	nop			; (mov r8, r8)
 8011ecc:	7f7fffff 	.word	0x7f7fffff
 8011ed0:	007fffff 	.word	0x007fffff

08011ed4 <__errno>:
 8011ed4:	4b01      	ldr	r3, [pc, #4]	; (8011edc <__errno+0x8>)
 8011ed6:	6818      	ldr	r0, [r3, #0]
 8011ed8:	4770      	bx	lr
 8011eda:	46c0      	nop			; (mov r8, r8)
 8011edc:	20000008 	.word	0x20000008

08011ee0 <__sflush_r>:
 8011ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ee2:	898a      	ldrh	r2, [r1, #12]
 8011ee4:	0005      	movs	r5, r0
 8011ee6:	000c      	movs	r4, r1
 8011ee8:	0713      	lsls	r3, r2, #28
 8011eea:	d460      	bmi.n	8011fae <__sflush_r+0xce>
 8011eec:	684b      	ldr	r3, [r1, #4]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	dc04      	bgt.n	8011efc <__sflush_r+0x1c>
 8011ef2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	dc01      	bgt.n	8011efc <__sflush_r+0x1c>
 8011ef8:	2000      	movs	r0, #0
 8011efa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011efc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8011efe:	2f00      	cmp	r7, #0
 8011f00:	d0fa      	beq.n	8011ef8 <__sflush_r+0x18>
 8011f02:	2300      	movs	r3, #0
 8011f04:	682e      	ldr	r6, [r5, #0]
 8011f06:	602b      	str	r3, [r5, #0]
 8011f08:	2380      	movs	r3, #128	; 0x80
 8011f0a:	015b      	lsls	r3, r3, #5
 8011f0c:	6a21      	ldr	r1, [r4, #32]
 8011f0e:	401a      	ands	r2, r3
 8011f10:	d034      	beq.n	8011f7c <__sflush_r+0x9c>
 8011f12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011f14:	89a3      	ldrh	r3, [r4, #12]
 8011f16:	075b      	lsls	r3, r3, #29
 8011f18:	d506      	bpl.n	8011f28 <__sflush_r+0x48>
 8011f1a:	6863      	ldr	r3, [r4, #4]
 8011f1c:	1ac0      	subs	r0, r0, r3
 8011f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d001      	beq.n	8011f28 <__sflush_r+0x48>
 8011f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f26:	1ac0      	subs	r0, r0, r3
 8011f28:	0002      	movs	r2, r0
 8011f2a:	6a21      	ldr	r1, [r4, #32]
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	0028      	movs	r0, r5
 8011f30:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8011f32:	47b8      	blx	r7
 8011f34:	89a1      	ldrh	r1, [r4, #12]
 8011f36:	1c43      	adds	r3, r0, #1
 8011f38:	d106      	bne.n	8011f48 <__sflush_r+0x68>
 8011f3a:	682b      	ldr	r3, [r5, #0]
 8011f3c:	2b1d      	cmp	r3, #29
 8011f3e:	d830      	bhi.n	8011fa2 <__sflush_r+0xc2>
 8011f40:	4a2b      	ldr	r2, [pc, #172]	; (8011ff0 <__sflush_r+0x110>)
 8011f42:	40da      	lsrs	r2, r3
 8011f44:	07d3      	lsls	r3, r2, #31
 8011f46:	d52c      	bpl.n	8011fa2 <__sflush_r+0xc2>
 8011f48:	2300      	movs	r3, #0
 8011f4a:	6063      	str	r3, [r4, #4]
 8011f4c:	6923      	ldr	r3, [r4, #16]
 8011f4e:	6023      	str	r3, [r4, #0]
 8011f50:	04cb      	lsls	r3, r1, #19
 8011f52:	d505      	bpl.n	8011f60 <__sflush_r+0x80>
 8011f54:	1c43      	adds	r3, r0, #1
 8011f56:	d102      	bne.n	8011f5e <__sflush_r+0x7e>
 8011f58:	682b      	ldr	r3, [r5, #0]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d100      	bne.n	8011f60 <__sflush_r+0x80>
 8011f5e:	6560      	str	r0, [r4, #84]	; 0x54
 8011f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f62:	602e      	str	r6, [r5, #0]
 8011f64:	2900      	cmp	r1, #0
 8011f66:	d0c7      	beq.n	8011ef8 <__sflush_r+0x18>
 8011f68:	0023      	movs	r3, r4
 8011f6a:	3344      	adds	r3, #68	; 0x44
 8011f6c:	4299      	cmp	r1, r3
 8011f6e:	d002      	beq.n	8011f76 <__sflush_r+0x96>
 8011f70:	0028      	movs	r0, r5
 8011f72:	f000 f981 	bl	8012278 <_free_r>
 8011f76:	2000      	movs	r0, #0
 8011f78:	6360      	str	r0, [r4, #52]	; 0x34
 8011f7a:	e7be      	b.n	8011efa <__sflush_r+0x1a>
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	0028      	movs	r0, r5
 8011f80:	47b8      	blx	r7
 8011f82:	1c43      	adds	r3, r0, #1
 8011f84:	d1c6      	bne.n	8011f14 <__sflush_r+0x34>
 8011f86:	682b      	ldr	r3, [r5, #0]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d0c3      	beq.n	8011f14 <__sflush_r+0x34>
 8011f8c:	2b1d      	cmp	r3, #29
 8011f8e:	d001      	beq.n	8011f94 <__sflush_r+0xb4>
 8011f90:	2b16      	cmp	r3, #22
 8011f92:	d101      	bne.n	8011f98 <__sflush_r+0xb8>
 8011f94:	602e      	str	r6, [r5, #0]
 8011f96:	e7af      	b.n	8011ef8 <__sflush_r+0x18>
 8011f98:	2340      	movs	r3, #64	; 0x40
 8011f9a:	89a2      	ldrh	r2, [r4, #12]
 8011f9c:	4313      	orrs	r3, r2
 8011f9e:	81a3      	strh	r3, [r4, #12]
 8011fa0:	e7ab      	b.n	8011efa <__sflush_r+0x1a>
 8011fa2:	2340      	movs	r3, #64	; 0x40
 8011fa4:	430b      	orrs	r3, r1
 8011fa6:	2001      	movs	r0, #1
 8011fa8:	81a3      	strh	r3, [r4, #12]
 8011faa:	4240      	negs	r0, r0
 8011fac:	e7a5      	b.n	8011efa <__sflush_r+0x1a>
 8011fae:	690f      	ldr	r7, [r1, #16]
 8011fb0:	2f00      	cmp	r7, #0
 8011fb2:	d0a1      	beq.n	8011ef8 <__sflush_r+0x18>
 8011fb4:	680b      	ldr	r3, [r1, #0]
 8011fb6:	600f      	str	r7, [r1, #0]
 8011fb8:	1bdb      	subs	r3, r3, r7
 8011fba:	9301      	str	r3, [sp, #4]
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	0792      	lsls	r2, r2, #30
 8011fc0:	d100      	bne.n	8011fc4 <__sflush_r+0xe4>
 8011fc2:	694b      	ldr	r3, [r1, #20]
 8011fc4:	60a3      	str	r3, [r4, #8]
 8011fc6:	9b01      	ldr	r3, [sp, #4]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	dc00      	bgt.n	8011fce <__sflush_r+0xee>
 8011fcc:	e794      	b.n	8011ef8 <__sflush_r+0x18>
 8011fce:	9b01      	ldr	r3, [sp, #4]
 8011fd0:	003a      	movs	r2, r7
 8011fd2:	6a21      	ldr	r1, [r4, #32]
 8011fd4:	0028      	movs	r0, r5
 8011fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011fd8:	47b0      	blx	r6
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	dc03      	bgt.n	8011fe6 <__sflush_r+0x106>
 8011fde:	2340      	movs	r3, #64	; 0x40
 8011fe0:	89a2      	ldrh	r2, [r4, #12]
 8011fe2:	4313      	orrs	r3, r2
 8011fe4:	e7df      	b.n	8011fa6 <__sflush_r+0xc6>
 8011fe6:	9b01      	ldr	r3, [sp, #4]
 8011fe8:	183f      	adds	r7, r7, r0
 8011fea:	1a1b      	subs	r3, r3, r0
 8011fec:	9301      	str	r3, [sp, #4]
 8011fee:	e7ea      	b.n	8011fc6 <__sflush_r+0xe6>
 8011ff0:	20400001 	.word	0x20400001

08011ff4 <_fflush_r>:
 8011ff4:	690b      	ldr	r3, [r1, #16]
 8011ff6:	b570      	push	{r4, r5, r6, lr}
 8011ff8:	0005      	movs	r5, r0
 8011ffa:	000c      	movs	r4, r1
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d101      	bne.n	8012004 <_fflush_r+0x10>
 8012000:	2000      	movs	r0, #0
 8012002:	bd70      	pop	{r4, r5, r6, pc}
 8012004:	2800      	cmp	r0, #0
 8012006:	d004      	beq.n	8012012 <_fflush_r+0x1e>
 8012008:	6983      	ldr	r3, [r0, #24]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d101      	bne.n	8012012 <_fflush_r+0x1e>
 801200e:	f000 f873 	bl	80120f8 <__sinit>
 8012012:	4b0b      	ldr	r3, [pc, #44]	; (8012040 <_fflush_r+0x4c>)
 8012014:	429c      	cmp	r4, r3
 8012016:	d109      	bne.n	801202c <_fflush_r+0x38>
 8012018:	686c      	ldr	r4, [r5, #4]
 801201a:	220c      	movs	r2, #12
 801201c:	5ea3      	ldrsh	r3, [r4, r2]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d0ee      	beq.n	8012000 <_fflush_r+0xc>
 8012022:	0021      	movs	r1, r4
 8012024:	0028      	movs	r0, r5
 8012026:	f7ff ff5b 	bl	8011ee0 <__sflush_r>
 801202a:	e7ea      	b.n	8012002 <_fflush_r+0xe>
 801202c:	4b05      	ldr	r3, [pc, #20]	; (8012044 <_fflush_r+0x50>)
 801202e:	429c      	cmp	r4, r3
 8012030:	d101      	bne.n	8012036 <_fflush_r+0x42>
 8012032:	68ac      	ldr	r4, [r5, #8]
 8012034:	e7f1      	b.n	801201a <_fflush_r+0x26>
 8012036:	4b04      	ldr	r3, [pc, #16]	; (8012048 <_fflush_r+0x54>)
 8012038:	429c      	cmp	r4, r3
 801203a:	d1ee      	bne.n	801201a <_fflush_r+0x26>
 801203c:	68ec      	ldr	r4, [r5, #12]
 801203e:	e7ec      	b.n	801201a <_fflush_r+0x26>
 8012040:	0801d400 	.word	0x0801d400
 8012044:	0801d420 	.word	0x0801d420
 8012048:	0801d3e0 	.word	0x0801d3e0

0801204c <fflush>:
 801204c:	b510      	push	{r4, lr}
 801204e:	1e01      	subs	r1, r0, #0
 8012050:	d105      	bne.n	801205e <fflush+0x12>
 8012052:	4b05      	ldr	r3, [pc, #20]	; (8012068 <fflush+0x1c>)
 8012054:	4905      	ldr	r1, [pc, #20]	; (801206c <fflush+0x20>)
 8012056:	6818      	ldr	r0, [r3, #0]
 8012058:	f000 f8c0 	bl	80121dc <_fwalk_reent>
 801205c:	bd10      	pop	{r4, pc}
 801205e:	4b04      	ldr	r3, [pc, #16]	; (8012070 <fflush+0x24>)
 8012060:	6818      	ldr	r0, [r3, #0]
 8012062:	f7ff ffc7 	bl	8011ff4 <_fflush_r>
 8012066:	e7f9      	b.n	801205c <fflush+0x10>
 8012068:	0801d440 	.word	0x0801d440
 801206c:	08011ff5 	.word	0x08011ff5
 8012070:	20000008 	.word	0x20000008

08012074 <std>:
 8012074:	2300      	movs	r3, #0
 8012076:	b510      	push	{r4, lr}
 8012078:	0004      	movs	r4, r0
 801207a:	6003      	str	r3, [r0, #0]
 801207c:	6043      	str	r3, [r0, #4]
 801207e:	6083      	str	r3, [r0, #8]
 8012080:	8181      	strh	r1, [r0, #12]
 8012082:	6643      	str	r3, [r0, #100]	; 0x64
 8012084:	81c2      	strh	r2, [r0, #14]
 8012086:	6103      	str	r3, [r0, #16]
 8012088:	6143      	str	r3, [r0, #20]
 801208a:	6183      	str	r3, [r0, #24]
 801208c:	0019      	movs	r1, r3
 801208e:	2208      	movs	r2, #8
 8012090:	305c      	adds	r0, #92	; 0x5c
 8012092:	f000 f8e9 	bl	8012268 <memset>
 8012096:	4b05      	ldr	r3, [pc, #20]	; (80120ac <std+0x38>)
 8012098:	6224      	str	r4, [r4, #32]
 801209a:	6263      	str	r3, [r4, #36]	; 0x24
 801209c:	4b04      	ldr	r3, [pc, #16]	; (80120b0 <std+0x3c>)
 801209e:	62a3      	str	r3, [r4, #40]	; 0x28
 80120a0:	4b04      	ldr	r3, [pc, #16]	; (80120b4 <std+0x40>)
 80120a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80120a4:	4b04      	ldr	r3, [pc, #16]	; (80120b8 <std+0x44>)
 80120a6:	6323      	str	r3, [r4, #48]	; 0x30
 80120a8:	bd10      	pop	{r4, pc}
 80120aa:	46c0      	nop			; (mov r8, r8)
 80120ac:	080123ed 	.word	0x080123ed
 80120b0:	08012415 	.word	0x08012415
 80120b4:	0801244d 	.word	0x0801244d
 80120b8:	08012479 	.word	0x08012479

080120bc <_cleanup_r>:
 80120bc:	b510      	push	{r4, lr}
 80120be:	4902      	ldr	r1, [pc, #8]	; (80120c8 <_cleanup_r+0xc>)
 80120c0:	f000 f88c 	bl	80121dc <_fwalk_reent>
 80120c4:	bd10      	pop	{r4, pc}
 80120c6:	46c0      	nop			; (mov r8, r8)
 80120c8:	08011ff5 	.word	0x08011ff5

080120cc <__sfmoreglue>:
 80120cc:	b570      	push	{r4, r5, r6, lr}
 80120ce:	2568      	movs	r5, #104	; 0x68
 80120d0:	1e4a      	subs	r2, r1, #1
 80120d2:	4355      	muls	r5, r2
 80120d4:	000e      	movs	r6, r1
 80120d6:	0029      	movs	r1, r5
 80120d8:	3174      	adds	r1, #116	; 0x74
 80120da:	f000 f917 	bl	801230c <_malloc_r>
 80120de:	1e04      	subs	r4, r0, #0
 80120e0:	d008      	beq.n	80120f4 <__sfmoreglue+0x28>
 80120e2:	2100      	movs	r1, #0
 80120e4:	002a      	movs	r2, r5
 80120e6:	6001      	str	r1, [r0, #0]
 80120e8:	6046      	str	r6, [r0, #4]
 80120ea:	300c      	adds	r0, #12
 80120ec:	60a0      	str	r0, [r4, #8]
 80120ee:	3268      	adds	r2, #104	; 0x68
 80120f0:	f000 f8ba 	bl	8012268 <memset>
 80120f4:	0020      	movs	r0, r4
 80120f6:	bd70      	pop	{r4, r5, r6, pc}

080120f8 <__sinit>:
 80120f8:	6983      	ldr	r3, [r0, #24]
 80120fa:	b513      	push	{r0, r1, r4, lr}
 80120fc:	0004      	movs	r4, r0
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d128      	bne.n	8012154 <__sinit+0x5c>
 8012102:	6483      	str	r3, [r0, #72]	; 0x48
 8012104:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012106:	6503      	str	r3, [r0, #80]	; 0x50
 8012108:	4b13      	ldr	r3, [pc, #76]	; (8012158 <__sinit+0x60>)
 801210a:	4a14      	ldr	r2, [pc, #80]	; (801215c <__sinit+0x64>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	6282      	str	r2, [r0, #40]	; 0x28
 8012110:	9301      	str	r3, [sp, #4]
 8012112:	4298      	cmp	r0, r3
 8012114:	d101      	bne.n	801211a <__sinit+0x22>
 8012116:	2301      	movs	r3, #1
 8012118:	6183      	str	r3, [r0, #24]
 801211a:	0020      	movs	r0, r4
 801211c:	f000 f820 	bl	8012160 <__sfp>
 8012120:	6060      	str	r0, [r4, #4]
 8012122:	0020      	movs	r0, r4
 8012124:	f000 f81c 	bl	8012160 <__sfp>
 8012128:	60a0      	str	r0, [r4, #8]
 801212a:	0020      	movs	r0, r4
 801212c:	f000 f818 	bl	8012160 <__sfp>
 8012130:	2200      	movs	r2, #0
 8012132:	60e0      	str	r0, [r4, #12]
 8012134:	2104      	movs	r1, #4
 8012136:	6860      	ldr	r0, [r4, #4]
 8012138:	f7ff ff9c 	bl	8012074 <std>
 801213c:	2201      	movs	r2, #1
 801213e:	2109      	movs	r1, #9
 8012140:	68a0      	ldr	r0, [r4, #8]
 8012142:	f7ff ff97 	bl	8012074 <std>
 8012146:	2202      	movs	r2, #2
 8012148:	2112      	movs	r1, #18
 801214a:	68e0      	ldr	r0, [r4, #12]
 801214c:	f7ff ff92 	bl	8012074 <std>
 8012150:	2301      	movs	r3, #1
 8012152:	61a3      	str	r3, [r4, #24]
 8012154:	bd13      	pop	{r0, r1, r4, pc}
 8012156:	46c0      	nop			; (mov r8, r8)
 8012158:	0801d440 	.word	0x0801d440
 801215c:	080120bd 	.word	0x080120bd

08012160 <__sfp>:
 8012160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012162:	4b1c      	ldr	r3, [pc, #112]	; (80121d4 <__sfp+0x74>)
 8012164:	0007      	movs	r7, r0
 8012166:	681e      	ldr	r6, [r3, #0]
 8012168:	69b3      	ldr	r3, [r6, #24]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d102      	bne.n	8012174 <__sfp+0x14>
 801216e:	0030      	movs	r0, r6
 8012170:	f7ff ffc2 	bl	80120f8 <__sinit>
 8012174:	3648      	adds	r6, #72	; 0x48
 8012176:	68b4      	ldr	r4, [r6, #8]
 8012178:	6873      	ldr	r3, [r6, #4]
 801217a:	3b01      	subs	r3, #1
 801217c:	d504      	bpl.n	8012188 <__sfp+0x28>
 801217e:	6833      	ldr	r3, [r6, #0]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d007      	beq.n	8012194 <__sfp+0x34>
 8012184:	6836      	ldr	r6, [r6, #0]
 8012186:	e7f6      	b.n	8012176 <__sfp+0x16>
 8012188:	220c      	movs	r2, #12
 801218a:	5ea5      	ldrsh	r5, [r4, r2]
 801218c:	2d00      	cmp	r5, #0
 801218e:	d00d      	beq.n	80121ac <__sfp+0x4c>
 8012190:	3468      	adds	r4, #104	; 0x68
 8012192:	e7f2      	b.n	801217a <__sfp+0x1a>
 8012194:	2104      	movs	r1, #4
 8012196:	0038      	movs	r0, r7
 8012198:	f7ff ff98 	bl	80120cc <__sfmoreglue>
 801219c:	6030      	str	r0, [r6, #0]
 801219e:	2800      	cmp	r0, #0
 80121a0:	d1f0      	bne.n	8012184 <__sfp+0x24>
 80121a2:	230c      	movs	r3, #12
 80121a4:	0004      	movs	r4, r0
 80121a6:	603b      	str	r3, [r7, #0]
 80121a8:	0020      	movs	r0, r4
 80121aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121ac:	0020      	movs	r0, r4
 80121ae:	4b0a      	ldr	r3, [pc, #40]	; (80121d8 <__sfp+0x78>)
 80121b0:	6665      	str	r5, [r4, #100]	; 0x64
 80121b2:	6025      	str	r5, [r4, #0]
 80121b4:	6065      	str	r5, [r4, #4]
 80121b6:	60a5      	str	r5, [r4, #8]
 80121b8:	60e3      	str	r3, [r4, #12]
 80121ba:	6125      	str	r5, [r4, #16]
 80121bc:	6165      	str	r5, [r4, #20]
 80121be:	61a5      	str	r5, [r4, #24]
 80121c0:	2208      	movs	r2, #8
 80121c2:	0029      	movs	r1, r5
 80121c4:	305c      	adds	r0, #92	; 0x5c
 80121c6:	f000 f84f 	bl	8012268 <memset>
 80121ca:	6365      	str	r5, [r4, #52]	; 0x34
 80121cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80121ce:	64a5      	str	r5, [r4, #72]	; 0x48
 80121d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80121d2:	e7e9      	b.n	80121a8 <__sfp+0x48>
 80121d4:	0801d440 	.word	0x0801d440
 80121d8:	ffff0001 	.word	0xffff0001

080121dc <_fwalk_reent>:
 80121dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121de:	0004      	movs	r4, r0
 80121e0:	0007      	movs	r7, r0
 80121e2:	2600      	movs	r6, #0
 80121e4:	9101      	str	r1, [sp, #4]
 80121e6:	3448      	adds	r4, #72	; 0x48
 80121e8:	2c00      	cmp	r4, #0
 80121ea:	d101      	bne.n	80121f0 <_fwalk_reent+0x14>
 80121ec:	0030      	movs	r0, r6
 80121ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80121f0:	6863      	ldr	r3, [r4, #4]
 80121f2:	68a5      	ldr	r5, [r4, #8]
 80121f4:	9300      	str	r3, [sp, #0]
 80121f6:	9b00      	ldr	r3, [sp, #0]
 80121f8:	3b01      	subs	r3, #1
 80121fa:	9300      	str	r3, [sp, #0]
 80121fc:	d501      	bpl.n	8012202 <_fwalk_reent+0x26>
 80121fe:	6824      	ldr	r4, [r4, #0]
 8012200:	e7f2      	b.n	80121e8 <_fwalk_reent+0xc>
 8012202:	89ab      	ldrh	r3, [r5, #12]
 8012204:	2b01      	cmp	r3, #1
 8012206:	d908      	bls.n	801221a <_fwalk_reent+0x3e>
 8012208:	220e      	movs	r2, #14
 801220a:	5eab      	ldrsh	r3, [r5, r2]
 801220c:	3301      	adds	r3, #1
 801220e:	d004      	beq.n	801221a <_fwalk_reent+0x3e>
 8012210:	0029      	movs	r1, r5
 8012212:	0038      	movs	r0, r7
 8012214:	9b01      	ldr	r3, [sp, #4]
 8012216:	4798      	blx	r3
 8012218:	4306      	orrs	r6, r0
 801221a:	3568      	adds	r5, #104	; 0x68
 801221c:	e7eb      	b.n	80121f6 <_fwalk_reent+0x1a>
	...

08012220 <__libc_init_array>:
 8012220:	b570      	push	{r4, r5, r6, lr}
 8012222:	2600      	movs	r6, #0
 8012224:	4d0c      	ldr	r5, [pc, #48]	; (8012258 <__libc_init_array+0x38>)
 8012226:	4c0d      	ldr	r4, [pc, #52]	; (801225c <__libc_init_array+0x3c>)
 8012228:	1b64      	subs	r4, r4, r5
 801222a:	10a4      	asrs	r4, r4, #2
 801222c:	42a6      	cmp	r6, r4
 801222e:	d109      	bne.n	8012244 <__libc_init_array+0x24>
 8012230:	2600      	movs	r6, #0
 8012232:	f002 fc59 	bl	8014ae8 <_init>
 8012236:	4d0a      	ldr	r5, [pc, #40]	; (8012260 <__libc_init_array+0x40>)
 8012238:	4c0a      	ldr	r4, [pc, #40]	; (8012264 <__libc_init_array+0x44>)
 801223a:	1b64      	subs	r4, r4, r5
 801223c:	10a4      	asrs	r4, r4, #2
 801223e:	42a6      	cmp	r6, r4
 8012240:	d105      	bne.n	801224e <__libc_init_array+0x2e>
 8012242:	bd70      	pop	{r4, r5, r6, pc}
 8012244:	00b3      	lsls	r3, r6, #2
 8012246:	58eb      	ldr	r3, [r5, r3]
 8012248:	4798      	blx	r3
 801224a:	3601      	adds	r6, #1
 801224c:	e7ee      	b.n	801222c <__libc_init_array+0xc>
 801224e:	00b3      	lsls	r3, r6, #2
 8012250:	58eb      	ldr	r3, [r5, r3]
 8012252:	4798      	blx	r3
 8012254:	3601      	adds	r6, #1
 8012256:	e7f2      	b.n	801223e <__libc_init_array+0x1e>
 8012258:	0801d658 	.word	0x0801d658
 801225c:	0801d658 	.word	0x0801d658
 8012260:	0801d658 	.word	0x0801d658
 8012264:	0801d65c 	.word	0x0801d65c

08012268 <memset>:
 8012268:	0003      	movs	r3, r0
 801226a:	1812      	adds	r2, r2, r0
 801226c:	4293      	cmp	r3, r2
 801226e:	d100      	bne.n	8012272 <memset+0xa>
 8012270:	4770      	bx	lr
 8012272:	7019      	strb	r1, [r3, #0]
 8012274:	3301      	adds	r3, #1
 8012276:	e7f9      	b.n	801226c <memset+0x4>

08012278 <_free_r>:
 8012278:	b570      	push	{r4, r5, r6, lr}
 801227a:	0005      	movs	r5, r0
 801227c:	2900      	cmp	r1, #0
 801227e:	d010      	beq.n	80122a2 <_free_r+0x2a>
 8012280:	1f0c      	subs	r4, r1, #4
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	da00      	bge.n	801228a <_free_r+0x12>
 8012288:	18e4      	adds	r4, r4, r3
 801228a:	0028      	movs	r0, r5
 801228c:	f000 f934 	bl	80124f8 <__malloc_lock>
 8012290:	4a1d      	ldr	r2, [pc, #116]	; (8012308 <_free_r+0x90>)
 8012292:	6813      	ldr	r3, [r2, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d105      	bne.n	80122a4 <_free_r+0x2c>
 8012298:	6063      	str	r3, [r4, #4]
 801229a:	6014      	str	r4, [r2, #0]
 801229c:	0028      	movs	r0, r5
 801229e:	f000 f92c 	bl	80124fa <__malloc_unlock>
 80122a2:	bd70      	pop	{r4, r5, r6, pc}
 80122a4:	42a3      	cmp	r3, r4
 80122a6:	d909      	bls.n	80122bc <_free_r+0x44>
 80122a8:	6821      	ldr	r1, [r4, #0]
 80122aa:	1860      	adds	r0, r4, r1
 80122ac:	4283      	cmp	r3, r0
 80122ae:	d1f3      	bne.n	8012298 <_free_r+0x20>
 80122b0:	6818      	ldr	r0, [r3, #0]
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	1841      	adds	r1, r0, r1
 80122b6:	6021      	str	r1, [r4, #0]
 80122b8:	e7ee      	b.n	8012298 <_free_r+0x20>
 80122ba:	0013      	movs	r3, r2
 80122bc:	685a      	ldr	r2, [r3, #4]
 80122be:	2a00      	cmp	r2, #0
 80122c0:	d001      	beq.n	80122c6 <_free_r+0x4e>
 80122c2:	42a2      	cmp	r2, r4
 80122c4:	d9f9      	bls.n	80122ba <_free_r+0x42>
 80122c6:	6819      	ldr	r1, [r3, #0]
 80122c8:	1858      	adds	r0, r3, r1
 80122ca:	42a0      	cmp	r0, r4
 80122cc:	d10b      	bne.n	80122e6 <_free_r+0x6e>
 80122ce:	6820      	ldr	r0, [r4, #0]
 80122d0:	1809      	adds	r1, r1, r0
 80122d2:	1858      	adds	r0, r3, r1
 80122d4:	6019      	str	r1, [r3, #0]
 80122d6:	4282      	cmp	r2, r0
 80122d8:	d1e0      	bne.n	801229c <_free_r+0x24>
 80122da:	6810      	ldr	r0, [r2, #0]
 80122dc:	6852      	ldr	r2, [r2, #4]
 80122de:	1841      	adds	r1, r0, r1
 80122e0:	6019      	str	r1, [r3, #0]
 80122e2:	605a      	str	r2, [r3, #4]
 80122e4:	e7da      	b.n	801229c <_free_r+0x24>
 80122e6:	42a0      	cmp	r0, r4
 80122e8:	d902      	bls.n	80122f0 <_free_r+0x78>
 80122ea:	230c      	movs	r3, #12
 80122ec:	602b      	str	r3, [r5, #0]
 80122ee:	e7d5      	b.n	801229c <_free_r+0x24>
 80122f0:	6821      	ldr	r1, [r4, #0]
 80122f2:	1860      	adds	r0, r4, r1
 80122f4:	4282      	cmp	r2, r0
 80122f6:	d103      	bne.n	8012300 <_free_r+0x88>
 80122f8:	6810      	ldr	r0, [r2, #0]
 80122fa:	6852      	ldr	r2, [r2, #4]
 80122fc:	1841      	adds	r1, r0, r1
 80122fe:	6021      	str	r1, [r4, #0]
 8012300:	6062      	str	r2, [r4, #4]
 8012302:	605c      	str	r4, [r3, #4]
 8012304:	e7ca      	b.n	801229c <_free_r+0x24>
 8012306:	46c0      	nop			; (mov r8, r8)
 8012308:	20000630 	.word	0x20000630

0801230c <_malloc_r>:
 801230c:	2303      	movs	r3, #3
 801230e:	b570      	push	{r4, r5, r6, lr}
 8012310:	1ccd      	adds	r5, r1, #3
 8012312:	439d      	bics	r5, r3
 8012314:	3508      	adds	r5, #8
 8012316:	0006      	movs	r6, r0
 8012318:	2d0c      	cmp	r5, #12
 801231a:	d21e      	bcs.n	801235a <_malloc_r+0x4e>
 801231c:	250c      	movs	r5, #12
 801231e:	42a9      	cmp	r1, r5
 8012320:	d81d      	bhi.n	801235e <_malloc_r+0x52>
 8012322:	0030      	movs	r0, r6
 8012324:	f000 f8e8 	bl	80124f8 <__malloc_lock>
 8012328:	4a25      	ldr	r2, [pc, #148]	; (80123c0 <_malloc_r+0xb4>)
 801232a:	6814      	ldr	r4, [r2, #0]
 801232c:	0021      	movs	r1, r4
 801232e:	2900      	cmp	r1, #0
 8012330:	d119      	bne.n	8012366 <_malloc_r+0x5a>
 8012332:	4c24      	ldr	r4, [pc, #144]	; (80123c4 <_malloc_r+0xb8>)
 8012334:	6823      	ldr	r3, [r4, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d103      	bne.n	8012342 <_malloc_r+0x36>
 801233a:	0030      	movs	r0, r6
 801233c:	f000 f844 	bl	80123c8 <_sbrk_r>
 8012340:	6020      	str	r0, [r4, #0]
 8012342:	0029      	movs	r1, r5
 8012344:	0030      	movs	r0, r6
 8012346:	f000 f83f 	bl	80123c8 <_sbrk_r>
 801234a:	1c43      	adds	r3, r0, #1
 801234c:	d12b      	bne.n	80123a6 <_malloc_r+0x9a>
 801234e:	230c      	movs	r3, #12
 8012350:	0030      	movs	r0, r6
 8012352:	6033      	str	r3, [r6, #0]
 8012354:	f000 f8d1 	bl	80124fa <__malloc_unlock>
 8012358:	e003      	b.n	8012362 <_malloc_r+0x56>
 801235a:	2d00      	cmp	r5, #0
 801235c:	dadf      	bge.n	801231e <_malloc_r+0x12>
 801235e:	230c      	movs	r3, #12
 8012360:	6033      	str	r3, [r6, #0]
 8012362:	2000      	movs	r0, #0
 8012364:	bd70      	pop	{r4, r5, r6, pc}
 8012366:	680b      	ldr	r3, [r1, #0]
 8012368:	1b5b      	subs	r3, r3, r5
 801236a:	d419      	bmi.n	80123a0 <_malloc_r+0x94>
 801236c:	2b0b      	cmp	r3, #11
 801236e:	d903      	bls.n	8012378 <_malloc_r+0x6c>
 8012370:	600b      	str	r3, [r1, #0]
 8012372:	18cc      	adds	r4, r1, r3
 8012374:	6025      	str	r5, [r4, #0]
 8012376:	e003      	b.n	8012380 <_malloc_r+0x74>
 8012378:	684b      	ldr	r3, [r1, #4]
 801237a:	428c      	cmp	r4, r1
 801237c:	d10d      	bne.n	801239a <_malloc_r+0x8e>
 801237e:	6013      	str	r3, [r2, #0]
 8012380:	0030      	movs	r0, r6
 8012382:	f000 f8ba 	bl	80124fa <__malloc_unlock>
 8012386:	0020      	movs	r0, r4
 8012388:	2207      	movs	r2, #7
 801238a:	300b      	adds	r0, #11
 801238c:	1d23      	adds	r3, r4, #4
 801238e:	4390      	bics	r0, r2
 8012390:	1ac3      	subs	r3, r0, r3
 8012392:	d0e7      	beq.n	8012364 <_malloc_r+0x58>
 8012394:	425a      	negs	r2, r3
 8012396:	50e2      	str	r2, [r4, r3]
 8012398:	e7e4      	b.n	8012364 <_malloc_r+0x58>
 801239a:	6063      	str	r3, [r4, #4]
 801239c:	000c      	movs	r4, r1
 801239e:	e7ef      	b.n	8012380 <_malloc_r+0x74>
 80123a0:	000c      	movs	r4, r1
 80123a2:	6849      	ldr	r1, [r1, #4]
 80123a4:	e7c3      	b.n	801232e <_malloc_r+0x22>
 80123a6:	2303      	movs	r3, #3
 80123a8:	1cc4      	adds	r4, r0, #3
 80123aa:	439c      	bics	r4, r3
 80123ac:	42a0      	cmp	r0, r4
 80123ae:	d0e1      	beq.n	8012374 <_malloc_r+0x68>
 80123b0:	1a21      	subs	r1, r4, r0
 80123b2:	0030      	movs	r0, r6
 80123b4:	f000 f808 	bl	80123c8 <_sbrk_r>
 80123b8:	1c43      	adds	r3, r0, #1
 80123ba:	d1db      	bne.n	8012374 <_malloc_r+0x68>
 80123bc:	e7c7      	b.n	801234e <_malloc_r+0x42>
 80123be:	46c0      	nop			; (mov r8, r8)
 80123c0:	20000630 	.word	0x20000630
 80123c4:	20000634 	.word	0x20000634

080123c8 <_sbrk_r>:
 80123c8:	2300      	movs	r3, #0
 80123ca:	b570      	push	{r4, r5, r6, lr}
 80123cc:	4c06      	ldr	r4, [pc, #24]	; (80123e8 <_sbrk_r+0x20>)
 80123ce:	0005      	movs	r5, r0
 80123d0:	0008      	movs	r0, r1
 80123d2:	6023      	str	r3, [r4, #0]
 80123d4:	f7ff fd04 	bl	8011de0 <_sbrk>
 80123d8:	1c43      	adds	r3, r0, #1
 80123da:	d103      	bne.n	80123e4 <_sbrk_r+0x1c>
 80123dc:	6823      	ldr	r3, [r4, #0]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d000      	beq.n	80123e4 <_sbrk_r+0x1c>
 80123e2:	602b      	str	r3, [r5, #0]
 80123e4:	bd70      	pop	{r4, r5, r6, pc}
 80123e6:	46c0      	nop			; (mov r8, r8)
 80123e8:	200006c4 	.word	0x200006c4

080123ec <__sread>:
 80123ec:	b570      	push	{r4, r5, r6, lr}
 80123ee:	000c      	movs	r4, r1
 80123f0:	250e      	movs	r5, #14
 80123f2:	5f49      	ldrsh	r1, [r1, r5]
 80123f4:	f000 f882 	bl	80124fc <_read_r>
 80123f8:	2800      	cmp	r0, #0
 80123fa:	db03      	blt.n	8012404 <__sread+0x18>
 80123fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80123fe:	181b      	adds	r3, r3, r0
 8012400:	6563      	str	r3, [r4, #84]	; 0x54
 8012402:	bd70      	pop	{r4, r5, r6, pc}
 8012404:	89a3      	ldrh	r3, [r4, #12]
 8012406:	4a02      	ldr	r2, [pc, #8]	; (8012410 <__sread+0x24>)
 8012408:	4013      	ands	r3, r2
 801240a:	81a3      	strh	r3, [r4, #12]
 801240c:	e7f9      	b.n	8012402 <__sread+0x16>
 801240e:	46c0      	nop			; (mov r8, r8)
 8012410:	ffffefff 	.word	0xffffefff

08012414 <__swrite>:
 8012414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012416:	001f      	movs	r7, r3
 8012418:	898b      	ldrh	r3, [r1, #12]
 801241a:	0005      	movs	r5, r0
 801241c:	000c      	movs	r4, r1
 801241e:	0016      	movs	r6, r2
 8012420:	05db      	lsls	r3, r3, #23
 8012422:	d505      	bpl.n	8012430 <__swrite+0x1c>
 8012424:	230e      	movs	r3, #14
 8012426:	5ec9      	ldrsh	r1, [r1, r3]
 8012428:	2200      	movs	r2, #0
 801242a:	2302      	movs	r3, #2
 801242c:	f000 f850 	bl	80124d0 <_lseek_r>
 8012430:	89a3      	ldrh	r3, [r4, #12]
 8012432:	4a05      	ldr	r2, [pc, #20]	; (8012448 <__swrite+0x34>)
 8012434:	0028      	movs	r0, r5
 8012436:	4013      	ands	r3, r2
 8012438:	81a3      	strh	r3, [r4, #12]
 801243a:	0032      	movs	r2, r6
 801243c:	230e      	movs	r3, #14
 801243e:	5ee1      	ldrsh	r1, [r4, r3]
 8012440:	003b      	movs	r3, r7
 8012442:	f000 f81f 	bl	8012484 <_write_r>
 8012446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012448:	ffffefff 	.word	0xffffefff

0801244c <__sseek>:
 801244c:	b570      	push	{r4, r5, r6, lr}
 801244e:	000c      	movs	r4, r1
 8012450:	250e      	movs	r5, #14
 8012452:	5f49      	ldrsh	r1, [r1, r5]
 8012454:	f000 f83c 	bl	80124d0 <_lseek_r>
 8012458:	89a3      	ldrh	r3, [r4, #12]
 801245a:	1c42      	adds	r2, r0, #1
 801245c:	d103      	bne.n	8012466 <__sseek+0x1a>
 801245e:	4a05      	ldr	r2, [pc, #20]	; (8012474 <__sseek+0x28>)
 8012460:	4013      	ands	r3, r2
 8012462:	81a3      	strh	r3, [r4, #12]
 8012464:	bd70      	pop	{r4, r5, r6, pc}
 8012466:	2280      	movs	r2, #128	; 0x80
 8012468:	0152      	lsls	r2, r2, #5
 801246a:	4313      	orrs	r3, r2
 801246c:	81a3      	strh	r3, [r4, #12]
 801246e:	6560      	str	r0, [r4, #84]	; 0x54
 8012470:	e7f8      	b.n	8012464 <__sseek+0x18>
 8012472:	46c0      	nop			; (mov r8, r8)
 8012474:	ffffefff 	.word	0xffffefff

08012478 <__sclose>:
 8012478:	b510      	push	{r4, lr}
 801247a:	230e      	movs	r3, #14
 801247c:	5ec9      	ldrsh	r1, [r1, r3]
 801247e:	f000 f815 	bl	80124ac <_close_r>
 8012482:	bd10      	pop	{r4, pc}

08012484 <_write_r>:
 8012484:	b570      	push	{r4, r5, r6, lr}
 8012486:	0005      	movs	r5, r0
 8012488:	0008      	movs	r0, r1
 801248a:	0011      	movs	r1, r2
 801248c:	2200      	movs	r2, #0
 801248e:	4c06      	ldr	r4, [pc, #24]	; (80124a8 <_write_r+0x24>)
 8012490:	6022      	str	r2, [r4, #0]
 8012492:	001a      	movs	r2, r3
 8012494:	f7ff fc6c 	bl	8011d70 <_write>
 8012498:	1c43      	adds	r3, r0, #1
 801249a:	d103      	bne.n	80124a4 <_write_r+0x20>
 801249c:	6823      	ldr	r3, [r4, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d000      	beq.n	80124a4 <_write_r+0x20>
 80124a2:	602b      	str	r3, [r5, #0]
 80124a4:	bd70      	pop	{r4, r5, r6, pc}
 80124a6:	46c0      	nop			; (mov r8, r8)
 80124a8:	200006c4 	.word	0x200006c4

080124ac <_close_r>:
 80124ac:	2300      	movs	r3, #0
 80124ae:	b570      	push	{r4, r5, r6, lr}
 80124b0:	4c06      	ldr	r4, [pc, #24]	; (80124cc <_close_r+0x20>)
 80124b2:	0005      	movs	r5, r0
 80124b4:	0008      	movs	r0, r1
 80124b6:	6023      	str	r3, [r4, #0]
 80124b8:	f000 f834 	bl	8012524 <_close>
 80124bc:	1c43      	adds	r3, r0, #1
 80124be:	d103      	bne.n	80124c8 <_close_r+0x1c>
 80124c0:	6823      	ldr	r3, [r4, #0]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d000      	beq.n	80124c8 <_close_r+0x1c>
 80124c6:	602b      	str	r3, [r5, #0]
 80124c8:	bd70      	pop	{r4, r5, r6, pc}
 80124ca:	46c0      	nop			; (mov r8, r8)
 80124cc:	200006c4 	.word	0x200006c4

080124d0 <_lseek_r>:
 80124d0:	b570      	push	{r4, r5, r6, lr}
 80124d2:	0005      	movs	r5, r0
 80124d4:	0008      	movs	r0, r1
 80124d6:	0011      	movs	r1, r2
 80124d8:	2200      	movs	r2, #0
 80124da:	4c06      	ldr	r4, [pc, #24]	; (80124f4 <_lseek_r+0x24>)
 80124dc:	6022      	str	r2, [r4, #0]
 80124de:	001a      	movs	r2, r3
 80124e0:	f000 f828 	bl	8012534 <_lseek>
 80124e4:	1c43      	adds	r3, r0, #1
 80124e6:	d103      	bne.n	80124f0 <_lseek_r+0x20>
 80124e8:	6823      	ldr	r3, [r4, #0]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d000      	beq.n	80124f0 <_lseek_r+0x20>
 80124ee:	602b      	str	r3, [r5, #0]
 80124f0:	bd70      	pop	{r4, r5, r6, pc}
 80124f2:	46c0      	nop			; (mov r8, r8)
 80124f4:	200006c4 	.word	0x200006c4

080124f8 <__malloc_lock>:
 80124f8:	4770      	bx	lr

080124fa <__malloc_unlock>:
 80124fa:	4770      	bx	lr

080124fc <_read_r>:
 80124fc:	b570      	push	{r4, r5, r6, lr}
 80124fe:	0005      	movs	r5, r0
 8012500:	0008      	movs	r0, r1
 8012502:	0011      	movs	r1, r2
 8012504:	2200      	movs	r2, #0
 8012506:	4c06      	ldr	r4, [pc, #24]	; (8012520 <_read_r+0x24>)
 8012508:	6022      	str	r2, [r4, #0]
 801250a:	001a      	movs	r2, r3
 801250c:	f000 f81a 	bl	8012544 <_read>
 8012510:	1c43      	adds	r3, r0, #1
 8012512:	d103      	bne.n	801251c <_read_r+0x20>
 8012514:	6823      	ldr	r3, [r4, #0]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d000      	beq.n	801251c <_read_r+0x20>
 801251a:	602b      	str	r3, [r5, #0]
 801251c:	bd70      	pop	{r4, r5, r6, pc}
 801251e:	46c0      	nop			; (mov r8, r8)
 8012520:	200006c4 	.word	0x200006c4

08012524 <_close>:
 8012524:	2258      	movs	r2, #88	; 0x58
 8012526:	2001      	movs	r0, #1
 8012528:	4b01      	ldr	r3, [pc, #4]	; (8012530 <_close+0xc>)
 801252a:	4240      	negs	r0, r0
 801252c:	601a      	str	r2, [r3, #0]
 801252e:	4770      	bx	lr
 8012530:	200006c4 	.word	0x200006c4

08012534 <_lseek>:
 8012534:	2258      	movs	r2, #88	; 0x58
 8012536:	2001      	movs	r0, #1
 8012538:	4b01      	ldr	r3, [pc, #4]	; (8012540 <_lseek+0xc>)
 801253a:	4240      	negs	r0, r0
 801253c:	601a      	str	r2, [r3, #0]
 801253e:	4770      	bx	lr
 8012540:	200006c4 	.word	0x200006c4

08012544 <_read>:
 8012544:	2258      	movs	r2, #88	; 0x58
 8012546:	2001      	movs	r0, #1
 8012548:	4b01      	ldr	r3, [pc, #4]	; (8012550 <_read+0xc>)
 801254a:	4240      	negs	r0, r0
 801254c:	601a      	str	r2, [r3, #0]
 801254e:	4770      	bx	lr
 8012550:	200006c4 	.word	0x200006c4

08012554 <cos>:
 8012554:	b530      	push	{r4, r5, lr}
 8012556:	4a20      	ldr	r2, [pc, #128]	; (80125d8 <cos+0x84>)
 8012558:	004b      	lsls	r3, r1, #1
 801255a:	b087      	sub	sp, #28
 801255c:	085b      	lsrs	r3, r3, #1
 801255e:	4293      	cmp	r3, r2
 8012560:	dd1c      	ble.n	801259c <cos+0x48>
 8012562:	4a1e      	ldr	r2, [pc, #120]	; (80125dc <cos+0x88>)
 8012564:	4293      	cmp	r3, r2
 8012566:	dd05      	ble.n	8012574 <cos+0x20>
 8012568:	0002      	movs	r2, r0
 801256a:	000b      	movs	r3, r1
 801256c:	f7fc fa5c 	bl	800ea28 <__aeabi_dsub>
 8012570:	b007      	add	sp, #28
 8012572:	bd30      	pop	{r4, r5, pc}
 8012574:	aa02      	add	r2, sp, #8
 8012576:	f000 f9db 	bl	8012930 <__ieee754_rem_pio2>
 801257a:	2303      	movs	r3, #3
 801257c:	4018      	ands	r0, r3
 801257e:	9a04      	ldr	r2, [sp, #16]
 8012580:	9b05      	ldr	r3, [sp, #20]
 8012582:	2801      	cmp	r0, #1
 8012584:	d00f      	beq.n	80125a6 <cos+0x52>
 8012586:	2802      	cmp	r0, #2
 8012588:	d01c      	beq.n	80125c4 <cos+0x70>
 801258a:	2800      	cmp	r0, #0
 801258c:	d015      	beq.n	80125ba <cos+0x66>
 801258e:	9802      	ldr	r0, [sp, #8]
 8012590:	9903      	ldr	r1, [sp, #12]
 8012592:	2401      	movs	r4, #1
 8012594:	9400      	str	r4, [sp, #0]
 8012596:	f001 fb7f 	bl	8013c98 <__kernel_sin>
 801259a:	e7e9      	b.n	8012570 <cos+0x1c>
 801259c:	2200      	movs	r2, #0
 801259e:	2300      	movs	r3, #0
 80125a0:	f000 fe00 	bl	80131a4 <__kernel_cos>
 80125a4:	e7e4      	b.n	8012570 <cos+0x1c>
 80125a6:	9000      	str	r0, [sp, #0]
 80125a8:	9802      	ldr	r0, [sp, #8]
 80125aa:	9903      	ldr	r1, [sp, #12]
 80125ac:	f001 fb74 	bl	8013c98 <__kernel_sin>
 80125b0:	2380      	movs	r3, #128	; 0x80
 80125b2:	061b      	lsls	r3, r3, #24
 80125b4:	469c      	mov	ip, r3
 80125b6:	4461      	add	r1, ip
 80125b8:	e7da      	b.n	8012570 <cos+0x1c>
 80125ba:	9802      	ldr	r0, [sp, #8]
 80125bc:	9903      	ldr	r1, [sp, #12]
 80125be:	f000 fdf1 	bl	80131a4 <__kernel_cos>
 80125c2:	e7d5      	b.n	8012570 <cos+0x1c>
 80125c4:	9802      	ldr	r0, [sp, #8]
 80125c6:	9903      	ldr	r1, [sp, #12]
 80125c8:	f000 fdec 	bl	80131a4 <__kernel_cos>
 80125cc:	2380      	movs	r3, #128	; 0x80
 80125ce:	061b      	lsls	r3, r3, #24
 80125d0:	469c      	mov	ip, r3
 80125d2:	4461      	add	r1, ip
 80125d4:	e7cc      	b.n	8012570 <cos+0x1c>
 80125d6:	46c0      	nop			; (mov r8, r8)
 80125d8:	3fe921fb 	.word	0x3fe921fb
 80125dc:	7fefffff 	.word	0x7fefffff

080125e0 <fmaxf>:
 80125e0:	b570      	push	{r4, r5, r6, lr}
 80125e2:	1c04      	adds	r4, r0, #0
 80125e4:	1c0d      	adds	r5, r1, #0
 80125e6:	f000 f811 	bl	801260c <__fpclassifyf>
 80125ea:	2800      	cmp	r0, #0
 80125ec:	d102      	bne.n	80125f4 <fmaxf+0x14>
 80125ee:	1c2c      	adds	r4, r5, #0
 80125f0:	1c20      	adds	r0, r4, #0
 80125f2:	bd70      	pop	{r4, r5, r6, pc}
 80125f4:	1c28      	adds	r0, r5, #0
 80125f6:	f000 f809 	bl	801260c <__fpclassifyf>
 80125fa:	2800      	cmp	r0, #0
 80125fc:	d0f8      	beq.n	80125f0 <fmaxf+0x10>
 80125fe:	1c29      	adds	r1, r5, #0
 8012600:	1c20      	adds	r0, r4, #0
 8012602:	f7fa fde5 	bl	800d1d0 <__aeabi_fcmpgt>
 8012606:	2800      	cmp	r0, #0
 8012608:	d0f1      	beq.n	80125ee <fmaxf+0xe>
 801260a:	e7f1      	b.n	80125f0 <fmaxf+0x10>

0801260c <__fpclassifyf>:
 801260c:	0040      	lsls	r0, r0, #1
 801260e:	0840      	lsrs	r0, r0, #1
 8012610:	d00e      	beq.n	8012630 <__fpclassifyf+0x24>
 8012612:	4b0a      	ldr	r3, [pc, #40]	; (801263c <__fpclassifyf+0x30>)
 8012614:	4a0a      	ldr	r2, [pc, #40]	; (8012640 <__fpclassifyf+0x34>)
 8012616:	18c3      	adds	r3, r0, r3
 8012618:	4293      	cmp	r3, r2
 801261a:	d90b      	bls.n	8012634 <__fpclassifyf+0x28>
 801261c:	4a09      	ldr	r2, [pc, #36]	; (8012644 <__fpclassifyf+0x38>)
 801261e:	1e43      	subs	r3, r0, #1
 8012620:	4293      	cmp	r3, r2
 8012622:	d909      	bls.n	8012638 <__fpclassifyf+0x2c>
 8012624:	4b08      	ldr	r3, [pc, #32]	; (8012648 <__fpclassifyf+0x3c>)
 8012626:	469c      	mov	ip, r3
 8012628:	4460      	add	r0, ip
 801262a:	4243      	negs	r3, r0
 801262c:	4158      	adcs	r0, r3
 801262e:	4770      	bx	lr
 8012630:	2002      	movs	r0, #2
 8012632:	e7fc      	b.n	801262e <__fpclassifyf+0x22>
 8012634:	2004      	movs	r0, #4
 8012636:	e7fa      	b.n	801262e <__fpclassifyf+0x22>
 8012638:	2003      	movs	r0, #3
 801263a:	e7f8      	b.n	801262e <__fpclassifyf+0x22>
 801263c:	ff800000 	.word	0xff800000
 8012640:	7effffff 	.word	0x7effffff
 8012644:	007ffffe 	.word	0x007ffffe
 8012648:	80800000 	.word	0x80800000

0801264c <roundf>:
 801264c:	0043      	lsls	r3, r0, #1
 801264e:	0e1b      	lsrs	r3, r3, #24
 8012650:	3b7f      	subs	r3, #127	; 0x7f
 8012652:	b510      	push	{r4, lr}
 8012654:	1c01      	adds	r1, r0, #0
 8012656:	2b16      	cmp	r3, #22
 8012658:	dc0b      	bgt.n	8012672 <roundf+0x26>
 801265a:	2b00      	cmp	r3, #0
 801265c:	db0e      	blt.n	801267c <roundf+0x30>
 801265e:	4c0b      	ldr	r4, [pc, #44]	; (801268c <roundf+0x40>)
 8012660:	411c      	asrs	r4, r3
 8012662:	4204      	tst	r4, r0
 8012664:	d004      	beq.n	8012670 <roundf+0x24>
 8012666:	2280      	movs	r2, #128	; 0x80
 8012668:	03d2      	lsls	r2, r2, #15
 801266a:	411a      	asrs	r2, r3
 801266c:	1810      	adds	r0, r2, r0
 801266e:	43a0      	bics	r0, r4
 8012670:	bd10      	pop	{r4, pc}
 8012672:	2b80      	cmp	r3, #128	; 0x80
 8012674:	d1fc      	bne.n	8012670 <roundf+0x24>
 8012676:	f7f9 fdf3 	bl	800c260 <__aeabi_fadd>
 801267a:	e7f9      	b.n	8012670 <roundf+0x24>
 801267c:	0fc0      	lsrs	r0, r0, #31
 801267e:	07c0      	lsls	r0, r0, #31
 8012680:	3301      	adds	r3, #1
 8012682:	d1f5      	bne.n	8012670 <roundf+0x24>
 8012684:	23fe      	movs	r3, #254	; 0xfe
 8012686:	059b      	lsls	r3, r3, #22
 8012688:	4318      	orrs	r0, r3
 801268a:	e7f1      	b.n	8012670 <roundf+0x24>
 801268c:	007fffff 	.word	0x007fffff

08012690 <sqrt>:
 8012690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012692:	4647      	mov	r7, r8
 8012694:	46ce      	mov	lr, r9
 8012696:	b580      	push	{r7, lr}
 8012698:	b08d      	sub	sp, #52	; 0x34
 801269a:	0004      	movs	r4, r0
 801269c:	000d      	movs	r5, r1
 801269e:	f000 fb57 	bl	8012d50 <__ieee754_sqrt>
 80126a2:	4b29      	ldr	r3, [pc, #164]	; (8012748 <sqrt+0xb8>)
 80126a4:	0006      	movs	r6, r0
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	000f      	movs	r7, r1
 80126aa:	b25b      	sxtb	r3, r3
 80126ac:	4698      	mov	r8, r3
 80126ae:	3301      	adds	r3, #1
 80126b0:	d010      	beq.n	80126d4 <sqrt+0x44>
 80126b2:	0022      	movs	r2, r4
 80126b4:	002b      	movs	r3, r5
 80126b6:	0020      	movs	r0, r4
 80126b8:	0029      	movs	r1, r5
 80126ba:	f7fc fcfd 	bl	800f0b8 <__aeabi_dcmpun>
 80126be:	4681      	mov	r9, r0
 80126c0:	2800      	cmp	r0, #0
 80126c2:	d107      	bne.n	80126d4 <sqrt+0x44>
 80126c4:	2200      	movs	r2, #0
 80126c6:	2300      	movs	r3, #0
 80126c8:	0020      	movs	r0, r4
 80126ca:	0029      	movs	r1, r5
 80126cc:	f7fa fd32 	bl	800d134 <__aeabi_dcmplt>
 80126d0:	2800      	cmp	r0, #0
 80126d2:	d106      	bne.n	80126e2 <sqrt+0x52>
 80126d4:	0030      	movs	r0, r6
 80126d6:	0039      	movs	r1, r7
 80126d8:	b00d      	add	sp, #52	; 0x34
 80126da:	bc0c      	pop	{r2, r3}
 80126dc:	4690      	mov	r8, r2
 80126de:	4699      	mov	r9, r3
 80126e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126e2:	2301      	movs	r3, #1
 80126e4:	9302      	str	r3, [sp, #8]
 80126e6:	4b19      	ldr	r3, [pc, #100]	; (801274c <sqrt+0xbc>)
 80126e8:	9406      	str	r4, [sp, #24]
 80126ea:	9507      	str	r5, [sp, #28]
 80126ec:	9303      	str	r3, [sp, #12]
 80126ee:	464b      	mov	r3, r9
 80126f0:	930a      	str	r3, [sp, #40]	; 0x28
 80126f2:	4643      	mov	r3, r8
 80126f4:	9404      	str	r4, [sp, #16]
 80126f6:	9505      	str	r5, [sp, #20]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d015      	beq.n	8012728 <sqrt+0x98>
 80126fc:	2300      	movs	r3, #0
 80126fe:	2200      	movs	r2, #0
 8012700:	0019      	movs	r1, r3
 8012702:	0010      	movs	r0, r2
 8012704:	f7fb fb14 	bl	800dd30 <__aeabi_ddiv>
 8012708:	4643      	mov	r3, r8
 801270a:	9008      	str	r0, [sp, #32]
 801270c:	9109      	str	r1, [sp, #36]	; 0x24
 801270e:	2b02      	cmp	r3, #2
 8012710:	d10e      	bne.n	8012730 <sqrt+0xa0>
 8012712:	f7ff fbdf 	bl	8011ed4 <__errno>
 8012716:	2321      	movs	r3, #33	; 0x21
 8012718:	6003      	str	r3, [r0, #0]
 801271a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801271c:	9301      	str	r3, [sp, #4]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d10c      	bne.n	801273c <sqrt+0xac>
 8012722:	9e08      	ldr	r6, [sp, #32]
 8012724:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012726:	e7d5      	b.n	80126d4 <sqrt+0x44>
 8012728:	2300      	movs	r3, #0
 801272a:	2400      	movs	r4, #0
 801272c:	9308      	str	r3, [sp, #32]
 801272e:	9409      	str	r4, [sp, #36]	; 0x24
 8012730:	a802      	add	r0, sp, #8
 8012732:	f001 fc03 	bl	8013f3c <matherr>
 8012736:	2800      	cmp	r0, #0
 8012738:	d1ef      	bne.n	801271a <sqrt+0x8a>
 801273a:	e7ea      	b.n	8012712 <sqrt+0x82>
 801273c:	f7ff fbca 	bl	8011ed4 <__errno>
 8012740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012742:	9301      	str	r3, [sp, #4]
 8012744:	6003      	str	r3, [r0, #0]
 8012746:	e7ec      	b.n	8012722 <sqrt+0x92>
 8012748:	2000006c 	.word	0x2000006c
 801274c:	0801d444 	.word	0x0801d444

08012750 <expf>:
 8012750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012752:	b08b      	sub	sp, #44	; 0x2c
 8012754:	1c04      	adds	r4, r0, #0
 8012756:	f000 fbd3 	bl	8012f00 <__ieee754_expf>
 801275a:	2300      	movs	r3, #0
 801275c:	4e30      	ldr	r6, [pc, #192]	; (8012820 <expf+0xd0>)
 801275e:	1c05      	adds	r5, r0, #0
 8012760:	56f3      	ldrsb	r3, [r6, r3]
 8012762:	3301      	adds	r3, #1
 8012764:	d036      	beq.n	80127d4 <expf+0x84>
 8012766:	1c20      	adds	r0, r4, #0
 8012768:	f001 fc58 	bl	801401c <finitef>
 801276c:	2800      	cmp	r0, #0
 801276e:	d031      	beq.n	80127d4 <expf+0x84>
 8012770:	492c      	ldr	r1, [pc, #176]	; (8012824 <expf+0xd4>)
 8012772:	1c20      	adds	r0, r4, #0
 8012774:	f7fa fd2c 	bl	800d1d0 <__aeabi_fcmpgt>
 8012778:	1e07      	subs	r7, r0, #0
 801277a:	d12e      	bne.n	80127da <expf+0x8a>
 801277c:	492a      	ldr	r1, [pc, #168]	; (8012828 <expf+0xd8>)
 801277e:	1c20      	adds	r0, r4, #0
 8012780:	f7fa fd12 	bl	800d1a8 <__aeabi_fcmplt>
 8012784:	2800      	cmp	r0, #0
 8012786:	d025      	beq.n	80127d4 <expf+0x84>
 8012788:	2304      	movs	r3, #4
 801278a:	466d      	mov	r5, sp
 801278c:	9300      	str	r3, [sp, #0]
 801278e:	4b27      	ldr	r3, [pc, #156]	; (801282c <expf+0xdc>)
 8012790:	622f      	str	r7, [r5, #32]
 8012792:	606b      	str	r3, [r5, #4]
 8012794:	1c20      	adds	r0, r4, #0
 8012796:	f7fc fd4d 	bl	800f234 <__aeabi_f2d>
 801279a:	2300      	movs	r3, #0
 801279c:	2200      	movs	r2, #0
 801279e:	61aa      	str	r2, [r5, #24]
 80127a0:	61eb      	str	r3, [r5, #28]
 80127a2:	2300      	movs	r3, #0
 80127a4:	56f3      	ldrsb	r3, [r6, r3]
 80127a6:	6128      	str	r0, [r5, #16]
 80127a8:	6169      	str	r1, [r5, #20]
 80127aa:	60a8      	str	r0, [r5, #8]
 80127ac:	60e9      	str	r1, [r5, #12]
 80127ae:	2b02      	cmp	r3, #2
 80127b0:	d031      	beq.n	8012816 <expf+0xc6>
 80127b2:	0028      	movs	r0, r5
 80127b4:	f001 fbc2 	bl	8013f3c <matherr>
 80127b8:	2800      	cmp	r0, #0
 80127ba:	d02c      	beq.n	8012816 <expf+0xc6>
 80127bc:	6a2b      	ldr	r3, [r5, #32]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d003      	beq.n	80127ca <expf+0x7a>
 80127c2:	f7ff fb87 	bl	8011ed4 <__errno>
 80127c6:	6a2b      	ldr	r3, [r5, #32]
 80127c8:	6003      	str	r3, [r0, #0]
 80127ca:	69a8      	ldr	r0, [r5, #24]
 80127cc:	69e9      	ldr	r1, [r5, #28]
 80127ce:	f7fc fd83 	bl	800f2d8 <__aeabi_d2f>
 80127d2:	1c05      	adds	r5, r0, #0
 80127d4:	1c28      	adds	r0, r5, #0
 80127d6:	b00b      	add	sp, #44	; 0x2c
 80127d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127da:	2303      	movs	r3, #3
 80127dc:	466d      	mov	r5, sp
 80127de:	9300      	str	r3, [sp, #0]
 80127e0:	4b12      	ldr	r3, [pc, #72]	; (801282c <expf+0xdc>)
 80127e2:	1c20      	adds	r0, r4, #0
 80127e4:	606b      	str	r3, [r5, #4]
 80127e6:	2300      	movs	r3, #0
 80127e8:	622b      	str	r3, [r5, #32]
 80127ea:	f7fc fd23 	bl	800f234 <__aeabi_f2d>
 80127ee:	2300      	movs	r3, #0
 80127f0:	56f3      	ldrsb	r3, [r6, r3]
 80127f2:	6128      	str	r0, [r5, #16]
 80127f4:	6169      	str	r1, [r5, #20]
 80127f6:	60a8      	str	r0, [r5, #8]
 80127f8:	60e9      	str	r1, [r5, #12]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d105      	bne.n	801280a <expf+0xba>
 80127fe:	22e0      	movs	r2, #224	; 0xe0
 8012800:	4b0b      	ldr	r3, [pc, #44]	; (8012830 <expf+0xe0>)
 8012802:	0612      	lsls	r2, r2, #24
 8012804:	61aa      	str	r2, [r5, #24]
 8012806:	61eb      	str	r3, [r5, #28]
 8012808:	e7d3      	b.n	80127b2 <expf+0x62>
 801280a:	2000      	movs	r0, #0
 801280c:	4909      	ldr	r1, [pc, #36]	; (8012834 <expf+0xe4>)
 801280e:	61a8      	str	r0, [r5, #24]
 8012810:	61e9      	str	r1, [r5, #28]
 8012812:	2b02      	cmp	r3, #2
 8012814:	d1cd      	bne.n	80127b2 <expf+0x62>
 8012816:	f7ff fb5d 	bl	8011ed4 <__errno>
 801281a:	2322      	movs	r3, #34	; 0x22
 801281c:	6003      	str	r3, [r0, #0]
 801281e:	e7cd      	b.n	80127bc <expf+0x6c>
 8012820:	2000006c 	.word	0x2000006c
 8012824:	42b17180 	.word	0x42b17180
 8012828:	c2cff1b5 	.word	0xc2cff1b5
 801282c:	0801d44c 	.word	0x0801d44c
 8012830:	47efffff 	.word	0x47efffff
 8012834:	7ff00000 	.word	0x7ff00000

08012838 <log10f>:
 8012838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801283a:	2500      	movs	r5, #0
 801283c:	b08d      	sub	sp, #52	; 0x34
 801283e:	1c04      	adds	r4, r0, #0
 8012840:	f000 fc58 	bl	80130f4 <__ieee754_log10f>
 8012844:	4b35      	ldr	r3, [pc, #212]	; (801291c <log10f+0xe4>)
 8012846:	1c06      	adds	r6, r0, #0
 8012848:	575d      	ldrsb	r5, [r3, r5]
 801284a:	1c6b      	adds	r3, r5, #1
 801284c:	d00b      	beq.n	8012866 <log10f+0x2e>
 801284e:	1c21      	adds	r1, r4, #0
 8012850:	1c20      	adds	r0, r4, #0
 8012852:	f7fa fe91 	bl	800d578 <__aeabi_fcmpun>
 8012856:	1e07      	subs	r7, r0, #0
 8012858:	d105      	bne.n	8012866 <log10f+0x2e>
 801285a:	2100      	movs	r1, #0
 801285c:	1c20      	adds	r0, r4, #0
 801285e:	f7fa fcad 	bl	800d1bc <__aeabi_fcmple>
 8012862:	2800      	cmp	r0, #0
 8012864:	d102      	bne.n	801286c <log10f+0x34>
 8012866:	1c30      	adds	r0, r6, #0
 8012868:	b00d      	add	sp, #52	; 0x34
 801286a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801286c:	4b2c      	ldr	r3, [pc, #176]	; (8012920 <log10f+0xe8>)
 801286e:	1c20      	adds	r0, r4, #0
 8012870:	9303      	str	r3, [sp, #12]
 8012872:	970a      	str	r7, [sp, #40]	; 0x28
 8012874:	f7fc fcde 	bl	800f234 <__aeabi_f2d>
 8012878:	9006      	str	r0, [sp, #24]
 801287a:	9107      	str	r1, [sp, #28]
 801287c:	9004      	str	r0, [sp, #16]
 801287e:	9105      	str	r1, [sp, #20]
 8012880:	2d00      	cmp	r5, #0
 8012882:	d11b      	bne.n	80128bc <log10f+0x84>
 8012884:	22e0      	movs	r2, #224	; 0xe0
 8012886:	4b27      	ldr	r3, [pc, #156]	; (8012924 <log10f+0xec>)
 8012888:	0612      	lsls	r2, r2, #24
 801288a:	2100      	movs	r1, #0
 801288c:	1c20      	adds	r0, r4, #0
 801288e:	9208      	str	r2, [sp, #32]
 8012890:	9309      	str	r3, [sp, #36]	; 0x24
 8012892:	f7fa fc83 	bl	800d19c <__aeabi_fcmpeq>
 8012896:	2800      	cmp	r0, #0
 8012898:	d037      	beq.n	801290a <log10f+0xd2>
 801289a:	2302      	movs	r3, #2
 801289c:	9302      	str	r3, [sp, #8]
 801289e:	a802      	add	r0, sp, #8
 80128a0:	f001 fb4c 	bl	8013f3c <matherr>
 80128a4:	2800      	cmp	r0, #0
 80128a6:	d017      	beq.n	80128d8 <log10f+0xa0>
 80128a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128aa:	9301      	str	r3, [sp, #4]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d118      	bne.n	80128e2 <log10f+0xaa>
 80128b0:	9808      	ldr	r0, [sp, #32]
 80128b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80128b4:	f7fc fd10 	bl	800f2d8 <__aeabi_d2f>
 80128b8:	1c06      	adds	r6, r0, #0
 80128ba:	e7d4      	b.n	8012866 <log10f+0x2e>
 80128bc:	2200      	movs	r2, #0
 80128be:	4b1a      	ldr	r3, [pc, #104]	; (8012928 <log10f+0xf0>)
 80128c0:	2100      	movs	r1, #0
 80128c2:	1c20      	adds	r0, r4, #0
 80128c4:	9208      	str	r2, [sp, #32]
 80128c6:	9309      	str	r3, [sp, #36]	; 0x24
 80128c8:	f7fa fc68 	bl	800d19c <__aeabi_fcmpeq>
 80128cc:	2800      	cmp	r0, #0
 80128ce:	d00e      	beq.n	80128ee <log10f+0xb6>
 80128d0:	2302      	movs	r3, #2
 80128d2:	9302      	str	r3, [sp, #8]
 80128d4:	2d02      	cmp	r5, #2
 80128d6:	d1e2      	bne.n	801289e <log10f+0x66>
 80128d8:	f7ff fafc 	bl	8011ed4 <__errno>
 80128dc:	2322      	movs	r3, #34	; 0x22
 80128de:	6003      	str	r3, [r0, #0]
 80128e0:	e7e2      	b.n	80128a8 <log10f+0x70>
 80128e2:	f7ff faf7 	bl	8011ed4 <__errno>
 80128e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128e8:	9301      	str	r3, [sp, #4]
 80128ea:	6003      	str	r3, [r0, #0]
 80128ec:	e7e0      	b.n	80128b0 <log10f+0x78>
 80128ee:	2301      	movs	r3, #1
 80128f0:	9302      	str	r3, [sp, #8]
 80128f2:	2d02      	cmp	r5, #2
 80128f4:	d10b      	bne.n	801290e <log10f+0xd6>
 80128f6:	f7ff faed 	bl	8011ed4 <__errno>
 80128fa:	2321      	movs	r3, #33	; 0x21
 80128fc:	6003      	str	r3, [r0, #0]
 80128fe:	480b      	ldr	r0, [pc, #44]	; (801292c <log10f+0xf4>)
 8012900:	f001 fb1e 	bl	8013f40 <nan>
 8012904:	9008      	str	r0, [sp, #32]
 8012906:	9109      	str	r1, [sp, #36]	; 0x24
 8012908:	e7ce      	b.n	80128a8 <log10f+0x70>
 801290a:	2301      	movs	r3, #1
 801290c:	9302      	str	r3, [sp, #8]
 801290e:	a802      	add	r0, sp, #8
 8012910:	f001 fb14 	bl	8013f3c <matherr>
 8012914:	2800      	cmp	r0, #0
 8012916:	d1f2      	bne.n	80128fe <log10f+0xc6>
 8012918:	e7ed      	b.n	80128f6 <log10f+0xbe>
 801291a:	46c0      	nop			; (mov r8, r8)
 801291c:	2000006c 	.word	0x2000006c
 8012920:	0801d454 	.word	0x0801d454
 8012924:	c7efffff 	.word	0xc7efffff
 8012928:	fff00000 	.word	0xfff00000
 801292c:	0801d450 	.word	0x0801d450

08012930 <__ieee754_rem_pio2>:
 8012930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012932:	464e      	mov	r6, r9
 8012934:	4645      	mov	r5, r8
 8012936:	46de      	mov	lr, fp
 8012938:	4657      	mov	r7, sl
 801293a:	b5e0      	push	{r5, r6, r7, lr}
 801293c:	4be1      	ldr	r3, [pc, #900]	; (8012cc4 <__ieee754_rem_pio2+0x394>)
 801293e:	004c      	lsls	r4, r1, #1
 8012940:	b08f      	sub	sp, #60	; 0x3c
 8012942:	4690      	mov	r8, r2
 8012944:	4689      	mov	r9, r1
 8012946:	0864      	lsrs	r4, r4, #1
 8012948:	429c      	cmp	r4, r3
 801294a:	dc00      	bgt.n	801294e <__ieee754_rem_pio2+0x1e>
 801294c:	e087      	b.n	8012a5e <__ieee754_rem_pio2+0x12e>
 801294e:	4bde      	ldr	r3, [pc, #888]	; (8012cc8 <__ieee754_rem_pio2+0x398>)
 8012950:	429c      	cmp	r4, r3
 8012952:	dc22      	bgt.n	801299a <__ieee754_rem_pio2+0x6a>
 8012954:	4add      	ldr	r2, [pc, #884]	; (8012ccc <__ieee754_rem_pio2+0x39c>)
 8012956:	2900      	cmp	r1, #0
 8012958:	dc00      	bgt.n	801295c <__ieee754_rem_pio2+0x2c>
 801295a:	e092      	b.n	8012a82 <__ieee754_rem_pio2+0x152>
 801295c:	4bdc      	ldr	r3, [pc, #880]	; (8012cd0 <__ieee754_rem_pio2+0x3a0>)
 801295e:	f7fc f863 	bl	800ea28 <__aeabi_dsub>
 8012962:	4bdb      	ldr	r3, [pc, #876]	; (8012cd0 <__ieee754_rem_pio2+0x3a0>)
 8012964:	0006      	movs	r6, r0
 8012966:	000f      	movs	r7, r1
 8012968:	429c      	cmp	r4, r3
 801296a:	d100      	bne.n	801296e <__ieee754_rem_pio2+0x3e>
 801296c:	e17e      	b.n	8012c6c <__ieee754_rem_pio2+0x33c>
 801296e:	4ad9      	ldr	r2, [pc, #868]	; (8012cd4 <__ieee754_rem_pio2+0x3a4>)
 8012970:	4bd9      	ldr	r3, [pc, #868]	; (8012cd8 <__ieee754_rem_pio2+0x3a8>)
 8012972:	f7fc f859 	bl	800ea28 <__aeabi_dsub>
 8012976:	0002      	movs	r2, r0
 8012978:	000b      	movs	r3, r1
 801297a:	4641      	mov	r1, r8
 801297c:	0030      	movs	r0, r6
 801297e:	600a      	str	r2, [r1, #0]
 8012980:	604b      	str	r3, [r1, #4]
 8012982:	0039      	movs	r1, r7
 8012984:	f7fc f850 	bl	800ea28 <__aeabi_dsub>
 8012988:	4bd3      	ldr	r3, [pc, #844]	; (8012cd8 <__ieee754_rem_pio2+0x3a8>)
 801298a:	4ad2      	ldr	r2, [pc, #840]	; (8012cd4 <__ieee754_rem_pio2+0x3a4>)
 801298c:	f7fc f84c 	bl	800ea28 <__aeabi_dsub>
 8012990:	4643      	mov	r3, r8
 8012992:	2501      	movs	r5, #1
 8012994:	6098      	str	r0, [r3, #8]
 8012996:	60d9      	str	r1, [r3, #12]
 8012998:	e06b      	b.n	8012a72 <__ieee754_rem_pio2+0x142>
 801299a:	4bd0      	ldr	r3, [pc, #832]	; (8012cdc <__ieee754_rem_pio2+0x3ac>)
 801299c:	429c      	cmp	r4, r3
 801299e:	dc00      	bgt.n	80129a2 <__ieee754_rem_pio2+0x72>
 80129a0:	e08f      	b.n	8012ac2 <__ieee754_rem_pio2+0x192>
 80129a2:	4bcf      	ldr	r3, [pc, #828]	; (8012ce0 <__ieee754_rem_pio2+0x3b0>)
 80129a4:	429c      	cmp	r4, r3
 80129a6:	dd00      	ble.n	80129aa <__ieee754_rem_pio2+0x7a>
 80129a8:	e155      	b.n	8012c56 <__ieee754_rem_pio2+0x326>
 80129aa:	4ace      	ldr	r2, [pc, #824]	; (8012ce4 <__ieee754_rem_pio2+0x3b4>)
 80129ac:	1523      	asrs	r3, r4, #20
 80129ae:	4692      	mov	sl, r2
 80129b0:	449a      	add	sl, r3
 80129b2:	4651      	mov	r1, sl
 80129b4:	0509      	lsls	r1, r1, #20
 80129b6:	1a63      	subs	r3, r4, r1
 80129b8:	0019      	movs	r1, r3
 80129ba:	001d      	movs	r5, r3
 80129bc:	0004      	movs	r4, r0
 80129be:	f7fc fb97 	bl	800f0f0 <__aeabi_d2iz>
 80129c2:	f7fc fbcb 	bl	800f15c <__aeabi_i2d>
 80129c6:	0002      	movs	r2, r0
 80129c8:	000b      	movs	r3, r1
 80129ca:	0020      	movs	r0, r4
 80129cc:	0029      	movs	r1, r5
 80129ce:	9208      	str	r2, [sp, #32]
 80129d0:	9309      	str	r3, [sp, #36]	; 0x24
 80129d2:	f7fc f829 	bl	800ea28 <__aeabi_dsub>
 80129d6:	2200      	movs	r2, #0
 80129d8:	4bc3      	ldr	r3, [pc, #780]	; (8012ce8 <__ieee754_rem_pio2+0x3b8>)
 80129da:	f7fb fdb3 	bl	800e544 <__aeabi_dmul>
 80129de:	000f      	movs	r7, r1
 80129e0:	0006      	movs	r6, r0
 80129e2:	f7fc fb85 	bl	800f0f0 <__aeabi_d2iz>
 80129e6:	f7fc fbb9 	bl	800f15c <__aeabi_i2d>
 80129ea:	0004      	movs	r4, r0
 80129ec:	000d      	movs	r5, r1
 80129ee:	0002      	movs	r2, r0
 80129f0:	000b      	movs	r3, r1
 80129f2:	0030      	movs	r0, r6
 80129f4:	0039      	movs	r1, r7
 80129f6:	940a      	str	r4, [sp, #40]	; 0x28
 80129f8:	950b      	str	r5, [sp, #44]	; 0x2c
 80129fa:	f7fc f815 	bl	800ea28 <__aeabi_dsub>
 80129fe:	2200      	movs	r2, #0
 8012a00:	4bb9      	ldr	r3, [pc, #740]	; (8012ce8 <__ieee754_rem_pio2+0x3b8>)
 8012a02:	f7fb fd9f 	bl	800e544 <__aeabi_dmul>
 8012a06:	2200      	movs	r2, #0
 8012a08:	2300      	movs	r3, #0
 8012a0a:	900c      	str	r0, [sp, #48]	; 0x30
 8012a0c:	910d      	str	r1, [sp, #52]	; 0x34
 8012a0e:	f7fa fb8b 	bl	800d128 <__aeabi_dcmpeq>
 8012a12:	2800      	cmp	r0, #0
 8012a14:	d100      	bne.n	8012a18 <__ieee754_rem_pio2+0xe8>
 8012a16:	e192      	b.n	8012d3e <__ieee754_rem_pio2+0x40e>
 8012a18:	2300      	movs	r3, #0
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	0020      	movs	r0, r4
 8012a1e:	0029      	movs	r1, r5
 8012a20:	f7fa fb82 	bl	800d128 <__aeabi_dcmpeq>
 8012a24:	4243      	negs	r3, r0
 8012a26:	4143      	adcs	r3, r0
 8012a28:	3301      	adds	r3, #1
 8012a2a:	4ab0      	ldr	r2, [pc, #704]	; (8012cec <__ieee754_rem_pio2+0x3bc>)
 8012a2c:	4641      	mov	r1, r8
 8012a2e:	9201      	str	r2, [sp, #4]
 8012a30:	2202      	movs	r2, #2
 8012a32:	a808      	add	r0, sp, #32
 8012a34:	9200      	str	r2, [sp, #0]
 8012a36:	4652      	mov	r2, sl
 8012a38:	f000 fcce 	bl	80133d8 <__kernel_rem_pio2>
 8012a3c:	464b      	mov	r3, r9
 8012a3e:	0005      	movs	r5, r0
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	da16      	bge.n	8012a72 <__ieee754_rem_pio2+0x142>
 8012a44:	2280      	movs	r2, #128	; 0x80
 8012a46:	4643      	mov	r3, r8
 8012a48:	0612      	lsls	r2, r2, #24
 8012a4a:	4694      	mov	ip, r2
 8012a4c:	4642      	mov	r2, r8
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	4245      	negs	r5, r0
 8012a52:	4463      	add	r3, ip
 8012a54:	6053      	str	r3, [r2, #4]
 8012a56:	68d3      	ldr	r3, [r2, #12]
 8012a58:	4463      	add	r3, ip
 8012a5a:	60d3      	str	r3, [r2, #12]
 8012a5c:	e009      	b.n	8012a72 <__ieee754_rem_pio2+0x142>
 8012a5e:	000b      	movs	r3, r1
 8012a60:	0002      	movs	r2, r0
 8012a62:	4641      	mov	r1, r8
 8012a64:	600a      	str	r2, [r1, #0]
 8012a66:	604b      	str	r3, [r1, #4]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	2500      	movs	r5, #0
 8012a6e:	608a      	str	r2, [r1, #8]
 8012a70:	60cb      	str	r3, [r1, #12]
 8012a72:	0028      	movs	r0, r5
 8012a74:	b00f      	add	sp, #60	; 0x3c
 8012a76:	bc3c      	pop	{r2, r3, r4, r5}
 8012a78:	4690      	mov	r8, r2
 8012a7a:	4699      	mov	r9, r3
 8012a7c:	46a2      	mov	sl, r4
 8012a7e:	46ab      	mov	fp, r5
 8012a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a82:	4b93      	ldr	r3, [pc, #588]	; (8012cd0 <__ieee754_rem_pio2+0x3a0>)
 8012a84:	f7fa fe38 	bl	800d6f8 <__aeabi_dadd>
 8012a88:	4b91      	ldr	r3, [pc, #580]	; (8012cd0 <__ieee754_rem_pio2+0x3a0>)
 8012a8a:	0006      	movs	r6, r0
 8012a8c:	000f      	movs	r7, r1
 8012a8e:	429c      	cmp	r4, r3
 8012a90:	d100      	bne.n	8012a94 <__ieee754_rem_pio2+0x164>
 8012a92:	e13d      	b.n	8012d10 <__ieee754_rem_pio2+0x3e0>
 8012a94:	4a8f      	ldr	r2, [pc, #572]	; (8012cd4 <__ieee754_rem_pio2+0x3a4>)
 8012a96:	4b90      	ldr	r3, [pc, #576]	; (8012cd8 <__ieee754_rem_pio2+0x3a8>)
 8012a98:	f7fa fe2e 	bl	800d6f8 <__aeabi_dadd>
 8012a9c:	0002      	movs	r2, r0
 8012a9e:	000b      	movs	r3, r1
 8012aa0:	4641      	mov	r1, r8
 8012aa2:	0030      	movs	r0, r6
 8012aa4:	600a      	str	r2, [r1, #0]
 8012aa6:	604b      	str	r3, [r1, #4]
 8012aa8:	0039      	movs	r1, r7
 8012aaa:	f7fb ffbd 	bl	800ea28 <__aeabi_dsub>
 8012aae:	4a89      	ldr	r2, [pc, #548]	; (8012cd4 <__ieee754_rem_pio2+0x3a4>)
 8012ab0:	4b89      	ldr	r3, [pc, #548]	; (8012cd8 <__ieee754_rem_pio2+0x3a8>)
 8012ab2:	f7fa fe21 	bl	800d6f8 <__aeabi_dadd>
 8012ab6:	2501      	movs	r5, #1
 8012ab8:	4643      	mov	r3, r8
 8012aba:	426d      	negs	r5, r5
 8012abc:	6098      	str	r0, [r3, #8]
 8012abe:	60d9      	str	r1, [r3, #12]
 8012ac0:	e7d7      	b.n	8012a72 <__ieee754_rem_pio2+0x142>
 8012ac2:	f001 f99b 	bl	8013dfc <fabs>
 8012ac6:	4a8a      	ldr	r2, [pc, #552]	; (8012cf0 <__ieee754_rem_pio2+0x3c0>)
 8012ac8:	4b8a      	ldr	r3, [pc, #552]	; (8012cf4 <__ieee754_rem_pio2+0x3c4>)
 8012aca:	0006      	movs	r6, r0
 8012acc:	000f      	movs	r7, r1
 8012ace:	f7fb fd39 	bl	800e544 <__aeabi_dmul>
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	4b88      	ldr	r3, [pc, #544]	; (8012cf8 <__ieee754_rem_pio2+0x3c8>)
 8012ad6:	f7fa fe0f 	bl	800d6f8 <__aeabi_dadd>
 8012ada:	f7fc fb09 	bl	800f0f0 <__aeabi_d2iz>
 8012ade:	0005      	movs	r5, r0
 8012ae0:	f7fc fb3c 	bl	800f15c <__aeabi_i2d>
 8012ae4:	4a79      	ldr	r2, [pc, #484]	; (8012ccc <__ieee754_rem_pio2+0x39c>)
 8012ae6:	4b7a      	ldr	r3, [pc, #488]	; (8012cd0 <__ieee754_rem_pio2+0x3a0>)
 8012ae8:	9004      	str	r0, [sp, #16]
 8012aea:	9105      	str	r1, [sp, #20]
 8012aec:	f7fb fd2a 	bl	800e544 <__aeabi_dmul>
 8012af0:	0002      	movs	r2, r0
 8012af2:	000b      	movs	r3, r1
 8012af4:	0030      	movs	r0, r6
 8012af6:	0039      	movs	r1, r7
 8012af8:	f7fb ff96 	bl	800ea28 <__aeabi_dsub>
 8012afc:	4a75      	ldr	r2, [pc, #468]	; (8012cd4 <__ieee754_rem_pio2+0x3a4>)
 8012afe:	0006      	movs	r6, r0
 8012b00:	000f      	movs	r7, r1
 8012b02:	9804      	ldr	r0, [sp, #16]
 8012b04:	9905      	ldr	r1, [sp, #20]
 8012b06:	4b74      	ldr	r3, [pc, #464]	; (8012cd8 <__ieee754_rem_pio2+0x3a8>)
 8012b08:	f7fb fd1c 	bl	800e544 <__aeabi_dmul>
 8012b0c:	9002      	str	r0, [sp, #8]
 8012b0e:	9103      	str	r1, [sp, #12]
 8012b10:	2d1f      	cmp	r5, #31
 8012b12:	dc00      	bgt.n	8012b16 <__ieee754_rem_pio2+0x1e6>
 8012b14:	e0c7      	b.n	8012ca6 <__ieee754_rem_pio2+0x376>
 8012b16:	9a02      	ldr	r2, [sp, #8]
 8012b18:	9b03      	ldr	r3, [sp, #12]
 8012b1a:	0030      	movs	r0, r6
 8012b1c:	0039      	movs	r1, r7
 8012b1e:	f7fb ff83 	bl	800ea28 <__aeabi_dsub>
 8012b22:	4683      	mov	fp, r0
 8012b24:	468a      	mov	sl, r1
 8012b26:	4653      	mov	r3, sl
 8012b28:	005b      	lsls	r3, r3, #1
 8012b2a:	1524      	asrs	r4, r4, #20
 8012b2c:	0d5b      	lsrs	r3, r3, #21
 8012b2e:	1ae3      	subs	r3, r4, r3
 8012b30:	2b10      	cmp	r3, #16
 8012b32:	dd6c      	ble.n	8012c0e <__ieee754_rem_pio2+0x2de>
 8012b34:	9804      	ldr	r0, [sp, #16]
 8012b36:	9905      	ldr	r1, [sp, #20]
 8012b38:	22d3      	movs	r2, #211	; 0xd3
 8012b3a:	4b67      	ldr	r3, [pc, #412]	; (8012cd8 <__ieee754_rem_pio2+0x3a8>)
 8012b3c:	0552      	lsls	r2, r2, #21
 8012b3e:	f7fb fd01 	bl	800e544 <__aeabi_dmul>
 8012b42:	0002      	movs	r2, r0
 8012b44:	000b      	movs	r3, r1
 8012b46:	0030      	movs	r0, r6
 8012b48:	0039      	movs	r1, r7
 8012b4a:	9202      	str	r2, [sp, #8]
 8012b4c:	9303      	str	r3, [sp, #12]
 8012b4e:	f7fb ff6b 	bl	800ea28 <__aeabi_dsub>
 8012b52:	000a      	movs	r2, r1
 8012b54:	0001      	movs	r1, r0
 8012b56:	0013      	movs	r3, r2
 8012b58:	9106      	str	r1, [sp, #24]
 8012b5a:	9207      	str	r2, [sp, #28]
 8012b5c:	0002      	movs	r2, r0
 8012b5e:	0039      	movs	r1, r7
 8012b60:	0030      	movs	r0, r6
 8012b62:	f7fb ff61 	bl	800ea28 <__aeabi_dsub>
 8012b66:	9a02      	ldr	r2, [sp, #8]
 8012b68:	9b03      	ldr	r3, [sp, #12]
 8012b6a:	f7fb ff5d 	bl	800ea28 <__aeabi_dsub>
 8012b6e:	0006      	movs	r6, r0
 8012b70:	000f      	movs	r7, r1
 8012b72:	9804      	ldr	r0, [sp, #16]
 8012b74:	9905      	ldr	r1, [sp, #20]
 8012b76:	4a61      	ldr	r2, [pc, #388]	; (8012cfc <__ieee754_rem_pio2+0x3cc>)
 8012b78:	4b61      	ldr	r3, [pc, #388]	; (8012d00 <__ieee754_rem_pio2+0x3d0>)
 8012b7a:	f7fb fce3 	bl	800e544 <__aeabi_dmul>
 8012b7e:	0032      	movs	r2, r6
 8012b80:	003b      	movs	r3, r7
 8012b82:	f7fb ff51 	bl	800ea28 <__aeabi_dsub>
 8012b86:	9e06      	ldr	r6, [sp, #24]
 8012b88:	9f07      	ldr	r7, [sp, #28]
 8012b8a:	000b      	movs	r3, r1
 8012b8c:	0002      	movs	r2, r0
 8012b8e:	0039      	movs	r1, r7
 8012b90:	0030      	movs	r0, r6
 8012b92:	9202      	str	r2, [sp, #8]
 8012b94:	9303      	str	r3, [sp, #12]
 8012b96:	f7fb ff47 	bl	800ea28 <__aeabi_dsub>
 8012b9a:	004b      	lsls	r3, r1, #1
 8012b9c:	0d5b      	lsrs	r3, r3, #21
 8012b9e:	4683      	mov	fp, r0
 8012ba0:	468a      	mov	sl, r1
 8012ba2:	1ae4      	subs	r4, r4, r3
 8012ba4:	2c31      	cmp	r4, #49	; 0x31
 8012ba6:	dd32      	ble.n	8012c0e <__ieee754_rem_pio2+0x2de>
 8012ba8:	9804      	ldr	r0, [sp, #16]
 8012baa:	9905      	ldr	r1, [sp, #20]
 8012bac:	22b8      	movs	r2, #184	; 0xb8
 8012bae:	4b54      	ldr	r3, [pc, #336]	; (8012d00 <__ieee754_rem_pio2+0x3d0>)
 8012bb0:	0592      	lsls	r2, r2, #22
 8012bb2:	f7fb fcc7 	bl	800e544 <__aeabi_dmul>
 8012bb6:	0003      	movs	r3, r0
 8012bb8:	000c      	movs	r4, r1
 8012bba:	0002      	movs	r2, r0
 8012bbc:	9302      	str	r3, [sp, #8]
 8012bbe:	9403      	str	r4, [sp, #12]
 8012bc0:	000b      	movs	r3, r1
 8012bc2:	9806      	ldr	r0, [sp, #24]
 8012bc4:	9907      	ldr	r1, [sp, #28]
 8012bc6:	f7fb ff2f 	bl	800ea28 <__aeabi_dsub>
 8012bca:	0002      	movs	r2, r0
 8012bcc:	000b      	movs	r3, r1
 8012bce:	0006      	movs	r6, r0
 8012bd0:	000f      	movs	r7, r1
 8012bd2:	9806      	ldr	r0, [sp, #24]
 8012bd4:	9907      	ldr	r1, [sp, #28]
 8012bd6:	f7fb ff27 	bl	800ea28 <__aeabi_dsub>
 8012bda:	9a02      	ldr	r2, [sp, #8]
 8012bdc:	9b03      	ldr	r3, [sp, #12]
 8012bde:	f7fb ff23 	bl	800ea28 <__aeabi_dsub>
 8012be2:	4a48      	ldr	r2, [pc, #288]	; (8012d04 <__ieee754_rem_pio2+0x3d4>)
 8012be4:	9002      	str	r0, [sp, #8]
 8012be6:	9103      	str	r1, [sp, #12]
 8012be8:	9804      	ldr	r0, [sp, #16]
 8012bea:	9905      	ldr	r1, [sp, #20]
 8012bec:	4b46      	ldr	r3, [pc, #280]	; (8012d08 <__ieee754_rem_pio2+0x3d8>)
 8012bee:	f7fb fca9 	bl	800e544 <__aeabi_dmul>
 8012bf2:	9a02      	ldr	r2, [sp, #8]
 8012bf4:	9b03      	ldr	r3, [sp, #12]
 8012bf6:	f7fb ff17 	bl	800ea28 <__aeabi_dsub>
 8012bfa:	0002      	movs	r2, r0
 8012bfc:	000b      	movs	r3, r1
 8012bfe:	0030      	movs	r0, r6
 8012c00:	0039      	movs	r1, r7
 8012c02:	9202      	str	r2, [sp, #8]
 8012c04:	9303      	str	r3, [sp, #12]
 8012c06:	f7fb ff0f 	bl	800ea28 <__aeabi_dsub>
 8012c0a:	4683      	mov	fp, r0
 8012c0c:	468a      	mov	sl, r1
 8012c0e:	465a      	mov	r2, fp
 8012c10:	4653      	mov	r3, sl
 8012c12:	4641      	mov	r1, r8
 8012c14:	0030      	movs	r0, r6
 8012c16:	600a      	str	r2, [r1, #0]
 8012c18:	604b      	str	r3, [r1, #4]
 8012c1a:	0039      	movs	r1, r7
 8012c1c:	f7fb ff04 	bl	800ea28 <__aeabi_dsub>
 8012c20:	9a02      	ldr	r2, [sp, #8]
 8012c22:	9b03      	ldr	r3, [sp, #12]
 8012c24:	f7fb ff00 	bl	800ea28 <__aeabi_dsub>
 8012c28:	4644      	mov	r4, r8
 8012c2a:	000b      	movs	r3, r1
 8012c2c:	0002      	movs	r2, r0
 8012c2e:	60a2      	str	r2, [r4, #8]
 8012c30:	60e3      	str	r3, [r4, #12]
 8012c32:	464b      	mov	r3, r9
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	db00      	blt.n	8012c3a <__ieee754_rem_pio2+0x30a>
 8012c38:	e71b      	b.n	8012a72 <__ieee754_rem_pio2+0x142>
 8012c3a:	465b      	mov	r3, fp
 8012c3c:	6023      	str	r3, [r4, #0]
 8012c3e:	2380      	movs	r3, #128	; 0x80
 8012c40:	061b      	lsls	r3, r3, #24
 8012c42:	4453      	add	r3, sl
 8012c44:	6063      	str	r3, [r4, #4]
 8012c46:	2380      	movs	r3, #128	; 0x80
 8012c48:	061b      	lsls	r3, r3, #24
 8012c4a:	469c      	mov	ip, r3
 8012c4c:	4461      	add	r1, ip
 8012c4e:	60a0      	str	r0, [r4, #8]
 8012c50:	60e1      	str	r1, [r4, #12]
 8012c52:	426d      	negs	r5, r5
 8012c54:	e70d      	b.n	8012a72 <__ieee754_rem_pio2+0x142>
 8012c56:	000b      	movs	r3, r1
 8012c58:	0002      	movs	r2, r0
 8012c5a:	f7fb fee5 	bl	800ea28 <__aeabi_dsub>
 8012c5e:	4643      	mov	r3, r8
 8012c60:	2500      	movs	r5, #0
 8012c62:	6098      	str	r0, [r3, #8]
 8012c64:	60d9      	str	r1, [r3, #12]
 8012c66:	6018      	str	r0, [r3, #0]
 8012c68:	6059      	str	r1, [r3, #4]
 8012c6a:	e702      	b.n	8012a72 <__ieee754_rem_pio2+0x142>
 8012c6c:	22d3      	movs	r2, #211	; 0xd3
 8012c6e:	4b1a      	ldr	r3, [pc, #104]	; (8012cd8 <__ieee754_rem_pio2+0x3a8>)
 8012c70:	0552      	lsls	r2, r2, #21
 8012c72:	f7fb fed9 	bl	800ea28 <__aeabi_dsub>
 8012c76:	4a21      	ldr	r2, [pc, #132]	; (8012cfc <__ieee754_rem_pio2+0x3cc>)
 8012c78:	4b21      	ldr	r3, [pc, #132]	; (8012d00 <__ieee754_rem_pio2+0x3d0>)
 8012c7a:	000d      	movs	r5, r1
 8012c7c:	0004      	movs	r4, r0
 8012c7e:	f7fb fed3 	bl	800ea28 <__aeabi_dsub>
 8012c82:	0002      	movs	r2, r0
 8012c84:	000b      	movs	r3, r1
 8012c86:	4641      	mov	r1, r8
 8012c88:	0020      	movs	r0, r4
 8012c8a:	600a      	str	r2, [r1, #0]
 8012c8c:	604b      	str	r3, [r1, #4]
 8012c8e:	0029      	movs	r1, r5
 8012c90:	f7fb feca 	bl	800ea28 <__aeabi_dsub>
 8012c94:	4b1a      	ldr	r3, [pc, #104]	; (8012d00 <__ieee754_rem_pio2+0x3d0>)
 8012c96:	4a19      	ldr	r2, [pc, #100]	; (8012cfc <__ieee754_rem_pio2+0x3cc>)
 8012c98:	f7fb fec6 	bl	800ea28 <__aeabi_dsub>
 8012c9c:	4643      	mov	r3, r8
 8012c9e:	2501      	movs	r5, #1
 8012ca0:	6098      	str	r0, [r3, #8]
 8012ca2:	60d9      	str	r1, [r3, #12]
 8012ca4:	e6e5      	b.n	8012a72 <__ieee754_rem_pio2+0x142>
 8012ca6:	0002      	movs	r2, r0
 8012ca8:	000b      	movs	r3, r1
 8012caa:	0030      	movs	r0, r6
 8012cac:	0039      	movs	r1, r7
 8012cae:	f7fb febb 	bl	800ea28 <__aeabi_dsub>
 8012cb2:	1e6b      	subs	r3, r5, #1
 8012cb4:	4a15      	ldr	r2, [pc, #84]	; (8012d0c <__ieee754_rem_pio2+0x3dc>)
 8012cb6:	009b      	lsls	r3, r3, #2
 8012cb8:	589b      	ldr	r3, [r3, r2]
 8012cba:	4683      	mov	fp, r0
 8012cbc:	468a      	mov	sl, r1
 8012cbe:	42a3      	cmp	r3, r4
 8012cc0:	d1a5      	bne.n	8012c0e <__ieee754_rem_pio2+0x2de>
 8012cc2:	e730      	b.n	8012b26 <__ieee754_rem_pio2+0x1f6>
 8012cc4:	3fe921fb 	.word	0x3fe921fb
 8012cc8:	4002d97b 	.word	0x4002d97b
 8012ccc:	54400000 	.word	0x54400000
 8012cd0:	3ff921fb 	.word	0x3ff921fb
 8012cd4:	1a626331 	.word	0x1a626331
 8012cd8:	3dd0b461 	.word	0x3dd0b461
 8012cdc:	413921fb 	.word	0x413921fb
 8012ce0:	7fefffff 	.word	0x7fefffff
 8012ce4:	fffffbea 	.word	0xfffffbea
 8012ce8:	41700000 	.word	0x41700000
 8012cec:	0801d4dc 	.word	0x0801d4dc
 8012cf0:	6dc9c883 	.word	0x6dc9c883
 8012cf4:	3fe45f30 	.word	0x3fe45f30
 8012cf8:	3fe00000 	.word	0x3fe00000
 8012cfc:	2e037073 	.word	0x2e037073
 8012d00:	3ba3198a 	.word	0x3ba3198a
 8012d04:	252049c1 	.word	0x252049c1
 8012d08:	397b839a 	.word	0x397b839a
 8012d0c:	0801d45c 	.word	0x0801d45c
 8012d10:	22d3      	movs	r2, #211	; 0xd3
 8012d12:	4b0c      	ldr	r3, [pc, #48]	; (8012d44 <__ieee754_rem_pio2+0x414>)
 8012d14:	0552      	lsls	r2, r2, #21
 8012d16:	f7fa fcef 	bl	800d6f8 <__aeabi_dadd>
 8012d1a:	4a0b      	ldr	r2, [pc, #44]	; (8012d48 <__ieee754_rem_pio2+0x418>)
 8012d1c:	4b0b      	ldr	r3, [pc, #44]	; (8012d4c <__ieee754_rem_pio2+0x41c>)
 8012d1e:	0004      	movs	r4, r0
 8012d20:	000d      	movs	r5, r1
 8012d22:	f7fa fce9 	bl	800d6f8 <__aeabi_dadd>
 8012d26:	0002      	movs	r2, r0
 8012d28:	000b      	movs	r3, r1
 8012d2a:	4641      	mov	r1, r8
 8012d2c:	0020      	movs	r0, r4
 8012d2e:	600a      	str	r2, [r1, #0]
 8012d30:	604b      	str	r3, [r1, #4]
 8012d32:	0029      	movs	r1, r5
 8012d34:	f7fb fe78 	bl	800ea28 <__aeabi_dsub>
 8012d38:	4a03      	ldr	r2, [pc, #12]	; (8012d48 <__ieee754_rem_pio2+0x418>)
 8012d3a:	4b04      	ldr	r3, [pc, #16]	; (8012d4c <__ieee754_rem_pio2+0x41c>)
 8012d3c:	e6b9      	b.n	8012ab2 <__ieee754_rem_pio2+0x182>
 8012d3e:	2303      	movs	r3, #3
 8012d40:	e673      	b.n	8012a2a <__ieee754_rem_pio2+0xfa>
 8012d42:	46c0      	nop			; (mov r8, r8)
 8012d44:	3dd0b461 	.word	0x3dd0b461
 8012d48:	2e037073 	.word	0x2e037073
 8012d4c:	3ba3198a 	.word	0x3ba3198a

08012d50 <__ieee754_sqrt>:
 8012d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d52:	4647      	mov	r7, r8
 8012d54:	46ce      	mov	lr, r9
 8012d56:	4b67      	ldr	r3, [pc, #412]	; (8012ef4 <__ieee754_sqrt+0x1a4>)
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	000a      	movs	r2, r1
 8012d5c:	000f      	movs	r7, r1
 8012d5e:	0019      	movs	r1, r3
 8012d60:	0005      	movs	r5, r0
 8012d62:	4039      	ands	r1, r7
 8012d64:	4299      	cmp	r1, r3
 8012d66:	d100      	bne.n	8012d6a <__ieee754_sqrt+0x1a>
 8012d68:	e09b      	b.n	8012ea2 <__ieee754_sqrt+0x152>
 8012d6a:	0004      	movs	r4, r0
 8012d6c:	0001      	movs	r1, r0
 8012d6e:	2f00      	cmp	r7, #0
 8012d70:	dd69      	ble.n	8012e46 <__ieee754_sqrt+0xf6>
 8012d72:	153f      	asrs	r7, r7, #20
 8012d74:	d100      	bne.n	8012d78 <__ieee754_sqrt+0x28>
 8012d76:	e0b4      	b.n	8012ee2 <__ieee754_sqrt+0x192>
 8012d78:	4b5f      	ldr	r3, [pc, #380]	; (8012ef8 <__ieee754_sqrt+0x1a8>)
 8012d7a:	0312      	lsls	r2, r2, #12
 8012d7c:	469c      	mov	ip, r3
 8012d7e:	2380      	movs	r3, #128	; 0x80
 8012d80:	0b12      	lsrs	r2, r2, #12
 8012d82:	035b      	lsls	r3, r3, #13
 8012d84:	4313      	orrs	r3, r2
 8012d86:	005b      	lsls	r3, r3, #1
 8012d88:	0fca      	lsrs	r2, r1, #31
 8012d8a:	4467      	add	r7, ip
 8012d8c:	189b      	adds	r3, r3, r2
 8012d8e:	004a      	lsls	r2, r1, #1
 8012d90:	07f8      	lsls	r0, r7, #31
 8012d92:	d503      	bpl.n	8012d9c <__ieee754_sqrt+0x4c>
 8012d94:	0fd2      	lsrs	r2, r2, #31
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	189b      	adds	r3, r3, r2
 8012d9a:	008a      	lsls	r2, r1, #2
 8012d9c:	1079      	asrs	r1, r7, #1
 8012d9e:	468c      	mov	ip, r1
 8012da0:	2100      	movs	r1, #0
 8012da2:	2080      	movs	r0, #128	; 0x80
 8012da4:	2416      	movs	r4, #22
 8012da6:	4689      	mov	r9, r1
 8012da8:	0380      	lsls	r0, r0, #14
 8012daa:	180d      	adds	r5, r1, r0
 8012dac:	429d      	cmp	r5, r3
 8012dae:	dc02      	bgt.n	8012db6 <__ieee754_sqrt+0x66>
 8012db0:	1829      	adds	r1, r5, r0
 8012db2:	1b5b      	subs	r3, r3, r5
 8012db4:	4481      	add	r9, r0
 8012db6:	0fd5      	lsrs	r5, r2, #31
 8012db8:	005b      	lsls	r3, r3, #1
 8012dba:	3c01      	subs	r4, #1
 8012dbc:	195b      	adds	r3, r3, r5
 8012dbe:	0052      	lsls	r2, r2, #1
 8012dc0:	0840      	lsrs	r0, r0, #1
 8012dc2:	2c00      	cmp	r4, #0
 8012dc4:	d1f1      	bne.n	8012daa <__ieee754_sqrt+0x5a>
 8012dc6:	2000      	movs	r0, #0
 8012dc8:	4680      	mov	r8, r0
 8012dca:	2080      	movs	r0, #128	; 0x80
 8012dcc:	2520      	movs	r5, #32
 8012dce:	2700      	movs	r7, #0
 8012dd0:	0600      	lsls	r0, r0, #24
 8012dd2:	e009      	b.n	8012de8 <__ieee754_sqrt+0x98>
 8012dd4:	428b      	cmp	r3, r1
 8012dd6:	d05c      	beq.n	8012e92 <__ieee754_sqrt+0x142>
 8012dd8:	0fd4      	lsrs	r4, r2, #31
 8012dda:	005b      	lsls	r3, r3, #1
 8012ddc:	3d01      	subs	r5, #1
 8012dde:	18e3      	adds	r3, r4, r3
 8012de0:	0052      	lsls	r2, r2, #1
 8012de2:	0840      	lsrs	r0, r0, #1
 8012de4:	2d00      	cmp	r5, #0
 8012de6:	d016      	beq.n	8012e16 <__ieee754_sqrt+0xc6>
 8012de8:	19c4      	adds	r4, r0, r7
 8012dea:	428b      	cmp	r3, r1
 8012dec:	ddf2      	ble.n	8012dd4 <__ieee754_sqrt+0x84>
 8012dee:	1827      	adds	r7, r4, r0
 8012df0:	000e      	movs	r6, r1
 8012df2:	2c00      	cmp	r4, #0
 8012df4:	db49      	blt.n	8012e8a <__ieee754_sqrt+0x13a>
 8012df6:	1a5b      	subs	r3, r3, r1
 8012df8:	42a2      	cmp	r2, r4
 8012dfa:	4189      	sbcs	r1, r1
 8012dfc:	4249      	negs	r1, r1
 8012dfe:	1a5b      	subs	r3, r3, r1
 8012e00:	1b12      	subs	r2, r2, r4
 8012e02:	0fd4      	lsrs	r4, r2, #31
 8012e04:	005b      	lsls	r3, r3, #1
 8012e06:	3d01      	subs	r5, #1
 8012e08:	4480      	add	r8, r0
 8012e0a:	0031      	movs	r1, r6
 8012e0c:	18e3      	adds	r3, r4, r3
 8012e0e:	0052      	lsls	r2, r2, #1
 8012e10:	0840      	lsrs	r0, r0, #1
 8012e12:	2d00      	cmp	r5, #0
 8012e14:	d1e8      	bne.n	8012de8 <__ieee754_sqrt+0x98>
 8012e16:	4313      	orrs	r3, r2
 8012e18:	d14e      	bne.n	8012eb8 <__ieee754_sqrt+0x168>
 8012e1a:	4643      	mov	r3, r8
 8012e1c:	085b      	lsrs	r3, r3, #1
 8012e1e:	4937      	ldr	r1, [pc, #220]	; (8012efc <__ieee754_sqrt+0x1ac>)
 8012e20:	464a      	mov	r2, r9
 8012e22:	4688      	mov	r8, r1
 8012e24:	4649      	mov	r1, r9
 8012e26:	1052      	asrs	r2, r2, #1
 8012e28:	4442      	add	r2, r8
 8012e2a:	07c9      	lsls	r1, r1, #31
 8012e2c:	d502      	bpl.n	8012e34 <__ieee754_sqrt+0xe4>
 8012e2e:	2180      	movs	r1, #128	; 0x80
 8012e30:	0609      	lsls	r1, r1, #24
 8012e32:	430b      	orrs	r3, r1
 8012e34:	4661      	mov	r1, ip
 8012e36:	050f      	lsls	r7, r1, #20
 8012e38:	18bd      	adds	r5, r7, r2
 8012e3a:	0018      	movs	r0, r3
 8012e3c:	0029      	movs	r1, r5
 8012e3e:	bc0c      	pop	{r2, r3}
 8012e40:	4690      	mov	r8, r2
 8012e42:	4699      	mov	r9, r3
 8012e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e46:	007b      	lsls	r3, r7, #1
 8012e48:	085b      	lsrs	r3, r3, #1
 8012e4a:	4303      	orrs	r3, r0
 8012e4c:	0039      	movs	r1, r7
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d0f5      	beq.n	8012e3e <__ieee754_sqrt+0xee>
 8012e52:	2f00      	cmp	r7, #0
 8012e54:	d13c      	bne.n	8012ed0 <__ieee754_sqrt+0x180>
 8012e56:	0ae3      	lsrs	r3, r4, #11
 8012e58:	3a15      	subs	r2, #21
 8012e5a:	0564      	lsls	r4, r4, #21
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d0fa      	beq.n	8012e56 <__ieee754_sqrt+0x106>
 8012e60:	2080      	movs	r0, #128	; 0x80
 8012e62:	0340      	lsls	r0, r0, #13
 8012e64:	4203      	tst	r3, r0
 8012e66:	d13f      	bne.n	8012ee8 <__ieee754_sqrt+0x198>
 8012e68:	2700      	movs	r7, #0
 8012e6a:	e000      	b.n	8012e6e <__ieee754_sqrt+0x11e>
 8012e6c:	000f      	movs	r7, r1
 8012e6e:	005b      	lsls	r3, r3, #1
 8012e70:	1c79      	adds	r1, r7, #1
 8012e72:	4203      	tst	r3, r0
 8012e74:	d0fa      	beq.n	8012e6c <__ieee754_sqrt+0x11c>
 8012e76:	0025      	movs	r5, r4
 8012e78:	2020      	movs	r0, #32
 8012e7a:	408d      	lsls	r5, r1
 8012e7c:	1a40      	subs	r0, r0, r1
 8012e7e:	0029      	movs	r1, r5
 8012e80:	1bd7      	subs	r7, r2, r7
 8012e82:	0022      	movs	r2, r4
 8012e84:	40c2      	lsrs	r2, r0
 8012e86:	431a      	orrs	r2, r3
 8012e88:	e776      	b.n	8012d78 <__ieee754_sqrt+0x28>
 8012e8a:	43fe      	mvns	r6, r7
 8012e8c:	0ff6      	lsrs	r6, r6, #31
 8012e8e:	198e      	adds	r6, r1, r6
 8012e90:	e7b1      	b.n	8012df6 <__ieee754_sqrt+0xa6>
 8012e92:	4294      	cmp	r4, r2
 8012e94:	d8a0      	bhi.n	8012dd8 <__ieee754_sqrt+0x88>
 8012e96:	1827      	adds	r7, r4, r0
 8012e98:	2c00      	cmp	r4, #0
 8012e9a:	dbf6      	blt.n	8012e8a <__ieee754_sqrt+0x13a>
 8012e9c:	001e      	movs	r6, r3
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	e7ae      	b.n	8012e00 <__ieee754_sqrt+0xb0>
 8012ea2:	0002      	movs	r2, r0
 8012ea4:	003b      	movs	r3, r7
 8012ea6:	0028      	movs	r0, r5
 8012ea8:	0039      	movs	r1, r7
 8012eaa:	f7fb fb4b 	bl	800e544 <__aeabi_dmul>
 8012eae:	002a      	movs	r2, r5
 8012eb0:	003b      	movs	r3, r7
 8012eb2:	f7fa fc21 	bl	800d6f8 <__aeabi_dadd>
 8012eb6:	e7c2      	b.n	8012e3e <__ieee754_sqrt+0xee>
 8012eb8:	4643      	mov	r3, r8
 8012eba:	3301      	adds	r3, #1
 8012ebc:	d003      	beq.n	8012ec6 <__ieee754_sqrt+0x176>
 8012ebe:	4643      	mov	r3, r8
 8012ec0:	3301      	adds	r3, #1
 8012ec2:	085b      	lsrs	r3, r3, #1
 8012ec4:	e7ab      	b.n	8012e1e <__ieee754_sqrt+0xce>
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	4698      	mov	r8, r3
 8012eca:	2300      	movs	r3, #0
 8012ecc:	44c1      	add	r9, r8
 8012ece:	e7a6      	b.n	8012e1e <__ieee754_sqrt+0xce>
 8012ed0:	003b      	movs	r3, r7
 8012ed2:	0002      	movs	r2, r0
 8012ed4:	f7fb fda8 	bl	800ea28 <__aeabi_dsub>
 8012ed8:	0002      	movs	r2, r0
 8012eda:	000b      	movs	r3, r1
 8012edc:	f7fa ff28 	bl	800dd30 <__aeabi_ddiv>
 8012ee0:	e7ad      	b.n	8012e3e <__ieee754_sqrt+0xee>
 8012ee2:	0013      	movs	r3, r2
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	e7bb      	b.n	8012e60 <__ieee754_sqrt+0x110>
 8012ee8:	2701      	movs	r7, #1
 8012eea:	0021      	movs	r1, r4
 8012eec:	2020      	movs	r0, #32
 8012eee:	427f      	negs	r7, r7
 8012ef0:	e7c6      	b.n	8012e80 <__ieee754_sqrt+0x130>
 8012ef2:	46c0      	nop			; (mov r8, r8)
 8012ef4:	7ff00000 	.word	0x7ff00000
 8012ef8:	fffffc01 	.word	0xfffffc01
 8012efc:	3fe00000 	.word	0x3fe00000

08012f00 <__ieee754_expf>:
 8012f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f02:	22ff      	movs	r2, #255	; 0xff
 8012f04:	46d6      	mov	lr, sl
 8012f06:	464f      	mov	r7, r9
 8012f08:	4646      	mov	r6, r8
 8012f0a:	0043      	lsls	r3, r0, #1
 8012f0c:	b5c0      	push	{r6, r7, lr}
 8012f0e:	1c04      	adds	r4, r0, #0
 8012f10:	0001      	movs	r1, r0
 8012f12:	085b      	lsrs	r3, r3, #1
 8012f14:	05d2      	lsls	r2, r2, #23
 8012f16:	4293      	cmp	r3, r2
 8012f18:	d831      	bhi.n	8012f7e <__ieee754_expf+0x7e>
 8012f1a:	0fc5      	lsrs	r5, r0, #31
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d035      	beq.n	8012f8c <__ieee754_expf+0x8c>
 8012f20:	4a63      	ldr	r2, [pc, #396]	; (80130b0 <__ieee754_expf+0x1b0>)
 8012f22:	4290      	cmp	r0, r2
 8012f24:	dc36      	bgt.n	8012f94 <__ieee754_expf+0x94>
 8012f26:	2800      	cmp	r0, #0
 8012f28:	da00      	bge.n	8012f2c <__ieee754_expf+0x2c>
 8012f2a:	e088      	b.n	801303e <__ieee754_expf+0x13e>
 8012f2c:	4a61      	ldr	r2, [pc, #388]	; (80130b4 <__ieee754_expf+0x1b4>)
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	d935      	bls.n	8012f9e <__ieee754_expf+0x9e>
 8012f32:	4a61      	ldr	r2, [pc, #388]	; (80130b8 <__ieee754_expf+0x1b8>)
 8012f34:	4293      	cmp	r3, r2
 8012f36:	d800      	bhi.n	8012f3a <__ieee754_expf+0x3a>
 8012f38:	e0a9      	b.n	801308e <__ieee754_expf+0x18e>
 8012f3a:	4960      	ldr	r1, [pc, #384]	; (80130bc <__ieee754_expf+0x1bc>)
 8012f3c:	1c20      	adds	r0, r4, #0
 8012f3e:	f7f9 fc3b 	bl	800c7b8 <__aeabi_fmul>
 8012f42:	4b5f      	ldr	r3, [pc, #380]	; (80130c0 <__ieee754_expf+0x1c0>)
 8012f44:	00ad      	lsls	r5, r5, #2
 8012f46:	58e9      	ldr	r1, [r5, r3]
 8012f48:	f7f9 f98a 	bl	800c260 <__aeabi_fadd>
 8012f4c:	f7fa fb2a 	bl	800d5a4 <__aeabi_f2iz>
 8012f50:	0005      	movs	r5, r0
 8012f52:	f7fa fb47 	bl	800d5e4 <__aeabi_i2f>
 8012f56:	495b      	ldr	r1, [pc, #364]	; (80130c4 <__ieee754_expf+0x1c4>)
 8012f58:	1c07      	adds	r7, r0, #0
 8012f5a:	f7f9 fc2d 	bl	800c7b8 <__aeabi_fmul>
 8012f5e:	1c01      	adds	r1, r0, #0
 8012f60:	1c20      	adds	r0, r4, #0
 8012f62:	f7f9 fd5b 	bl	800ca1c <__aeabi_fsub>
 8012f66:	4958      	ldr	r1, [pc, #352]	; (80130c8 <__ieee754_expf+0x1c8>)
 8012f68:	4682      	mov	sl, r0
 8012f6a:	1c38      	adds	r0, r7, #0
 8012f6c:	f7f9 fc24 	bl	800c7b8 <__aeabi_fmul>
 8012f70:	1c07      	adds	r7, r0, #0
 8012f72:	1c39      	adds	r1, r7, #0
 8012f74:	4650      	mov	r0, sl
 8012f76:	f7f9 fd51 	bl	800ca1c <__aeabi_fsub>
 8012f7a:	1c04      	adds	r4, r0, #0
 8012f7c:	e013      	b.n	8012fa6 <__ieee754_expf+0xa6>
 8012f7e:	f7f9 f96f 	bl	800c260 <__aeabi_fadd>
 8012f82:	bc1c      	pop	{r2, r3, r4}
 8012f84:	4690      	mov	r8, r2
 8012f86:	4699      	mov	r9, r3
 8012f88:	46a2      	mov	sl, r4
 8012f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f8c:	2d00      	cmp	r5, #0
 8012f8e:	d0f8      	beq.n	8012f82 <__ieee754_expf+0x82>
 8012f90:	2000      	movs	r0, #0
 8012f92:	e7f6      	b.n	8012f82 <__ieee754_expf+0x82>
 8012f94:	494d      	ldr	r1, [pc, #308]	; (80130cc <__ieee754_expf+0x1cc>)
 8012f96:	1c08      	adds	r0, r1, #0
 8012f98:	f7f9 fc0e 	bl	800c7b8 <__aeabi_fmul>
 8012f9c:	e7f1      	b.n	8012f82 <__ieee754_expf+0x82>
 8012f9e:	4a4c      	ldr	r2, [pc, #304]	; (80130d0 <__ieee754_expf+0x1d0>)
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d964      	bls.n	801306e <__ieee754_expf+0x16e>
 8012fa4:	2500      	movs	r5, #0
 8012fa6:	1c21      	adds	r1, r4, #0
 8012fa8:	1c20      	adds	r0, r4, #0
 8012faa:	f7f9 fc05 	bl	800c7b8 <__aeabi_fmul>
 8012fae:	4949      	ldr	r1, [pc, #292]	; (80130d4 <__ieee754_expf+0x1d4>)
 8012fb0:	1c06      	adds	r6, r0, #0
 8012fb2:	f7f9 fc01 	bl	800c7b8 <__aeabi_fmul>
 8012fb6:	4948      	ldr	r1, [pc, #288]	; (80130d8 <__ieee754_expf+0x1d8>)
 8012fb8:	f7f9 fd30 	bl	800ca1c <__aeabi_fsub>
 8012fbc:	1c31      	adds	r1, r6, #0
 8012fbe:	f7f9 fbfb 	bl	800c7b8 <__aeabi_fmul>
 8012fc2:	4946      	ldr	r1, [pc, #280]	; (80130dc <__ieee754_expf+0x1dc>)
 8012fc4:	f7f9 f94c 	bl	800c260 <__aeabi_fadd>
 8012fc8:	1c31      	adds	r1, r6, #0
 8012fca:	f7f9 fbf5 	bl	800c7b8 <__aeabi_fmul>
 8012fce:	4944      	ldr	r1, [pc, #272]	; (80130e0 <__ieee754_expf+0x1e0>)
 8012fd0:	f7f9 fd24 	bl	800ca1c <__aeabi_fsub>
 8012fd4:	1c31      	adds	r1, r6, #0
 8012fd6:	f7f9 fbef 	bl	800c7b8 <__aeabi_fmul>
 8012fda:	4942      	ldr	r1, [pc, #264]	; (80130e4 <__ieee754_expf+0x1e4>)
 8012fdc:	f7f9 f940 	bl	800c260 <__aeabi_fadd>
 8012fe0:	1c31      	adds	r1, r6, #0
 8012fe2:	f7f9 fbe9 	bl	800c7b8 <__aeabi_fmul>
 8012fe6:	1c01      	adds	r1, r0, #0
 8012fe8:	1c20      	adds	r0, r4, #0
 8012fea:	f7f9 fd17 	bl	800ca1c <__aeabi_fsub>
 8012fee:	1c01      	adds	r1, r0, #0
 8012ff0:	4680      	mov	r8, r0
 8012ff2:	1c20      	adds	r0, r4, #0
 8012ff4:	f7f9 fbe0 	bl	800c7b8 <__aeabi_fmul>
 8012ff8:	4681      	mov	r9, r0
 8012ffa:	2d00      	cmp	r5, #0
 8012ffc:	d025      	beq.n	801304a <__ieee754_expf+0x14a>
 8012ffe:	2080      	movs	r0, #128	; 0x80
 8013000:	4641      	mov	r1, r8
 8013002:	05c0      	lsls	r0, r0, #23
 8013004:	f7f9 fd0a 	bl	800ca1c <__aeabi_fsub>
 8013008:	1c01      	adds	r1, r0, #0
 801300a:	4648      	mov	r0, r9
 801300c:	f7f9 fac2 	bl	800c594 <__aeabi_fdiv>
 8013010:	1c01      	adds	r1, r0, #0
 8013012:	1c38      	adds	r0, r7, #0
 8013014:	f7f9 fd02 	bl	800ca1c <__aeabi_fsub>
 8013018:	4651      	mov	r1, sl
 801301a:	f7f9 fcff 	bl	800ca1c <__aeabi_fsub>
 801301e:	1c01      	adds	r1, r0, #0
 8013020:	20fe      	movs	r0, #254	; 0xfe
 8013022:	0580      	lsls	r0, r0, #22
 8013024:	f7f9 fcfa 	bl	800ca1c <__aeabi_fsub>
 8013028:	002b      	movs	r3, r5
 801302a:	337d      	adds	r3, #125	; 0x7d
 801302c:	da3c      	bge.n	80130a8 <__ieee754_expf+0x1a8>
 801302e:	21d8      	movs	r1, #216	; 0xd8
 8013030:	3564      	adds	r5, #100	; 0x64
 8013032:	05ed      	lsls	r5, r5, #23
 8013034:	1828      	adds	r0, r5, r0
 8013036:	0509      	lsls	r1, r1, #20
 8013038:	f7f9 fbbe 	bl	800c7b8 <__aeabi_fmul>
 801303c:	e7a1      	b.n	8012f82 <__ieee754_expf+0x82>
 801303e:	4a2a      	ldr	r2, [pc, #168]	; (80130e8 <__ieee754_expf+0x1e8>)
 8013040:	4293      	cmp	r3, r2
 8013042:	d800      	bhi.n	8013046 <__ieee754_expf+0x146>
 8013044:	e772      	b.n	8012f2c <__ieee754_expf+0x2c>
 8013046:	2000      	movs	r0, #0
 8013048:	e79b      	b.n	8012f82 <__ieee754_expf+0x82>
 801304a:	2180      	movs	r1, #128	; 0x80
 801304c:	4640      	mov	r0, r8
 801304e:	05c9      	lsls	r1, r1, #23
 8013050:	f7f9 fce4 	bl	800ca1c <__aeabi_fsub>
 8013054:	1c01      	adds	r1, r0, #0
 8013056:	4648      	mov	r0, r9
 8013058:	f7f9 fa9c 	bl	800c594 <__aeabi_fdiv>
 801305c:	1c21      	adds	r1, r4, #0
 801305e:	f7f9 fcdd 	bl	800ca1c <__aeabi_fsub>
 8013062:	1c01      	adds	r1, r0, #0
 8013064:	20fe      	movs	r0, #254	; 0xfe
 8013066:	0580      	lsls	r0, r0, #22
 8013068:	f7f9 fcd8 	bl	800ca1c <__aeabi_fsub>
 801306c:	e789      	b.n	8012f82 <__ieee754_expf+0x82>
 801306e:	4917      	ldr	r1, [pc, #92]	; (80130cc <__ieee754_expf+0x1cc>)
 8013070:	1c20      	adds	r0, r4, #0
 8013072:	f7f9 f8f5 	bl	800c260 <__aeabi_fadd>
 8013076:	21fe      	movs	r1, #254	; 0xfe
 8013078:	0589      	lsls	r1, r1, #22
 801307a:	f7fa f8a9 	bl	800d1d0 <__aeabi_fcmpgt>
 801307e:	2800      	cmp	r0, #0
 8013080:	d090      	beq.n	8012fa4 <__ieee754_expf+0xa4>
 8013082:	21fe      	movs	r1, #254	; 0xfe
 8013084:	1c20      	adds	r0, r4, #0
 8013086:	0589      	lsls	r1, r1, #22
 8013088:	f7f9 f8ea 	bl	800c260 <__aeabi_fadd>
 801308c:	e779      	b.n	8012f82 <__ieee754_expf+0x82>
 801308e:	4b17      	ldr	r3, [pc, #92]	; (80130ec <__ieee754_expf+0x1ec>)
 8013090:	00af      	lsls	r7, r5, #2
 8013092:	58f9      	ldr	r1, [r7, r3]
 8013094:	1c20      	adds	r0, r4, #0
 8013096:	2401      	movs	r4, #1
 8013098:	f7f9 fcc0 	bl	800ca1c <__aeabi_fsub>
 801309c:	4b14      	ldr	r3, [pc, #80]	; (80130f0 <__ieee754_expf+0x1f0>)
 801309e:	1b64      	subs	r4, r4, r5
 80130a0:	4682      	mov	sl, r0
 80130a2:	58ff      	ldr	r7, [r7, r3]
 80130a4:	1b65      	subs	r5, r4, r5
 80130a6:	e764      	b.n	8012f72 <__ieee754_expf+0x72>
 80130a8:	05ed      	lsls	r5, r5, #23
 80130aa:	1828      	adds	r0, r5, r0
 80130ac:	e769      	b.n	8012f82 <__ieee754_expf+0x82>
 80130ae:	46c0      	nop			; (mov r8, r8)
 80130b0:	42b17217 	.word	0x42b17217
 80130b4:	3eb17218 	.word	0x3eb17218
 80130b8:	3f851591 	.word	0x3f851591
 80130bc:	3fb8aa3b 	.word	0x3fb8aa3b
 80130c0:	0801d5e4 	.word	0x0801d5e4
 80130c4:	3f317180 	.word	0x3f317180
 80130c8:	3717f7d1 	.word	0x3717f7d1
 80130cc:	7149f2ca 	.word	0x7149f2ca
 80130d0:	317fffff 	.word	0x317fffff
 80130d4:	3331bb4c 	.word	0x3331bb4c
 80130d8:	35ddea0e 	.word	0x35ddea0e
 80130dc:	388ab355 	.word	0x388ab355
 80130e0:	3b360b61 	.word	0x3b360b61
 80130e4:	3e2aaaab 	.word	0x3e2aaaab
 80130e8:	42cff1b5 	.word	0x42cff1b5
 80130ec:	0801d5ec 	.word	0x0801d5ec
 80130f0:	0801d5f4 	.word	0x0801d5f4

080130f4 <__ieee754_log10f>:
 80130f4:	b570      	push	{r4, r5, r6, lr}
 80130f6:	0003      	movs	r3, r0
 80130f8:	0042      	lsls	r2, r0, #1
 80130fa:	d037      	beq.n	801316c <__ieee754_log10f+0x78>
 80130fc:	2800      	cmp	r0, #0
 80130fe:	db3b      	blt.n	8013178 <__ieee754_log10f+0x84>
 8013100:	4a23      	ldr	r2, [pc, #140]	; (8013190 <__ieee754_log10f+0x9c>)
 8013102:	4290      	cmp	r0, r2
 8013104:	dc3f      	bgt.n	8013186 <__ieee754_log10f+0x92>
 8013106:	4923      	ldr	r1, [pc, #140]	; (8013194 <__ieee754_log10f+0xa0>)
 8013108:	2200      	movs	r2, #0
 801310a:	4288      	cmp	r0, r1
 801310c:	dc06      	bgt.n	801311c <__ieee754_log10f+0x28>
 801310e:	2198      	movs	r1, #152	; 0x98
 8013110:	05c9      	lsls	r1, r1, #23
 8013112:	f7f9 fb51 	bl	800c7b8 <__aeabi_fmul>
 8013116:	2219      	movs	r2, #25
 8013118:	0003      	movs	r3, r0
 801311a:	4252      	negs	r2, r2
 801311c:	15d8      	asrs	r0, r3, #23
 801311e:	387f      	subs	r0, #127	; 0x7f
 8013120:	1880      	adds	r0, r0, r2
 8013122:	0fc6      	lsrs	r6, r0, #31
 8013124:	025b      	lsls	r3, r3, #9
 8013126:	1980      	adds	r0, r0, r6
 8013128:	0a5c      	lsrs	r4, r3, #9
 801312a:	f7fa fa5b 	bl	800d5e4 <__aeabi_i2f>
 801312e:	1c05      	adds	r5, r0, #0
 8013130:	207f      	movs	r0, #127	; 0x7f
 8013132:	1b80      	subs	r0, r0, r6
 8013134:	05c0      	lsls	r0, r0, #23
 8013136:	4320      	orrs	r0, r4
 8013138:	f000 ff7a 	bl	8014030 <__ieee754_logf>
 801313c:	4916      	ldr	r1, [pc, #88]	; (8013198 <__ieee754_log10f+0xa4>)
 801313e:	1c06      	adds	r6, r0, #0
 8013140:	1c28      	adds	r0, r5, #0
 8013142:	f7f9 fb39 	bl	800c7b8 <__aeabi_fmul>
 8013146:	4915      	ldr	r1, [pc, #84]	; (801319c <__ieee754_log10f+0xa8>)
 8013148:	1c04      	adds	r4, r0, #0
 801314a:	1c30      	adds	r0, r6, #0
 801314c:	f7f9 fb34 	bl	800c7b8 <__aeabi_fmul>
 8013150:	1c01      	adds	r1, r0, #0
 8013152:	1c20      	adds	r0, r4, #0
 8013154:	f7f9 f884 	bl	800c260 <__aeabi_fadd>
 8013158:	4911      	ldr	r1, [pc, #68]	; (80131a0 <__ieee754_log10f+0xac>)
 801315a:	1c04      	adds	r4, r0, #0
 801315c:	1c28      	adds	r0, r5, #0
 801315e:	f7f9 fb2b 	bl	800c7b8 <__aeabi_fmul>
 8013162:	1c01      	adds	r1, r0, #0
 8013164:	1c20      	adds	r0, r4, #0
 8013166:	f7f9 f87b 	bl	800c260 <__aeabi_fadd>
 801316a:	e004      	b.n	8013176 <__ieee754_log10f+0x82>
 801316c:	20cc      	movs	r0, #204	; 0xcc
 801316e:	2100      	movs	r1, #0
 8013170:	0600      	lsls	r0, r0, #24
 8013172:	f7f9 fa0f 	bl	800c594 <__aeabi_fdiv>
 8013176:	bd70      	pop	{r4, r5, r6, pc}
 8013178:	1c01      	adds	r1, r0, #0
 801317a:	f7f9 fc4f 	bl	800ca1c <__aeabi_fsub>
 801317e:	2100      	movs	r1, #0
 8013180:	f7f9 fa08 	bl	800c594 <__aeabi_fdiv>
 8013184:	e7f7      	b.n	8013176 <__ieee754_log10f+0x82>
 8013186:	1c01      	adds	r1, r0, #0
 8013188:	f7f9 f86a 	bl	800c260 <__aeabi_fadd>
 801318c:	e7f3      	b.n	8013176 <__ieee754_log10f+0x82>
 801318e:	46c0      	nop			; (mov r8, r8)
 8013190:	7f7fffff 	.word	0x7f7fffff
 8013194:	007fffff 	.word	0x007fffff
 8013198:	355427db 	.word	0x355427db
 801319c:	3ede5bd9 	.word	0x3ede5bd9
 80131a0:	3e9a2080 	.word	0x3e9a2080

080131a4 <__kernel_cos>:
 80131a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131a6:	4647      	mov	r7, r8
 80131a8:	46ce      	mov	lr, r9
 80131aa:	b580      	push	{r7, lr}
 80131ac:	b087      	sub	sp, #28
 80131ae:	9200      	str	r2, [sp, #0]
 80131b0:	9301      	str	r3, [sp, #4]
 80131b2:	4b75      	ldr	r3, [pc, #468]	; (8013388 <__kernel_cos+0x1e4>)
 80131b4:	004f      	lsls	r7, r1, #1
 80131b6:	4681      	mov	r9, r0
 80131b8:	4688      	mov	r8, r1
 80131ba:	087f      	lsrs	r7, r7, #1
 80131bc:	429f      	cmp	r7, r3
 80131be:	dc63      	bgt.n	8013288 <__kernel_cos+0xe4>
 80131c0:	f7fb ff96 	bl	800f0f0 <__aeabi_d2iz>
 80131c4:	2800      	cmp	r0, #0
 80131c6:	d100      	bne.n	80131ca <__kernel_cos+0x26>
 80131c8:	e0d4      	b.n	8013374 <__kernel_cos+0x1d0>
 80131ca:	464a      	mov	r2, r9
 80131cc:	4643      	mov	r3, r8
 80131ce:	4648      	mov	r0, r9
 80131d0:	4641      	mov	r1, r8
 80131d2:	f7fb f9b7 	bl	800e544 <__aeabi_dmul>
 80131d6:	0004      	movs	r4, r0
 80131d8:	000d      	movs	r5, r1
 80131da:	4a6c      	ldr	r2, [pc, #432]	; (801338c <__kernel_cos+0x1e8>)
 80131dc:	4b6c      	ldr	r3, [pc, #432]	; (8013390 <__kernel_cos+0x1ec>)
 80131de:	f7fb f9b1 	bl	800e544 <__aeabi_dmul>
 80131e2:	4a6c      	ldr	r2, [pc, #432]	; (8013394 <__kernel_cos+0x1f0>)
 80131e4:	4b6c      	ldr	r3, [pc, #432]	; (8013398 <__kernel_cos+0x1f4>)
 80131e6:	f7fa fa87 	bl	800d6f8 <__aeabi_dadd>
 80131ea:	0022      	movs	r2, r4
 80131ec:	002b      	movs	r3, r5
 80131ee:	f7fb f9a9 	bl	800e544 <__aeabi_dmul>
 80131f2:	4a6a      	ldr	r2, [pc, #424]	; (801339c <__kernel_cos+0x1f8>)
 80131f4:	4b6a      	ldr	r3, [pc, #424]	; (80133a0 <__kernel_cos+0x1fc>)
 80131f6:	f7fb fc17 	bl	800ea28 <__aeabi_dsub>
 80131fa:	0022      	movs	r2, r4
 80131fc:	002b      	movs	r3, r5
 80131fe:	f7fb f9a1 	bl	800e544 <__aeabi_dmul>
 8013202:	4a68      	ldr	r2, [pc, #416]	; (80133a4 <__kernel_cos+0x200>)
 8013204:	4b68      	ldr	r3, [pc, #416]	; (80133a8 <__kernel_cos+0x204>)
 8013206:	f7fa fa77 	bl	800d6f8 <__aeabi_dadd>
 801320a:	0022      	movs	r2, r4
 801320c:	002b      	movs	r3, r5
 801320e:	f7fb f999 	bl	800e544 <__aeabi_dmul>
 8013212:	4a66      	ldr	r2, [pc, #408]	; (80133ac <__kernel_cos+0x208>)
 8013214:	4b66      	ldr	r3, [pc, #408]	; (80133b0 <__kernel_cos+0x20c>)
 8013216:	f7fb fc07 	bl	800ea28 <__aeabi_dsub>
 801321a:	0022      	movs	r2, r4
 801321c:	002b      	movs	r3, r5
 801321e:	f7fb f991 	bl	800e544 <__aeabi_dmul>
 8013222:	4a64      	ldr	r2, [pc, #400]	; (80133b4 <__kernel_cos+0x210>)
 8013224:	4b64      	ldr	r3, [pc, #400]	; (80133b8 <__kernel_cos+0x214>)
 8013226:	f7fa fa67 	bl	800d6f8 <__aeabi_dadd>
 801322a:	0022      	movs	r2, r4
 801322c:	002b      	movs	r3, r5
 801322e:	f7fb f989 	bl	800e544 <__aeabi_dmul>
 8013232:	9002      	str	r0, [sp, #8]
 8013234:	9103      	str	r1, [sp, #12]
 8013236:	2200      	movs	r2, #0
 8013238:	4b60      	ldr	r3, [pc, #384]	; (80133bc <__kernel_cos+0x218>)
 801323a:	0020      	movs	r0, r4
 801323c:	0029      	movs	r1, r5
 801323e:	f7fb f981 	bl	800e544 <__aeabi_dmul>
 8013242:	9a02      	ldr	r2, [sp, #8]
 8013244:	9b03      	ldr	r3, [sp, #12]
 8013246:	0006      	movs	r6, r0
 8013248:	000f      	movs	r7, r1
 801324a:	0020      	movs	r0, r4
 801324c:	0029      	movs	r1, r5
 801324e:	f7fb f979 	bl	800e544 <__aeabi_dmul>
 8013252:	9a00      	ldr	r2, [sp, #0]
 8013254:	9b01      	ldr	r3, [sp, #4]
 8013256:	0004      	movs	r4, r0
 8013258:	000d      	movs	r5, r1
 801325a:	4648      	mov	r0, r9
 801325c:	4641      	mov	r1, r8
 801325e:	f7fb f971 	bl	800e544 <__aeabi_dmul>
 8013262:	0002      	movs	r2, r0
 8013264:	000b      	movs	r3, r1
 8013266:	0020      	movs	r0, r4
 8013268:	0029      	movs	r1, r5
 801326a:	f7fb fbdd 	bl	800ea28 <__aeabi_dsub>
 801326e:	0002      	movs	r2, r0
 8013270:	000b      	movs	r3, r1
 8013272:	0030      	movs	r0, r6
 8013274:	0039      	movs	r1, r7
 8013276:	f7fb fbd7 	bl	800ea28 <__aeabi_dsub>
 801327a:	0002      	movs	r2, r0
 801327c:	000b      	movs	r3, r1
 801327e:	2000      	movs	r0, #0
 8013280:	494f      	ldr	r1, [pc, #316]	; (80133c0 <__kernel_cos+0x21c>)
 8013282:	f7fb fbd1 	bl	800ea28 <__aeabi_dsub>
 8013286:	e070      	b.n	801336a <__kernel_cos+0x1c6>
 8013288:	0002      	movs	r2, r0
 801328a:	000b      	movs	r3, r1
 801328c:	f7fb f95a 	bl	800e544 <__aeabi_dmul>
 8013290:	0004      	movs	r4, r0
 8013292:	000d      	movs	r5, r1
 8013294:	4a3d      	ldr	r2, [pc, #244]	; (801338c <__kernel_cos+0x1e8>)
 8013296:	4b3e      	ldr	r3, [pc, #248]	; (8013390 <__kernel_cos+0x1ec>)
 8013298:	f7fb f954 	bl	800e544 <__aeabi_dmul>
 801329c:	4a3d      	ldr	r2, [pc, #244]	; (8013394 <__kernel_cos+0x1f0>)
 801329e:	4b3e      	ldr	r3, [pc, #248]	; (8013398 <__kernel_cos+0x1f4>)
 80132a0:	f7fa fa2a 	bl	800d6f8 <__aeabi_dadd>
 80132a4:	0022      	movs	r2, r4
 80132a6:	002b      	movs	r3, r5
 80132a8:	f7fb f94c 	bl	800e544 <__aeabi_dmul>
 80132ac:	4a3b      	ldr	r2, [pc, #236]	; (801339c <__kernel_cos+0x1f8>)
 80132ae:	4b3c      	ldr	r3, [pc, #240]	; (80133a0 <__kernel_cos+0x1fc>)
 80132b0:	f7fb fbba 	bl	800ea28 <__aeabi_dsub>
 80132b4:	0022      	movs	r2, r4
 80132b6:	002b      	movs	r3, r5
 80132b8:	f7fb f944 	bl	800e544 <__aeabi_dmul>
 80132bc:	4a39      	ldr	r2, [pc, #228]	; (80133a4 <__kernel_cos+0x200>)
 80132be:	4b3a      	ldr	r3, [pc, #232]	; (80133a8 <__kernel_cos+0x204>)
 80132c0:	f7fa fa1a 	bl	800d6f8 <__aeabi_dadd>
 80132c4:	0022      	movs	r2, r4
 80132c6:	002b      	movs	r3, r5
 80132c8:	f7fb f93c 	bl	800e544 <__aeabi_dmul>
 80132cc:	4a37      	ldr	r2, [pc, #220]	; (80133ac <__kernel_cos+0x208>)
 80132ce:	4b38      	ldr	r3, [pc, #224]	; (80133b0 <__kernel_cos+0x20c>)
 80132d0:	f7fb fbaa 	bl	800ea28 <__aeabi_dsub>
 80132d4:	0022      	movs	r2, r4
 80132d6:	002b      	movs	r3, r5
 80132d8:	f7fb f934 	bl	800e544 <__aeabi_dmul>
 80132dc:	4a35      	ldr	r2, [pc, #212]	; (80133b4 <__kernel_cos+0x210>)
 80132de:	4b36      	ldr	r3, [pc, #216]	; (80133b8 <__kernel_cos+0x214>)
 80132e0:	f7fa fa0a 	bl	800d6f8 <__aeabi_dadd>
 80132e4:	002b      	movs	r3, r5
 80132e6:	0022      	movs	r2, r4
 80132e8:	f7fb f92c 	bl	800e544 <__aeabi_dmul>
 80132ec:	4b35      	ldr	r3, [pc, #212]	; (80133c4 <__kernel_cos+0x220>)
 80132ee:	9002      	str	r0, [sp, #8]
 80132f0:	9103      	str	r1, [sp, #12]
 80132f2:	429f      	cmp	r7, r3
 80132f4:	dd9f      	ble.n	8013236 <__kernel_cos+0x92>
 80132f6:	4b34      	ldr	r3, [pc, #208]	; (80133c8 <__kernel_cos+0x224>)
 80132f8:	2200      	movs	r2, #0
 80132fa:	429f      	cmp	r7, r3
 80132fc:	dc3d      	bgt.n	801337a <__kernel_cos+0x1d6>
 80132fe:	4933      	ldr	r1, [pc, #204]	; (80133cc <__kernel_cos+0x228>)
 8013300:	2000      	movs	r0, #0
 8013302:	187b      	adds	r3, r7, r1
 8013304:	492e      	ldr	r1, [pc, #184]	; (80133c0 <__kernel_cos+0x21c>)
 8013306:	0016      	movs	r6, r2
 8013308:	001f      	movs	r7, r3
 801330a:	f7fb fb8d 	bl	800ea28 <__aeabi_dsub>
 801330e:	9004      	str	r0, [sp, #16]
 8013310:	9105      	str	r1, [sp, #20]
 8013312:	2200      	movs	r2, #0
 8013314:	4b29      	ldr	r3, [pc, #164]	; (80133bc <__kernel_cos+0x218>)
 8013316:	0020      	movs	r0, r4
 8013318:	0029      	movs	r1, r5
 801331a:	f7fb f913 	bl	800e544 <__aeabi_dmul>
 801331e:	0032      	movs	r2, r6
 8013320:	003b      	movs	r3, r7
 8013322:	f7fb fb81 	bl	800ea28 <__aeabi_dsub>
 8013326:	9a02      	ldr	r2, [sp, #8]
 8013328:	9b03      	ldr	r3, [sp, #12]
 801332a:	0006      	movs	r6, r0
 801332c:	000f      	movs	r7, r1
 801332e:	0020      	movs	r0, r4
 8013330:	0029      	movs	r1, r5
 8013332:	f7fb f907 	bl	800e544 <__aeabi_dmul>
 8013336:	9a00      	ldr	r2, [sp, #0]
 8013338:	9b01      	ldr	r3, [sp, #4]
 801333a:	0004      	movs	r4, r0
 801333c:	000d      	movs	r5, r1
 801333e:	4648      	mov	r0, r9
 8013340:	4641      	mov	r1, r8
 8013342:	f7fb f8ff 	bl	800e544 <__aeabi_dmul>
 8013346:	0002      	movs	r2, r0
 8013348:	000b      	movs	r3, r1
 801334a:	0020      	movs	r0, r4
 801334c:	0029      	movs	r1, r5
 801334e:	f7fb fb6b 	bl	800ea28 <__aeabi_dsub>
 8013352:	0002      	movs	r2, r0
 8013354:	000b      	movs	r3, r1
 8013356:	0030      	movs	r0, r6
 8013358:	0039      	movs	r1, r7
 801335a:	f7fb fb65 	bl	800ea28 <__aeabi_dsub>
 801335e:	0002      	movs	r2, r0
 8013360:	000b      	movs	r3, r1
 8013362:	9804      	ldr	r0, [sp, #16]
 8013364:	9905      	ldr	r1, [sp, #20]
 8013366:	f7fb fb5f 	bl	800ea28 <__aeabi_dsub>
 801336a:	b007      	add	sp, #28
 801336c:	bc0c      	pop	{r2, r3}
 801336e:	4690      	mov	r8, r2
 8013370:	4699      	mov	r9, r3
 8013372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013374:	2000      	movs	r0, #0
 8013376:	4912      	ldr	r1, [pc, #72]	; (80133c0 <__kernel_cos+0x21c>)
 8013378:	e7f7      	b.n	801336a <__kernel_cos+0x1c6>
 801337a:	4b15      	ldr	r3, [pc, #84]	; (80133d0 <__kernel_cos+0x22c>)
 801337c:	2600      	movs	r6, #0
 801337e:	9204      	str	r2, [sp, #16]
 8013380:	9305      	str	r3, [sp, #20]
 8013382:	4f14      	ldr	r7, [pc, #80]	; (80133d4 <__kernel_cos+0x230>)
 8013384:	e7c5      	b.n	8013312 <__kernel_cos+0x16e>
 8013386:	46c0      	nop			; (mov r8, r8)
 8013388:	3e3fffff 	.word	0x3e3fffff
 801338c:	be8838d4 	.word	0xbe8838d4
 8013390:	bda8fae9 	.word	0xbda8fae9
 8013394:	bdb4b1c4 	.word	0xbdb4b1c4
 8013398:	3e21ee9e 	.word	0x3e21ee9e
 801339c:	809c52ad 	.word	0x809c52ad
 80133a0:	3e927e4f 	.word	0x3e927e4f
 80133a4:	19cb1590 	.word	0x19cb1590
 80133a8:	3efa01a0 	.word	0x3efa01a0
 80133ac:	16c15177 	.word	0x16c15177
 80133b0:	3f56c16c 	.word	0x3f56c16c
 80133b4:	5555554c 	.word	0x5555554c
 80133b8:	3fa55555 	.word	0x3fa55555
 80133bc:	3fe00000 	.word	0x3fe00000
 80133c0:	3ff00000 	.word	0x3ff00000
 80133c4:	3fd33332 	.word	0x3fd33332
 80133c8:	3fe90000 	.word	0x3fe90000
 80133cc:	ffe00000 	.word	0xffe00000
 80133d0:	3fe70000 	.word	0x3fe70000
 80133d4:	3fd20000 	.word	0x3fd20000

080133d8 <__kernel_rem_pio2>:
 80133d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133da:	46de      	mov	lr, fp
 80133dc:	464e      	mov	r6, r9
 80133de:	4645      	mov	r5, r8
 80133e0:	4657      	mov	r7, sl
 80133e2:	b5e0      	push	{r5, r6, r7, lr}
 80133e4:	4cdc      	ldr	r4, [pc, #880]	; (8013758 <__kernel_rem_pio2+0x380>)
 80133e6:	44a5      	add	sp, r4
 80133e8:	910d      	str	r1, [sp, #52]	; 0x34
 80133ea:	0014      	movs	r4, r2
 80133ec:	0019      	movs	r1, r3
 80133ee:	9aa4      	ldr	r2, [sp, #656]	; 0x290
 80133f0:	9309      	str	r3, [sp, #36]	; 0x24
 80133f2:	4bda      	ldr	r3, [pc, #872]	; (801375c <__kernel_rem_pio2+0x384>)
 80133f4:	0092      	lsls	r2, r2, #2
 80133f6:	58d6      	ldr	r6, [r2, r3]
 80133f8:	1e4d      	subs	r5, r1, #1
 80133fa:	9003      	str	r0, [sp, #12]
 80133fc:	2118      	movs	r1, #24
 80133fe:	1ee0      	subs	r0, r4, #3
 8013400:	9606      	str	r6, [sp, #24]
 8013402:	9502      	str	r5, [sp, #8]
 8013404:	f7f9 fd94 	bl	800cf30 <__divsi3>
 8013408:	43c3      	mvns	r3, r0
 801340a:	0001      	movs	r1, r0
 801340c:	17db      	asrs	r3, r3, #31
 801340e:	4019      	ands	r1, r3
 8013410:	1c4b      	adds	r3, r1, #1
 8013412:	009a      	lsls	r2, r3, #2
 8013414:	1a9b      	subs	r3, r3, r2
 8013416:	00db      	lsls	r3, r3, #3
 8013418:	191b      	adds	r3, r3, r4
 801341a:	910b      	str	r1, [sp, #44]	; 0x2c
 801341c:	9305      	str	r3, [sp, #20]
 801341e:	1b4c      	subs	r4, r1, r5
 8013420:	1977      	adds	r7, r6, r5
 8013422:	d418      	bmi.n	8013456 <__kernel_rem_pio2+0x7e>
 8013424:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8013426:	00a5      	lsls	r5, r4, #2
 8013428:	469c      	mov	ip, r3
 801342a:	193f      	adds	r7, r7, r4
 801342c:	ae22      	add	r6, sp, #136	; 0x88
 801342e:	4465      	add	r5, ip
 8013430:	3701      	adds	r7, #1
 8013432:	e007      	b.n	8013444 <__kernel_rem_pio2+0x6c>
 8013434:	6828      	ldr	r0, [r5, #0]
 8013436:	f7fb fe91 	bl	800f15c <__aeabi_i2d>
 801343a:	3401      	adds	r4, #1
 801343c:	c603      	stmia	r6!, {r0, r1}
 801343e:	3504      	adds	r5, #4
 8013440:	42bc      	cmp	r4, r7
 8013442:	d008      	beq.n	8013456 <__kernel_rem_pio2+0x7e>
 8013444:	2c00      	cmp	r4, #0
 8013446:	daf5      	bge.n	8013434 <__kernel_rem_pio2+0x5c>
 8013448:	2000      	movs	r0, #0
 801344a:	2100      	movs	r1, #0
 801344c:	3401      	adds	r4, #1
 801344e:	c603      	stmia	r6!, {r0, r1}
 8013450:	3504      	adds	r5, #4
 8013452:	42bc      	cmp	r4, r7
 8013454:	d1f6      	bne.n	8013444 <__kernel_rem_pio2+0x6c>
 8013456:	9b06      	ldr	r3, [sp, #24]
 8013458:	2b00      	cmp	r3, #0
 801345a:	da01      	bge.n	8013460 <__kernel_rem_pio2+0x88>
 801345c:	f000 fbfd 	bl	8013c5a <__kernel_rem_pio2+0x882>
 8013460:	9b06      	ldr	r3, [sp, #24]
 8013462:	9903      	ldr	r1, [sp, #12]
 8013464:	3301      	adds	r3, #1
 8013466:	00db      	lsls	r3, r3, #3
 8013468:	469a      	mov	sl, r3
 801346a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801346c:	00da      	lsls	r2, r3, #3
 801346e:	4694      	mov	ip, r2
 8013470:	9200      	str	r2, [sp, #0]
 8013472:	2200      	movs	r2, #0
 8013474:	4691      	mov	r9, r2
 8013476:	aa72      	add	r2, sp, #456	; 0x1c8
 8013478:	9204      	str	r2, [sp, #16]
 801347a:	4ab9      	ldr	r2, [pc, #740]	; (8013760 <__kernel_rem_pio2+0x388>)
 801347c:	4461      	add	r1, ip
 801347e:	4693      	mov	fp, r2
 8013480:	4688      	mov	r8, r1
 8013482:	ab9a      	add	r3, sp, #616	; 0x268
 8013484:	4463      	add	r3, ip
 8013486:	449b      	add	fp, r3
 8013488:	9b02      	ldr	r3, [sp, #8]
 801348a:	2b00      	cmp	r3, #0
 801348c:	da00      	bge.n	8013490 <__kernel_rem_pio2+0xb8>
 801348e:	e1bc      	b.n	801380a <__kernel_rem_pio2+0x432>
 8013490:	465d      	mov	r5, fp
 8013492:	2600      	movs	r6, #0
 8013494:	2700      	movs	r7, #0
 8013496:	9c03      	ldr	r4, [sp, #12]
 8013498:	444d      	add	r5, r9
 801349a:	682a      	ldr	r2, [r5, #0]
 801349c:	686b      	ldr	r3, [r5, #4]
 801349e:	cc03      	ldmia	r4!, {r0, r1}
 80134a0:	f7fb f850 	bl	800e544 <__aeabi_dmul>
 80134a4:	0002      	movs	r2, r0
 80134a6:	000b      	movs	r3, r1
 80134a8:	0030      	movs	r0, r6
 80134aa:	0039      	movs	r1, r7
 80134ac:	f7fa f924 	bl	800d6f8 <__aeabi_dadd>
 80134b0:	3d08      	subs	r5, #8
 80134b2:	0006      	movs	r6, r0
 80134b4:	000f      	movs	r7, r1
 80134b6:	4544      	cmp	r4, r8
 80134b8:	d1ef      	bne.n	801349a <__kernel_rem_pio2+0xc2>
 80134ba:	9b04      	ldr	r3, [sp, #16]
 80134bc:	444b      	add	r3, r9
 80134be:	601e      	str	r6, [r3, #0]
 80134c0:	605f      	str	r7, [r3, #4]
 80134c2:	2308      	movs	r3, #8
 80134c4:	469c      	mov	ip, r3
 80134c6:	44e1      	add	r9, ip
 80134c8:	45d1      	cmp	r9, sl
 80134ca:	d1dd      	bne.n	8013488 <__kernel_rem_pio2+0xb0>
 80134cc:	a80e      	add	r0, sp, #56	; 0x38
 80134ce:	2104      	movs	r1, #4
 80134d0:	4684      	mov	ip, r0
 80134d2:	4249      	negs	r1, r1
 80134d4:	4461      	add	r1, ip
 80134d6:	468c      	mov	ip, r1
 80134d8:	9a06      	ldr	r2, [sp, #24]
 80134da:	0093      	lsls	r3, r2, #2
 80134dc:	449c      	add	ip, r3
 80134de:	4661      	mov	r1, ip
 80134e0:	4684      	mov	ip, r0
 80134e2:	910a      	str	r1, [sp, #40]	; 0x28
 80134e4:	9903      	ldr	r1, [sp, #12]
 80134e6:	3b08      	subs	r3, #8
 80134e8:	4463      	add	r3, ip
 80134ea:	468c      	mov	ip, r1
 80134ec:	930c      	str	r3, [sp, #48]	; 0x30
 80134ee:	9b00      	ldr	r3, [sp, #0]
 80134f0:	9200      	str	r2, [sp, #0]
 80134f2:	4463      	add	r3, ip
 80134f4:	469b      	mov	fp, r3
 80134f6:	9a00      	ldr	r2, [sp, #0]
 80134f8:	9804      	ldr	r0, [sp, #16]
 80134fa:	00d1      	lsls	r1, r2, #3
 80134fc:	0003      	movs	r3, r0
 80134fe:	468c      	mov	ip, r1
 8013500:	4463      	add	r3, ip
 8013502:	9108      	str	r1, [sp, #32]
 8013504:	681e      	ldr	r6, [r3, #0]
 8013506:	685f      	ldr	r7, [r3, #4]
 8013508:	2a00      	cmp	r2, #0
 801350a:	dd33      	ble.n	8013574 <__kernel_rem_pio2+0x19c>
 801350c:	4995      	ldr	r1, [pc, #596]	; (8013764 <__kernel_rem_pio2+0x38c>)
 801350e:	4680      	mov	r8, r0
 8013510:	468c      	mov	ip, r1
 8013512:	4462      	add	r2, ip
 8013514:	00d3      	lsls	r3, r2, #3
 8013516:	4498      	add	r8, r3
 8013518:	ab70      	add	r3, sp, #448	; 0x1c0
 801351a:	469a      	mov	sl, r3
 801351c:	ab0e      	add	r3, sp, #56	; 0x38
 801351e:	4699      	mov	r9, r3
 8013520:	2200      	movs	r2, #0
 8013522:	4b91      	ldr	r3, [pc, #580]	; (8013768 <__kernel_rem_pio2+0x390>)
 8013524:	0030      	movs	r0, r6
 8013526:	0039      	movs	r1, r7
 8013528:	f7fb f80c 	bl	800e544 <__aeabi_dmul>
 801352c:	f7fb fde0 	bl	800f0f0 <__aeabi_d2iz>
 8013530:	f7fb fe14 	bl	800f15c <__aeabi_i2d>
 8013534:	2200      	movs	r2, #0
 8013536:	4b8d      	ldr	r3, [pc, #564]	; (801376c <__kernel_rem_pio2+0x394>)
 8013538:	0004      	movs	r4, r0
 801353a:	000d      	movs	r5, r1
 801353c:	f7fb f802 	bl	800e544 <__aeabi_dmul>
 8013540:	0002      	movs	r2, r0
 8013542:	000b      	movs	r3, r1
 8013544:	0030      	movs	r0, r6
 8013546:	0039      	movs	r1, r7
 8013548:	f7fb fa6e 	bl	800ea28 <__aeabi_dsub>
 801354c:	f7fb fdd0 	bl	800f0f0 <__aeabi_d2iz>
 8013550:	464b      	mov	r3, r9
 8013552:	c301      	stmia	r3!, {r0}
 8013554:	4699      	mov	r9, r3
 8013556:	4643      	mov	r3, r8
 8013558:	0020      	movs	r0, r4
 801355a:	681a      	ldr	r2, [r3, #0]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	0029      	movs	r1, r5
 8013560:	f7fa f8ca 	bl	800d6f8 <__aeabi_dadd>
 8013564:	2308      	movs	r3, #8
 8013566:	425b      	negs	r3, r3
 8013568:	469c      	mov	ip, r3
 801356a:	44e0      	add	r8, ip
 801356c:	0006      	movs	r6, r0
 801356e:	000f      	movs	r7, r1
 8013570:	45d0      	cmp	r8, sl
 8013572:	d1d5      	bne.n	8013520 <__kernel_rem_pio2+0x148>
 8013574:	9b05      	ldr	r3, [sp, #20]
 8013576:	0030      	movs	r0, r6
 8013578:	001a      	movs	r2, r3
 801357a:	0039      	movs	r1, r7
 801357c:	4698      	mov	r8, r3
 801357e:	f000 fce5 	bl	8013f4c <scalbn>
 8013582:	23ff      	movs	r3, #255	; 0xff
 8013584:	2200      	movs	r2, #0
 8013586:	059b      	lsls	r3, r3, #22
 8013588:	0004      	movs	r4, r0
 801358a:	000d      	movs	r5, r1
 801358c:	f7fa ffda 	bl	800e544 <__aeabi_dmul>
 8013590:	f000 fc38 	bl	8013e04 <floor>
 8013594:	2200      	movs	r2, #0
 8013596:	4b76      	ldr	r3, [pc, #472]	; (8013770 <__kernel_rem_pio2+0x398>)
 8013598:	f7fa ffd4 	bl	800e544 <__aeabi_dmul>
 801359c:	0002      	movs	r2, r0
 801359e:	000b      	movs	r3, r1
 80135a0:	0020      	movs	r0, r4
 80135a2:	0029      	movs	r1, r5
 80135a4:	f7fb fa40 	bl	800ea28 <__aeabi_dsub>
 80135a8:	000d      	movs	r5, r1
 80135aa:	0004      	movs	r4, r0
 80135ac:	f7fb fda0 	bl	800f0f0 <__aeabi_d2iz>
 80135b0:	4681      	mov	r9, r0
 80135b2:	f7fb fdd3 	bl	800f15c <__aeabi_i2d>
 80135b6:	0002      	movs	r2, r0
 80135b8:	000b      	movs	r3, r1
 80135ba:	0020      	movs	r0, r4
 80135bc:	0029      	movs	r1, r5
 80135be:	f7fb fa33 	bl	800ea28 <__aeabi_dsub>
 80135c2:	0006      	movs	r6, r0
 80135c4:	4640      	mov	r0, r8
 80135c6:	000f      	movs	r7, r1
 80135c8:	2800      	cmp	r0, #0
 80135ca:	dc00      	bgt.n	80135ce <__kernel_rem_pio2+0x1f6>
 80135cc:	e0ee      	b.n	80137ac <__kernel_rem_pio2+0x3d4>
 80135ce:	9b00      	ldr	r3, [sp, #0]
 80135d0:	2118      	movs	r1, #24
 80135d2:	1e5a      	subs	r2, r3, #1
 80135d4:	0092      	lsls	r2, r2, #2
 80135d6:	ab0e      	add	r3, sp, #56	; 0x38
 80135d8:	589b      	ldr	r3, [r3, r2]
 80135da:	1a09      	subs	r1, r1, r0
 80135dc:	001d      	movs	r5, r3
 80135de:	410d      	asrs	r5, r1
 80135e0:	44a9      	add	r9, r5
 80135e2:	408d      	lsls	r5, r1
 80135e4:	1b5d      	subs	r5, r3, r5
 80135e6:	ab0e      	add	r3, sp, #56	; 0x38
 80135e8:	509d      	str	r5, [r3, r2]
 80135ea:	2317      	movs	r3, #23
 80135ec:	1a1b      	subs	r3, r3, r0
 80135ee:	411d      	asrs	r5, r3
 80135f0:	2d00      	cmp	r5, #0
 80135f2:	dd2d      	ble.n	8013650 <__kernel_rem_pio2+0x278>
 80135f4:	2301      	movs	r3, #1
 80135f6:	469c      	mov	ip, r3
 80135f8:	9b00      	ldr	r3, [sp, #0]
 80135fa:	44e1      	add	r9, ip
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	dc00      	bgt.n	8013602 <__kernel_rem_pio2+0x22a>
 8013600:	e21c      	b.n	8013a3c <__kernel_rem_pio2+0x664>
 8013602:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013604:	2301      	movs	r3, #1
 8013606:	2c00      	cmp	r4, #0
 8013608:	d000      	beq.n	801360c <__kernel_rem_pio2+0x234>
 801360a:	e0b5      	b.n	8013778 <__kernel_rem_pio2+0x3a0>
 801360c:	9a00      	ldr	r2, [sp, #0]
 801360e:	2a01      	cmp	r2, #1
 8013610:	d009      	beq.n	8013626 <__kernel_rem_pio2+0x24e>
 8013612:	0099      	lsls	r1, r3, #2
 8013614:	aa0e      	add	r2, sp, #56	; 0x38
 8013616:	5854      	ldr	r4, [r2, r1]
 8013618:	3301      	adds	r3, #1
 801361a:	2c00      	cmp	r4, #0
 801361c:	d000      	beq.n	8013620 <__kernel_rem_pio2+0x248>
 801361e:	e0ac      	b.n	801377a <__kernel_rem_pio2+0x3a2>
 8013620:	9a00      	ldr	r2, [sp, #0]
 8013622:	429a      	cmp	r2, r3
 8013624:	d1f5      	bne.n	8013612 <__kernel_rem_pio2+0x23a>
 8013626:	9b05      	ldr	r3, [sp, #20]
 8013628:	2b00      	cmp	r3, #0
 801362a:	dd0e      	ble.n	801364a <__kernel_rem_pio2+0x272>
 801362c:	2b01      	cmp	r3, #1
 801362e:	d100      	bne.n	8013632 <__kernel_rem_pio2+0x25a>
 8013630:	e1a8      	b.n	8013984 <__kernel_rem_pio2+0x5ac>
 8013632:	2b02      	cmp	r3, #2
 8013634:	d109      	bne.n	801364a <__kernel_rem_pio2+0x272>
 8013636:	9b00      	ldr	r3, [sp, #0]
 8013638:	a90e      	add	r1, sp, #56	; 0x38
 801363a:	1e5a      	subs	r2, r3, #1
 801363c:	0092      	lsls	r2, r2, #2
 801363e:	ab0e      	add	r3, sp, #56	; 0x38
 8013640:	589b      	ldr	r3, [r3, r2]
 8013642:	9307      	str	r3, [sp, #28]
 8013644:	029b      	lsls	r3, r3, #10
 8013646:	0a9b      	lsrs	r3, r3, #10
 8013648:	508b      	str	r3, [r1, r2]
 801364a:	2d02      	cmp	r5, #2
 801364c:	d100      	bne.n	8013650 <__kernel_rem_pio2+0x278>
 801364e:	e0c1      	b.n	80137d4 <__kernel_rem_pio2+0x3fc>
 8013650:	2300      	movs	r3, #0
 8013652:	2200      	movs	r2, #0
 8013654:	0030      	movs	r0, r6
 8013656:	0039      	movs	r1, r7
 8013658:	f7f9 fd66 	bl	800d128 <__aeabi_dcmpeq>
 801365c:	9b00      	ldr	r3, [sp, #0]
 801365e:	2800      	cmp	r0, #0
 8013660:	d100      	bne.n	8013664 <__kernel_rem_pio2+0x28c>
 8013662:	e294      	b.n	8013b8e <__kernel_rem_pio2+0x7b6>
 8013664:	9a06      	ldr	r2, [sp, #24]
 8013666:	1e59      	subs	r1, r3, #1
 8013668:	428a      	cmp	r2, r1
 801366a:	dc10      	bgt.n	801368e <__kernel_rem_pio2+0x2b6>
 801366c:	4a41      	ldr	r2, [pc, #260]	; (8013774 <__kernel_rem_pio2+0x39c>)
 801366e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013670:	4694      	mov	ip, r2
 8013672:	aa0e      	add	r2, sp, #56	; 0x38
 8013674:	4463      	add	r3, ip
 8013676:	4694      	mov	ip, r2
 8013678:	2200      	movs	r2, #0
 801367a:	009b      	lsls	r3, r3, #2
 801367c:	4463      	add	r3, ip
 801367e:	681c      	ldr	r4, [r3, #0]
 8013680:	3b04      	subs	r3, #4
 8013682:	4322      	orrs	r2, r4
 8013684:	4283      	cmp	r3, r0
 8013686:	d1fa      	bne.n	801367e <__kernel_rem_pio2+0x2a6>
 8013688:	2a00      	cmp	r2, #0
 801368a:	d000      	beq.n	801368e <__kernel_rem_pio2+0x2b6>
 801368c:	e0c0      	b.n	8013810 <__kernel_rem_pio2+0x438>
 801368e:	9b06      	ldr	r3, [sp, #24]
 8013690:	aa0e      	add	r2, sp, #56	; 0x38
 8013692:	3b01      	subs	r3, #1
 8013694:	009b      	lsls	r3, r3, #2
 8013696:	58d3      	ldr	r3, [r2, r3]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d000      	beq.n	801369e <__kernel_rem_pio2+0x2c6>
 801369c:	e0b3      	b.n	8013806 <__kernel_rem_pio2+0x42e>
 801369e:	2201      	movs	r2, #1
 80136a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136a2:	3b04      	subs	r3, #4
 80136a4:	6859      	ldr	r1, [r3, #4]
 80136a6:	3201      	adds	r2, #1
 80136a8:	2900      	cmp	r1, #0
 80136aa:	d0fa      	beq.n	80136a2 <__kernel_rem_pio2+0x2ca>
 80136ac:	9b00      	ldr	r3, [sp, #0]
 80136ae:	469c      	mov	ip, r3
 80136b0:	4462      	add	r2, ip
 80136b2:	0011      	movs	r1, r2
 80136b4:	9207      	str	r2, [sp, #28]
 80136b6:	001a      	movs	r2, r3
 80136b8:	3301      	adds	r3, #1
 80136ba:	428b      	cmp	r3, r1
 80136bc:	dc46      	bgt.n	801374c <__kernel_rem_pio2+0x374>
 80136be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80136c0:	4663      	mov	r3, ip
 80136c2:	4680      	mov	r8, r0
 80136c4:	9ca5      	ldr	r4, [sp, #660]	; 0x294
 80136c6:	4443      	add	r3, r8
 80136c8:	46a0      	mov	r8, r4
 80136ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80136cc:	009b      	lsls	r3, r3, #2
 80136ce:	46a1      	mov	r9, r4
 80136d0:	444a      	add	r2, r9
 80136d2:	4498      	add	r8, r3
 80136d4:	00d3      	lsls	r3, r2, #3
 80136d6:	aa22      	add	r2, sp, #136	; 0x88
 80136d8:	4691      	mov	r9, r2
 80136da:	9a04      	ldr	r2, [sp, #16]
 80136dc:	4499      	add	r9, r3
 80136de:	4694      	mov	ip, r2
 80136e0:	9b08      	ldr	r3, [sp, #32]
 80136e2:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 80136e4:	4463      	add	r3, ip
 80136e6:	4684      	mov	ip, r0
 80136e8:	4461      	add	r1, ip
 80136ea:	4694      	mov	ip, r2
 80136ec:	469a      	mov	sl, r3
 80136ee:	008b      	lsls	r3, r1, #2
 80136f0:	4463      	add	r3, ip
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	4643      	mov	r3, r8
 80136f6:	6858      	ldr	r0, [r3, #4]
 80136f8:	f7fb fd30 	bl	800f15c <__aeabi_i2d>
 80136fc:	464b      	mov	r3, r9
 80136fe:	6018      	str	r0, [r3, #0]
 8013700:	6059      	str	r1, [r3, #4]
 8013702:	9b02      	ldr	r3, [sp, #8]
 8013704:	2b00      	cmp	r3, #0
 8013706:	db24      	blt.n	8013752 <__kernel_rem_pio2+0x37a>
 8013708:	464d      	mov	r5, r9
 801370a:	9c03      	ldr	r4, [sp, #12]
 801370c:	2600      	movs	r6, #0
 801370e:	2700      	movs	r7, #0
 8013710:	e001      	b.n	8013716 <__kernel_rem_pio2+0x33e>
 8013712:	6828      	ldr	r0, [r5, #0]
 8013714:	6869      	ldr	r1, [r5, #4]
 8013716:	cc0c      	ldmia	r4!, {r2, r3}
 8013718:	f7fa ff14 	bl	800e544 <__aeabi_dmul>
 801371c:	0002      	movs	r2, r0
 801371e:	000b      	movs	r3, r1
 8013720:	0030      	movs	r0, r6
 8013722:	0039      	movs	r1, r7
 8013724:	f7f9 ffe8 	bl	800d6f8 <__aeabi_dadd>
 8013728:	3d08      	subs	r5, #8
 801372a:	0006      	movs	r6, r0
 801372c:	000f      	movs	r7, r1
 801372e:	455c      	cmp	r4, fp
 8013730:	d1ef      	bne.n	8013712 <__kernel_rem_pio2+0x33a>
 8013732:	4653      	mov	r3, sl
 8013734:	609e      	str	r6, [r3, #8]
 8013736:	60df      	str	r7, [r3, #12]
 8013738:	2304      	movs	r3, #4
 801373a:	469c      	mov	ip, r3
 801373c:	3304      	adds	r3, #4
 801373e:	44e0      	add	r8, ip
 8013740:	469c      	mov	ip, r3
 8013742:	9b00      	ldr	r3, [sp, #0]
 8013744:	44e1      	add	r9, ip
 8013746:	44e2      	add	sl, ip
 8013748:	4598      	cmp	r8, r3
 801374a:	d1d3      	bne.n	80136f4 <__kernel_rem_pio2+0x31c>
 801374c:	9b07      	ldr	r3, [sp, #28]
 801374e:	9300      	str	r3, [sp, #0]
 8013750:	e6d1      	b.n	80134f6 <__kernel_rem_pio2+0x11e>
 8013752:	2600      	movs	r6, #0
 8013754:	2700      	movs	r7, #0
 8013756:	e7ec      	b.n	8013732 <__kernel_rem_pio2+0x35a>
 8013758:	fffffd94 	.word	0xfffffd94
 801375c:	0801d640 	.word	0x0801d640
 8013760:	fffffe18 	.word	0xfffffe18
 8013764:	1fffffff 	.word	0x1fffffff
 8013768:	3e700000 	.word	0x3e700000
 801376c:	41700000 	.word	0x41700000
 8013770:	40200000 	.word	0x40200000
 8013774:	3fffffff 	.word	0x3fffffff
 8013778:	2100      	movs	r1, #0
 801377a:	2280      	movs	r2, #128	; 0x80
 801377c:	0452      	lsls	r2, r2, #17
 801377e:	1b14      	subs	r4, r2, r4
 8013780:	aa0e      	add	r2, sp, #56	; 0x38
 8013782:	5054      	str	r4, [r2, r1]
 8013784:	9900      	ldr	r1, [sp, #0]
 8013786:	4299      	cmp	r1, r3
 8013788:	dd0e      	ble.n	80137a8 <__kernel_rem_pio2+0x3d0>
 801378a:	a80e      	add	r0, sp, #56	; 0x38
 801378c:	4684      	mov	ip, r0
 801378e:	009b      	lsls	r3, r3, #2
 8013790:	aa0e      	add	r2, sp, #56	; 0x38
 8013792:	0089      	lsls	r1, r1, #2
 8013794:	58d2      	ldr	r2, [r2, r3]
 8013796:	4461      	add	r1, ip
 8013798:	4463      	add	r3, ip
 801379a:	48cf      	ldr	r0, [pc, #828]	; (8013ad8 <__kernel_rem_pio2+0x700>)
 801379c:	e000      	b.n	80137a0 <__kernel_rem_pio2+0x3c8>
 801379e:	681a      	ldr	r2, [r3, #0]
 80137a0:	1a82      	subs	r2, r0, r2
 80137a2:	c304      	stmia	r3!, {r2}
 80137a4:	428b      	cmp	r3, r1
 80137a6:	d1fa      	bne.n	801379e <__kernel_rem_pio2+0x3c6>
 80137a8:	2401      	movs	r4, #1
 80137aa:	e73c      	b.n	8013626 <__kernel_rem_pio2+0x24e>
 80137ac:	9b05      	ldr	r3, [sp, #20]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d106      	bne.n	80137c0 <__kernel_rem_pio2+0x3e8>
 80137b2:	9b00      	ldr	r3, [sp, #0]
 80137b4:	aa0e      	add	r2, sp, #56	; 0x38
 80137b6:	3b01      	subs	r3, #1
 80137b8:	009b      	lsls	r3, r3, #2
 80137ba:	58d5      	ldr	r5, [r2, r3]
 80137bc:	15ed      	asrs	r5, r5, #23
 80137be:	e717      	b.n	80135f0 <__kernel_rem_pio2+0x218>
 80137c0:	2200      	movs	r2, #0
 80137c2:	4bc6      	ldr	r3, [pc, #792]	; (8013adc <__kernel_rem_pio2+0x704>)
 80137c4:	0030      	movs	r0, r6
 80137c6:	f7f9 fcd3 	bl	800d170 <__aeabi_dcmpge>
 80137ca:	2800      	cmp	r0, #0
 80137cc:	d000      	beq.n	80137d0 <__kernel_rem_pio2+0x3f8>
 80137ce:	e124      	b.n	8013a1a <__kernel_rem_pio2+0x642>
 80137d0:	2500      	movs	r5, #0
 80137d2:	e73d      	b.n	8013650 <__kernel_rem_pio2+0x278>
 80137d4:	0032      	movs	r2, r6
 80137d6:	003b      	movs	r3, r7
 80137d8:	2000      	movs	r0, #0
 80137da:	49c1      	ldr	r1, [pc, #772]	; (8013ae0 <__kernel_rem_pio2+0x708>)
 80137dc:	f7fb f924 	bl	800ea28 <__aeabi_dsub>
 80137e0:	0006      	movs	r6, r0
 80137e2:	000f      	movs	r7, r1
 80137e4:	2c00      	cmp	r4, #0
 80137e6:	d100      	bne.n	80137ea <__kernel_rem_pio2+0x412>
 80137e8:	e732      	b.n	8013650 <__kernel_rem_pio2+0x278>
 80137ea:	9a05      	ldr	r2, [sp, #20]
 80137ec:	2000      	movs	r0, #0
 80137ee:	49bc      	ldr	r1, [pc, #752]	; (8013ae0 <__kernel_rem_pio2+0x708>)
 80137f0:	f000 fbac 	bl	8013f4c <scalbn>
 80137f4:	0002      	movs	r2, r0
 80137f6:	000b      	movs	r3, r1
 80137f8:	0030      	movs	r0, r6
 80137fa:	0039      	movs	r1, r7
 80137fc:	f7fb f914 	bl	800ea28 <__aeabi_dsub>
 8013800:	0006      	movs	r6, r0
 8013802:	000f      	movs	r7, r1
 8013804:	e724      	b.n	8013650 <__kernel_rem_pio2+0x278>
 8013806:	2201      	movs	r2, #1
 8013808:	e750      	b.n	80136ac <__kernel_rem_pio2+0x2d4>
 801380a:	2600      	movs	r6, #0
 801380c:	2700      	movs	r7, #0
 801380e:	e654      	b.n	80134ba <__kernel_rem_pio2+0xe2>
 8013810:	464b      	mov	r3, r9
 8013812:	9a05      	ldr	r2, [sp, #20]
 8013814:	9307      	str	r3, [sp, #28]
 8013816:	4688      	mov	r8, r1
 8013818:	008b      	lsls	r3, r1, #2
 801381a:	a90e      	add	r1, sp, #56	; 0x38
 801381c:	58cb      	ldr	r3, [r1, r3]
 801381e:	3a18      	subs	r2, #24
 8013820:	9508      	str	r5, [sp, #32]
 8013822:	9205      	str	r2, [sp, #20]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d10d      	bne.n	8013844 <__kernel_rem_pio2+0x46c>
 8013828:	468c      	mov	ip, r1
 801382a:	4641      	mov	r1, r8
 801382c:	4bad      	ldr	r3, [pc, #692]	; (8013ae4 <__kernel_rem_pio2+0x70c>)
 801382e:	4443      	add	r3, r8
 8013830:	009b      	lsls	r3, r3, #2
 8013832:	4463      	add	r3, ip
 8013834:	3b04      	subs	r3, #4
 8013836:	6858      	ldr	r0, [r3, #4]
 8013838:	3901      	subs	r1, #1
 801383a:	3a18      	subs	r2, #24
 801383c:	2800      	cmp	r0, #0
 801383e:	d0f9      	beq.n	8013834 <__kernel_rem_pio2+0x45c>
 8013840:	4688      	mov	r8, r1
 8013842:	9205      	str	r2, [sp, #20]
 8013844:	9a05      	ldr	r2, [sp, #20]
 8013846:	2000      	movs	r0, #0
 8013848:	49a5      	ldr	r1, [pc, #660]	; (8013ae0 <__kernel_rem_pio2+0x708>)
 801384a:	f000 fb7f 	bl	8013f4c <scalbn>
 801384e:	4643      	mov	r3, r8
 8013850:	0004      	movs	r4, r0
 8013852:	000d      	movs	r5, r1
 8013854:	2b00      	cmp	r3, #0
 8013856:	da00      	bge.n	801385a <__kernel_rem_pio2+0x482>
 8013858:	e205      	b.n	8013c66 <__kernel_rem_pio2+0x88e>
 801385a:	009e      	lsls	r6, r3, #2
 801385c:	ab0e      	add	r3, sp, #56	; 0x38
 801385e:	469c      	mov	ip, r3
 8013860:	4643      	mov	r3, r8
 8013862:	00db      	lsls	r3, r3, #3
 8013864:	4466      	add	r6, ip
 8013866:	469c      	mov	ip, r3
 8013868:	9305      	str	r3, [sp, #20]
 801386a:	ab70      	add	r3, sp, #448	; 0x1c0
 801386c:	4699      	mov	r9, r3
 801386e:	9f04      	ldr	r7, [sp, #16]
 8013870:	4467      	add	r7, ip
 8013872:	9700      	str	r7, [sp, #0]
 8013874:	6830      	ldr	r0, [r6, #0]
 8013876:	f7fb fc71 	bl	800f15c <__aeabi_i2d>
 801387a:	0022      	movs	r2, r4
 801387c:	002b      	movs	r3, r5
 801387e:	f7fa fe61 	bl	800e544 <__aeabi_dmul>
 8013882:	2200      	movs	r2, #0
 8013884:	6038      	str	r0, [r7, #0]
 8013886:	6079      	str	r1, [r7, #4]
 8013888:	4b97      	ldr	r3, [pc, #604]	; (8013ae8 <__kernel_rem_pio2+0x710>)
 801388a:	0020      	movs	r0, r4
 801388c:	0029      	movs	r1, r5
 801388e:	f7fa fe59 	bl	800e544 <__aeabi_dmul>
 8013892:	3f08      	subs	r7, #8
 8013894:	0004      	movs	r4, r0
 8013896:	000d      	movs	r5, r1
 8013898:	3e04      	subs	r6, #4
 801389a:	45b9      	cmp	r9, r7
 801389c:	d1ea      	bne.n	8013874 <__kernel_rem_pio2+0x49c>
 801389e:	ab4a      	add	r3, sp, #296	; 0x128
 80138a0:	9303      	str	r3, [sp, #12]
 80138a2:	469b      	mov	fp, r3
 80138a4:	2300      	movs	r3, #0
 80138a6:	469a      	mov	sl, r3
 80138a8:	9b06      	ldr	r3, [sp, #24]
 80138aa:	4642      	mov	r2, r8
 80138ac:	4699      	mov	r9, r3
 80138ae:	4643      	mov	r3, r8
 80138b0:	3201      	adds	r2, #1
 80138b2:	9202      	str	r2, [sp, #8]
 80138b4:	9304      	str	r3, [sp, #16]
 80138b6:	464b      	mov	r3, r9
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	da00      	bge.n	80138be <__kernel_rem_pio2+0x4e6>
 80138bc:	e0aa      	b.n	8013a14 <__kernel_rem_pio2+0x63c>
 80138be:	2080      	movs	r0, #128	; 0x80
 80138c0:	4b8a      	ldr	r3, [pc, #552]	; (8013aec <__kernel_rem_pio2+0x714>)
 80138c2:	9d00      	ldr	r5, [sp, #0]
 80138c4:	4698      	mov	r8, r3
 80138c6:	05c0      	lsls	r0, r0, #23
 80138c8:	4989      	ldr	r1, [pc, #548]	; (8013af0 <__kernel_rem_pio2+0x718>)
 80138ca:	2600      	movs	r6, #0
 80138cc:	2700      	movs	r7, #0
 80138ce:	2400      	movs	r4, #0
 80138d0:	e008      	b.n	80138e4 <__kernel_rem_pio2+0x50c>
 80138d2:	2308      	movs	r3, #8
 80138d4:	469c      	mov	ip, r3
 80138d6:	3508      	adds	r5, #8
 80138d8:	44e0      	add	r8, ip
 80138da:	4554      	cmp	r4, sl
 80138dc:	dc11      	bgt.n	8013902 <__kernel_rem_pio2+0x52a>
 80138de:	4643      	mov	r3, r8
 80138e0:	6818      	ldr	r0, [r3, #0]
 80138e2:	6859      	ldr	r1, [r3, #4]
 80138e4:	682a      	ldr	r2, [r5, #0]
 80138e6:	686b      	ldr	r3, [r5, #4]
 80138e8:	f7fa fe2c 	bl	800e544 <__aeabi_dmul>
 80138ec:	0002      	movs	r2, r0
 80138ee:	000b      	movs	r3, r1
 80138f0:	0030      	movs	r0, r6
 80138f2:	0039      	movs	r1, r7
 80138f4:	f7f9 ff00 	bl	800d6f8 <__aeabi_dadd>
 80138f8:	3401      	adds	r4, #1
 80138fa:	0006      	movs	r6, r0
 80138fc:	000f      	movs	r7, r1
 80138fe:	45a1      	cmp	r9, r4
 8013900:	dae7      	bge.n	80138d2 <__kernel_rem_pio2+0x4fa>
 8013902:	465b      	mov	r3, fp
 8013904:	c3c0      	stmia	r3!, {r6, r7}
 8013906:	469b      	mov	fp, r3
 8013908:	2301      	movs	r3, #1
 801390a:	469c      	mov	ip, r3
 801390c:	9b00      	ldr	r3, [sp, #0]
 801390e:	44e2      	add	sl, ip
 8013910:	3b08      	subs	r3, #8
 8013912:	9300      	str	r3, [sp, #0]
 8013914:	9b02      	ldr	r3, [sp, #8]
 8013916:	459a      	cmp	sl, r3
 8013918:	d1cd      	bne.n	80138b6 <__kernel_rem_pio2+0x4de>
 801391a:	9b04      	ldr	r3, [sp, #16]
 801391c:	4698      	mov	r8, r3
 801391e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013920:	2b02      	cmp	r3, #2
 8013922:	dd00      	ble.n	8013926 <__kernel_rem_pio2+0x54e>
 8013924:	e08e      	b.n	8013a44 <__kernel_rem_pio2+0x66c>
 8013926:	2b00      	cmp	r3, #0
 8013928:	dc37      	bgt.n	801399a <__kernel_rem_pio2+0x5c2>
 801392a:	d11f      	bne.n	801396c <__kernel_rem_pio2+0x594>
 801392c:	9b05      	ldr	r3, [sp, #20]
 801392e:	2700      	movs	r7, #0
 8013930:	001d      	movs	r5, r3
 8013932:	9b03      	ldr	r3, [sp, #12]
 8013934:	2400      	movs	r4, #0
 8013936:	469c      	mov	ip, r3
 8013938:	001e      	movs	r6, r3
 801393a:	4465      	add	r5, ip
 801393c:	3e08      	subs	r6, #8
 801393e:	682a      	ldr	r2, [r5, #0]
 8013940:	686b      	ldr	r3, [r5, #4]
 8013942:	0038      	movs	r0, r7
 8013944:	0021      	movs	r1, r4
 8013946:	f7f9 fed7 	bl	800d6f8 <__aeabi_dadd>
 801394a:	3d08      	subs	r5, #8
 801394c:	0007      	movs	r7, r0
 801394e:	000c      	movs	r4, r1
 8013950:	42ae      	cmp	r6, r5
 8013952:	d1f4      	bne.n	801393e <__kernel_rem_pio2+0x566>
 8013954:	9b08      	ldr	r3, [sp, #32]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d003      	beq.n	8013962 <__kernel_rem_pio2+0x58a>
 801395a:	2380      	movs	r3, #128	; 0x80
 801395c:	061b      	lsls	r3, r3, #24
 801395e:	469c      	mov	ip, r3
 8013960:	4464      	add	r4, ip
 8013962:	003a      	movs	r2, r7
 8013964:	0023      	movs	r3, r4
 8013966:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013968:	600a      	str	r2, [r1, #0]
 801396a:	604b      	str	r3, [r1, #4]
 801396c:	2007      	movs	r0, #7
 801396e:	9b07      	ldr	r3, [sp, #28]
 8013970:	4018      	ands	r0, r3
 8013972:	239b      	movs	r3, #155	; 0x9b
 8013974:	009b      	lsls	r3, r3, #2
 8013976:	449d      	add	sp, r3
 8013978:	bc3c      	pop	{r2, r3, r4, r5}
 801397a:	4690      	mov	r8, r2
 801397c:	4699      	mov	r9, r3
 801397e:	46a2      	mov	sl, r4
 8013980:	46ab      	mov	fp, r5
 8013982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013984:	9b00      	ldr	r3, [sp, #0]
 8013986:	a90e      	add	r1, sp, #56	; 0x38
 8013988:	1e5a      	subs	r2, r3, #1
 801398a:	0092      	lsls	r2, r2, #2
 801398c:	ab0e      	add	r3, sp, #56	; 0x38
 801398e:	589b      	ldr	r3, [r3, r2]
 8013990:	9307      	str	r3, [sp, #28]
 8013992:	025b      	lsls	r3, r3, #9
 8013994:	0a5b      	lsrs	r3, r3, #9
 8013996:	508b      	str	r3, [r1, r2]
 8013998:	e657      	b.n	801364a <__kernel_rem_pio2+0x272>
 801399a:	4643      	mov	r3, r8
 801399c:	2b00      	cmp	r3, #0
 801399e:	da00      	bge.n	80139a2 <__kernel_rem_pio2+0x5ca>
 80139a0:	e170      	b.n	8013c84 <__kernel_rem_pio2+0x8ac>
 80139a2:	2000      	movs	r0, #0
 80139a4:	2100      	movs	r1, #0
 80139a6:	00db      	lsls	r3, r3, #3
 80139a8:	aa4a      	add	r2, sp, #296	; 0x128
 80139aa:	18d6      	adds	r6, r2, r3
 80139ac:	af48      	add	r7, sp, #288	; 0x120
 80139ae:	6832      	ldr	r2, [r6, #0]
 80139b0:	6873      	ldr	r3, [r6, #4]
 80139b2:	3e08      	subs	r6, #8
 80139b4:	f7f9 fea0 	bl	800d6f8 <__aeabi_dadd>
 80139b8:	42b7      	cmp	r7, r6
 80139ba:	d1f8      	bne.n	80139ae <__kernel_rem_pio2+0x5d6>
 80139bc:	9b08      	ldr	r3, [sp, #32]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d000      	beq.n	80139c4 <__kernel_rem_pio2+0x5ec>
 80139c2:	e125      	b.n	8013c10 <__kernel_rem_pio2+0x838>
 80139c4:	000b      	movs	r3, r1
 80139c6:	0002      	movs	r2, r0
 80139c8:	984a      	ldr	r0, [sp, #296]	; 0x128
 80139ca:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80139cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80139ce:	6022      	str	r2, [r4, #0]
 80139d0:	6063      	str	r3, [r4, #4]
 80139d2:	f7fb f829 	bl	800ea28 <__aeabi_dsub>
 80139d6:	4643      	mov	r3, r8
 80139d8:	0007      	movs	r7, r0
 80139da:	000c      	movs	r4, r1
 80139dc:	2b00      	cmp	r3, #0
 80139de:	dd13      	ble.n	8013a08 <__kernel_rem_pio2+0x630>
 80139e0:	2501      	movs	r5, #1
 80139e2:	ae4c      	add	r6, sp, #304	; 0x130
 80139e4:	46b1      	mov	r9, r6
 80139e6:	0038      	movs	r0, r7
 80139e8:	002e      	movs	r6, r5
 80139ea:	0021      	movs	r1, r4
 80139ec:	464c      	mov	r4, r9
 80139ee:	3601      	adds	r6, #1
 80139f0:	cc0c      	ldmia	r4!, {r2, r3}
 80139f2:	f7f9 fe81 	bl	800d6f8 <__aeabi_dadd>
 80139f6:	46a1      	mov	r9, r4
 80139f8:	45b0      	cmp	r8, r6
 80139fa:	daf7      	bge.n	80139ec <__kernel_rem_pio2+0x614>
 80139fc:	9b08      	ldr	r3, [sp, #32]
 80139fe:	0007      	movs	r7, r0
 8013a00:	000c      	movs	r4, r1
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d000      	beq.n	8013a08 <__kernel_rem_pio2+0x630>
 8013a06:	e115      	b.n	8013c34 <__kernel_rem_pio2+0x85c>
 8013a08:	003a      	movs	r2, r7
 8013a0a:	0023      	movs	r3, r4
 8013a0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013a0e:	608a      	str	r2, [r1, #8]
 8013a10:	60cb      	str	r3, [r1, #12]
 8013a12:	e7ab      	b.n	801396c <__kernel_rem_pio2+0x594>
 8013a14:	2600      	movs	r6, #0
 8013a16:	2700      	movs	r7, #0
 8013a18:	e773      	b.n	8013902 <__kernel_rem_pio2+0x52a>
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	469c      	mov	ip, r3
 8013a1e:	9b00      	ldr	r3, [sp, #0]
 8013a20:	44e1      	add	r9, ip
 8013a22:	2502      	movs	r5, #2
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	dd00      	ble.n	8013a2a <__kernel_rem_pio2+0x652>
 8013a28:	e5eb      	b.n	8013602 <__kernel_rem_pio2+0x22a>
 8013a2a:	0032      	movs	r2, r6
 8013a2c:	003b      	movs	r3, r7
 8013a2e:	2000      	movs	r0, #0
 8013a30:	492b      	ldr	r1, [pc, #172]	; (8013ae0 <__kernel_rem_pio2+0x708>)
 8013a32:	f7fa fff9 	bl	800ea28 <__aeabi_dsub>
 8013a36:	0006      	movs	r6, r0
 8013a38:	000f      	movs	r7, r1
 8013a3a:	e609      	b.n	8013650 <__kernel_rem_pio2+0x278>
 8013a3c:	2400      	movs	r4, #0
 8013a3e:	e5f2      	b.n	8013626 <__kernel_rem_pio2+0x24e>
 8013a40:	ab4a      	add	r3, sp, #296	; 0x128
 8013a42:	9303      	str	r3, [sp, #12]
 8013a44:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013a46:	2b03      	cmp	r3, #3
 8013a48:	d000      	beq.n	8013a4c <__kernel_rem_pio2+0x674>
 8013a4a:	e78f      	b.n	801396c <__kernel_rem_pio2+0x594>
 8013a4c:	4643      	mov	r3, r8
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	dc00      	bgt.n	8013a54 <__kernel_rem_pio2+0x67c>
 8013a52:	e114      	b.n	8013c7e <__kernel_rem_pio2+0x8a6>
 8013a54:	9a03      	ldr	r2, [sp, #12]
 8013a56:	00db      	lsls	r3, r3, #3
 8013a58:	469b      	mov	fp, r3
 8013a5a:	0013      	movs	r3, r2
 8013a5c:	4691      	mov	r9, r2
 8013a5e:	445b      	add	r3, fp
 8013a60:	681e      	ldr	r6, [r3, #0]
 8013a62:	685f      	ldr	r7, [r3, #4]
 8013a64:	4b23      	ldr	r3, [pc, #140]	; (8013af4 <__kernel_rem_pio2+0x71c>)
 8013a66:	4443      	add	r3, r8
 8013a68:	9302      	str	r3, [sp, #8]
 8013a6a:	00db      	lsls	r3, r3, #3
 8013a6c:	4499      	add	r9, r3
 8013a6e:	ab48      	add	r3, sp, #288	; 0x120
 8013a70:	469a      	mov	sl, r3
 8013a72:	464b      	mov	r3, r9
 8013a74:	685c      	ldr	r4, [r3, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	0018      	movs	r0, r3
 8013a7a:	0021      	movs	r1, r4
 8013a7c:	0032      	movs	r2, r6
 8013a7e:	003b      	movs	r3, r7
 8013a80:	9000      	str	r0, [sp, #0]
 8013a82:	9101      	str	r1, [sp, #4]
 8013a84:	f7f9 fe38 	bl	800d6f8 <__aeabi_dadd>
 8013a88:	0004      	movs	r4, r0
 8013a8a:	000d      	movs	r5, r1
 8013a8c:	0002      	movs	r2, r0
 8013a8e:	000b      	movs	r3, r1
 8013a90:	9800      	ldr	r0, [sp, #0]
 8013a92:	9901      	ldr	r1, [sp, #4]
 8013a94:	f7fa ffc8 	bl	800ea28 <__aeabi_dsub>
 8013a98:	003b      	movs	r3, r7
 8013a9a:	0032      	movs	r2, r6
 8013a9c:	f7f9 fe2c 	bl	800d6f8 <__aeabi_dadd>
 8013aa0:	464b      	mov	r3, r9
 8013aa2:	6098      	str	r0, [r3, #8]
 8013aa4:	60d9      	str	r1, [r3, #12]
 8013aa6:	601c      	str	r4, [r3, #0]
 8013aa8:	605d      	str	r5, [r3, #4]
 8013aaa:	2308      	movs	r3, #8
 8013aac:	425b      	negs	r3, r3
 8013aae:	469c      	mov	ip, r3
 8013ab0:	44e1      	add	r9, ip
 8013ab2:	0026      	movs	r6, r4
 8013ab4:	002f      	movs	r7, r5
 8013ab6:	45ca      	cmp	sl, r9
 8013ab8:	d1db      	bne.n	8013a72 <__kernel_rem_pio2+0x69a>
 8013aba:	4643      	mov	r3, r8
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	dc00      	bgt.n	8013ac2 <__kernel_rem_pio2+0x6ea>
 8013ac0:	e0e3      	b.n	8013c8a <__kernel_rem_pio2+0x8b2>
 8013ac2:	9a03      	ldr	r2, [sp, #12]
 8013ac4:	0013      	movs	r3, r2
 8013ac6:	445b      	add	r3, fp
 8013ac8:	681e      	ldr	r6, [r3, #0]
 8013aca:	685f      	ldr	r7, [r3, #4]
 8013acc:	9b02      	ldr	r3, [sp, #8]
 8013ace:	00db      	lsls	r3, r3, #3
 8013ad0:	4699      	mov	r9, r3
 8013ad2:	444a      	add	r2, r9
 8013ad4:	4690      	mov	r8, r2
 8013ad6:	e010      	b.n	8013afa <__kernel_rem_pio2+0x722>
 8013ad8:	00ffffff 	.word	0x00ffffff
 8013adc:	3fe00000 	.word	0x3fe00000
 8013ae0:	3ff00000 	.word	0x3ff00000
 8013ae4:	3fffffff 	.word	0x3fffffff
 8013ae8:	3e700000 	.word	0x3e700000
 8013aec:	0801d600 	.word	0x0801d600
 8013af0:	3ff921fb 	.word	0x3ff921fb
 8013af4:	1fffffff 	.word	0x1fffffff
 8013af8:	4698      	mov	r8, r3
 8013afa:	4643      	mov	r3, r8
 8013afc:	685c      	ldr	r4, [r3, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	0018      	movs	r0, r3
 8013b02:	0021      	movs	r1, r4
 8013b04:	0032      	movs	r2, r6
 8013b06:	003b      	movs	r3, r7
 8013b08:	9000      	str	r0, [sp, #0]
 8013b0a:	9101      	str	r1, [sp, #4]
 8013b0c:	f7f9 fdf4 	bl	800d6f8 <__aeabi_dadd>
 8013b10:	0004      	movs	r4, r0
 8013b12:	000d      	movs	r5, r1
 8013b14:	0002      	movs	r2, r0
 8013b16:	000b      	movs	r3, r1
 8013b18:	9800      	ldr	r0, [sp, #0]
 8013b1a:	9901      	ldr	r1, [sp, #4]
 8013b1c:	f7fa ff84 	bl	800ea28 <__aeabi_dsub>
 8013b20:	0032      	movs	r2, r6
 8013b22:	003b      	movs	r3, r7
 8013b24:	f7f9 fde8 	bl	800d6f8 <__aeabi_dadd>
 8013b28:	4643      	mov	r3, r8
 8013b2a:	9a03      	ldr	r2, [sp, #12]
 8013b2c:	6098      	str	r0, [r3, #8]
 8013b2e:	60d9      	str	r1, [r3, #12]
 8013b30:	601c      	str	r4, [r3, #0]
 8013b32:	605d      	str	r5, [r3, #4]
 8013b34:	3b08      	subs	r3, #8
 8013b36:	0026      	movs	r6, r4
 8013b38:	002f      	movs	r7, r5
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d1dc      	bne.n	8013af8 <__kernel_rem_pio2+0x720>
 8013b3e:	464d      	mov	r5, r9
 8013b40:	4694      	mov	ip, r2
 8013b42:	2600      	movs	r6, #0
 8013b44:	2400      	movs	r4, #0
 8013b46:	4647      	mov	r7, r8
 8013b48:	3508      	adds	r5, #8
 8013b4a:	4465      	add	r5, ip
 8013b4c:	682a      	ldr	r2, [r5, #0]
 8013b4e:	686b      	ldr	r3, [r5, #4]
 8013b50:	0030      	movs	r0, r6
 8013b52:	0021      	movs	r1, r4
 8013b54:	f7f9 fdd0 	bl	800d6f8 <__aeabi_dadd>
 8013b58:	3d08      	subs	r5, #8
 8013b5a:	0006      	movs	r6, r0
 8013b5c:	000c      	movs	r4, r1
 8013b5e:	42af      	cmp	r7, r5
 8013b60:	d1f4      	bne.n	8013b4c <__kernel_rem_pio2+0x774>
 8013b62:	9b03      	ldr	r3, [sp, #12]
 8013b64:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 8013b66:	685d      	ldr	r5, [r3, #4]
 8013b68:	6899      	ldr	r1, [r3, #8]
 8013b6a:	68d8      	ldr	r0, [r3, #12]
 8013b6c:	9b08      	ldr	r3, [sp, #32]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d065      	beq.n	8013c3e <__kernel_rem_pio2+0x866>
 8013b72:	2280      	movs	r2, #128	; 0x80
 8013b74:	0612      	lsls	r2, r2, #24
 8013b76:	4694      	mov	ip, r2
 8013b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b7a:	4465      	add	r5, ip
 8013b7c:	4460      	add	r0, ip
 8013b7e:	4464      	add	r4, ip
 8013b80:	601f      	str	r7, [r3, #0]
 8013b82:	605d      	str	r5, [r3, #4]
 8013b84:	6099      	str	r1, [r3, #8]
 8013b86:	60d8      	str	r0, [r3, #12]
 8013b88:	611e      	str	r6, [r3, #16]
 8013b8a:	615c      	str	r4, [r3, #20]
 8013b8c:	e6ee      	b.n	801396c <__kernel_rem_pio2+0x594>
 8013b8e:	469a      	mov	sl, r3
 8013b90:	464b      	mov	r3, r9
 8013b92:	9307      	str	r3, [sp, #28]
 8013b94:	9b05      	ldr	r3, [sp, #20]
 8013b96:	0030      	movs	r0, r6
 8013b98:	425a      	negs	r2, r3
 8013b9a:	0039      	movs	r1, r7
 8013b9c:	9508      	str	r5, [sp, #32]
 8013b9e:	f000 f9d5 	bl	8013f4c <scalbn>
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	4b3a      	ldr	r3, [pc, #232]	; (8013c90 <__kernel_rem_pio2+0x8b8>)
 8013ba6:	0006      	movs	r6, r0
 8013ba8:	000f      	movs	r7, r1
 8013baa:	f7f9 fae1 	bl	800d170 <__aeabi_dcmpge>
 8013bae:	2800      	cmp	r0, #0
 8013bb0:	d024      	beq.n	8013bfc <__kernel_rem_pio2+0x824>
 8013bb2:	4b38      	ldr	r3, [pc, #224]	; (8013c94 <__kernel_rem_pio2+0x8bc>)
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	0030      	movs	r0, r6
 8013bb8:	0039      	movs	r1, r7
 8013bba:	f7fa fcc3 	bl	800e544 <__aeabi_dmul>
 8013bbe:	f7fb fa97 	bl	800f0f0 <__aeabi_d2iz>
 8013bc2:	4652      	mov	r2, sl
 8013bc4:	0004      	movs	r4, r0
 8013bc6:	0095      	lsls	r5, r2, #2
 8013bc8:	f7fb fac8 	bl	800f15c <__aeabi_i2d>
 8013bcc:	2200      	movs	r2, #0
 8013bce:	4b30      	ldr	r3, [pc, #192]	; (8013c90 <__kernel_rem_pio2+0x8b8>)
 8013bd0:	f7fa fcb8 	bl	800e544 <__aeabi_dmul>
 8013bd4:	0002      	movs	r2, r0
 8013bd6:	000b      	movs	r3, r1
 8013bd8:	0030      	movs	r0, r6
 8013bda:	0039      	movs	r1, r7
 8013bdc:	f7fa ff24 	bl	800ea28 <__aeabi_dsub>
 8013be0:	f7fb fa86 	bl	800f0f0 <__aeabi_d2iz>
 8013be4:	aa0e      	add	r2, sp, #56	; 0x38
 8013be6:	5150      	str	r0, [r2, r5]
 8013be8:	2201      	movs	r2, #1
 8013bea:	9b05      	ldr	r3, [sp, #20]
 8013bec:	4452      	add	r2, sl
 8013bee:	3318      	adds	r3, #24
 8013bf0:	4690      	mov	r8, r2
 8013bf2:	9305      	str	r3, [sp, #20]
 8013bf4:	0093      	lsls	r3, r2, #2
 8013bf6:	aa0e      	add	r2, sp, #56	; 0x38
 8013bf8:	50d4      	str	r4, [r2, r3]
 8013bfa:	e623      	b.n	8013844 <__kernel_rem_pio2+0x46c>
 8013bfc:	4653      	mov	r3, sl
 8013bfe:	0030      	movs	r0, r6
 8013c00:	0039      	movs	r1, r7
 8013c02:	009c      	lsls	r4, r3, #2
 8013c04:	f7fb fa74 	bl	800f0f0 <__aeabi_d2iz>
 8013c08:	ab0e      	add	r3, sp, #56	; 0x38
 8013c0a:	5118      	str	r0, [r3, r4]
 8013c0c:	46d0      	mov	r8, sl
 8013c0e:	e619      	b.n	8013844 <__kernel_rem_pio2+0x46c>
 8013c10:	2380      	movs	r3, #128	; 0x80
 8013c12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c14:	061b      	lsls	r3, r3, #24
 8013c16:	18cb      	adds	r3, r1, r3
 8013c18:	6010      	str	r0, [r2, #0]
 8013c1a:	6053      	str	r3, [r2, #4]
 8013c1c:	000b      	movs	r3, r1
 8013c1e:	0002      	movs	r2, r0
 8013c20:	984a      	ldr	r0, [sp, #296]	; 0x128
 8013c22:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8013c24:	f7fa ff00 	bl	800ea28 <__aeabi_dsub>
 8013c28:	4643      	mov	r3, r8
 8013c2a:	0007      	movs	r7, r0
 8013c2c:	000c      	movs	r4, r1
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	dd00      	ble.n	8013c34 <__kernel_rem_pio2+0x85c>
 8013c32:	e6d5      	b.n	80139e0 <__kernel_rem_pio2+0x608>
 8013c34:	2380      	movs	r3, #128	; 0x80
 8013c36:	061b      	lsls	r3, r3, #24
 8013c38:	469c      	mov	ip, r3
 8013c3a:	4464      	add	r4, ip
 8013c3c:	e6e4      	b.n	8013a08 <__kernel_rem_pio2+0x630>
 8013c3e:	002b      	movs	r3, r5
 8013c40:	003a      	movs	r2, r7
 8013c42:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013c44:	602a      	str	r2, [r5, #0]
 8013c46:	606b      	str	r3, [r5, #4]
 8013c48:	000a      	movs	r2, r1
 8013c4a:	0003      	movs	r3, r0
 8013c4c:	60aa      	str	r2, [r5, #8]
 8013c4e:	60eb      	str	r3, [r5, #12]
 8013c50:	0032      	movs	r2, r6
 8013c52:	0023      	movs	r3, r4
 8013c54:	612a      	str	r2, [r5, #16]
 8013c56:	616b      	str	r3, [r5, #20]
 8013c58:	e688      	b.n	801396c <__kernel_rem_pio2+0x594>
 8013c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c5c:	00db      	lsls	r3, r3, #3
 8013c5e:	9300      	str	r3, [sp, #0]
 8013c60:	ab72      	add	r3, sp, #456	; 0x1c8
 8013c62:	9304      	str	r3, [sp, #16]
 8013c64:	e432      	b.n	80134cc <__kernel_rem_pio2+0xf4>
 8013c66:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013c68:	2b02      	cmp	r3, #2
 8013c6a:	dd00      	ble.n	8013c6e <__kernel_rem_pio2+0x896>
 8013c6c:	e6e8      	b.n	8013a40 <__kernel_rem_pio2+0x668>
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	dd00      	ble.n	8013c74 <__kernel_rem_pio2+0x89c>
 8013c72:	e692      	b.n	801399a <__kernel_rem_pio2+0x5c2>
 8013c74:	d000      	beq.n	8013c78 <__kernel_rem_pio2+0x8a0>
 8013c76:	e679      	b.n	801396c <__kernel_rem_pio2+0x594>
 8013c78:	2700      	movs	r7, #0
 8013c7a:	2400      	movs	r4, #0
 8013c7c:	e66a      	b.n	8013954 <__kernel_rem_pio2+0x57c>
 8013c7e:	2600      	movs	r6, #0
 8013c80:	2400      	movs	r4, #0
 8013c82:	e76e      	b.n	8013b62 <__kernel_rem_pio2+0x78a>
 8013c84:	2000      	movs	r0, #0
 8013c86:	2100      	movs	r1, #0
 8013c88:	e698      	b.n	80139bc <__kernel_rem_pio2+0x5e4>
 8013c8a:	2600      	movs	r6, #0
 8013c8c:	0034      	movs	r4, r6
 8013c8e:	e768      	b.n	8013b62 <__kernel_rem_pio2+0x78a>
 8013c90:	41700000 	.word	0x41700000
 8013c94:	3e700000 	.word	0x3e700000

08013c98 <__kernel_sin>:
 8013c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c9a:	46ce      	mov	lr, r9
 8013c9c:	4647      	mov	r7, r8
 8013c9e:	b580      	push	{r7, lr}
 8013ca0:	b087      	sub	sp, #28
 8013ca2:	9200      	str	r2, [sp, #0]
 8013ca4:	9301      	str	r3, [sp, #4]
 8013ca6:	4a47      	ldr	r2, [pc, #284]	; (8013dc4 <__kernel_sin+0x12c>)
 8013ca8:	004b      	lsls	r3, r1, #1
 8013caa:	4681      	mov	r9, r0
 8013cac:	4688      	mov	r8, r1
 8013cae:	085b      	lsrs	r3, r3, #1
 8013cb0:	4293      	cmp	r3, r2
 8013cb2:	dc07      	bgt.n	8013cc4 <__kernel_sin+0x2c>
 8013cb4:	4641      	mov	r1, r8
 8013cb6:	4648      	mov	r0, r9
 8013cb8:	f7fb fa1a 	bl	800f0f0 <__aeabi_d2iz>
 8013cbc:	4641      	mov	r1, r8
 8013cbe:	1e03      	subs	r3, r0, #0
 8013cc0:	4648      	mov	r0, r9
 8013cc2:	d066      	beq.n	8013d92 <__kernel_sin+0xfa>
 8013cc4:	464a      	mov	r2, r9
 8013cc6:	4643      	mov	r3, r8
 8013cc8:	4648      	mov	r0, r9
 8013cca:	4641      	mov	r1, r8
 8013ccc:	f7fa fc3a 	bl	800e544 <__aeabi_dmul>
 8013cd0:	0004      	movs	r4, r0
 8013cd2:	000d      	movs	r5, r1
 8013cd4:	0002      	movs	r2, r0
 8013cd6:	000b      	movs	r3, r1
 8013cd8:	4648      	mov	r0, r9
 8013cda:	4641      	mov	r1, r8
 8013cdc:	f7fa fc32 	bl	800e544 <__aeabi_dmul>
 8013ce0:	4a39      	ldr	r2, [pc, #228]	; (8013dc8 <__kernel_sin+0x130>)
 8013ce2:	4b3a      	ldr	r3, [pc, #232]	; (8013dcc <__kernel_sin+0x134>)
 8013ce4:	0006      	movs	r6, r0
 8013ce6:	000f      	movs	r7, r1
 8013ce8:	0020      	movs	r0, r4
 8013cea:	0029      	movs	r1, r5
 8013cec:	f7fa fc2a 	bl	800e544 <__aeabi_dmul>
 8013cf0:	4a37      	ldr	r2, [pc, #220]	; (8013dd0 <__kernel_sin+0x138>)
 8013cf2:	4b38      	ldr	r3, [pc, #224]	; (8013dd4 <__kernel_sin+0x13c>)
 8013cf4:	f7fa fe98 	bl	800ea28 <__aeabi_dsub>
 8013cf8:	0022      	movs	r2, r4
 8013cfa:	002b      	movs	r3, r5
 8013cfc:	f7fa fc22 	bl	800e544 <__aeabi_dmul>
 8013d00:	4a35      	ldr	r2, [pc, #212]	; (8013dd8 <__kernel_sin+0x140>)
 8013d02:	4b36      	ldr	r3, [pc, #216]	; (8013ddc <__kernel_sin+0x144>)
 8013d04:	f7f9 fcf8 	bl	800d6f8 <__aeabi_dadd>
 8013d08:	0022      	movs	r2, r4
 8013d0a:	002b      	movs	r3, r5
 8013d0c:	f7fa fc1a 	bl	800e544 <__aeabi_dmul>
 8013d10:	4a33      	ldr	r2, [pc, #204]	; (8013de0 <__kernel_sin+0x148>)
 8013d12:	4b34      	ldr	r3, [pc, #208]	; (8013de4 <__kernel_sin+0x14c>)
 8013d14:	f7fa fe88 	bl	800ea28 <__aeabi_dsub>
 8013d18:	0022      	movs	r2, r4
 8013d1a:	002b      	movs	r3, r5
 8013d1c:	f7fa fc12 	bl	800e544 <__aeabi_dmul>
 8013d20:	4b31      	ldr	r3, [pc, #196]	; (8013de8 <__kernel_sin+0x150>)
 8013d22:	4a32      	ldr	r2, [pc, #200]	; (8013dec <__kernel_sin+0x154>)
 8013d24:	f7f9 fce8 	bl	800d6f8 <__aeabi_dadd>
 8013d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d2a:	9002      	str	r0, [sp, #8]
 8013d2c:	9103      	str	r1, [sp, #12]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d034      	beq.n	8013d9c <__kernel_sin+0x104>
 8013d32:	9800      	ldr	r0, [sp, #0]
 8013d34:	9901      	ldr	r1, [sp, #4]
 8013d36:	2200      	movs	r2, #0
 8013d38:	4b2d      	ldr	r3, [pc, #180]	; (8013df0 <__kernel_sin+0x158>)
 8013d3a:	f7fa fc03 	bl	800e544 <__aeabi_dmul>
 8013d3e:	9a02      	ldr	r2, [sp, #8]
 8013d40:	9b03      	ldr	r3, [sp, #12]
 8013d42:	9004      	str	r0, [sp, #16]
 8013d44:	9105      	str	r1, [sp, #20]
 8013d46:	0030      	movs	r0, r6
 8013d48:	0039      	movs	r1, r7
 8013d4a:	f7fa fbfb 	bl	800e544 <__aeabi_dmul>
 8013d4e:	0002      	movs	r2, r0
 8013d50:	000b      	movs	r3, r1
 8013d52:	9804      	ldr	r0, [sp, #16]
 8013d54:	9905      	ldr	r1, [sp, #20]
 8013d56:	f7fa fe67 	bl	800ea28 <__aeabi_dsub>
 8013d5a:	0022      	movs	r2, r4
 8013d5c:	002b      	movs	r3, r5
 8013d5e:	f7fa fbf1 	bl	800e544 <__aeabi_dmul>
 8013d62:	9a00      	ldr	r2, [sp, #0]
 8013d64:	9b01      	ldr	r3, [sp, #4]
 8013d66:	f7fa fe5f 	bl	800ea28 <__aeabi_dsub>
 8013d6a:	4a22      	ldr	r2, [pc, #136]	; (8013df4 <__kernel_sin+0x15c>)
 8013d6c:	0004      	movs	r4, r0
 8013d6e:	000d      	movs	r5, r1
 8013d70:	4b21      	ldr	r3, [pc, #132]	; (8013df8 <__kernel_sin+0x160>)
 8013d72:	0030      	movs	r0, r6
 8013d74:	0039      	movs	r1, r7
 8013d76:	f7fa fbe5 	bl	800e544 <__aeabi_dmul>
 8013d7a:	0002      	movs	r2, r0
 8013d7c:	000b      	movs	r3, r1
 8013d7e:	0020      	movs	r0, r4
 8013d80:	0029      	movs	r1, r5
 8013d82:	f7f9 fcb9 	bl	800d6f8 <__aeabi_dadd>
 8013d86:	0002      	movs	r2, r0
 8013d88:	000b      	movs	r3, r1
 8013d8a:	4648      	mov	r0, r9
 8013d8c:	4641      	mov	r1, r8
 8013d8e:	f7fa fe4b 	bl	800ea28 <__aeabi_dsub>
 8013d92:	b007      	add	sp, #28
 8013d94:	bc0c      	pop	{r2, r3}
 8013d96:	4690      	mov	r8, r2
 8013d98:	4699      	mov	r9, r3
 8013d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d9c:	0002      	movs	r2, r0
 8013d9e:	000b      	movs	r3, r1
 8013da0:	0020      	movs	r0, r4
 8013da2:	0029      	movs	r1, r5
 8013da4:	f7fa fbce 	bl	800e544 <__aeabi_dmul>
 8013da8:	4a12      	ldr	r2, [pc, #72]	; (8013df4 <__kernel_sin+0x15c>)
 8013daa:	4b13      	ldr	r3, [pc, #76]	; (8013df8 <__kernel_sin+0x160>)
 8013dac:	f7fa fe3c 	bl	800ea28 <__aeabi_dsub>
 8013db0:	0032      	movs	r2, r6
 8013db2:	003b      	movs	r3, r7
 8013db4:	f7fa fbc6 	bl	800e544 <__aeabi_dmul>
 8013db8:	464a      	mov	r2, r9
 8013dba:	4643      	mov	r3, r8
 8013dbc:	f7f9 fc9c 	bl	800d6f8 <__aeabi_dadd>
 8013dc0:	e7e7      	b.n	8013d92 <__kernel_sin+0xfa>
 8013dc2:	46c0      	nop			; (mov r8, r8)
 8013dc4:	3e3fffff 	.word	0x3e3fffff
 8013dc8:	5acfd57c 	.word	0x5acfd57c
 8013dcc:	3de5d93a 	.word	0x3de5d93a
 8013dd0:	8a2b9ceb 	.word	0x8a2b9ceb
 8013dd4:	3e5ae5e6 	.word	0x3e5ae5e6
 8013dd8:	57b1fe7d 	.word	0x57b1fe7d
 8013ddc:	3ec71de3 	.word	0x3ec71de3
 8013de0:	19c161d5 	.word	0x19c161d5
 8013de4:	3f2a01a0 	.word	0x3f2a01a0
 8013de8:	3f811111 	.word	0x3f811111
 8013dec:	1110f8a6 	.word	0x1110f8a6
 8013df0:	3fe00000 	.word	0x3fe00000
 8013df4:	55555549 	.word	0x55555549
 8013df8:	3fc55555 	.word	0x3fc55555

08013dfc <fabs>:
 8013dfc:	0049      	lsls	r1, r1, #1
 8013dfe:	084b      	lsrs	r3, r1, #1
 8013e00:	0019      	movs	r1, r3
 8013e02:	4770      	bx	lr

08013e04 <floor>:
 8013e04:	4a47      	ldr	r2, [pc, #284]	; (8013f24 <floor+0x120>)
 8013e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e08:	464f      	mov	r7, r9
 8013e0a:	4691      	mov	r9, r2
 8013e0c:	004b      	lsls	r3, r1, #1
 8013e0e:	0d5b      	lsrs	r3, r3, #21
 8013e10:	4499      	add	r9, r3
 8013e12:	4646      	mov	r6, r8
 8013e14:	46d6      	mov	lr, sl
 8013e16:	464a      	mov	r2, r9
 8013e18:	b5c0      	push	{r6, r7, lr}
 8013e1a:	0005      	movs	r5, r0
 8013e1c:	000c      	movs	r4, r1
 8013e1e:	000e      	movs	r6, r1
 8013e20:	4688      	mov	r8, r1
 8013e22:	0007      	movs	r7, r0
 8013e24:	2a13      	cmp	r2, #19
 8013e26:	dc27      	bgt.n	8013e78 <floor+0x74>
 8013e28:	2a00      	cmp	r2, #0
 8013e2a:	db4b      	blt.n	8013ec4 <floor+0xc0>
 8013e2c:	4b3e      	ldr	r3, [pc, #248]	; (8013f28 <floor+0x124>)
 8013e2e:	4113      	asrs	r3, r2
 8013e30:	469a      	mov	sl, r3
 8013e32:	000b      	movs	r3, r1
 8013e34:	4652      	mov	r2, sl
 8013e36:	4013      	ands	r3, r2
 8013e38:	4303      	orrs	r3, r0
 8013e3a:	d018      	beq.n	8013e6e <floor+0x6a>
 8013e3c:	4a3b      	ldr	r2, [pc, #236]	; (8013f2c <floor+0x128>)
 8013e3e:	4b3c      	ldr	r3, [pc, #240]	; (8013f30 <floor+0x12c>)
 8013e40:	0028      	movs	r0, r5
 8013e42:	0021      	movs	r1, r4
 8013e44:	f7f9 fc58 	bl	800d6f8 <__aeabi_dadd>
 8013e48:	2200      	movs	r2, #0
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	f7f9 f986 	bl	800d15c <__aeabi_dcmpgt>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d047      	beq.n	8013ee4 <floor+0xe0>
 8013e54:	2c00      	cmp	r4, #0
 8013e56:	da04      	bge.n	8013e62 <floor+0x5e>
 8013e58:	2380      	movs	r3, #128	; 0x80
 8013e5a:	464a      	mov	r2, r9
 8013e5c:	035b      	lsls	r3, r3, #13
 8013e5e:	4113      	asrs	r3, r2
 8013e60:	4498      	add	r8, r3
 8013e62:	4646      	mov	r6, r8
 8013e64:	4653      	mov	r3, sl
 8013e66:	2700      	movs	r7, #0
 8013e68:	439e      	bics	r6, r3
 8013e6a:	0038      	movs	r0, r7
 8013e6c:	0031      	movs	r1, r6
 8013e6e:	bc1c      	pop	{r2, r3, r4}
 8013e70:	4690      	mov	r8, r2
 8013e72:	4699      	mov	r9, r3
 8013e74:	46a2      	mov	sl, r4
 8013e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e78:	2a33      	cmp	r2, #51	; 0x33
 8013e7a:	dd08      	ble.n	8013e8e <floor+0x8a>
 8013e7c:	2380      	movs	r3, #128	; 0x80
 8013e7e:	00db      	lsls	r3, r3, #3
 8013e80:	4599      	cmp	r9, r3
 8013e82:	d1f4      	bne.n	8013e6e <floor+0x6a>
 8013e84:	0002      	movs	r2, r0
 8013e86:	000b      	movs	r3, r1
 8013e88:	f7f9 fc36 	bl	800d6f8 <__aeabi_dadd>
 8013e8c:	e7ef      	b.n	8013e6e <floor+0x6a>
 8013e8e:	4a29      	ldr	r2, [pc, #164]	; (8013f34 <floor+0x130>)
 8013e90:	4694      	mov	ip, r2
 8013e92:	2201      	movs	r2, #1
 8013e94:	4463      	add	r3, ip
 8013e96:	4252      	negs	r2, r2
 8013e98:	40da      	lsrs	r2, r3
 8013e9a:	4692      	mov	sl, r2
 8013e9c:	4202      	tst	r2, r0
 8013e9e:	d0e6      	beq.n	8013e6e <floor+0x6a>
 8013ea0:	4a22      	ldr	r2, [pc, #136]	; (8013f2c <floor+0x128>)
 8013ea2:	4b23      	ldr	r3, [pc, #140]	; (8013f30 <floor+0x12c>)
 8013ea4:	0028      	movs	r0, r5
 8013ea6:	0021      	movs	r1, r4
 8013ea8:	f7f9 fc26 	bl	800d6f8 <__aeabi_dadd>
 8013eac:	2200      	movs	r2, #0
 8013eae:	2300      	movs	r3, #0
 8013eb0:	f7f9 f954 	bl	800d15c <__aeabi_dcmpgt>
 8013eb4:	2800      	cmp	r0, #0
 8013eb6:	d015      	beq.n	8013ee4 <floor+0xe0>
 8013eb8:	2c00      	cmp	r4, #0
 8013eba:	db1e      	blt.n	8013efa <floor+0xf6>
 8013ebc:	4653      	mov	r3, sl
 8013ebe:	4646      	mov	r6, r8
 8013ec0:	439f      	bics	r7, r3
 8013ec2:	e00f      	b.n	8013ee4 <floor+0xe0>
 8013ec4:	4a19      	ldr	r2, [pc, #100]	; (8013f2c <floor+0x128>)
 8013ec6:	4b1a      	ldr	r3, [pc, #104]	; (8013f30 <floor+0x12c>)
 8013ec8:	0028      	movs	r0, r5
 8013eca:	0021      	movs	r1, r4
 8013ecc:	f7f9 fc14 	bl	800d6f8 <__aeabi_dadd>
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	f7f9 f942 	bl	800d15c <__aeabi_dcmpgt>
 8013ed8:	2800      	cmp	r0, #0
 8013eda:	d003      	beq.n	8013ee4 <floor+0xe0>
 8013edc:	2c00      	cmp	r4, #0
 8013ede:	db04      	blt.n	8013eea <floor+0xe6>
 8013ee0:	2700      	movs	r7, #0
 8013ee2:	2600      	movs	r6, #0
 8013ee4:	0038      	movs	r0, r7
 8013ee6:	0031      	movs	r1, r6
 8013ee8:	e7c1      	b.n	8013e6e <floor+0x6a>
 8013eea:	0064      	lsls	r4, r4, #1
 8013eec:	0864      	lsrs	r4, r4, #1
 8013eee:	4325      	orrs	r5, r4
 8013ef0:	2700      	movs	r7, #0
 8013ef2:	2d00      	cmp	r5, #0
 8013ef4:	d0f6      	beq.n	8013ee4 <floor+0xe0>
 8013ef6:	4e10      	ldr	r6, [pc, #64]	; (8013f38 <floor+0x134>)
 8013ef8:	e7f4      	b.n	8013ee4 <floor+0xe0>
 8013efa:	464b      	mov	r3, r9
 8013efc:	2b14      	cmp	r3, #20
 8013efe:	d00b      	beq.n	8013f18 <floor+0x114>
 8013f00:	2234      	movs	r2, #52	; 0x34
 8013f02:	1ad2      	subs	r2, r2, r3
 8013f04:	2301      	movs	r3, #1
 8013f06:	4093      	lsls	r3, r2
 8013f08:	195d      	adds	r5, r3, r5
 8013f0a:	42bd      	cmp	r5, r7
 8013f0c:	d208      	bcs.n	8013f20 <floor+0x11c>
 8013f0e:	2301      	movs	r3, #1
 8013f10:	469c      	mov	ip, r3
 8013f12:	002f      	movs	r7, r5
 8013f14:	44e0      	add	r8, ip
 8013f16:	e7d1      	b.n	8013ebc <floor+0xb8>
 8013f18:	3b13      	subs	r3, #19
 8013f1a:	469c      	mov	ip, r3
 8013f1c:	44e0      	add	r8, ip
 8013f1e:	e7cd      	b.n	8013ebc <floor+0xb8>
 8013f20:	002f      	movs	r7, r5
 8013f22:	e7cb      	b.n	8013ebc <floor+0xb8>
 8013f24:	fffffc01 	.word	0xfffffc01
 8013f28:	000fffff 	.word	0x000fffff
 8013f2c:	8800759c 	.word	0x8800759c
 8013f30:	7e37e43c 	.word	0x7e37e43c
 8013f34:	fffffbed 	.word	0xfffffbed
 8013f38:	bff00000 	.word	0xbff00000

08013f3c <matherr>:
 8013f3c:	2000      	movs	r0, #0
 8013f3e:	4770      	bx	lr

08013f40 <nan>:
 8013f40:	2000      	movs	r0, #0
 8013f42:	4901      	ldr	r1, [pc, #4]	; (8013f48 <nan+0x8>)
 8013f44:	4770      	bx	lr
 8013f46:	46c0      	nop			; (mov r8, r8)
 8013f48:	7ff80000 	.word	0x7ff80000

08013f4c <scalbn>:
 8013f4c:	004b      	lsls	r3, r1, #1
 8013f4e:	b570      	push	{r4, r5, r6, lr}
 8013f50:	0d5b      	lsrs	r3, r3, #21
 8013f52:	0014      	movs	r4, r2
 8013f54:	000a      	movs	r2, r1
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d11a      	bne.n	8013f90 <scalbn+0x44>
 8013f5a:	004b      	lsls	r3, r1, #1
 8013f5c:	085b      	lsrs	r3, r3, #1
 8013f5e:	4303      	orrs	r3, r0
 8013f60:	d015      	beq.n	8013f8e <scalbn+0x42>
 8013f62:	4b23      	ldr	r3, [pc, #140]	; (8013ff0 <scalbn+0xa4>)
 8013f64:	2200      	movs	r2, #0
 8013f66:	f7fa faed 	bl	800e544 <__aeabi_dmul>
 8013f6a:	4b22      	ldr	r3, [pc, #136]	; (8013ff4 <scalbn+0xa8>)
 8013f6c:	429c      	cmp	r4, r3
 8013f6e:	db2d      	blt.n	8013fcc <scalbn+0x80>
 8013f70:	000a      	movs	r2, r1
 8013f72:	004b      	lsls	r3, r1, #1
 8013f74:	0d5b      	lsrs	r3, r3, #21
 8013f76:	3b36      	subs	r3, #54	; 0x36
 8013f78:	4d1f      	ldr	r5, [pc, #124]	; (8013ff8 <scalbn+0xac>)
 8013f7a:	18e3      	adds	r3, r4, r3
 8013f7c:	42ab      	cmp	r3, r5
 8013f7e:	dc2a      	bgt.n	8013fd6 <scalbn+0x8a>
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	dd0d      	ble.n	8013fa0 <scalbn+0x54>
 8013f84:	4c1d      	ldr	r4, [pc, #116]	; (8013ffc <scalbn+0xb0>)
 8013f86:	051b      	lsls	r3, r3, #20
 8013f88:	4022      	ands	r2, r4
 8013f8a:	431a      	orrs	r2, r3
 8013f8c:	0011      	movs	r1, r2
 8013f8e:	bd70      	pop	{r4, r5, r6, pc}
 8013f90:	4d1b      	ldr	r5, [pc, #108]	; (8014000 <scalbn+0xb4>)
 8013f92:	42ab      	cmp	r3, r5
 8013f94:	d1f0      	bne.n	8013f78 <scalbn+0x2c>
 8013f96:	0002      	movs	r2, r0
 8013f98:	000b      	movs	r3, r1
 8013f9a:	f7f9 fbad 	bl	800d6f8 <__aeabi_dadd>
 8013f9e:	e7f6      	b.n	8013f8e <scalbn+0x42>
 8013fa0:	001d      	movs	r5, r3
 8013fa2:	3535      	adds	r5, #53	; 0x35
 8013fa4:	da19      	bge.n	8013fda <scalbn+0x8e>
 8013fa6:	4b17      	ldr	r3, [pc, #92]	; (8014004 <scalbn+0xb8>)
 8013fa8:	0002      	movs	r2, r0
 8013faa:	429c      	cmp	r4, r3
 8013fac:	dd09      	ble.n	8013fc2 <scalbn+0x76>
 8013fae:	000b      	movs	r3, r1
 8013fb0:	4815      	ldr	r0, [pc, #84]	; (8014008 <scalbn+0xbc>)
 8013fb2:	4916      	ldr	r1, [pc, #88]	; (801400c <scalbn+0xc0>)
 8013fb4:	f000 f982 	bl	80142bc <copysign>
 8013fb8:	4a13      	ldr	r2, [pc, #76]	; (8014008 <scalbn+0xbc>)
 8013fba:	4b14      	ldr	r3, [pc, #80]	; (801400c <scalbn+0xc0>)
 8013fbc:	f7fa fac2 	bl	800e544 <__aeabi_dmul>
 8013fc0:	e7e5      	b.n	8013f8e <scalbn+0x42>
 8013fc2:	000b      	movs	r3, r1
 8013fc4:	4812      	ldr	r0, [pc, #72]	; (8014010 <scalbn+0xc4>)
 8013fc6:	4913      	ldr	r1, [pc, #76]	; (8014014 <scalbn+0xc8>)
 8013fc8:	f000 f978 	bl	80142bc <copysign>
 8013fcc:	4a10      	ldr	r2, [pc, #64]	; (8014010 <scalbn+0xc4>)
 8013fce:	4b11      	ldr	r3, [pc, #68]	; (8014014 <scalbn+0xc8>)
 8013fd0:	f7fa fab8 	bl	800e544 <__aeabi_dmul>
 8013fd4:	e7db      	b.n	8013f8e <scalbn+0x42>
 8013fd6:	0002      	movs	r2, r0
 8013fd8:	e7e9      	b.n	8013fae <scalbn+0x62>
 8013fda:	4c08      	ldr	r4, [pc, #32]	; (8013ffc <scalbn+0xb0>)
 8013fdc:	3336      	adds	r3, #54	; 0x36
 8013fde:	4022      	ands	r2, r4
 8013fe0:	051b      	lsls	r3, r3, #20
 8013fe2:	4313      	orrs	r3, r2
 8013fe4:	0019      	movs	r1, r3
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	4b0b      	ldr	r3, [pc, #44]	; (8014018 <scalbn+0xcc>)
 8013fea:	f7fa faab 	bl	800e544 <__aeabi_dmul>
 8013fee:	e7ce      	b.n	8013f8e <scalbn+0x42>
 8013ff0:	43500000 	.word	0x43500000
 8013ff4:	ffff3cb0 	.word	0xffff3cb0
 8013ff8:	000007fe 	.word	0x000007fe
 8013ffc:	800fffff 	.word	0x800fffff
 8014000:	000007ff 	.word	0x000007ff
 8014004:	0000c350 	.word	0x0000c350
 8014008:	8800759c 	.word	0x8800759c
 801400c:	7e37e43c 	.word	0x7e37e43c
 8014010:	c2f8f359 	.word	0xc2f8f359
 8014014:	01a56e1f 	.word	0x01a56e1f
 8014018:	3c900000 	.word	0x3c900000

0801401c <finitef>:
 801401c:	0043      	lsls	r3, r0, #1
 801401e:	2000      	movs	r0, #0
 8014020:	4a02      	ldr	r2, [pc, #8]	; (801402c <finitef+0x10>)
 8014022:	085b      	lsrs	r3, r3, #1
 8014024:	429a      	cmp	r2, r3
 8014026:	4140      	adcs	r0, r0
 8014028:	4770      	bx	lr
 801402a:	46c0      	nop			; (mov r8, r8)
 801402c:	7f7fffff 	.word	0x7f7fffff

08014030 <__ieee754_logf>:
 8014030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014032:	46de      	mov	lr, fp
 8014034:	4657      	mov	r7, sl
 8014036:	464e      	mov	r6, r9
 8014038:	4645      	mov	r5, r8
 801403a:	0003      	movs	r3, r0
 801403c:	b5e0      	push	{r5, r6, r7, lr}
 801403e:	0042      	lsls	r2, r0, #1
 8014040:	d044      	beq.n	80140cc <__ieee754_logf+0x9c>
 8014042:	2800      	cmp	r0, #0
 8014044:	db4d      	blt.n	80140e2 <__ieee754_logf+0xb2>
 8014046:	4a8e      	ldr	r2, [pc, #568]	; (8014280 <__ieee754_logf+0x250>)
 8014048:	4290      	cmp	r0, r2
 801404a:	dc51      	bgt.n	80140f0 <__ieee754_logf+0xc0>
 801404c:	4a8d      	ldr	r2, [pc, #564]	; (8014284 <__ieee754_logf+0x254>)
 801404e:	2100      	movs	r1, #0
 8014050:	4290      	cmp	r0, r2
 8014052:	dc06      	bgt.n	8014062 <__ieee754_logf+0x32>
 8014054:	2198      	movs	r1, #152	; 0x98
 8014056:	05c9      	lsls	r1, r1, #23
 8014058:	f7f8 fbae 	bl	800c7b8 <__aeabi_fmul>
 801405c:	2119      	movs	r1, #25
 801405e:	0003      	movs	r3, r0
 8014060:	4249      	negs	r1, r1
 8014062:	15da      	asrs	r2, r3, #23
 8014064:	025b      	lsls	r3, r3, #9
 8014066:	0a5c      	lsrs	r4, r3, #9
 8014068:	4b87      	ldr	r3, [pc, #540]	; (8014288 <__ieee754_logf+0x258>)
 801406a:	3a7f      	subs	r2, #127	; 0x7f
 801406c:	18e0      	adds	r0, r4, r3
 801406e:	2380      	movs	r3, #128	; 0x80
 8014070:	041b      	lsls	r3, r3, #16
 8014072:	4003      	ands	r3, r0
 8014074:	20fe      	movs	r0, #254	; 0xfe
 8014076:	1852      	adds	r2, r2, r1
 8014078:	21fe      	movs	r1, #254	; 0xfe
 801407a:	0580      	lsls	r0, r0, #22
 801407c:	4058      	eors	r0, r3
 801407e:	15dd      	asrs	r5, r3, #23
 8014080:	4320      	orrs	r0, r4
 8014082:	0589      	lsls	r1, r1, #22
 8014084:	18ad      	adds	r5, r5, r2
 8014086:	f7f8 fcc9 	bl	800ca1c <__aeabi_fsub>
 801408a:	0023      	movs	r3, r4
 801408c:	330f      	adds	r3, #15
 801408e:	025b      	lsls	r3, r3, #9
 8014090:	1c06      	adds	r6, r0, #0
 8014092:	0a5b      	lsrs	r3, r3, #9
 8014094:	2b0f      	cmp	r3, #15
 8014096:	dc2f      	bgt.n	80140f8 <__ieee754_logf+0xc8>
 8014098:	2100      	movs	r1, #0
 801409a:	f7f9 f87f 	bl	800d19c <__aeabi_fcmpeq>
 801409e:	2800      	cmp	r0, #0
 80140a0:	d100      	bne.n	80140a4 <__ieee754_logf+0x74>
 80140a2:	e09e      	b.n	80141e2 <__ieee754_logf+0x1b2>
 80140a4:	2000      	movs	r0, #0
 80140a6:	2d00      	cmp	r5, #0
 80140a8:	d015      	beq.n	80140d6 <__ieee754_logf+0xa6>
 80140aa:	0028      	movs	r0, r5
 80140ac:	f7f9 fa9a 	bl	800d5e4 <__aeabi_i2f>
 80140b0:	4976      	ldr	r1, [pc, #472]	; (801428c <__ieee754_logf+0x25c>)
 80140b2:	1c04      	adds	r4, r0, #0
 80140b4:	f7f8 fb80 	bl	800c7b8 <__aeabi_fmul>
 80140b8:	4975      	ldr	r1, [pc, #468]	; (8014290 <__ieee754_logf+0x260>)
 80140ba:	1c05      	adds	r5, r0, #0
 80140bc:	1c20      	adds	r0, r4, #0
 80140be:	f7f8 fb7b 	bl	800c7b8 <__aeabi_fmul>
 80140c2:	1c01      	adds	r1, r0, #0
 80140c4:	1c28      	adds	r0, r5, #0
 80140c6:	f7f8 f8cb 	bl	800c260 <__aeabi_fadd>
 80140ca:	e004      	b.n	80140d6 <__ieee754_logf+0xa6>
 80140cc:	20cc      	movs	r0, #204	; 0xcc
 80140ce:	2100      	movs	r1, #0
 80140d0:	0600      	lsls	r0, r0, #24
 80140d2:	f7f8 fa5f 	bl	800c594 <__aeabi_fdiv>
 80140d6:	bc3c      	pop	{r2, r3, r4, r5}
 80140d8:	4690      	mov	r8, r2
 80140da:	4699      	mov	r9, r3
 80140dc:	46a2      	mov	sl, r4
 80140de:	46ab      	mov	fp, r5
 80140e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140e2:	1c01      	adds	r1, r0, #0
 80140e4:	f7f8 fc9a 	bl	800ca1c <__aeabi_fsub>
 80140e8:	2100      	movs	r1, #0
 80140ea:	f7f8 fa53 	bl	800c594 <__aeabi_fdiv>
 80140ee:	e7f2      	b.n	80140d6 <__ieee754_logf+0xa6>
 80140f0:	1c01      	adds	r1, r0, #0
 80140f2:	f7f8 f8b5 	bl	800c260 <__aeabi_fadd>
 80140f6:	e7ee      	b.n	80140d6 <__ieee754_logf+0xa6>
 80140f8:	2180      	movs	r1, #128	; 0x80
 80140fa:	05c9      	lsls	r1, r1, #23
 80140fc:	f7f8 f8b0 	bl	800c260 <__aeabi_fadd>
 8014100:	1c01      	adds	r1, r0, #0
 8014102:	1c30      	adds	r0, r6, #0
 8014104:	f7f8 fa46 	bl	800c594 <__aeabi_fdiv>
 8014108:	4680      	mov	r8, r0
 801410a:	0028      	movs	r0, r5
 801410c:	f7f9 fa6a 	bl	800d5e4 <__aeabi_i2f>
 8014110:	4641      	mov	r1, r8
 8014112:	4681      	mov	r9, r0
 8014114:	4640      	mov	r0, r8
 8014116:	f7f8 fb4f 	bl	800c7b8 <__aeabi_fmul>
 801411a:	4b5e      	ldr	r3, [pc, #376]	; (8014294 <__ieee754_logf+0x264>)
 801411c:	1c01      	adds	r1, r0, #0
 801411e:	469a      	mov	sl, r3
 8014120:	4683      	mov	fp, r0
 8014122:	f7f8 fb49 	bl	800c7b8 <__aeabi_fmul>
 8014126:	495c      	ldr	r1, [pc, #368]	; (8014298 <__ieee754_logf+0x268>)
 8014128:	1c07      	adds	r7, r0, #0
 801412a:	f7f8 fb45 	bl	800c7b8 <__aeabi_fmul>
 801412e:	495b      	ldr	r1, [pc, #364]	; (801429c <__ieee754_logf+0x26c>)
 8014130:	f7f8 f896 	bl	800c260 <__aeabi_fadd>
 8014134:	1c39      	adds	r1, r7, #0
 8014136:	f7f8 fb3f 	bl	800c7b8 <__aeabi_fmul>
 801413a:	4959      	ldr	r1, [pc, #356]	; (80142a0 <__ieee754_logf+0x270>)
 801413c:	f7f8 f890 	bl	800c260 <__aeabi_fadd>
 8014140:	1c39      	adds	r1, r7, #0
 8014142:	f7f8 fb39 	bl	800c7b8 <__aeabi_fmul>
 8014146:	4957      	ldr	r1, [pc, #348]	; (80142a4 <__ieee754_logf+0x274>)
 8014148:	f7f8 f88a 	bl	800c260 <__aeabi_fadd>
 801414c:	4659      	mov	r1, fp
 801414e:	f7f8 fb33 	bl	800c7b8 <__aeabi_fmul>
 8014152:	4955      	ldr	r1, [pc, #340]	; (80142a8 <__ieee754_logf+0x278>)
 8014154:	4683      	mov	fp, r0
 8014156:	1c38      	adds	r0, r7, #0
 8014158:	f7f8 fb2e 	bl	800c7b8 <__aeabi_fmul>
 801415c:	4953      	ldr	r1, [pc, #332]	; (80142ac <__ieee754_logf+0x27c>)
 801415e:	f7f8 f87f 	bl	800c260 <__aeabi_fadd>
 8014162:	1c39      	adds	r1, r7, #0
 8014164:	f7f8 fb28 	bl	800c7b8 <__aeabi_fmul>
 8014168:	4951      	ldr	r1, [pc, #324]	; (80142b0 <__ieee754_logf+0x280>)
 801416a:	f7f8 f879 	bl	800c260 <__aeabi_fadd>
 801416e:	1c39      	adds	r1, r7, #0
 8014170:	f7f8 fb22 	bl	800c7b8 <__aeabi_fmul>
 8014174:	1c01      	adds	r1, r0, #0
 8014176:	4658      	mov	r0, fp
 8014178:	f7f8 f872 	bl	800c260 <__aeabi_fadd>
 801417c:	4b4d      	ldr	r3, [pc, #308]	; (80142b4 <__ieee754_logf+0x284>)
 801417e:	44a2      	add	sl, r4
 8014180:	1b1c      	subs	r4, r3, r4
 8014182:	4653      	mov	r3, sl
 8014184:	1c07      	adds	r7, r0, #0
 8014186:	431c      	orrs	r4, r3
 8014188:	2c00      	cmp	r4, #0
 801418a:	dd65      	ble.n	8014258 <__ieee754_logf+0x228>
 801418c:	21fc      	movs	r1, #252	; 0xfc
 801418e:	1c30      	adds	r0, r6, #0
 8014190:	0589      	lsls	r1, r1, #22
 8014192:	f7f8 fb11 	bl	800c7b8 <__aeabi_fmul>
 8014196:	1c31      	adds	r1, r6, #0
 8014198:	f7f8 fb0e 	bl	800c7b8 <__aeabi_fmul>
 801419c:	1c01      	adds	r1, r0, #0
 801419e:	1c04      	adds	r4, r0, #0
 80141a0:	1c38      	adds	r0, r7, #0
 80141a2:	f7f8 f85d 	bl	800c260 <__aeabi_fadd>
 80141a6:	4641      	mov	r1, r8
 80141a8:	f7f8 fb06 	bl	800c7b8 <__aeabi_fmul>
 80141ac:	1c07      	adds	r7, r0, #0
 80141ae:	2d00      	cmp	r5, #0
 80141b0:	d044      	beq.n	801423c <__ieee754_logf+0x20c>
 80141b2:	4936      	ldr	r1, [pc, #216]	; (801428c <__ieee754_logf+0x25c>)
 80141b4:	4648      	mov	r0, r9
 80141b6:	f7f8 faff 	bl	800c7b8 <__aeabi_fmul>
 80141ba:	4935      	ldr	r1, [pc, #212]	; (8014290 <__ieee754_logf+0x260>)
 80141bc:	1c05      	adds	r5, r0, #0
 80141be:	4648      	mov	r0, r9
 80141c0:	f7f8 fafa 	bl	800c7b8 <__aeabi_fmul>
 80141c4:	1c39      	adds	r1, r7, #0
 80141c6:	f7f8 f84b 	bl	800c260 <__aeabi_fadd>
 80141ca:	1c01      	adds	r1, r0, #0
 80141cc:	1c20      	adds	r0, r4, #0
 80141ce:	f7f8 fc25 	bl	800ca1c <__aeabi_fsub>
 80141d2:	1c31      	adds	r1, r6, #0
 80141d4:	f7f8 fc22 	bl	800ca1c <__aeabi_fsub>
 80141d8:	1c01      	adds	r1, r0, #0
 80141da:	1c28      	adds	r0, r5, #0
 80141dc:	f7f8 fc1e 	bl	800ca1c <__aeabi_fsub>
 80141e0:	e779      	b.n	80140d6 <__ieee754_logf+0xa6>
 80141e2:	4935      	ldr	r1, [pc, #212]	; (80142b8 <__ieee754_logf+0x288>)
 80141e4:	1c30      	adds	r0, r6, #0
 80141e6:	f7f8 fae7 	bl	800c7b8 <__aeabi_fmul>
 80141ea:	1c01      	adds	r1, r0, #0
 80141ec:	20fc      	movs	r0, #252	; 0xfc
 80141ee:	0580      	lsls	r0, r0, #22
 80141f0:	f7f8 fc14 	bl	800ca1c <__aeabi_fsub>
 80141f4:	1c31      	adds	r1, r6, #0
 80141f6:	1c04      	adds	r4, r0, #0
 80141f8:	1c30      	adds	r0, r6, #0
 80141fa:	f7f8 fadd 	bl	800c7b8 <__aeabi_fmul>
 80141fe:	1c01      	adds	r1, r0, #0
 8014200:	1c20      	adds	r0, r4, #0
 8014202:	f7f8 fad9 	bl	800c7b8 <__aeabi_fmul>
 8014206:	1c04      	adds	r4, r0, #0
 8014208:	2d00      	cmp	r5, #0
 801420a:	d020      	beq.n	801424e <__ieee754_logf+0x21e>
 801420c:	0028      	movs	r0, r5
 801420e:	f7f9 f9e9 	bl	800d5e4 <__aeabi_i2f>
 8014212:	491e      	ldr	r1, [pc, #120]	; (801428c <__ieee754_logf+0x25c>)
 8014214:	1c05      	adds	r5, r0, #0
 8014216:	f7f8 facf 	bl	800c7b8 <__aeabi_fmul>
 801421a:	491d      	ldr	r1, [pc, #116]	; (8014290 <__ieee754_logf+0x260>)
 801421c:	1c07      	adds	r7, r0, #0
 801421e:	1c28      	adds	r0, r5, #0
 8014220:	f7f8 faca 	bl	800c7b8 <__aeabi_fmul>
 8014224:	1c01      	adds	r1, r0, #0
 8014226:	1c20      	adds	r0, r4, #0
 8014228:	f7f8 fbf8 	bl	800ca1c <__aeabi_fsub>
 801422c:	1c31      	adds	r1, r6, #0
 801422e:	f7f8 fbf5 	bl	800ca1c <__aeabi_fsub>
 8014232:	1c01      	adds	r1, r0, #0
 8014234:	1c38      	adds	r0, r7, #0
 8014236:	f7f8 fbf1 	bl	800ca1c <__aeabi_fsub>
 801423a:	e74c      	b.n	80140d6 <__ieee754_logf+0xa6>
 801423c:	1c01      	adds	r1, r0, #0
 801423e:	1c20      	adds	r0, r4, #0
 8014240:	f7f8 fbec 	bl	800ca1c <__aeabi_fsub>
 8014244:	1c01      	adds	r1, r0, #0
 8014246:	1c30      	adds	r0, r6, #0
 8014248:	f7f8 fbe8 	bl	800ca1c <__aeabi_fsub>
 801424c:	e743      	b.n	80140d6 <__ieee754_logf+0xa6>
 801424e:	1c21      	adds	r1, r4, #0
 8014250:	1c30      	adds	r0, r6, #0
 8014252:	f7f8 fbe3 	bl	800ca1c <__aeabi_fsub>
 8014256:	e73e      	b.n	80140d6 <__ieee754_logf+0xa6>
 8014258:	1c01      	adds	r1, r0, #0
 801425a:	1c30      	adds	r0, r6, #0
 801425c:	f7f8 fbde 	bl	800ca1c <__aeabi_fsub>
 8014260:	4641      	mov	r1, r8
 8014262:	f7f8 faa9 	bl	800c7b8 <__aeabi_fmul>
 8014266:	1c04      	adds	r4, r0, #0
 8014268:	2d00      	cmp	r5, #0
 801426a:	d0f0      	beq.n	801424e <__ieee754_logf+0x21e>
 801426c:	4907      	ldr	r1, [pc, #28]	; (801428c <__ieee754_logf+0x25c>)
 801426e:	4648      	mov	r0, r9
 8014270:	f7f8 faa2 	bl	800c7b8 <__aeabi_fmul>
 8014274:	4906      	ldr	r1, [pc, #24]	; (8014290 <__ieee754_logf+0x260>)
 8014276:	1c05      	adds	r5, r0, #0
 8014278:	4648      	mov	r0, r9
 801427a:	f7f8 fa9d 	bl	800c7b8 <__aeabi_fmul>
 801427e:	e7a4      	b.n	80141ca <__ieee754_logf+0x19a>
 8014280:	7f7fffff 	.word	0x7f7fffff
 8014284:	007fffff 	.word	0x007fffff
 8014288:	004afb20 	.word	0x004afb20
 801428c:	3f317180 	.word	0x3f317180
 8014290:	3717f7d1 	.word	0x3717f7d1
 8014294:	ffcf5c30 	.word	0xffcf5c30
 8014298:	3e178897 	.word	0x3e178897
 801429c:	3e3a3325 	.word	0x3e3a3325
 80142a0:	3e924925 	.word	0x3e924925
 80142a4:	3f2aaaab 	.word	0x3f2aaaab
 80142a8:	3e1cd04f 	.word	0x3e1cd04f
 80142ac:	3e638e29 	.word	0x3e638e29
 80142b0:	3ecccccd 	.word	0x3ecccccd
 80142b4:	0035c288 	.word	0x0035c288
 80142b8:	3eaaaaab 	.word	0x3eaaaaab

080142bc <copysign>:
 80142bc:	b530      	push	{r4, r5, lr}
 80142be:	004a      	lsls	r2, r1, #1
 80142c0:	0fdb      	lsrs	r3, r3, #31
 80142c2:	07db      	lsls	r3, r3, #31
 80142c4:	0852      	lsrs	r2, r2, #1
 80142c6:	431a      	orrs	r2, r3
 80142c8:	0011      	movs	r1, r2
 80142ca:	bd30      	pop	{r4, r5, pc}

080142cc <out_func>:
	uint16_t position;
} print_buffer_t;


static void out_func(char character, void *arg)
{
 80142cc:	b510      	push	{r4, lr}
	print_buffer_t *buf = arg;

	buf->buffer[buf->position++] = character;
 80142ce:	000c      	movs	r4, r1
 80142d0:	34c8      	adds	r4, #200	; 0xc8
 80142d2:	8823      	ldrh	r3, [r4, #0]
 80142d4:	1c5a      	adds	r2, r3, #1
 80142d6:	b292      	uxth	r2, r2
 80142d8:	8022      	strh	r2, [r4, #0]
 80142da:	54c8      	strb	r0, [r1, r3]
	if (buf->position == BUF_SIZE)
 80142dc:	2ac8      	cmp	r2, #200	; 0xc8
 80142de:	d104      	bne.n	80142ea <out_func+0x1e>
	{
		_write(0, buf->buffer, BUF_SIZE);
 80142e0:	2000      	movs	r0, #0
 80142e2:	f7fd fd45 	bl	8011d70 <_write>
		buf->position = 0;
 80142e6:	2300      	movs	r3, #0
 80142e8:	8023      	strh	r3, [r4, #0]
	}
}
 80142ea:	bd10      	pop	{r4, pc}

080142ec <__wrap_puts>:


int __wrap_puts(const char *str)
{
 80142ec:	b510      	push	{r4, lr}
 80142ee:	0004      	movs	r4, r0
	size_t len = strlen(str);
 80142f0:	f7fb f882 	bl	800f3f8 <strlen>

	_write(0, str, len);
 80142f4:	0021      	movs	r1, r4
	size_t len = strlen(str);
 80142f6:	0002      	movs	r2, r0
	_write(0, str, len);
 80142f8:	2000      	movs	r0, #0
 80142fa:	f7fd fd39 	bl	8011d70 <_write>
	_write(0, "\n", 1);
 80142fe:	2201      	movs	r2, #1
 8014300:	4902      	ldr	r1, [pc, #8]	; (801430c <__wrap_puts+0x20>)
 8014302:	2000      	movs	r0, #0
 8014304:	f7fd fd34 	bl	8011d70 <_write>
	return 0;
}
 8014308:	2000      	movs	r0, #0
 801430a:	bd10      	pop	{r4, pc}
 801430c:	0801bcc2 	.word	0x0801bcc2

08014310 <__wrap_printf>:
	return 0;
}


int __wrap_printf(const char *format, ...)
{
 8014310:	b40f      	push	{r0, r1, r2, r3}
 8014312:	b530      	push	{r4, r5, lr}
 8014314:	b0b5      	sub	sp, #212	; 0xd4
 8014316:	ac38      	add	r4, sp, #224	; 0xe0
 8014318:	cc20      	ldmia	r4!, {r5}
	print_buffer_t buf = {
 801431a:	22ca      	movs	r2, #202	; 0xca
 801431c:	2100      	movs	r1, #0
 801431e:	a801      	add	r0, sp, #4
 8014320:	f7fd ffa2 	bl	8012268 <memset>
		.buffer   = {0}
	};
	va_list        va;

	va_start(va, format);
	int ret = fctvprintf(out_func, &buf, format, va);
 8014324:	0023      	movs	r3, r4
 8014326:	002a      	movs	r2, r5
 8014328:	a901      	add	r1, sp, #4
 801432a:	4809      	ldr	r0, [pc, #36]	; (8014350 <__wrap_printf+0x40>)
	va_start(va, format);
 801432c:	9400      	str	r4, [sp, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 801432e:	f000 fb9b 	bl	8014a68 <fctvprintf>
	if (buf.position != 0)
 8014332:	ab33      	add	r3, sp, #204	; 0xcc
 8014334:	881a      	ldrh	r2, [r3, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 8014336:	0004      	movs	r4, r0
	if (buf.position != 0)
 8014338:	2a00      	cmp	r2, #0
 801433a:	d003      	beq.n	8014344 <__wrap_printf+0x34>
	{
		_write(0, buf.buffer, buf.position);
 801433c:	a901      	add	r1, sp, #4
 801433e:	2000      	movs	r0, #0
 8014340:	f7fd fd16 	bl	8011d70 <_write>
	}

	va_end(va);

	return ret;
}
 8014344:	0020      	movs	r0, r4
 8014346:	b035      	add	sp, #212	; 0xd4
 8014348:	bc30      	pop	{r4, r5}
 801434a:	bc08      	pop	{r3}
 801434c:	b004      	add	sp, #16
 801434e:	4718      	bx	r3
 8014350:	080142cd 	.word	0x080142cd

08014354 <__wrap_vsnprintf>:
	return ret;
}


int __wrap_vsnprintf(char *buffer, size_t count, const char *format, va_list va)
{
 8014354:	b510      	push	{r4, lr}
	return vsnprintf_(buffer, count, format, va);
 8014356:	f000 fb7b 	bl	8014a50 <vsnprintf_>
}
 801435a:	bd10      	pop	{r4, pc}

0801435c <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 801435c:	429a      	cmp	r2, r3
 801435e:	d200      	bcs.n	8014362 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 8014360:	5488      	strb	r0, [r1, r2]
  }
}
 8014362:	4770      	bx	lr

08014364 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8014364:	4770      	bx	lr

08014366 <_out_fct>:
}


// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
 8014366:	b510      	push	{r4, lr}
  (void)idx; (void)maxlen;
  if (character) {
 8014368:	2800      	cmp	r0, #0
 801436a:	d002      	beq.n	8014372 <_out_fct+0xc>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
 801436c:	680b      	ldr	r3, [r1, #0]
 801436e:	6849      	ldr	r1, [r1, #4]
 8014370:	4798      	blx	r3
  }
}
 8014372:	bd10      	pop	{r4, pc}

08014374 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014376:	b087      	sub	sp, #28
 8014378:	9103      	str	r1, [sp, #12]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 801437a:	2102      	movs	r1, #2
{
 801437c:	9304      	str	r3, [sp, #16]
 801437e:	ab0e      	add	r3, sp, #56	; 0x38
 8014380:	781f      	ldrb	r7, [r3, #0]
 8014382:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014384:	9002      	str	r0, [sp, #8]
  if (!(flags & FLAGS_LEFT)) {
 8014386:	4019      	ands	r1, r3
{
 8014388:	9201      	str	r2, [sp, #4]
 801438a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801438c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801438e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014390:	9810      	ldr	r0, [sp, #64]	; 0x40
  if (!(flags & FLAGS_LEFT)) {
 8014392:	9105      	str	r1, [sp, #20]
 8014394:	d11f      	bne.n	80143d6 <_ntoa_format+0x62>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8014396:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014398:	3101      	adds	r1, #1
 801439a:	4019      	ands	r1, r3
 801439c:	2e00      	cmp	r6, #0
 801439e:	d009      	beq.n	80143b4 <_ntoa_format+0x40>
 80143a0:	2900      	cmp	r1, #0
 80143a2:	d007      	beq.n	80143b4 <_ntoa_format+0x40>
 80143a4:	2f00      	cmp	r7, #0
 80143a6:	d102      	bne.n	80143ae <_ntoa_format+0x3a>
 80143a8:	260c      	movs	r6, #12
 80143aa:	4233      	tst	r3, r6
 80143ac:	d002      	beq.n	80143b4 <_ntoa_format+0x40>
      width--;
 80143ae:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80143b0:	3e01      	subs	r6, #1
 80143b2:	9611      	str	r6, [sp, #68]	; 0x44
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 80143b4:	2630      	movs	r6, #48	; 0x30
 80143b6:	e003      	b.n	80143c0 <_ntoa_format+0x4c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80143b8:	2c20      	cmp	r4, #32
 80143ba:	d003      	beq.n	80143c4 <_ntoa_format+0x50>
      buf[len++] = '0';
 80143bc:	552e      	strb	r6, [r5, r4]
 80143be:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80143c0:	42a0      	cmp	r0, r4
 80143c2:	d8f9      	bhi.n	80143b8 <_ntoa_format+0x44>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 80143c4:	2630      	movs	r6, #48	; 0x30
 80143c6:	46b4      	mov	ip, r6
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80143c8:	2900      	cmp	r1, #0
 80143ca:	d004      	beq.n	80143d6 <_ntoa_format+0x62>
 80143cc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80143ce:	42a6      	cmp	r6, r4
 80143d0:	d901      	bls.n	80143d6 <_ntoa_format+0x62>
 80143d2:	2c20      	cmp	r4, #32
 80143d4:	d114      	bne.n	8014400 <_ntoa_format+0x8c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80143d6:	06d9      	lsls	r1, r3, #27
 80143d8:	d536      	bpl.n	8014448 <_ntoa_format+0xd4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80143da:	0559      	lsls	r1, r3, #21
 80143dc:	d415      	bmi.n	801440a <_ntoa_format+0x96>
 80143de:	2c00      	cmp	r4, #0
 80143e0:	d013      	beq.n	801440a <_ntoa_format+0x96>
 80143e2:	4284      	cmp	r4, r0
 80143e4:	d002      	beq.n	80143ec <_ntoa_format+0x78>
 80143e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80143e8:	428c      	cmp	r4, r1
 80143ea:	d10e      	bne.n	801440a <_ntoa_format+0x96>
      len--;
 80143ec:	1e61      	subs	r1, r4, #1
      if (len && (base == 16U)) {
 80143ee:	2900      	cmp	r1, #0
 80143f0:	d00a      	beq.n	8014408 <_ntoa_format+0x94>
        len--;
 80143f2:	3c02      	subs	r4, #2
      if (len && (base == 16U)) {
 80143f4:	2a10      	cmp	r2, #16
 80143f6:	d00a      	beq.n	801440e <_ntoa_format+0x9a>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80143f8:	000c      	movs	r4, r1
 80143fa:	2a02      	cmp	r2, #2
 80143fc:	d11f      	bne.n	801443e <_ntoa_format+0xca>
 80143fe:	e032      	b.n	8014466 <_ntoa_format+0xf2>
      buf[len++] = '0';
 8014400:	4666      	mov	r6, ip
 8014402:	552e      	strb	r6, [r5, r4]
 8014404:	3401      	adds	r4, #1
 8014406:	e7df      	b.n	80143c8 <_ntoa_format+0x54>
 8014408:	000c      	movs	r4, r1
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801440a:	2a10      	cmp	r2, #16
 801440c:	d127      	bne.n	801445e <_ntoa_format+0xea>
 801440e:	069a      	lsls	r2, r3, #26
 8014410:	d410      	bmi.n	8014434 <_ntoa_format+0xc0>
      buf[len++] = 'x';
 8014412:	2278      	movs	r2, #120	; 0x78
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014414:	2c1f      	cmp	r4, #31
 8014416:	d910      	bls.n	801443a <_ntoa_format+0xc6>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8014418:	9e01      	ldr	r6, [sp, #4]
 801441a:	079b      	lsls	r3, r3, #30
 801441c:	d031      	beq.n	8014482 <_ntoa_format+0x10e>
      out(' ', buffer, idx++, maxlen);
 801441e:	9400      	str	r4, [sp, #0]
 8014420:	9b00      	ldr	r3, [sp, #0]
 8014422:	19a0      	adds	r0, r4, r6
 8014424:	1ac2      	subs	r2, r0, r3
  while (len) {
 8014426:	2b00      	cmp	r3, #0
 8014428:	d132      	bne.n	8014490 <_ntoa_format+0x11c>
  if (flags & FLAGS_LEFT) {
 801442a:	9b05      	ldr	r3, [sp, #20]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d140      	bne.n	80144b2 <_ntoa_format+0x13e>
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 8014430:	b007      	add	sp, #28
 8014432:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf[len++] = 'X';
 8014434:	2258      	movs	r2, #88	; 0x58
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014436:	2c1f      	cmp	r4, #31
 8014438:	d8ee      	bhi.n	8014418 <_ntoa_format+0xa4>
      buf[len++] = 'b';
 801443a:	552a      	strb	r2, [r5, r4]
 801443c:	3401      	adds	r4, #1
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 801443e:	2c1f      	cmp	r4, #31
 8014440:	d8ea      	bhi.n	8014418 <_ntoa_format+0xa4>
      buf[len++] = '0';
 8014442:	2230      	movs	r2, #48	; 0x30
 8014444:	552a      	strb	r2, [r5, r4]
 8014446:	3401      	adds	r4, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8014448:	2c20      	cmp	r4, #32
 801444a:	d0e5      	beq.n	8014418 <_ntoa_format+0xa4>
      buf[len++] = '-';
 801444c:	222d      	movs	r2, #45	; 0x2d
    if (negative) {
 801444e:	2f00      	cmp	r7, #0
 8014450:	d102      	bne.n	8014458 <_ntoa_format+0xe4>
    else if (flags & FLAGS_PLUS) {
 8014452:	075a      	lsls	r2, r3, #29
 8014454:	d509      	bpl.n	801446a <_ntoa_format+0xf6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8014456:	222b      	movs	r2, #43	; 0x2b
      buf[len++] = ' ';
 8014458:	552a      	strb	r2, [r5, r4]
 801445a:	3401      	adds	r4, #1
 801445c:	e7dc      	b.n	8014418 <_ntoa_format+0xa4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801445e:	2a02      	cmp	r2, #2
 8014460:	d1ed      	bne.n	801443e <_ntoa_format+0xca>
 8014462:	2c1f      	cmp	r4, #31
 8014464:	d8d8      	bhi.n	8014418 <_ntoa_format+0xa4>
      buf[len++] = 'b';
 8014466:	2262      	movs	r2, #98	; 0x62
 8014468:	e7e7      	b.n	801443a <_ntoa_format+0xc6>
    else if (flags & FLAGS_SPACE) {
 801446a:	071a      	lsls	r2, r3, #28
 801446c:	d5d4      	bpl.n	8014418 <_ntoa_format+0xa4>
      buf[len++] = ' ';
 801446e:	2220      	movs	r2, #32
 8014470:	e7f2      	b.n	8014458 <_ntoa_format+0xe4>
      out(' ', buffer, idx++, maxlen);
 8014472:	1c77      	adds	r7, r6, #1
 8014474:	0032      	movs	r2, r6
 8014476:	9b04      	ldr	r3, [sp, #16]
 8014478:	9e02      	ldr	r6, [sp, #8]
 801447a:	9903      	ldr	r1, [sp, #12]
 801447c:	2020      	movs	r0, #32
 801447e:	47b0      	blx	r6
 8014480:	003e      	movs	r6, r7
    for (size_t i = len; i < width; i++) {
 8014482:	9b01      	ldr	r3, [sp, #4]
 8014484:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014486:	1ae3      	subs	r3, r4, r3
 8014488:	199b      	adds	r3, r3, r6
 801448a:	429a      	cmp	r2, r3
 801448c:	d8f1      	bhi.n	8014472 <_ntoa_format+0xfe>
 801448e:	e7c6      	b.n	801441e <_ntoa_format+0xaa>
    out(buf[--len], buffer, idx++, maxlen);
 8014490:	9b00      	ldr	r3, [sp, #0]
 8014492:	9903      	ldr	r1, [sp, #12]
 8014494:	3b01      	subs	r3, #1
 8014496:	9300      	str	r3, [sp, #0]
 8014498:	5ce8      	ldrb	r0, [r5, r3]
 801449a:	9f02      	ldr	r7, [sp, #8]
 801449c:	9b04      	ldr	r3, [sp, #16]
 801449e:	47b8      	blx	r7
 80144a0:	e7be      	b.n	8014420 <_ntoa_format+0xac>
      out(' ', buffer, idx++, maxlen);
 80144a2:	1c44      	adds	r4, r0, #1
 80144a4:	0002      	movs	r2, r0
 80144a6:	9b04      	ldr	r3, [sp, #16]
 80144a8:	2020      	movs	r0, #32
 80144aa:	9903      	ldr	r1, [sp, #12]
 80144ac:	9d02      	ldr	r5, [sp, #8]
 80144ae:	47a8      	blx	r5
 80144b0:	0020      	movs	r0, r4
    while (idx - start_idx < width) {
 80144b2:	9b01      	ldr	r3, [sp, #4]
 80144b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80144b6:	1ac3      	subs	r3, r0, r3
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d8f2      	bhi.n	80144a2 <_ntoa_format+0x12e>
 80144bc:	e7b8      	b.n	8014430 <_ntoa_format+0xbc>

080144be <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80144be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144c0:	b095      	sub	sp, #84	; 0x54
 80144c2:	9309      	str	r3, [sp, #36]	; 0x24
 80144c4:	ab1a      	add	r3, sp, #104	; 0x68
 80144c6:	0006      	movs	r6, r0
 80144c8:	cb01      	ldmia	r3!, {r0}
 80144ca:	000f      	movs	r7, r1
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	9208      	str	r2, [sp, #32]
 80144d0:	930a      	str	r3, [sp, #40]	; 0x28
 80144d2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80144d4:	2800      	cmp	r0, #0
 80144d6:	d101      	bne.n	80144dc <_ntoa_long+0x1e>
    flags &= ~FLAGS_HASH;
 80144d8:	2310      	movs	r3, #16
 80144da:	439c      	bics	r4, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80144dc:	0563      	lsls	r3, r4, #21
 80144de:	d502      	bpl.n	80144e6 <_ntoa_long+0x28>
  size_t len = 0U;
 80144e0:	2300      	movs	r3, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 80144e2:	4298      	cmp	r0, r3
 80144e4:	d01d      	beq.n	8014522 <_ntoa_long+0x64>
 80144e6:	2361      	movs	r3, #97	; 0x61
 80144e8:	06a2      	lsls	r2, r4, #26
 80144ea:	d500      	bpl.n	80144ee <_ntoa_long+0x30>
 80144ec:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80144ee:	2500      	movs	r5, #0
 80144f0:	b2db      	uxtb	r3, r3
 80144f2:	3b0a      	subs	r3, #10
 80144f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80144f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80144f8:	f7f8 fd16 	bl	800cf28 <__aeabi_uidivmod>
 80144fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      const char digit = (char)(value % base);
 80144fe:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8014500:	189a      	adds	r2, r3, r2
 8014502:	4684      	mov	ip, r0
 8014504:	b2d2      	uxtb	r2, r2
 8014506:	2909      	cmp	r1, #9
 8014508:	d801      	bhi.n	801450e <_ntoa_long+0x50>
 801450a:	3330      	adds	r3, #48	; 0x30
 801450c:	b2da      	uxtb	r2, r3
 801450e:	2020      	movs	r0, #32
 8014510:	a904      	add	r1, sp, #16
 8014512:	1809      	adds	r1, r1, r0
      value /= base;
 8014514:	4660      	mov	r0, ip
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8014516:	1c6b      	adds	r3, r5, #1
 8014518:	554a      	strb	r2, [r1, r5]
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 801451a:	2800      	cmp	r0, #0
 801451c:	d001      	beq.n	8014522 <_ntoa_long+0x64>
 801451e:	2b20      	cmp	r3, #32
 8014520:	d113      	bne.n	801454a <_ntoa_long+0x8c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8014522:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014524:	9301      	str	r3, [sp, #4]
 8014526:	9205      	str	r2, [sp, #20]
 8014528:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801452a:	ab0c      	add	r3, sp, #48	; 0x30
 801452c:	9204      	str	r2, [sp, #16]
 801452e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014530:	9300      	str	r3, [sp, #0]
 8014532:	9203      	str	r2, [sp, #12]
 8014534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014536:	9406      	str	r4, [sp, #24]
 8014538:	9202      	str	r2, [sp, #8]
 801453a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801453c:	9a08      	ldr	r2, [sp, #32]
 801453e:	0039      	movs	r1, r7
 8014540:	0030      	movs	r0, r6
 8014542:	f7ff ff17 	bl	8014374 <_ntoa_format>
}
 8014546:	b015      	add	sp, #84	; 0x54
 8014548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801454a:	001d      	movs	r5, r3
 801454c:	e7d3      	b.n	80144f6 <_ntoa_long+0x38>

0801454e <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 801454e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014550:	b099      	sub	sp, #100	; 0x64
 8014552:	930c      	str	r3, [sp, #48]	; 0x30
 8014554:	ab20      	add	r3, sp, #128	; 0x80
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	9009      	str	r0, [sp, #36]	; 0x24
 801455a:	930d      	str	r3, [sp, #52]	; 0x34
 801455c:	981e      	ldr	r0, [sp, #120]	; 0x78
 801455e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014560:	910a      	str	r1, [sp, #40]	; 0x28
 8014562:	930e      	str	r3, [sp, #56]	; 0x38
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8014564:	0003      	movs	r3, r0
{
 8014566:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014568:	920b      	str	r2, [sp, #44]	; 0x2c
 801456a:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801456c:	9e26      	ldr	r6, [sp, #152]	; 0x98
  if (!value) {
 801456e:	430b      	orrs	r3, r1
 8014570:	d101      	bne.n	8014576 <_ntoa_long_long+0x28>
    flags &= ~FLAGS_HASH;
 8014572:	3310      	adds	r3, #16
 8014574:	439e      	bics	r6, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8014576:	0573      	lsls	r3, r6, #21
 8014578:	d504      	bpl.n	8014584 <_ntoa_long_long+0x36>
 801457a:	0003      	movs	r3, r0
  size_t len = 0U;
 801457c:	2200      	movs	r2, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 801457e:	430b      	orrs	r3, r1
 8014580:	4293      	cmp	r3, r2
 8014582:	d021      	beq.n	80145c8 <_ntoa_long_long+0x7a>
 8014584:	2361      	movs	r3, #97	; 0x61
 8014586:	06b2      	lsls	r2, r6, #26
 8014588:	d500      	bpl.n	801458c <_ntoa_long_long+0x3e>
 801458a:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801458c:	2400      	movs	r4, #0
 801458e:	b2db      	uxtb	r3, r3
 8014590:	3b0a      	subs	r3, #10
 8014592:	930f      	str	r3, [sp, #60]	; 0x3c
 8014594:	002a      	movs	r2, r5
 8014596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014598:	f7f8 fe2e 	bl	800d1f8 <__aeabi_uldivmod>
 801459c:	468c      	mov	ip, r1
 801459e:	990f      	ldr	r1, [sp, #60]	; 0x3c
      const char digit = (char)(value % base);
 80145a0:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80145a2:	1851      	adds	r1, r2, r1
 80145a4:	0003      	movs	r3, r0
 80145a6:	b2c9      	uxtb	r1, r1
 80145a8:	2a09      	cmp	r2, #9
 80145aa:	d801      	bhi.n	80145b0 <_ntoa_long_long+0x62>
 80145ac:	3230      	adds	r2, #48	; 0x30
 80145ae:	b2d1      	uxtb	r1, r2
 80145b0:	2720      	movs	r7, #32
 80145b2:	a808      	add	r0, sp, #32
 80145b4:	19c0      	adds	r0, r0, r7
 80145b6:	5501      	strb	r1, [r0, r4]
 80145b8:	1c62      	adds	r2, r4, #1
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80145ba:	4664      	mov	r4, ip
      value /= base;
 80145bc:	0018      	movs	r0, r3
 80145be:	4661      	mov	r1, ip
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80145c0:	431c      	orrs	r4, r3
 80145c2:	d001      	beq.n	80145c8 <_ntoa_long_long+0x7a>
 80145c4:	42ba      	cmp	r2, r7
 80145c6:	d112      	bne.n	80145ee <_ntoa_long_long+0xa0>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80145c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80145ca:	9201      	str	r2, [sp, #4]
 80145cc:	9305      	str	r3, [sp, #20]
 80145ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80145d0:	9606      	str	r6, [sp, #24]
 80145d2:	9304      	str	r3, [sp, #16]
 80145d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145d6:	9503      	str	r5, [sp, #12]
 80145d8:	9302      	str	r3, [sp, #8]
 80145da:	ab10      	add	r3, sp, #64	; 0x40
 80145dc:	9300      	str	r3, [sp, #0]
 80145de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80145e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80145e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145e6:	f7ff fec5 	bl	8014374 <_ntoa_format>
}
 80145ea:	b019      	add	sp, #100	; 0x64
 80145ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145ee:	0014      	movs	r4, r2
 80145f0:	e7d0      	b.n	8014594 <_ntoa_long_long+0x46>
	...

080145f4 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80145f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145f6:	b099      	sub	sp, #100	; 0x64
 80145f8:	900d      	str	r0, [sp, #52]	; 0x34
 80145fa:	910e      	str	r1, [sp, #56]	; 0x38
 80145fc:	920c      	str	r2, [sp, #48]	; 0x30
 80145fe:	930a      	str	r3, [sp, #40]	; 0x28
 8014600:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 8014602:	2900      	cmp	r1, #0
 8014604:	d101      	bne.n	801460a <_vsnprintf+0x16>
    // use null output function
    out = _out_null;
 8014606:	4bb6      	ldr	r3, [pc, #728]	; (80148e0 <_vsnprintf+0x2ec>)
 8014608:	930d      	str	r3, [sp, #52]	; 0x34
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
 801460a:	2700      	movs	r7, #0
 801460c:	e101      	b.n	8014812 <_vsnprintf+0x21e>
 801460e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014610:	3301      	adds	r3, #1
 8014612:	930a      	str	r3, [sp, #40]	; 0x28
    if (*format != '%') {
 8014614:	2825      	cmp	r0, #37	; 0x25
 8014616:	d007      	beq.n	8014628 <_vsnprintf+0x34>
        out(*format, buffer, idx++, maxlen);
 8014618:	003a      	movs	r2, r7
 801461a:	1c7c      	adds	r4, r7, #1
 801461c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801461e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014620:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014622:	47a8      	blx	r5
 8014624:	0027      	movs	r7, r4
        format++;
        break;
 8014626:	e0f4      	b.n	8014812 <_vsnprintf+0x21e>
    flags = 0U;
 8014628:	2400      	movs	r4, #0
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 801462a:	2101      	movs	r1, #1
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 801462c:	2008      	movs	r0, #8
 801462e:	e005      	b.n	801463c <_vsnprintf+0x48>
      switch (*format) {
 8014630:	2b2d      	cmp	r3, #45	; 0x2d
 8014632:	d016      	beq.n	8014662 <_vsnprintf+0x6e>
 8014634:	2b30      	cmp	r3, #48	; 0x30
 8014636:	d10c      	bne.n	8014652 <_vsnprintf+0x5e>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8014638:	430c      	orrs	r4, r1
{
 801463a:	920a      	str	r2, [sp, #40]	; 0x28
      switch (*format) {
 801463c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801463e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014640:	781b      	ldrb	r3, [r3, #0]
 8014642:	3201      	adds	r2, #1
 8014644:	2b2b      	cmp	r3, #43	; 0x2b
 8014646:	d00f      	beq.n	8014668 <_vsnprintf+0x74>
 8014648:	d8f2      	bhi.n	8014630 <_vsnprintf+0x3c>
 801464a:	2b20      	cmp	r3, #32
 801464c:	d00e      	beq.n	801466c <_vsnprintf+0x78>
 801464e:	2b23      	cmp	r3, #35	; 0x23
 8014650:	d00e      	beq.n	8014670 <_vsnprintf+0x7c>
    if (_is_digit(*format)) {
 8014652:	0019      	movs	r1, r3
 8014654:	3930      	subs	r1, #48	; 0x30
 8014656:	2909      	cmp	r1, #9
 8014658:	d82c      	bhi.n	80146b4 <_vsnprintf+0xc0>
  unsigned int i = 0U;
 801465a:	2300      	movs	r3, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 801465c:	200a      	movs	r0, #10
  unsigned int i = 0U;
 801465e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014660:	e00e      	b.n	8014680 <_vsnprintf+0x8c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8014662:	2302      	movs	r3, #2
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8014664:	431c      	orrs	r4, r3
 8014666:	e7e8      	b.n	801463a <_vsnprintf+0x46>
 8014668:	2304      	movs	r3, #4
 801466a:	e7fb      	b.n	8014664 <_vsnprintf+0x70>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 801466c:	4304      	orrs	r4, r0
 801466e:	e7e4      	b.n	801463a <_vsnprintf+0x46>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8014670:	2310      	movs	r3, #16
 8014672:	e7f7      	b.n	8014664 <_vsnprintf+0x70>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8014674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014676:	910a      	str	r1, [sp, #40]	; 0x28
 8014678:	4343      	muls	r3, r0
 801467a:	3b30      	subs	r3, #48	; 0x30
 801467c:	18d3      	adds	r3, r2, r3
 801467e:	930f      	str	r3, [sp, #60]	; 0x3c
  while (_is_digit(**str)) {
 8014680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014682:	781a      	ldrb	r2, [r3, #0]
 8014684:	1c59      	adds	r1, r3, #1
 8014686:	0013      	movs	r3, r2
 8014688:	3b30      	subs	r3, #48	; 0x30
 801468a:	2b09      	cmp	r3, #9
 801468c:	d9f2      	bls.n	8014674 <_vsnprintf+0x80>
    precision = 0U;
 801468e:	2200      	movs	r2, #0
    if (*format == '.') {
 8014690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    precision = 0U;
 8014692:	920b      	str	r2, [sp, #44]	; 0x2c
    if (*format == '.') {
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	2b2e      	cmp	r3, #46	; 0x2e
 8014698:	d138      	bne.n	801470c <_vsnprintf+0x118>
      flags |= FLAGS_PRECISION;
 801469a:	2280      	movs	r2, #128	; 0x80
 801469c:	00d2      	lsls	r2, r2, #3
 801469e:	4314      	orrs	r4, r2
      if (_is_digit(*format)) {
 80146a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146a4:	7852      	ldrb	r2, [r2, #1]
 80146a6:	3301      	adds	r3, #1
 80146a8:	0011      	movs	r1, r2
 80146aa:	3930      	subs	r1, #48	; 0x30
 80146ac:	2909      	cmp	r1, #9
 80146ae:	d820      	bhi.n	80146f2 <_vsnprintf+0xfe>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80146b0:	250a      	movs	r5, #10
 80146b2:	e016      	b.n	80146e2 <_vsnprintf+0xee>
    width = 0U;
 80146b4:	2100      	movs	r1, #0
 80146b6:	910f      	str	r1, [sp, #60]	; 0x3c
    else if (*format == '*') {
 80146b8:	2b2a      	cmp	r3, #42	; 0x2a
 80146ba:	d1e8      	bne.n	801468e <_vsnprintf+0x9a>
      const int w = va_arg(va, int);
 80146bc:	6831      	ldr	r1, [r6, #0]
 80146be:	1d33      	adds	r3, r6, #4
 80146c0:	910f      	str	r1, [sp, #60]	; 0x3c
      if (w < 0) {
 80146c2:	2900      	cmp	r1, #0
 80146c4:	da04      	bge.n	80146d0 <_vsnprintf+0xdc>
        flags |= FLAGS_LEFT;    // reverse padding
 80146c6:	2102      	movs	r1, #2
 80146c8:	430c      	orrs	r4, r1
        width = (unsigned int)-w;
 80146ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80146cc:	4249      	negs	r1, r1
 80146ce:	910f      	str	r1, [sp, #60]	; 0x3c
      const int w = va_arg(va, int);
 80146d0:	001e      	movs	r6, r3
 80146d2:	920a      	str	r2, [sp, #40]	; 0x28
 80146d4:	e7db      	b.n	801468e <_vsnprintf+0x9a>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80146d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146d8:	436b      	muls	r3, r5
 80146da:	3b30      	subs	r3, #48	; 0x30
 80146dc:	18d3      	adds	r3, r2, r3
 80146de:	930b      	str	r3, [sp, #44]	; 0x2c
 80146e0:	0003      	movs	r3, r0
  while (_is_digit(**str)) {
 80146e2:	781a      	ldrb	r2, [r3, #0]
 80146e4:	1c58      	adds	r0, r3, #1
 80146e6:	0011      	movs	r1, r2
 80146e8:	3930      	subs	r1, #48	; 0x30
 80146ea:	2909      	cmp	r1, #9
 80146ec:	d9f3      	bls.n	80146d6 <_vsnprintf+0xe2>
      format++;
 80146ee:	930a      	str	r3, [sp, #40]	; 0x28
 80146f0:	e00c      	b.n	801470c <_vsnprintf+0x118>
      else if (*format == '*') {
 80146f2:	2a2a      	cmp	r2, #42	; 0x2a
 80146f4:	d1fb      	bne.n	80146ee <_vsnprintf+0xfa>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80146f6:	6833      	ldr	r3, [r6, #0]
        const int prec = (int)va_arg(va, int);
 80146f8:	3604      	adds	r6, #4
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80146fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80146fc:	43db      	mvns	r3, r3
 80146fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014700:	17db      	asrs	r3, r3, #31
 8014702:	401a      	ands	r2, r3
        format++;
 8014704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8014706:	920b      	str	r2, [sp, #44]	; 0x2c
        format++;
 8014708:	3302      	adds	r3, #2
 801470a:	930a      	str	r3, [sp, #40]	; 0x28
 801470c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801470e:	1c5a      	adds	r2, r3, #1
    switch (*format) {
 8014710:	781b      	ldrb	r3, [r3, #0]
 8014712:	2b6c      	cmp	r3, #108	; 0x6c
 8014714:	d00d      	beq.n	8014732 <_vsnprintf+0x13e>
 8014716:	d805      	bhi.n	8014724 <_vsnprintf+0x130>
 8014718:	2b68      	cmp	r3, #104	; 0x68
 801471a:	d014      	beq.n	8014746 <_vsnprintf+0x152>
 801471c:	2b6a      	cmp	r3, #106	; 0x6a
 801471e:	d02f      	beq.n	8014780 <_vsnprintf+0x18c>
 8014720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014722:	e016      	b.n	8014752 <_vsnprintf+0x15e>
 8014724:	2b74      	cmp	r3, #116	; 0x74
 8014726:	d001      	beq.n	801472c <_vsnprintf+0x138>
 8014728:	2b7a      	cmp	r3, #122	; 0x7a
 801472a:	d1f9      	bne.n	8014720 <_vsnprintf+0x12c>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 801472c:	2380      	movs	r3, #128	; 0x80
 801472e:	005b      	lsls	r3, r3, #1
 8014730:	e00e      	b.n	8014750 <_vsnprintf+0x15c>
        if (*format == 'l') {
 8014732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014734:	785b      	ldrb	r3, [r3, #1]
 8014736:	2b6c      	cmp	r3, #108	; 0x6c
 8014738:	d1f8      	bne.n	801472c <_vsnprintf+0x138>
          flags |= FLAGS_LONG_LONG;
 801473a:	23c0      	movs	r3, #192	; 0xc0
 801473c:	009b      	lsls	r3, r3, #2
          format++;
 801473e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
          flags |= FLAGS_CHAR;
 8014740:	431c      	orrs	r4, r3
          format++;
 8014742:	3202      	adds	r2, #2
 8014744:	e005      	b.n	8014752 <_vsnprintf+0x15e>
        if (*format == 'h') {
 8014746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014748:	785b      	ldrb	r3, [r3, #1]
 801474a:	2b68      	cmp	r3, #104	; 0x68
 801474c:	d016      	beq.n	801477c <_vsnprintf+0x188>
        flags |= FLAGS_SHORT;
 801474e:	2380      	movs	r3, #128	; 0x80
 8014750:	431c      	orrs	r4, r3
    switch (*format) {
 8014752:	7810      	ldrb	r0, [r2, #0]
 8014754:	1c53      	adds	r3, r2, #1
 8014756:	930a      	str	r3, [sp, #40]	; 0x28
 8014758:	2869      	cmp	r0, #105	; 0x69
 801475a:	d01a      	beq.n	8014792 <_vsnprintf+0x19e>
 801475c:	d900      	bls.n	8014760 <_vsnprintf+0x16c>
 801475e:	e06a      	b.n	8014836 <_vsnprintf+0x242>
 8014760:	2862      	cmp	r0, #98	; 0x62
 8014762:	d100      	bne.n	8014766 <_vsnprintf+0x172>
 8014764:	e172      	b.n	8014a4c <_vsnprintf+0x458>
 8014766:	d80e      	bhi.n	8014786 <_vsnprintf+0x192>
 8014768:	2825      	cmp	r0, #37	; 0x25
 801476a:	d100      	bne.n	801476e <_vsnprintf+0x17a>
 801476c:	e754      	b.n	8014618 <_vsnprintf+0x24>
 801476e:	2858      	cmp	r0, #88	; 0x58
 8014770:	d000      	beq.n	8014774 <_vsnprintf+0x180>
 8014772:	e751      	b.n	8014618 <_vsnprintf+0x24>
          flags |= FLAGS_UPPERCASE;
 8014774:	2320      	movs	r3, #32
 8014776:	431c      	orrs	r4, r3
          base = 16U;
 8014778:	3b10      	subs	r3, #16
 801477a:	e011      	b.n	80147a0 <_vsnprintf+0x1ac>
          flags |= FLAGS_CHAR;
 801477c:	23c0      	movs	r3, #192	; 0xc0
 801477e:	e7de      	b.n	801473e <_vsnprintf+0x14a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8014780:	2380      	movs	r3, #128	; 0x80
 8014782:	009b      	lsls	r3, r3, #2
 8014784:	e7e4      	b.n	8014750 <_vsnprintf+0x15c>
    switch (*format) {
 8014786:	2863      	cmp	r0, #99	; 0x63
 8014788:	d100      	bne.n	801478c <_vsnprintf+0x198>
 801478a:	e0c9      	b.n	8014920 <_vsnprintf+0x32c>
 801478c:	2864      	cmp	r0, #100	; 0x64
 801478e:	d000      	beq.n	8014792 <_vsnprintf+0x19e>
 8014790:	e742      	b.n	8014618 <_vsnprintf+0x24>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8014792:	2310      	movs	r3, #16
 8014794:	439c      	bics	r4, r3
          base = 10U;
 8014796:	3b06      	subs	r3, #6
        if ((*format != 'i') && (*format != 'd')) {
 8014798:	2869      	cmp	r0, #105	; 0x69
 801479a:	d003      	beq.n	80147a4 <_vsnprintf+0x1b0>
 801479c:	2864      	cmp	r0, #100	; 0x64
 801479e:	d001      	beq.n	80147a4 <_vsnprintf+0x1b0>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80147a0:	220c      	movs	r2, #12
 80147a2:	4394      	bics	r4, r2
        if (flags & FLAGS_PRECISION) {
 80147a4:	0562      	lsls	r2, r4, #21
 80147a6:	d501      	bpl.n	80147ac <_vsnprintf+0x1b8>
          flags &= ~FLAGS_ZEROPAD;
 80147a8:	2201      	movs	r2, #1
 80147aa:	4394      	bics	r4, r2
 80147ac:	2280      	movs	r2, #128	; 0x80
 80147ae:	0092      	lsls	r2, r2, #2
 80147b0:	4022      	ands	r2, r4
        if ((*format == 'i') || (*format == 'd')) {
 80147b2:	2869      	cmp	r0, #105	; 0x69
 80147b4:	d002      	beq.n	80147bc <_vsnprintf+0x1c8>
 80147b6:	2864      	cmp	r0, #100	; 0x64
 80147b8:	d000      	beq.n	80147bc <_vsnprintf+0x1c8>
 80147ba:	e07b      	b.n	80148b4 <_vsnprintf+0x2c0>
          if (flags & FLAGS_LONG_LONG) {
 80147bc:	2a00      	cmp	r2, #0
 80147be:	d059      	beq.n	8014874 <_vsnprintf+0x280>
            const long long value = va_arg(va, long long);
 80147c0:	2107      	movs	r1, #7
 80147c2:	1df2      	adds	r2, r6, #7
 80147c4:	438a      	bics	r2, r1
 80147c6:	6811      	ldr	r1, [r2, #0]
 80147c8:	0015      	movs	r5, r2
 80147ca:	6852      	ldr	r2, [r2, #4]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80147cc:	9304      	str	r3, [sp, #16]
 80147ce:	2300      	movs	r3, #0
 80147d0:	9305      	str	r3, [sp, #20]
 80147d2:	0fd3      	lsrs	r3, r2, #31
 80147d4:	9302      	str	r3, [sp, #8]
 80147d6:	17d3      	asrs	r3, r2, #31
 80147d8:	9311      	str	r3, [sp, #68]	; 0x44
 80147da:	9310      	str	r3, [sp, #64]	; 0x40
 80147dc:	404b      	eors	r3, r1
 80147de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80147e0:	9314      	str	r3, [sp, #80]	; 0x50
 80147e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80147e4:	9007      	str	r0, [sp, #28]
 80147e6:	4053      	eors	r3, r2
 80147e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80147ea:	9315      	str	r3, [sp, #84]	; 0x54
 80147ec:	9006      	str	r0, [sp, #24]
 80147ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80147f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80147f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80147f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80147f6:	1a12      	subs	r2, r2, r0
 80147f8:	418b      	sbcs	r3, r1
 80147fa:	9200      	str	r2, [sp, #0]
 80147fc:	9301      	str	r3, [sp, #4]
            const long long value = va_arg(va, long long);
 80147fe:	3508      	adds	r5, #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8014800:	9408      	str	r4, [sp, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8014802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014804:	003a      	movs	r2, r7
 8014806:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014808:	980d      	ldr	r0, [sp, #52]	; 0x34
 801480a:	f7ff fea0 	bl	801454e <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 801480e:	0007      	movs	r7, r0
        break;
 8014810:	002e      	movs	r6, r5
  while (*format)
 8014812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014814:	7818      	ldrb	r0, [r3, #0]
 8014816:	2800      	cmp	r0, #0
 8014818:	d000      	beq.n	801481c <_vsnprintf+0x228>
 801481a:	e6f8      	b.n	801460e <_vsnprintf+0x1a>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 801481c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801481e:	003a      	movs	r2, r7
 8014820:	429f      	cmp	r7, r3
 8014822:	d300      	bcc.n	8014826 <_vsnprintf+0x232>
 8014824:	1e5a      	subs	r2, r3, #1
 8014826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014828:	990e      	ldr	r1, [sp, #56]	; 0x38
 801482a:	2000      	movs	r0, #0
 801482c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801482e:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
}
 8014830:	0038      	movs	r0, r7
 8014832:	b019      	add	sp, #100	; 0x64
 8014834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (*format) {
 8014836:	2873      	cmp	r0, #115	; 0x73
 8014838:	d100      	bne.n	801483c <_vsnprintf+0x248>
 801483a:	e0a7      	b.n	801498c <_vsnprintf+0x398>
 801483c:	d812      	bhi.n	8014864 <_vsnprintf+0x270>
 801483e:	286f      	cmp	r0, #111	; 0x6f
 8014840:	d100      	bne.n	8014844 <_vsnprintf+0x250>
 8014842:	e101      	b.n	8014a48 <_vsnprintf+0x454>
 8014844:	2870      	cmp	r0, #112	; 0x70
 8014846:	d000      	beq.n	801484a <_vsnprintf+0x256>
 8014848:	e6e6      	b.n	8014618 <_vsnprintf+0x24>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 801484a:	2321      	movs	r3, #33	; 0x21
 801484c:	431c      	orrs	r4, r3
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 801484e:	3b19      	subs	r3, #25
 8014850:	9304      	str	r3, [sp, #16]
 8014852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014854:	1d35      	adds	r5, r6, #4
 8014856:	9303      	str	r3, [sp, #12]
 8014858:	2310      	movs	r3, #16
 801485a:	9302      	str	r3, [sp, #8]
 801485c:	2300      	movs	r3, #0
 801485e:	9405      	str	r4, [sp, #20]
 8014860:	9301      	str	r3, [sp, #4]
 8014862:	e049      	b.n	80148f8 <_vsnprintf+0x304>
    switch (*format) {
 8014864:	2875      	cmp	r0, #117	; 0x75
 8014866:	d100      	bne.n	801486a <_vsnprintf+0x276>
 8014868:	e793      	b.n	8014792 <_vsnprintf+0x19e>
 801486a:	2878      	cmp	r0, #120	; 0x78
 801486c:	d000      	beq.n	8014870 <_vsnprintf+0x27c>
 801486e:	e6d3      	b.n	8014618 <_vsnprintf+0x24>
          base = 16U;
 8014870:	2310      	movs	r3, #16
 8014872:	e795      	b.n	80147a0 <_vsnprintf+0x1ac>
 8014874:	1d35      	adds	r5, r6, #4
          else if (flags & FLAGS_LONG) {
 8014876:	05e2      	lsls	r2, r4, #23
 8014878:	d513      	bpl.n	80148a2 <_vsnprintf+0x2ae>
            const long value = va_arg(va, long);
 801487a:	6832      	ldr	r2, [r6, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 801487c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801487e:	9302      	str	r3, [sp, #8]
 8014880:	0fd3      	lsrs	r3, r2, #31
 8014882:	9104      	str	r1, [sp, #16]
 8014884:	9301      	str	r3, [sp, #4]
 8014886:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014888:	17d3      	asrs	r3, r2, #31
 801488a:	18d2      	adds	r2, r2, r3
 801488c:	9405      	str	r4, [sp, #20]
 801488e:	9103      	str	r1, [sp, #12]
 8014890:	405a      	eors	r2, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8014892:	9200      	str	r2, [sp, #0]
 8014894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014896:	003a      	movs	r2, r7
 8014898:	990e      	ldr	r1, [sp, #56]	; 0x38
 801489a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801489c:	f7ff fe0f 	bl	80144be <_ntoa_long>
 80148a0:	e7b5      	b.n	801480e <_vsnprintf+0x21a>
 80148a2:	6832      	ldr	r2, [r6, #0]
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80148a4:	0661      	lsls	r1, r4, #25
 80148a6:	d501      	bpl.n	80148ac <_vsnprintf+0x2b8>
 80148a8:	b252      	sxtb	r2, r2
 80148aa:	e7e7      	b.n	801487c <_vsnprintf+0x288>
 80148ac:	0621      	lsls	r1, r4, #24
 80148ae:	d5e5      	bpl.n	801487c <_vsnprintf+0x288>
 80148b0:	b212      	sxth	r2, r2
 80148b2:	e7e3      	b.n	801487c <_vsnprintf+0x288>
          if (flags & FLAGS_LONG_LONG) {
 80148b4:	2a00      	cmp	r2, #0
 80148b6:	d015      	beq.n	80148e4 <_vsnprintf+0x2f0>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80148b8:	2107      	movs	r1, #7
 80148ba:	1df2      	adds	r2, r6, #7
 80148bc:	438a      	bics	r2, r1
 80148be:	9304      	str	r3, [sp, #16]
 80148c0:	2300      	movs	r3, #0
 80148c2:	0015      	movs	r5, r2
 80148c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80148c6:	9408      	str	r4, [sp, #32]
 80148c8:	9107      	str	r1, [sp, #28]
 80148ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148cc:	9305      	str	r3, [sp, #20]
 80148ce:	9106      	str	r1, [sp, #24]
 80148d0:	9302      	str	r3, [sp, #8]
 80148d2:	6813      	ldr	r3, [r2, #0]
 80148d4:	6854      	ldr	r4, [r2, #4]
 80148d6:	3508      	adds	r5, #8
 80148d8:	9300      	str	r3, [sp, #0]
 80148da:	9401      	str	r4, [sp, #4]
 80148dc:	e791      	b.n	8014802 <_vsnprintf+0x20e>
 80148de:	46c0      	nop			; (mov r8, r8)
 80148e0:	08014365 	.word	0x08014365
 80148e4:	1d35      	adds	r5, r6, #4
          else if (flags & FLAGS_LONG) {
 80148e6:	05e1      	lsls	r1, r4, #23
 80148e8:	d509      	bpl.n	80148fe <_vsnprintf+0x30a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80148ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80148ec:	9405      	str	r4, [sp, #20]
 80148ee:	9104      	str	r1, [sp, #16]
 80148f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148f2:	9302      	str	r3, [sp, #8]
 80148f4:	9103      	str	r1, [sp, #12]
 80148f6:	9201      	str	r2, [sp, #4]
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80148f8:	6833      	ldr	r3, [r6, #0]
 80148fa:	9300      	str	r3, [sp, #0]
 80148fc:	e7ca      	b.n	8014894 <_vsnprintf+0x2a0>
 80148fe:	6832      	ldr	r2, [r6, #0]
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8014900:	0661      	lsls	r1, r4, #25
 8014902:	d509      	bpl.n	8014918 <_vsnprintf+0x324>
 8014904:	b2d2      	uxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8014906:	9302      	str	r3, [sp, #8]
 8014908:	2300      	movs	r3, #0
 801490a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801490c:	9405      	str	r4, [sp, #20]
 801490e:	9104      	str	r1, [sp, #16]
 8014910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014912:	9301      	str	r3, [sp, #4]
 8014914:	9103      	str	r1, [sp, #12]
 8014916:	e7bc      	b.n	8014892 <_vsnprintf+0x29e>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8014918:	0621      	lsls	r1, r4, #24
 801491a:	d5f4      	bpl.n	8014906 <_vsnprintf+0x312>
 801491c:	b292      	uxth	r2, r2
 801491e:	e7f2      	b.n	8014906 <_vsnprintf+0x312>
        if (!(flags & FLAGS_LEFT)) {
 8014920:	2302      	movs	r3, #2
 8014922:	4023      	ands	r3, r4
 8014924:	930b      	str	r3, [sp, #44]	; 0x2c
 8014926:	d026      	beq.n	8014976 <_vsnprintf+0x382>
        unsigned int l = 1U;
 8014928:	2301      	movs	r3, #1
 801492a:	003c      	movs	r4, r7
 801492c:	9312      	str	r3, [sp, #72]	; 0x48
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 801492e:	6830      	ldr	r0, [r6, #0]
 8014930:	1d33      	adds	r3, r6, #4
 8014932:	9313      	str	r3, [sp, #76]	; 0x4c
 8014934:	b2c0      	uxtb	r0, r0
 8014936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014938:	0022      	movs	r2, r4
 801493a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801493c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801493e:	47a8      	blx	r5
        if (flags & FLAGS_LEFT) {
 8014940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8014942:	1c67      	adds	r7, r4, #1
        if (flags & FLAGS_LEFT) {
 8014944:	2b00      	cmp	r3, #0
 8014946:	d006      	beq.n	8014956 <_vsnprintf+0x362>
 8014948:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801494a:	3d01      	subs	r5, #1
 801494c:	1b2d      	subs	r5, r5, r4
          while (l++ < width) {
 801494e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014950:	197b      	adds	r3, r7, r5
 8014952:	4293      	cmp	r3, r2
 8014954:	d311      	bcc.n	801497a <_vsnprintf+0x386>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8014956:	9e13      	ldr	r6, [sp, #76]	; 0x4c
        break;
 8014958:	e75b      	b.n	8014812 <_vsnprintf+0x21e>
            out(' ', buffer, idx++, maxlen);
 801495a:	0022      	movs	r2, r4
 801495c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801495e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014960:	2020      	movs	r0, #32
 8014962:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014964:	47a0      	blx	r4
 8014966:	1cab      	adds	r3, r5, #2
 8014968:	9312      	str	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 801496a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801496c:	197c      	adds	r4, r7, r5
 801496e:	3501      	adds	r5, #1
 8014970:	429d      	cmp	r5, r3
 8014972:	d3f2      	bcc.n	801495a <_vsnprintf+0x366>
 8014974:	e7db      	b.n	801492e <_vsnprintf+0x33a>
 8014976:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014978:	e7f5      	b.n	8014966 <_vsnprintf+0x372>
            out(' ', buffer, idx++, maxlen);
 801497a:	003a      	movs	r2, r7
 801497c:	1c7c      	adds	r4, r7, #1
 801497e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014980:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014982:	2020      	movs	r0, #32
 8014984:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8014986:	47b0      	blx	r6
 8014988:	0027      	movs	r7, r4
 801498a:	e7e0      	b.n	801494e <_vsnprintf+0x35a>
        const char* p = va_arg(va, char*);
 801498c:	1d33      	adds	r3, r6, #4
 801498e:	9317      	str	r3, [sp, #92]	; 0x5c
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8014990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        const char* p = va_arg(va, char*);
 8014992:	6836      	ldr	r6, [r6, #0]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8014994:	2b00      	cmp	r3, #0
 8014996:	d101      	bne.n	801499c <_vsnprintf+0x3a8>
 8014998:	2301      	movs	r3, #1
 801499a:	425b      	negs	r3, r3
 801499c:	0035      	movs	r5, r6
 801499e:	18f3      	adds	r3, r6, r3
  for (s = str; *s && maxsize--; ++s);
 80149a0:	782a      	ldrb	r2, [r5, #0]
 80149a2:	2a00      	cmp	r2, #0
 80149a4:	d001      	beq.n	80149aa <_vsnprintf+0x3b6>
 80149a6:	42ab      	cmp	r3, r5
 80149a8:	d112      	bne.n	80149d0 <_vsnprintf+0x3dc>
        if (flags & FLAGS_PRECISION) {
 80149aa:	2380      	movs	r3, #128	; 0x80
 80149ac:	00db      	lsls	r3, r3, #3
 80149ae:	4023      	ands	r3, r4
  return (unsigned int)(s - str);
 80149b0:	1bad      	subs	r5, r5, r6
        if (flags & FLAGS_PRECISION) {
 80149b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d003      	beq.n	80149c0 <_vsnprintf+0x3cc>
          l = (l < precision ? l : precision);
 80149b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149ba:	429d      	cmp	r5, r3
 80149bc:	d900      	bls.n	80149c0 <_vsnprintf+0x3cc>
 80149be:	001d      	movs	r5, r3
        if (!(flags & FLAGS_LEFT)) {
 80149c0:	2302      	movs	r3, #2
 80149c2:	4023      	ands	r3, r4
 80149c4:	9316      	str	r3, [sp, #88]	; 0x58
 80149c6:	d014      	beq.n	80149f2 <_vsnprintf+0x3fe>
 80149c8:	003c      	movs	r4, r7
 80149ca:	9512      	str	r5, [sp, #72]	; 0x48
 80149cc:	0025      	movs	r5, r4
 80149ce:	e01a      	b.n	8014a06 <_vsnprintf+0x412>
  for (s = str; *s && maxsize--; ++s);
 80149d0:	3501      	adds	r5, #1
 80149d2:	e7e5      	b.n	80149a0 <_vsnprintf+0x3ac>
            out(' ', buffer, idx++, maxlen);
 80149d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149d6:	0022      	movs	r2, r4
 80149d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80149da:	2020      	movs	r0, #32
 80149dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80149de:	47a0      	blx	r4
          while (l++ < width) {
 80149e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80149e2:	1c5a      	adds	r2, r3, #1
 80149e4:	9212      	str	r2, [sp, #72]	; 0x48
 80149e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149e8:	1b7c      	subs	r4, r7, r5
 80149ea:	18e4      	adds	r4, r4, r3
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d8f1      	bhi.n	80149d4 <_vsnprintf+0x3e0>
 80149f0:	e7ec      	b.n	80149cc <_vsnprintf+0x3d8>
 80149f2:	002b      	movs	r3, r5
 80149f4:	e7f5      	b.n	80149e2 <_vsnprintf+0x3ee>
 80149f6:	930b      	str	r3, [sp, #44]	; 0x2c
          out(*(p++), buffer, idx++, maxlen);
 80149f8:	1c6f      	adds	r7, r5, #1
 80149fa:	002a      	movs	r2, r5
 80149fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014a00:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014a02:	47a8      	blx	r5
 8014a04:	003d      	movs	r5, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8014a06:	1b33      	subs	r3, r6, r4
 8014a08:	5d58      	ldrb	r0, [r3, r5]
 8014a0a:	2800      	cmp	r0, #0
 8014a0c:	d007      	beq.n	8014a1e <_vsnprintf+0x42a>
 8014a0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d0f1      	beq.n	80149f8 <_vsnprintf+0x404>
 8014a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a18:	3b01      	subs	r3, #1
 8014a1a:	2a00      	cmp	r2, #0
 8014a1c:	d1eb      	bne.n	80149f6 <_vsnprintf+0x402>
        if (flags & FLAGS_LEFT) {
 8014a1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014a20:	002f      	movs	r7, r5
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d109      	bne.n	8014a3a <_vsnprintf+0x446>
        const char* p = va_arg(va, char*);
 8014a26:	9e17      	ldr	r6, [sp, #92]	; 0x5c
        break;
 8014a28:	e6f3      	b.n	8014812 <_vsnprintf+0x21e>
            out(' ', buffer, idx++, maxlen);
 8014a2a:	003a      	movs	r2, r7
 8014a2c:	1c7c      	adds	r4, r7, #1
 8014a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a30:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014a32:	2020      	movs	r0, #32
 8014a34:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8014a36:	47b0      	blx	r6
 8014a38:	0027      	movs	r7, r4
 8014a3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 8014a3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014a3e:	1b5b      	subs	r3, r3, r5
 8014a40:	19db      	adds	r3, r3, r7
 8014a42:	4293      	cmp	r3, r2
 8014a44:	d3f1      	bcc.n	8014a2a <_vsnprintf+0x436>
 8014a46:	e7ee      	b.n	8014a26 <_vsnprintf+0x432>
          base =  8U;
 8014a48:	2308      	movs	r3, #8
 8014a4a:	e6a9      	b.n	80147a0 <_vsnprintf+0x1ac>
          base =  2U;
 8014a4c:	2302      	movs	r3, #2
 8014a4e:	e6a7      	b.n	80147a0 <_vsnprintf+0x1ac>

08014a50 <vsnprintf_>:
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 8014a50:	b507      	push	{r0, r1, r2, lr}
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 8014a52:	9300      	str	r3, [sp, #0]
 8014a54:	0013      	movs	r3, r2
 8014a56:	000a      	movs	r2, r1
 8014a58:	0001      	movs	r1, r0
 8014a5a:	4802      	ldr	r0, [pc, #8]	; (8014a64 <vsnprintf_+0x14>)
 8014a5c:	f7ff fdca 	bl	80145f4 <_vsnprintf>
}
 8014a60:	bd0e      	pop	{r1, r2, r3, pc}
 8014a62:	46c0      	nop			; (mov r8, r8)
 8014a64:	0801435d 	.word	0x0801435d

08014a68 <fctvprintf>:
  va_end(va);
  return ret;
}

int fctvprintf(void (*out)(char character, void* arg), void* arg, const char* format, va_list va)
{
 8014a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 8014a6a:	9103      	str	r1, [sp, #12]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8014a6c:	2101      	movs	r1, #1
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 8014a6e:	9002      	str	r0, [sp, #8]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8014a70:	9300      	str	r3, [sp, #0]
 8014a72:	4804      	ldr	r0, [pc, #16]	; (8014a84 <fctvprintf+0x1c>)
 8014a74:	0013      	movs	r3, r2
 8014a76:	424a      	negs	r2, r1
 8014a78:	a902      	add	r1, sp, #8
 8014a7a:	f7ff fdbb 	bl	80145f4 <_vsnprintf>
}
 8014a7e:	b005      	add	sp, #20
 8014a80:	bd00      	pop	{pc}
 8014a82:	46c0      	nop			; (mov r8, r8)
 8014a84:	08014367 	.word	0x08014367

08014a88 <malloc>:
 8014a88:	b510      	push	{r4, lr}
 8014a8a:	4b03      	ldr	r3, [pc, #12]	; (8014a98 <malloc+0x10>)
 8014a8c:	0001      	movs	r1, r0
 8014a8e:	6818      	ldr	r0, [r3, #0]
 8014a90:	f7fd fc3c 	bl	801230c <_malloc_r>
 8014a94:	bd10      	pop	{r4, pc}
 8014a96:	46c0      	nop			; (mov r8, r8)
 8014a98:	20000008 	.word	0x20000008

08014a9c <free>:
 8014a9c:	b510      	push	{r4, lr}
 8014a9e:	4b03      	ldr	r3, [pc, #12]	; (8014aac <free+0x10>)
 8014aa0:	0001      	movs	r1, r0
 8014aa2:	6818      	ldr	r0, [r3, #0]
 8014aa4:	f7fd fbe8 	bl	8012278 <_free_r>
 8014aa8:	bd10      	pop	{r4, pc}
 8014aaa:	46c0      	nop			; (mov r8, r8)
 8014aac:	20000008 	.word	0x20000008

08014ab0 <memcpy>:
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	b510      	push	{r4, lr}
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d100      	bne.n	8014aba <memcpy+0xa>
 8014ab8:	bd10      	pop	{r4, pc}
 8014aba:	5ccc      	ldrb	r4, [r1, r3]
 8014abc:	54c4      	strb	r4, [r0, r3]
 8014abe:	3301      	adds	r3, #1
 8014ac0:	e7f8      	b.n	8014ab4 <memcpy+0x4>

08014ac2 <memmove>:
 8014ac2:	b510      	push	{r4, lr}
 8014ac4:	4288      	cmp	r0, r1
 8014ac6:	d902      	bls.n	8014ace <memmove+0xc>
 8014ac8:	188b      	adds	r3, r1, r2
 8014aca:	4298      	cmp	r0, r3
 8014acc:	d303      	bcc.n	8014ad6 <memmove+0x14>
 8014ace:	2300      	movs	r3, #0
 8014ad0:	e007      	b.n	8014ae2 <memmove+0x20>
 8014ad2:	5c8b      	ldrb	r3, [r1, r2]
 8014ad4:	5483      	strb	r3, [r0, r2]
 8014ad6:	3a01      	subs	r2, #1
 8014ad8:	d2fb      	bcs.n	8014ad2 <memmove+0x10>
 8014ada:	bd10      	pop	{r4, pc}
 8014adc:	5ccc      	ldrb	r4, [r1, r3]
 8014ade:	54c4      	strb	r4, [r0, r3]
 8014ae0:	3301      	adds	r3, #1
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d1fa      	bne.n	8014adc <memmove+0x1a>
 8014ae6:	e7f8      	b.n	8014ada <memmove+0x18>

08014ae8 <_init>:
 8014ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aea:	46c0      	nop			; (mov r8, r8)
 8014aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014aee:	bc08      	pop	{r3}
 8014af0:	469e      	mov	lr, r3
 8014af2:	4770      	bx	lr

08014af4 <_fini>:
 8014af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014af6:	46c0      	nop			; (mov r8, r8)
 8014af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014afa:	bc08      	pop	{r3}
 8014afc:	469e      	mov	lr, r3
 8014afe:	4770      	bx	lr
