
out/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015de8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009060  08015ea8  08015ea8  00025ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ef08  0801ef08  0002ef08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ef10  0801ef10  0002ef10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ef14  0801ef14  0002ef14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0801ef18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000658  20000070  0801ef88  00030070  2**2
                  ALLOC
  8 ._user_heap_stack 00001600  200006c8  0801ef88  000306c8  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dd8a  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b81  00000000  00000000  0005de22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001adc9  00000000  00000000  0005f9a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000160  00000000  00000000  0007a76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000047c8  00000000  00000000  0007a8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008116  00000000  00000000  0007f094  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000c7d4  00000000  00000000  000871aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007f  00000000  00000000  0009397e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e94  00000000  00000000  00093a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000054  00000000  00000000  00097894  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000a9  00000000  00000000  000978e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08015e8c 	.word	0x08015e8c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08015e8c 	.word	0x08015e8c

08000104 <acc_probes_execute>:
 8000104:	230c      	movs	r3, #12
 8000106:	b510      	push	{r4, lr}
 8000108:	7804      	ldrb	r4, [r0, #0]
 800010a:	435c      	muls	r4, r3
 800010c:	4b03      	ldr	r3, [pc, #12]	; (800011c <acc_probes_execute+0x18>)
 800010e:	191b      	adds	r3, r3, r4
 8000110:	685c      	ldr	r4, [r3, #4]
 8000112:	2c00      	cmp	r4, #0
 8000114:	d001      	beq.n	800011a <acc_probes_execute+0x16>
 8000116:	689b      	ldr	r3, [r3, #8]
 8000118:	47a0      	blx	r4
 800011a:	bd10      	pop	{r4, pc}
 800011c:	080181ec 	.word	0x080181ec

08000120 <acc_probes_execute_primitive_probe>:
 8000120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000122:	9102      	str	r1, [sp, #8]
 8000124:	2100      	movs	r1, #0
 8000126:	ab01      	add	r3, sp, #4
 8000128:	7018      	strb	r0, [r3, #0]
 800012a:	000a      	movs	r2, r1
 800012c:	0018      	movs	r0, r3
 800012e:	9103      	str	r1, [sp, #12]
 8000130:	f7ff ffe8 	bl	8000104 <acc_probes_execute>
 8000134:	b005      	add	sp, #20
 8000136:	bd00      	pop	{pc}

08000138 <acc_probes_execute_uint16>:
 8000138:	b530      	push	{r4, r5, lr}
 800013a:	000c      	movs	r4, r1
 800013c:	0011      	movs	r1, r2
 800013e:	2201      	movs	r2, #1
 8000140:	0005      	movs	r5, r0
 8000142:	b085      	sub	sp, #20
 8000144:	a801      	add	r0, sp, #4
 8000146:	6082      	str	r2, [r0, #8]
 8000148:	005a      	lsls	r2, r3, #1
 800014a:	7005      	strb	r5, [r0, #0]
 800014c:	6044      	str	r4, [r0, #4]
 800014e:	f7ff ffd9 	bl	8000104 <acc_probes_execute>
 8000152:	b005      	add	sp, #20
 8000154:	bd30      	pop	{r4, r5, pc}

08000156 <validate.lto_priv.117>:
 8000156:	6983      	ldr	r3, [r0, #24]
 8000158:	b510      	push	{r4, lr}
 800015a:	0004      	movs	r4, r0
 800015c:	2b00      	cmp	r3, #0
 800015e:	d00a      	beq.n	8000176 <validate.lto_priv.117+0x20>
 8000160:	4b12      	ldr	r3, [pc, #72]	; (80001ac <validate.lto_priv.117+0x56>)
 8000162:	001a      	movs	r2, r3
 8000164:	3230      	adds	r2, #48	; 0x30
 8000166:	7812      	ldrb	r2, [r2, #0]
 8000168:	2a00      	cmp	r2, #0
 800016a:	d004      	beq.n	8000176 <validate.lto_priv.117+0x20>
 800016c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800016e:	4a10      	ldr	r2, [pc, #64]	; (80001b0 <validate.lto_priv.117+0x5a>)
 8000170:	4910      	ldr	r1, [pc, #64]	; (80001b4 <validate.lto_priv.117+0x5e>)
 8000172:	2001      	movs	r0, #1
 8000174:	4798      	blx	r3
 8000176:	69e3      	ldr	r3, [r4, #28]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d00a      	beq.n	8000192 <validate.lto_priv.117+0x3c>
 800017c:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <validate.lto_priv.117+0x56>)
 800017e:	001a      	movs	r2, r3
 8000180:	3230      	adds	r2, #48	; 0x30
 8000182:	7812      	ldrb	r2, [r2, #0]
 8000184:	2a00      	cmp	r2, #0
 8000186:	d004      	beq.n	8000192 <validate.lto_priv.117+0x3c>
 8000188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800018a:	4a0b      	ldr	r2, [pc, #44]	; (80001b8 <validate.lto_priv.117+0x62>)
 800018c:	4909      	ldr	r1, [pc, #36]	; (80001b4 <validate.lto_priv.117+0x5e>)
 800018e:	2001      	movs	r0, #1
 8000190:	4798      	blx	r3
 8000192:	6963      	ldr	r3, [r4, #20]
 8000194:	2001      	movs	r0, #1
 8000196:	2b00      	cmp	r3, #0
 8000198:	d006      	beq.n	80001a8 <validate.lto_priv.117+0x52>
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <validate.lto_priv.117+0x56>)
 800019c:	2000      	movs	r0, #0
 800019e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001a0:	4a06      	ldr	r2, [pc, #24]	; (80001bc <validate.lto_priv.117+0x66>)
 80001a2:	4904      	ldr	r1, [pc, #16]	; (80001b4 <validate.lto_priv.117+0x5e>)
 80001a4:	4798      	blx	r3
 80001a6:	2000      	movs	r0, #0
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	46c0      	nop			; (mov r8, r8)
 80001ac:	200004a8 	.word	0x200004a8
 80001b0:	0801c24c 	.word	0x0801c24c
 80001b4:	0801c25d 	.word	0x0801c25d
 80001b8:	0801c273 	.word	0x0801c273
 80001bc:	0801c282 	.word	0x0801c282

080001c0 <filter_no_operation>:
 80001c0:	4770      	bx	lr

080001c2 <reset.lto_priv.128>:
 80001c2:	4770      	bx	lr

080001c4 <consume>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	0004      	movs	r4, r0
 80001c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80001ca:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80001cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80001ce:	6900      	ldr	r0, [r0, #16]
 80001d0:	4798      	blx	r3
 80001d2:	2200      	movs	r2, #0
 80001d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80001d6:	615a      	str	r2, [r3, #20]
 80001d8:	bd10      	pop	{r4, pc}

080001da <validate.lto_priv.116>:
 80001da:	6942      	ldr	r2, [r0, #20]
 80001dc:	6903      	ldr	r3, [r0, #16]
 80001de:	b510      	push	{r4, lr}
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d107      	bne.n	80001f4 <validate.lto_priv.116+0x1a>
 80001e4:	4b11      	ldr	r3, [pc, #68]	; (800022c <validate.lto_priv.116+0x52>)
 80001e6:	2000      	movs	r0, #0
 80001e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001ea:	4a11      	ldr	r2, [pc, #68]	; (8000230 <validate.lto_priv.116+0x56>)
 80001ec:	4911      	ldr	r1, [pc, #68]	; (8000234 <validate.lto_priv.116+0x5a>)
 80001ee:	4798      	blx	r3
 80001f0:	2000      	movs	r0, #0
 80001f2:	bd10      	pop	{r4, pc}
 80001f4:	6984      	ldr	r4, [r0, #24]
 80001f6:	2c00      	cmp	r4, #0
 80001f8:	d007      	beq.n	800020a <validate.lto_priv.116+0x30>
 80001fa:	4b0c      	ldr	r3, [pc, #48]	; (800022c <validate.lto_priv.116+0x52>)
 80001fc:	2000      	movs	r0, #0
 80001fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000200:	4a0d      	ldr	r2, [pc, #52]	; (8000238 <validate.lto_priv.116+0x5e>)
 8000202:	490c      	ldr	r1, [pc, #48]	; (8000234 <validate.lto_priv.116+0x5a>)
 8000204:	4798      	blx	r3
 8000206:	2000      	movs	r0, #0
 8000208:	e7f3      	b.n	80001f2 <validate.lto_priv.116+0x18>
 800020a:	69c3      	ldr	r3, [r0, #28]
 800020c:	3304      	adds	r3, #4
 800020e:	429a      	cmp	r2, r3
 8000210:	d007      	beq.n	8000222 <validate.lto_priv.116+0x48>
 8000212:	4b06      	ldr	r3, [pc, #24]	; (800022c <validate.lto_priv.116+0x52>)
 8000214:	0020      	movs	r0, r4
 8000216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000218:	4a08      	ldr	r2, [pc, #32]	; (800023c <validate.lto_priv.116+0x62>)
 800021a:	4906      	ldr	r1, [pc, #24]	; (8000234 <validate.lto_priv.116+0x5a>)
 800021c:	4798      	blx	r3
 800021e:	0020      	movs	r0, r4
 8000220:	e7e7      	b.n	80001f2 <validate.lto_priv.116+0x18>
 8000222:	6800      	ldr	r0, [r0, #0]
 8000224:	6883      	ldr	r3, [r0, #8]
 8000226:	4798      	blx	r3
 8000228:	e7e3      	b.n	80001f2 <validate.lto_priv.116+0x18>
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	200004a8 	.word	0x200004a8
 8000230:	0801c2a9 	.word	0x0801c2a9
 8000234:	0801c2d5 	.word	0x0801c2d5
 8000238:	0801c2f9 	.word	0x0801c2f9
 800023c:	0801c319 	.word	0x0801c319

08000240 <reset.lto_priv.127>:
 8000240:	2301      	movs	r3, #1
 8000242:	b510      	push	{r4, lr}
 8000244:	69c2      	ldr	r2, [r0, #28]
 8000246:	6800      	ldr	r0, [r0, #0]
 8000248:	7013      	strb	r3, [r2, #0]
 800024a:	68c3      	ldr	r3, [r0, #12]
 800024c:	4798      	blx	r3
 800024e:	bd10      	pop	{r4, pc}

08000250 <filter_q3_12_complex.lto_priv.144>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	46c6      	mov	lr, r8
 8000254:	000f      	movs	r7, r1
 8000256:	218b      	movs	r1, #139	; 0x8b
 8000258:	b500      	push	{lr}
 800025a:	05c9      	lsls	r1, r1, #23
 800025c:	0006      	movs	r6, r0
 800025e:	1c18      	adds	r0, r3, #0
 8000260:	1c1c      	adds	r4, r3, #0
 8000262:	0895      	lsrs	r5, r2, #2
 8000264:	f010 f910 	bl	8010488 <__aeabi_fmul>
 8000268:	2100      	movs	r1, #0
 800026a:	4680      	mov	r8, r0
 800026c:	1c20      	adds	r0, r4, #0
 800026e:	f010 fe21 	bl	8010eb4 <__aeabi_fcmpge>
 8000272:	2800      	cmp	r0, #0
 8000274:	d10f      	bne.n	8000296 <filter_q3_12_complex.lto_priv.144+0x46>
 8000276:	21bf      	movs	r1, #191	; 0xbf
 8000278:	0609      	lsls	r1, r1, #24
 800027a:	4640      	mov	r0, r8
 800027c:	f00f fe58 	bl	800ff30 <__aeabi_fadd>
 8000280:	f011 f816 	bl	80112b0 <__aeabi_f2iz>
 8000284:	b204      	sxth	r4, r0
 8000286:	0030      	movs	r0, r6
 8000288:	00aa      	lsls	r2, r5, #2
 800028a:	18ba      	adds	r2, r7, r2
 800028c:	42ba      	cmp	r2, r7
 800028e:	d105      	bne.n	800029c <filter_q3_12_complex.lto_priv.144+0x4c>
 8000290:	bc04      	pop	{r2}
 8000292:	4690      	mov	r8, r2
 8000294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000296:	21fc      	movs	r1, #252	; 0xfc
 8000298:	0589      	lsls	r1, r1, #22
 800029a:	e7ee      	b.n	800027a <filter_q3_12_complex.lto_priv.144+0x2a>
 800029c:	2300      	movs	r3, #0
 800029e:	5efe      	ldrsh	r6, [r7, r3]
 80002a0:	2300      	movs	r3, #0
 80002a2:	5ec5      	ldrsh	r5, [r0, r3]
 80002a4:	1bad      	subs	r5, r5, r6
 80002a6:	4365      	muls	r5, r4
 80002a8:	17eb      	asrs	r3, r5, #31
 80002aa:	051b      	lsls	r3, r3, #20
 80002ac:	0d1b      	lsrs	r3, r3, #20
 80002ae:	195b      	adds	r3, r3, r5
 80002b0:	131b      	asrs	r3, r3, #12
 80002b2:	199b      	adds	r3, r3, r6
 80002b4:	803b      	strh	r3, [r7, #0]
 80002b6:	2302      	movs	r3, #2
 80002b8:	5ec5      	ldrsh	r5, [r0, r3]
 80002ba:	2302      	movs	r3, #2
 80002bc:	5efe      	ldrsh	r6, [r7, r3]
 80002be:	3004      	adds	r0, #4
 80002c0:	1bad      	subs	r5, r5, r6
 80002c2:	4365      	muls	r5, r4
 80002c4:	17eb      	asrs	r3, r5, #31
 80002c6:	051b      	lsls	r3, r3, #20
 80002c8:	0d1b      	lsrs	r3, r3, #20
 80002ca:	195b      	adds	r3, r3, r5
 80002cc:	131b      	asrs	r3, r3, #12
 80002ce:	199b      	adds	r3, r3, r6
 80002d0:	807b      	strh	r3, [r7, #2]
 80002d2:	3704      	adds	r7, #4
 80002d4:	e7da      	b.n	800028c <filter_q3_12_complex.lto_priv.144+0x3c>

080002d6 <validate.lto_priv.115>:
 80002d6:	6983      	ldr	r3, [r0, #24]
 80002d8:	b510      	push	{r4, lr}
 80002da:	0004      	movs	r4, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00a      	beq.n	80002f6 <validate.lto_priv.115+0x20>
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <validate.lto_priv.115+0x46>)
 80002e2:	001a      	movs	r2, r3
 80002e4:	3230      	adds	r2, #48	; 0x30
 80002e6:	7812      	ldrb	r2, [r2, #0]
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	d004      	beq.n	80002f6 <validate.lto_priv.115+0x20>
 80002ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <validate.lto_priv.115+0x4a>)
 80002f0:	490c      	ldr	r1, [pc, #48]	; (8000324 <validate.lto_priv.115+0x4e>)
 80002f2:	2001      	movs	r0, #1
 80002f4:	4798      	blx	r3
 80002f6:	69e3      	ldr	r3, [r4, #28]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d00a      	beq.n	8000312 <validate.lto_priv.115+0x3c>
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <validate.lto_priv.115+0x46>)
 80002fe:	001a      	movs	r2, r3
 8000300:	3230      	adds	r2, #48	; 0x30
 8000302:	7812      	ldrb	r2, [r2, #0]
 8000304:	2a00      	cmp	r2, #0
 8000306:	d004      	beq.n	8000312 <validate.lto_priv.115+0x3c>
 8000308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800030a:	4a07      	ldr	r2, [pc, #28]	; (8000328 <validate.lto_priv.115+0x52>)
 800030c:	4905      	ldr	r1, [pc, #20]	; (8000324 <validate.lto_priv.115+0x4e>)
 800030e:	2001      	movs	r0, #1
 8000310:	4798      	blx	r3
 8000312:	6820      	ldr	r0, [r4, #0]
 8000314:	6883      	ldr	r3, [r0, #8]
 8000316:	4798      	blx	r3
 8000318:	bd10      	pop	{r4, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	200004a8 	.word	0x200004a8
 8000320:	0801c24c 	.word	0x0801c24c
 8000324:	0801c340 	.word	0x0801c340
 8000328:	0801c273 	.word	0x0801c273

0800032c <event.lto_priv.141>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	0004      	movs	r4, r0
 8000330:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000332:	6945      	ldr	r5, [r0, #20]
 8000334:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000336:	6819      	ldr	r1, [r3, #0]
 8000338:	6900      	ldr	r0, [r0, #16]
 800033a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800033c:	4798      	blx	r3
 800033e:	7028      	strb	r0, [r5, #0]
 8000340:	6820      	ldr	r0, [r4, #0]
 8000342:	6843      	ldr	r3, [r0, #4]
 8000344:	4798      	blx	r3
 8000346:	bd70      	pop	{r4, r5, r6, pc}

08000348 <saturation_check_i16>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	0005      	movs	r5, r0
 800034c:	000c      	movs	r4, r1
 800034e:	4813      	ldr	r0, [pc, #76]	; (800039c <saturation_check_i16+0x54>)
 8000350:	1c11      	adds	r1, r2, #0
 8000352:	f010 f9cb 	bl	80106ec <__aeabi_fsub>
 8000356:	4911      	ldr	r1, [pc, #68]	; (800039c <saturation_check_i16+0x54>)
 8000358:	f00f ff84 	bl	8010264 <__aeabi_fdiv>
 800035c:	21c7      	movs	r1, #199	; 0xc7
 800035e:	0609      	lsls	r1, r1, #24
 8000360:	1c07      	adds	r7, r0, #0
 8000362:	f010 f891 	bl	8010488 <__aeabi_fmul>
 8000366:	f010 ffa3 	bl	80112b0 <__aeabi_f2iz>
 800036a:	490d      	ldr	r1, [pc, #52]	; (80003a0 <saturation_check_i16+0x58>)
 800036c:	b206      	sxth	r6, r0
 800036e:	1c38      	adds	r0, r7, #0
 8000370:	f010 f88a 	bl	8010488 <__aeabi_fmul>
 8000374:	f010 ff9c 	bl	80112b0 <__aeabi_f2iz>
 8000378:	0864      	lsrs	r4, r4, #1
 800037a:	0064      	lsls	r4, r4, #1
 800037c:	b200      	sxth	r0, r0
 800037e:	192c      	adds	r4, r5, r4
 8000380:	42a5      	cmp	r5, r4
 8000382:	d101      	bne.n	8000388 <saturation_check_i16+0x40>
 8000384:	2000      	movs	r0, #0
 8000386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000388:	2300      	movs	r3, #0
 800038a:	5eea      	ldrsh	r2, [r5, r3]
 800038c:	4290      	cmp	r0, r2
 800038e:	dd02      	ble.n	8000396 <saturation_check_i16+0x4e>
 8000390:	3502      	adds	r5, #2
 8000392:	4296      	cmp	r6, r2
 8000394:	dbf4      	blt.n	8000380 <saturation_check_i16+0x38>
 8000396:	2001      	movs	r0, #1
 8000398:	e7f5      	b.n	8000386 <saturation_check_i16+0x3e>
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	42c80000 	.word	0x42c80000
 80003a0:	46fffe00 	.word	0x46fffe00

080003a4 <validate.lto_priv.114>:
 80003a4:	6903      	ldr	r3, [r0, #16]
 80003a6:	6942      	ldr	r2, [r0, #20]
 80003a8:	b510      	push	{r4, lr}
 80003aa:	0004      	movs	r4, r0
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d007      	beq.n	80003c0 <validate.lto_priv.114+0x1c>
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <validate.lto_priv.114+0x5c>)
 80003b2:	2000      	movs	r0, #0
 80003b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b6:	4a13      	ldr	r2, [pc, #76]	; (8000404 <validate.lto_priv.114+0x60>)
 80003b8:	4913      	ldr	r1, [pc, #76]	; (8000408 <validate.lto_priv.114+0x64>)
 80003ba:	4798      	blx	r3
 80003bc:	2000      	movs	r0, #0
 80003be:	bd10      	pop	{r4, pc}
 80003c0:	6983      	ldr	r3, [r0, #24]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d00a      	beq.n	80003dc <validate.lto_priv.114+0x38>
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <validate.lto_priv.114+0x5c>)
 80003c8:	001a      	movs	r2, r3
 80003ca:	3230      	adds	r2, #48	; 0x30
 80003cc:	7812      	ldrb	r2, [r2, #0]
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d004      	beq.n	80003dc <validate.lto_priv.114+0x38>
 80003d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <validate.lto_priv.114+0x68>)
 80003d6:	490c      	ldr	r1, [pc, #48]	; (8000408 <validate.lto_priv.114+0x64>)
 80003d8:	2001      	movs	r0, #1
 80003da:	4798      	blx	r3
 80003dc:	69e3      	ldr	r3, [r4, #28]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d00a      	beq.n	80003f8 <validate.lto_priv.114+0x54>
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <validate.lto_priv.114+0x5c>)
 80003e4:	001a      	movs	r2, r3
 80003e6:	3230      	adds	r2, #48	; 0x30
 80003e8:	7812      	ldrb	r2, [r2, #0]
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d004      	beq.n	80003f8 <validate.lto_priv.114+0x54>
 80003ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003f0:	4a07      	ldr	r2, [pc, #28]	; (8000410 <validate.lto_priv.114+0x6c>)
 80003f2:	4905      	ldr	r1, [pc, #20]	; (8000408 <validate.lto_priv.114+0x64>)
 80003f4:	2001      	movs	r0, #1
 80003f6:	4798      	blx	r3
 80003f8:	6820      	ldr	r0, [r4, #0]
 80003fa:	6883      	ldr	r3, [r0, #8]
 80003fc:	4798      	blx	r3
 80003fe:	e7de      	b.n	80003be <validate.lto_priv.114+0x1a>
 8000400:	200004a8 	.word	0x200004a8
 8000404:	0801c359 	.word	0x0801c359
 8000408:	0801c381 	.word	0x0801c381
 800040c:	0801c24c 	.word	0x0801c24c
 8000410:	0801c273 	.word	0x0801c273

08000414 <event.lto_priv.140>:
 8000414:	b510      	push	{r4, lr}
 8000416:	0004      	movs	r4, r0
 8000418:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800041a:	4798      	blx	r3
 800041c:	6820      	ldr	r0, [r4, #0]
 800041e:	6843      	ldr	r3, [r0, #4]
 8000420:	4798      	blx	r3
 8000422:	bd10      	pop	{r4, pc}

08000424 <validate.lto_priv.113>:
 8000424:	6983      	ldr	r3, [r0, #24]
 8000426:	b510      	push	{r4, lr}
 8000428:	0004      	movs	r4, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d00a      	beq.n	8000444 <validate.lto_priv.113+0x20>
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <validate.lto_priv.113+0x44>)
 8000430:	001a      	movs	r2, r3
 8000432:	3230      	adds	r2, #48	; 0x30
 8000434:	7812      	ldrb	r2, [r2, #0]
 8000436:	2a00      	cmp	r2, #0
 8000438:	d004      	beq.n	8000444 <validate.lto_priv.113+0x20>
 800043a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800043c:	4a0b      	ldr	r2, [pc, #44]	; (800046c <validate.lto_priv.113+0x48>)
 800043e:	490c      	ldr	r1, [pc, #48]	; (8000470 <validate.lto_priv.113+0x4c>)
 8000440:	2001      	movs	r0, #1
 8000442:	4798      	blx	r3
 8000444:	69e3      	ldr	r3, [r4, #28]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d00a      	beq.n	8000460 <validate.lto_priv.113+0x3c>
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <validate.lto_priv.113+0x44>)
 800044c:	001a      	movs	r2, r3
 800044e:	3230      	adds	r2, #48	; 0x30
 8000450:	7812      	ldrb	r2, [r2, #0]
 8000452:	2a00      	cmp	r2, #0
 8000454:	d004      	beq.n	8000460 <validate.lto_priv.113+0x3c>
 8000456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000458:	4a06      	ldr	r2, [pc, #24]	; (8000474 <validate.lto_priv.113+0x50>)
 800045a:	4905      	ldr	r1, [pc, #20]	; (8000470 <validate.lto_priv.113+0x4c>)
 800045c:	2001      	movs	r0, #1
 800045e:	4798      	blx	r3
 8000460:	6820      	ldr	r0, [r4, #0]
 8000462:	6883      	ldr	r3, [r0, #8]
 8000464:	4798      	blx	r3
 8000466:	bd10      	pop	{r4, pc}
 8000468:	200004a8 	.word	0x200004a8
 800046c:	0801c24c 	.word	0x0801c24c
 8000470:	0801c39c 	.word	0x0801c39c
 8000474:	0801c273 	.word	0x0801c273

08000478 <event.lto_priv.139>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	0004      	movs	r4, r0
 800047c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800047e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000480:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8000482:	6809      	ldr	r1, [r1, #0]
 8000484:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000486:	6900      	ldr	r0, [r0, #16]
 8000488:	47a8      	blx	r5
 800048a:	6820      	ldr	r0, [r4, #0]
 800048c:	6843      	ldr	r3, [r0, #4]
 800048e:	4798      	blx	r3
 8000490:	bd70      	pop	{r4, r5, r6, pc}

08000492 <noise_level_normalization_u16>:
 8000492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000494:	464f      	mov	r7, r9
 8000496:	4646      	mov	r6, r8
 8000498:	46d6      	mov	lr, sl
 800049a:	b5c0      	push	{r6, r7, lr}
 800049c:	001f      	movs	r7, r3
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <noise_level_normalization_u16+0x62>)
 80004a0:	0016      	movs	r6, r2
 80004a2:	4698      	mov	r8, r3
 80004a4:	2301      	movs	r3, #1
 80004a6:	425b      	negs	r3, r3
 80004a8:	4699      	mov	r9, r3
 80004aa:	2300      	movs	r3, #0
 80004ac:	0004      	movs	r4, r0
 80004ae:	469a      	mov	sl, r3
 80004b0:	084d      	lsrs	r5, r1, #1
 80004b2:	006d      	lsls	r5, r5, #1
 80004b4:	1945      	adds	r5, r0, r5
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	d104      	bne.n	80004c4 <noise_level_normalization_u16+0x32>
 80004ba:	bc1c      	pop	{r2, r3, r4}
 80004bc:	4690      	mov	r8, r2
 80004be:	4699      	mov	r9, r3
 80004c0:	46a2      	mov	sl, r4
 80004c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <noise_level_normalization_u16+0x66>)
 80004c6:	8820      	ldrh	r0, [r4, #0]
 80004c8:	469c      	mov	ip, r3
 80004ca:	4460      	add	r0, ip
 80004cc:	4378      	muls	r0, r7
 80004ce:	0031      	movs	r1, r6
 80004d0:	f010 fb96 	bl	8010c00 <__divsi3>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	021b      	lsls	r3, r3, #8
 80004d8:	18c0      	adds	r0, r0, r3
 80004da:	d503      	bpl.n	80004e4 <noise_level_normalization_u16+0x52>
 80004dc:	4653      	mov	r3, sl
 80004de:	8023      	strh	r3, [r4, #0]
 80004e0:	3402      	adds	r4, #2
 80004e2:	e7e8      	b.n	80004b6 <noise_level_normalization_u16+0x24>
 80004e4:	4540      	cmp	r0, r8
 80004e6:	dd02      	ble.n	80004ee <noise_level_normalization_u16+0x5c>
 80004e8:	464b      	mov	r3, r9
 80004ea:	8023      	strh	r3, [r4, #0]
 80004ec:	e7f8      	b.n	80004e0 <noise_level_normalization_u16+0x4e>
 80004ee:	8020      	strh	r0, [r4, #0]
 80004f0:	e7f6      	b.n	80004e0 <noise_level_normalization_u16+0x4e>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	0000ffff 	.word	0x0000ffff
 80004f8:	ffff8000 	.word	0xffff8000

080004fc <validate.lto_priv.112>:
 80004fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80004fe:	4a24      	ldr	r2, [pc, #144]	; (8000590 <validate.lto_priv.112+0x94>)
 8000500:	b510      	push	{r4, lr}
 8000502:	0004      	movs	r4, r0
 8000504:	4293      	cmp	r3, r2
 8000506:	d10b      	bne.n	8000520 <validate.lto_priv.112+0x24>
 8000508:	6903      	ldr	r3, [r0, #16]
 800050a:	6942      	ldr	r2, [r0, #20]
 800050c:	4293      	cmp	r3, r2
 800050e:	d01e      	beq.n	800054e <validate.lto_priv.112+0x52>
 8000510:	4b20      	ldr	r3, [pc, #128]	; (8000594 <validate.lto_priv.112+0x98>)
 8000512:	2000      	movs	r0, #0
 8000514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000516:	4a20      	ldr	r2, [pc, #128]	; (8000598 <validate.lto_priv.112+0x9c>)
 8000518:	4920      	ldr	r1, [pc, #128]	; (800059c <validate.lto_priv.112+0xa0>)
 800051a:	4798      	blx	r3
 800051c:	2000      	movs	r0, #0
 800051e:	bd10      	pop	{r4, pc}
 8000520:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <validate.lto_priv.112+0xa4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d10b      	bne.n	800053e <validate.lto_priv.112+0x42>
 8000526:	6903      	ldr	r3, [r0, #16]
 8000528:	6942      	ldr	r2, [r0, #20]
 800052a:	4293      	cmp	r3, r2
 800052c:	d10f      	bne.n	800054e <validate.lto_priv.112+0x52>
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <validate.lto_priv.112+0x98>)
 8000530:	2000      	movs	r0, #0
 8000532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000534:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <validate.lto_priv.112+0xa8>)
 8000536:	4919      	ldr	r1, [pc, #100]	; (800059c <validate.lto_priv.112+0xa0>)
 8000538:	4798      	blx	r3
 800053a:	2000      	movs	r0, #0
 800053c:	e7ef      	b.n	800051e <validate.lto_priv.112+0x22>
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <validate.lto_priv.112+0x98>)
 8000540:	2000      	movs	r0, #0
 8000542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000544:	4a18      	ldr	r2, [pc, #96]	; (80005a8 <validate.lto_priv.112+0xac>)
 8000546:	4915      	ldr	r1, [pc, #84]	; (800059c <validate.lto_priv.112+0xa0>)
 8000548:	4798      	blx	r3
 800054a:	2000      	movs	r0, #0
 800054c:	e7e7      	b.n	800051e <validate.lto_priv.112+0x22>
 800054e:	69a3      	ldr	r3, [r4, #24]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00a      	beq.n	800056a <validate.lto_priv.112+0x6e>
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <validate.lto_priv.112+0x98>)
 8000556:	001a      	movs	r2, r3
 8000558:	3230      	adds	r2, #48	; 0x30
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	2a00      	cmp	r2, #0
 800055e:	d004      	beq.n	800056a <validate.lto_priv.112+0x6e>
 8000560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <validate.lto_priv.112+0xb0>)
 8000564:	490d      	ldr	r1, [pc, #52]	; (800059c <validate.lto_priv.112+0xa0>)
 8000566:	2001      	movs	r0, #1
 8000568:	4798      	blx	r3
 800056a:	69e3      	ldr	r3, [r4, #28]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d00a      	beq.n	8000586 <validate.lto_priv.112+0x8a>
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <validate.lto_priv.112+0x98>)
 8000572:	001a      	movs	r2, r3
 8000574:	3230      	adds	r2, #48	; 0x30
 8000576:	7812      	ldrb	r2, [r2, #0]
 8000578:	2a00      	cmp	r2, #0
 800057a:	d004      	beq.n	8000586 <validate.lto_priv.112+0x8a>
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <validate.lto_priv.112+0xb4>)
 8000580:	4906      	ldr	r1, [pc, #24]	; (800059c <validate.lto_priv.112+0xa0>)
 8000582:	2001      	movs	r0, #1
 8000584:	4798      	blx	r3
 8000586:	6820      	ldr	r0, [r4, #0]
 8000588:	6883      	ldr	r3, [r0, #8]
 800058a:	4798      	blx	r3
 800058c:	e7c7      	b.n	800051e <validate.lto_priv.112+0x22>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	080021dd 	.word	0x080021dd
 8000594:	200004a8 	.word	0x200004a8
 8000598:	0801c359 	.word	0x0801c359
 800059c:	0801c3be 	.word	0x0801c3be
 80005a0:	08002297 	.word	0x08002297
 80005a4:	0801c3cf 	.word	0x0801c3cf
 80005a8:	0801c404 	.word	0x0801c404
 80005ac:	0801c24c 	.word	0x0801c24c
 80005b0:	0801c273 	.word	0x0801c273

080005b4 <event.lto_priv.138>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	0004      	movs	r4, r0
 80005b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80005ba:	4798      	blx	r3
 80005bc:	6820      	ldr	r0, [r4, #0]
 80005be:	6843      	ldr	r3, [r0, #4]
 80005c0:	4798      	blx	r3
 80005c2:	bd10      	pop	{r4, pc}

080005c4 <validate.lto_priv.111>:
 80005c4:	6903      	ldr	r3, [r0, #16]
 80005c6:	6942      	ldr	r2, [r0, #20]
 80005c8:	b510      	push	{r4, lr}
 80005ca:	0004      	movs	r4, r0
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d007      	beq.n	80005e0 <validate.lto_priv.111+0x1c>
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <validate.lto_priv.111+0x5c>)
 80005d2:	2000      	movs	r0, #0
 80005d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d6:	4a13      	ldr	r2, [pc, #76]	; (8000624 <validate.lto_priv.111+0x60>)
 80005d8:	4913      	ldr	r1, [pc, #76]	; (8000628 <validate.lto_priv.111+0x64>)
 80005da:	4798      	blx	r3
 80005dc:	2000      	movs	r0, #0
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	6983      	ldr	r3, [r0, #24]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d00a      	beq.n	80005fc <validate.lto_priv.111+0x38>
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <validate.lto_priv.111+0x5c>)
 80005e8:	001a      	movs	r2, r3
 80005ea:	3230      	adds	r2, #48	; 0x30
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d004      	beq.n	80005fc <validate.lto_priv.111+0x38>
 80005f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <validate.lto_priv.111+0x68>)
 80005f6:	490c      	ldr	r1, [pc, #48]	; (8000628 <validate.lto_priv.111+0x64>)
 80005f8:	2001      	movs	r0, #1
 80005fa:	4798      	blx	r3
 80005fc:	69e3      	ldr	r3, [r4, #28]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00a      	beq.n	8000618 <validate.lto_priv.111+0x54>
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <validate.lto_priv.111+0x5c>)
 8000604:	001a      	movs	r2, r3
 8000606:	3230      	adds	r2, #48	; 0x30
 8000608:	7812      	ldrb	r2, [r2, #0]
 800060a:	2a00      	cmp	r2, #0
 800060c:	d004      	beq.n	8000618 <validate.lto_priv.111+0x54>
 800060e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <validate.lto_priv.111+0x6c>)
 8000612:	4905      	ldr	r1, [pc, #20]	; (8000628 <validate.lto_priv.111+0x64>)
 8000614:	2001      	movs	r0, #1
 8000616:	4798      	blx	r3
 8000618:	6820      	ldr	r0, [r4, #0]
 800061a:	6883      	ldr	r3, [r0, #8]
 800061c:	4798      	blx	r3
 800061e:	e7de      	b.n	80005de <validate.lto_priv.111+0x1a>
 8000620:	200004a8 	.word	0x200004a8
 8000624:	0801c359 	.word	0x0801c359
 8000628:	0801c419 	.word	0x0801c419
 800062c:	0801c24c 	.word	0x0801c24c
 8000630:	0801c273 	.word	0x0801c273

08000634 <event.lto_priv.137>:
 8000634:	b510      	push	{r4, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800063a:	4798      	blx	r3
 800063c:	6820      	ldr	r0, [r4, #0]
 800063e:	6843      	ldr	r3, [r0, #4]
 8000640:	4798      	blx	r3
 8000642:	bd10      	pop	{r4, pc}

08000644 <validate.lto_priv.110>:
 8000644:	6983      	ldr	r3, [r0, #24]
 8000646:	b510      	push	{r4, lr}
 8000648:	0004      	movs	r4, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00a      	beq.n	8000664 <validate.lto_priv.110+0x20>
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <validate.lto_priv.110+0x44>)
 8000650:	001a      	movs	r2, r3
 8000652:	3230      	adds	r2, #48	; 0x30
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	2a00      	cmp	r2, #0
 8000658:	d004      	beq.n	8000664 <validate.lto_priv.110+0x20>
 800065a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065c:	4a0b      	ldr	r2, [pc, #44]	; (800068c <validate.lto_priv.110+0x48>)
 800065e:	490c      	ldr	r1, [pc, #48]	; (8000690 <validate.lto_priv.110+0x4c>)
 8000660:	2001      	movs	r0, #1
 8000662:	4798      	blx	r3
 8000664:	69e3      	ldr	r3, [r4, #28]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00a      	beq.n	8000680 <validate.lto_priv.110+0x3c>
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <validate.lto_priv.110+0x44>)
 800066c:	001a      	movs	r2, r3
 800066e:	3230      	adds	r2, #48	; 0x30
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	2a00      	cmp	r2, #0
 8000674:	d004      	beq.n	8000680 <validate.lto_priv.110+0x3c>
 8000676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <validate.lto_priv.110+0x50>)
 800067a:	4905      	ldr	r1, [pc, #20]	; (8000690 <validate.lto_priv.110+0x4c>)
 800067c:	2001      	movs	r0, #1
 800067e:	4798      	blx	r3
 8000680:	6820      	ldr	r0, [r4, #0]
 8000682:	6883      	ldr	r3, [r0, #8]
 8000684:	4798      	blx	r3
 8000686:	bd10      	pop	{r4, pc}
 8000688:	200004a8 	.word	0x200004a8
 800068c:	0801c24c 	.word	0x0801c24c
 8000690:	0801c431 	.word	0x0801c431
 8000694:	0801c273 	.word	0x0801c273

08000698 <event.lto_priv.136>:
 8000698:	b510      	push	{r4, lr}
 800069a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800069c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800069e:	6800      	ldr	r0, [r0, #0]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	6843      	ldr	r3, [r0, #4]
 80006a4:	4798      	blx	r3
 80006a6:	bd10      	pop	{r4, pc}

080006a8 <validate.lto_priv.109>:
 80006a8:	6983      	ldr	r3, [r0, #24]
 80006aa:	b510      	push	{r4, lr}
 80006ac:	0004      	movs	r4, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d00a      	beq.n	80006c8 <validate.lto_priv.109+0x20>
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <validate.lto_priv.109+0x44>)
 80006b4:	001a      	movs	r2, r3
 80006b6:	3230      	adds	r2, #48	; 0x30
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	2a00      	cmp	r2, #0
 80006bc:	d004      	beq.n	80006c8 <validate.lto_priv.109+0x20>
 80006be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <validate.lto_priv.109+0x48>)
 80006c2:	490c      	ldr	r1, [pc, #48]	; (80006f4 <validate.lto_priv.109+0x4c>)
 80006c4:	2001      	movs	r0, #1
 80006c6:	4798      	blx	r3
 80006c8:	69e3      	ldr	r3, [r4, #28]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00a      	beq.n	80006e4 <validate.lto_priv.109+0x3c>
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <validate.lto_priv.109+0x44>)
 80006d0:	001a      	movs	r2, r3
 80006d2:	3230      	adds	r2, #48	; 0x30
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	2a00      	cmp	r2, #0
 80006d8:	d004      	beq.n	80006e4 <validate.lto_priv.109+0x3c>
 80006da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <validate.lto_priv.109+0x50>)
 80006de:	4905      	ldr	r1, [pc, #20]	; (80006f4 <validate.lto_priv.109+0x4c>)
 80006e0:	2001      	movs	r0, #1
 80006e2:	4798      	blx	r3
 80006e4:	6820      	ldr	r0, [r4, #0]
 80006e6:	6883      	ldr	r3, [r0, #8]
 80006e8:	4798      	blx	r3
 80006ea:	bd10      	pop	{r4, pc}
 80006ec:	200004a8 	.word	0x200004a8
 80006f0:	0801c24c 	.word	0x0801c24c
 80006f4:	0801c43e 	.word	0x0801c43e
 80006f8:	0801c273 	.word	0x0801c273

080006fc <convert_q12_4_to_q3_12_complex>:
 80006fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fe:	2600      	movs	r6, #0
 8000700:	0852      	lsrs	r2, r2, #1
 8000702:	0004      	movs	r4, r0
 8000704:	4d06      	ldr	r5, [pc, #24]	; (8000720 <convert_q12_4_to_q3_12_complex+0x24>)
 8000706:	0090      	lsls	r0, r2, #2
 8000708:	1809      	adds	r1, r1, r0
 800070a:	3904      	subs	r1, #4
 800070c:	3a01      	subs	r2, #1
 800070e:	d200      	bcs.n	8000712 <convert_q12_4_to_q3_12_complex+0x16>
 8000710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000712:	0053      	lsls	r3, r2, #1
 8000714:	5ee3      	ldrsh	r3, [r4, r3]
 8000716:	804e      	strh	r6, [r1, #2]
 8000718:	105b      	asrs	r3, r3, #1
 800071a:	406b      	eors	r3, r5
 800071c:	800b      	strh	r3, [r1, #0]
 800071e:	e7f4      	b.n	800070a <convert_q12_4_to_q3_12_complex+0xe>
 8000720:	ffffc000 	.word	0xffffc000

08000724 <convert_q12_4_to_q3_12>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	0853      	lsrs	r3, r2, #1
 8000728:	4d06      	ldr	r5, [pc, #24]	; (8000744 <convert_q12_4_to_q3_12+0x20>)
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	3b02      	subs	r3, #2
 800072e:	1c9c      	adds	r4, r3, #2
 8000730:	d103      	bne.n	800073a <convert_q12_4_to_q3_12+0x16>
 8000732:	3303      	adds	r3, #3
 8000734:	439a      	bics	r2, r3
 8000736:	0010      	movs	r0, r2
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	5ec4      	ldrsh	r4, [r0, r3]
 800073c:	1064      	asrs	r4, r4, #1
 800073e:	406c      	eors	r4, r5
 8000740:	52cc      	strh	r4, [r1, r3]
 8000742:	e7f3      	b.n	800072c <convert_q12_4_to_q3_12+0x8>
 8000744:	ffffc000 	.word	0xffffc000

08000748 <convert_q12_4_to_q15_16>:
 8000748:	0852      	lsrs	r2, r2, #1
 800074a:	0013      	movs	r3, r2
 800074c:	b530      	push	{r4, r5, lr}
 800074e:	3b01      	subs	r3, #1
 8000750:	d201      	bcs.n	8000756 <convert_q12_4_to_q15_16+0xe>
 8000752:	0090      	lsls	r0, r2, #2
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	005c      	lsls	r4, r3, #1
 8000758:	5b04      	ldrh	r4, [r0, r4]
 800075a:	009d      	lsls	r5, r3, #2
 800075c:	0324      	lsls	r4, r4, #12
 800075e:	514c      	str	r4, [r1, r5]
 8000760:	e7f5      	b.n	800074e <convert_q12_4_to_q15_16+0x6>

08000762 <convert_q3_12_complex_to_f32_complex>:
 8000762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000764:	4647      	mov	r7, r8
 8000766:	46ce      	mov	lr, r9
 8000768:	b580      	push	{r7, lr}
 800076a:	0007      	movs	r7, r0
 800076c:	0894      	lsrs	r4, r2, #2
 800076e:	00e6      	lsls	r6, r4, #3
 8000770:	198d      	adds	r5, r1, r6
 8000772:	00a4      	lsls	r4, r4, #2
 8000774:	3c04      	subs	r4, #4
 8000776:	3d08      	subs	r5, #8
 8000778:	1d23      	adds	r3, r4, #4
 800077a:	d104      	bne.n	8000786 <convert_q3_12_complex_to_f32_complex+0x24>
 800077c:	0030      	movs	r0, r6
 800077e:	bc0c      	pop	{r2, r3}
 8000780:	4690      	mov	r8, r2
 8000782:	4699      	mov	r9, r3
 8000784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2002      	movs	r0, #2
 800078a:	5e18      	ldrsh	r0, [r3, r0]
 800078c:	f010 fdb0 	bl	80112f0 <__aeabi_i2f>
 8000790:	21e6      	movs	r1, #230	; 0xe6
 8000792:	0589      	lsls	r1, r1, #22
 8000794:	f00f fe78 	bl	8010488 <__aeabi_fmul>
 8000798:	4680      	mov	r8, r0
 800079a:	5f38      	ldrsh	r0, [r7, r4]
 800079c:	f010 fda8 	bl	80112f0 <__aeabi_i2f>
 80007a0:	21e6      	movs	r1, #230	; 0xe6
 80007a2:	0589      	lsls	r1, r1, #22
 80007a4:	f00f fe70 	bl	8010488 <__aeabi_fmul>
 80007a8:	2100      	movs	r1, #0
 80007aa:	4681      	mov	r9, r0
 80007ac:	4640      	mov	r0, r8
 80007ae:	f00f fe6b 	bl	8010488 <__aeabi_fmul>
 80007b2:	1c01      	adds	r1, r0, #0
 80007b4:	4648      	mov	r0, r9
 80007b6:	f00f fbbb 	bl	800ff30 <__aeabi_fadd>
 80007ba:	4643      	mov	r3, r8
 80007bc:	6028      	str	r0, [r5, #0]
 80007be:	606b      	str	r3, [r5, #4]
 80007c0:	e7d8      	b.n	8000774 <convert_q3_12_complex_to_f32_complex+0x12>

080007c2 <convert_q15_16_to_f32>:
 80007c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c4:	4647      	mov	r7, r8
 80007c6:	46ce      	mov	lr, r9
 80007c8:	4688      	mov	r8, r1
 80007ca:	b580      	push	{r7, lr}
 80007cc:	0015      	movs	r5, r2
 80007ce:	0007      	movs	r7, r0
 80007d0:	0894      	lsrs	r4, r2, #2
 80007d2:	00a4      	lsls	r4, r4, #2
 80007d4:	3c04      	subs	r4, #4
 80007d6:	1d23      	adds	r3, r4, #4
 80007d8:	d106      	bne.n	80007e8 <convert_q15_16_to_f32+0x26>
 80007da:	0028      	movs	r0, r5
 80007dc:	2303      	movs	r3, #3
 80007de:	4398      	bics	r0, r3
 80007e0:	bc0c      	pop	{r2, r3}
 80007e2:	4690      	mov	r8, r2
 80007e4:	4699      	mov	r9, r3
 80007e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e8:	593e      	ldr	r6, [r7, r4]
 80007ea:	b2b0      	uxth	r0, r6
 80007ec:	f010 fd80 	bl	80112f0 <__aeabi_i2f>
 80007f0:	21de      	movs	r1, #222	; 0xde
 80007f2:	0589      	lsls	r1, r1, #22
 80007f4:	f00f fe48 	bl	8010488 <__aeabi_fmul>
 80007f8:	4681      	mov	r9, r0
 80007fa:	1430      	asrs	r0, r6, #16
 80007fc:	f010 fd78 	bl	80112f0 <__aeabi_i2f>
 8000800:	1c01      	adds	r1, r0, #0
 8000802:	4648      	mov	r0, r9
 8000804:	f00f fb94 	bl	800ff30 <__aeabi_fadd>
 8000808:	4643      	mov	r3, r8
 800080a:	5118      	str	r0, [r3, r4]
 800080c:	e7e2      	b.n	80007d4 <convert_q15_16_to_f32+0x12>

0800080e <convert_q3_12_to_u16>:
 800080e:	b510      	push	{r4, lr}
 8000810:	0853      	lsrs	r3, r2, #1
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	3b02      	subs	r3, #2
 8000816:	1c9c      	adds	r4, r3, #2
 8000818:	d103      	bne.n	8000822 <convert_q3_12_to_u16+0x14>
 800081a:	3303      	adds	r3, #3
 800081c:	439a      	bics	r2, r3
 800081e:	0010      	movs	r0, r2
 8000820:	bd10      	pop	{r4, pc}
 8000822:	5ac4      	ldrh	r4, [r0, r3]
 8000824:	0064      	lsls	r4, r4, #1
 8000826:	52cc      	strh	r4, [r1, r3]
 8000828:	e7f4      	b.n	8000814 <convert_q3_12_to_u16+0x6>

0800082a <validate.lto_priv.108>:
 800082a:	6983      	ldr	r3, [r0, #24]
 800082c:	b510      	push	{r4, lr}
 800082e:	0004      	movs	r4, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00a      	beq.n	800084a <validate.lto_priv.108+0x20>
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <validate.lto_priv.108+0x46>)
 8000836:	001a      	movs	r2, r3
 8000838:	3230      	adds	r2, #48	; 0x30
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	2a00      	cmp	r2, #0
 800083e:	d004      	beq.n	800084a <validate.lto_priv.108+0x20>
 8000840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000842:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <validate.lto_priv.108+0x4a>)
 8000844:	490c      	ldr	r1, [pc, #48]	; (8000878 <validate.lto_priv.108+0x4e>)
 8000846:	2001      	movs	r0, #1
 8000848:	4798      	blx	r3
 800084a:	69e3      	ldr	r3, [r4, #28]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00a      	beq.n	8000866 <validate.lto_priv.108+0x3c>
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <validate.lto_priv.108+0x46>)
 8000852:	001a      	movs	r2, r3
 8000854:	3230      	adds	r2, #48	; 0x30
 8000856:	7812      	ldrb	r2, [r2, #0]
 8000858:	2a00      	cmp	r2, #0
 800085a:	d004      	beq.n	8000866 <validate.lto_priv.108+0x3c>
 800085c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <validate.lto_priv.108+0x52>)
 8000860:	4905      	ldr	r1, [pc, #20]	; (8000878 <validate.lto_priv.108+0x4e>)
 8000862:	2001      	movs	r0, #1
 8000864:	4798      	blx	r3
 8000866:	6820      	ldr	r0, [r4, #0]
 8000868:	6883      	ldr	r3, [r0, #8]
 800086a:	4798      	blx	r3
 800086c:	bd10      	pop	{r4, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	200004a8 	.word	0x200004a8
 8000874:	0801c24c 	.word	0x0801c24c
 8000878:	0801c450 	.word	0x0801c450
 800087c:	0801c273 	.word	0x0801c273

08000880 <event.lto_priv.134>:
 8000880:	b510      	push	{r4, lr}
 8000882:	0004      	movs	r4, r0
 8000884:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000886:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8000888:	6819      	ldr	r1, [r3, #0]
 800088a:	6900      	ldr	r0, [r0, #16]
 800088c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800088e:	4798      	blx	r3
 8000890:	6820      	ldr	r0, [r4, #0]
 8000892:	6843      	ldr	r3, [r0, #4]
 8000894:	4798      	blx	r3
 8000896:	bd10      	pop	{r4, pc}

08000898 <validate.lto_priv.107>:
 8000898:	6983      	ldr	r3, [r0, #24]
 800089a:	b510      	push	{r4, lr}
 800089c:	0004      	movs	r4, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00a      	beq.n	80008b8 <validate.lto_priv.107+0x20>
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <validate.lto_priv.107+0x44>)
 80008a4:	001a      	movs	r2, r3
 80008a6:	3230      	adds	r2, #48	; 0x30
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d004      	beq.n	80008b8 <validate.lto_priv.107+0x20>
 80008ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b0:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <validate.lto_priv.107+0x48>)
 80008b2:	490c      	ldr	r1, [pc, #48]	; (80008e4 <validate.lto_priv.107+0x4c>)
 80008b4:	2001      	movs	r0, #1
 80008b6:	4798      	blx	r3
 80008b8:	69e3      	ldr	r3, [r4, #28]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00a      	beq.n	80008d4 <validate.lto_priv.107+0x3c>
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <validate.lto_priv.107+0x44>)
 80008c0:	001a      	movs	r2, r3
 80008c2:	3230      	adds	r2, #48	; 0x30
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d004      	beq.n	80008d4 <validate.lto_priv.107+0x3c>
 80008ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <validate.lto_priv.107+0x50>)
 80008ce:	4905      	ldr	r1, [pc, #20]	; (80008e4 <validate.lto_priv.107+0x4c>)
 80008d0:	2001      	movs	r0, #1
 80008d2:	4798      	blx	r3
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	6883      	ldr	r3, [r0, #8]
 80008d8:	4798      	blx	r3
 80008da:	bd10      	pop	{r4, pc}
 80008dc:	200004a8 	.word	0x200004a8
 80008e0:	0801c24c 	.word	0x0801c24c
 80008e4:	0801c462 	.word	0x0801c462
 80008e8:	0801c273 	.word	0x0801c273

080008ec <reset.lto_priv.118>:
 80008ec:	b510      	push	{r4, lr}
 80008ee:	6800      	ldr	r0, [r0, #0]
 80008f0:	68c3      	ldr	r3, [r0, #12]
 80008f2:	4798      	blx	r3
 80008f4:	bd10      	pop	{r4, pc}

080008f6 <reset.lto_priv.126>:
 80008f6:	b510      	push	{r4, lr}
 80008f8:	f7ff fff8 	bl	80008ec <reset.lto_priv.118>
 80008fc:	bd10      	pop	{r4, pc}

080008fe <reset.lto_priv.125>:
 80008fe:	b510      	push	{r4, lr}
 8000900:	f7ff fff4 	bl	80008ec <reset.lto_priv.118>
 8000904:	bd10      	pop	{r4, pc}

08000906 <reset.lto_priv.124>:
 8000906:	b510      	push	{r4, lr}
 8000908:	f7ff fff0 	bl	80008ec <reset.lto_priv.118>
 800090c:	bd10      	pop	{r4, pc}

0800090e <reset.lto_priv.123>:
 800090e:	b510      	push	{r4, lr}
 8000910:	f7ff ffec 	bl	80008ec <reset.lto_priv.118>
 8000914:	bd10      	pop	{r4, pc}

08000916 <reset.lto_priv.122>:
 8000916:	b510      	push	{r4, lr}
 8000918:	f7ff ffe8 	bl	80008ec <reset.lto_priv.118>
 800091c:	bd10      	pop	{r4, pc}

0800091e <reset.lto_priv.121>:
 800091e:	b510      	push	{r4, lr}
 8000920:	f7ff ffe4 	bl	80008ec <reset.lto_priv.118>
 8000924:	bd10      	pop	{r4, pc}

08000926 <reset.lto_priv.120>:
 8000926:	b510      	push	{r4, lr}
 8000928:	f7ff ffe0 	bl	80008ec <reset.lto_priv.118>
 800092c:	bd10      	pop	{r4, pc}

0800092e <reset.lto_priv.119>:
 800092e:	b510      	push	{r4, lr}
 8000930:	f7ff ffdc 	bl	80008ec <reset.lto_priv.118>
 8000934:	bd10      	pop	{r4, pc}

08000936 <event.lto_priv.133>:
 8000936:	b570      	push	{r4, r5, r6, lr}
 8000938:	0004      	movs	r4, r0
 800093a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800093c:	6941      	ldr	r1, [r0, #20]
 800093e:	682a      	ldr	r2, [r5, #0]
 8000940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000942:	6900      	ldr	r0, [r0, #16]
 8000944:	4798      	blx	r3
 8000946:	6028      	str	r0, [r5, #0]
 8000948:	6820      	ldr	r0, [r4, #0]
 800094a:	6843      	ldr	r3, [r0, #4]
 800094c:	4798      	blx	r3
 800094e:	bd70      	pop	{r4, r5, r6, pc}

08000950 <event.lto_priv.135>:
 8000950:	b510      	push	{r4, lr}
 8000952:	f7ff fff0 	bl	8000936 <event.lto_priv.133>
 8000956:	bd10      	pop	{r4, pc}

08000958 <acc_sweep_manager_release>:
 8000958:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800095a:	b510      	push	{r4, lr}
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <acc_sweep_manager_release+0xe>
 8000960:	3014      	adds	r0, #20
 8000962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000964:	4798      	blx	r3
 8000966:	bd10      	pop	{r4, pc}

08000968 <acc_sensor_manager_release_measurement>:
 8000968:	6982      	ldr	r2, [r0, #24]
 800096a:	b510      	push	{r4, lr}
 800096c:	2a00      	cmp	r2, #0
 800096e:	d00f      	beq.n	8000990 <acc_sensor_manager_release_measurement+0x28>
 8000970:	2348      	movs	r3, #72	; 0x48
 8000972:	435a      	muls	r2, r3
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <acc_sensor_manager_release_measurement+0x2c>)
 8000976:	3a48      	subs	r2, #72	; 0x48
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	189b      	adds	r3, r3, r2
 800097c:	001a      	movs	r2, r3
 800097e:	3240      	adds	r2, #64	; 0x40
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	2a00      	cmp	r2, #0
 8000984:	d101      	bne.n	800098a <acc_sensor_manager_release_measurement+0x22>
 8000986:	3341      	adds	r3, #65	; 0x41
 8000988:	701a      	strb	r2, [r3, #0]
 800098a:	3004      	adds	r0, #4
 800098c:	f7ff ffe4 	bl	8000958 <acc_sweep_manager_release>
 8000990:	bd10      	pop	{r4, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	2000008c 	.word	0x2000008c

08000998 <acc_sensor_manager_hibernate_enter>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800099c:	6985      	ldr	r5, [r0, #24]
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	6841      	ldr	r1, [r0, #4]
 80009a2:	0028      	movs	r0, r5
 80009a4:	4798      	blx	r3
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <acc_sensor_manager_hibernate_enter+0x2c>)
 80009a8:	1e04      	subs	r4, r0, #0
 80009aa:	d105      	bne.n	80009b8 <acc_sensor_manager_hibernate_enter+0x20>
 80009ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ae:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <acc_sensor_manager_hibernate_enter+0x30>)
 80009b0:	4906      	ldr	r1, [pc, #24]	; (80009cc <acc_sensor_manager_hibernate_enter+0x34>)
 80009b2:	4798      	blx	r3
 80009b4:	0020      	movs	r0, r4
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0fa      	beq.n	80009b4 <acc_sensor_manager_hibernate_enter+0x1c>
 80009be:	0028      	movs	r0, r5
 80009c0:	4798      	blx	r3
 80009c2:	e7f7      	b.n	80009b4 <acc_sensor_manager_hibernate_enter+0x1c>
 80009c4:	200004a8 	.word	0x200004a8
 80009c8:	0801c46e 	.word	0x0801c46e
 80009cc:	0801c48e 	.word	0x0801c48e

080009d0 <measure_noise.lto_priv.146>:
 80009d0:	2000      	movs	r0, #0
 80009d2:	4770      	bx	lr

080009d4 <acc_rss_integration_mem_free>:
 80009d4:	b510      	push	{r4, lr}
 80009d6:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <acc_rss_integration_mem_free+0xc>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	4798      	blx	r3
 80009dc:	bd10      	pop	{r4, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	200004a8 	.word	0x200004a8

080009e4 <destroy.lto_priv.177>:
 80009e4:	b510      	push	{r4, lr}
 80009e6:	0004      	movs	r4, r0
 80009e8:	6940      	ldr	r0, [r0, #20]
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d003      	beq.n	80009f6 <destroy.lto_priv.177+0x12>
 80009ee:	f7ff fff1 	bl	80009d4 <acc_rss_integration_mem_free>
 80009f2:	2300      	movs	r3, #0
 80009f4:	6163      	str	r3, [r4, #20]
 80009f6:	bd10      	pop	{r4, pc}

080009f8 <destroy.lto_priv.176>:
 80009f8:	b510      	push	{r4, lr}
 80009fa:	0004      	movs	r4, r0
 80009fc:	6940      	ldr	r0, [r0, #20]
 80009fe:	2800      	cmp	r0, #0
 8000a00:	d003      	beq.n	8000a0a <destroy.lto_priv.176+0x12>
 8000a02:	f7ff ffe7 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a06:	2300      	movs	r3, #0
 8000a08:	6163      	str	r3, [r4, #20]
 8000a0a:	bd10      	pop	{r4, pc}

08000a0c <disassemble.lto_priv.182>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	6804      	ldr	r4, [r0, #0]
 8000a10:	0005      	movs	r5, r0
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	d00a      	beq.n	8000a2c <disassemble.lto_priv.182+0x20>
 8000a16:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8000a18:	f7ff ffa6 	bl	8000968 <acc_sensor_manager_release_measurement>
 8000a1c:	23ea      	movs	r3, #234	; 0xea
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	58e0      	ldr	r0, [r4, r3]
 8000a22:	f7ff ffd7 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a26:	0020      	movs	r0, r4
 8000a28:	f7ff ffd4 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a2c:	0028      	movs	r0, r5
 8000a2e:	f7ff ffd1 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a32:	bd70      	pop	{r4, r5, r6, pc}

08000a34 <disassemble.lto_priv.181>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	6804      	ldr	r4, [r0, #0]
 8000a38:	0005      	movs	r5, r0
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d00a      	beq.n	8000a54 <disassemble.lto_priv.181+0x20>
 8000a3e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8000a40:	f7ff ff92 	bl	8000968 <acc_sensor_manager_release_measurement>
 8000a44:	0023      	movs	r3, r4
 8000a46:	33fc      	adds	r3, #252	; 0xfc
 8000a48:	69d8      	ldr	r0, [r3, #28]
 8000a4a:	f7ff ffc3 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f7ff ffc0 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a54:	0028      	movs	r0, r5
 8000a56:	f7ff ffbd 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}

08000a5c <acc_rss_integration_sensor_device_power_off>:
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <acc_rss_integration_sensor_device_power_off+0xc>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4798      	blx	r3
 8000a64:	bd10      	pop	{r4, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	200004a8 	.word	0x200004a8

08000a6c <acc_rss_integration_sensor_device_power_on>:
 8000a6c:	b510      	push	{r4, lr}
 8000a6e:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <acc_rss_integration_sensor_device_power_on+0xc>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4798      	blx	r3
 8000a74:	bd10      	pop	{r4, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200004a8 	.word	0x200004a8

08000a7c <acc_sensor_manager_power_on_and_start_sensor>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	6985      	ldr	r5, [r0, #24]
 8000a80:	0004      	movs	r4, r0
 8000a82:	0028      	movs	r0, r5
 8000a84:	f7ff fff2 	bl	8000a6c <acc_rss_integration_sensor_device_power_on>
 8000a88:	2148      	movs	r1, #72	; 0x48
 8000a8a:	4369      	muls	r1, r5
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <acc_sensor_manager_power_on_and_start_sensor+0x48>)
 8000a8e:	3948      	subs	r1, #72	; 0x48
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000a94:	1859      	adds	r1, r3, r1
 8000a96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a98:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	4798      	blx	r3
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d104      	bne.n	8000aac <acc_sensor_manager_power_on_and_start_sensor+0x30>
 8000aa2:	0028      	movs	r0, r5
 8000aa4:	f7ff ffda 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
 8000aac:	0020      	movs	r0, r4
 8000aae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ab0:	0031      	movs	r1, r6
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	3018      	adds	r0, #24
 8000ab6:	4798      	blx	r3
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d0f2      	beq.n	8000aa2 <acc_sensor_manager_power_on_and_start_sensor+0x26>
 8000abc:	2301      	movs	r3, #1
 8000abe:	70e3      	strb	r3, [r4, #3]
 8000ac0:	e7f3      	b.n	8000aaa <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	2000008c 	.word	0x2000008c

08000ac8 <acc_base_configuration_check.part.6>:
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8000acc:	2d04      	cmp	r5, #4
 8000ace:	d908      	bls.n	8000ae2 <acc_base_configuration_check.part.6+0x1a>
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000ad2:	4a34      	ldr	r2, [pc, #208]	; (8000ba4 <acc_base_configuration_check.part.6+0xdc>)
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	4934      	ldr	r1, [pc, #208]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	4798      	blx	r3
 8000adc:	2400      	movs	r4, #0
 8000ade:	0020      	movs	r0, r4
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	2d04      	cmp	r5, #4
 8000ae4:	d113      	bne.n	8000b0e <acc_base_configuration_check.part.6+0x46>
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000ae8:	69dc      	ldr	r4, [r3, #28]
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d105      	bne.n	8000afa <acc_base_configuration_check.part.6+0x32>
 8000aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af0:	4a2e      	ldr	r2, [pc, #184]	; (8000bac <acc_base_configuration_check.part.6+0xe4>)
 8000af2:	492d      	ldr	r1, [pc, #180]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000af4:	0020      	movs	r0, r4
 8000af6:	4798      	blx	r3
 8000af8:	e7f1      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000afa:	7902      	ldrb	r2, [r0, #4]
 8000afc:	2a03      	cmp	r2, #3
 8000afe:	d106      	bne.n	8000b0e <acc_base_configuration_check.part.6+0x46>
 8000b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b02:	4a2b      	ldr	r2, [pc, #172]	; (8000bb0 <acc_base_configuration_check.part.6+0xe8>)
 8000b04:	4928      	ldr	r1, [pc, #160]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b06:	2000      	movs	r0, #0
 8000b08:	4798      	blx	r3
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	e7e7      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b0e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000b10:	2b16      	cmp	r3, #22
 8000b12:	d907      	bls.n	8000b24 <acc_base_configuration_check.part.6+0x5c>
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b16:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <acc_base_configuration_check.part.6+0xec>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1a:	4923      	ldr	r1, [pc, #140]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	4798      	blx	r3
 8000b20:	2400      	movs	r4, #0
 8000b22:	e7dc      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b24:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8000b26:	3b01      	subs	r3, #1
 8000b28:	2b3e      	cmp	r3, #62	; 0x3e
 8000b2a:	d907      	bls.n	8000b3c <acc_base_configuration_check.part.6+0x74>
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b2e:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <acc_base_configuration_check.part.6+0xf0>)
 8000b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b32:	491d      	ldr	r1, [pc, #116]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b34:	2000      	movs	r0, #0
 8000b36:	4798      	blx	r3
 8000b38:	2400      	movs	r4, #0
 8000b3a:	e7d0      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b3c:	7903      	ldrb	r3, [r0, #4]
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d109      	bne.n	8000b56 <acc_base_configuration_check.part.6+0x8e>
 8000b42:	2b03      	cmp	r3, #3
 8000b44:	d115      	bne.n	8000b72 <acc_base_configuration_check.part.6+0xaa>
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b48:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <acc_base_configuration_check.part.6+0xf4>)
 8000b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4c:	4916      	ldr	r1, [pc, #88]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b4e:	0028      	movs	r0, r5
 8000b50:	4798      	blx	r3
 8000b52:	002c      	movs	r4, r5
 8000b54:	e7c3      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d10b      	bne.n	8000b72 <acc_base_configuration_check.part.6+0xaa>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	334e      	adds	r3, #78	; 0x4e
 8000b5e:	781c      	ldrb	r4, [r3, #0]
 8000b60:	2c00      	cmp	r4, #0
 8000b62:	d106      	bne.n	8000b72 <acc_base_configuration_check.part.6+0xaa>
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b66:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <acc_base_configuration_check.part.6+0xf8>)
 8000b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6a:	490f      	ldr	r1, [pc, #60]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b6c:	0020      	movs	r0, r4
 8000b6e:	4798      	blx	r3
 8000b70:	e7b5      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b72:	2304      	movs	r3, #4
 8000b74:	439d      	bics	r5, r3
 8000b76:	d103      	bne.n	8000b80 <acc_base_configuration_check.part.6+0xb8>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	334e      	adds	r3, #78	; 0x4e
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	3032      	adds	r0, #50	; 0x32
 8000b82:	7803      	ldrb	r3, [r0, #0]
 8000b84:	2401      	movs	r4, #1
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d0a9      	beq.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b8a:	2b09      	cmp	r3, #9
 8000b8c:	d0a7      	beq.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b90:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <acc_base_configuration_check.part.6+0xfc>)
 8000b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b94:	4904      	ldr	r1, [pc, #16]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b96:	2000      	movs	r0, #0
 8000b98:	4798      	blx	r3
 8000b9a:	2400      	movs	r4, #0
 8000b9c:	e79f      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	200004a8 	.word	0x200004a8
 8000ba4:	0801c49d 	.word	0x0801c49d
 8000ba8:	0801c4b5 	.word	0x0801c4b5
 8000bac:	0801c4c8 	.word	0x0801c4c8
 8000bb0:	0801c507 	.word	0x0801c507
 8000bb4:	0801c549 	.word	0x0801c549
 8000bb8:	0801c57d 	.word	0x0801c57d
 8000bbc:	0801c5cf 	.word	0x0801c5cf
 8000bc0:	0801c60b 	.word	0x0801c60b
 8000bc4:	0801c64b 	.word	0x0801c64b

08000bc8 <configuration_is_valid>:
 8000bc8:	b510      	push	{r4, lr}
 8000bca:	0004      	movs	r4, r0
 8000bcc:	2001      	movs	r0, #1
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d10a      	bne.n	8000be8 <configuration_is_valid+0x20>
 8000bd2:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <configuration_is_valid+0x28>)
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	3330      	adds	r3, #48	; 0x30
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d005      	beq.n	8000bea <configuration_is_valid+0x22>
 8000bde:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000be0:	4904      	ldr	r1, [pc, #16]	; (8000bf4 <configuration_is_valid+0x2c>)
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <configuration_is_valid+0x30>)
 8000be4:	4798      	blx	r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	bd10      	pop	{r4, pc}
 8000bea:	0018      	movs	r0, r3
 8000bec:	e7fc      	b.n	8000be8 <configuration_is_valid+0x20>
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	200004a8 	.word	0x200004a8
 8000bf4:	0801c4b5 	.word	0x0801c4b5
 8000bf8:	0801c65f 	.word	0x0801c65f

08000bfc <acc_base_configuration_asynchronous_measurement_get>:
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	0004      	movs	r4, r0
 8000c00:	f7ff ffe2 	bl	8000bc8 <configuration_is_valid>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d001      	beq.n	8000c0c <acc_base_configuration_asynchronous_measurement_get+0x10>
 8000c08:	344e      	adds	r4, #78	; 0x4e
 8000c0a:	7820      	ldrb	r0, [r4, #0]
 8000c0c:	bd10      	pop	{r4, pc}

08000c0e <acc_base_configuration_noise_level_normalization_get>:
 8000c0e:	b510      	push	{r4, lr}
 8000c10:	0004      	movs	r4, r0
 8000c12:	f7ff ffd9 	bl	8000bc8 <configuration_is_valid>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d001      	beq.n	8000c1e <acc_base_configuration_noise_level_normalization_get+0x10>
 8000c1a:	3449      	adds	r4, #73	; 0x49
 8000c1c:	7820      	ldrb	r0, [r4, #0]
 8000c1e:	bd10      	pop	{r4, pc}

08000c20 <acc_base_configuration_downsampling_factor_set>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	0004      	movs	r4, r0
 8000c24:	000d      	movs	r5, r1
 8000c26:	f7ff ffcf 	bl	8000bc8 <configuration_is_valid>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d001      	beq.n	8000c32 <acc_base_configuration_downsampling_factor_set+0x12>
 8000c2e:	3468      	adds	r4, #104	; 0x68
 8000c30:	8025      	strh	r5, [r4, #0]
 8000c32:	bd70      	pop	{r4, r5, r6, pc}

08000c34 <acc_base_configuration_downsampling_factor_get>:
 8000c34:	b510      	push	{r4, lr}
 8000c36:	0004      	movs	r4, r0
 8000c38:	f7ff ffc6 	bl	8000bc8 <configuration_is_valid>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4298      	cmp	r0, r3
 8000c40:	d001      	beq.n	8000c46 <acc_base_configuration_downsampling_factor_get+0x12>
 8000c42:	3468      	adds	r4, #104	; 0x68
 8000c44:	8823      	ldrh	r3, [r4, #0]
 8000c46:	0018      	movs	r0, r3
 8000c48:	bd10      	pop	{r4, pc}

08000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	0004      	movs	r4, r0
 8000c4e:	f7ff ffbb 	bl	8000bc8 <configuration_is_valid>
 8000c52:	2300      	movs	r3, #0
 8000c54:	4298      	cmp	r0, r3
 8000c56:	d001      	beq.n	8000c5c <acc_base_configuration_sparse_sweeps_per_frame_get+0x12>
 8000c58:	3460      	adds	r4, #96	; 0x60
 8000c5a:	8823      	ldrh	r3, [r4, #0]
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	bd10      	pop	{r4, pc}

08000c60 <acc_base_configuration_integrator_ramp_up_set>:
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	0004      	movs	r4, r0
 8000c64:	000d      	movs	r5, r1
 8000c66:	f7ff ffaf 	bl	8000bc8 <configuration_is_valid>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d001      	beq.n	8000c72 <acc_base_configuration_integrator_ramp_up_set+0x12>
 8000c6e:	3406      	adds	r4, #6
 8000c70:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000c72:	bd70      	pop	{r4, r5, r6, pc}

08000c74 <acc_base_configuration_wg_duration_set>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	0004      	movs	r4, r0
 8000c78:	000d      	movs	r5, r1
 8000c7a:	f7ff ffa5 	bl	8000bc8 <configuration_is_valid>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d001      	beq.n	8000c86 <acc_base_configuration_wg_duration_set+0x12>
 8000c82:	3404      	adds	r4, #4
 8000c84:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000c86:	bd70      	pop	{r4, r5, r6, pc}

08000c88 <acc_base_configuration_wg_duration_get>:
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	0004      	movs	r4, r0
 8000c8c:	f7ff ff9c 	bl	8000bc8 <configuration_is_valid>
 8000c90:	2300      	movs	r3, #0
 8000c92:	4298      	cmp	r0, r3
 8000c94:	d001      	beq.n	8000c9a <acc_base_configuration_wg_duration_get+0x12>
 8000c96:	3404      	adds	r4, #4
 8000c98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	bd10      	pop	{r4, pc}

08000c9e <acc_base_configuration_integrator_set>:
 8000c9e:	b570      	push	{r4, r5, r6, lr}
 8000ca0:	0004      	movs	r4, r0
 8000ca2:	000d      	movs	r5, r1
 8000ca4:	f7ff ff90 	bl	8000bc8 <configuration_is_valid>
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d001      	beq.n	8000cb0 <acc_base_configuration_integrator_set+0x12>
 8000cac:	3402      	adds	r4, #2
 8000cae:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}

08000cb2 <acc_base_configuration_integrator_get>:
 8000cb2:	b510      	push	{r4, lr}
 8000cb4:	0004      	movs	r4, r0
 8000cb6:	f7ff ff87 	bl	8000bc8 <configuration_is_valid>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	d001      	beq.n	8000cc4 <acc_base_configuration_integrator_get+0x12>
 8000cc0:	3402      	adds	r4, #2
 8000cc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	bd10      	pop	{r4, pc}

08000cc8 <acc_base_configuration_update_rate_get>:
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	0004      	movs	r4, r0
 8000ccc:	f7ff ff7c 	bl	8000bc8 <configuration_is_valid>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d00b      	beq.n	8000cec <acc_base_configuration_update_rate_get+0x24>
 8000cd4:	7920      	ldrb	r0, [r4, #4]
 8000cd6:	2803      	cmp	r0, #3
 8000cd8:	d808      	bhi.n	8000cec <acc_base_configuration_update_rate_get+0x24>
 8000cda:	f00f fef3 	bl	8010ac4 <__gnu_thumb1_case_uqi>
 8000cde:	0202      	.short	0x0202
 8000ce0:	0505      	.short	0x0505
 8000ce2:	20ff      	movs	r0, #255	; 0xff
 8000ce4:	05c0      	lsls	r0, r0, #23
 8000ce6:	bd10      	pop	{r4, pc}
 8000ce8:	68a0      	ldr	r0, [r4, #8]
 8000cea:	e7fc      	b.n	8000ce6 <acc_base_configuration_update_rate_get+0x1e>
 8000cec:	4800      	ldr	r0, [pc, #0]	; (8000cf0 <acc_base_configuration_update_rate_get+0x28>)
 8000cee:	e7fa      	b.n	8000ce6 <acc_base_configuration_update_rate_get+0x1e>
 8000cf0:	7fc00000 	.word	0x7fc00000

08000cf4 <acc_base_configuration_repetition_mode_get>:
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	0004      	movs	r4, r0
 8000cf8:	f7ff ff66 	bl	8000bc8 <configuration_is_valid>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d000      	beq.n	8000d04 <acc_base_configuration_repetition_mode_get+0x10>
 8000d02:	7923      	ldrb	r3, [r4, #4]
 8000d04:	0018      	movs	r0, r3
 8000d06:	bd10      	pop	{r4, pc}

08000d08 <acc_radar_engine_common_get_timeout_ms>:
 8000d08:	b510      	push	{r4, lr}
 8000d0a:	0004      	movs	r4, r0
 8000d0c:	f7ff fff2 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 8000d10:	2801      	cmp	r0, #1
 8000d12:	d00c      	beq.n	8000d2e <acc_radar_engine_common_get_timeout_ms+0x26>
 8000d14:	0020      	movs	r0, r4
 8000d16:	f7ff ffd7 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 8000d1a:	1c01      	adds	r1, r0, #0
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 8000d1e:	f00f faa1 	bl	8010264 <__aeabi_fdiv>
 8000d22:	4904      	ldr	r1, [pc, #16]	; (8000d34 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 8000d24:	f00f f904 	bl	800ff30 <__aeabi_fadd>
 8000d28:	f010 f8ee 	bl	8010f08 <__aeabi_f2uiz>
 8000d2c:	bd10      	pop	{r4, pc}
 8000d2e:	20fa      	movs	r0, #250	; 0xfa
 8000d30:	00c0      	lsls	r0, r0, #3
 8000d32:	e7fb      	b.n	8000d2c <acc_radar_engine_common_get_timeout_ms+0x24>
 8000d34:	44fa0000 	.word	0x44fa0000

08000d38 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	0004      	movs	r4, r0
 8000d3c:	f7ff ff44 	bl	8000bc8 <configuration_is_valid>
 8000d40:	2300      	movs	r3, #0
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d001      	beq.n	8000d4a <acc_base_configuration_hw_accelerated_average_samples_get+0x12>
 8000d46:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	bd10      	pop	{r4, pc}

08000d4e <acc_base_configuration_decrease_tx_emission_get>:
 8000d4e:	b510      	push	{r4, lr}
 8000d50:	0004      	movs	r4, r0
 8000d52:	f7ff ff39 	bl	8000bc8 <configuration_is_valid>
 8000d56:	2800      	cmp	r0, #0
 8000d58:	d001      	beq.n	8000d5e <acc_base_configuration_decrease_tx_emission_get+0x10>
 8000d5a:	3448      	adds	r4, #72	; 0x48
 8000d5c:	7820      	ldrb	r0, [r4, #0]
 8000d5e:	bd10      	pop	{r4, pc}

08000d60 <acc_base_configuration_tx_disable_get>:
 8000d60:	b510      	push	{r4, lr}
 8000d62:	0004      	movs	r4, r0
 8000d64:	f7ff ff30 	bl	8000bc8 <configuration_is_valid>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d001      	beq.n	8000d70 <acc_base_configuration_tx_disable_get+0x10>
 8000d6c:	3447      	adds	r4, #71	; 0x47
 8000d6e:	7820      	ldrb	r0, [r4, #0]
 8000d70:	bd10      	pop	{r4, pc}

08000d72 <acc_base_configuration_power_save_mode_get>:
 8000d72:	b510      	push	{r4, lr}
 8000d74:	0004      	movs	r4, r0
 8000d76:	f7ff ff27 	bl	8000bc8 <configuration_is_valid>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d000      	beq.n	8000d82 <acc_base_configuration_power_save_mode_get+0x10>
 8000d80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d82:	0018      	movs	r0, r3
 8000d84:	bd10      	pop	{r4, pc}

08000d86 <acc_base_configuration_repetition_mode_on_demand_set>:
 8000d86:	b510      	push	{r4, lr}
 8000d88:	0004      	movs	r4, r0
 8000d8a:	f7ff ff1d 	bl	8000bc8 <configuration_is_valid>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d001      	beq.n	8000d96 <acc_base_configuration_repetition_mode_on_demand_set+0x10>
 8000d92:	2301      	movs	r3, #1
 8000d94:	7123      	strb	r3, [r4, #4]
 8000d96:	bd10      	pop	{r4, pc}

08000d98 <acc_base_configuration_sensor_get>:
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	0004      	movs	r4, r0
 8000d9c:	f7ff ff14 	bl	8000bc8 <configuration_is_valid>
 8000da0:	2300      	movs	r3, #0
 8000da2:	4298      	cmp	r0, r3
 8000da4:	d000      	beq.n	8000da8 <acc_base_configuration_sensor_get+0x10>
 8000da6:	68e3      	ldr	r3, [r4, #12]
 8000da8:	0018      	movs	r0, r3
 8000daa:	bd10      	pop	{r4, pc}

08000dac <acc_sensor_manager_prepare_measurement>:
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	46de      	mov	lr, fp
 8000db0:	464e      	mov	r6, r9
 8000db2:	4657      	mov	r7, sl
 8000db4:	4645      	mov	r5, r8
 8000db6:	b5e0      	push	{r5, r6, r7, lr}
 8000db8:	0004      	movs	r4, r0
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	0008      	movs	r0, r1
 8000dbe:	4689      	mov	r9, r1
 8000dc0:	9303      	str	r3, [sp, #12]
 8000dc2:	4693      	mov	fp, r2
 8000dc4:	f7ff ffe8 	bl	8000d98 <acc_base_configuration_sensor_get>
 8000dc8:	0006      	movs	r6, r0
 8000dca:	4648      	mov	r0, r9
 8000dcc:	f7ff fefc 	bl	8000bc8 <configuration_is_valid>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	4298      	cmp	r0, r3
 8000dd6:	d003      	beq.n	8000de0 <acc_sensor_manager_prepare_measurement+0x34>
 8000dd8:	464b      	mov	r3, r9
 8000dda:	334c      	adds	r3, #76	; 0x4c
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2248      	movs	r2, #72	; 0x48
 8000de2:	2348      	movs	r3, #72	; 0x48
 8000de4:	4252      	negs	r2, r2
 8000de6:	4692      	mov	sl, r2
 8000de8:	4373      	muls	r3, r6
 8000dea:	449a      	add	sl, r3
 8000dec:	4b52      	ldr	r3, [pc, #328]	; (8000f38 <acc_sensor_manager_prepare_measurement+0x18c>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4698      	mov	r8, r3
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4453      	add	r3, sl
 8000df6:	001a      	movs	r2, r3
 8000df8:	3242      	adds	r2, #66	; 0x42
 8000dfa:	7011      	strb	r1, [r2, #0]
 8000dfc:	494f      	ldr	r1, [pc, #316]	; (8000f3c <acc_sensor_manager_prepare_measurement+0x190>)
 8000dfe:	6459      	str	r1, [r3, #68]	; 0x44
 8000e00:	9903      	ldr	r1, [sp, #12]
 8000e02:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e04:	0019      	movs	r1, r3
 8000e06:	3141      	adds	r1, #65	; 0x41
 8000e08:	7809      	ldrb	r1, [r1, #0]
 8000e0a:	9102      	str	r1, [sp, #8]
 8000e0c:	2900      	cmp	r1, #0
 8000e0e:	d156      	bne.n	8000ebe <acc_sensor_manager_prepare_measurement+0x112>
 8000e10:	7011      	strb	r1, [r2, #0]
 8000e12:	4a4a      	ldr	r2, [pc, #296]	; (8000f3c <acc_sensor_manager_prepare_measurement+0x190>)
 8000e14:	0030      	movs	r0, r6
 8000e16:	645a      	str	r2, [r3, #68]	; 0x44
 8000e18:	f7ff fe28 	bl	8000a6c <acc_rss_integration_sensor_device_power_on>
 8000e1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e1e:	69a0      	ldr	r0, [r4, #24]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	4798      	blx	r3
 8000e24:	1e05      	subs	r5, r0, #0
 8000e26:	d02c      	beq.n	8000e82 <acc_sensor_manager_prepare_measurement+0xd6>
 8000e28:	af05      	add	r7, sp, #20
 8000e2a:	0031      	movs	r1, r6
 8000e2c:	200b      	movs	r0, #11
 8000e2e:	f7ff f977 	bl	8000120 <acc_probes_execute_primitive_probe>
 8000e32:	220c      	movs	r2, #12
 8000e34:	9902      	ldr	r1, [sp, #8]
 8000e36:	0038      	movs	r0, r7
 8000e38:	f012 fbe8 	bl	801360c <memset>
 8000e3c:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <acc_sensor_manager_prepare_measurement+0x190>)
 8000e3e:	0020      	movs	r0, r4
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4643      	mov	r3, r8
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	9903      	ldr	r1, [sp, #12]
 8000e48:	4453      	add	r3, sl
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e4e:	3018      	adds	r0, #24
 8000e50:	68dd      	ldr	r5, [r3, #12]
 8000e52:	003b      	movs	r3, r7
 8000e54:	47a8      	blx	r5
 8000e56:	1e05      	subs	r5, r0, #0
 8000e58:	d029      	beq.n	8000eae <acc_sensor_manager_prepare_measurement+0x102>
 8000e5a:	4643      	mov	r3, r8
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4453      	add	r3, sl
 8000e62:	3341      	adds	r3, #65	; 0x41
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <acc_sensor_manager_prepare_measurement+0x18c>)
 8000e68:	7839      	ldrb	r1, [r7, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	200c      	movs	r0, #12
 8000e6e:	4453      	add	r3, sl
 8000e70:	001a      	movs	r2, r3
 8000e72:	3242      	adds	r2, #66	; 0x42
 8000e74:	7011      	strb	r1, [r2, #0]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	0031      	movs	r1, r6
 8000e7a:	645a      	str	r2, [r3, #68]	; 0x44
 8000e7c:	f7ff f950 	bl	8000120 <acc_probes_execute_primitive_probe>
 8000e80:	e005      	b.n	8000e8e <acc_sensor_manager_prepare_measurement+0xe2>
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <acc_sensor_manager_prepare_measurement+0x194>)
 8000e84:	4a2f      	ldr	r2, [pc, #188]	; (8000f44 <acc_sensor_manager_prepare_measurement+0x198>)
 8000e86:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000e88:	492f      	ldr	r1, [pc, #188]	; (8000f48 <acc_sensor_manager_prepare_measurement+0x19c>)
 8000e8a:	0033      	movs	r3, r6
 8000e8c:	47b8      	blx	r7
 8000e8e:	0030      	movs	r0, r6
 8000e90:	f7ff fde4 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d112      	bne.n	8000ebe <acc_sensor_manager_prepare_measurement+0x112>
 8000e98:	1d20      	adds	r0, r4, #4
 8000e9a:	f7ff fd5d 	bl	8000958 <acc_sweep_manager_release>
 8000e9e:	0028      	movs	r0, r5
 8000ea0:	b009      	add	sp, #36	; 0x24
 8000ea2:	bc3c      	pop	{r2, r3, r4, r5}
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	4699      	mov	r9, r3
 8000ea8:	46a2      	mov	sl, r4
 8000eaa:	46ab      	mov	fp, r5
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eae:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <acc_sensor_manager_prepare_measurement+0x194>)
 8000eb0:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <acc_sensor_manager_prepare_measurement+0x1a0>)
 8000eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb4:	4924      	ldr	r1, [pc, #144]	; (8000f48 <acc_sensor_manager_prepare_measurement+0x19c>)
 8000eb6:	4698      	mov	r8, r3
 8000eb8:	0033      	movs	r3, r6
 8000eba:	47c0      	blx	r8
 8000ebc:	e7d3      	b.n	8000e66 <acc_sensor_manager_prepare_measurement+0xba>
 8000ebe:	9b01      	ldr	r3, [sp, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d134      	bne.n	8000f2e <acc_sensor_manager_prepare_measurement+0x182>
 8000ec4:	4648      	mov	r0, r9
 8000ec6:	f7ff fea2 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	d023      	beq.n	8000f16 <acc_sensor_manager_prepare_measurement+0x16a>
 8000ece:	2314      	movs	r3, #20
 8000ed0:	69a7      	ldr	r7, [r4, #24]
 8000ed2:	445b      	add	r3, fp
 8000ed4:	0038      	movs	r0, r7
 8000ed6:	469a      	mov	sl, r3
 8000ed8:	f7ff fdc8 	bl	8000a6c <acc_rss_integration_sensor_device_power_on>
 8000edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ede:	2148      	movs	r1, #72	; 0x48
 8000ee0:	4699      	mov	r9, r3
 8000ee2:	2318      	movs	r3, #24
 8000ee4:	4379      	muls	r1, r7
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <acc_sensor_manager_prepare_measurement+0x18c>)
 8000eea:	3948      	subs	r1, #72	; 0x48
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000ef0:	1859      	adds	r1, r3, r1
 8000ef2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef4:	44a0      	add	r8, r4
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	4798      	blx	r3
 8000efa:	1e05      	subs	r5, r0, #0
 8000efc:	d006      	beq.n	8000f0c <acc_sensor_manager_prepare_measurement+0x160>
 8000efe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f00:	4652      	mov	r2, sl
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	4649      	mov	r1, r9
 8000f06:	4640      	mov	r0, r8
 8000f08:	4798      	blx	r3
 8000f0a:	0005      	movs	r5, r0
 8000f0c:	0038      	movs	r0, r7
 8000f0e:	f7ff fda5 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	d0c0      	beq.n	8000e98 <acc_sensor_manager_prepare_measurement+0xec>
 8000f16:	230e      	movs	r3, #14
 8000f18:	a805      	add	r0, sp, #20
 8000f1a:	7003      	strb	r3, [r0, #0]
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	3b07      	subs	r3, #7
 8000f20:	4659      	mov	r1, fp
 8000f22:	6046      	str	r6, [r0, #4]
 8000f24:	6083      	str	r3, [r0, #8]
 8000f26:	2501      	movs	r5, #1
 8000f28:	f7ff f8ec 	bl	8000104 <acc_probes_execute>
 8000f2c:	e7b7      	b.n	8000e9e <acc_sensor_manager_prepare_measurement+0xf2>
 8000f2e:	465b      	mov	r3, fp
 8000f30:	9a01      	ldr	r2, [sp, #4]
 8000f32:	829a      	strh	r2, [r3, #20]
 8000f34:	e7ef      	b.n	8000f16 <acc_sensor_manager_prepare_measurement+0x16a>
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	2000008c 	.word	0x2000008c
 8000f3c:	ff800000 	.word	0xff800000
 8000f40:	200004a8 	.word	0x200004a8
 8000f44:	0801c67a 	.word	0x0801c67a
 8000f48:	0801c48e 	.word	0x0801c48e
 8000f4c:	0801c6b5 	.word	0x0801c6b5

08000f50 <acc_base_configuration_print.part.5>:
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	46de      	mov	lr, fp
 8000f54:	4645      	mov	r5, r8
 8000f56:	4657      	mov	r7, sl
 8000f58:	464e      	mov	r6, r9
 8000f5a:	b5e0      	push	{r5, r6, r7, lr}
 8000f5c:	4b32      	ldr	r3, [pc, #200]	; (8001028 <acc_base_configuration_print.part.5+0xd8>)
 8000f5e:	b08f      	sub	sp, #60	; 0x3c
 8000f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f62:	0004      	movs	r4, r0
 8000f64:	930a      	str	r3, [sp, #40]	; 0x28
 8000f66:	f7ff ff17 	bl	8000d98 <acc_base_configuration_sensor_get>
 8000f6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8000f6c:	0020      	movs	r0, r4
 8000f6e:	f7ff fee3 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 8000f72:	900c      	str	r0, [sp, #48]	; 0x30
 8000f74:	0020      	movs	r0, r4
 8000f76:	f7ff fe27 	bl	8000bc8 <configuration_is_valid>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	4298      	cmp	r0, r3
 8000f80:	d001      	beq.n	8000f86 <acc_base_configuration_print.part.5+0x36>
 8000f82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f84:	4698      	mov	r8, r3
 8000f86:	0020      	movs	r0, r4
 8000f88:	f7ff fe93 	bl	8000cb2 <acc_base_configuration_integrator_get>
 8000f8c:	900d      	str	r0, [sp, #52]	; 0x34
 8000f8e:	0020      	movs	r0, r4
 8000f90:	f7ff fe7a 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 8000f94:	4681      	mov	r9, r0
 8000f96:	0020      	movs	r0, r4
 8000f98:	f7ff fe16 	bl	8000bc8 <configuration_is_valid>
 8000f9c:	2600      	movs	r6, #0
 8000f9e:	42b0      	cmp	r0, r6
 8000fa0:	d001      	beq.n	8000fa6 <acc_base_configuration_print.part.5+0x56>
 8000fa2:	1da3      	adds	r3, r4, #6
 8000fa4:	8fde      	ldrh	r6, [r3, #62]	; 0x3e
 8000fa6:	0020      	movs	r0, r4
 8000fa8:	f7ff fee3 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8000fac:	4f1f      	ldr	r7, [pc, #124]	; (800102c <acc_base_configuration_print.part.5+0xdc>)
 8000fae:	2804      	cmp	r0, #4
 8000fb0:	d802      	bhi.n	8000fb8 <acc_base_configuration_print.part.5+0x68>
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <acc_base_configuration_print.part.5+0xe0>)
 8000fb4:	0080      	lsls	r0, r0, #2
 8000fb6:	58c7      	ldr	r7, [r0, r3]
 8000fb8:	0020      	movs	r0, r4
 8000fba:	f7ff fe05 	bl	8000bc8 <configuration_is_valid>
 8000fbe:	4d1d      	ldr	r5, [pc, #116]	; (8001034 <acc_base_configuration_print.part.5+0xe4>)
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	d008      	beq.n	8000fd6 <acc_base_configuration_print.part.5+0x86>
 8000fc4:	0023      	movs	r3, r4
 8000fc6:	336a      	adds	r3, #106	; 0x6a
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <acc_base_configuration_print.part.5+0x86>
 8000fce:	4d1a      	ldr	r5, [pc, #104]	; (8001038 <acc_base_configuration_print.part.5+0xe8>)
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d000      	beq.n	8000fd6 <acc_base_configuration_print.part.5+0x86>
 8000fd4:	4d15      	ldr	r5, [pc, #84]	; (800102c <acc_base_configuration_print.part.5+0xdc>)
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	f7ff fec2 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 8000fdc:	4682      	mov	sl, r0
 8000fde:	0020      	movs	r0, r4
 8000fe0:	f7ff fe33 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 8000fe4:	4683      	mov	fp, r0
 8000fe6:	0020      	movs	r0, r4
 8000fe8:	f7ff feb1 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 8000fec:	465b      	mov	r3, fp
 8000fee:	9308      	str	r3, [sp, #32]
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	9307      	str	r3, [sp, #28]
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	9303      	str	r3, [sp, #12]
 8000ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000ffa:	9009      	str	r0, [sp, #36]	; 0x24
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	4643      	mov	r3, r8
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001004:	9506      	str	r5, [sp, #24]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	9705      	str	r7, [sp, #20]
 800100a:	9604      	str	r6, [sp, #16]
 800100c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <acc_base_configuration_print.part.5+0xec>)
 8001010:	490b      	ldr	r1, [pc, #44]	; (8001040 <acc_base_configuration_print.part.5+0xf0>)
 8001012:	2002      	movs	r0, #2
 8001014:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001016:	47a0      	blx	r4
 8001018:	b00f      	add	sp, #60	; 0x3c
 800101a:	bc3c      	pop	{r2, r3, r4, r5}
 800101c:	4690      	mov	r8, r2
 800101e:	4699      	mov	r9, r3
 8001020:	46a2      	mov	sl, r4
 8001022:	46ab      	mov	fp, r5
 8001024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	200004a8 	.word	0x200004a8
 800102c:	0801e61b 	.word	0x0801e61b
 8001030:	08015ea8 	.word	0x08015ea8
 8001034:	0801c6d8 	.word	0x0801c6d8
 8001038:	0801ccde 	.word	0x0801ccde
 800103c:	0801c6da 	.word	0x0801c6da
 8001040:	0801c4b5 	.word	0x0801c4b5

08001044 <acc_service_maximize_signal_attenuation_set.part.8>:
 8001044:	b510      	push	{r4, lr}
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <acc_service_maximize_signal_attenuation_set.part.8+0x10>)
 8001048:	4a03      	ldr	r2, [pc, #12]	; (8001058 <acc_service_maximize_signal_attenuation_set.part.8+0x14>)
 800104a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104c:	4903      	ldr	r1, [pc, #12]	; (800105c <acc_service_maximize_signal_attenuation_set.part.8+0x18>)
 800104e:	2001      	movs	r0, #1
 8001050:	4798      	blx	r3
 8001052:	bd10      	pop	{r4, pc}
 8001054:	200004a8 	.word	0x200004a8
 8001058:	0801c712 	.word	0x0801c712
 800105c:	0801d3b8 	.word	0x0801d3b8

08001060 <acc_service_configuration_valid>:
 8001060:	b510      	push	{r4, lr}
 8001062:	2800      	cmp	r0, #0
 8001064:	d00a      	beq.n	800107c <acc_service_configuration_valid+0x1c>
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <acc_service_configuration_valid+0x2c>)
 8001068:	6802      	ldr	r2, [r0, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d106      	bne.n	800107c <acc_service_configuration_valid+0x1c>
 800106e:	8b03      	ldrh	r3, [r0, #24]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <acc_service_configuration_valid+0x1c>
 8001074:	6943      	ldr	r3, [r0, #20]
 8001076:	2001      	movs	r0, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d106      	bne.n	800108a <acc_service_configuration_valid+0x2a>
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <acc_service_configuration_valid+0x30>)
 800107e:	2000      	movs	r0, #0
 8001080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <acc_service_configuration_valid+0x34>)
 8001084:	4904      	ldr	r1, [pc, #16]	; (8001098 <acc_service_configuration_valid+0x38>)
 8001086:	4798      	blx	r3
 8001088:	2000      	movs	r0, #0
 800108a:	bd10      	pop	{r4, pc}
 800108c:	acc09dd7 	.word	0xacc09dd7
 8001090:	200004a8 	.word	0x200004a8
 8001094:	0801c712 	.word	0x0801c712
 8001098:	0801d3b8 	.word	0x0801d3b8

0800109c <acc_service_configuration_check>:
 800109c:	b510      	push	{r4, lr}
 800109e:	0004      	movs	r4, r0
 80010a0:	f7ff ffde 	bl	8001060 <acc_service_configuration_valid>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d00a      	beq.n	80010be <acc_service_configuration_check+0x22>
 80010a8:	7963      	ldrb	r3, [r4, #5]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d906      	bls.n	80010be <acc_service_configuration_check+0x22>
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <acc_service_configuration_check+0x24>)
 80010b2:	2000      	movs	r0, #0
 80010b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b6:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <acc_service_configuration_check+0x28>)
 80010b8:	4903      	ldr	r1, [pc, #12]	; (80010c8 <acc_service_configuration_check+0x2c>)
 80010ba:	4798      	blx	r3
 80010bc:	2000      	movs	r0, #0
 80010be:	bd10      	pop	{r4, pc}
 80010c0:	200004a8 	.word	0x200004a8
 80010c4:	0801c728 	.word	0x0801c728
 80010c8:	0801d3b8 	.word	0x0801d3b8

080010cc <acc_service_pipeline_destroy>:
 80010cc:	b510      	push	{r4, lr}
 80010ce:	0004      	movs	r4, r0
 80010d0:	6900      	ldr	r0, [r0, #16]
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d003      	beq.n	80010de <acc_service_pipeline_destroy+0x12>
 80010d6:	68c3      	ldr	r3, [r0, #12]
 80010d8:	4798      	blx	r3
 80010da:	2300      	movs	r3, #0
 80010dc:	6123      	str	r3, [r4, #16]
 80010de:	bd10      	pop	{r4, pc}

080010e0 <acc_service_get_base_configuration>:
 80010e0:	b510      	push	{r4, lr}
 80010e2:	1e04      	subs	r4, r0, #0
 80010e4:	d001      	beq.n	80010ea <acc_service_get_base_configuration+0xa>
 80010e6:	6900      	ldr	r0, [r0, #16]
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <acc_service_get_base_configuration+0x24>)
 80010ec:	001a      	movs	r2, r3
 80010ee:	3230      	adds	r2, #48	; 0x30
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	1e10      	subs	r0, r2, #0
 80010f4:	d0f8      	beq.n	80010e8 <acc_service_get_base_configuration+0x8>
 80010f6:	2001      	movs	r0, #1
 80010f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fa:	4a03      	ldr	r2, [pc, #12]	; (8001108 <acc_service_get_base_configuration+0x28>)
 80010fc:	4903      	ldr	r1, [pc, #12]	; (800110c <acc_service_get_base_configuration+0x2c>)
 80010fe:	4798      	blx	r3
 8001100:	0020      	movs	r0, r4
 8001102:	e7f1      	b.n	80010e8 <acc_service_get_base_configuration+0x8>
 8001104:	200004a8 	.word	0x200004a8
 8001108:	0801c712 	.word	0x0801c712
 800110c:	0801d3b8 	.word	0x0801d3b8

08001110 <acc_service_mur_set>:
 8001110:	b570      	push	{r4, r5, r6, lr}
 8001112:	000d      	movs	r5, r1
 8001114:	f7ff ffe4 	bl	80010e0 <acc_service_get_base_configuration>
 8001118:	1e04      	subs	r4, r0, #0
 800111a:	d006      	beq.n	800112a <acc_service_mur_set+0x1a>
 800111c:	f7ff fd54 	bl	8000bc8 <configuration_is_valid>
 8001120:	2800      	cmp	r0, #0
 8001122:	d001      	beq.n	8001128 <acc_service_mur_set+0x18>
 8001124:	3432      	adds	r4, #50	; 0x32
 8001126:	7025      	strb	r5, [r4, #0]
 8001128:	bd70      	pop	{r4, r5, r6, pc}
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <acc_service_mur_set+0x2c>)
 800112c:	3330      	adds	r3, #48	; 0x30
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f9      	beq.n	8001128 <acc_service_mur_set+0x18>
 8001134:	f7ff ff86 	bl	8001044 <acc_service_maximize_signal_attenuation_set.part.8>
 8001138:	e7f6      	b.n	8001128 <acc_service_mur_set+0x18>
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	200004a8 	.word	0x200004a8

08001140 <set_maximize_signal_attenuation>:
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	0005      	movs	r5, r0
 8001144:	000e      	movs	r6, r1
 8001146:	f7ff ffcb 	bl	80010e0 <acc_service_get_base_configuration>
 800114a:	1e04      	subs	r4, r0, #0
 800114c:	d010      	beq.n	8001170 <set_maximize_signal_attenuation+0x30>
 800114e:	f7ff fd3b 	bl	8000bc8 <configuration_is_valid>
 8001152:	2800      	cmp	r0, #0
 8001154:	d002      	beq.n	800115c <set_maximize_signal_attenuation+0x1c>
 8001156:	0023      	movs	r3, r4
 8001158:	334a      	adds	r3, #74	; 0x4a
 800115a:	701e      	strb	r6, [r3, #0]
 800115c:	2e00      	cmp	r6, #0
 800115e:	d008      	beq.n	8001172 <set_maximize_signal_attenuation+0x32>
 8001160:	210f      	movs	r1, #15
 8001162:	0020      	movs	r0, r4
 8001164:	f7ff fd9b 	bl	8000c9e <acc_base_configuration_integrator_set>
 8001168:	2101      	movs	r1, #1
 800116a:	0020      	movs	r0, r4
 800116c:	f7ff fd78 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 8001170:	bd70      	pop	{r4, r5, r6, pc}
 8001172:	68ab      	ldr	r3, [r5, #8]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0fb      	beq.n	8001170 <set_maximize_signal_attenuation+0x30>
 8001178:	7969      	ldrb	r1, [r5, #5]
 800117a:	0028      	movs	r0, r5
 800117c:	4798      	blx	r3
 800117e:	e7f7      	b.n	8001170 <set_maximize_signal_attenuation+0x30>

08001180 <acc_service_maximize_signal_attenuation_set>:
 8001180:	b510      	push	{r4, lr}
 8001182:	2800      	cmp	r0, #0
 8001184:	d003      	beq.n	800118e <acc_service_maximize_signal_attenuation_set+0xe>
 8001186:	7301      	strb	r1, [r0, #12]
 8001188:	f7ff ffda 	bl	8001140 <set_maximize_signal_attenuation>
 800118c:	bd10      	pop	{r4, pc}
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <acc_service_maximize_signal_attenuation_set+0x20>)
 8001190:	3330      	adds	r3, #48	; 0x30
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f9      	beq.n	800118c <acc_service_maximize_signal_attenuation_set+0xc>
 8001198:	f7ff ff54 	bl	8001044 <acc_service_maximize_signal_attenuation_set.part.8>
 800119c:	e7f6      	b.n	800118c <acc_service_maximize_signal_attenuation_set+0xc>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	200004a8 	.word	0x200004a8

080011a4 <acc_service_profile_set>:
 80011a4:	b510      	push	{r4, lr}
 80011a6:	1e04      	subs	r4, r0, #0
 80011a8:	d00c      	beq.n	80011c4 <acc_service_profile_set+0x20>
 80011aa:	6883      	ldr	r3, [r0, #8]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d009      	beq.n	80011c4 <acc_service_profile_set+0x20>
 80011b0:	7141      	strb	r1, [r0, #5]
 80011b2:	4798      	blx	r3
 80011b4:	7b23      	ldrb	r3, [r4, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <acc_service_profile_set+0x1e>
 80011ba:	2101      	movs	r1, #1
 80011bc:	0020      	movs	r0, r4
 80011be:	f7ff ffbf 	bl	8001140 <set_maximize_signal_attenuation>
 80011c2:	bd10      	pop	{r4, pc}
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <acc_service_profile_set+0x30>)
 80011c6:	3330      	adds	r3, #48	; 0x30
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f9      	beq.n	80011c2 <acc_service_profile_set+0x1e>
 80011ce:	f7ff ff39 	bl	8001044 <acc_service_maximize_signal_attenuation_set.part.8>
 80011d2:	e7f6      	b.n	80011c2 <acc_service_profile_set+0x1e>
 80011d4:	200004a8 	.word	0x200004a8

080011d8 <acc_service_asynchronous_measurement_set>:
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	000d      	movs	r5, r1
 80011dc:	f7ff ff80 	bl	80010e0 <acc_service_get_base_configuration>
 80011e0:	0004      	movs	r4, r0
 80011e2:	f7ff fcf1 	bl	8000bc8 <configuration_is_valid>
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d001      	beq.n	80011ee <acc_service_asynchronous_measurement_set+0x16>
 80011ea:	344e      	adds	r4, #78	; 0x4e
 80011ec:	7025      	strb	r5, [r4, #0]
 80011ee:	bd70      	pop	{r4, r5, r6, pc}

080011f0 <acc_service_hw_accelerated_average_samples_set>:
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	000d      	movs	r5, r1
 80011f4:	f7ff ff74 	bl	80010e0 <acc_service_get_base_configuration>
 80011f8:	0004      	movs	r4, r0
 80011fa:	f7ff fce5 	bl	8000bc8 <configuration_is_valid>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d000      	beq.n	8001204 <acc_service_hw_accelerated_average_samples_set+0x14>
 8001202:	87a5      	strh	r5, [r4, #60]	; 0x3c
 8001204:	bd70      	pop	{r4, r5, r6, pc}

08001206 <acc_service_tx_disable_set>:
 8001206:	b570      	push	{r4, r5, r6, lr}
 8001208:	000d      	movs	r5, r1
 800120a:	f7ff ff69 	bl	80010e0 <acc_service_get_base_configuration>
 800120e:	0004      	movs	r4, r0
 8001210:	f7ff fcda 	bl	8000bc8 <configuration_is_valid>
 8001214:	2800      	cmp	r0, #0
 8001216:	d001      	beq.n	800121c <acc_service_tx_disable_set+0x16>
 8001218:	3447      	adds	r4, #71	; 0x47
 800121a:	7025      	strb	r5, [r4, #0]
 800121c:	bd70      	pop	{r4, r5, r6, pc}

0800121e <acc_service_receiver_gain_set>:
 800121e:	b570      	push	{r4, r5, r6, lr}
 8001220:	1c0d      	adds	r5, r1, #0
 8001222:	f7ff ff5d 	bl	80010e0 <acc_service_get_base_configuration>
 8001226:	0004      	movs	r4, r0
 8001228:	f7ff fcce 	bl	8000bc8 <configuration_is_valid>
 800122c:	2800      	cmp	r0, #0
 800122e:	d00e      	beq.n	800124e <acc_service_receiver_gain_set+0x30>
 8001230:	4907      	ldr	r1, [pc, #28]	; (8001250 <acc_service_receiver_gain_set+0x32>)
 8001232:	1c28      	adds	r0, r5, #0
 8001234:	f00f f928 	bl	8010488 <__aeabi_fmul>
 8001238:	1c01      	adds	r1, r0, #0
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <acc_service_receiver_gain_set+0x32>)
 800123c:	f00f fa56 	bl	80106ec <__aeabi_fsub>
 8001240:	21fc      	movs	r1, #252	; 0xfc
 8001242:	0589      	lsls	r1, r1, #22
 8001244:	f00e fe74 	bl	800ff30 <__aeabi_fadd>
 8001248:	f010 f832 	bl	80112b0 <__aeabi_f2iz>
 800124c:	87e0      	strh	r0, [r4, #62]	; 0x3e
 800124e:	bd70      	pop	{r4, r5, r6, pc}
 8001250:	41b00000 	.word	0x41b00000

08001254 <acc_service_power_save_mode_set>:
 8001254:	b570      	push	{r4, r5, r6, lr}
 8001256:	000d      	movs	r5, r1
 8001258:	f7ff ff42 	bl	80010e0 <acc_service_get_base_configuration>
 800125c:	0004      	movs	r4, r0
 800125e:	f7ff fcb3 	bl	8000bc8 <configuration_is_valid>
 8001262:	2800      	cmp	r0, #0
 8001264:	d000      	beq.n	8001268 <acc_service_power_save_mode_set+0x14>
 8001266:	63a5      	str	r5, [r4, #56]	; 0x38
 8001268:	bd70      	pop	{r4, r5, r6, pc}

0800126a <acc_service_repetition_mode_streaming_set>:
 800126a:	b570      	push	{r4, r5, r6, lr}
 800126c:	1c0d      	adds	r5, r1, #0
 800126e:	f7ff ff37 	bl	80010e0 <acc_service_get_base_configuration>
 8001272:	0004      	movs	r4, r0
 8001274:	f7ff fca8 	bl	8000bc8 <configuration_is_valid>
 8001278:	2800      	cmp	r0, #0
 800127a:	d002      	beq.n	8001282 <acc_service_repetition_mode_streaming_set+0x18>
 800127c:	2303      	movs	r3, #3
 800127e:	60a5      	str	r5, [r4, #8]
 8001280:	7123      	strb	r3, [r4, #4]
 8001282:	bd70      	pop	{r4, r5, r6, pc}

08001284 <acc_service_repetition_mode_on_demand_set>:
 8001284:	b510      	push	{r4, lr}
 8001286:	f7ff ff2b 	bl	80010e0 <acc_service_get_base_configuration>
 800128a:	f7ff fd7c 	bl	8000d86 <acc_base_configuration_repetition_mode_on_demand_set>
 800128e:	bd10      	pop	{r4, pc}

08001290 <acc_service_requested_length_set>:
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	1c0d      	adds	r5, r1, #0
 8001294:	f7ff ff24 	bl	80010e0 <acc_service_get_base_configuration>
 8001298:	0004      	movs	r4, r0
 800129a:	f7ff fc95 	bl	8000bc8 <configuration_is_valid>
 800129e:	2800      	cmp	r0, #0
 80012a0:	d000      	beq.n	80012a4 <acc_service_requested_length_set+0x14>
 80012a2:	62a5      	str	r5, [r4, #40]	; 0x28
 80012a4:	bd70      	pop	{r4, r5, r6, pc}

080012a6 <acc_service_requested_start_set>:
 80012a6:	b570      	push	{r4, r5, r6, lr}
 80012a8:	1c0d      	adds	r5, r1, #0
 80012aa:	f7ff ff19 	bl	80010e0 <acc_service_get_base_configuration>
 80012ae:	0004      	movs	r4, r0
 80012b0:	f7ff fc8a 	bl	8000bc8 <configuration_is_valid>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d000      	beq.n	80012ba <acc_service_requested_start_set+0x14>
 80012b8:	6265      	str	r5, [r4, #36]	; 0x24
 80012ba:	bd70      	pop	{r4, r5, r6, pc}

080012bc <get_sparse_configuration>:
 80012bc:	b510      	push	{r4, lr}
 80012be:	1e04      	subs	r4, r0, #0
 80012c0:	d004      	beq.n	80012cc <get_sparse_configuration+0x10>
 80012c2:	7903      	ldrb	r3, [r0, #4]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d10d      	bne.n	80012e4 <get_sparse_configuration+0x28>
 80012c8:	0020      	movs	r0, r4
 80012ca:	bd10      	pop	{r4, pc}
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <get_sparse_configuration+0x2c>)
 80012ce:	001a      	movs	r2, r3
 80012d0:	3230      	adds	r2, #48	; 0x30
 80012d2:	7812      	ldrb	r2, [r2, #0]
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d0f7      	beq.n	80012c8 <get_sparse_configuration+0xc>
 80012d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012da:	4a04      	ldr	r2, [pc, #16]	; (80012ec <get_sparse_configuration+0x30>)
 80012dc:	4904      	ldr	r1, [pc, #16]	; (80012f0 <get_sparse_configuration+0x34>)
 80012de:	2001      	movs	r0, #1
 80012e0:	4798      	blx	r3
 80012e2:	e7f1      	b.n	80012c8 <get_sparse_configuration+0xc>
 80012e4:	2400      	movs	r4, #0
 80012e6:	e7ef      	b.n	80012c8 <get_sparse_configuration+0xc>
 80012e8:	200004a8 	.word	0x200004a8
 80012ec:	0801c712 	.word	0x0801c712
 80012f0:	0801c740 	.word	0x0801c740

080012f4 <set_configuration_for_profile.lto_priv.190>:
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	000d      	movs	r5, r1
 80012f8:	f7ff ffe0 	bl	80012bc <get_sparse_configuration>
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d011      	beq.n	8001324 <set_configuration_for_profile.lto_priv.190+0x30>
 8001300:	301c      	adds	r0, #28
 8001302:	0004      	movs	r4, r0
 8001304:	1e68      	subs	r0, r5, #1
 8001306:	2804      	cmp	r0, #4
 8001308:	d80c      	bhi.n	8001324 <set_configuration_for_profile.lto_priv.190+0x30>
 800130a:	f00f fbdb 	bl	8010ac4 <__gnu_thumb1_case_uqi>
 800130e:	0c03      	.short	0x0c03
 8001310:	170e      	.short	0x170e
 8001312:	20          	.byte	0x20
 8001313:	00          	.byte	0x00
 8001314:	2100      	movs	r1, #0
 8001316:	0020      	movs	r0, r4
 8001318:	f7ff fcac 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 800131c:	2100      	movs	r1, #0
 800131e:	0020      	movs	r0, r4
 8001320:	f7ff fcbd 	bl	8000c9e <acc_base_configuration_integrator_set>
 8001324:	bd70      	pop	{r4, r5, r6, pc}
 8001326:	2107      	movs	r1, #7
 8001328:	e7f5      	b.n	8001316 <set_configuration_for_profile.lto_priv.190+0x22>
 800132a:	0020      	movs	r0, r4
 800132c:	2109      	movs	r1, #9
 800132e:	f7ff fca1 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 8001332:	2103      	movs	r1, #3
 8001334:	0020      	movs	r0, r4
 8001336:	f7ff fcb2 	bl	8000c9e <acc_base_configuration_integrator_set>
 800133a:	e7f3      	b.n	8001324 <set_configuration_for_profile.lto_priv.190+0x30>
 800133c:	210c      	movs	r1, #12
 800133e:	0020      	movs	r0, r4
 8001340:	f7ff fc98 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 8001344:	2106      	movs	r1, #6
 8001346:	0020      	movs	r0, r4
 8001348:	f7ff fca9 	bl	8000c9e <acc_base_configuration_integrator_set>
 800134c:	e7ea      	b.n	8001324 <set_configuration_for_profile.lto_priv.190+0x30>
 800134e:	2110      	movs	r1, #16
 8001350:	e7f5      	b.n	800133e <set_configuration_for_profile.lto_priv.190+0x4a>

08001352 <acc_service_sparse_get_metadata>:
 8001352:	b510      	push	{r4, lr}
 8001354:	000c      	movs	r4, r1
 8001356:	2800      	cmp	r0, #0
 8001358:	d017      	beq.n	800138a <acc_service_sparse_get_metadata+0x38>
 800135a:	7a03      	ldrb	r3, [r0, #8]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d114      	bne.n	800138a <acc_service_sparse_get_metadata+0x38>
 8001360:	2900      	cmp	r1, #0
 8001362:	d012      	beq.n	800138a <acc_service_sparse_get_metadata+0x38>
 8001364:	6903      	ldr	r3, [r0, #16]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800136c:	600a      	str	r2, [r1, #0]
 800136e:	69da      	ldr	r2, [r3, #28]
 8001370:	604a      	str	r2, [r1, #4]
 8001372:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8001374:	810a      	strh	r2, [r1, #8]
 8001376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001378:	60ca      	str	r2, [r1, #12]
 800137a:	4904      	ldr	r1, [pc, #16]	; (800138c <acc_service_sparse_get_metadata+0x3a>)
 800137c:	f00f f884 	bl	8010488 <__aeabi_fmul>
 8001380:	21fc      	movs	r1, #252	; 0xfc
 8001382:	0589      	lsls	r1, r1, #22
 8001384:	f00f f880 	bl	8010488 <__aeabi_fmul>
 8001388:	6120      	str	r0, [r4, #16]
 800138a:	bd10      	pop	{r4, pc}
 800138c:	4d8ef3c2 	.word	0x4d8ef3c2

08001390 <acc_service_sparse_downsampling_factor_set>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	0004      	movs	r4, r0
 8001394:	000d      	movs	r5, r1
 8001396:	f7ff fe63 	bl	8001060 <acc_service_configuration_valid>
 800139a:	2800      	cmp	r0, #0
 800139c:	d003      	beq.n	80013a6 <acc_service_sparse_downsampling_factor_set+0x16>
 800139e:	0029      	movs	r1, r5
 80013a0:	6920      	ldr	r0, [r4, #16]
 80013a2:	f7ff fc3d 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
 80013a6:	bd70      	pop	{r4, r5, r6, pc}

080013a8 <acc_service_sparse_sampling_mode_set>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	0004      	movs	r4, r0
 80013ac:	000d      	movs	r5, r1
 80013ae:	f7ff ff85 	bl	80012bc <get_sparse_configuration>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d017      	beq.n	80013e6 <acc_service_sparse_sampling_mode_set+0x3e>
 80013b6:	2d00      	cmp	r5, #0
 80013b8:	d00d      	beq.n	80013d6 <acc_service_sparse_sampling_mode_set+0x2e>
 80013ba:	2d01      	cmp	r5, #1
 80013bc:	d00b      	beq.n	80013d6 <acc_service_sparse_sampling_mode_set+0x2e>
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <acc_service_sparse_sampling_mode_set+0x40>)
 80013c0:	001a      	movs	r2, r3
 80013c2:	3230      	adds	r2, #48	; 0x30
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	d00d      	beq.n	80013e6 <acc_service_sparse_sampling_mode_set+0x3e>
 80013ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <acc_service_sparse_sampling_mode_set+0x44>)
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <acc_service_sparse_sampling_mode_set+0x48>)
 80013d0:	2001      	movs	r0, #1
 80013d2:	4798      	blx	r3
 80013d4:	e007      	b.n	80013e6 <acc_service_sparse_sampling_mode_set+0x3e>
 80013d6:	6924      	ldr	r4, [r4, #16]
 80013d8:	0020      	movs	r0, r4
 80013da:	f7ff fbf5 	bl	8000bc8 <configuration_is_valid>
 80013de:	2800      	cmp	r0, #0
 80013e0:	d001      	beq.n	80013e6 <acc_service_sparse_sampling_mode_set+0x3e>
 80013e2:	346a      	adds	r4, #106	; 0x6a
 80013e4:	7025      	strb	r5, [r4, #0]
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
 80013e8:	200004a8 	.word	0x200004a8
 80013ec:	0801c74f 	.word	0x0801c74f
 80013f0:	0801c740 	.word	0x0801c740

080013f4 <acc_service_sparse_configuration_sweep_rate_set>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	0004      	movs	r4, r0
 80013f8:	1c0d      	adds	r5, r1, #0
 80013fa:	f7ff fe31 	bl	8001060 <acc_service_configuration_valid>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d006      	beq.n	8001410 <acc_service_sparse_configuration_sweep_rate_set+0x1c>
 8001402:	6924      	ldr	r4, [r4, #16]
 8001404:	0020      	movs	r0, r4
 8001406:	f7ff fbdf 	bl	8000bc8 <configuration_is_valid>
 800140a:	2800      	cmp	r0, #0
 800140c:	d000      	beq.n	8001410 <acc_service_sparse_configuration_sweep_rate_set+0x1c>
 800140e:	6665      	str	r5, [r4, #100]	; 0x64
 8001410:	bd70      	pop	{r4, r5, r6, pc}

08001412 <acc_service_sparse_configuration_sweeps_per_frame_set>:
 8001412:	b570      	push	{r4, r5, r6, lr}
 8001414:	0004      	movs	r4, r0
 8001416:	000d      	movs	r5, r1
 8001418:	f7ff fe22 	bl	8001060 <acc_service_configuration_valid>
 800141c:	2800      	cmp	r0, #0
 800141e:	d007      	beq.n	8001430 <acc_service_sparse_configuration_sweeps_per_frame_set+0x1e>
 8001420:	6924      	ldr	r4, [r4, #16]
 8001422:	0020      	movs	r0, r4
 8001424:	f7ff fbd0 	bl	8000bc8 <configuration_is_valid>
 8001428:	2800      	cmp	r0, #0
 800142a:	d001      	beq.n	8001430 <acc_service_sparse_configuration_sweeps_per_frame_set+0x1e>
 800142c:	3460      	adds	r4, #96	; 0x60
 800142e:	8025      	strh	r5, [r4, #0]
 8001430:	bd70      	pop	{r4, r5, r6, pc}

08001432 <acc_service_sparse_configuration_sweeps_per_frame_get>:
 8001432:	b510      	push	{r4, lr}
 8001434:	0004      	movs	r4, r0
 8001436:	f7ff fe13 	bl	8001060 <acc_service_configuration_valid>
 800143a:	0003      	movs	r3, r0
 800143c:	2000      	movs	r0, #0
 800143e:	4283      	cmp	r3, r0
 8001440:	d002      	beq.n	8001448 <acc_service_sparse_configuration_sweeps_per_frame_get+0x16>
 8001442:	6920      	ldr	r0, [r4, #16]
 8001444:	f7ff fc01 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 8001448:	bd10      	pop	{r4, pc}

0800144a <destroy_handle>:
 800144a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144c:	46c6      	mov	lr, r8
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <destroy_handle+0x5e>)
 8001450:	4e16      	ldr	r6, [pc, #88]	; (80014ac <destroy_handle+0x62>)
 8001452:	4698      	mov	r8, r3
 8001454:	689c      	ldr	r4, [r3, #8]
 8001456:	0033      	movs	r3, r6
 8001458:	b500      	push	{lr}
 800145a:	3330      	adds	r3, #48	; 0x30
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	0005      	movs	r5, r0
 8001460:	2b03      	cmp	r3, #3
 8001462:	d905      	bls.n	8001470 <destroy_handle+0x26>
 8001464:	6843      	ldr	r3, [r0, #4]
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <destroy_handle+0x66>)
 8001468:	4912      	ldr	r1, [pc, #72]	; (80014b4 <destroy_handle+0x6a>)
 800146a:	2004      	movs	r0, #4
 800146c:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800146e:	47b8      	blx	r7
 8001470:	2300      	movs	r3, #0
 8001472:	2c00      	cmp	r4, #0
 8001474:	d00d      	beq.n	8001492 <destroy_handle+0x48>
 8001476:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001478:	42ac      	cmp	r4, r5
 800147a:	d107      	bne.n	800148c <destroy_handle+0x42>
 800147c:	2b00      	cmp	r3, #0
 800147e:	d111      	bne.n	80014a4 <destroy_handle+0x5a>
 8001480:	4643      	mov	r3, r8
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	0020      	movs	r0, r4
 8001486:	f7ff faa5 	bl	80009d4 <acc_rss_integration_mem_free>
 800148a:	e008      	b.n	800149e <destroy_handle+0x54>
 800148c:	0023      	movs	r3, r4
 800148e:	0014      	movs	r4, r2
 8001490:	e7ef      	b.n	8001472 <destroy_handle+0x28>
 8001492:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8001494:	686b      	ldr	r3, [r5, #4]
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <destroy_handle+0x6e>)
 8001498:	4906      	ldr	r1, [pc, #24]	; (80014b4 <destroy_handle+0x6a>)
 800149a:	0020      	movs	r0, r4
 800149c:	47b0      	blx	r6
 800149e:	bc04      	pop	{r2}
 80014a0:	4690      	mov	r8, r2
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a4:	655a      	str	r2, [r3, #84]	; 0x54
 80014a6:	e7ed      	b.n	8001484 <destroy_handle+0x3a>
 80014a8:	2000008c 	.word	0x2000008c
 80014ac:	200004a8 	.word	0x200004a8
 80014b0:	0801c774 	.word	0x0801c774
 80014b4:	0801c795 	.word	0x0801c795
 80014b8:	0801c7a5 	.word	0x0801c7a5

080014bc <get_and_validate_envelope_configuration>:
 80014bc:	b510      	push	{r4, lr}
 80014be:	0004      	movs	r4, r0
 80014c0:	f7ff fdce 	bl	8001060 <acc_service_configuration_valid>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d002      	beq.n	80014ce <get_and_validate_envelope_configuration+0x12>
 80014c8:	7923      	ldrb	r3, [r4, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <get_and_validate_envelope_configuration+0x2a>
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <get_and_validate_envelope_configuration+0x30>)
 80014d0:	001a      	movs	r2, r3
 80014d2:	3230      	adds	r2, #48	; 0x30
 80014d4:	7812      	ldrb	r2, [r2, #0]
 80014d6:	1e14      	subs	r4, r2, #0
 80014d8:	d005      	beq.n	80014e6 <get_and_validate_envelope_configuration+0x2a>
 80014da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <get_and_validate_envelope_configuration+0x34>)
 80014de:	4905      	ldr	r1, [pc, #20]	; (80014f4 <get_and_validate_envelope_configuration+0x38>)
 80014e0:	2001      	movs	r0, #1
 80014e2:	4798      	blx	r3
 80014e4:	2400      	movs	r4, #0
 80014e6:	0020      	movs	r0, r4
 80014e8:	bd10      	pop	{r4, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	200004a8 	.word	0x200004a8
 80014f0:	0801c712 	.word	0x0801c712
 80014f4:	0801c7d9 	.word	0x0801c7d9

080014f8 <set_configuration_for_profile.lto_priv.189>:
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	000e      	movs	r6, r1
 80014fc:	f7ff ffde 	bl	80014bc <get_and_validate_envelope_configuration>
 8001500:	1e05      	subs	r5, r0, #0
 8001502:	d018      	beq.n	8001536 <set_configuration_for_profile.lto_priv.189+0x3e>
 8001504:	0004      	movs	r4, r0
 8001506:	1e70      	subs	r0, r6, #1
 8001508:	341c      	adds	r4, #28
 800150a:	2804      	cmp	r0, #4
 800150c:	d813      	bhi.n	8001536 <set_configuration_for_profile.lto_priv.189+0x3e>
 800150e:	358c      	adds	r5, #140	; 0x8c
 8001510:	f00f fad8 	bl	8010ac4 <__gnu_thumb1_case_uqi>
 8001514:	23211203 	.word	0x23211203
 8001518:	32          	.byte	0x32
 8001519:	00          	.byte	0x00
 800151a:	2100      	movs	r1, #0
 800151c:	0020      	movs	r0, r4
 800151e:	f7ff fba9 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 8001522:	2100      	movs	r1, #0
 8001524:	0020      	movs	r0, r4
 8001526:	f7ff fbba 	bl	8000c9e <acc_base_configuration_integrator_set>
 800152a:	2103      	movs	r1, #3
 800152c:	0020      	movs	r0, r4
 800152e:	f7ff fb97 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <set_configuration_for_profile.lto_priv.189+0x84>)
 8001534:	602b      	str	r3, [r5, #0]
 8001536:	bd70      	pop	{r4, r5, r6, pc}
 8001538:	2107      	movs	r1, #7
 800153a:	0020      	movs	r0, r4
 800153c:	f7ff fb9a 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 8001540:	2106      	movs	r1, #6
 8001542:	0020      	movs	r0, r4
 8001544:	f7ff fbab 	bl	8000c9e <acc_base_configuration_integrator_set>
 8001548:	2109      	movs	r1, #9
 800154a:	0020      	movs	r0, r4
 800154c:	f7ff fb88 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <set_configuration_for_profile.lto_priv.189+0x88>)
 8001552:	602b      	str	r3, [r5, #0]
 8001554:	e7ef      	b.n	8001536 <set_configuration_for_profile.lto_priv.189+0x3e>
 8001556:	2109      	movs	r1, #9
 8001558:	e7ef      	b.n	800153a <set_configuration_for_profile.lto_priv.189+0x42>
 800155a:	210c      	movs	r1, #12
 800155c:	0020      	movs	r0, r4
 800155e:	f7ff fb89 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 8001562:	2106      	movs	r1, #6
 8001564:	0020      	movs	r0, r4
 8001566:	f7ff fb9a 	bl	8000c9e <acc_base_configuration_integrator_set>
 800156a:	2101      	movs	r1, #1
 800156c:	0020      	movs	r0, r4
 800156e:	f7ff fb77 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 8001572:	4b03      	ldr	r3, [pc, #12]	; (8001580 <set_configuration_for_profile.lto_priv.189+0x88>)
 8001574:	602b      	str	r3, [r5, #0]
 8001576:	e7de      	b.n	8001536 <set_configuration_for_profile.lto_priv.189+0x3e>
 8001578:	2110      	movs	r1, #16
 800157a:	e7ef      	b.n	800155c <set_configuration_for_profile.lto_priv.189+0x64>
 800157c:	3c8461fa 	.word	0x3c8461fa
 8001580:	3b843809 	.word	0x3b843809

08001584 <acc_service_envelope_get_metadata>:
 8001584:	b510      	push	{r4, lr}
 8001586:	000c      	movs	r4, r1
 8001588:	2800      	cmp	r0, #0
 800158a:	d018      	beq.n	80015be <acc_service_envelope_get_metadata+0x3a>
 800158c:	7a03      	ldrb	r3, [r0, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d115      	bne.n	80015be <acc_service_envelope_get_metadata+0x3a>
 8001592:	2900      	cmp	r1, #0
 8001594:	d013      	beq.n	80015be <acc_service_envelope_get_metadata+0x3a>
 8001596:	6903      	ldr	r3, [r0, #16]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800159e:	600a      	str	r2, [r1, #0]
 80015a0:	69da      	ldr	r2, [r3, #28]
 80015a2:	604a      	str	r2, [r1, #4]
 80015a4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80015a6:	810a      	strh	r2, [r1, #8]
 80015a8:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80015aa:	3a01      	subs	r2, #1
 80015ac:	814a      	strh	r2, [r1, #10]
 80015ae:	4904      	ldr	r1, [pc, #16]	; (80015c0 <acc_service_envelope_get_metadata+0x3c>)
 80015b0:	f00e ff6a 	bl	8010488 <__aeabi_fmul>
 80015b4:	21fc      	movs	r1, #252	; 0xfc
 80015b6:	0589      	lsls	r1, r1, #22
 80015b8:	f00e ff66 	bl	8010488 <__aeabi_fmul>
 80015bc:	60e0      	str	r0, [r4, #12]
 80015be:	bd10      	pop	{r4, pc}
 80015c0:	4d8ef3c2 	.word	0x4d8ef3c2

080015c4 <acc_service_envelope_noise_level_normalization_set>:
 80015c4:	b570      	push	{r4, r5, r6, lr}
 80015c6:	0004      	movs	r4, r0
 80015c8:	000d      	movs	r5, r1
 80015ca:	f7ff ff77 	bl	80014bc <get_and_validate_envelope_configuration>
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d009      	beq.n	80015e6 <acc_service_envelope_noise_level_normalization_set+0x22>
 80015d2:	0020      	movs	r0, r4
 80015d4:	f7ff fd84 	bl	80010e0 <acc_service_get_base_configuration>
 80015d8:	0004      	movs	r4, r0
 80015da:	f7ff faf5 	bl	8000bc8 <configuration_is_valid>
 80015de:	2800      	cmp	r0, #0
 80015e0:	d001      	beq.n	80015e6 <acc_service_envelope_noise_level_normalization_set+0x22>
 80015e2:	3449      	adds	r4, #73	; 0x49
 80015e4:	7025      	strb	r5, [r4, #0]
 80015e6:	bd70      	pop	{r4, r5, r6, pc}

080015e8 <acc_service_envelope_running_average_factor_set>:
 80015e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ea:	0005      	movs	r5, r0
 80015ec:	1c0c      	adds	r4, r1, #0
 80015ee:	f7ff ff65 	bl	80014bc <get_and_validate_envelope_configuration>
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d017      	beq.n	8001626 <acc_service_envelope_running_average_factor_set+0x3e>
 80015f6:	2100      	movs	r1, #0
 80015f8:	1c20      	adds	r0, r4, #0
 80015fa:	f00f fc3d 	bl	8010e78 <__aeabi_fcmplt>
 80015fe:	2800      	cmp	r0, #0
 8001600:	d106      	bne.n	8001610 <acc_service_envelope_running_average_factor_set+0x28>
 8001602:	21fe      	movs	r1, #254	; 0xfe
 8001604:	1c20      	adds	r0, r4, #0
 8001606:	0589      	lsls	r1, r1, #22
 8001608:	f00f fc4a 	bl	8010ea0 <__aeabi_fcmpgt>
 800160c:	1e07      	subs	r7, r0, #0
 800160e:	d00b      	beq.n	8001628 <acc_service_envelope_running_average_factor_set+0x40>
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <acc_service_envelope_running_average_factor_set+0x70>)
 8001612:	001a      	movs	r2, r3
 8001614:	3230      	adds	r2, #48	; 0x30
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	2a00      	cmp	r2, #0
 800161a:	d004      	beq.n	8001626 <acc_service_envelope_running_average_factor_set+0x3e>
 800161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161e:	4a0f      	ldr	r2, [pc, #60]	; (800165c <acc_service_envelope_running_average_factor_set+0x74>)
 8001620:	490f      	ldr	r1, [pc, #60]	; (8001660 <acc_service_envelope_running_average_factor_set+0x78>)
 8001622:	2001      	movs	r0, #1
 8001624:	4798      	blx	r3
 8001626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001628:	0028      	movs	r0, r5
 800162a:	f7ff fd59 	bl	80010e0 <acc_service_get_base_configuration>
 800162e:	0005      	movs	r5, r0
 8001630:	f7ff faca 	bl	8000bc8 <configuration_is_valid>
 8001634:	2800      	cmp	r0, #0
 8001636:	d0f6      	beq.n	8001626 <acc_service_envelope_running_average_factor_set+0x3e>
 8001638:	20fe      	movs	r0, #254	; 0xfe
 800163a:	1c21      	adds	r1, r4, #0
 800163c:	0580      	lsls	r0, r0, #22
 800163e:	f00f f855 	bl	80106ec <__aeabi_fsub>
 8001642:	2100      	movs	r1, #0
 8001644:	6168      	str	r0, [r5, #20]
 8001646:	1c20      	adds	r0, r4, #0
 8001648:	2601      	movs	r6, #1
 800164a:	f00f fc0f 	bl	8010e6c <__aeabi_fcmpeq>
 800164e:	2800      	cmp	r0, #0
 8001650:	d000      	beq.n	8001654 <acc_service_envelope_running_average_factor_set+0x6c>
 8001652:	1c3e      	adds	r6, r7, #0
 8001654:	762e      	strb	r6, [r5, #24]
 8001656:	e7e6      	b.n	8001626 <acc_service_envelope_running_average_factor_set+0x3e>
 8001658:	200004a8 	.word	0x200004a8
 800165c:	0801c7ea 	.word	0x0801c7ea
 8001660:	0801c7d9 	.word	0x0801c7d9

08001664 <acc_service_envelope_downsampling_factor_set>:
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	0004      	movs	r4, r0
 8001668:	000d      	movs	r5, r1
 800166a:	f7ff ff27 	bl	80014bc <get_and_validate_envelope_configuration>
 800166e:	2800      	cmp	r0, #0
 8001670:	d003      	beq.n	800167a <acc_service_envelope_downsampling_factor_set+0x16>
 8001672:	0029      	movs	r1, r5
 8001674:	6920      	ldr	r0, [r4, #16]
 8001676:	f7ff fad3 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
 800167a:	bd70      	pop	{r4, r5, r6, pc}

0800167c <acc_rss_override_sensor_id_check_at_creation>:
 800167c:	4b01      	ldr	r3, [pc, #4]	; (8001684 <acc_rss_override_sensor_id_check_at_creation+0x8>)
 800167e:	7158      	strb	r0, [r3, #5]
 8001680:	4770      	bx	lr
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	2000008c 	.word	0x2000008c

08001688 <pack16to32array>:
		a[i] = a[i-1];
	}
	a[indx] = v;
}

void pack16to32array(uint32_t* a, uint16_t* b, uint16_t* c){
 8001688:	b570      	push	{r4, r5, r6, lr}
	const int n = 4;//number of peaks to find
	for(uint8_t i = 0; i < n; i++ ){
 800168a:	2300      	movs	r3, #0
 800168c:	e008      	b.n	80016a0 <pack16to32array+0x18>
		a[i] = (((uint32_t)b[i])<<16) | c[i];
 800168e:	005d      	lsls	r5, r3, #1
 8001690:	5b4c      	ldrh	r4, [r1, r5]
 8001692:	0424      	lsls	r4, r4, #16
 8001694:	5b56      	ldrh	r6, [r2, r5]
 8001696:	009d      	lsls	r5, r3, #2
 8001698:	4334      	orrs	r4, r6
 800169a:	5144      	str	r4, [r0, r5]
	for(uint8_t i = 0; i < n; i++ ){
 800169c:	3301      	adds	r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d9f4      	bls.n	800168e <pack16to32array+0x6>
	}
 80016a4:	bd70      	pop	{r4, r5, r6, pc}

080016a6 <insert>:
void insert(uint16_t* a, uint16_t a_len, uint16_t v, uint8_t indx){
 80016a6:	b530      	push	{r4, r5, lr}
	for(int8_t i = n-1; i > indx; i-- ){
 80016a8:	3901      	subs	r1, #1
 80016aa:	b249      	sxtb	r1, r1
 80016ac:	e007      	b.n	80016be <insert+0x18>
		a[i] = a[i-1];
 80016ae:	004d      	lsls	r5, r1, #1
 80016b0:	4c05      	ldr	r4, [pc, #20]	; (80016c8 <insert+0x22>)
 80016b2:	190c      	adds	r4, r1, r4
 80016b4:	0064      	lsls	r4, r4, #1
 80016b6:	5a24      	ldrh	r4, [r4, r0]
 80016b8:	5344      	strh	r4, [r0, r5]
	for(int8_t i = n-1; i > indx; i-- ){
 80016ba:	3901      	subs	r1, #1
 80016bc:	b249      	sxtb	r1, r1
 80016be:	4299      	cmp	r1, r3
 80016c0:	dcf5      	bgt.n	80016ae <insert+0x8>
	a[indx] = v;
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	52c2      	strh	r2, [r0, r3]
}
 80016c6:	bd30      	pop	{r4, r5, pc}
 80016c8:	7fffffff 	.word	0x7fffffff

080016cc <next_peak>:
uint16_t next_peak(uint16_t** data, uint16_t bins, uint16_t index, uint16_t min_sep){
 80016cc:	b510      	push	{r4, lr}
	uint16_t amp = data[0][index];
 80016ce:	6800      	ldr	r0, [r0, #0]
 80016d0:	0054      	lsls	r4, r2, #1
 80016d2:	5b04      	ldrh	r4, [r0, r4]
	uint16_t indexend = MIN(bins,index + min_sep);
 80016d4:	18d3      	adds	r3, r2, r3
 80016d6:	428b      	cmp	r3, r1
 80016d8:	dd00      	ble.n	80016dc <next_peak+0x10>
 80016da:	000b      	movs	r3, r1
 80016dc:	b29b      	uxth	r3, r3
	for(uint16_t i = index; i < indexend; i ++){
 80016de:	429a      	cmp	r2, r3
 80016e0:	d206      	bcs.n	80016f0 <next_peak+0x24>
		if(amp < data[0][i]){return i;}
 80016e2:	0051      	lsls	r1, r2, #1
 80016e4:	5a09      	ldrh	r1, [r1, r0]
 80016e6:	42a1      	cmp	r1, r4
 80016e8:	d804      	bhi.n	80016f4 <next_peak+0x28>
	for(uint16_t i = index; i < indexend; i ++){
 80016ea:	3201      	adds	r2, #1
 80016ec:	b292      	uxth	r2, r2
 80016ee:	e7f6      	b.n	80016de <next_peak+0x12>
	return 0;
 80016f0:	2000      	movs	r0, #0
}
 80016f2:	bd10      	pop	{r4, pc}
		if(amp < data[0][i]){return i;}
 80016f4:	0010      	movs	r0, r2
 80016f6:	e7fc      	b.n	80016f2 <next_peak+0x26>

080016f8 <getpeaks>:
void getpeaks(uint16_t** data, uint16_t data_len, uint16_t* indexes, uint16_t* amplitudes){
 80016f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fa:	46ce      	mov	lr, r9
 80016fc:	4647      	mov	r7, r8
 80016fe:	b580      	push	{r7, lr}
 8001700:	0005      	movs	r5, r0
 8001702:	4689      	mov	r9, r1
 8001704:	4690      	mov	r8, r2
 8001706:	001e      	movs	r6, r3
	for(uint8_t i = 0; i < n; i++){
 8001708:	2300      	movs	r3, #0
 800170a:	e008      	b.n	800171e <getpeaks+0x26>
		indexes[i] = 0;
 800170c:	005a      	lsls	r2, r3, #1
 800170e:	4641      	mov	r1, r8
 8001710:	1888      	adds	r0, r1, r2
 8001712:	2100      	movs	r1, #0
 8001714:	8001      	strh	r1, [r0, #0]
		amplitudes[i] = 0;
 8001716:	18b2      	adds	r2, r6, r2
 8001718:	8011      	strh	r1, [r2, #0]
	for(uint8_t i = 0; i < n; i++){
 800171a:	3301      	adds	r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d9f4      	bls.n	800170c <getpeaks+0x14>
	for(uint16_t i = 0; i < bins; i++){
 8001722:	2700      	movs	r7, #0
 8001724:	e004      	b.n	8001730 <getpeaks+0x38>
			if(insert_indx < 4){
 8001726:	2c03      	cmp	r4, #3
 8001728:	d91b      	bls.n	8001762 <getpeaks+0x6a>
 800172a:	0038      	movs	r0, r7
	for(uint16_t i = 0; i < bins; i++){
 800172c:	3001      	adds	r0, #1
 800172e:	b287      	uxth	r7, r0
 8001730:	454f      	cmp	r7, r9
 8001732:	d227      	bcs.n	8001784 <getpeaks+0x8c>
		uint16_t nxpeak = next_peak(data, bins, i, min_sep);
 8001734:	2332      	movs	r3, #50	; 0x32
 8001736:	003a      	movs	r2, r7
 8001738:	4649      	mov	r1, r9
 800173a:	0028      	movs	r0, r5
 800173c:	f7ff ffc6 	bl	80016cc <next_peak>
		if (nxpeak == 0){
 8001740:	2800      	cmp	r0, #0
 8001742:	d1f3      	bne.n	800172c <getpeaks+0x34>
			for(int8_t j = n-1; j >= 0; j--){
 8001744:	2303      	movs	r3, #3
		uint8_t insert_indx = n;
 8001746:	2404      	movs	r4, #4
			for(int8_t j = n-1; j >= 0; j--){
 8001748:	2b00      	cmp	r3, #0
 800174a:	dbec      	blt.n	8001726 <getpeaks+0x2e>
				if(data[0][i] > amplitudes[j]){insert_indx = j;}
 800174c:	007a      	lsls	r2, r7, #1
 800174e:	6829      	ldr	r1, [r5, #0]
 8001750:	5a51      	ldrh	r1, [r2, r1]
 8001752:	005a      	lsls	r2, r3, #1
 8001754:	5b92      	ldrh	r2, [r2, r6]
 8001756:	4291      	cmp	r1, r2
 8001758:	d9e5      	bls.n	8001726 <getpeaks+0x2e>
 800175a:	b2dc      	uxtb	r4, r3
			for(int8_t j = n-1; j >= 0; j--){
 800175c:	1e63      	subs	r3, r4, #1
 800175e:	b25b      	sxtb	r3, r3
 8001760:	e7f2      	b.n	8001748 <getpeaks+0x50>
				insert(indexes, n, i,insert_indx);
 8001762:	0023      	movs	r3, r4
 8001764:	003a      	movs	r2, r7
 8001766:	2104      	movs	r1, #4
 8001768:	4640      	mov	r0, r8
 800176a:	f7ff ff9c 	bl	80016a6 <insert>
				insert(amplitudes, n, data[0][i],insert_indx);
 800176e:	007b      	lsls	r3, r7, #1
 8001770:	682a      	ldr	r2, [r5, #0]
 8001772:	5ad2      	ldrh	r2, [r2, r3]
 8001774:	0023      	movs	r3, r4
 8001776:	2104      	movs	r1, #4
 8001778:	0030      	movs	r0, r6
 800177a:	f7ff ff94 	bl	80016a6 <insert>
				i += min_sep;
 800177e:	3732      	adds	r7, #50	; 0x32
 8001780:	b2b8      	uxth	r0, r7
 8001782:	e7d3      	b.n	800172c <getpeaks+0x34>
}
 8001784:	bc0c      	pop	{r2, r3}
 8001786:	4690      	mov	r8, r2
 8001788:	4699      	mov	r9, r3
 800178a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800178c <null_data>:
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	b083      	sub	sp, #12
 8001790:	0006      	movs	r6, r0
 8001792:	1c0d      	adds	r5, r1, #0
 8001794:	040c      	lsls	r4, r1, #16
 8001796:	a801      	add	r0, sp, #4
 8001798:	8001      	strh	r1, [r0, #0]
 800179a:	0411      	lsls	r1, r2, #16
 800179c:	466f      	mov	r7, sp
 800179e:	803a      	strh	r2, [r7, #0]
 80017a0:	1c1f      	adds	r7, r3, #0
	uint8_t sweeps = data_size.x1;
 80017a2:	b2ed      	uxtb	r5, r5
	uint8_t bins = data_size.x2;
 80017a4:	0e24      	lsrs	r4, r4, #24
	uint8_t msweep = max.x1;
 80017a6:	b2d0      	uxtb	r0, r2
	uint8_t mbin = max.x2;
 80017a8:	0e09      	lsrs	r1, r1, #24
	uint16_t apex = data[msweep][mbin];
 80017aa:	0080      	lsls	r0, r0, #2
 80017ac:	5983      	ldr	r3, [r0, r6]
 80017ae:	0049      	lsls	r1, r1, #1
 80017b0:	5a58      	ldrh	r0, [r3, r1]
	uint16_t halfpex = apex*threshold;
 80017b2:	f00f fd9d 	bl	80112f0 <__aeabi_i2f>
 80017b6:	1c39      	adds	r1, r7, #0
 80017b8:	f00e fe66 	bl	8010488 <__aeabi_fmul>
 80017bc:	f00f fba4 	bl	8010f08 <__aeabi_f2uiz>
 80017c0:	b280      	uxth	r0, r0
	for(uint16_t i = 0; i<bins; i++){
 80017c2:	2700      	movs	r7, #0
 80017c4:	e010      	b.n	80017e8 <null_data+0x5c>
	for(uint16_t j = 0; j<sweeps/2; j++){
 80017c6:	3301      	adds	r3, #1
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	086a      	lsrs	r2, r5, #1
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d909      	bls.n	80017e4 <null_data+0x58>
		if(data[j][i] > halfpex){
 80017d0:	009a      	lsls	r2, r3, #2
 80017d2:	5992      	ldr	r2, [r2, r6]
 80017d4:	0079      	lsls	r1, r7, #1
 80017d6:	1852      	adds	r2, r2, r1
 80017d8:	8811      	ldrh	r1, [r2, #0]
 80017da:	4281      	cmp	r1, r0
 80017dc:	d9f3      	bls.n	80017c6 <null_data+0x3a>
			data[j][i] = 0;
 80017de:	2100      	movs	r1, #0
 80017e0:	8011      	strh	r1, [r2, #0]
 80017e2:	e7f0      	b.n	80017c6 <null_data+0x3a>
	for(uint16_t i = 0; i<bins; i++){
 80017e4:	3701      	adds	r7, #1
 80017e6:	b2bf      	uxth	r7, r7
 80017e8:	b2a3      	uxth	r3, r4
 80017ea:	42bb      	cmp	r3, r7
 80017ec:	d901      	bls.n	80017f2 <null_data+0x66>
	for(uint16_t j = 0; j<sweeps/2; j++){
 80017ee:	2300      	movs	r3, #0
 80017f0:	e7eb      	b.n	80017ca <null_data+0x3e>
}
 80017f2:	b003      	add	sp, #12
 80017f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017f6 <get_msd>:
float get_msd(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 80017f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f8:	46de      	mov	lr, fp
 80017fa:	4657      	mov	r7, sl
 80017fc:	464e      	mov	r6, r9
 80017fe:	4645      	mov	r5, r8
 8001800:	b5e0      	push	{r5, r6, r7, lr}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	4682      	mov	sl, r0
 8001806:	1c0d      	adds	r5, r1, #0
 8001808:	040e      	lsls	r6, r1, #16
 800180a:	a807      	add	r0, sp, #28
 800180c:	8001      	strh	r1, [r0, #0]
 800180e:	0411      	lsls	r1, r2, #16
 8001810:	ac06      	add	r4, sp, #24
 8001812:	8022      	strh	r2, [r4, #0]
 8001814:	1c1c      	adds	r4, r3, #0
	uint8_t sweeps = data_size.x1;
 8001816:	b2eb      	uxtb	r3, r5
 8001818:	4698      	mov	r8, r3
	uint8_t bins = data_size.x2;
 800181a:	0e33      	lsrs	r3, r6, #24
 800181c:	9305      	str	r3, [sp, #20]
	uint8_t msweep = max.x1;
 800181e:	b2d3      	uxtb	r3, r2
 8001820:	469b      	mov	fp, r3
	uint8_t mbin = max.x2;
 8001822:	0e0b      	lsrs	r3, r1, #24
 8001824:	4699      	mov	r9, r3
	uint16_t apex = data[msweep][mbin];
 8001826:	465b      	mov	r3, fp
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4652      	mov	r2, sl
 800182c:	589a      	ldr	r2, [r3, r2]
 800182e:	464b      	mov	r3, r9
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	5ad0      	ldrh	r0, [r2, r3]
	uint16_t halfpex = (uint16_t)(apex * threshold);
 8001834:	f00f fd5c 	bl	80112f0 <__aeabi_i2f>
 8001838:	1c21      	adds	r1, r4, #0
 800183a:	f00e fe25 	bl	8010488 <__aeabi_fmul>
 800183e:	f00f fb63 	bl	8010f08 <__aeabi_f2uiz>
 8001842:	b287      	uxth	r7, r0
	for(int16_t i = 0; i<bins; i++){
 8001844:	2600      	movs	r6, #0
	float mass = 0.0f;
 8001846:	2300      	movs	r3, #0
 8001848:	9302      	str	r3, [sp, #8]
	float meansqdist = 0.0f;
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	003b      	movs	r3, r7
 800184e:	4647      	mov	r7, r8
 8001850:	46d8      	mov	r8, fp
 8001852:	469b      	mov	fp, r3
 8001854:	e02a      	b.n	80018ac <get_msd+0xb6>
	for(int16_t j = 0; j<sweeps/2; j++){
 8001856:	3501      	adds	r5, #1
 8001858:	b22d      	sxth	r5, r5
 800185a:	002c      	movs	r4, r5
 800185c:	087b      	lsrs	r3, r7, #1
 800185e:	429d      	cmp	r5, r3
 8001860:	da22      	bge.n	80018a8 <get_msd+0xb2>
		if (data[j][i] > halfpex){
 8001862:	00ab      	lsls	r3, r5, #2
 8001864:	4652      	mov	r2, sl
 8001866:	589b      	ldr	r3, [r3, r2]
 8001868:	0072      	lsls	r2, r6, #1
 800186a:	5ad0      	ldrh	r0, [r2, r3]
 800186c:	4558      	cmp	r0, fp
 800186e:	d9f2      	bls.n	8001856 <get_msd+0x60>
			mass += data[j][i];
 8001870:	f00f fd3e 	bl	80112f0 <__aeabi_i2f>
 8001874:	9003      	str	r0, [sp, #12]
 8001876:	1c01      	adds	r1, r0, #0
 8001878:	9802      	ldr	r0, [sp, #8]
 800187a:	f00e fb59 	bl	800ff30 <__aeabi_fadd>
 800187e:	9002      	str	r0, [sp, #8]
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 8001880:	4643      	mov	r3, r8
 8001882:	1ae4      	subs	r4, r4, r3
 8001884:	4364      	muls	r4, r4
 8001886:	9b04      	ldr	r3, [sp, #16]
 8001888:	464a      	mov	r2, r9
 800188a:	1a98      	subs	r0, r3, r2
 800188c:	4340      	muls	r0, r0
 800188e:	1820      	adds	r0, r4, r0
			meansqdist += (float)abs(data[j][i])*(float)(dist);
 8001890:	f00f fd78 	bl	8011384 <__aeabi_ui2f>
 8001894:	1c01      	adds	r1, r0, #0
 8001896:	9803      	ldr	r0, [sp, #12]
 8001898:	f00e fdf6 	bl	8010488 <__aeabi_fmul>
 800189c:	1c01      	adds	r1, r0, #0
 800189e:	9801      	ldr	r0, [sp, #4]
 80018a0:	f00e fb46 	bl	800ff30 <__aeabi_fadd>
 80018a4:	9001      	str	r0, [sp, #4]
 80018a6:	e7d6      	b.n	8001856 <get_msd+0x60>
	for(int16_t i = 0; i<bins; i++){
 80018a8:	3601      	adds	r6, #1
 80018aa:	b236      	sxth	r6, r6
 80018ac:	9604      	str	r6, [sp, #16]
 80018ae:	9b05      	ldr	r3, [sp, #20]
 80018b0:	429e      	cmp	r6, r3
 80018b2:	da01      	bge.n	80018b8 <get_msd+0xc2>
	for(int16_t j = 0; j<sweeps/2; j++){
 80018b4:	2500      	movs	r5, #0
 80018b6:	e7d0      	b.n	800185a <get_msd+0x64>
	if(mass != 0.0f){
 80018b8:	2100      	movs	r1, #0
 80018ba:	9c02      	ldr	r4, [sp, #8]
 80018bc:	1c20      	adds	r0, r4, #0
 80018be:	f00f fad5 	bl	8010e6c <__aeabi_fcmpeq>
 80018c2:	2800      	cmp	r0, #0
 80018c4:	d104      	bne.n	80018d0 <get_msd+0xda>
		meansqdist /= mass;
 80018c6:	1c21      	adds	r1, r4, #0
 80018c8:	9801      	ldr	r0, [sp, #4]
 80018ca:	f00e fccb 	bl	8010264 <__aeabi_fdiv>
 80018ce:	9001      	str	r0, [sp, #4]
}
 80018d0:	9801      	ldr	r0, [sp, #4]
 80018d2:	b009      	add	sp, #36	; 0x24
 80018d4:	bc3c      	pop	{r2, r3, r4, r5}
 80018d6:	4690      	mov	r8, r2
 80018d8:	4699      	mov	r9, r3
 80018da:	46a2      	mov	sl, r4
 80018dc:	46ab      	mov	fp, r5
 80018de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e0 <max2d>:
uint8v2_t max2d(uint16_t** data, uint8v2_t data_size){
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	46c6      	mov	lr, r8
 80018e4:	b500      	push	{lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	040d      	lsls	r5, r1, #16
 80018ea:	ab01      	add	r3, sp, #4
 80018ec:	8019      	strh	r1, [r3, #0]
	uint8_t sweeps = data_size.x1;
 80018ee:	b2cf      	uxtb	r7, r1
	uint8_t bins = data_size.x2;
 80018f0:	0e2b      	lsrs	r3, r5, #24
 80018f2:	9300      	str	r3, [sp, #0]
	for(uint16_t i = 0; i<bins; i++){
 80018f4:	2100      	movs	r1, #0
	uint8_t msweep = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	4698      	mov	r8, r3
	uint8_t mbin = 0;
 80018fa:	2500      	movs	r5, #0
	uint16_t apex = 0;
 80018fc:	2600      	movs	r6, #0
 80018fe:	e011      	b.n	8001924 <max2d+0x44>
		for(uint16_t j = 0; j<sweeps/2; j++){
 8001900:	3301      	adds	r3, #1
 8001902:	b29b      	uxth	r3, r3
 8001904:	087a      	lsrs	r2, r7, #1
 8001906:	429a      	cmp	r2, r3
 8001908:	d90a      	bls.n	8001920 <max2d+0x40>
				if(data[j][i] > apex){
 800190a:	009a      	lsls	r2, r3, #2
 800190c:	5812      	ldr	r2, [r2, r0]
 800190e:	004c      	lsls	r4, r1, #1
 8001910:	5aa2      	ldrh	r2, [r4, r2]
 8001912:	42b2      	cmp	r2, r6
 8001914:	d9f4      	bls.n	8001900 <max2d+0x20>
					mbin = i;
 8001916:	b2cd      	uxtb	r5, r1
					msweep = j;
 8001918:	b2dc      	uxtb	r4, r3
 800191a:	46a0      	mov	r8, r4
					apex = data[j][i];
 800191c:	0016      	movs	r6, r2
 800191e:	e7ef      	b.n	8001900 <max2d+0x20>
	for(uint16_t i = 0; i<bins; i++){
 8001920:	3101      	adds	r1, #1
 8001922:	b289      	uxth	r1, r1
 8001924:	9b00      	ldr	r3, [sp, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	428b      	cmp	r3, r1
 800192a:	d901      	bls.n	8001930 <max2d+0x50>
		for(uint16_t j = 0; j<sweeps/2; j++){
 800192c:	2300      	movs	r3, #0
 800192e:	e7e9      	b.n	8001904 <max2d+0x24>
	uint8v2_t max_index = {msweep,mbin};
 8001930:	ab02      	add	r3, sp, #8
 8001932:	4642      	mov	r2, r8
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	705d      	strb	r5, [r3, #1]
	return max_index;
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	0a18      	lsrs	r0, r3, #8
 800193c:	0200      	lsls	r0, r0, #8
 800193e:	22ff      	movs	r2, #255	; 0xff
 8001940:	4013      	ands	r3, r2
 8001942:	4318      	orrs	r0, r3
}
 8001944:	b004      	add	sp, #16
 8001946:	bc04      	pop	{r2}
 8001948:	4690      	mov	r8, r2
 800194a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800194c <stackPush>:
float stackPush(float val){
 800194c:	b530      	push	{r4, r5, lr}
 800194e:	1c05      	adds	r5, r0, #0
	float popped = convstack[0];
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <stackPush+0x28>)
 8001952:	68d8      	ldr	r0, [r3, #12]
	for(int i = 0; i < CONVKER-1; i++){
 8001954:	2300      	movs	r3, #0
 8001956:	e008      	b.n	800196a <stackPush+0x1e>
	convstack[i] = convstack[i+1];
 8001958:	1c5c      	adds	r4, r3, #1
 800195a:	4a06      	ldr	r2, [pc, #24]	; (8001974 <stackPush+0x28>)
 800195c:	00a1      	lsls	r1, r4, #2
 800195e:	1851      	adds	r1, r2, r1
 8001960:	68c9      	ldr	r1, [r1, #12]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	18d3      	adds	r3, r2, r3
 8001966:	60d9      	str	r1, [r3, #12]
	for(int i = 0; i < CONVKER-1; i++){
 8001968:	0023      	movs	r3, r4
 800196a:	2b07      	cmp	r3, #7
 800196c:	ddf4      	ble.n	8001958 <stackPush+0xc>
	convstack[(CONVKER-1)/2 -1] = val;
 800196e:	4b01      	ldr	r3, [pc, #4]	; (8001974 <stackPush+0x28>)
 8001970:	619d      	str	r5, [r3, #24]
}
 8001972:	bd30      	pop	{r4, r5, pc}
 8001974:	2000008c 	.word	0x2000008c

08001978 <stackSet>:
	for(int i = 0; i < CONVKER; i++){
 8001978:	2300      	movs	r3, #0
 800197a:	e005      	b.n	8001988 <stackSet+0x10>
	convstack[i] = 0.0f;
 800197c:	0099      	lsls	r1, r3, #2
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <stackSet+0x18>)
 8001980:	1852      	adds	r2, r2, r1
 8001982:	2100      	movs	r1, #0
 8001984:	60d1      	str	r1, [r2, #12]
	for(int i = 0; i < CONVKER; i++){
 8001986:	3301      	adds	r3, #1
 8001988:	2b08      	cmp	r3, #8
 800198a:	ddf7      	ble.n	800197c <stackSet+0x4>
}
 800198c:	4770      	bx	lr
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	2000008c 	.word	0x2000008c

08001994 <setdata>:
void setdata(int16_t sweep, int16_t bin, uint16_t val){
 8001994:	b510      	push	{r4, lr}
	if(
 8001996:	2800      	cmp	r0, #0
 8001998:	db0f      	blt.n	80019ba <setdata+0x26>
		(sweep >= 0) && (sweep < _sweeps) &&
 800199a:	4c08      	ldr	r4, [pc, #32]	; (80019bc <setdata+0x28>)
 800199c:	2330      	movs	r3, #48	; 0x30
 800199e:	5ce3      	ldrb	r3, [r4, r3]
 80019a0:	4298      	cmp	r0, r3
 80019a2:	da0a      	bge.n	80019ba <setdata+0x26>
 80019a4:	2900      	cmp	r1, #0
 80019a6:	db08      	blt.n	80019ba <setdata+0x26>
		(bin >= 0) && (bin < _bins)
 80019a8:	2331      	movs	r3, #49	; 0x31
 80019aa:	5ce3      	ldrb	r3, [r4, r3]
 80019ac:	4299      	cmp	r1, r3
 80019ae:	da04      	bge.n	80019ba <setdata+0x26>
		_conv_data[sweep][bin] = val;
 80019b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019b2:	0080      	lsls	r0, r0, #2
 80019b4:	58c3      	ldr	r3, [r0, r3]
 80019b6:	0049      	lsls	r1, r1, #1
 80019b8:	525a      	strh	r2, [r3, r1]
}
 80019ba:	bd10      	pop	{r4, pc}
 80019bc:	2000008c 	.word	0x2000008c

080019c0 <getdata>:
	if(
 80019c0:	2800      	cmp	r0, #0
 80019c2:	db10      	blt.n	80019e6 <getdata+0x26>
		(sweep >= 0) && (sweep < _sweeps) &&
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <getdata+0x38>)
 80019c6:	2330      	movs	r3, #48	; 0x30
 80019c8:	5cd3      	ldrb	r3, [r2, r3]
 80019ca:	4298      	cmp	r0, r3
 80019cc:	da0d      	bge.n	80019ea <getdata+0x2a>
 80019ce:	2900      	cmp	r1, #0
 80019d0:	db0d      	blt.n	80019ee <getdata+0x2e>
		(bin >= 0) && (bin < _bins)
 80019d2:	2331      	movs	r3, #49	; 0x31
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	4299      	cmp	r1, r3
 80019d8:	da0b      	bge.n	80019f2 <getdata+0x32>
		return _conv_data[sweep][bin];
 80019da:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80019dc:	0080      	lsls	r0, r0, #2
 80019de:	58c3      	ldr	r3, [r0, r3]
 80019e0:	0049      	lsls	r1, r1, #1
 80019e2:	5ac8      	ldrh	r0, [r1, r3]
 80019e4:	e000      	b.n	80019e8 <getdata+0x28>
		return 0;
 80019e6:	2000      	movs	r0, #0
}
 80019e8:	4770      	bx	lr
		return 0;
 80019ea:	2000      	movs	r0, #0
 80019ec:	e7fc      	b.n	80019e8 <getdata+0x28>
 80019ee:	2000      	movs	r0, #0
 80019f0:	e7fa      	b.n	80019e8 <getdata+0x28>
 80019f2:	2000      	movs	r0, #0
 80019f4:	e7f8      	b.n	80019e8 <getdata+0x28>
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	2000008c 	.word	0x2000008c

080019fc <center_of_mass>:
floatv2_t center_of_mass(uint8v2_t max, uint8_t r){
 80019fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fe:	46de      	mov	lr, fp
 8001a00:	4657      	mov	r7, sl
 8001a02:	464e      	mov	r6, r9
 8001a04:	4645      	mov	r5, r8
 8001a06:	b5e0      	push	{r5, r6, r7, lr}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	0007      	movs	r7, r0
 8001a0c:	040b      	lsls	r3, r1, #16
 8001a0e:	ac03      	add	r4, sp, #12
 8001a10:	8021      	strh	r1, [r4, #0]
 8001a12:	9202      	str	r2, [sp, #8]
	uint8_t msweep = max.x1;
 8001a14:	b2c9      	uxtb	r1, r1
 8001a16:	4689      	mov	r9, r1
	uint8_t mbin = max.x2;
 8001a18:	0e1b      	lsrs	r3, r3, #24
 8001a1a:	469b      	mov	fp, r3
	floatv2_t center = {0.0f,0.0f};
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	607b      	str	r3, [r7, #4]
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8001a22:	b292      	uxth	r2, r2
 8001a24:	4690      	mov	r8, r2
 8001a26:	465a      	mov	r2, fp
 8001a28:	4641      	mov	r1, r8
 8001a2a:	1a55      	subs	r5, r2, r1
	float mass = 0.0f;	
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	e036      	b.n	8001a9e <center_of_mass+0xa2>
			mass += getdata(j,i);
 8001a30:	0029      	movs	r1, r5
 8001a32:	0020      	movs	r0, r4
 8001a34:	f7ff ffc4 	bl	80019c0 <getdata>
 8001a38:	0006      	movs	r6, r0
 8001a3a:	f00f fc59 	bl	80112f0 <__aeabi_i2f>
 8001a3e:	1c01      	adds	r1, r0, #0
 8001a40:	9801      	ldr	r0, [sp, #4]
 8001a42:	f00e fa75 	bl	800ff30 <__aeabi_fadd>
 8001a46:	9001      	str	r0, [sp, #4]
			center.x1 += (float)getdata(j,i)*(float)j;
 8001a48:	0030      	movs	r0, r6
 8001a4a:	f00f fc9b 	bl	8011384 <__aeabi_ui2f>
 8001a4e:	1c06      	adds	r6, r0, #0
 8001a50:	0020      	movs	r0, r4
 8001a52:	f00f fc4d 	bl	80112f0 <__aeabi_i2f>
 8001a56:	1c01      	adds	r1, r0, #0
 8001a58:	1c30      	adds	r0, r6, #0
 8001a5a:	f00e fd15 	bl	8010488 <__aeabi_fmul>
 8001a5e:	1c01      	adds	r1, r0, #0
 8001a60:	6838      	ldr	r0, [r7, #0]
 8001a62:	f00e fa65 	bl	800ff30 <__aeabi_fadd>
 8001a66:	6038      	str	r0, [r7, #0]
			center.x2 += (float)getdata(j,i)*(float)i;
 8001a68:	0029      	movs	r1, r5
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	f7ff ffa8 	bl	80019c0 <getdata>
 8001a70:	f00f fc88 	bl	8011384 <__aeabi_ui2f>
 8001a74:	1c06      	adds	r6, r0, #0
 8001a76:	0028      	movs	r0, r5
 8001a78:	f00f fc3a 	bl	80112f0 <__aeabi_i2f>
 8001a7c:	1c01      	adds	r1, r0, #0
 8001a7e:	1c30      	adds	r0, r6, #0
 8001a80:	f00e fd02 	bl	8010488 <__aeabi_fmul>
 8001a84:	1c01      	adds	r1, r0, #0
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f00e fa52 	bl	800ff30 <__aeabi_fadd>
 8001a8c:	6078      	str	r0, [r7, #4]
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 8001a8e:	3401      	adds	r4, #1
 8001a90:	b224      	sxth	r4, r4
 8001a92:	464b      	mov	r3, r9
 8001a94:	4453      	add	r3, sl
 8001a96:	429c      	cmp	r4, r3
 8001a98:	ddca      	ble.n	8001a30 <center_of_mass+0x34>
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8001a9a:	3501      	adds	r5, #1
 8001a9c:	b22d      	sxth	r5, r5
 8001a9e:	9b02      	ldr	r3, [sp, #8]
 8001aa0:	469a      	mov	sl, r3
 8001aa2:	445b      	add	r3, fp
 8001aa4:	429d      	cmp	r5, r3
 8001aa6:	dc03      	bgt.n	8001ab0 <center_of_mass+0xb4>
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 8001aa8:	464b      	mov	r3, r9
 8001aaa:	4642      	mov	r2, r8
 8001aac:	1a9c      	subs	r4, r3, r2
 8001aae:	e7f0      	b.n	8001a92 <center_of_mass+0x96>
	if(mass != 0.0f){	
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	9c01      	ldr	r4, [sp, #4]
 8001ab4:	1c20      	adds	r0, r4, #0
 8001ab6:	f00f f9d9 	bl	8010e6c <__aeabi_fcmpeq>
 8001aba:	2800      	cmp	r0, #0
 8001abc:	d109      	bne.n	8001ad2 <center_of_mass+0xd6>
		center.x1 /= mass;
 8001abe:	1c21      	adds	r1, r4, #0
 8001ac0:	6838      	ldr	r0, [r7, #0]
 8001ac2:	f00e fbcf 	bl	8010264 <__aeabi_fdiv>
 8001ac6:	6038      	str	r0, [r7, #0]
		center.x2 /= mass;
 8001ac8:	1c21      	adds	r1, r4, #0
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f00e fbca 	bl	8010264 <__aeabi_fdiv>
 8001ad0:	6078      	str	r0, [r7, #4]
}
 8001ad2:	0038      	movs	r0, r7
 8001ad4:	b005      	add	sp, #20
 8001ad6:	bc3c      	pop	{r2, r3, r4, r5}
 8001ad8:	4690      	mov	r8, r2
 8001ada:	4699      	mov	r9, r3
 8001adc:	46a2      	mov	sl, r4
 8001ade:	46ab      	mov	fp, r5
 8001ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ae2 <dobandstop>:
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 8001ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	1c0f      	adds	r7, r1, #0
 8001ae8:	0409      	lsls	r1, r1, #16
	uint8_t sweeps = data_size.x1;
 8001aea:	b2ff      	uxtb	r7, r7
	uint8_t bins = data_size.x2;
 8001aec:	0e09      	lsrs	r1, r1, #24
	for(uint16_t j = 0; j<sweeps/2; j++){
 8001aee:	2400      	movs	r4, #0
 8001af0:	e00c      	b.n	8001b0c <dobandstop+0x2a>
					data[j][i] = 0;
 8001af2:	00a5      	lsls	r5, r4, #2
 8001af4:	582d      	ldr	r5, [r5, r0]
 8001af6:	005e      	lsls	r6, r3, #1
 8001af8:	19ad      	adds	r5, r5, r6
 8001afa:	2600      	movs	r6, #0
 8001afc:	802e      	strh	r6, [r5, #0]
			for(uint16_t i = 0; i<bins; i++){
 8001afe:	3301      	adds	r3, #1
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	b28d      	uxth	r5, r1
 8001b04:	429d      	cmp	r5, r3
 8001b06:	d8f4      	bhi.n	8001af2 <dobandstop+0x10>
	for(uint16_t j = 0; j<sweeps/2; j++){
 8001b08:	3401      	adds	r4, #1
 8001b0a:	b2a4      	uxth	r4, r4
 8001b0c:	087b      	lsrs	r3, r7, #1
 8001b0e:	42a3      	cmp	r3, r4
 8001b10:	d905      	bls.n	8001b1e <dobandstop+0x3c>
		if(mask & (1<<j)){
 8001b12:	2301      	movs	r3, #1
 8001b14:	40a3      	lsls	r3, r4
 8001b16:	421a      	tst	r2, r3
 8001b18:	d0f6      	beq.n	8001b08 <dobandstop+0x26>
			for(uint16_t i = 0; i<bins; i++){
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e7f1      	b.n	8001b02 <dobandstop+0x20>
}
 8001b1e:	b003      	add	sp, #12
 8001b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b22 <dcdatarm>:
void dcdatarm(uint16_t** data, uint8v2_t data_size){
 8001b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b24:	b083      	sub	sp, #12
 8001b26:	0007      	movs	r7, r0
 8001b28:	040d      	lsls	r5, r1, #16
 8001b2a:	ab01      	add	r3, sp, #4
 8001b2c:	8019      	strh	r1, [r3, #0]
	uint8_t sweeps = data_size.x1;
 8001b2e:	b2cc      	uxtb	r4, r1
	uint8_t bins = data_size.x2;
 8001b30:	0e2b      	lsrs	r3, r5, #24
 8001b32:	9300      	str	r3, [sp, #0]
	for(uint16_t i = 0; i<bins; i++){
 8001b34:	2600      	movs	r6, #0
 8001b36:	e01b      	b.n	8001b70 <dcdatarm+0x4e>
			accumulator += data[j][i];
 8001b38:	009a      	lsls	r2, r3, #2
 8001b3a:	59d2      	ldr	r2, [r2, r7]
 8001b3c:	0071      	lsls	r1, r6, #1
 8001b3e:	5a8a      	ldrh	r2, [r1, r2]
 8001b40:	1880      	adds	r0, r0, r2
		for(uint16_t j = 0; j<sweeps; j++){
 8001b42:	3301      	adds	r3, #1
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	b2a5      	uxth	r5, r4
 8001b48:	429d      	cmp	r5, r3
 8001b4a:	d8f5      	bhi.n	8001b38 <dcdatarm+0x16>
		uint32_t average = accumulator/sweeps;
 8001b4c:	0021      	movs	r1, r4
 8001b4e:	f00e ffcd 	bl	8010aec <__udivsi3>
		for(uint16_t j = 0; j<sweeps; j++){
 8001b52:	2300      	movs	r3, #0
 8001b54:	e008      	b.n	8001b68 <dcdatarm+0x46>
			data[j][i] -= average;
 8001b56:	009a      	lsls	r2, r3, #2
 8001b58:	59d2      	ldr	r2, [r2, r7]
 8001b5a:	0071      	lsls	r1, r6, #1
 8001b5c:	1852      	adds	r2, r2, r1
 8001b5e:	8811      	ldrh	r1, [r2, #0]
 8001b60:	1a09      	subs	r1, r1, r0
 8001b62:	8011      	strh	r1, [r2, #0]
		for(uint16_t j = 0; j<sweeps; j++){
 8001b64:	3301      	adds	r3, #1
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	429d      	cmp	r5, r3
 8001b6a:	d8f4      	bhi.n	8001b56 <dcdatarm+0x34>
	for(uint16_t i = 0; i<bins; i++){
 8001b6c:	3601      	adds	r6, #1
 8001b6e:	b2b6      	uxth	r6, r6
 8001b70:	9b00      	ldr	r3, [sp, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	42b3      	cmp	r3, r6
 8001b76:	d902      	bls.n	8001b7e <dcdatarm+0x5c>
		for(uint16_t j = 0; j<sweeps; j++){
 8001b78:	2300      	movs	r3, #0
		uint32_t accumulator = 0;
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	e7e3      	b.n	8001b46 <dcdatarm+0x24>
}
 8001b7e:	b003      	add	sp, #12
 8001b80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b82 <roundDown>:
    return numToRound + multiple - remainder;
}


uint32_t roundDown(uint32_t numToRound, uint32_t multiple)
{
 8001b82:	b510      	push	{r4, lr}
 8001b84:	0004      	movs	r4, r0
    if (multiple == 0)
 8001b86:	2900      	cmp	r1, #0
 8001b88:	d004      	beq.n	8001b94 <roundDown+0x12>
        return numToRound;

    uint32_t remainder = numToRound % multiple;
 8001b8a:	f00f f835 	bl	8010bf8 <__aeabi_uidivmod>
    if (remainder == 0)
 8001b8e:	2900      	cmp	r1, #0
 8001b90:	d000      	beq.n	8001b94 <roundDown+0x12>
        return numToRound;

    return numToRound - remainder;
 8001b92:	1a64      	subs	r4, r4, r1
 8001b94:	0020      	movs	r0, r4
 8001b96:	bd10      	pop	{r4, pc}

08001b98 <get_byte>:
	return (val & (0xFFL << (8*byte))) >> (8*byte);
 8001b98:	00c9      	lsls	r1, r1, #3
 8001b9a:	23ff      	movs	r3, #255	; 0xff
 8001b9c:	408b      	lsls	r3, r1
 8001b9e:	4018      	ands	r0, r3
 8001ba0:	40c8      	lsrs	r0, r1
 8001ba2:	b2c0      	uxtb	r0, r0
}
 8001ba4:	4770      	bx	lr

08001ba6 <fftSwap>:
}

// Private functions

void fftSwap(int16_t *x, int16_t *y)
{
 8001ba6:	b510      	push	{r4, lr}
	int16_t temp = *x;
 8001ba8:	2200      	movs	r2, #0
 8001baa:	5e83      	ldrsh	r3, [r0, r2]
	*x = *y;
 8001bac:	2400      	movs	r4, #0
 8001bae:	5f0a      	ldrsh	r2, [r1, r4]
 8001bb0:	8002      	strh	r2, [r0, #0]
	*y = temp;
 8001bb2:	800b      	strh	r3, [r1, #0]
}
 8001bb4:	bd10      	pop	{r4, pc}

08001bb6 <fftExponent>:
{
 8001bb6:	0002      	movs	r2, r0
	uint8_t result = 0;
 8001bb8:	2000      	movs	r0, #0
 8001bba:	e001      	b.n	8001bc0 <fftExponent+0xa>
	while (((value >> result) & 1) != 1) result++;
 8001bbc:	3001      	adds	r0, #1
 8001bbe:	b2c0      	uxtb	r0, r0
 8001bc0:	0013      	movs	r3, r2
 8001bc2:	4103      	asrs	r3, r0
 8001bc4:	07db      	lsls	r3, r3, #31
 8001bc6:	d5f9      	bpl.n	8001bbc <fftExponent+0x6>
}
 8001bc8:	4770      	bx	lr

08001bca <fftRangeScaling>:
{
 8001bca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	0006      	movs	r6, r0
	for(int i =0; i<(samples);i++){
 8001bd0:	2300      	movs	r3, #0
	int max = 0;
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	e002      	b.n	8001bdc <fftRangeScaling+0x12>
			max = vReal[i];
 8001bd6:	0014      	movs	r4, r2
 8001bd8:	e008      	b.n	8001bec <fftRangeScaling+0x22>
	for(int i =0; i<(samples);i++){
 8001bda:	3301      	adds	r3, #1
 8001bdc:	000f      	movs	r7, r1
 8001bde:	4299      	cmp	r1, r3
 8001be0:	dd09      	ble.n	8001bf6 <fftRangeScaling+0x2c>
		if (max < vReal[i]){
 8001be2:	005a      	lsls	r2, r3, #1
 8001be4:	5f92      	ldrsh	r2, [r2, r6]
 8001be6:	4282      	cmp	r2, r0
 8001be8:	dcf5      	bgt.n	8001bd6 <fftRangeScaling+0xc>
 8001bea:	0004      	movs	r4, r0
		if (max < -vReal[i]){
 8001bec:	4250      	negs	r0, r2
 8001bee:	42a0      	cmp	r0, r4
 8001bf0:	dcf3      	bgt.n	8001bda <fftRangeScaling+0x10>
 8001bf2:	0020      	movs	r0, r4
 8001bf4:	e7f1      	b.n	8001bda <fftRangeScaling+0x10>
	float scaler = 256.0f/max;
 8001bf6:	f00f fb7b 	bl	80112f0 <__aeabi_i2f>
 8001bfa:	1c01      	adds	r1, r0, #0
 8001bfc:	2087      	movs	r0, #135	; 0x87
 8001bfe:	05c0      	lsls	r0, r0, #23
 8001c00:	f00e fb30 	bl	8010264 <__aeabi_fdiv>
 8001c04:	9001      	str	r0, [sp, #4]
	for(int i =0; i<(samples);i++){
 8001c06:	2500      	movs	r5, #0
 8001c08:	e00c      	b.n	8001c24 <fftRangeScaling+0x5a>
		vReal[i] = (int16_t) (vReal[i] * scaler);
 8001c0a:	006c      	lsls	r4, r5, #1
 8001c0c:	1934      	adds	r4, r6, r4
 8001c0e:	2300      	movs	r3, #0
 8001c10:	5ee0      	ldrsh	r0, [r4, r3]
 8001c12:	f00f fb6d 	bl	80112f0 <__aeabi_i2f>
 8001c16:	9901      	ldr	r1, [sp, #4]
 8001c18:	f00e fc36 	bl	8010488 <__aeabi_fmul>
 8001c1c:	f00f fb48 	bl	80112b0 <__aeabi_f2iz>
 8001c20:	8020      	strh	r0, [r4, #0]
	for(int i =0; i<(samples);i++){
 8001c22:	3501      	adds	r5, #1
 8001c24:	42af      	cmp	r7, r5
 8001c26:	dcf0      	bgt.n	8001c0a <fftRangeScaling+0x40>
}
 8001c28:	9801      	ldr	r0, [sp, #4]
 8001c2a:	b003      	add	sp, #12
 8001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c2e <RegInt_regmap>:
//0xD5 :: Gaussian Kernal StDev (x1000)
//0xD6 :: Data Eval Mode
//0xD7 :: Focus weight Radius
//0xD8 :: Data zeroing threshold
//0xD9 :: Bandstop velocity filter
uint32_t* RegInt_regmap(uint8_t reg){
 8001c2e:	0002      	movs	r2, r0
	REGADRERR = -1;
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <RegInt_regmap+0x5e>)
 8001c32:	2101      	movs	r1, #1
 8001c34:	4249      	negs	r1, r1
 8001c36:	6399      	str	r1, [r3, #56]	; 0x38
	uint32_t* ptr = &REGADRERR;
	
	if (reg <= 0x12){
 8001c38:	2812      	cmp	r0, #18
 8001c3a:	d821      	bhi.n	8001c80 <RegInt_regmap+0x52>
		ptr = &GENERAL_REGISTERS[reg];
 8001c3c:	0080      	lsls	r0, r0, #2
 8001c3e:	3340      	adds	r3, #64	; 0x40
 8001c40:	1818      	adds	r0, r3, r0
	}
	if (reg == 0xE9){
 8001c42:	2ae9      	cmp	r2, #233	; 0xe9
 8001c44:	d01f      	beq.n	8001c86 <RegInt_regmap+0x58>
		ptr = &OUTPUT_BUFFER_LENGTH;
	}
	if (0x20 <= reg && reg <= 0x42){
 8001c46:	0013      	movs	r3, r2
 8001c48:	3b20      	subs	r3, #32
 8001c4a:	2b22      	cmp	r3, #34	; 0x22
 8001c4c:	d802      	bhi.n	8001c54 <RegInt_regmap+0x26>
		ptr = &SERVICE_REGISTERS[reg - 0x20];
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	480f      	ldr	r0, [pc, #60]	; (8001c90 <RegInt_regmap+0x62>)
 8001c52:	1818      	adds	r0, r3, r0
	}
	if (0x81 <= reg && reg <= 0x85){
 8001c54:	0013      	movs	r3, r2
 8001c56:	337f      	adds	r3, #127	; 0x7f
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d805      	bhi.n	8001c6a <RegInt_regmap+0x3c>
		ptr = &META_REGISTERS[reg - 0x81];
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <RegInt_regmap+0x66>)
 8001c60:	0010      	movs	r0, r2
 8001c62:	3881      	subs	r0, #129	; 0x81
 8001c64:	0080      	lsls	r0, r0, #2
 8001c66:	330c      	adds	r3, #12
 8001c68:	1818      	adds	r0, r3, r0
	}	
	if (0xD0 <= reg && reg <= 0xD9){
 8001c6a:	0013      	movs	r3, r2
 8001c6c:	3330      	adds	r3, #48	; 0x30
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b09      	cmp	r3, #9
 8001c72:	d804      	bhi.n	8001c7e <RegInt_regmap+0x50>
		ptr = &EVAL_REGISTERS[reg - 0xD0];
 8001c74:	3ad0      	subs	r2, #208	; 0xd0
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <RegInt_regmap+0x66>)
 8001c78:	0092      	lsls	r2, r2, #2
 8001c7a:	3320      	adds	r3, #32
 8001c7c:	1898      	adds	r0, r3, r2
	}
	return ptr;
}
 8001c7e:	4770      	bx	lr
	uint32_t* ptr = &REGADRERR;
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <RegInt_regmap+0x5e>)
 8001c82:	3038      	adds	r0, #56	; 0x38
 8001c84:	e7dd      	b.n	8001c42 <RegInt_regmap+0x14>
		ptr = &OUTPUT_BUFFER_LENGTH;
 8001c86:	4801      	ldr	r0, [pc, #4]	; (8001c8c <RegInt_regmap+0x5e>)
 8001c88:	303c      	adds	r0, #60	; 0x3c
 8001c8a:	e7dc      	b.n	8001c46 <RegInt_regmap+0x18>
 8001c8c:	2000008c 	.word	0x2000008c
 8001c90:	20000374 	.word	0x20000374
 8001c94:	2000010c 	.word	0x2000010c

08001c98 <RegInt_getreg>:

uint32_t RegInt_getreg(uint8_t reg){
 8001c98:	b510      	push	{r4, lr}
	uint32_t* regptr = RegInt_regmap(reg);
 8001c9a:	f7ff ffc8 	bl	8001c2e <RegInt_regmap>
	return *regptr;
 8001c9e:	6800      	ldr	r0, [r0, #0]
}
 8001ca0:	bd10      	pop	{r4, pc}

08001ca2 <RegInt_writeable>:
	}
    
	return 1;
}

int8_t RegInt_writeable(uint8_t reg){
 8001ca2:	b510      	push	{r4, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	0004      	movs	r4, r0
    //if service is created, lock mode
    if(reg == 0x02){
 8001ca8:	2802      	cmp	r0, #2
 8001caa:	d008      	beq.n	8001cbe <RegInt_writeable+0x1c>
            return 0;
        }
    }
    
    //read only addresses
    uint8_t read_only_addr[10] = {0x06, 0x10, 0x11, 0x12, 0x81, 0x82,0x83,0x84,0x85, 0xE9}; //please have this list be ordered.
 8001cac:	aa01      	add	r2, sp, #4
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <RegInt_writeable+0x4a>)
 8001cb0:	3314      	adds	r3, #20
 8001cb2:	cb03      	ldmia	r3!, {r0, r1}
 8001cb4:	c203      	stmia	r2!, {r0, r1}
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	8013      	strh	r3, [r2, #0]
	for(uint8_t i = 0; i < 10; i++){
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e008      	b.n	8001cd0 <RegInt_writeable+0x2e>
        if(RegInt_getreg(0x06) && 0x00000001){
 8001cbe:	2006      	movs	r0, #6
 8001cc0:	f7ff ffea 	bl	8001c98 <RegInt_getreg>
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	d0f1      	beq.n	8001cac <RegInt_writeable+0xa>
            return 0;
 8001cc8:	2000      	movs	r0, #0
 8001cca:	e00b      	b.n	8001ce4 <RegInt_writeable+0x42>
	for(uint8_t i = 0; i < 10; i++){
 8001ccc:	3301      	adds	r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b09      	cmp	r3, #9
 8001cd2:	d806      	bhi.n	8001ce2 <RegInt_writeable+0x40>
		if (reg == read_only_addr[i]){return 0;}
 8001cd4:	aa01      	add	r2, sp, #4
 8001cd6:	5cd2      	ldrb	r2, [r2, r3]
 8001cd8:	42a2      	cmp	r2, r4
 8001cda:	d005      	beq.n	8001ce8 <RegInt_writeable+0x46>
		if (reg < read_only_addr[i]){break;}
 8001cdc:	d9f6      	bls.n	8001ccc <RegInt_writeable+0x2a>
	}   
    return 1;
 8001cde:	2001      	movs	r0, #1
 8001ce0:	e000      	b.n	8001ce4 <RegInt_writeable+0x42>
 8001ce2:	2001      	movs	r0, #1
}
 8001ce4:	b004      	add	sp, #16
 8001ce6:	bd10      	pop	{r4, pc}
		if (reg == read_only_addr[i]){return 0;}
 8001ce8:	2000      	movs	r0, #0
 8001cea:	e7fb      	b.n	8001ce4 <RegInt_writeable+0x42>
 8001cec:	08015ea8 	.word	0x08015ea8

08001cf0 <acc_integration_get_time>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001cf0:	4b01      	ldr	r3, [pc, #4]	; (8001cf8 <acc_integration_get_time+0x8>)
 8001cf2:	6818      	ldr	r0, [r3, #0]


uint32_t acc_integration_get_time(void)
{
	return HAL_GetTick();
}
 8001cf4:	4770      	bx	lr
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	2000048c 	.word	0x2000048c

08001cfc <acc_hal_integration_get_implementation>:
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
	return &hal;
 8001cfc:	4801      	ldr	r0, [pc, #4]	; (8001d04 <acc_hal_integration_get_implementation+0x8>)
}
 8001cfe:	3020      	adds	r0, #32
 8001d00:	4770      	bx	lr
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	08015ea8 	.word	0x08015ea8

08001d08 <pulse_hibernate_pin>:
	for (uint32_t i = 0; i < nbr_pulses; i++)
 8001d08:	2100      	movs	r1, #0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d0a:	2210      	movs	r2, #16
{
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <pulse_hibernate_pin+0x24>)
 8001d10:	691c      	ldr	r4, [r3, #16]
 8001d12:	4214      	tst	r4, r2
 8001d14:	d102      	bne.n	8001d1c <pulse_hibernate_pin+0x14>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d16:	619a      	str	r2, [r3, #24]
 8001d18:	e7fa      	b.n	8001d10 <pulse_hibernate_pin+0x8>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d1c:	691c      	ldr	r4, [r3, #16]
 8001d1e:	4214      	tst	r4, r2
 8001d20:	d1fb      	bne.n	8001d1a <pulse_hibernate_pin+0x12>
	for (uint32_t i = 0; i < nbr_pulses; i++)
 8001d22:	3101      	adds	r1, #1
 8001d24:	4288      	cmp	r0, r1
 8001d26:	d1f3      	bne.n	8001d10 <pulse_hibernate_pin+0x8>
}
 8001d28:	bd10      	pop	{r4, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	50000400 	.word	0x50000400

08001d30 <acc_hal_integration_sensor_hibernate_enter>:
{
 8001d30:	b510      	push	{r4, lr}
	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_HIBERNATE_ENTER);
 8001d32:	200a      	movs	r0, #10
 8001d34:	f7ff ffe8 	bl	8001d08 <pulse_hibernate_pin>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d38:	2280      	movs	r2, #128	; 0x80
 8001d3a:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <acc_hal_integration_sensor_hibernate_enter+0x14>)
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d40:	bd10      	pop	{r4, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	50000400 	.word	0x50000400

08001d48 <acc_hal_integration_get_reference_frequency>:
}
 8001d48:	4800      	ldr	r0, [pc, #0]	; (8001d4c <acc_hal_integration_get_reference_frequency+0x4>)
 8001d4a:	4770      	bx	lr
 8001d4c:	4bb71b00 	.word	0x4bb71b00

08001d50 <acc_hal_integration_wait_for_sensor_interrupt>:
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d50:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <acc_hal_integration_wait_for_sensor_interrupt+0x34>)
{
 8001d52:	b570      	push	{r4, r5, r6, lr}
 8001d54:	2408      	movs	r4, #8
 8001d56:	0015      	movs	r5, r2
 8001d58:	480b      	ldr	r0, [pc, #44]	; (8001d88 <acc_hal_integration_wait_for_sensor_interrupt+0x38>)
 8001d5a:	6806      	ldr	r6, [r0, #0]
 8001d5c:	6913      	ldr	r3, [r2, #16]
 8001d5e:	4223      	tst	r3, r4
 8001d60:	d103      	bne.n	8001d6a <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
 8001d62:	6803      	ldr	r3, [r0, #0]
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8001d64:	1b9b      	subs	r3, r3, r6
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8001d66:	428b      	cmp	r3, r1
 8001d68:	d303      	bcc.n	8001d72 <acc_hal_integration_wait_for_sensor_interrupt+0x22>
 8001d6a:	6928      	ldr	r0, [r5, #16]
 8001d6c:	0700      	lsls	r0, r0, #28
	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 8001d6e:	0fc0      	lsrs	r0, r0, #31
}
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d72:	b672      	cpsid	i
 8001d74:	6913      	ldr	r3, [r2, #16]
 8001d76:	4223      	tst	r3, r4
 8001d78:	d100      	bne.n	8001d7c <acc_hal_integration_wait_for_sensor_interrupt+0x2c>
			__WFI();
 8001d7a:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 8001d7c:	b662      	cpsie	i
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	e7eb      	b.n	8001d5c <acc_hal_integration_wait_for_sensor_interrupt+0xc>
 8001d84:	50000400 	.word	0x50000400
 8001d88:	2000048c 	.word	0x2000048c

08001d8c <data_free>:
	}
	
	return 0;
}

void data_free(void){
 8001d8c:	b510      	push	{r4, lr}
	free(data);
 8001d8e:	4c05      	ldr	r4, [pc, #20]	; (8001da4 <data_free+0x18>)
 8001d90:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001d92:	f014 f855 	bl	8015e40 <free>
	data = NULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	6623      	str	r3, [r4, #96]	; 0x60
	sweeps = 0;
 8001d9a:	2264      	movs	r2, #100	; 0x64
 8001d9c:	52a3      	strh	r3, [r4, r2]
	bins = 0;
 8001d9e:	3202      	adds	r2, #2
 8001da0:	52a3      	strh	r3, [r4, r2]
}
 8001da2:	bd10      	pop	{r4, pc}
 8001da4:	2000010c 	.word	0x2000010c

08001da8 <acc_cpd_linear_sweep_update_program>:
 8001da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001daa:	784b      	ldrb	r3, [r1, #1]
 8001dac:	0005      	movs	r5, r0
 8001dae:	000c      	movs	r4, r1
 8001db0:	684f      	ldr	r7, [r1, #4]
 8001db2:	68ce      	ldr	r6, [r1, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <acc_cpd_linear_sweep_update_program+0x20>
 8001db8:	688b      	ldr	r3, [r1, #8]
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <acc_cpd_linear_sweep_update_program+0x4c>)
 8001dbc:	330e      	adds	r3, #14
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	490d      	ldr	r1, [pc, #52]	; (8001df8 <acc_cpd_linear_sweep_update_program+0x50>)
 8001dc2:	235e      	movs	r3, #94	; 0x5e
 8001dc4:	f00a fc80 	bl	800c6c8 <acc_confprogram_live_patch.constprop.16>
 8001dc8:	7823      	ldrb	r3, [r4, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <acc_cpd_linear_sweep_update_program+0x34>
 8001dce:	9700      	str	r7, [sp, #0]
 8001dd0:	2336      	movs	r3, #54	; 0x36
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <acc_cpd_linear_sweep_update_program+0x4c>)
 8001dd4:	4908      	ldr	r1, [pc, #32]	; (8001df8 <acc_cpd_linear_sweep_update_program+0x50>)
 8001dd6:	0028      	movs	r0, r5
 8001dd8:	f00a fc76 	bl	800c6c8 <acc_confprogram_live_patch.constprop.16>
 8001ddc:	78a3      	ldrb	r3, [r4, #2]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <acc_cpd_linear_sweep_update_program+0x48>
 8001de2:	9600      	str	r6, [sp, #0]
 8001de4:	2372      	movs	r3, #114	; 0x72
 8001de6:	4a03      	ldr	r2, [pc, #12]	; (8001df4 <acc_cpd_linear_sweep_update_program+0x4c>)
 8001de8:	4903      	ldr	r1, [pc, #12]	; (8001df8 <acc_cpd_linear_sweep_update_program+0x50>)
 8001dea:	0028      	movs	r0, r5
 8001dec:	f00a fc6c 	bl	800c6c8 <acc_confprogram_live_patch.constprop.16>
 8001df0:	2001      	movs	r0, #1
 8001df2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001df4:	08018434 	.word	0x08018434
 8001df8:	0801af7c 	.word	0x0801af7c

08001dfc <update_program.lto_priv.153>:
 8001dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dfe:	6945      	ldr	r5, [r0, #20]
 8001e00:	2401      	movs	r4, #1
 8001e02:	002b      	movs	r3, r5
 8001e04:	33ba      	adds	r3, #186	; 0xba
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4319      	orrs	r1, r3
 8001e0a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001e0c:	404c      	eors	r4, r1
 8001e0e:	425a      	negs	r2, r3
 8001e10:	4153      	adcs	r3, r2
 8001e12:	428b      	cmp	r3, r1
 8001e14:	d006      	beq.n	8001e24 <update_program.lto_priv.153+0x28>
 8001e16:	9400      	str	r4, [sp, #0]
 8001e18:	23ef      	movs	r3, #239	; 0xef
 8001e1a:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <update_program.lto_priv.153+0x30>)
 8001e1c:	4904      	ldr	r1, [pc, #16]	; (8001e30 <update_program.lto_priv.153+0x34>)
 8001e1e:	6800      	ldr	r0, [r0, #0]
 8001e20:	f00a fc52 	bl	800c6c8 <acc_confprogram_live_patch.constprop.16>
 8001e24:	642c      	str	r4, [r5, #64]	; 0x40
 8001e26:	2001      	movs	r0, #1
 8001e28:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	08017a04 	.word	0x08017a04
 8001e30:	080195c4 	.word	0x080195c4

08001e34 <acc_sensor_protocol_r2_check_asic_id>:
 8001e34:	b530      	push	{r4, r5, lr}
 8001e36:	250e      	movs	r5, #14
 8001e38:	2400      	movs	r4, #0
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	446d      	add	r5, sp
 8001e3e:	002a      	movs	r2, r5
 8001e40:	0021      	movs	r1, r4
 8001e42:	802c      	strh	r4, [r5, #0]
 8001e44:	f00d fcb8 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 8001e48:	882a      	ldrh	r2, [r5, #0]
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <acc_sensor_protocol_r2_check_asic_id+0x34>)
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d007      	beq.n	8001e62 <acc_sensor_protocol_r2_check_asic_id+0x2e>
 8001e52:	9200      	str	r2, [sp, #0]
 8001e54:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <acc_sensor_protocol_r2_check_asic_id+0x38>)
 8001e56:	0020      	movs	r0, r4
 8001e58:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001e5a:	4905      	ldr	r1, [pc, #20]	; (8001e70 <acc_sensor_protocol_r2_check_asic_id+0x3c>)
 8001e5c:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <acc_sensor_protocol_r2_check_asic_id+0x40>)
 8001e5e:	47a8      	blx	r5
 8001e60:	0020      	movs	r0, r4
 8001e62:	b005      	add	sp, #20
 8001e64:	bd30      	pop	{r4, r5, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	00001112 	.word	0x00001112
 8001e6c:	200004a8 	.word	0x200004a8
 8001e70:	0801c85a 	.word	0x0801c85a
 8001e74:	0801c82c 	.word	0x0801c82c

08001e78 <acc_sensor_protocol_r2_transfer_data>:
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	0016      	movs	r6, r2
 8001e7c:	0005      	movs	r5, r0
 8001e7e:	f00a fbc1 	bl	800c604 <internal_buffer_processed_read.constprop.30>
 8001e82:	0004      	movs	r4, r0
 8001e84:	0033      	movs	r3, r6
 8001e86:	0002      	movs	r2, r0
 8001e88:	0029      	movs	r1, r5
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7fe f954 	bl	8000138 <acc_probes_execute_uint16>
 8001e90:	0020      	movs	r0, r4
 8001e92:	bd70      	pop	{r4, r5, r6, pc}

08001e94 <acc_element_source_adc_inject_data>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	0004      	movs	r4, r0
 8001e98:	0015      	movs	r5, r2
 8001e9a:	6940      	ldr	r0, [r0, #20]
 8001e9c:	f013 ffda 	bl	8015e54 <memcpy>
 8001ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <acc_element_source_adc_inject_data+0x24>)
 8001ea4:	601d      	str	r5, [r3, #0]
 8001ea6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ea8:	6820      	ldr	r0, [r4, #0]
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	2200      	movs	r2, #0
 8001eae:	6a23      	ldr	r3, [r4, #32]
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	6843      	ldr	r3, [r0, #4]
 8001eb4:	4798      	blx	r3
 8001eb6:	bd70      	pop	{r4, r5, r6, pc}
 8001eb8:	51645c3c 	.word	0x51645c3c

08001ebc <inject_data.lto_priv.184>:
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	3038      	adds	r0, #56	; 0x38
 8001ec0:	f7ff ffe8 	bl	8001e94 <acc_element_source_adc_inject_data>
 8001ec4:	bd10      	pop	{r4, pc}

08001ec6 <inject_data.lto_priv.183>:
 8001ec6:	b510      	push	{r4, lr}
 8001ec8:	3038      	adds	r0, #56	; 0x38
 8001eca:	f7ff ffe3 	bl	8001e94 <acc_element_source_adc_inject_data>
 8001ece:	bd10      	pop	{r4, pc}

08001ed0 <event.lto_priv.142>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	0004      	movs	r4, r0
 8001ed4:	69c5      	ldr	r5, [r0, #28]
 8001ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ed8:	1d2e      	adds	r6, r5, #4
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	782b      	ldrb	r3, [r5, #0]
 8001ede:	6900      	ldr	r0, [r0, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <event.lto_priv.142+0x28>
 8001ee4:	0001      	movs	r1, r0
 8001ee6:	0030      	movs	r0, r6
 8001ee8:	f013 ffb4 	bl	8015e54 <memcpy>
 8001eec:	2300      	movs	r3, #0
 8001eee:	702b      	strb	r3, [r5, #0]
 8001ef0:	6820      	ldr	r0, [r4, #0]
 8001ef2:	6843      	ldr	r3, [r0, #4]
 8001ef4:	4798      	blx	r3
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
 8001ef8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001efa:	0031      	movs	r1, r6
 8001efc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001efe:	47a8      	blx	r5
 8001f00:	e7f6      	b.n	8001ef0 <event.lto_priv.142+0x20>

08001f02 <acc_service_send_data>:
 8001f02:	b570      	push	{r4, r5, r6, lr}
 8001f04:	9d04      	ldr	r5, [sp, #16]
 8001f06:	001e      	movs	r6, r3
 8001f08:	782b      	ldrb	r3, [r5, #0]
 8001f0a:	6944      	ldr	r4, [r0, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <acc_service_send_data+0x24>
 8001f10:	7ea3      	ldrb	r3, [r4, #26]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d011      	beq.n	8001f3a <acc_service_send_data+0x38>
 8001f16:	68e3      	ldr	r3, [r4, #12]
 8001f18:	6860      	ldr	r0, [r4, #4]
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d900      	bls.n	8001f20 <acc_service_send_data+0x1e>
 8001f1e:	0013      	movs	r3, r2
 8001f20:	001a      	movs	r2, r3
 8001f22:	f013 ff97 	bl	8015e54 <memcpy>
 8001f26:	782b      	ldrb	r3, [r5, #0]
 8001f28:	6920      	ldr	r0, [r4, #16]
 8001f2a:	7663      	strb	r3, [r4, #25]
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d003      	beq.n	8001f38 <acc_service_send_data+0x36>
 8001f30:	6962      	ldr	r2, [r4, #20]
 8001f32:	0031      	movs	r1, r6
 8001f34:	f013 ff8e 	bl	8015e54 <memcpy>
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
 8001f3a:	68a3      	ldr	r3, [r4, #8]
 8001f3c:	6019      	str	r1, [r3, #0]
 8001f3e:	e7f2      	b.n	8001f26 <acc_service_send_data+0x24>

08001f40 <sparse_send_data>:
 8001f40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001f42:	0005      	movs	r5, r0
 8001f44:	0010      	movs	r0, r2
 8001f46:	798a      	ldrb	r2, [r1, #6]
 8001f48:	790e      	ldrb	r6, [r1, #4]
 8001f4a:	794c      	ldrb	r4, [r1, #5]
 8001f4c:	ab03      	add	r3, sp, #12
 8001f4e:	709a      	strb	r2, [r3, #2]
 8001f50:	aa02      	add	r2, sp, #8
 8001f52:	705e      	strb	r6, [r3, #1]
 8001f54:	7014      	strb	r4, [r2, #0]
 8001f56:	701c      	strb	r4, [r3, #0]
 8001f58:	9200      	str	r2, [sp, #0]
 8001f5a:	694a      	ldr	r2, [r1, #20]
 8001f5c:	0029      	movs	r1, r5
 8001f5e:	f7ff ffd0 	bl	8001f02 <acc_service_send_data>
 8001f62:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

08001f64 <envelope_send_data>:
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	0005      	movs	r5, r0
 8001f68:	b085      	sub	sp, #20
 8001f6a:	0010      	movs	r0, r2
 8001f6c:	79ca      	ldrb	r2, [r1, #7]
 8001f6e:	794c      	ldrb	r4, [r1, #5]
 8001f70:	ab03      	add	r3, sp, #12
 8001f72:	790e      	ldrb	r6, [r1, #4]
 8001f74:	798f      	ldrb	r7, [r1, #6]
 8001f76:	70da      	strb	r2, [r3, #3]
 8001f78:	aa02      	add	r2, sp, #8
 8001f7a:	7014      	strb	r4, [r2, #0]
 8001f7c:	701f      	strb	r7, [r3, #0]
 8001f7e:	705c      	strb	r4, [r3, #1]
 8001f80:	709e      	strb	r6, [r3, #2]
 8001f82:	9200      	str	r2, [sp, #0]
 8001f84:	694a      	ldr	r2, [r1, #20]
 8001f86:	0029      	movs	r1, r5
 8001f88:	f7ff ffbb 	bl	8001f02 <acc_service_send_data>
 8001f8c:	b005      	add	sp, #20
 8001f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f90 <filldata_envelope>:
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
		}
	}	
}

void filldata_envelope(void){
 8001f90:	b510      	push	{r4, lr}
	uint16_t bins = envelope_metadata.data_length;
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <filldata_envelope+0x18>)
 8001f94:	001a      	movs	r2, r3
 8001f96:	3268      	adds	r2, #104	; 0x68
 8001f98:	8912      	ldrh	r2, [r2, #8]
	memcpy(data[0],envelope_data, bins*sizeof(uint16_t));
 8001f9a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001f9c:	6808      	ldr	r0, [r1, #0]
 8001f9e:	0052      	lsls	r2, r2, #1
 8001fa0:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8001fa2:	f013 ff57 	bl	8015e54 <memcpy>
}
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	2000010c 	.word	0x2000010c

08001fac <filldata_sparse>:
void filldata_sparse(uint8_t far){
 8001fac:	b570      	push	{r4, r5, r6, lr}
 8001fae:	0006      	movs	r6, r0
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <filldata_sparse+0x88>)
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	327c      	adds	r2, #124	; 0x7c
 8001fb6:	8910      	ldrh	r0, [r2, #8]
 8001fb8:	2264      	movs	r2, #100	; 0x64
 8001fba:	5a9c      	ldrh	r4, [r3, r2]
 8001fbc:	0021      	movs	r1, r4
 8001fbe:	f00e fd95 	bl	8010aec <__udivsi3>
 8001fc2:	b285      	uxth	r5, r0
	if(!far){
 8001fc4:	2e00      	cmp	r6, #0
 8001fc6:	d01c      	beq.n	8002002 <filldata_sparse+0x56>
		bins_far = sparse_metadata_far.data_length/sweeps;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <filldata_sparse+0x8c>)
 8001fca:	8b98      	ldrh	r0, [r3, #28]
 8001fcc:	0021      	movs	r1, r4
 8001fce:	f00e fd8d 	bl	8010aec <__udivsi3>
 8001fd2:	b286      	uxth	r6, r0
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 8001fd4:	2400      	movs	r4, #0
 8001fd6:	e027      	b.n	8002028 <filldata_sparse+0x7c>
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 8001fd8:	00a2      	lsls	r2, r4, #2
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <filldata_sparse+0x88>)
 8001fdc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <filldata_sparse+0x8c>)
 8001fe0:	6919      	ldr	r1, [r3, #16]
 8001fe2:	002b      	movs	r3, r5
 8001fe4:	4363      	muls	r3, r4
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	18c9      	adds	r1, r1, r3
 8001fea:	5880      	ldr	r0, [r0, r2]
 8001fec:	006a      	lsls	r2, r5, #1
 8001fee:	f013 ff31 	bl	8015e54 <memcpy>
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 8001ff2:	3401      	adds	r4, #1
 8001ff4:	b2a4      	uxth	r4, r4
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <filldata_sparse+0x88>)
 8001ff8:	2364      	movs	r3, #100	; 0x64
 8001ffa:	5ad3      	ldrh	r3, [r2, r3]
 8001ffc:	42a3      	cmp	r3, r4
 8001ffe:	d8eb      	bhi.n	8001fd8 <filldata_sparse+0x2c>
}
 8002000:	bd70      	pop	{r4, r5, r6, pc}
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 8002002:	2400      	movs	r4, #0
 8002004:	e7f7      	b.n	8001ff6 <filldata_sparse+0x4a>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <filldata_sparse+0x88>)
 8002008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200a:	00a2      	lsls	r2, r4, #2
 800200c:	58d0      	ldr	r0, [r2, r3]
 800200e:	006b      	lsls	r3, r5, #1
 8002010:	18c0      	adds	r0, r0, r3
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <filldata_sparse+0x8c>)
 8002014:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002016:	0033      	movs	r3, r6
 8002018:	4363      	muls	r3, r4
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	18c9      	adds	r1, r1, r3
 800201e:	0072      	lsls	r2, r6, #1
 8002020:	f013 ff18 	bl	8015e54 <memcpy>
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 8002024:	3401      	adds	r4, #1
 8002026:	b2a4      	uxth	r4, r4
 8002028:	4a02      	ldr	r2, [pc, #8]	; (8002034 <filldata_sparse+0x88>)
 800202a:	2364      	movs	r3, #100	; 0x64
 800202c:	5ad3      	ldrh	r3, [r2, r3]
 800202e:	42a3      	cmp	r3, r4
 8002030:	d8e9      	bhi.n	8002006 <filldata_sparse+0x5a>
 8002032:	e7e5      	b.n	8002000 <filldata_sparse+0x54>
 8002034:	2000010c 	.word	0x2000010c
 8002038:	2000018c 	.word	0x2000018c

0800203c <acc_sensor_manager_prepare_radar_engine>:
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203e:	46d6      	mov	lr, sl
 8002040:	464f      	mov	r7, r9
 8002042:	4646      	mov	r6, r8
 8002044:	000c      	movs	r4, r1
 8002046:	b5c0      	push	{r6, r7, lr}
 8002048:	2100      	movs	r1, #0
 800204a:	b092      	sub	sp, #72	; 0x48
 800204c:	0005      	movs	r5, r0
 800204e:	0017      	movs	r7, r2
 8002050:	3004      	adds	r0, #4
 8002052:	2234      	movs	r2, #52	; 0x34
 8002054:	4698      	mov	r8, r3
 8002056:	f011 fad9 	bl	801360c <memset>
 800205a:	0020      	movs	r0, r4
 800205c:	f7fe fe9c 	bl	8000d98 <acc_base_configuration_sensor_get>
 8002060:	4681      	mov	r9, r0
 8002062:	0020      	movs	r0, r4
 8002064:	f7fe fe10 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 8002068:	ae01      	add	r6, sp, #4
 800206a:	8030      	strh	r0, [r6, #0]
 800206c:	0020      	movs	r0, r4
 800206e:	f7fe fe20 	bl	8000cb2 <acc_base_configuration_integrator_get>
 8002072:	8070      	strh	r0, [r6, #2]
 8002074:	0020      	movs	r0, r4
 8002076:	f7fe fda7 	bl	8000bc8 <configuration_is_valid>
 800207a:	2300      	movs	r3, #0
 800207c:	4298      	cmp	r0, r3
 800207e:	d001      	beq.n	8002084 <acc_sensor_manager_prepare_radar_engine+0x48>
 8002080:	1da3      	adds	r3, r4, #6
 8002082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002084:	0020      	movs	r0, r4
 8002086:	80b3      	strh	r3, [r6, #4]
 8002088:	f7fe fe61 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 800208c:	0032      	movs	r2, r6
 800208e:	80f0      	strh	r0, [r6, #6]
 8002090:	4649      	mov	r1, r9
 8002092:	2304      	movs	r3, #4
 8002094:	2012      	movs	r0, #18
 8002096:	f7fe f84f 	bl	8000138 <acc_probes_execute_uint16>
 800209a:	2318      	movs	r3, #24
 800209c:	469a      	mov	sl, r3
 800209e:	44aa      	add	sl, r5
 80020a0:	2220      	movs	r2, #32
 80020a2:	2100      	movs	r1, #0
 80020a4:	4650      	mov	r0, sl
 80020a6:	f011 fab1 	bl	801360c <memset>
 80020aa:	0021      	movs	r1, r4
 80020ac:	4650      	mov	r0, sl
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	4798      	blx	r3
 80020b2:	ae0a      	add	r6, sp, #40	; 0x28
 80020b4:	4681      	mov	r9, r0
 80020b6:	2800      	cmp	r0, #0
 80020b8:	d018      	beq.n	80020ec <acc_sensor_manager_prepare_radar_engine+0xb0>
 80020ba:	2220      	movs	r2, #32
 80020bc:	2100      	movs	r1, #0
 80020be:	0030      	movs	r0, r6
 80020c0:	f011 faa4 	bl	801360c <memset>
 80020c4:	221c      	movs	r2, #28
 80020c6:	2100      	movs	r1, #0
 80020c8:	a803      	add	r0, sp, #12
 80020ca:	f011 fa9f 	bl	801360c <memset>
 80020ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80020d0:	0032      	movs	r2, r6
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0021      	movs	r1, r4
 80020d6:	4699      	mov	r9, r3
 80020d8:	4650      	mov	r0, sl
 80020da:	ab03      	add	r3, sp, #12
 80020dc:	47c8      	blx	r9
 80020de:	4681      	mov	r9, r0
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d10d      	bne.n	8002100 <acc_sensor_manager_prepare_radar_engine+0xc4>
 80020e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80020e6:	4650      	mov	r0, sl
 80020e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ea:	4798      	blx	r3
 80020ec:	0020      	movs	r0, r4
 80020ee:	f7fe fe40 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d02f      	beq.n	8002156 <acc_sensor_manager_prepare_radar_engine+0x11a>
 80020f6:	2804      	cmp	r0, #4
 80020f8:	d04d      	beq.n	8002196 <acc_sensor_manager_prepare_radar_engine+0x15a>
 80020fa:	2300      	movs	r3, #0
 80020fc:	702b      	strb	r3, [r5, #0]
 80020fe:	e02c      	b.n	800215a <acc_sensor_manager_prepare_radar_engine+0x11e>
 8002100:	2f00      	cmp	r7, #0
 8002102:	d007      	beq.n	8002114 <acc_sensor_manager_prepare_radar_engine+0xd8>
 8002104:	003b      	movs	r3, r7
 8002106:	0032      	movs	r2, r6
 8002108:	ca83      	ldmia	r2!, {r0, r1, r7}
 800210a:	c383      	stmia	r3!, {r0, r1, r7}
 800210c:	ca83      	ldmia	r2!, {r0, r1, r7}
 800210e:	c383      	stmia	r3!, {r0, r1, r7}
 8002110:	ca03      	ldmia	r2!, {r0, r1}
 8002112:	c303      	stmia	r3!, {r0, r1}
 8002114:	4643      	mov	r3, r8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <acc_sensor_manager_prepare_radar_engine+0xe8>
 800211a:	221c      	movs	r2, #28
 800211c:	a903      	add	r1, sp, #12
 800211e:	4640      	mov	r0, r8
 8002120:	f013 fe98 	bl	8015e54 <memcpy>
 8002124:	0020      	movs	r0, r4
 8002126:	f7fe fde5 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 800212a:	2801      	cmp	r0, #1
 800212c:	d010      	beq.n	8002150 <acc_sensor_manager_prepare_radar_engine+0x114>
 800212e:	0020      	movs	r0, r4
 8002130:	f7fe fdca 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 8002134:	1c01      	adds	r1, r0, #0
 8002136:	4819      	ldr	r0, [pc, #100]	; (800219c <acc_sensor_manager_prepare_radar_engine+0x160>)
 8002138:	f00e f894 	bl	8010264 <__aeabi_fdiv>
 800213c:	4917      	ldr	r1, [pc, #92]	; (800219c <acc_sensor_manager_prepare_radar_engine+0x160>)
 800213e:	f00d fef7 	bl	800ff30 <__aeabi_fadd>
 8002142:	f00e fee1 	bl	8010f08 <__aeabi_f2uiz>
 8002146:	2300      	movs	r3, #0
 8002148:	6068      	str	r0, [r5, #4]
 800214a:	60eb      	str	r3, [r5, #12]
 800214c:	816b      	strh	r3, [r5, #10]
 800214e:	e7cd      	b.n	80020ec <acc_sensor_manager_prepare_radar_engine+0xb0>
 8002150:	20fa      	movs	r0, #250	; 0xfa
 8002152:	00c0      	lsls	r0, r0, #3
 8002154:	e7f7      	b.n	8002146 <acc_sensor_manager_prepare_radar_engine+0x10a>
 8002156:	2302      	movs	r3, #2
 8002158:	702b      	strb	r3, [r5, #0]
 800215a:	0020      	movs	r0, r4
 800215c:	f7fe fdca 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 8002160:	4243      	negs	r3, r0
 8002162:	4158      	adcs	r0, r3
 8002164:	7068      	strb	r0, [r5, #1]
 8002166:	0020      	movs	r0, r4
 8002168:	f7fe fd48 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 800216c:	70a8      	strb	r0, [r5, #2]
 800216e:	0020      	movs	r0, r4
 8002170:	f7fe fe12 	bl	8000d98 <acc_base_configuration_sensor_get>
 8002174:	2305      	movs	r3, #5
 8002176:	6070      	str	r0, [r6, #4]
 8002178:	7033      	strb	r3, [r6, #0]
 800217a:	0030      	movs	r0, r6
 800217c:	3302      	adds	r3, #2
 800217e:	221c      	movs	r2, #28
 8002180:	4641      	mov	r1, r8
 8002182:	60b3      	str	r3, [r6, #8]
 8002184:	f7fd ffbe 	bl	8000104 <acc_probes_execute>
 8002188:	4648      	mov	r0, r9
 800218a:	b012      	add	sp, #72	; 0x48
 800218c:	bc1c      	pop	{r2, r3, r4}
 800218e:	4690      	mov	r8, r2
 8002190:	4699      	mov	r9, r3
 8002192:	46a2      	mov	sl, r4
 8002194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002196:	2301      	movs	r3, #1
 8002198:	702b      	strb	r3, [r5, #0]
 800219a:	e7de      	b.n	800215a <acc_sensor_manager_prepare_radar_engine+0x11e>
 800219c:	44fa0000 	.word	0x44fa0000

080021a0 <saturation_check_u16>:
 80021a0:	b510      	push	{r4, lr}
 80021a2:	f00d fa53 	bl	800f64c <acc_alg_basic_saturation_check_u16>
 80021a6:	bd10      	pop	{r4, pc}

080021a8 <abs_q3_12_complex>:
 80021a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021aa:	46c6      	mov	lr, r8
 80021ac:	0007      	movs	r7, r0
 80021ae:	4688      	mov	r8, r1
 80021b0:	2400      	movs	r4, #0
 80021b2:	b500      	push	{lr}
 80021b4:	0895      	lsrs	r5, r2, #2
 80021b6:	0066      	lsls	r6, r4, #1
 80021b8:	42ac      	cmp	r4, r5
 80021ba:	d103      	bne.n	80021c4 <abs_q3_12_complex+0x1c>
 80021bc:	0030      	movs	r0, r6
 80021be:	bc04      	pop	{r2}
 80021c0:	4690      	mov	r8, r2
 80021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c4:	00a3      	lsls	r3, r4, #2
 80021c6:	5bda      	ldrh	r2, [r3, r7]
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	8858      	ldrh	r0, [r3, #2]
 80021cc:	3401      	adds	r4, #1
 80021ce:	0400      	lsls	r0, r0, #16
 80021d0:	4310      	orrs	r0, r2
 80021d2:	f00d fabd 	bl	800f750 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 80021d6:	4643      	mov	r3, r8
 80021d8:	5398      	strh	r0, [r3, r6]
 80021da:	e7ec      	b.n	80021b6 <abs_q3_12_complex+0xe>

080021dc <iq_mix_q3_12_complex>:
 80021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021de:	46de      	mov	lr, fp
 80021e0:	464e      	mov	r6, r9
 80021e2:	4645      	mov	r5, r8
 80021e4:	4657      	mov	r7, sl
 80021e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021e8:	b5e0      	push	{r5, r6, r7, lr}
 80021ea:	4698      	mov	r8, r3
 80021ec:	681e      	ldr	r6, [r3, #0]
 80021ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80021f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80021f2:	681d      	ldr	r5, [r3, #0]
 80021f4:	0004      	movs	r4, r0
 80021f6:	1c28      	adds	r0, r5, #0
 80021f8:	f00e f946 	bl	8010488 <__aeabi_fmul>
 80021fc:	f00d fa08 	bl	800f610 <accumulator_mod.lto_priv.567>
 8002200:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002202:	0007      	movs	r7, r0
 8002204:	1c28      	adds	r0, r5, #0
 8002206:	f00e f93f 	bl	8010488 <__aeabi_fmul>
 800220a:	f00d fa01 	bl	800f610 <accumulator_mod.lto_priv.567>
 800220e:	4681      	mov	r9, r0
 8002210:	6924      	ldr	r4, [r4, #16]
 8002212:	08b5      	lsrs	r5, r6, #2
 8002214:	00ad      	lsls	r5, r5, #2
 8002216:	192d      	adds	r5, r5, r4
 8002218:	42ac      	cmp	r4, r5
 800221a:	d109      	bne.n	8002230 <iq_mix_q3_12_complex+0x54>
 800221c:	2303      	movs	r3, #3
 800221e:	439e      	bics	r6, r3
 8002220:	4643      	mov	r3, r8
 8002222:	601e      	str	r6, [r3, #0]
 8002224:	bc3c      	pop	{r2, r3, r4, r5}
 8002226:	4690      	mov	r8, r2
 8002228:	4699      	mov	r9, r3
 800222a:	46a2      	mov	sl, r4
 800222c:	46ab      	mov	fp, r5
 800222e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	05db      	lsls	r3, r3, #23
 8002234:	18f8      	adds	r0, r7, r3
 8002236:	f00d fa75 	bl	800f724 <acc_alg_basic_math_q3_12_sin>
 800223a:	4682      	mov	sl, r0
 800223c:	0038      	movs	r0, r7
 800223e:	f00d fa71 	bl	800f724 <acc_alg_basic_math_q3_12_sin>
 8002242:	2200      	movs	r2, #0
 8002244:	5ea3      	ldrsh	r3, [r4, r2]
 8002246:	4651      	mov	r1, sl
 8002248:	469c      	mov	ip, r3
 800224a:	2202      	movs	r2, #2
 800224c:	5ea3      	ldrsh	r3, [r4, r2]
 800224e:	4662      	mov	r2, ip
 8002250:	4351      	muls	r1, r2
 8002252:	17ca      	asrs	r2, r1, #31
 8002254:	0512      	lsls	r2, r2, #20
 8002256:	0d12      	lsrs	r2, r2, #20
 8002258:	1852      	adds	r2, r2, r1
 800225a:	0001      	movs	r1, r0
 800225c:	4359      	muls	r1, r3
 800225e:	468b      	mov	fp, r1
 8002260:	17c9      	asrs	r1, r1, #31
 8002262:	0509      	lsls	r1, r1, #20
 8002264:	0d09      	lsrs	r1, r1, #20
 8002266:	4459      	add	r1, fp
 8002268:	1312      	asrs	r2, r2, #12
 800226a:	1309      	asrs	r1, r1, #12
 800226c:	1a52      	subs	r2, r2, r1
 800226e:	8022      	strh	r2, [r4, #0]
 8002270:	4652      	mov	r2, sl
 8002272:	435a      	muls	r2, r3
 8002274:	17d3      	asrs	r3, r2, #31
 8002276:	051b      	lsls	r3, r3, #20
 8002278:	0d1b      	lsrs	r3, r3, #20
 800227a:	189b      	adds	r3, r3, r2
 800227c:	4662      	mov	r2, ip
 800227e:	4342      	muls	r2, r0
 8002280:	17d0      	asrs	r0, r2, #31
 8002282:	0500      	lsls	r0, r0, #20
 8002284:	0d00      	lsrs	r0, r0, #20
 8002286:	1880      	adds	r0, r0, r2
 8002288:	131b      	asrs	r3, r3, #12
 800228a:	1300      	asrs	r0, r0, #12
 800228c:	181b      	adds	r3, r3, r0
 800228e:	8063      	strh	r3, [r4, #2]
 8002290:	444f      	add	r7, r9
 8002292:	3404      	adds	r4, #4
 8002294:	e7c0      	b.n	8002218 <iq_mix_q3_12_complex+0x3c>

08002296 <iq_mix_q3_12>:
 8002296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002298:	46de      	mov	lr, fp
 800229a:	4657      	mov	r7, sl
 800229c:	464e      	mov	r6, r9
 800229e:	4645      	mov	r5, r8
 80022a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022a2:	b5e0      	push	{r5, r6, r7, lr}
 80022a4:	4699      	mov	r9, r3
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0006      	movs	r6, r0
 80022aa:	085c      	lsrs	r4, r3, #1
 80022ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80022ae:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80022b0:	681d      	ldr	r5, [r3, #0]
 80022b2:	1c28      	adds	r0, r5, #0
 80022b4:	f00e f8e8 	bl	8010488 <__aeabi_fmul>
 80022b8:	f00d f9aa 	bl	800f610 <accumulator_mod.lto_priv.567>
 80022bc:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80022be:	0007      	movs	r7, r0
 80022c0:	1c28      	adds	r0, r5, #0
 80022c2:	f00e f8e1 	bl	8010488 <__aeabi_fmul>
 80022c6:	f00d f9a3 	bl	800f610 <accumulator_mod.lto_priv.567>
 80022ca:	0063      	lsls	r3, r4, #1
 80022cc:	4698      	mov	r8, r3
 80022ce:	4682      	mov	sl, r0
 80022d0:	6935      	ldr	r5, [r6, #16]
 80022d2:	6976      	ldr	r6, [r6, #20]
 80022d4:	44a8      	add	r8, r5
 80022d6:	4545      	cmp	r5, r8
 80022d8:	d108      	bne.n	80022ec <iq_mix_q3_12+0x56>
 80022da:	464b      	mov	r3, r9
 80022dc:	00a4      	lsls	r4, r4, #2
 80022de:	601c      	str	r4, [r3, #0]
 80022e0:	bc3c      	pop	{r2, r3, r4, r5}
 80022e2:	4690      	mov	r8, r2
 80022e4:	4699      	mov	r9, r3
 80022e6:	46a2      	mov	sl, r4
 80022e8:	46ab      	mov	fp, r5
 80022ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ec:	2200      	movs	r2, #0
 80022ee:	5eab      	ldrsh	r3, [r5, r2]
 80022f0:	3502      	adds	r5, #2
 80022f2:	469b      	mov	fp, r3
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	05db      	lsls	r3, r3, #23
 80022f8:	18f8      	adds	r0, r7, r3
 80022fa:	f00d fa13 	bl	800f724 <acc_alg_basic_math_q3_12_sin>
 80022fe:	465b      	mov	r3, fp
 8002300:	4343      	muls	r3, r0
 8002302:	17d8      	asrs	r0, r3, #31
 8002304:	0500      	lsls	r0, r0, #20
 8002306:	0d00      	lsrs	r0, r0, #20
 8002308:	18c0      	adds	r0, r0, r3
 800230a:	1300      	asrs	r0, r0, #12
 800230c:	8030      	strh	r0, [r6, #0]
 800230e:	0038      	movs	r0, r7
 8002310:	f00d fa08 	bl	800f724 <acc_alg_basic_math_q3_12_sin>
 8002314:	465b      	mov	r3, fp
 8002316:	4343      	muls	r3, r0
 8002318:	17d8      	asrs	r0, r3, #31
 800231a:	0500      	lsls	r0, r0, #20
 800231c:	0d00      	lsrs	r0, r0, #20
 800231e:	18c0      	adds	r0, r0, r3
 8002320:	1300      	asrs	r0, r0, #12
 8002322:	8070      	strh	r0, [r6, #2]
 8002324:	4457      	add	r7, sl
 8002326:	3604      	adds	r6, #4
 8002328:	e7d5      	b.n	80022d6 <iq_mix_q3_12+0x40>

0800232a <filter_q3_12_complex.lto_priv.143>:
 800232a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800232c:	2200      	movs	r2, #0
 800232e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002330:	6906      	ldr	r6, [r0, #16]
 8002332:	681d      	ldr	r5, [r3, #0]
 8002334:	ab03      	add	r3, sp, #12
 8002336:	801a      	strh	r2, [r3, #0]
 8002338:	805a      	strh	r2, [r3, #2]
 800233a:	9b03      	ldr	r3, [sp, #12]
 800233c:	08ad      	lsrs	r5, r5, #2
 800233e:	002a      	movs	r2, r5
 8002340:	0031      	movs	r1, r6
 8002342:	3040      	adds	r0, #64	; 0x40
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2301      	movs	r3, #1
 8002348:	0004      	movs	r4, r0
 800234a:	f00c ffe5 	bl	800f318 <biquad_q3_12_complex_direct_form_1.lto_priv.568>
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <filter_q3_12_complex.lto_priv.143+0x4e>)
 8002350:	0020      	movs	r0, r4
 8002352:	18eb      	adds	r3, r5, r3
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	18f3      	adds	r3, r6, r3
 8002358:	2202      	movs	r2, #2
 800235a:	5e99      	ldrsh	r1, [r3, r2]
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	aa02      	add	r2, sp, #8
 8002360:	8013      	strh	r3, [r2, #0]
 8002362:	2301      	movs	r3, #1
 8002364:	8051      	strh	r1, [r2, #2]
 8002366:	9a02      	ldr	r2, [sp, #8]
 8002368:	0031      	movs	r1, r6
 800236a:	9200      	str	r2, [sp, #0]
 800236c:	425b      	negs	r3, r3
 800236e:	002a      	movs	r2, r5
 8002370:	f00c ffd2 	bl	800f318 <biquad_q3_12_complex_direct_form_1.lto_priv.568>
 8002374:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	3fffffff 	.word	0x3fffffff

0800237c <centering_q12_4>:
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	4657      	mov	r7, sl
 8002380:	464e      	mov	r6, r9
 8002382:	4645      	mov	r5, r8
 8002384:	46de      	mov	lr, fp
 8002386:	b5e0      	push	{r5, r6, r7, lr}
 8002388:	0849      	lsrs	r1, r1, #1
 800238a:	0852      	lsrs	r2, r2, #1
 800238c:	b28b      	uxth	r3, r1
 800238e:	b295      	uxth	r5, r2
 8002390:	b083      	sub	sp, #12
 8002392:	4682      	mov	sl, r0
 8002394:	4699      	mov	r9, r3
 8002396:	2d00      	cmp	r5, #0
 8002398:	d100      	bne.n	800239c <centering_q12_4+0x20>
 800239a:	001d      	movs	r5, r3
 800239c:	b28b      	uxth	r3, r1
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2301      	movs	r3, #1
 80023a2:	425b      	negs	r3, r3
 80023a4:	46c8      	mov	r8, r9
 80023a6:	002f      	movs	r7, r5
 80023a8:	2600      	movs	r6, #0
 80023aa:	469b      	mov	fp, r3
 80023ac:	45b1      	cmp	r9, r6
 80023ae:	d806      	bhi.n	80023be <centering_q12_4+0x42>
 80023b0:	b003      	add	sp, #12
 80023b2:	bc3c      	pop	{r2, r3, r4, r5}
 80023b4:	4690      	mov	r8, r2
 80023b6:	4699      	mov	r9, r3
 80023b8:	46a2      	mov	sl, r4
 80023ba:	46ab      	mov	fp, r5
 80023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023be:	9a01      	ldr	r2, [sp, #4]
 80023c0:	19f3      	adds	r3, r6, r7
 80023c2:	4293      	cmp	r3, r2
 80023c4:	dd00      	ble.n	80023c8 <centering_q12_4+0x4c>
 80023c6:	4647      	mov	r7, r8
 80023c8:	2f00      	cmp	r7, #0
 80023ca:	d020      	beq.n	800240e <centering_q12_4+0x92>
 80023cc:	2200      	movs	r2, #0
 80023ce:	0010      	movs	r0, r2
 80023d0:	0074      	lsls	r4, r6, #1
 80023d2:	4454      	add	r4, sl
 80023d4:	42ba      	cmp	r2, r7
 80023d6:	d321      	bcc.n	800241c <centering_q12_4+0xa0>
 80023d8:	2301      	movs	r3, #1
 80023da:	2800      	cmp	r0, #0
 80023dc:	da00      	bge.n	80023e0 <centering_q12_4+0x64>
 80023de:	465b      	mov	r3, fp
 80023e0:	087a      	lsrs	r2, r7, #1
 80023e2:	b292      	uxth	r2, r2
 80023e4:	4353      	muls	r3, r2
 80023e6:	0039      	movs	r1, r7
 80023e8:	1818      	adds	r0, r3, r0
 80023ea:	f00e fc09 	bl	8010c00 <__divsi3>
 80023ee:	007a      	lsls	r2, r7, #1
 80023f0:	b201      	sxth	r1, r0
 80023f2:	18a2      	adds	r2, r4, r2
 80023f4:	2900      	cmp	r1, #0
 80023f6:	dd19      	ble.n	800242c <centering_q12_4+0xb0>
 80023f8:	b280      	uxth	r0, r0
 80023fa:	8823      	ldrh	r3, [r4, #0]
 80023fc:	2100      	movs	r1, #0
 80023fe:	4283      	cmp	r3, r0
 8002400:	d301      	bcc.n	8002406 <centering_q12_4+0x8a>
 8002402:	1a1b      	subs	r3, r3, r0
 8002404:	b299      	uxth	r1, r3
 8002406:	8021      	strh	r1, [r4, #0]
 8002408:	3402      	adds	r4, #2
 800240a:	42a2      	cmp	r2, r4
 800240c:	d1f5      	bne.n	80023fa <centering_q12_4+0x7e>
 800240e:	4643      	mov	r3, r8
 8002410:	1b5b      	subs	r3, r3, r5
 8002412:	1976      	adds	r6, r6, r5
 8002414:	b29b      	uxth	r3, r3
 8002416:	b2b6      	uxth	r6, r6
 8002418:	4698      	mov	r8, r3
 800241a:	e7c7      	b.n	80023ac <centering_q12_4+0x30>
 800241c:	490b      	ldr	r1, [pc, #44]	; (800244c <centering_q12_4+0xd0>)
 800241e:	0053      	lsls	r3, r2, #1
 8002420:	468c      	mov	ip, r1
 8002422:	5ae3      	ldrh	r3, [r4, r3]
 8002424:	3201      	adds	r2, #1
 8002426:	4463      	add	r3, ip
 8002428:	18c0      	adds	r0, r0, r3
 800242a:	e7d3      	b.n	80023d4 <centering_q12_4+0x58>
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <centering_q12_4+0xd4>)
 800242e:	469c      	mov	ip, r3
 8002430:	4461      	add	r1, ip
 8002432:	8823      	ldrh	r3, [r4, #0]
 8002434:	428b      	cmp	r3, r1
 8002436:	dc06      	bgt.n	8002446 <centering_q12_4+0xca>
 8002438:	1a1b      	subs	r3, r3, r0
 800243a:	b29b      	uxth	r3, r3
 800243c:	8023      	strh	r3, [r4, #0]
 800243e:	3402      	adds	r4, #2
 8002440:	42a2      	cmp	r2, r4
 8002442:	d1f6      	bne.n	8002432 <centering_q12_4+0xb6>
 8002444:	e7e3      	b.n	800240e <centering_q12_4+0x92>
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <centering_q12_4+0xd4>)
 8002448:	e7f8      	b.n	800243c <centering_q12_4+0xc0>
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	ffff8000 	.word	0xffff8000
 8002450:	0000ffff 	.word	0x0000ffff

08002454 <acc_alg_cca_calculate>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	0003      	movs	r3, r0
 8002458:	000c      	movs	r4, r1
 800245a:	2201      	movs	r2, #1
 800245c:	2000      	movs	r0, #0
 800245e:	42a2      	cmp	r2, r4
 8002460:	d30f      	bcc.n	8002482 <acc_alg_cca_calculate+0x2e>
 8002462:	f00e ff45 	bl	80112f0 <__aeabi_i2f>
 8002466:	1c05      	adds	r5, r0, #0
 8002468:	1e60      	subs	r0, r4, #1
 800246a:	f00e ff41 	bl	80112f0 <__aeabi_i2f>
 800246e:	1c01      	adds	r1, r0, #0
 8002470:	1c28      	adds	r0, r5, #0
 8002472:	f00d fef7 	bl	8010264 <__aeabi_fdiv>
 8002476:	f011 fbb1 	bl	8013bdc <log10f>
 800247a:	4907      	ldr	r1, [pc, #28]	; (8002498 <acc_alg_cca_calculate+0x44>)
 800247c:	f00e f804 	bl	8010488 <__aeabi_fmul>
 8002480:	bd70      	pop	{r4, r5, r6, pc}
 8002482:	881d      	ldrh	r5, [r3, #0]
 8002484:	8859      	ldrh	r1, [r3, #2]
 8002486:	3201      	adds	r2, #1
 8002488:	1b49      	subs	r1, r1, r5
 800248a:	17cd      	asrs	r5, r1, #31
 800248c:	1949      	adds	r1, r1, r5
 800248e:	4069      	eors	r1, r5
 8002490:	1840      	adds	r0, r0, r1
 8002492:	b292      	uxth	r2, r2
 8002494:	3302      	adds	r3, #2
 8002496:	e7e2      	b.n	800245e <acc_alg_cca_calculate+0xa>
 8002498:	41a00000 	.word	0x41a00000

0800249c <process_data.lto_priv.155>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	001d      	movs	r5, r3
 80024a0:	23b8      	movs	r3, #184	; 0xb8
 80024a2:	46ce      	mov	lr, r9
 80024a4:	4699      	mov	r9, r3
 80024a6:	4647      	mov	r7, r8
 80024a8:	6944      	ldr	r4, [r0, #20]
 80024aa:	b580      	push	{r7, lr}
 80024ac:	44a1      	add	r9, r4
 80024ae:	464b      	mov	r3, r9
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	0017      	movs	r7, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d028      	beq.n	800250a <process_data.lto_priv.155+0x6e>
 80024b8:	0026      	movs	r6, r4
 80024ba:	6809      	ldr	r1, [r1, #0]
 80024bc:	36b4      	adds	r6, #180	; 0xb4
 80024be:	4688      	mov	r8, r1
 80024c0:	8832      	ldrh	r2, [r6, #0]
 80024c2:	6801      	ldr	r1, [r0, #0]
 80024c4:	0052      	lsls	r2, r2, #1
 80024c6:	4490      	add	r8, r2
 80024c8:	4642      	mov	r2, r8
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7fd fe34 	bl	8000138 <acc_probes_execute_uint16>
 80024d0:	464b      	mov	r3, r9
 80024d2:	4640      	mov	r0, r8
 80024d4:	8819      	ldrh	r1, [r3, #0]
 80024d6:	f7ff ffbd 	bl	8002454 <acc_alg_cca_calculate>
 80024da:	2301      	movs	r3, #1
 80024dc:	6068      	str	r0, [r5, #4]
 80024de:	490d      	ldr	r1, [pc, #52]	; (8002514 <process_data.lto_priv.155+0x78>)
 80024e0:	4698      	mov	r8, r3
 80024e2:	f00e fcdd 	bl	8010ea0 <__aeabi_fcmpgt>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d100      	bne.n	80024ec <process_data.lto_priv.155+0x50>
 80024ea:	4680      	mov	r8, r0
 80024ec:	4643      	mov	r3, r8
 80024ee:	702b      	strb	r3, [r5, #0]
 80024f0:	2300      	movs	r3, #0
 80024f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d103      	bne.n	8002500 <process_data.lto_priv.155+0x64>
 80024f8:	34ba      	adds	r4, #186	; 0xba
 80024fa:	7822      	ldrb	r2, [r4, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	4053      	eors	r3, r2
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	722b      	strb	r3, [r5, #8]
 8002506:	8833      	ldrh	r3, [r6, #0]
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	2001      	movs	r0, #1
 800250c:	bc0c      	pop	{r2, r3}
 800250e:	4690      	mov	r8, r2
 8002510:	4699      	mov	r9, r3
 8002512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002514:	42640000 	.word	0x42640000

08002518 <process_data.lto_priv.154>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	4657      	mov	r7, sl
 800251c:	464e      	mov	r6, r9
 800251e:	4645      	mov	r5, r8
 8002520:	46de      	mov	lr, fp
 8002522:	6944      	ldr	r4, [r0, #20]
 8002524:	b5e0      	push	{r5, r6, r7, lr}
 8002526:	0027      	movs	r7, r4
 8002528:	37ce      	adds	r7, #206	; 0xce
 800252a:	001d      	movs	r5, r3
 800252c:	883b      	ldrh	r3, [r7, #0]
 800252e:	4680      	mov	r8, r0
 8002530:	468a      	mov	sl, r1
 8002532:	0016      	movs	r6, r2
 8002534:	4699      	mov	r9, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d03a      	beq.n	80025b0 <process_data.lto_priv.154+0x98>
 800253a:	0023      	movs	r3, r4
 800253c:	33c8      	adds	r3, #200	; 0xc8
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	b280      	uxth	r0, r0
 8002542:	0043      	lsls	r3, r0, #1
 8002544:	469b      	mov	fp, r3
 8002546:	0023      	movs	r3, r4
 8002548:	33cc      	adds	r3, #204	; 0xcc
 800254a:	8819      	ldrh	r1, [r3, #0]
 800254c:	207c      	movs	r0, #124	; 0x7c
 800254e:	f00e facd 	bl	8010aec <__udivsi3>
 8002552:	465b      	mov	r3, fp
 8002554:	4358      	muls	r0, r3
 8002556:	0023      	movs	r3, r4
 8002558:	33c4      	adds	r3, #196	; 0xc4
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	4641      	mov	r1, r8
 800255e:	18c0      	adds	r0, r0, r3
 8002560:	4653      	mov	r3, sl
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6809      	ldr	r1, [r1, #0]
 8002566:	469a      	mov	sl, r3
 8002568:	4482      	add	sl, r0
 800256a:	464b      	mov	r3, r9
 800256c:	4652      	mov	r2, sl
 800256e:	2001      	movs	r0, #1
 8002570:	f7fd fde2 	bl	8000138 <acc_probes_execute_uint16>
 8002574:	883f      	ldrh	r7, [r7, #0]
 8002576:	4650      	mov	r0, sl
 8002578:	0039      	movs	r1, r7
 800257a:	f7ff ff6b 	bl	8002454 <acc_alg_cca_calculate>
 800257e:	2301      	movs	r3, #1
 8002580:	6068      	str	r0, [r5, #4]
 8002582:	490f      	ldr	r1, [pc, #60]	; (80025c0 <process_data.lto_priv.154+0xa8>)
 8002584:	4698      	mov	r8, r3
 8002586:	f00e fc8b 	bl	8010ea0 <__aeabi_fcmpgt>
 800258a:	2800      	cmp	r0, #0
 800258c:	d100      	bne.n	8002590 <process_data.lto_priv.154+0x78>
 800258e:	4680      	mov	r8, r0
 8002590:	4643      	mov	r3, r8
 8002592:	702b      	strb	r3, [r5, #0]
 8002594:	2300      	movs	r3, #0
 8002596:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002598:	429a      	cmp	r2, r3
 800259a:	d103      	bne.n	80025a4 <process_data.lto_priv.154+0x8c>
 800259c:	34c0      	adds	r4, #192	; 0xc0
 800259e:	7822      	ldrb	r2, [r4, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	4053      	eors	r3, r2
 80025a4:	2201      	movs	r2, #1
 80025a6:	4013      	ands	r3, r2
 80025a8:	722b      	strb	r3, [r5, #8]
 80025aa:	6833      	ldr	r3, [r6, #0]
 80025ac:	1bdf      	subs	r7, r3, r7
 80025ae:	6037      	str	r7, [r6, #0]
 80025b0:	2001      	movs	r0, #1
 80025b2:	bc3c      	pop	{r2, r3, r4, r5}
 80025b4:	4690      	mov	r8, r2
 80025b6:	4699      	mov	r9, r3
 80025b8:	46a2      	mov	sl, r4
 80025ba:	46ab      	mov	fp, r5
 80025bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	42640000 	.word	0x42640000

080025c4 <acc_sensor_protocol_r2_wait_for_sync_start>:
 80025c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80025c6:	ae03      	add	r6, sp, #12
 80025c8:	0032      	movs	r2, r6
 80025ca:	0005      	movs	r5, r0
 80025cc:	f00d fb24 	bl	800fc18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 80025d0:	1e04      	subs	r4, r0, #0
 80025d2:	d108      	bne.n	80025e6 <acc_sensor_protocol_r2_wait_for_sync_start+0x22>
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <acc_sensor_protocol_r2_wait_for_sync_start+0x40>)
 80025d8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80025da:	490b      	ldr	r1, [pc, #44]	; (8002608 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 80025dc:	002b      	movs	r3, r5
 80025de:	47b0      	blx	r6
 80025e0:	0020      	movs	r0, r4
 80025e2:	b004      	add	sp, #16
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
 80025e6:	8873      	ldrh	r3, [r6, #2]
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	d0f9      	beq.n	80025e0 <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 80025f2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80025f4:	4904      	ldr	r1, [pc, #16]	; (8002608 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 80025f6:	002b      	movs	r3, r5
 80025f8:	2000      	movs	r0, #0
 80025fa:	47a0      	blx	r4
 80025fc:	2400      	movs	r4, #0
 80025fe:	e7ef      	b.n	80025e0 <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 8002600:	200004a8 	.word	0x200004a8
 8002604:	0801c86a 	.word	0x0801c86a
 8002608:	0801c85a 	.word	0x0801c85a
 800260c:	0801c89c 	.word	0x0801c89c

08002610 <acc_sensor_protocol_r2_wait_for_radar_data>:
 8002610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002612:	b085      	sub	sp, #20
 8002614:	ac03      	add	r4, sp, #12
 8002616:	0017      	movs	r7, r2
 8002618:	0022      	movs	r2, r4
 800261a:	0006      	movs	r6, r0
 800261c:	f00d fafc 	bl	800fc18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8002620:	1e05      	subs	r5, r0, #0
 8002622:	d032      	beq.n	800268a <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8002624:	7822      	ldrb	r2, [r4, #0]
 8002626:	8863      	ldrh	r3, [r4, #2]
 8002628:	2a06      	cmp	r2, #6
 800262a:	d125      	bne.n	8002678 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 800262c:	051a      	lsls	r2, r3, #20
 800262e:	d523      	bpl.n	8002678 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	00d2      	lsls	r2, r2, #3
 8002634:	4013      	ands	r3, r2
 8002636:	d12b      	bne.n	8002690 <acc_sensor_protocol_r2_wait_for_radar_data+0x80>
 8002638:	2f00      	cmp	r7, #0
 800263a:	d000      	beq.n	800263e <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 800263c:	703b      	strb	r3, [r7, #0]
 800263e:	8863      	ldrh	r3, [r4, #2]
 8002640:	05db      	lsls	r3, r3, #23
 8002642:	d50a      	bpl.n	800265a <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 8002646:	001a      	movs	r2, r3
 8002648:	3230      	adds	r2, #48	; 0x30
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	2a03      	cmp	r2, #3
 800264e:	d904      	bls.n	800265a <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <acc_sensor_protocol_r2_wait_for_radar_data+0x90>)
 8002654:	4913      	ldr	r1, [pc, #76]	; (80026a4 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 8002656:	2004      	movs	r0, #4
 8002658:	4798      	blx	r3
 800265a:	8863      	ldrh	r3, [r4, #2]
 800265c:	059b      	lsls	r3, r3, #22
 800265e:	d514      	bpl.n	800268a <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 8002662:	001a      	movs	r2, r3
 8002664:	3230      	adds	r2, #48	; 0x30
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	2a03      	cmp	r2, #3
 800266a:	d90e      	bls.n	800268a <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 800266c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266e:	4a0e      	ldr	r2, [pc, #56]	; (80026a8 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8002670:	490c      	ldr	r1, [pc, #48]	; (80026a4 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 8002672:	2004      	movs	r0, #4
 8002674:	4798      	blx	r3
 8002676:	e008      	b.n	800268a <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 800267c:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800267e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002680:	4908      	ldr	r1, [pc, #32]	; (80026a4 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 8002682:	0033      	movs	r3, r6
 8002684:	2000      	movs	r0, #0
 8002686:	47a0      	blx	r4
 8002688:	2500      	movs	r5, #0
 800268a:	0028      	movs	r0, r5
 800268c:	b005      	add	sp, #20
 800268e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002690:	0031      	movs	r1, r6
 8002692:	200f      	movs	r0, #15
 8002694:	f7fd fd44 	bl	8000120 <acc_probes_execute_primitive_probe>
 8002698:	002b      	movs	r3, r5
 800269a:	e7cd      	b.n	8002638 <acc_sensor_protocol_r2_wait_for_radar_data+0x28>
 800269c:	200004a8 	.word	0x200004a8
 80026a0:	0801c906 	.word	0x0801c906
 80026a4:	0801c85a 	.word	0x0801c85a
 80026a8:	0801c91f 	.word	0x0801c91f
 80026ac:	0801c8d6 	.word	0x0801c8d6

080026b0 <acc_sensor_protocol_r2_ack_event>:
 80026b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026b2:	466b      	mov	r3, sp
 80026b4:	1d9c      	adds	r4, r3, #6
 80026b6:	2300      	movs	r3, #0
 80026b8:	0022      	movs	r2, r4
 80026ba:	2138      	movs	r1, #56	; 0x38
 80026bc:	0005      	movs	r5, r0
 80026be:	8023      	strh	r3, [r4, #0]
 80026c0:	f00d f87a 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 80026c4:	8824      	ldrh	r4, [r4, #0]
 80026c6:	2001      	movs	r0, #1
 80026c8:	2c00      	cmp	r4, #0
 80026ca:	d10a      	bne.n	80026e2 <acc_sensor_protocol_r2_ack_event+0x32>
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <acc_sensor_protocol_r2_ack_event+0x34>)
 80026ce:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <acc_sensor_protocol_r2_ack_event+0x38>)
 80026d0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80026d2:	4906      	ldr	r1, [pc, #24]	; (80026ec <acc_sensor_protocol_r2_ack_event+0x3c>)
 80026d4:	002b      	movs	r3, r5
 80026d6:	0020      	movs	r0, r4
 80026d8:	47b0      	blx	r6
 80026da:	0028      	movs	r0, r5
 80026dc:	f00d f893 	bl	800f806 <acc_sensor_diagnostics_r2_sensor_status>
 80026e0:	0020      	movs	r0, r4
 80026e2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80026e4:	200004a8 	.word	0x200004a8
 80026e8:	0801c937 	.word	0x0801c937
 80026ec:	0801c85a 	.word	0x0801c85a

080026f0 <acc_sensor_protocol_r2_wait_for_specific_event>:
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b085      	sub	sp, #20
 80026f4:	ae03      	add	r6, sp, #12
 80026f6:	0015      	movs	r5, r2
 80026f8:	0032      	movs	r2, r6
 80026fa:	0004      	movs	r4, r0
 80026fc:	001f      	movs	r7, r3
 80026fe:	f00d fa8b 	bl	800fc18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8002702:	2800      	cmp	r0, #0
 8002704:	d00d      	beq.n	8002722 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8002706:	7832      	ldrb	r2, [r6, #0]
 8002708:	42aa      	cmp	r2, r5
 800270a:	d00c      	beq.n	8002726 <acc_sensor_protocol_r2_wait_for_specific_event+0x36>
 800270c:	9200      	str	r2, [sp, #0]
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8002712:	9501      	str	r5, [sp, #4]
 8002714:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8002716:	2000      	movs	r0, #0
 8002718:	3358      	adds	r3, #88	; 0x58
 800271a:	4a08      	ldr	r2, [pc, #32]	; (800273c <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 800271c:	4908      	ldr	r1, [pc, #32]	; (8002740 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 800271e:	47a0      	blx	r4
 8002720:	2000      	movs	r0, #0
 8002722:	b005      	add	sp, #20
 8002724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002726:	2f00      	cmp	r7, #0
 8002728:	d0fb      	beq.n	8002722 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 800272a:	0020      	movs	r0, r4
 800272c:	f7ff ffc0 	bl	80026b0 <acc_sensor_protocol_r2_ack_event>
 8002730:	e7f7      	b.n	8002722 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	08015ea8 	.word	0x08015ea8
 8002738:	200004a8 	.word	0x200004a8
 800273c:	0801c968 	.word	0x0801c968
 8002740:	0801c85a 	.word	0x0801c85a

08002744 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8002744:	b510      	push	{r4, lr}
 8002746:	2301      	movs	r3, #1
 8002748:	220b      	movs	r2, #11
 800274a:	f7ff ffd1 	bl	80026f0 <acc_sensor_protocol_r2_wait_for_specific_event>
 800274e:	bd10      	pop	{r4, pc}

08002750 <acc_radar_engine_acquire_adc_data>:
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	4657      	mov	r7, sl
 8002754:	464e      	mov	r6, r9
 8002756:	4645      	mov	r5, r8
 8002758:	46de      	mov	lr, fp
 800275a:	2300      	movs	r3, #0
 800275c:	b5e0      	push	{r5, r6, r7, lr}
 800275e:	0005      	movs	r5, r0
 8002760:	4698      	mov	r8, r3
 8002762:	b08d      	sub	sp, #52	; 0x34
 8002764:	4689      	mov	r9, r1
 8002766:	4945      	ldr	r1, [pc, #276]	; (800287c <acc_radar_engine_acquire_adc_data+0x12c>)
 8002768:	a806      	add	r0, sp, #24
 800276a:	7093      	strb	r3, [r2, #2]
 800276c:	70d3      	strb	r3, [r2, #3]
 800276e:	8013      	strh	r3, [r2, #0]
 8002770:	7313      	strb	r3, [r2, #12]
 8002772:	7113      	strb	r3, [r2, #4]
 8002774:	6091      	str	r1, [r2, #8]
 8002776:	1d87      	adds	r7, r0, #6
 8002778:	0014      	movs	r4, r2
 800277a:	6828      	ldr	r0, [r5, #0]
 800277c:	aa06      	add	r2, sp, #24
 800277e:	71d3      	strb	r3, [r2, #7]
 8002780:	703b      	strb	r3, [r7, #0]
 8002782:	4682      	mov	sl, r0
 8002784:	7ba8      	ldrb	r0, [r5, #14]
 8002786:	3207      	adds	r2, #7
 8002788:	9000      	str	r0, [sp, #0]
 800278a:	7be8      	ldrb	r0, [r5, #15]
 800278c:	9105      	str	r1, [sp, #20]
 800278e:	9003      	str	r0, [sp, #12]
 8002790:	89a8      	ldrh	r0, [r5, #12]
 8002792:	9202      	str	r2, [sp, #8]
 8002794:	9001      	str	r0, [sp, #4]
 8002796:	6928      	ldr	r0, [r5, #16]
 8002798:	ae09      	add	r6, sp, #36	; 0x24
 800279a:	9004      	str	r0, [sp, #16]
 800279c:	4643      	mov	r3, r8
 800279e:	9a01      	ldr	r2, [sp, #4]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d959      	bls.n	800285a <acc_radar_engine_acquire_adc_data+0x10a>
 80027a6:	9b00      	ldr	r3, [sp, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00f      	beq.n	80027cc <acc_radar_engine_acquire_adc_data+0x7c>
 80027ac:	69ab      	ldr	r3, [r5, #24]
 80027ae:	9a02      	ldr	r2, [sp, #8]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	9904      	ldr	r1, [sp, #16]
 80027b4:	4650      	mov	r0, sl
 80027b6:	4798      	blx	r3
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d10e      	bne.n	80027da <acc_radar_engine_acquire_adc_data+0x8a>
 80027bc:	2000      	movs	r0, #0
 80027be:	b00d      	add	sp, #52	; 0x34
 80027c0:	bc3c      	pop	{r2, r3, r4, r5}
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	46a2      	mov	sl, r4
 80027c8:	46ab      	mov	fp, r5
 80027ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027cc:	69ab      	ldr	r3, [r5, #24]
 80027ce:	4650      	mov	r0, sl
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	4798      	blx	r3
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d1e9      	bne.n	80027ac <acc_radar_engine_acquire_adc_data+0x5c>
 80027d8:	e7f0      	b.n	80027bc <acc_radar_engine_acquire_adc_data+0x6c>
 80027da:	9b02      	ldr	r3, [sp, #8]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d100      	bne.n	80027e4 <acc_radar_engine_acquire_adc_data+0x94>
 80027e2:	78a3      	ldrb	r3, [r4, #2]
 80027e4:	70a3      	strb	r3, [r4, #2]
 80027e6:	69ab      	ldr	r3, [r5, #24]
 80027e8:	003a      	movs	r2, r7
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	4649      	mov	r1, r9
 80027ee:	0028      	movs	r0, r5
 80027f0:	4798      	blx	r3
 80027f2:	2300      	movs	r3, #0
 80027f4:	7033      	strb	r3, [r6, #0]
 80027f6:	7233      	strb	r3, [r6, #8]
 80027f8:	69ab      	ldr	r3, [r5, #24]
 80027fa:	9a05      	ldr	r2, [sp, #20]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	9008      	str	r0, [sp, #32]
 8002800:	6072      	str	r2, [r6, #4]
 8002802:	469b      	mov	fp, r3
 8002804:	aa08      	add	r2, sp, #32
 8002806:	0033      	movs	r3, r6
 8002808:	4649      	mov	r1, r9
 800280a:	0028      	movs	r0, r5
 800280c:	47d8      	blx	fp
 800280e:	7a33      	ldrb	r3, [r6, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d100      	bne.n	8002816 <acc_radar_engine_acquire_adc_data+0xc6>
 8002814:	7b23      	ldrb	r3, [r4, #12]
 8002816:	7323      	strb	r3, [r4, #12]
 8002818:	7833      	ldrb	r3, [r6, #0]
 800281a:	469b      	mov	fp, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d100      	bne.n	8002822 <acc_radar_engine_acquire_adc_data+0xd2>
 8002820:	7923      	ldrb	r3, [r4, #4]
 8002822:	7123      	strb	r3, [r4, #4]
 8002824:	68a1      	ldr	r1, [r4, #8]
 8002826:	6870      	ldr	r0, [r6, #4]
 8002828:	f011 f8ac 	bl	8013984 <fmaxf>
 800282c:	783b      	ldrb	r3, [r7, #0]
 800282e:	60a0      	str	r0, [r4, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d100      	bne.n	8002836 <acc_radar_engine_acquire_adc_data+0xe6>
 8002834:	78e3      	ldrb	r3, [r4, #3]
 8002836:	9a08      	ldr	r2, [sp, #32]
 8002838:	70e3      	strb	r3, [r4, #3]
 800283a:	4694      	mov	ip, r2
 800283c:	8823      	ldrh	r3, [r4, #0]
 800283e:	4659      	mov	r1, fp
 8002840:	4463      	add	r3, ip
 8002842:	8023      	strh	r3, [r4, #0]
 8002844:	69ab      	ldr	r3, [r5, #24]
 8002846:	0028      	movs	r0, r5
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	4798      	blx	r3
 800284c:	9b03      	ldr	r3, [sp, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <acc_radar_engine_acquire_adc_data+0x110>
 8002852:	9b01      	ldr	r3, [sp, #4]
 8002854:	3b01      	subs	r3, #1
 8002856:	4598      	cmp	r8, r3
 8002858:	d102      	bne.n	8002860 <acc_radar_engine_acquire_adc_data+0x110>
 800285a:	464b      	mov	r3, r9
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	e7ae      	b.n	80027be <acc_radar_engine_acquire_adc_data+0x6e>
 8002860:	9b00      	ldr	r3, [sp, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <acc_radar_engine_acquire_adc_data+0x11e>
 8002866:	2301      	movs	r3, #1
 8002868:	469c      	mov	ip, r3
 800286a:	44e0      	add	r8, ip
 800286c:	e796      	b.n	800279c <acc_radar_engine_acquire_adc_data+0x4c>
 800286e:	69ab      	ldr	r3, [r5, #24]
 8002870:	4650      	mov	r0, sl
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	4798      	blx	r3
 8002876:	2800      	cmp	r0, #0
 8002878:	d1f5      	bne.n	8002866 <acc_radar_engine_acquire_adc_data+0x116>
 800287a:	e79f      	b.n	80027bc <acc_radar_engine_acquire_adc_data+0x6c>
 800287c:	ff800000 	.word	0xff800000

08002880 <transfer_data.lto_priv.157>:
 8002880:	b570      	push	{r4, r5, r6, lr}
 8002882:	000d      	movs	r5, r1
 8002884:	2100      	movs	r1, #0
 8002886:	6943      	ldr	r3, [r0, #20]
 8002888:	7011      	strb	r1, [r2, #0]
 800288a:	001a      	movs	r2, r3
 800288c:	33b8      	adds	r3, #184	; 0xb8
 800288e:	32b4      	adds	r2, #180	; 0xb4
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	8814      	ldrh	r4, [r2, #0]
 8002894:	6829      	ldr	r1, [r5, #0]
 8002896:	18e4      	adds	r4, r4, r3
 8002898:	0022      	movs	r2, r4
 800289a:	6800      	ldr	r0, [r0, #0]
 800289c:	f7ff faec 	bl	8001e78 <acc_sensor_protocol_r2_transfer_data>
 80028a0:	0062      	lsls	r2, r4, #1
 80028a2:	0001      	movs	r1, r0
 80028a4:	6828      	ldr	r0, [r5, #0]
 80028a6:	f013 fade 	bl	8015e66 <memmove>
 80028aa:	0020      	movs	r0, r4
 80028ac:	bd70      	pop	{r4, r5, r6, pc}

080028ae <acc_radar_engine_sparse_create>:
 80028ae:	22cd      	movs	r2, #205	; 0xcd
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	0052      	lsls	r2, r2, #1
 80028b4:	0004      	movs	r4, r0
 80028b6:	000d      	movs	r5, r1
 80028b8:	20bc      	movs	r0, #188	; 0xbc
 80028ba:	490f      	ldr	r1, [pc, #60]	; (80028f8 <acc_radar_engine_sparse_create+0x4a>)
 80028bc:	f009 fe96 	bl	800c5ec <acc_rss_integration_mem_calloc_debug.constprop.65>
 80028c0:	2300      	movs	r3, #0
 80028c2:	6160      	str	r0, [r4, #20]
 80028c4:	4298      	cmp	r0, r3
 80028c6:	d015      	beq.n	80028f4 <acc_radar_engine_sparse_create+0x46>
 80028c8:	0028      	movs	r0, r5
 80028ca:	f7fe fa65 	bl	8000d98 <acc_base_configuration_sensor_get>
 80028ce:	6020      	str	r0, [r4, #0]
 80028d0:	0028      	movs	r0, r5
 80028d2:	f7fe f993 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 80028d6:	73a0      	strb	r0, [r4, #14]
 80028d8:	0028      	movs	r0, r5
 80028da:	f7fe fa4a 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 80028de:	4243      	negs	r3, r0
 80028e0:	4158      	adcs	r0, r3
 80028e2:	73e0      	strb	r0, [r4, #15]
 80028e4:	0028      	movs	r0, r5
 80028e6:	f7fe fa0f 	bl	8000d08 <acc_radar_engine_common_get_timeout_ms>
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <acc_radar_engine_sparse_create+0x4e>)
 80028ec:	6120      	str	r0, [r4, #16]
 80028ee:	3308      	adds	r3, #8
 80028f0:	61a3      	str	r3, [r4, #24]
 80028f2:	2301      	movs	r3, #1
 80028f4:	0018      	movs	r0, r3
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	0801c993 	.word	0x0801c993
 80028fc:	08015f28 	.word	0x08015f28

08002900 <acc_radar_engine_linear_create>:
 8002900:	222c      	movs	r2, #44	; 0x2c
 8002902:	b570      	push	{r4, r5, r6, lr}
 8002904:	32ff      	adds	r2, #255	; 0xff
 8002906:	0004      	movs	r4, r0
 8002908:	000d      	movs	r5, r1
 800290a:	20d4      	movs	r0, #212	; 0xd4
 800290c:	490f      	ldr	r1, [pc, #60]	; (800294c <acc_radar_engine_linear_create+0x4c>)
 800290e:	f009 fe6d 	bl	800c5ec <acc_rss_integration_mem_calloc_debug.constprop.65>
 8002912:	2300      	movs	r3, #0
 8002914:	6160      	str	r0, [r4, #20]
 8002916:	4298      	cmp	r0, r3
 8002918:	d015      	beq.n	8002946 <acc_radar_engine_linear_create+0x46>
 800291a:	0028      	movs	r0, r5
 800291c:	f7fe fa3c 	bl	8000d98 <acc_base_configuration_sensor_get>
 8002920:	6020      	str	r0, [r4, #0]
 8002922:	0028      	movs	r0, r5
 8002924:	f7fe f96a 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 8002928:	73a0      	strb	r0, [r4, #14]
 800292a:	0028      	movs	r0, r5
 800292c:	f7fe fa21 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8002930:	4243      	negs	r3, r0
 8002932:	4158      	adcs	r0, r3
 8002934:	73e0      	strb	r0, [r4, #15]
 8002936:	0028      	movs	r0, r5
 8002938:	f7fe f9e6 	bl	8000d08 <acc_radar_engine_common_get_timeout_ms>
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <acc_radar_engine_linear_create+0x50>)
 800293e:	6120      	str	r0, [r4, #16]
 8002940:	3340      	adds	r3, #64	; 0x40
 8002942:	61a3      	str	r3, [r4, #24]
 8002944:	2301      	movs	r3, #1
 8002946:	0018      	movs	r0, r3
 8002948:	bd70      	pop	{r4, r5, r6, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	0801c9c5 	.word	0x0801c9c5
 8002950:	08015f28 	.word	0x08015f28

08002954 <acc_service_sparse_configuration_create>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	2260      	movs	r2, #96	; 0x60
 8002958:	4972      	ldr	r1, [pc, #456]	; (8002b24 <acc_service_sparse_configuration_create+0x1d0>)
 800295a:	208c      	movs	r0, #140	; 0x8c
 800295c:	f009 fe46 	bl	800c5ec <acc_rss_integration_mem_calloc_debug.constprop.65>
 8002960:	1e04      	subs	r4, r0, #0
 8002962:	d100      	bne.n	8002966 <acc_service_sparse_configuration_create+0x12>
 8002964:	e0db      	b.n	8002b1e <acc_service_sparse_configuration_create+0x1ca>
 8002966:	4b70      	ldr	r3, [pc, #448]	; (8002b28 <acc_service_sparse_configuration_create+0x1d4>)
 8002968:	0005      	movs	r5, r0
 800296a:	6003      	str	r3, [r0, #0]
 800296c:	2303      	movs	r3, #3
 800296e:	7103      	strb	r3, [r0, #4]
 8002970:	4b6e      	ldr	r3, [pc, #440]	; (8002b2c <acc_service_sparse_configuration_create+0x1d8>)
 8002972:	351c      	adds	r5, #28
 8002974:	6083      	str	r3, [r0, #8]
 8002976:	4b6e      	ldr	r3, [pc, #440]	; (8002b30 <acc_service_sparse_configuration_create+0x1dc>)
 8002978:	6105      	str	r5, [r0, #16]
 800297a:	6143      	str	r3, [r0, #20]
 800297c:	2358      	movs	r3, #88	; 0x58
 800297e:	2102      	movs	r1, #2
 8002980:	8303      	strh	r3, [r0, #24]
 8002982:	f7fe fc0f 	bl	80011a4 <acc_service_profile_set>
 8002986:	0020      	movs	r0, r4
 8002988:	2100      	movs	r1, #0
 800298a:	f7fe fbf9 	bl	8001180 <acc_service_maximize_signal_attenuation_set>
 800298e:	0028      	movs	r0, r5
 8002990:	f7fe f91a 	bl	8000bc8 <configuration_is_valid>
 8002994:	2800      	cmp	r0, #0
 8002996:	d001      	beq.n	800299c <acc_service_sparse_configuration_create+0x48>
 8002998:	4b66      	ldr	r3, [pc, #408]	; (8002b34 <acc_service_sparse_configuration_create+0x1e0>)
 800299a:	6423      	str	r3, [r4, #64]	; 0x40
 800299c:	0028      	movs	r0, r5
 800299e:	f7fe f913 	bl	8000bc8 <configuration_is_valid>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d001      	beq.n	80029aa <acc_service_sparse_configuration_create+0x56>
 80029a6:	4b64      	ldr	r3, [pc, #400]	; (8002b38 <acc_service_sparse_configuration_create+0x1e4>)
 80029a8:	6463      	str	r3, [r4, #68]	; 0x44
 80029aa:	0028      	movs	r0, r5
 80029ac:	f7fe f90c 	bl	8000bc8 <configuration_is_valid>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d003      	beq.n	80029bc <acc_service_sparse_configuration_create+0x68>
 80029b4:	0023      	movs	r3, r4
 80029b6:	2206      	movs	r2, #6
 80029b8:	334e      	adds	r3, #78	; 0x4e
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	0028      	movs	r0, r5
 80029be:	f7fe f903 	bl	8000bc8 <configuration_is_valid>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d001      	beq.n	80029ca <acc_service_sparse_configuration_create+0x76>
 80029c6:	2301      	movs	r3, #1
 80029c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80029ca:	0028      	movs	r0, r5
 80029cc:	f7fe f9db 	bl	8000d86 <acc_base_configuration_repetition_mode_on_demand_set>
 80029d0:	0028      	movs	r0, r5
 80029d2:	f7fe f8f9 	bl	8000bc8 <configuration_is_valid>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d001      	beq.n	80029de <acc_service_sparse_configuration_create+0x8a>
 80029da:	2302      	movs	r3, #2
 80029dc:	6563      	str	r3, [r4, #84]	; 0x54
 80029de:	0028      	movs	r0, r5
 80029e0:	f7fe f8f2 	bl	8000bc8 <configuration_is_valid>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d003      	beq.n	80029f0 <acc_service_sparse_configuration_create+0x9c>
 80029e8:	0023      	movs	r3, r4
 80029ea:	2200      	movs	r2, #0
 80029ec:	3348      	adds	r3, #72	; 0x48
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	0028      	movs	r0, r5
 80029f2:	f7fe f8e9 	bl	8000bc8 <configuration_is_valid>
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d003      	beq.n	8002a02 <acc_service_sparse_configuration_create+0xae>
 80029fa:	0023      	movs	r3, r4
 80029fc:	2210      	movs	r2, #16
 80029fe:	337c      	adds	r3, #124	; 0x7c
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	0028      	movs	r0, r5
 8002a04:	f7fe f8e0 	bl	8000bc8 <configuration_is_valid>
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d002      	beq.n	8002a12 <acc_service_sparse_configuration_create+0xbe>
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	1d23      	adds	r3, r4, #4
 8002a10:	67da      	str	r2, [r3, #124]	; 0x7c
 8002a12:	0028      	movs	r0, r5
 8002a14:	f7fe f8d8 	bl	8000bc8 <configuration_is_valid>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	d003      	beq.n	8002a24 <acc_service_sparse_configuration_create+0xd0>
 8002a1c:	0023      	movs	r3, r4
 8002a1e:	2200      	movs	r2, #0
 8002a20:	3362      	adds	r3, #98	; 0x62
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	0028      	movs	r0, r5
 8002a26:	f7fe f8cf 	bl	8000bc8 <configuration_is_valid>
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d003      	beq.n	8002a36 <acc_service_sparse_configuration_create+0xe2>
 8002a2e:	0023      	movs	r3, r4
 8002a30:	2200      	movs	r2, #0
 8002a32:	3363      	adds	r3, #99	; 0x63
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	0028      	movs	r0, r5
 8002a38:	f7fe f8c6 	bl	8000bc8 <configuration_is_valid>
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d003      	beq.n	8002a48 <acc_service_sparse_configuration_create+0xf4>
 8002a40:	0023      	movs	r3, r4
 8002a42:	2200      	movs	r2, #0
 8002a44:	3364      	adds	r3, #100	; 0x64
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	0028      	movs	r0, r5
 8002a4a:	f7fe f8bd 	bl	8000bc8 <configuration_is_valid>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d007      	beq.n	8002a62 <acc_service_sparse_configuration_create+0x10e>
 8002a52:	0023      	movs	r3, r4
 8002a54:	2200      	movs	r2, #0
 8002a56:	336b      	adds	r3, #107	; 0x6b
 8002a58:	705a      	strb	r2, [r3, #1]
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	3240      	adds	r2, #64	; 0x40
 8002a60:	805a      	strh	r2, [r3, #2]
 8002a62:	0028      	movs	r0, r5
 8002a64:	f7fe f8b0 	bl	8000bc8 <configuration_is_valid>
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d003      	beq.n	8002a74 <acc_service_sparse_configuration_create+0x120>
 8002a6c:	0023      	movs	r3, r4
 8002a6e:	22ff      	movs	r2, #255	; 0xff
 8002a70:	3372      	adds	r3, #114	; 0x72
 8002a72:	801a      	strh	r2, [r3, #0]
 8002a74:	0028      	movs	r0, r5
 8002a76:	f7fe f8a7 	bl	8000bc8 <configuration_is_valid>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d003      	beq.n	8002a86 <acc_service_sparse_configuration_create+0x132>
 8002a7e:	0023      	movs	r3, r4
 8002a80:	2200      	movs	r2, #0
 8002a82:	3374      	adds	r3, #116	; 0x74
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	0028      	movs	r0, r5
 8002a88:	f7fe f89e 	bl	8000bc8 <configuration_is_valid>
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d004      	beq.n	8002a9a <acc_service_sparse_configuration_create+0x146>
 8002a90:	0023      	movs	r3, r4
 8002a92:	2200      	movs	r2, #0
 8002a94:	3376      	adds	r3, #118	; 0x76
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	67a2      	str	r2, [r4, #120]	; 0x78
 8002a9a:	0028      	movs	r0, r5
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	f7fe f8bf 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
 8002aa2:	0028      	movs	r0, r5
 8002aa4:	f7fe f890 	bl	8000bc8 <configuration_is_valid>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d003      	beq.n	8002ab4 <acc_service_sparse_configuration_create+0x160>
 8002aac:	0023      	movs	r3, r4
 8002aae:	2201      	movs	r2, #1
 8002ab0:	3386      	adds	r3, #134	; 0x86
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	0028      	movs	r0, r5
 8002ab6:	f7fe f887 	bl	8000bc8 <configuration_is_valid>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d003      	beq.n	8002ac6 <acc_service_sparse_configuration_create+0x172>
 8002abe:	0023      	movs	r3, r4
 8002ac0:	220b      	movs	r2, #11
 8002ac2:	335a      	adds	r3, #90	; 0x5a
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	0028      	movs	r0, r5
 8002ac8:	f7fe f87e 	bl	8000bc8 <configuration_is_valid>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d003      	beq.n	8002ad8 <acc_service_sparse_configuration_create+0x184>
 8002ad0:	0023      	movs	r3, r4
 8002ad2:	220a      	movs	r2, #10
 8002ad4:	3358      	adds	r3, #88	; 0x58
 8002ad6:	801a      	strh	r2, [r3, #0]
 8002ad8:	0028      	movs	r0, r5
 8002ada:	f7fe f875 	bl	8000bc8 <configuration_is_valid>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d003      	beq.n	8002aea <acc_service_sparse_configuration_create+0x196>
 8002ae2:	0023      	movs	r3, r4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	3365      	adds	r3, #101	; 0x65
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	0028      	movs	r0, r5
 8002aec:	f7fe f86c 	bl	8000bc8 <configuration_is_valid>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d003      	beq.n	8002afc <acc_service_sparse_configuration_create+0x1a8>
 8002af4:	0023      	movs	r3, r4
 8002af6:	2201      	movs	r2, #1
 8002af8:	336a      	adds	r3, #106	; 0x6a
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	0028      	movs	r0, r5
 8002afe:	f7fe f863 	bl	8000bc8 <configuration_is_valid>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d004      	beq.n	8002b10 <acc_service_sparse_configuration_create+0x1bc>
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	0023      	movs	r3, r4
 8002b0a:	0152      	lsls	r2, r2, #5
 8002b0c:	3370      	adds	r3, #112	; 0x70
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	0028      	movs	r0, r5
 8002b12:	f7fe f859 	bl	8000bc8 <configuration_is_valid>
 8002b16:	2800      	cmp	r0, #0
 8002b18:	d001      	beq.n	8002b1e <acc_service_sparse_configuration_create+0x1ca>
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <acc_service_sparse_configuration_create+0x1e8>)
 8002b1c:	61e3      	str	r3, [r4, #28]
 8002b1e:	0020      	movs	r0, r4
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	0801c9f7 	.word	0x0801c9f7
 8002b28:	acc09dd7 	.word	0xacc09dd7
 8002b2c:	080012f5 	.word	0x080012f5
 8002b30:	08005529 	.word	0x08005529
 8002b34:	3e4ccccd 	.word	0x3e4ccccd
 8002b38:	3e99999a 	.word	0x3e99999a
 8002b3c:	080028af 	.word	0x080028af

08002b40 <acc_service_create>:
 8002b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b42:	46c6      	mov	lr, r8
 8002b44:	4d30      	ldr	r5, [pc, #192]	; (8002c08 <acc_service_create+0xc8>)
 8002b46:	b500      	push	{lr}
 8002b48:	792c      	ldrb	r4, [r5, #4]
 8002b4a:	0007      	movs	r7, r0
 8002b4c:	2c00      	cmp	r4, #0
 8002b4e:	d04d      	beq.n	8002bec <acc_service_create+0xac>
 8002b50:	f7fe fa86 	bl	8001060 <acc_service_configuration_valid>
 8002b54:	2800      	cmp	r0, #0
 8002b56:	d101      	bne.n	8002b5c <acc_service_create+0x1c>
 8002b58:	2400      	movs	r4, #0
 8002b5a:	e00b      	b.n	8002b74 <acc_service_create+0x34>
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	68de      	ldr	r6, [r3, #12]
 8002b60:	2e2a      	cmp	r6, #42	; 0x2a
 8002b62:	d90b      	bls.n	8002b7c <acc_service_create+0x3c>
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <acc_service_create+0xcc>)
 8002b66:	4a2a      	ldr	r2, [pc, #168]	; (8002c10 <acc_service_create+0xd0>)
 8002b68:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002b6a:	492a      	ldr	r1, [pc, #168]	; (8002c14 <acc_service_create+0xd4>)
 8002b6c:	232a      	movs	r3, #42	; 0x2a
 8002b6e:	2000      	movs	r0, #0
 8002b70:	47a0      	blx	r4
 8002b72:	2400      	movs	r4, #0
 8002b74:	0020      	movs	r0, r4
 8002b76:	bc04      	pop	{r2}
 8002b78:	4690      	mov	r8, r2
 8002b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b7c:	796b      	ldrb	r3, [r5, #5]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <acc_service_create+0x48>
 8002b82:	68ab      	ldr	r3, [r5, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d129      	bne.n	8002bdc <acc_service_create+0x9c>
 8002b88:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <acc_service_create+0xcc>)
 8002b8a:	8b3c      	ldrh	r4, [r7, #24]
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	3230      	adds	r2, #48	; 0x30
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	2a03      	cmp	r2, #3
 8002b94:	d906      	bls.n	8002ba4 <acc_service_create+0x64>
 8002b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b98:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <acc_service_create+0xd8>)
 8002b9a:	4698      	mov	r8, r3
 8002b9c:	491d      	ldr	r1, [pc, #116]	; (8002c14 <acc_service_create+0xd4>)
 8002b9e:	0033      	movs	r3, r6
 8002ba0:	2004      	movs	r0, #4
 8002ba2:	47c0      	blx	r8
 8002ba4:	0020      	movs	r0, r4
 8002ba6:	22bd      	movs	r2, #189	; 0xbd
 8002ba8:	491c      	ldr	r1, [pc, #112]	; (8002c1c <acc_service_create+0xdc>)
 8002baa:	f009 fd1f 	bl	800c5ec <acc_rss_integration_mem_calloc_debug.constprop.65>
 8002bae:	1e04      	subs	r4, r0, #0
 8002bb0:	d0d2      	beq.n	8002b58 <acc_service_create+0x18>
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <acc_service_create+0xe0>)
 8002bb4:	6046      	str	r6, [r0, #4]
 8002bb6:	6003      	str	r3, [r0, #0]
 8002bb8:	68ab      	ldr	r3, [r5, #8]
 8002bba:	0039      	movs	r1, r7
 8002bbc:	6543      	str	r3, [r0, #84]	; 0x54
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	60a8      	str	r0, [r5, #8]
 8002bc2:	4798      	blx	r3
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d10e      	bne.n	8002be6 <acc_service_create+0xa6>
 8002bc8:	68e3      	ldr	r3, [r4, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <acc_service_create+0x92>
 8002bce:	0020      	movs	r0, r4
 8002bd0:	4798      	blx	r3
 8002bd2:	0020      	movs	r0, r4
 8002bd4:	f7fe fc39 	bl	800144a <destroy_handle>
 8002bd8:	2400      	movs	r4, #0
 8002bda:	e7cb      	b.n	8002b74 <acc_service_create+0x34>
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	4296      	cmp	r6, r2
 8002be0:	d00b      	beq.n	8002bfa <acc_service_create+0xba>
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	e7ce      	b.n	8002b84 <acc_service_create+0x44>
 8002be6:	2301      	movs	r3, #1
 8002be8:	7263      	strb	r3, [r4, #9]
 8002bea:	e7c3      	b.n	8002b74 <acc_service_create+0x34>
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <acc_service_create+0xcc>)
 8002bee:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <acc_service_create+0xe4>)
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <acc_service_create+0xd4>)
 8002bf4:	0020      	movs	r0, r4
 8002bf6:	4798      	blx	r3
 8002bf8:	e7bc      	b.n	8002b74 <acc_service_create+0x34>
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <acc_service_create+0xcc>)
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <acc_service_create+0xe8>)
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c00:	4904      	ldr	r1, [pc, #16]	; (8002c14 <acc_service_create+0xd4>)
 8002c02:	2000      	movs	r0, #0
 8002c04:	4798      	blx	r3
 8002c06:	e7a7      	b.n	8002b58 <acc_service_create+0x18>
 8002c08:	2000008c 	.word	0x2000008c
 8002c0c:	200004a8 	.word	0x200004a8
 8002c10:	0801ca18 	.word	0x0801ca18
 8002c14:	0801c795 	.word	0x0801c795
 8002c18:	0801ca31 	.word	0x0801ca31
 8002c1c:	0801ca50 	.word	0x0801ca50
 8002c20:	acc09ee8 	.word	0xacc09ee8
 8002c24:	0801ca72 	.word	0x0801ca72
 8002c28:	0801ca84 	.word	0x0801ca84

08002c2c <acc_service_envelope_configuration_create>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	226d      	movs	r2, #109	; 0x6d
 8002c30:	4972      	ldr	r1, [pc, #456]	; (8002dfc <acc_service_envelope_configuration_create+0x1d0>)
 8002c32:	2090      	movs	r0, #144	; 0x90
 8002c34:	f009 fcda 	bl	800c5ec <acc_rss_integration_mem_calloc_debug.constprop.65>
 8002c38:	1e04      	subs	r4, r0, #0
 8002c3a:	d100      	bne.n	8002c3e <acc_service_envelope_configuration_create+0x12>
 8002c3c:	e0dc      	b.n	8002df8 <acc_service_envelope_configuration_create+0x1cc>
 8002c3e:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <acc_service_envelope_configuration_create+0x1d4>)
 8002c40:	0005      	movs	r5, r0
 8002c42:	6003      	str	r3, [r0, #0]
 8002c44:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <acc_service_envelope_configuration_create+0x1d8>)
 8002c46:	2600      	movs	r6, #0
 8002c48:	6083      	str	r3, [r0, #8]
 8002c4a:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <acc_service_envelope_configuration_create+0x1dc>)
 8002c4c:	351c      	adds	r5, #28
 8002c4e:	6143      	str	r3, [r0, #20]
 8002c50:	2358      	movs	r3, #88	; 0x58
 8002c52:	7106      	strb	r6, [r0, #4]
 8002c54:	8303      	strh	r3, [r0, #24]
 8002c56:	6105      	str	r5, [r0, #16]
 8002c58:	2102      	movs	r1, #2
 8002c5a:	f7fe faa3 	bl	80011a4 <acc_service_profile_set>
 8002c5e:	0020      	movs	r0, r4
 8002c60:	0031      	movs	r1, r6
 8002c62:	f7fe fa8d 	bl	8001180 <acc_service_maximize_signal_attenuation_set>
 8002c66:	0028      	movs	r0, r5
 8002c68:	f7fd ffae 	bl	8000bc8 <configuration_is_valid>
 8002c6c:	42b0      	cmp	r0, r6
 8002c6e:	d001      	beq.n	8002c74 <acc_service_envelope_configuration_create+0x48>
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <acc_service_envelope_configuration_create+0x1e0>)
 8002c72:	6423      	str	r3, [r4, #64]	; 0x40
 8002c74:	0028      	movs	r0, r5
 8002c76:	f7fd ffa7 	bl	8000bc8 <configuration_is_valid>
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d001      	beq.n	8002c82 <acc_service_envelope_configuration_create+0x56>
 8002c7e:	4b64      	ldr	r3, [pc, #400]	; (8002e10 <acc_service_envelope_configuration_create+0x1e4>)
 8002c80:	6463      	str	r3, [r4, #68]	; 0x44
 8002c82:	0028      	movs	r0, r5
 8002c84:	f7fd ffa0 	bl	8000bc8 <configuration_is_valid>
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d003      	beq.n	8002c94 <acc_service_envelope_configuration_create+0x68>
 8002c8c:	0023      	movs	r3, r4
 8002c8e:	2206      	movs	r2, #6
 8002c90:	334e      	adds	r3, #78	; 0x4e
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	0028      	movs	r0, r5
 8002c96:	f7fd ff97 	bl	8000bc8 <configuration_is_valid>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d003      	beq.n	8002ca6 <acc_service_envelope_configuration_create+0x7a>
 8002c9e:	0023      	movs	r3, r4
 8002ca0:	220a      	movs	r2, #10
 8002ca2:	3358      	adds	r3, #88	; 0x58
 8002ca4:	801a      	strh	r2, [r3, #0]
 8002ca6:	0028      	movs	r0, r5
 8002ca8:	f7fd ff8e 	bl	8000bc8 <configuration_is_valid>
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d001      	beq.n	8002cb4 <acc_service_envelope_configuration_create+0x88>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	62a3      	str	r3, [r4, #40]	; 0x28
 8002cb4:	0028      	movs	r0, r5
 8002cb6:	f7fe f866 	bl	8000d86 <acc_base_configuration_repetition_mode_on_demand_set>
 8002cba:	0028      	movs	r0, r5
 8002cbc:	f7fd ff84 	bl	8000bc8 <configuration_is_valid>
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	d001      	beq.n	8002cc8 <acc_service_envelope_configuration_create+0x9c>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	6563      	str	r3, [r4, #84]	; 0x54
 8002cc8:	0028      	movs	r0, r5
 8002cca:	f7fd ff7d 	bl	8000bc8 <configuration_is_valid>
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d003      	beq.n	8002cda <acc_service_envelope_configuration_create+0xae>
 8002cd2:	0023      	movs	r3, r4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	3348      	adds	r3, #72	; 0x48
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	0028      	movs	r0, r5
 8002cdc:	f7fd ff74 	bl	8000bc8 <configuration_is_valid>
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	d003      	beq.n	8002cec <acc_service_envelope_configuration_create+0xc0>
 8002ce4:	0023      	movs	r3, r4
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	3362      	adds	r3, #98	; 0x62
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	0028      	movs	r0, r5
 8002cee:	f7fd ff6b 	bl	8000bc8 <configuration_is_valid>
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d003      	beq.n	8002cfe <acc_service_envelope_configuration_create+0xd2>
 8002cf6:	0023      	movs	r3, r4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	3363      	adds	r3, #99	; 0x63
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	0028      	movs	r0, r5
 8002d00:	f7fd ff62 	bl	8000bc8 <configuration_is_valid>
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d003      	beq.n	8002d10 <acc_service_envelope_configuration_create+0xe4>
 8002d08:	0023      	movs	r3, r4
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	3364      	adds	r3, #100	; 0x64
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	0028      	movs	r0, r5
 8002d12:	f7fd ff59 	bl	8000bc8 <configuration_is_valid>
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d007      	beq.n	8002d2a <acc_service_envelope_configuration_create+0xfe>
 8002d1a:	0023      	movs	r3, r4
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	336b      	adds	r3, #107	; 0x6b
 8002d20:	705a      	strb	r2, [r3, #1]
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	3240      	adds	r2, #64	; 0x40
 8002d28:	805a      	strh	r2, [r3, #2]
 8002d2a:	0028      	movs	r0, r5
 8002d2c:	f7fd ff4c 	bl	8000bc8 <configuration_is_valid>
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d003      	beq.n	8002d3c <acc_service_envelope_configuration_create+0x110>
 8002d34:	0023      	movs	r3, r4
 8002d36:	22ff      	movs	r2, #255	; 0xff
 8002d38:	3372      	adds	r3, #114	; 0x72
 8002d3a:	801a      	strh	r2, [r3, #0]
 8002d3c:	0028      	movs	r0, r5
 8002d3e:	f7fd ff43 	bl	8000bc8 <configuration_is_valid>
 8002d42:	2800      	cmp	r0, #0
 8002d44:	d003      	beq.n	8002d4e <acc_service_envelope_configuration_create+0x122>
 8002d46:	0023      	movs	r3, r4
 8002d48:	2200      	movs	r2, #0
 8002d4a:	3374      	adds	r3, #116	; 0x74
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	0028      	movs	r0, r5
 8002d50:	f7fd ff3a 	bl	8000bc8 <configuration_is_valid>
 8002d54:	2800      	cmp	r0, #0
 8002d56:	d004      	beq.n	8002d62 <acc_service_envelope_configuration_create+0x136>
 8002d58:	0023      	movs	r3, r4
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	3376      	adds	r3, #118	; 0x76
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	67a2      	str	r2, [r4, #120]	; 0x78
 8002d62:	0028      	movs	r0, r5
 8002d64:	2101      	movs	r1, #1
 8002d66:	f7fd ff5b 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
 8002d6a:	0028      	movs	r0, r5
 8002d6c:	f7fd ff2c 	bl	8000bc8 <configuration_is_valid>
 8002d70:	2800      	cmp	r0, #0
 8002d72:	d003      	beq.n	8002d7c <acc_service_envelope_configuration_create+0x150>
 8002d74:	0023      	movs	r3, r4
 8002d76:	220b      	movs	r2, #11
 8002d78:	335a      	adds	r3, #90	; 0x5a
 8002d7a:	801a      	strh	r2, [r3, #0]
 8002d7c:	0028      	movs	r0, r5
 8002d7e:	f7fd ff23 	bl	8000bc8 <configuration_is_valid>
 8002d82:	2800      	cmp	r0, #0
 8002d84:	d003      	beq.n	8002d8e <acc_service_envelope_configuration_create+0x162>
 8002d86:	0023      	movs	r3, r4
 8002d88:	2201      	movs	r2, #1
 8002d8a:	3365      	adds	r3, #101	; 0x65
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	0028      	movs	r0, r5
 8002d90:	f7fd ff1a 	bl	8000bc8 <configuration_is_valid>
 8002d94:	2800      	cmp	r0, #0
 8002d96:	d001      	beq.n	8002d9c <acc_service_envelope_configuration_create+0x170>
 8002d98:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <acc_service_envelope_configuration_create+0x1e8>)
 8002d9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d9c:	0028      	movs	r0, r5
 8002d9e:	f7fd ff13 	bl	8000bc8 <configuration_is_valid>
 8002da2:	2800      	cmp	r0, #0
 8002da4:	d005      	beq.n	8002db2 <acc_service_envelope_configuration_create+0x186>
 8002da6:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <acc_service_envelope_configuration_create+0x1ec>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	6323      	str	r3, [r4, #48]	; 0x30
 8002dac:	0023      	movs	r3, r4
 8002dae:	3334      	adds	r3, #52	; 0x34
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	0028      	movs	r0, r5
 8002db4:	f7fd ff08 	bl	8000bc8 <configuration_is_valid>
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d003      	beq.n	8002dc4 <acc_service_envelope_configuration_create+0x198>
 8002dbc:	0023      	movs	r3, r4
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	3338      	adds	r3, #56	; 0x38
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	0028      	movs	r0, r5
 8002dc6:	f7fd feff 	bl	8000bc8 <configuration_is_valid>
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d003      	beq.n	8002dd6 <acc_service_envelope_configuration_create+0x1aa>
 8002dce:	0023      	movs	r3, r4
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	336a      	adds	r3, #106	; 0x6a
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	f7fd fef6 	bl	8000bc8 <configuration_is_valid>
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	d004      	beq.n	8002dea <acc_service_envelope_configuration_create+0x1be>
 8002de0:	2296      	movs	r2, #150	; 0x96
 8002de2:	0023      	movs	r3, r4
 8002de4:	0152      	lsls	r2, r2, #5
 8002de6:	3370      	adds	r3, #112	; 0x70
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	0028      	movs	r0, r5
 8002dec:	f7fd feec 	bl	8000bc8 <configuration_is_valid>
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d001      	beq.n	8002df8 <acc_service_envelope_configuration_create+0x1cc>
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <acc_service_envelope_configuration_create+0x1f0>)
 8002df6:	61e3      	str	r3, [r4, #28]
 8002df8:	0020      	movs	r0, r4
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	0801caab 	.word	0x0801caab
 8002e00:	acc09dd7 	.word	0xacc09dd7
 8002e04:	080014f9 	.word	0x080014f9
 8002e08:	0800578d 	.word	0x0800578d
 8002e0c:	3e4ccccd 	.word	0x3e4ccccd
 8002e10:	3ecccccd 	.word	0x3ecccccd
 8002e14:	3dcccccd 	.word	0x3dcccccd
 8002e18:	3e99999a 	.word	0x3e99999a
 8002e1c:	08002901 	.word	0x08002901

08002e20 <transfer_data.lto_priv.156>:
 8002e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e22:	4657      	mov	r7, sl
 8002e24:	464e      	mov	r6, r9
 8002e26:	46de      	mov	lr, fp
 8002e28:	4645      	mov	r5, r8
 8002e2a:	6944      	ldr	r4, [r0, #20]
 8002e2c:	b5e0      	push	{r5, r6, r7, lr}
 8002e2e:	0023      	movs	r3, r4
 8002e30:	0027      	movs	r7, r4
 8002e32:	b08d      	sub	sp, #52	; 0x34
 8002e34:	9204      	str	r2, [sp, #16]
 8002e36:	33c2      	adds	r3, #194	; 0xc2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	0006      	movs	r6, r0
 8002e3c:	468a      	mov	sl, r1
 8002e3e:	37c6      	adds	r7, #198	; 0xc6
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d100      	bne.n	8002e46 <transfer_data.lto_priv.156+0x26>
 8002e44:	803b      	strh	r3, [r7, #0]
 8002e46:	23cc      	movs	r3, #204	; 0xcc
 8002e48:	469b      	mov	fp, r3
 8002e4a:	44a3      	add	fp, r4
 8002e4c:	465b      	mov	r3, fp
 8002e4e:	207c      	movs	r0, #124	; 0x7c
 8002e50:	8819      	ldrh	r1, [r3, #0]
 8002e52:	f00d fe4b 	bl	8010aec <__udivsi3>
 8002e56:	23c8      	movs	r3, #200	; 0xc8
 8002e58:	4699      	mov	r9, r3
 8002e5a:	44a1      	add	r9, r4
 8002e5c:	464b      	mov	r3, r9
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	a906      	add	r1, sp, #24
 8002e62:	b29d      	uxth	r5, r3
 8002e64:	0023      	movs	r3, r4
 8002e66:	4345      	muls	r5, r0
 8002e68:	33ce      	adds	r3, #206	; 0xce
 8002e6a:	8818      	ldrh	r0, [r3, #0]
 8002e6c:	182d      	adds	r5, r5, r0
 8002e6e:	0020      	movs	r0, r4
 8002e70:	f00d f848 	bl	800ff04 <acc_cpd_linear_sweep_get_info>
 8002e74:	9b06      	ldr	r3, [sp, #24]
 8002e76:	8839      	ldrh	r1, [r7, #0]
 8002e78:	18ea      	adds	r2, r5, r3
 8002e7a:	4653      	mov	r3, sl
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6830      	ldr	r0, [r6, #0]
 8002e80:	469c      	mov	ip, r3
 8002e82:	4461      	add	r1, ip
 8002e84:	f7fe fff8 	bl	8001e78 <acc_sensor_protocol_r2_transfer_data>
 8002e88:	0023      	movs	r3, r4
 8002e8a:	33ad      	adds	r3, #173	; 0xad
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	0006      	movs	r6, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d129      	bne.n	8002ee8 <transfer_data.lto_priv.156+0xc8>
 8002e94:	2300      	movs	r3, #0
 8002e96:	9a04      	ldr	r2, [sp, #16]
 8002e98:	a906      	add	r1, sp, #24
 8002e9a:	7013      	strb	r3, [r2, #0]
 8002e9c:	0020      	movs	r0, r4
 8002e9e:	0027      	movs	r7, r4
 8002ea0:	f00d f830 	bl	800ff04 <acc_cpd_linear_sweep_get_info>
 8002ea4:	4650      	mov	r0, sl
 8002ea6:	9b06      	ldr	r3, [sp, #24]
 8002ea8:	37c6      	adds	r7, #198	; 0xc6
 8002eaa:	0059      	lsls	r1, r3, #1
 8002eac:	6800      	ldr	r0, [r0, #0]
 8002eae:	883b      	ldrh	r3, [r7, #0]
 8002eb0:	006a      	lsls	r2, r5, #1
 8002eb2:	1871      	adds	r1, r6, r1
 8002eb4:	18c0      	adds	r0, r0, r3
 8002eb6:	f012 ffd6 	bl	8015e66 <memmove>
 8002eba:	464b      	mov	r3, r9
 8002ebc:	883e      	ldrh	r6, [r7, #0]
 8002ebe:	34c4      	adds	r4, #196	; 0xc4
 8002ec0:	8026      	strh	r6, [r4, #0]
 8002ec2:	681c      	ldr	r4, [r3, #0]
 8002ec4:	465b      	mov	r3, fp
 8002ec6:	207c      	movs	r0, #124	; 0x7c
 8002ec8:	8819      	ldrh	r1, [r3, #0]
 8002eca:	f00d fe0f 	bl	8010aec <__udivsi3>
 8002ece:	b2a4      	uxth	r4, r4
 8002ed0:	0064      	lsls	r4, r4, #1
 8002ed2:	4344      	muls	r4, r0
 8002ed4:	0028      	movs	r0, r5
 8002ed6:	1936      	adds	r6, r6, r4
 8002ed8:	803e      	strh	r6, [r7, #0]
 8002eda:	b00d      	add	sp, #52	; 0x34
 8002edc:	bc3c      	pop	{r2, r3, r4, r5}
 8002ede:	4690      	mov	r8, r2
 8002ee0:	4699      	mov	r9, r3
 8002ee2:	46a2      	mov	sl, r4
 8002ee4:	46ab      	mov	fp, r5
 8002ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee8:	0027      	movs	r7, r4
 8002eea:	221f      	movs	r2, #31
 8002eec:	37bc      	adds	r7, #188	; 0xbc
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	4a3f      	ldr	r2, [pc, #252]	; (8002ff4 <transfer_data.lto_priv.156+0x1d4>)
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	0011      	movs	r1, r2
 8002efa:	3130      	adds	r1, #48	; 0x30
 8002efc:	7809      	ldrb	r1, [r1, #0]
 8002efe:	2903      	cmp	r1, #3
 8002f00:	d905      	bls.n	8002f0e <transfer_data.lto_priv.156+0xee>
 8002f02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f04:	493c      	ldr	r1, [pc, #240]	; (8002ff8 <transfer_data.lto_priv.156+0x1d8>)
 8002f06:	4690      	mov	r8, r2
 8002f08:	2004      	movs	r0, #4
 8002f0a:	4a3c      	ldr	r2, [pc, #240]	; (8002ffc <transfer_data.lto_priv.156+0x1dc>)
 8002f0c:	47c0      	blx	r8
 8002f0e:	6a23      	ldr	r3, [r4, #32]
 8002f10:	4a3b      	ldr	r2, [pc, #236]	; (8003000 <transfer_data.lto_priv.156+0x1e0>)
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	3278      	adds	r2, #120	; 0x78
 8002f18:	5e98      	ldrsh	r0, [r3, r2]
 8002f1a:	f00e f9e9 	bl	80112f0 <__aeabi_i2f>
 8002f1e:	4680      	mov	r8, r0
 8002f20:	8830      	ldrh	r0, [r6, #0]
 8002f22:	f00e fa2f 	bl	8011384 <__aeabi_ui2f>
 8002f26:	21de      	movs	r1, #222	; 0xde
 8002f28:	0589      	lsls	r1, r1, #22
 8002f2a:	f00d faad 	bl	8010488 <__aeabi_fmul>
 8002f2e:	21fc      	movs	r1, #252	; 0xfc
 8002f30:	0589      	lsls	r1, r1, #22
 8002f32:	f00d fbdb 	bl	80106ec <__aeabi_fsub>
 8002f36:	4933      	ldr	r1, [pc, #204]	; (8003004 <transfer_data.lto_priv.156+0x1e4>)
 8002f38:	f00d faa6 	bl	8010488 <__aeabi_fmul>
 8002f3c:	4932      	ldr	r1, [pc, #200]	; (8003008 <transfer_data.lto_priv.156+0x1e8>)
 8002f3e:	f00d faa3 	bl	8010488 <__aeabi_fmul>
 8002f42:	1c01      	adds	r1, r0, #0
 8002f44:	4640      	mov	r0, r8
 8002f46:	f00d fbd1 	bl	80106ec <__aeabi_fsub>
 8002f4a:	f00e f9b1 	bl	80112b0 <__aeabi_f2iz>
 8002f4e:	4a2f      	ldr	r2, [pc, #188]	; (800300c <transfer_data.lto_priv.156+0x1ec>)
 8002f50:	b203      	sxth	r3, r0
 8002f52:	4698      	mov	r8, r3
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	189a      	adds	r2, r3, r2
 8002f58:	492d      	ldr	r1, [pc, #180]	; (8003010 <transfer_data.lto_priv.156+0x1f0>)
 8002f5a:	b292      	uxth	r2, r2
 8002f5c:	428a      	cmp	r2, r1
 8002f5e:	d82a      	bhi.n	8002fb6 <transfer_data.lto_priv.156+0x196>
 8002f60:	2126      	movs	r1, #38	; 0x26
 8002f62:	5e62      	ldrsh	r2, [r4, r1]
 8002f64:	8870      	ldrh	r0, [r6, #2]
 8002f66:	9203      	str	r2, [sp, #12]
 8002f68:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <transfer_data.lto_priv.156+0x1f4>)
 8002f6a:	4694      	mov	ip, r2
 8002f6c:	22e6      	movs	r2, #230	; 0xe6
 8002f6e:	4463      	add	r3, ip
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	0052      	lsls	r2, r2, #1
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d922      	bls.n	8002fbe <transfer_data.lto_priv.156+0x19e>
 8002f78:	f00e fa04 	bl	8011384 <__aeabi_ui2f>
 8002f7c:	21de      	movs	r1, #222	; 0xde
 8002f7e:	0589      	lsls	r1, r1, #22
 8002f80:	f00d fa82 	bl	8010488 <__aeabi_fmul>
 8002f84:	21fc      	movs	r1, #252	; 0xfc
 8002f86:	0589      	lsls	r1, r1, #22
 8002f88:	f00d fbb0 	bl	80106ec <__aeabi_fsub>
 8002f8c:	491d      	ldr	r1, [pc, #116]	; (8003004 <transfer_data.lto_priv.156+0x1e4>)
 8002f8e:	f00d fa7b 	bl	8010488 <__aeabi_fmul>
 8002f92:	491d      	ldr	r1, [pc, #116]	; (8003008 <transfer_data.lto_priv.156+0x1e8>)
 8002f94:	f00d fa78 	bl	8010488 <__aeabi_fmul>
 8002f98:	9005      	str	r0, [sp, #20]
 8002f9a:	4640      	mov	r0, r8
 8002f9c:	f00e f9a8 	bl	80112f0 <__aeabi_i2f>
 8002fa0:	1c01      	adds	r1, r0, #0
 8002fa2:	9805      	ldr	r0, [sp, #20]
 8002fa4:	f00c ffc4 	bl	800ff30 <__aeabi_fadd>
 8002fa8:	f00e f982 	bl	80112b0 <__aeabi_f2iz>
 8002fac:	9b03      	ldr	r3, [sp, #12]
 8002fae:	b200      	sxth	r0, r0
 8002fb0:	3364      	adds	r3, #100	; 0x64
 8002fb2:	4298      	cmp	r0, r3
 8002fb4:	dd03      	ble.n	8002fbe <transfer_data.lto_priv.156+0x19e>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	2a00      	cmp	r2, #0
 8002fc4:	d111      	bne.n	8002fea <transfer_data.lto_priv.156+0x1ca>
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d800      	bhi.n	8002fcc <transfer_data.lto_priv.156+0x1ac>
 8002fca:	e763      	b.n	8002e94 <transfer_data.lto_priv.156+0x74>
 8002fcc:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <transfer_data.lto_priv.156+0x1d4>)
 8002fce:	0011      	movs	r1, r2
 8002fd0:	3130      	adds	r1, #48	; 0x30
 8002fd2:	7809      	ldrb	r1, [r1, #0]
 8002fd4:	2900      	cmp	r1, #0
 8002fd6:	d006      	beq.n	8002fe6 <transfer_data.lto_priv.156+0x1c6>
 8002fd8:	2105      	movs	r1, #5
 8002fda:	9100      	str	r1, [sp, #0]
 8002fdc:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8002fde:	4906      	ldr	r1, [pc, #24]	; (8002ff8 <transfer_data.lto_priv.156+0x1d8>)
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <transfer_data.lto_priv.156+0x1f8>)
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	47b8      	blx	r7
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e755      	b.n	8002e96 <transfer_data.lto_priv.156+0x76>
 8002fea:	1e51      	subs	r1, r2, #1
 8002fec:	400a      	ands	r2, r1
 8002fee:	3301      	adds	r3, #1
 8002ff0:	e7e7      	b.n	8002fc2 <transfer_data.lto_priv.156+0x1a2>
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	200004a8 	.word	0x200004a8
 8002ff8:	0801cae5 	.word	0x0801cae5
 8002ffc:	0801cace 	.word	0x0801cace
 8003000:	08015f28 	.word	0x08015f28
 8003004:	3f99999a 	.word	0x3f99999a
 8003008:	447a0000 	.word	0x447a0000
 800300c:	fffffd12 	.word	0xfffffd12
 8003010:	00000217 	.word	0x00000217
 8003014:	fffffcf4 	.word	0xfffffcf4
 8003018:	0801caf6 	.word	0x0801caf6

0800301c <acc_service_sparse_get_next_by_reference>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	0005      	movs	r5, r0
 8003020:	2000      	movs	r0, #0
 8003022:	b088      	sub	sp, #32
 8003024:	4281      	cmp	r1, r0
 8003026:	d00f      	beq.n	8003048 <acc_service_sparse_get_next_by_reference+0x2c>
 8003028:	2403      	movs	r4, #3
 800302a:	ab01      	add	r3, sp, #4
 800302c:	680e      	ldr	r6, [r1, #0]
 800302e:	9103      	str	r1, [sp, #12]
 8003030:	9004      	str	r0, [sp, #16]
 8003032:	7618      	strb	r0, [r3, #24]
 8003034:	7658      	strb	r0, [r3, #25]
 8003036:	7698      	strb	r0, [r3, #26]
 8003038:	0019      	movs	r1, r3
 800303a:	0028      	movs	r0, r5
 800303c:	701c      	strb	r4, [r3, #0]
 800303e:	9602      	str	r6, [sp, #8]
 8003040:	9205      	str	r2, [sp, #20]
 8003042:	9406      	str	r4, [sp, #24]
 8003044:	f009 fa6c 	bl	800c520 <acc_service_get_next.constprop.66>
 8003048:	b008      	add	sp, #32
 800304a:	bd70      	pop	{r4, r5, r6, pc}

0800304c <acc_service_envelope_get_next_by_reference>:
 800304c:	b530      	push	{r4, r5, lr}
 800304e:	0004      	movs	r4, r0
 8003050:	2000      	movs	r0, #0
 8003052:	b089      	sub	sp, #36	; 0x24
 8003054:	4281      	cmp	r1, r0
 8003056:	d00f      	beq.n	8003078 <acc_service_envelope_get_next_by_reference+0x2c>
 8003058:	9205      	str	r2, [sp, #20]
 800305a:	2204      	movs	r2, #4
 800305c:	ab01      	add	r3, sp, #4
 800305e:	680d      	ldr	r5, [r1, #0]
 8003060:	7018      	strb	r0, [r3, #0]
 8003062:	9103      	str	r1, [sp, #12]
 8003064:	9004      	str	r0, [sp, #16]
 8003066:	7618      	strb	r0, [r3, #24]
 8003068:	7658      	strb	r0, [r3, #25]
 800306a:	7698      	strb	r0, [r3, #26]
 800306c:	0019      	movs	r1, r3
 800306e:	0020      	movs	r0, r4
 8003070:	9502      	str	r5, [sp, #8]
 8003072:	9206      	str	r2, [sp, #24]
 8003074:	f009 fa54 	bl	800c520 <acc_service_get_next.constprop.66>
 8003078:	b009      	add	sp, #36	; 0x24
 800307a:	bd30      	pop	{r4, r5, pc}

0800307c <convolve1d>:
int8_t convolve1d(uint16_t indx, uint8_t dir){
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	b083      	sub	sp, #12
 8003080:	0004      	movs	r4, r0
 8003082:	9001      	str	r0, [sp, #4]
 8003084:	000d      	movs	r5, r1
	stackSet();
 8003086:	f7fe fc77 	bl	8001978 <stackSet>
	if(dir == 0){	
 800308a:	2d00      	cmp	r5, #0
 800308c:	d148      	bne.n	8003120 <convolve1d+0xa4>
		if(indx >= _bins){
 800308e:	4a48      	ldr	r2, [pc, #288]	; (80031b0 <convolve1d+0x134>)
 8003090:	2331      	movs	r3, #49	; 0x31
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	42a3      	cmp	r3, r4
 8003096:	d901      	bls.n	800309c <convolve1d+0x20>
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 8003098:	2400      	movs	r4, #0
 800309a:	e034      	b.n	8003106 <convolve1d+0x8a>
			ERR_PRINTLN("bin count too great to convolve");
 800309c:	4845      	ldr	r0, [pc, #276]	; (80031b4 <convolve1d+0x138>)
 800309e:	f012 fb09 	bl	80156b4 <__wrap_printf>
 80030a2:	4845      	ldr	r0, [pc, #276]	; (80031b8 <convolve1d+0x13c>)
 80030a4:	f012 fb06 	bl	80156b4 <__wrap_printf>
 80030a8:	228c      	movs	r2, #140	; 0x8c
 80030aa:	4944      	ldr	r1, [pc, #272]	; (80031bc <convolve1d+0x140>)
 80030ac:	4844      	ldr	r0, [pc, #272]	; (80031c0 <convolve1d+0x144>)
 80030ae:	f012 fb01 	bl	80156b4 <__wrap_printf>
			return 0;
 80030b2:	2000      	movs	r0, #0
 80030b4:	e032      	b.n	800311c <convolve1d+0xa0>
				sum += kernel[j]*getdata(i-j+cent, indx);
 80030b6:	00b2      	lsls	r2, r6, #2
 80030b8:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <convolve1d+0x148>)
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 80030be:	1ba0      	subs	r0, r4, r6
 80030c0:	3004      	adds	r0, #4
 80030c2:	466b      	mov	r3, sp
 80030c4:	2104      	movs	r1, #4
 80030c6:	5e59      	ldrsh	r1, [r3, r1]
 80030c8:	b200      	sxth	r0, r0
 80030ca:	f7fe fc79 	bl	80019c0 <getdata>
 80030ce:	f00e f90f 	bl	80112f0 <__aeabi_i2f>
 80030d2:	1c39      	adds	r1, r7, #0
 80030d4:	f00d f9d8 	bl	8010488 <__aeabi_fmul>
 80030d8:	1c01      	adds	r1, r0, #0
 80030da:	1c28      	adds	r0, r5, #0
 80030dc:	f00c ff28 	bl	800ff30 <__aeabi_fadd>
 80030e0:	1c05      	adds	r5, r0, #0
			for(int j = 0; j < CONVKER; j++){
 80030e2:	3601      	adds	r6, #1
 80030e4:	2e08      	cmp	r6, #8
 80030e6:	dde6      	ble.n	80030b6 <convolve1d+0x3a>
			pop = stackPush(sum);
 80030e8:	1c28      	adds	r0, r5, #0
 80030ea:	f7fe fc2f 	bl	800194c <stackPush>
			setdata(i-cent, indx, pop);
 80030ee:	1f25      	subs	r5, r4, #4
 80030f0:	b2ad      	uxth	r5, r5
 80030f2:	f00d ff09 	bl	8010f08 <__aeabi_f2uiz>
 80030f6:	b282      	uxth	r2, r0
 80030f8:	466b      	mov	r3, sp
 80030fa:	2104      	movs	r1, #4
 80030fc:	5e59      	ldrsh	r1, [r3, r1]
 80030fe:	b228      	sxth	r0, r5
 8003100:	f7fe fc48 	bl	8001994 <setdata>
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 8003104:	3401      	adds	r4, #1
 8003106:	4a2a      	ldr	r2, [pc, #168]	; (80031b0 <convolve1d+0x134>)
 8003108:	2330      	movs	r3, #48	; 0x30
 800310a:	5cd3      	ldrb	r3, [r2, r3]
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	3307      	adds	r3, #7
 8003110:	42a3      	cmp	r3, r4
 8003112:	dd02      	ble.n	800311a <convolve1d+0x9e>
			for(int j = 0; j < CONVKER; j++){
 8003114:	2600      	movs	r6, #0
			float sum = 0.0f;
 8003116:	2500      	movs	r5, #0
 8003118:	e7e4      	b.n	80030e4 <convolve1d+0x68>
	return 1;
 800311a:	2001      	movs	r0, #1
}
 800311c:	b003      	add	sp, #12
 800311e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(indx >= _sweeps){
 8003120:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <convolve1d+0x134>)
 8003122:	2330      	movs	r3, #48	; 0x30
 8003124:	5cd3      	ldrb	r3, [r2, r3]
 8003126:	9a01      	ldr	r2, [sp, #4]
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <convolve1d+0xb4>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 800312c:	2400      	movs	r4, #0
 800312e:	e034      	b.n	800319a <convolve1d+0x11e>
			ERR_PRINTLN("sweep count too great to convolve");
 8003130:	4820      	ldr	r0, [pc, #128]	; (80031b4 <convolve1d+0x138>)
 8003132:	f012 fabf 	bl	80156b4 <__wrap_printf>
 8003136:	4824      	ldr	r0, [pc, #144]	; (80031c8 <convolve1d+0x14c>)
 8003138:	f012 fabc 	bl	80156b4 <__wrap_printf>
 800313c:	229d      	movs	r2, #157	; 0x9d
 800313e:	491f      	ldr	r1, [pc, #124]	; (80031bc <convolve1d+0x140>)
 8003140:	481f      	ldr	r0, [pc, #124]	; (80031c0 <convolve1d+0x144>)
 8003142:	f012 fab7 	bl	80156b4 <__wrap_printf>
			return 0;
 8003146:	2000      	movs	r0, #0
 8003148:	e7e8      	b.n	800311c <convolve1d+0xa0>
				sum += kernel[j]*getdata(indx, i-j+cent);
 800314a:	00b2      	lsls	r2, r6, #2
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <convolve1d+0x148>)
 800314e:	189b      	adds	r3, r3, r2
 8003150:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8003152:	1ba1      	subs	r1, r4, r6
 8003154:	3104      	adds	r1, #4
 8003156:	b209      	sxth	r1, r1
 8003158:	466b      	mov	r3, sp
 800315a:	2004      	movs	r0, #4
 800315c:	5e18      	ldrsh	r0, [r3, r0]
 800315e:	f7fe fc2f 	bl	80019c0 <getdata>
 8003162:	f00e f8c5 	bl	80112f0 <__aeabi_i2f>
 8003166:	1c39      	adds	r1, r7, #0
 8003168:	f00d f98e 	bl	8010488 <__aeabi_fmul>
 800316c:	1c01      	adds	r1, r0, #0
 800316e:	1c28      	adds	r0, r5, #0
 8003170:	f00c fede 	bl	800ff30 <__aeabi_fadd>
 8003174:	1c05      	adds	r5, r0, #0
			for(int j = 0; j < CONVKER; j++){
 8003176:	3601      	adds	r6, #1
 8003178:	2e08      	cmp	r6, #8
 800317a:	dde6      	ble.n	800314a <convolve1d+0xce>
			pop = stackPush(sum);
 800317c:	1c28      	adds	r0, r5, #0
 800317e:	f7fe fbe5 	bl	800194c <stackPush>
			setdata(indx, i-cent, pop);
 8003182:	1f25      	subs	r5, r4, #4
 8003184:	b2ad      	uxth	r5, r5
 8003186:	f00d febf 	bl	8010f08 <__aeabi_f2uiz>
 800318a:	b282      	uxth	r2, r0
 800318c:	b229      	sxth	r1, r5
 800318e:	466b      	mov	r3, sp
 8003190:	2004      	movs	r0, #4
 8003192:	5e18      	ldrsh	r0, [r3, r0]
 8003194:	f7fe fbfe 	bl	8001994 <setdata>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8003198:	3401      	adds	r4, #1
 800319a:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <convolve1d+0x134>)
 800319c:	2331      	movs	r3, #49	; 0x31
 800319e:	5cd3      	ldrb	r3, [r2, r3]
 80031a0:	3307      	adds	r3, #7
 80031a2:	42a3      	cmp	r3, r4
 80031a4:	dd02      	ble.n	80031ac <convolve1d+0x130>
			for(int j = 0; j < CONVKER; j++){
 80031a6:	2600      	movs	r6, #0
			float sum = 0.0f;
 80031a8:	2500      	movs	r5, #0
 80031aa:	e7e5      	b.n	8003178 <convolve1d+0xfc>
	return 1;
 80031ac:	2001      	movs	r0, #1
 80031ae:	e7b5      	b.n	800311c <convolve1d+0xa0>
 80031b0:	2000008c 	.word	0x2000008c
 80031b4:	0801dd10 	.word	0x0801dd10
 80031b8:	0801dd18 	.word	0x0801dd18
 80031bc:	0801dd38 	.word	0x0801dd38
 80031c0:	0801dd48 	.word	0x0801dd48
 80031c4:	2000018c 	.word	0x2000018c
 80031c8:	0801dd54 	.word	0x0801dd54

080031cc <print_sparse_results>:
	
}



void print_sparse_results(void){
 80031cc:	b570      	push	{r4, r5, r6, lr}
		INF_PRINTLN("RESULTS");
 80031ce:	4e26      	ldr	r6, [pc, #152]	; (8003268 <print_sparse_results+0x9c>)
 80031d0:	0030      	movs	r0, r6
 80031d2:	f012 fa6f 	bl	80156b4 <__wrap_printf>
 80031d6:	4825      	ldr	r0, [pc, #148]	; (800326c <print_sparse_results+0xa0>)
 80031d8:	f012 fa6c 	bl	80156b4 <__wrap_printf>
 80031dc:	4d24      	ldr	r5, [pc, #144]	; (8003270 <print_sparse_results+0xa4>)
 80031de:	4c25      	ldr	r4, [pc, #148]	; (8003274 <print_sparse_results+0xa8>)
 80031e0:	4a25      	ldr	r2, [pc, #148]	; (8003278 <print_sparse_results+0xac>)
 80031e2:	0029      	movs	r1, r5
 80031e4:	0020      	movs	r0, r4
 80031e6:	f012 fa65 	bl	80156b4 <__wrap_printf>
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
 80031ea:	0030      	movs	r0, r6
 80031ec:	f012 fa62 	bl	80156b4 <__wrap_printf>
 80031f0:	20d0      	movs	r0, #208	; 0xd0
 80031f2:	f7fe fd51 	bl	8001c98 <RegInt_getreg>
 80031f6:	0001      	movs	r1, r0
 80031f8:	4820      	ldr	r0, [pc, #128]	; (800327c <print_sparse_results+0xb0>)
 80031fa:	f012 fa5b 	bl	80156b4 <__wrap_printf>
 80031fe:	4a20      	ldr	r2, [pc, #128]	; (8003280 <print_sparse_results+0xb4>)
 8003200:	0029      	movs	r1, r5
 8003202:	0020      	movs	r0, r4
 8003204:	f012 fa56 	bl	80156b4 <__wrap_printf>
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
 8003208:	0030      	movs	r0, r6
 800320a:	f012 fa53 	bl	80156b4 <__wrap_printf>
 800320e:	20d1      	movs	r0, #209	; 0xd1
 8003210:	f7fe fd42 	bl	8001c98 <RegInt_getreg>
 8003214:	0001      	movs	r1, r0
 8003216:	481b      	ldr	r0, [pc, #108]	; (8003284 <print_sparse_results+0xb8>)
 8003218:	f012 fa4c 	bl	80156b4 <__wrap_printf>
 800321c:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <print_sparse_results+0xbc>)
 800321e:	0029      	movs	r1, r5
 8003220:	0020      	movs	r0, r4
 8003222:	f012 fa47 	bl	80156b4 <__wrap_printf>
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
 8003226:	0030      	movs	r0, r6
 8003228:	f012 fa44 	bl	80156b4 <__wrap_printf>
 800322c:	20d2      	movs	r0, #210	; 0xd2
 800322e:	f7fe fd33 	bl	8001c98 <RegInt_getreg>
 8003232:	0001      	movs	r1, r0
 8003234:	4815      	ldr	r0, [pc, #84]	; (800328c <print_sparse_results+0xc0>)
 8003236:	f012 fa3d 	bl	80156b4 <__wrap_printf>
 800323a:	22e5      	movs	r2, #229	; 0xe5
 800323c:	0092      	lsls	r2, r2, #2
 800323e:	0029      	movs	r1, r5
 8003240:	0020      	movs	r0, r4
 8003242:	f012 fa37 	bl	80156b4 <__wrap_printf>
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 8003246:	0030      	movs	r0, r6
 8003248:	f012 fa34 	bl	80156b4 <__wrap_printf>
 800324c:	20d3      	movs	r0, #211	; 0xd3
 800324e:	f7fe fd23 	bl	8001c98 <RegInt_getreg>
 8003252:	0001      	movs	r1, r0
 8003254:	480e      	ldr	r0, [pc, #56]	; (8003290 <print_sparse_results+0xc4>)
 8003256:	f012 fa2d 	bl	80156b4 <__wrap_printf>
 800325a:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <print_sparse_results+0xc8>)
 800325c:	0029      	movs	r1, r5
 800325e:	0020      	movs	r0, r4
 8003260:	f012 fa28 	bl	80156b4 <__wrap_printf>
}
 8003264:	bd70      	pop	{r4, r5, r6, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	0801dd78 	.word	0x0801dd78
 800326c:	0801dd80 	.word	0x0801dd80
 8003270:	0801dd88 	.word	0x0801dd88
 8003274:	0801dd48 	.word	0x0801dd48
 8003278:	00000391 	.word	0x00000391
 800327c:	0801dd9c 	.word	0x0801dd9c
 8003280:	00000392 	.word	0x00000392
 8003284:	0801ddb0 	.word	0x0801ddb0
 8003288:	00000393 	.word	0x00000393
 800328c:	0801ddc4 	.word	0x0801ddc4
 8003290:	0801ddd8 	.word	0x0801ddd8
 8003294:	00000395 	.word	0x00000395

08003298 <printf_envelope_metadata>:
void printf_envelope_metadata(acc_service_envelope_metadata_t metadata){
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	9000      	str	r0, [sp, #0]
 800329e:	9101      	str	r1, [sp, #4]
 80032a0:	9202      	str	r2, [sp, #8]
 80032a2:	9303      	str	r3, [sp, #12]
    INF_PRINTLN("Envelope Serivce Metadata");
 80032a4:	4e30      	ldr	r6, [pc, #192]	; (8003368 <printf_envelope_metadata+0xd0>)
 80032a6:	0030      	movs	r0, r6
 80032a8:	f012 fa04 	bl	80156b4 <__wrap_printf>
 80032ac:	482f      	ldr	r0, [pc, #188]	; (800336c <printf_envelope_metadata+0xd4>)
 80032ae:	f012 fa01 	bl	80156b4 <__wrap_printf>
 80032b2:	22c2      	movs	r2, #194	; 0xc2
 80032b4:	4d2e      	ldr	r5, [pc, #184]	; (8003370 <printf_envelope_metadata+0xd8>)
 80032b6:	4c2f      	ldr	r4, [pc, #188]	; (8003374 <printf_envelope_metadata+0xdc>)
 80032b8:	0092      	lsls	r2, r2, #2
 80032ba:	0029      	movs	r1, r5
 80032bc:	0020      	movs	r0, r4
 80032be:	f012 f9f9 	bl	80156b4 <__wrap_printf>
	INF_PRINTLN("Start: %ld mm", (int32_t)(metadata.start_m * 1000.0f));
 80032c2:	0030      	movs	r0, r6
 80032c4:	f012 f9f6 	bl	80156b4 <__wrap_printf>
 80032c8:	492b      	ldr	r1, [pc, #172]	; (8003378 <printf_envelope_metadata+0xe0>)
 80032ca:	9800      	ldr	r0, [sp, #0]
 80032cc:	f00d f8dc 	bl	8010488 <__aeabi_fmul>
 80032d0:	f00d ffee 	bl	80112b0 <__aeabi_f2iz>
 80032d4:	0001      	movs	r1, r0
 80032d6:	4829      	ldr	r0, [pc, #164]	; (800337c <printf_envelope_metadata+0xe4>)
 80032d8:	f012 f9ec 	bl	80156b4 <__wrap_printf>
 80032dc:	4a28      	ldr	r2, [pc, #160]	; (8003380 <printf_envelope_metadata+0xe8>)
 80032de:	0029      	movs	r1, r5
 80032e0:	0020      	movs	r0, r4
 80032e2:	f012 f9e7 	bl	80156b4 <__wrap_printf>
    INF_PRINTLN("Length: %lu mm", (uint32_t)(metadata.length_m * 1000.0f));
 80032e6:	0030      	movs	r0, r6
 80032e8:	f012 f9e4 	bl	80156b4 <__wrap_printf>
 80032ec:	4922      	ldr	r1, [pc, #136]	; (8003378 <printf_envelope_metadata+0xe0>)
 80032ee:	9801      	ldr	r0, [sp, #4]
 80032f0:	f00d f8ca 	bl	8010488 <__aeabi_fmul>
 80032f4:	f00d fe08 	bl	8010f08 <__aeabi_f2uiz>
 80032f8:	0001      	movs	r1, r0
 80032fa:	4822      	ldr	r0, [pc, #136]	; (8003384 <printf_envelope_metadata+0xec>)
 80032fc:	f012 f9da 	bl	80156b4 <__wrap_printf>
 8003300:	4a21      	ldr	r2, [pc, #132]	; (8003388 <printf_envelope_metadata+0xf0>)
 8003302:	0029      	movs	r1, r5
 8003304:	0020      	movs	r0, r4
 8003306:	f012 f9d5 	bl	80156b4 <__wrap_printf>
    INF_PRINTLN("Data length: %lu", (uint32_t)metadata.data_length);
 800330a:	0030      	movs	r0, r6
 800330c:	f012 f9d2 	bl	80156b4 <__wrap_printf>
 8003310:	466b      	mov	r3, sp
 8003312:	8919      	ldrh	r1, [r3, #8]
 8003314:	481d      	ldr	r0, [pc, #116]	; (800338c <printf_envelope_metadata+0xf4>)
 8003316:	f012 f9cd 	bl	80156b4 <__wrap_printf>
 800331a:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <printf_envelope_metadata+0xf8>)
 800331c:	0029      	movs	r1, r5
 800331e:	0020      	movs	r0, r4
 8003320:	f012 f9c8 	bl	80156b4 <__wrap_printf>
    INF_PRINTLN("Sweep rate: %lu mHz", (uint32_t)(metadata.stitch_count));
 8003324:	0030      	movs	r0, r6
 8003326:	f012 f9c5 	bl	80156b4 <__wrap_printf>
 800332a:	466b      	mov	r3, sp
 800332c:	8959      	ldrh	r1, [r3, #10]
 800332e:	4819      	ldr	r0, [pc, #100]	; (8003394 <printf_envelope_metadata+0xfc>)
 8003330:	f012 f9c0 	bl	80156b4 <__wrap_printf>
 8003334:	22c3      	movs	r2, #195	; 0xc3
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	0029      	movs	r1, r5
 800333a:	0020      	movs	r0, r4
 800333c:	f012 f9ba 	bl	80156b4 <__wrap_printf>
    INF_PRINTLN("Step length: %lu um", (uint32_t)(metadata.step_length_m * 1.0e6f));
 8003340:	0030      	movs	r0, r6
 8003342:	f012 f9b7 	bl	80156b4 <__wrap_printf>
 8003346:	4914      	ldr	r1, [pc, #80]	; (8003398 <printf_envelope_metadata+0x100>)
 8003348:	9803      	ldr	r0, [sp, #12]
 800334a:	f00d f89d 	bl	8010488 <__aeabi_fmul>
 800334e:	f00d fddb 	bl	8010f08 <__aeabi_f2uiz>
 8003352:	0001      	movs	r1, r0
 8003354:	4811      	ldr	r0, [pc, #68]	; (800339c <printf_envelope_metadata+0x104>)
 8003356:	f012 f9ad 	bl	80156b4 <__wrap_printf>
 800335a:	4a11      	ldr	r2, [pc, #68]	; (80033a0 <printf_envelope_metadata+0x108>)
 800335c:	0029      	movs	r1, r5
 800335e:	0020      	movs	r0, r4
 8003360:	f012 f9a8 	bl	80156b4 <__wrap_printf>
}
 8003364:	b004      	add	sp, #16
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	0801dd78 	.word	0x0801dd78
 800336c:	0801ddf8 	.word	0x0801ddf8
 8003370:	0801dd88 	.word	0x0801dd88
 8003374:	0801dd48 	.word	0x0801dd48
 8003378:	447a0000 	.word	0x447a0000
 800337c:	0801de14 	.word	0x0801de14
 8003380:	00000309 	.word	0x00000309
 8003384:	0801de24 	.word	0x0801de24
 8003388:	0000030a 	.word	0x0000030a
 800338c:	0801de34 	.word	0x0801de34
 8003390:	0000030b 	.word	0x0000030b
 8003394:	0801de48 	.word	0x0801de48
 8003398:	49742400 	.word	0x49742400
 800339c:	0801de5c 	.word	0x0801de5c
 80033a0:	0000030d 	.word	0x0000030d

080033a4 <printf_sparse_metadata>:
void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 80033a4:	b084      	sub	sp, #16
 80033a6:	b570      	push	{r4, r5, r6, lr}
 80033a8:	9004      	str	r0, [sp, #16]
 80033aa:	9105      	str	r1, [sp, #20]
 80033ac:	9206      	str	r2, [sp, #24]
 80033ae:	9307      	str	r3, [sp, #28]
    INF_PRINTLN("Sparse* Serivce Metadata");
 80033b0:	4e44      	ldr	r6, [pc, #272]	; (80034c4 <printf_sparse_metadata+0x120>)
 80033b2:	0030      	movs	r0, r6
 80033b4:	f012 f97e 	bl	80156b4 <__wrap_printf>
 80033b8:	4843      	ldr	r0, [pc, #268]	; (80034c8 <printf_sparse_metadata+0x124>)
 80033ba:	f012 f97b 	bl	80156b4 <__wrap_printf>
 80033be:	4d43      	ldr	r5, [pc, #268]	; (80034cc <printf_sparse_metadata+0x128>)
 80033c0:	4c43      	ldr	r4, [pc, #268]	; (80034d0 <printf_sparse_metadata+0x12c>)
 80033c2:	4a44      	ldr	r2, [pc, #272]	; (80034d4 <printf_sparse_metadata+0x130>)
 80033c4:	0029      	movs	r1, r5
 80033c6:	0020      	movs	r0, r4
 80033c8:	f012 f974 	bl	80156b4 <__wrap_printf>
	INF_PRINTLN("Start: %ld mm", (int32_t)(metadata.start_m * 1000.0f));
 80033cc:	0030      	movs	r0, r6
 80033ce:	f012 f971 	bl	80156b4 <__wrap_printf>
 80033d2:	4941      	ldr	r1, [pc, #260]	; (80034d8 <printf_sparse_metadata+0x134>)
 80033d4:	9804      	ldr	r0, [sp, #16]
 80033d6:	f00d f857 	bl	8010488 <__aeabi_fmul>
 80033da:	f00d ff69 	bl	80112b0 <__aeabi_f2iz>
 80033de:	0001      	movs	r1, r0
 80033e0:	483e      	ldr	r0, [pc, #248]	; (80034dc <printf_sparse_metadata+0x138>)
 80033e2:	f012 f967 	bl	80156b4 <__wrap_printf>
 80033e6:	22bf      	movs	r2, #191	; 0xbf
 80033e8:	0092      	lsls	r2, r2, #2
 80033ea:	0029      	movs	r1, r5
 80033ec:	0020      	movs	r0, r4
 80033ee:	f012 f961 	bl	80156b4 <__wrap_printf>
    if(! far_active){
 80033f2:	4a3b      	ldr	r2, [pc, #236]	; (80034e0 <printf_sparse_metadata+0x13c>)
 80033f4:	2350      	movs	r3, #80	; 0x50
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d04f      	beq.n	800349c <printf_sparse_metadata+0xf8>
       INF_PRINTLN("Length (far): %lu mm", (uint32_t)((metadata.length_m+ sparse_metadata_far.length_m) * 1000.0f)); 
 80033fc:	4831      	ldr	r0, [pc, #196]	; (80034c4 <printf_sparse_metadata+0x120>)
 80033fe:	f012 f959 	bl	80156b4 <__wrap_printf>
 8003402:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <printf_sparse_metadata+0x13c>)
 8003404:	6999      	ldr	r1, [r3, #24]
 8003406:	9805      	ldr	r0, [sp, #20]
 8003408:	f00c fd92 	bl	800ff30 <__aeabi_fadd>
 800340c:	4932      	ldr	r1, [pc, #200]	; (80034d8 <printf_sparse_metadata+0x134>)
 800340e:	f00d f83b 	bl	8010488 <__aeabi_fmul>
 8003412:	f00d fd79 	bl	8010f08 <__aeabi_f2uiz>
 8003416:	0001      	movs	r1, r0
 8003418:	4832      	ldr	r0, [pc, #200]	; (80034e4 <printf_sparse_metadata+0x140>)
 800341a:	f012 f94b 	bl	80156b4 <__wrap_printf>
 800341e:	22c0      	movs	r2, #192	; 0xc0
 8003420:	0092      	lsls	r2, r2, #2
 8003422:	492a      	ldr	r1, [pc, #168]	; (80034cc <printf_sparse_metadata+0x128>)
 8003424:	482a      	ldr	r0, [pc, #168]	; (80034d0 <printf_sparse_metadata+0x12c>)
 8003426:	f012 f945 	bl	80156b4 <__wrap_printf>
    INF_PRINTLN("Data length: %lu", (uint32_t)metadata.data_length);
 800342a:	4e26      	ldr	r6, [pc, #152]	; (80034c4 <printf_sparse_metadata+0x120>)
 800342c:	0030      	movs	r0, r6
 800342e:	f012 f941 	bl	80156b4 <__wrap_printf>
 8003432:	ab04      	add	r3, sp, #16
 8003434:	8919      	ldrh	r1, [r3, #8]
 8003436:	482c      	ldr	r0, [pc, #176]	; (80034e8 <printf_sparse_metadata+0x144>)
 8003438:	f012 f93c 	bl	80156b4 <__wrap_printf>
 800343c:	4d23      	ldr	r5, [pc, #140]	; (80034cc <printf_sparse_metadata+0x128>)
 800343e:	4c24      	ldr	r4, [pc, #144]	; (80034d0 <printf_sparse_metadata+0x12c>)
 8003440:	4a2a      	ldr	r2, [pc, #168]	; (80034ec <printf_sparse_metadata+0x148>)
 8003442:	0029      	movs	r1, r5
 8003444:	0020      	movs	r0, r4
 8003446:	f012 f935 	bl	80156b4 <__wrap_printf>
    INF_PRINTLN("Sweep rate: %lu mHz", (uint32_t)(metadata.sweep_rate * 1000.0f));
 800344a:	0030      	movs	r0, r6
 800344c:	f012 f932 	bl	80156b4 <__wrap_printf>
 8003450:	4921      	ldr	r1, [pc, #132]	; (80034d8 <printf_sparse_metadata+0x134>)
 8003452:	9807      	ldr	r0, [sp, #28]
 8003454:	f00d f818 	bl	8010488 <__aeabi_fmul>
 8003458:	f00d fd56 	bl	8010f08 <__aeabi_f2uiz>
 800345c:	0001      	movs	r1, r0
 800345e:	4824      	ldr	r0, [pc, #144]	; (80034f0 <printf_sparse_metadata+0x14c>)
 8003460:	f012 f928 	bl	80156b4 <__wrap_printf>
 8003464:	4a23      	ldr	r2, [pc, #140]	; (80034f4 <printf_sparse_metadata+0x150>)
 8003466:	0029      	movs	r1, r5
 8003468:	0020      	movs	r0, r4
 800346a:	f012 f923 	bl	80156b4 <__wrap_printf>
    INF_PRINTLN("Step length: %lu um", (uint32_t)(metadata.step_length_m * 1.0e6f));
 800346e:	0030      	movs	r0, r6
 8003470:	f012 f920 	bl	80156b4 <__wrap_printf>
 8003474:	4920      	ldr	r1, [pc, #128]	; (80034f8 <printf_sparse_metadata+0x154>)
 8003476:	9808      	ldr	r0, [sp, #32]
 8003478:	f00d f806 	bl	8010488 <__aeabi_fmul>
 800347c:	f00d fd44 	bl	8010f08 <__aeabi_f2uiz>
 8003480:	0001      	movs	r1, r0
 8003482:	481e      	ldr	r0, [pc, #120]	; (80034fc <printf_sparse_metadata+0x158>)
 8003484:	f012 f916 	bl	80156b4 <__wrap_printf>
 8003488:	22c1      	movs	r2, #193	; 0xc1
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	0029      	movs	r1, r5
 800348e:	0020      	movs	r0, r4
 8003490:	f012 f910 	bl	80156b4 <__wrap_printf>
}
 8003494:	bc70      	pop	{r4, r5, r6}
 8003496:	bc08      	pop	{r3}
 8003498:	b004      	add	sp, #16
 800349a:	4718      	bx	r3
        INF_PRINTLN("Length: %lu mm", (uint32_t)(metadata.length_m * 1000.0f));
 800349c:	4809      	ldr	r0, [pc, #36]	; (80034c4 <printf_sparse_metadata+0x120>)
 800349e:	f012 f909 	bl	80156b4 <__wrap_printf>
 80034a2:	490d      	ldr	r1, [pc, #52]	; (80034d8 <printf_sparse_metadata+0x134>)
 80034a4:	9805      	ldr	r0, [sp, #20]
 80034a6:	f00c ffef 	bl	8010488 <__aeabi_fmul>
 80034aa:	f00d fd2d 	bl	8010f08 <__aeabi_f2uiz>
 80034ae:	0001      	movs	r1, r0
 80034b0:	4813      	ldr	r0, [pc, #76]	; (8003500 <printf_sparse_metadata+0x15c>)
 80034b2:	f012 f8ff 	bl	80156b4 <__wrap_printf>
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <printf_sparse_metadata+0x160>)
 80034b8:	4904      	ldr	r1, [pc, #16]	; (80034cc <printf_sparse_metadata+0x128>)
 80034ba:	4805      	ldr	r0, [pc, #20]	; (80034d0 <printf_sparse_metadata+0x12c>)
 80034bc:	f012 f8fa 	bl	80156b4 <__wrap_printf>
 80034c0:	e7b3      	b.n	800342a <printf_sparse_metadata+0x86>
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	0801dd78 	.word	0x0801dd78
 80034c8:	0801de70 	.word	0x0801de70
 80034cc:	0801dd88 	.word	0x0801dd88
 80034d0:	0801dd48 	.word	0x0801dd48
 80034d4:	000002fb 	.word	0x000002fb
 80034d8:	447a0000 	.word	0x447a0000
 80034dc:	0801de14 	.word	0x0801de14
 80034e0:	2000018c 	.word	0x2000018c
 80034e4:	0801de8c 	.word	0x0801de8c
 80034e8:	0801de34 	.word	0x0801de34
 80034ec:	00000302 	.word	0x00000302
 80034f0:	0801de48 	.word	0x0801de48
 80034f4:	00000303 	.word	0x00000303
 80034f8:	49742400 	.word	0x49742400
 80034fc:	0801de5c 	.word	0x0801de5c
 8003500:	0801de24 	.word	0x0801de24
 8003504:	000002fe 	.word	0x000002fe

08003508 <envelopeMeasure>:
void envelopeMeasure(void){
 8003508:	b570      	push	{r4, r5, r6, lr}
	INF_PRINTLN("Start Envelope measurement");
 800350a:	4811      	ldr	r0, [pc, #68]	; (8003550 <envelopeMeasure+0x48>)
 800350c:	f012 f8d2 	bl	80156b4 <__wrap_printf>
 8003510:	4810      	ldr	r0, [pc, #64]	; (8003554 <envelopeMeasure+0x4c>)
 8003512:	f012 f8cf 	bl	80156b4 <__wrap_printf>
 8003516:	4d10      	ldr	r5, [pc, #64]	; (8003558 <envelopeMeasure+0x50>)
 8003518:	4c10      	ldr	r4, [pc, #64]	; (800355c <envelopeMeasure+0x54>)
 800351a:	4a11      	ldr	r2, [pc, #68]	; (8003560 <envelopeMeasure+0x58>)
 800351c:	0029      	movs	r1, r5
 800351e:	0020      	movs	r0, r4
 8003520:	f012 f8c8 	bl	80156b4 <__wrap_printf>
    acc_service_envelope_get_next_by_reference(envelope_handle, &envelope_data, &envelope_result_info);
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <envelopeMeasure+0x5c>)
 8003526:	001a      	movs	r2, r3
 8003528:	3254      	adds	r2, #84	; 0x54
 800352a:	490f      	ldr	r1, [pc, #60]	; (8003568 <envelopeMeasure+0x60>)
 800352c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800352e:	3178      	adds	r1, #120	; 0x78
 8003530:	f7ff fd8c 	bl	800304c <acc_service_envelope_get_next_by_reference>
	filldata_envelope();
 8003534:	f7fe fd2c 	bl	8001f90 <filldata_envelope>
	DBG_PRINTLN("Envelope measurement complete");
 8003538:	480c      	ldr	r0, [pc, #48]	; (800356c <envelopeMeasure+0x64>)
 800353a:	f012 f8bb 	bl	80156b4 <__wrap_printf>
 800353e:	480c      	ldr	r0, [pc, #48]	; (8003570 <envelopeMeasure+0x68>)
 8003540:	f012 f8b8 	bl	80156b4 <__wrap_printf>
 8003544:	4a0b      	ldr	r2, [pc, #44]	; (8003574 <envelopeMeasure+0x6c>)
 8003546:	0029      	movs	r1, r5
 8003548:	0020      	movs	r0, r4
 800354a:	f012 f8b3 	bl	80156b4 <__wrap_printf>
}
 800354e:	bd70      	pop	{r4, r5, r6, pc}
 8003550:	0801dd78 	.word	0x0801dd78
 8003554:	0801dea4 	.word	0x0801dea4
 8003558:	0801dd88 	.word	0x0801dd88
 800355c:	0801dd48 	.word	0x0801dd48
 8003560:	000002f2 	.word	0x000002f2
 8003564:	2000018c 	.word	0x2000018c
 8003568:	2000010c 	.word	0x2000010c
 800356c:	0801dec0 	.word	0x0801dec0
 8003570:	0801dec8 	.word	0x0801dec8
 8003574:	000002f6 	.word	0x000002f6

08003578 <updateEnvelopeConfig>:
void updateEnvelopeConfig(acc_service_configuration_t config){
 8003578:	b510      	push	{r4, lr}
 800357a:	0004      	movs	r4, r0
    DBG_PRINTLN("updating config");
 800357c:	484e      	ldr	r0, [pc, #312]	; (80036b8 <updateEnvelopeConfig+0x140>)
 800357e:	f012 f899 	bl	80156b4 <__wrap_printf>
 8003582:	484e      	ldr	r0, [pc, #312]	; (80036bc <updateEnvelopeConfig+0x144>)
 8003584:	f012 f896 	bl	80156b4 <__wrap_printf>
 8003588:	22f5      	movs	r2, #245	; 0xf5
 800358a:	0052      	lsls	r2, r2, #1
 800358c:	494c      	ldr	r1, [pc, #304]	; (80036c0 <updateEnvelopeConfig+0x148>)
 800358e:	484d      	ldr	r0, [pc, #308]	; (80036c4 <updateEnvelopeConfig+0x14c>)
 8003590:	f012 f890 	bl	80156b4 <__wrap_printf>
    acc_service_profile_set(config, RegInt_getreg(0x28));
 8003594:	2028      	movs	r0, #40	; 0x28
 8003596:	f7fe fb7f 	bl	8001c98 <RegInt_getreg>
 800359a:	b2c1      	uxtb	r1, r0
 800359c:	0020      	movs	r0, r4
 800359e:	f7fd fe01 	bl	80011a4 <acc_service_profile_set>
	uint32_t rep_mode = RegInt_getreg(0x22); 
 80035a2:	2022      	movs	r0, #34	; 0x22
 80035a4:	f7fe fb78 	bl	8001c98 <RegInt_getreg>
	if(rep_mode == 0x01){
 80035a8:	2801      	cmp	r0, #1
 80035aa:	d100      	bne.n	80035ae <updateEnvelopeConfig+0x36>
 80035ac:	e073      	b.n	8003696 <updateEnvelopeConfig+0x11e>
	}else if (rep_mode == 0x02){
 80035ae:	2802      	cmp	r0, #2
 80035b0:	d100      	bne.n	80035b4 <updateEnvelopeConfig+0x3c>
 80035b2:	e07d      	b.n	80036b0 <updateEnvelopeConfig+0x138>
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 80035b4:	2026      	movs	r0, #38	; 0x26
 80035b6:	f7fe fb6f 	bl	8001c98 <RegInt_getreg>
 80035ba:	1e41      	subs	r1, r0, #1
 80035bc:	4188      	sbcs	r0, r1
 80035be:	b2c1      	uxtb	r1, r0
 80035c0:	0020      	movs	r0, r4
 80035c2:	f7fd fe20 	bl	8001206 <acc_service_tx_disable_set>
	acc_service_envelope_downsampling_factor_set(config, RegInt_getreg(0x29));
 80035c6:	2029      	movs	r0, #41	; 0x29
 80035c8:	f7fe fb66 	bl	8001c98 <RegInt_getreg>
 80035cc:	b281      	uxth	r1, r0
 80035ce:	0020      	movs	r0, r4
 80035d0:	f7fe f848 	bl	8001664 <acc_service_envelope_downsampling_factor_set>
	acc_service_power_save_mode_set(config, RegInt_getreg(0x25));
 80035d4:	2025      	movs	r0, #37	; 0x25
 80035d6:	f7fe fb5f 	bl	8001c98 <RegInt_getreg>
 80035da:	0001      	movs	r1, r0
 80035dc:	0020      	movs	r0, r4
 80035de:	f7fd fe39 	bl	8001254 <acc_service_power_save_mode_set>
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 80035e2:	2033      	movs	r0, #51	; 0x33
 80035e4:	f7fe fb58 	bl	8001c98 <RegInt_getreg>
 80035e8:	1e41      	subs	r1, r0, #1
 80035ea:	4188      	sbcs	r0, r1
 80035ec:	b2c1      	uxtb	r1, r0
 80035ee:	0020      	movs	r0, r4
 80035f0:	f7fd fdf2 	bl	80011d8 <acc_service_asynchronous_measurement_set>
	acc_service_requested_start_set (config, (float)RegInt_getreg(0x20)/1000.0f);
 80035f4:	2020      	movs	r0, #32
 80035f6:	f7fe fb4f 	bl	8001c98 <RegInt_getreg>
 80035fa:	f00d fec3 	bl	8011384 <__aeabi_ui2f>
 80035fe:	4932      	ldr	r1, [pc, #200]	; (80036c8 <updateEnvelopeConfig+0x150>)
 8003600:	f00c fe30 	bl	8010264 <__aeabi_fdiv>
 8003604:	1c01      	adds	r1, r0, #0
 8003606:	0020      	movs	r0, r4
 8003608:	f7fd fe4d 	bl	80012a6 <acc_service_requested_start_set>
	acc_service_requested_length_set (config, (float)RegInt_getreg(0x21)/1000.0f);
 800360c:	2021      	movs	r0, #33	; 0x21
 800360e:	f7fe fb43 	bl	8001c98 <RegInt_getreg>
 8003612:	f00d feb7 	bl	8011384 <__aeabi_ui2f>
 8003616:	492c      	ldr	r1, [pc, #176]	; (80036c8 <updateEnvelopeConfig+0x150>)
 8003618:	f00c fe24 	bl	8010264 <__aeabi_fdiv>
 800361c:	1c01      	adds	r1, r0, #0
 800361e:	0020      	movs	r0, r4
 8003620:	f7fd fe36 	bl	8001290 <acc_service_requested_length_set>
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8003624:	2024      	movs	r0, #36	; 0x24
 8003626:	f7fe fb37 	bl	8001c98 <RegInt_getreg>
 800362a:	f00d feab 	bl	8011384 <__aeabi_ui2f>
 800362e:	4926      	ldr	r1, [pc, #152]	; (80036c8 <updateEnvelopeConfig+0x150>)
 8003630:	f00c fe18 	bl	8010264 <__aeabi_fdiv>
 8003634:	1c01      	adds	r1, r0, #0
 8003636:	0020      	movs	r0, r4
 8003638:	f7fd fdf1 	bl	800121e <acc_service_receiver_gain_set>
	acc_service_hw_accelerated_average_samples_set (config, RegInt_getreg(0x30));
 800363c:	2030      	movs	r0, #48	; 0x30
 800363e:	f7fe fb2b 	bl	8001c98 <RegInt_getreg>
 8003642:	b2c1      	uxtb	r1, r0
 8003644:	0020      	movs	r0, r4
 8003646:	f7fd fdd3 	bl	80011f0 <acc_service_hw_accelerated_average_samples_set>
    acc_service_envelope_noise_level_normalization_set (config, RegInt_getreg(0x31));
 800364a:	2031      	movs	r0, #49	; 0x31
 800364c:	f7fe fb24 	bl	8001c98 <RegInt_getreg>
 8003650:	1e41      	subs	r1, r0, #1
 8003652:	4188      	sbcs	r0, r1
 8003654:	b2c1      	uxtb	r1, r0
 8003656:	0020      	movs	r0, r4
 8003658:	f7fd ffb4 	bl	80015c4 <acc_service_envelope_noise_level_normalization_set>
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 800365c:	2032      	movs	r0, #50	; 0x32
 800365e:	f7fe fb1b 	bl	8001c98 <RegInt_getreg>
 8003662:	1e41      	subs	r1, r0, #1
 8003664:	4188      	sbcs	r0, r1
 8003666:	b2c1      	uxtb	r1, r0
 8003668:	0020      	movs	r0, r4
 800366a:	f7fd fd89 	bl	8001180 <acc_service_maximize_signal_attenuation_set>
    acc_service_mur_set (config, RegInt_getreg(0x34));
 800366e:	2034      	movs	r0, #52	; 0x34
 8003670:	f7fe fb12 	bl	8001c98 <RegInt_getreg>
 8003674:	b2c1      	uxtb	r1, r0
 8003676:	0020      	movs	r0, r4
 8003678:	f7fd fd4a 	bl	8001110 <acc_service_mur_set>
	acc_service_envelope_running_average_factor_set(config, (float)RegInt_getreg(0x40)/1000.0f);
 800367c:	2040      	movs	r0, #64	; 0x40
 800367e:	f7fe fb0b 	bl	8001c98 <RegInt_getreg>
 8003682:	f00d fe7f 	bl	8011384 <__aeabi_ui2f>
 8003686:	4910      	ldr	r1, [pc, #64]	; (80036c8 <updateEnvelopeConfig+0x150>)
 8003688:	f00c fdec 	bl	8010264 <__aeabi_fdiv>
 800368c:	1c01      	adds	r1, r0, #0
 800368e:	0020      	movs	r0, r4
 8003690:	f7fd ffaa 	bl	80015e8 <acc_service_envelope_running_average_factor_set>
}
 8003694:	bd10      	pop	{r4, pc}
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 8003696:	3022      	adds	r0, #34	; 0x22
 8003698:	f7fe fafe 	bl	8001c98 <RegInt_getreg>
 800369c:	f00d fe72 	bl	8011384 <__aeabi_ui2f>
 80036a0:	4909      	ldr	r1, [pc, #36]	; (80036c8 <updateEnvelopeConfig+0x150>)
 80036a2:	f00c fddf 	bl	8010264 <__aeabi_fdiv>
 80036a6:	1c01      	adds	r1, r0, #0
 80036a8:	0020      	movs	r0, r4
 80036aa:	f7fd fdde 	bl	800126a <acc_service_repetition_mode_streaming_set>
 80036ae:	e781      	b.n	80035b4 <updateEnvelopeConfig+0x3c>
		acc_service_repetition_mode_on_demand_set(config);
 80036b0:	0020      	movs	r0, r4
 80036b2:	f7fd fde7 	bl	8001284 <acc_service_repetition_mode_on_demand_set>
 80036b6:	e77d      	b.n	80035b4 <updateEnvelopeConfig+0x3c>
 80036b8:	0801dec0 	.word	0x0801dec0
 80036bc:	0801dee8 	.word	0x0801dee8
 80036c0:	0801dd88 	.word	0x0801dd88
 80036c4:	0801dd48 	.word	0x0801dd48
 80036c8:	447a0000 	.word	0x447a0000

080036cc <updateSparseConfig>:
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	0004      	movs	r4, r0
 80036d0:	000e      	movs	r6, r1
 80036d2:	0015      	movs	r5, r2
	DBG_PRINTLN("updating config");
 80036d4:	484b      	ldr	r0, [pc, #300]	; (8003804 <updateSparseConfig+0x138>)
 80036d6:	f011 ffed 	bl	80156b4 <__wrap_printf>
 80036da:	484b      	ldr	r0, [pc, #300]	; (8003808 <updateSparseConfig+0x13c>)
 80036dc:	f011 ffea 	bl	80156b4 <__wrap_printf>
 80036e0:	22c4      	movs	r2, #196	; 0xc4
 80036e2:	32ff      	adds	r2, #255	; 0xff
 80036e4:	4949      	ldr	r1, [pc, #292]	; (800380c <updateSparseConfig+0x140>)
 80036e6:	484a      	ldr	r0, [pc, #296]	; (8003810 <updateSparseConfig+0x144>)
 80036e8:	f011 ffe4 	bl	80156b4 <__wrap_printf>
	acc_service_profile_set(config, RegInt_getreg(0x28));
 80036ec:	2028      	movs	r0, #40	; 0x28
 80036ee:	f7fe fad3 	bl	8001c98 <RegInt_getreg>
 80036f2:	b2c1      	uxtb	r1, r0
 80036f4:	0020      	movs	r0, r4
 80036f6:	f7fd fd55 	bl	80011a4 <acc_service_profile_set>
	uint32_t rep_mode = RegInt_getreg(0x22); 
 80036fa:	2022      	movs	r0, #34	; 0x22
 80036fc:	f7fe facc 	bl	8001c98 <RegInt_getreg>
	if(rep_mode == 0x01){
 8003700:	2801      	cmp	r0, #1
 8003702:	d100      	bne.n	8003706 <updateSparseConfig+0x3a>
 8003704:	e06d      	b.n	80037e2 <updateSparseConfig+0x116>
	}else if (rep_mode == 0x02){
 8003706:	2802      	cmp	r0, #2
 8003708:	d100      	bne.n	800370c <updateSparseConfig+0x40>
 800370a:	e077      	b.n	80037fc <updateSparseConfig+0x130>
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 800370c:	2026      	movs	r0, #38	; 0x26
 800370e:	f7fe fac3 	bl	8001c98 <RegInt_getreg>
 8003712:	1e41      	subs	r1, r0, #1
 8003714:	4188      	sbcs	r0, r1
 8003716:	b2c1      	uxtb	r1, r0
 8003718:	0020      	movs	r0, r4
 800371a:	f7fd fd74 	bl	8001206 <acc_service_tx_disable_set>
	acc_service_power_save_mode_set(config, RegInt_getreg(0x25));
 800371e:	2025      	movs	r0, #37	; 0x25
 8003720:	f7fe faba 	bl	8001c98 <RegInt_getreg>
 8003724:	0001      	movs	r1, r0
 8003726:	0020      	movs	r0, r4
 8003728:	f7fd fd94 	bl	8001254 <acc_service_power_save_mode_set>
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 800372c:	2033      	movs	r0, #51	; 0x33
 800372e:	f7fe fab3 	bl	8001c98 <RegInt_getreg>
 8003732:	1e41      	subs	r1, r0, #1
 8003734:	4188      	sbcs	r0, r1
 8003736:	b2c1      	uxtb	r1, r0
 8003738:	0020      	movs	r0, r4
 800373a:	f7fd fd4d 	bl	80011d8 <acc_service_asynchronous_measurement_set>
	acc_service_requested_start_set (config, (float)sweep_start/1000.0f);
 800373e:	0030      	movs	r0, r6
 8003740:	f00d fe20 	bl	8011384 <__aeabi_ui2f>
 8003744:	4933      	ldr	r1, [pc, #204]	; (8003814 <updateSparseConfig+0x148>)
 8003746:	f00c fd8d 	bl	8010264 <__aeabi_fdiv>
 800374a:	1c01      	adds	r1, r0, #0
 800374c:	0020      	movs	r0, r4
 800374e:	f7fd fdaa 	bl	80012a6 <acc_service_requested_start_set>
	acc_service_requested_length_set (config, (float)sweep_length/1000.0f);
 8003752:	0028      	movs	r0, r5
 8003754:	f00d fe16 	bl	8011384 <__aeabi_ui2f>
 8003758:	492e      	ldr	r1, [pc, #184]	; (8003814 <updateSparseConfig+0x148>)
 800375a:	f00c fd83 	bl	8010264 <__aeabi_fdiv>
 800375e:	1c01      	adds	r1, r0, #0
 8003760:	0020      	movs	r0, r4
 8003762:	f7fd fd95 	bl	8001290 <acc_service_requested_length_set>
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8003766:	2024      	movs	r0, #36	; 0x24
 8003768:	f7fe fa96 	bl	8001c98 <RegInt_getreg>
 800376c:	f00d fe0a 	bl	8011384 <__aeabi_ui2f>
 8003770:	4928      	ldr	r1, [pc, #160]	; (8003814 <updateSparseConfig+0x148>)
 8003772:	f00c fd77 	bl	8010264 <__aeabi_fdiv>
 8003776:	1c01      	adds	r1, r0, #0
 8003778:	0020      	movs	r0, r4
 800377a:	f7fd fd50 	bl	800121e <acc_service_receiver_gain_set>
	acc_service_hw_accelerated_average_samples_set (config, RegInt_getreg(0x30));
 800377e:	2030      	movs	r0, #48	; 0x30
 8003780:	f7fe fa8a 	bl	8001c98 <RegInt_getreg>
 8003784:	b2c1      	uxtb	r1, r0
 8003786:	0020      	movs	r0, r4
 8003788:	f7fd fd32 	bl	80011f0 <acc_service_hw_accelerated_average_samples_set>
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 800378c:	2032      	movs	r0, #50	; 0x32
 800378e:	f7fe fa83 	bl	8001c98 <RegInt_getreg>
 8003792:	1e41      	subs	r1, r0, #1
 8003794:	4188      	sbcs	r0, r1
 8003796:	b2c1      	uxtb	r1, r0
 8003798:	0020      	movs	r0, r4
 800379a:	f7fd fcf1 	bl	8001180 <acc_service_maximize_signal_attenuation_set>
	acc_service_sparse_configuration_sweeps_per_frame_set (config, RegInt_getreg(0x40));
 800379e:	2040      	movs	r0, #64	; 0x40
 80037a0:	f7fe fa7a 	bl	8001c98 <RegInt_getreg>
 80037a4:	b281      	uxth	r1, r0
 80037a6:	0020      	movs	r0, r4
 80037a8:	f7fd fe33 	bl	8001412 <acc_service_sparse_configuration_sweeps_per_frame_set>
	acc_service_sparse_configuration_sweep_rate_set (config, (float)RegInt_getreg(0x41)/1000.0f);
 80037ac:	2041      	movs	r0, #65	; 0x41
 80037ae:	f7fe fa73 	bl	8001c98 <RegInt_getreg>
 80037b2:	f00d fde7 	bl	8011384 <__aeabi_ui2f>
 80037b6:	4917      	ldr	r1, [pc, #92]	; (8003814 <updateSparseConfig+0x148>)
 80037b8:	f00c fd54 	bl	8010264 <__aeabi_fdiv>
 80037bc:	1c01      	adds	r1, r0, #0
 80037be:	0020      	movs	r0, r4
 80037c0:	f7fd fe18 	bl	80013f4 <acc_service_sparse_configuration_sweep_rate_set>
	acc_service_sparse_sampling_mode_set (config, RegInt_getreg(0x42));
 80037c4:	2042      	movs	r0, #66	; 0x42
 80037c6:	f7fe fa67 	bl	8001c98 <RegInt_getreg>
 80037ca:	0001      	movs	r1, r0
 80037cc:	0020      	movs	r0, r4
 80037ce:	f7fd fdeb 	bl	80013a8 <acc_service_sparse_sampling_mode_set>
	acc_service_sparse_downsampling_factor_set (config, RegInt_getreg(0x29));
 80037d2:	2029      	movs	r0, #41	; 0x29
 80037d4:	f7fe fa60 	bl	8001c98 <RegInt_getreg>
 80037d8:	b281      	uxth	r1, r0
 80037da:	0020      	movs	r0, r4
 80037dc:	f7fd fdd8 	bl	8001390 <acc_service_sparse_downsampling_factor_set>
}
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 80037e2:	3022      	adds	r0, #34	; 0x22
 80037e4:	f7fe fa58 	bl	8001c98 <RegInt_getreg>
 80037e8:	f00d fdcc 	bl	8011384 <__aeabi_ui2f>
 80037ec:	4909      	ldr	r1, [pc, #36]	; (8003814 <updateSparseConfig+0x148>)
 80037ee:	f00c fd39 	bl	8010264 <__aeabi_fdiv>
 80037f2:	1c01      	adds	r1, r0, #0
 80037f4:	0020      	movs	r0, r4
 80037f6:	f7fd fd38 	bl	800126a <acc_service_repetition_mode_streaming_set>
 80037fa:	e787      	b.n	800370c <updateSparseConfig+0x40>
		acc_service_repetition_mode_on_demand_set(config);
 80037fc:	0020      	movs	r0, r4
 80037fe:	f7fd fd41 	bl	8001284 <acc_service_repetition_mode_on_demand_set>
 8003802:	e783      	b.n	800370c <updateSparseConfig+0x40>
 8003804:	0801dec0 	.word	0x0801dec0
 8003808:	0801dee8 	.word	0x0801dee8
 800380c:	0801dd88 	.word	0x0801dd88
 8003810:	0801dd48 	.word	0x0801dd48
 8003814:	447a0000 	.word	0x447a0000

08003818 <data_malloc>:
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8003818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381a:	0006      	movs	r6, r0
 800381c:	000c      	movs	r4, r1
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 800381e:	4f32      	ldr	r7, [pc, #200]	; (80038e8 <data_malloc+0xd0>)
 8003820:	0038      	movs	r0, r7
 8003822:	f011 ff47 	bl	80156b4 <__wrap_printf>
 8003826:	0031      	movs	r1, r6
 8003828:	4830      	ldr	r0, [pc, #192]	; (80038ec <data_malloc+0xd4>)
 800382a:	f011 ff43 	bl	80156b4 <__wrap_printf>
 800382e:	22c5      	movs	r2, #197	; 0xc5
 8003830:	4d2f      	ldr	r5, [pc, #188]	; (80038f0 <data_malloc+0xd8>)
 8003832:	0052      	lsls	r2, r2, #1
 8003834:	492f      	ldr	r1, [pc, #188]	; (80038f4 <data_malloc+0xdc>)
 8003836:	0028      	movs	r0, r5
 8003838:	f011 ff3c 	bl	80156b4 <__wrap_printf>
	DBG_PRINTLN("malloc bins: %d", bins);
 800383c:	0038      	movs	r0, r7
 800383e:	f011 ff39 	bl	80156b4 <__wrap_printf>
 8003842:	0027      	movs	r7, r4
 8003844:	0021      	movs	r1, r4
 8003846:	482c      	ldr	r0, [pc, #176]	; (80038f8 <data_malloc+0xe0>)
 8003848:	f011 ff34 	bl	80156b4 <__wrap_printf>
 800384c:	228c      	movs	r2, #140	; 0x8c
 800384e:	32ff      	adds	r2, #255	; 0xff
 8003850:	4928      	ldr	r1, [pc, #160]	; (80038f4 <data_malloc+0xdc>)
 8003852:	0028      	movs	r0, r5
 8003854:	f011 ff2e 	bl	80156b4 <__wrap_printf>
    len = sizeof(uint16_t *) * r + sizeof(uint16_t) * c * r;
 8003858:	3402      	adds	r4, #2
 800385a:	4374      	muls	r4, r6
 800385c:	0064      	lsls	r4, r4, #1
    data = (uint16_t **)malloc(len);
 800385e:	0020      	movs	r0, r4
 8003860:	f012 fae4 	bl	8015e2c <malloc>
 8003864:	4b25      	ldr	r3, [pc, #148]	; (80038fc <data_malloc+0xe4>)
 8003866:	6618      	str	r0, [r3, #96]	; 0x60
	if (data == NULL){
 8003868:	2800      	cmp	r0, #0
 800386a:	d01e      	beq.n	80038aa <data_malloc+0x92>
		DBG_PRINTLN("data buffer allociation success");
 800386c:	481e      	ldr	r0, [pc, #120]	; (80038e8 <data_malloc+0xd0>)
 800386e:	f011 ff21 	bl	80156b4 <__wrap_printf>
 8003872:	4823      	ldr	r0, [pc, #140]	; (8003900 <data_malloc+0xe8>)
 8003874:	f011 ff1e 	bl	80156b4 <__wrap_printf>
 8003878:	22cc      	movs	r2, #204	; 0xcc
 800387a:	4d1d      	ldr	r5, [pc, #116]	; (80038f0 <data_malloc+0xd8>)
 800387c:	0052      	lsls	r2, r2, #1
 800387e:	491d      	ldr	r1, [pc, #116]	; (80038f4 <data_malloc+0xdc>)
 8003880:	0028      	movs	r0, r5
 8003882:	f011 ff17 	bl	80156b4 <__wrap_printf>
		DBG_PRINTLN("data buffer len: %ld", len);
 8003886:	4818      	ldr	r0, [pc, #96]	; (80038e8 <data_malloc+0xd0>)
 8003888:	f011 ff14 	bl	80156b4 <__wrap_printf>
 800388c:	0021      	movs	r1, r4
 800388e:	481d      	ldr	r0, [pc, #116]	; (8003904 <data_malloc+0xec>)
 8003890:	f011 ff10 	bl	80156b4 <__wrap_printf>
 8003894:	229a      	movs	r2, #154	; 0x9a
 8003896:	32ff      	adds	r2, #255	; 0xff
 8003898:	4916      	ldr	r1, [pc, #88]	; (80038f4 <data_malloc+0xdc>)
 800389a:	0028      	movs	r0, r5
 800389c:	f011 ff0a 	bl	80156b4 <__wrap_printf>
    ptr = (uint16_t *)(data + r);
 80038a0:	4b16      	ldr	r3, [pc, #88]	; (80038fc <data_malloc+0xe4>)
 80038a2:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80038a4:	00b4      	lsls	r4, r6, #2
    for(uint16_t i = 0; i < r; i++){
 80038a6:	2200      	movs	r2, #0
 80038a8:	e019      	b.n	80038de <data_malloc+0xc6>
		ERR_PRINTLN("data buffer allociation failed");
 80038aa:	4817      	ldr	r0, [pc, #92]	; (8003908 <data_malloc+0xf0>)
 80038ac:	f011 ff02 	bl	80156b4 <__wrap_printf>
 80038b0:	4816      	ldr	r0, [pc, #88]	; (800390c <data_malloc+0xf4>)
 80038b2:	f011 feff 	bl	80156b4 <__wrap_printf>
 80038b6:	2296      	movs	r2, #150	; 0x96
 80038b8:	32ff      	adds	r2, #255	; 0xff
 80038ba:	490e      	ldr	r1, [pc, #56]	; (80038f4 <data_malloc+0xdc>)
 80038bc:	480c      	ldr	r0, [pc, #48]	; (80038f0 <data_malloc+0xd8>)
 80038be:	f011 fef9 	bl	80156b4 <__wrap_printf>
		return -1;
 80038c2:	2001      	movs	r0, #1
 80038c4:	4240      	negs	r0, r0
 80038c6:	e00d      	b.n	80038e4 <data_malloc+0xcc>
        data[i] = (ptr + c * i);
 80038c8:	003b      	movs	r3, r7
 80038ca:	4353      	muls	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	0091      	lsls	r1, r2, #2
 80038d0:	480a      	ldr	r0, [pc, #40]	; (80038fc <data_malloc+0xe4>)
 80038d2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80038d4:	18e3      	adds	r3, r4, r3
 80038d6:	18eb      	adds	r3, r5, r3
 80038d8:	5043      	str	r3, [r0, r1]
    for(uint16_t i = 0; i < r; i++){
 80038da:	3201      	adds	r2, #1
 80038dc:	b292      	uxth	r2, r2
 80038de:	42b2      	cmp	r2, r6
 80038e0:	d3f2      	bcc.n	80038c8 <data_malloc+0xb0>
	return 0;
 80038e2:	2000      	movs	r0, #0
}
 80038e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	0801dec0 	.word	0x0801dec0
 80038ec:	0801def8 	.word	0x0801def8
 80038f0:	0801dd48 	.word	0x0801dd48
 80038f4:	0801dd88 	.word	0x0801dd88
 80038f8:	0801df0c 	.word	0x0801df0c
 80038fc:	2000010c 	.word	0x2000010c
 8003900:	0801df3c 	.word	0x0801df3c
 8003904:	0801df5c 	.word	0x0801df5c
 8003908:	0801dd10 	.word	0x0801dd10
 800390c:	0801df1c 	.word	0x0801df1c

08003910 <sparse_data_malloc>:
int8_t sparse_data_malloc(void){
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 8003912:	4f12      	ldr	r7, [pc, #72]	; (800395c <sparse_data_malloc+0x4c>)
 8003914:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003916:	f7fd fd8c 	bl	8001432 <acc_service_sparse_configuration_sweeps_per_frame_get>
 800391a:	0005      	movs	r5, r0
 800391c:	4e10      	ldr	r6, [pc, #64]	; (8003960 <sparse_data_malloc+0x50>)
 800391e:	2364      	movs	r3, #100	; 0x64
 8003920:	52f0      	strh	r0, [r6, r3]
	bins = sparse_metadata.data_length/sweeps;
 8003922:	0033      	movs	r3, r6
 8003924:	337c      	adds	r3, #124	; 0x7c
 8003926:	8918      	ldrh	r0, [r3, #8]
 8003928:	0029      	movs	r1, r5
 800392a:	f00d f8df 	bl	8010aec <__udivsi3>
 800392e:	b284      	uxth	r4, r0
 8003930:	2366      	movs	r3, #102	; 0x66
 8003932:	52f4      	strh	r4, [r6, r3]
	if(far_active){
 8003934:	3b16      	subs	r3, #22
 8003936:	5cfb      	ldrb	r3, [r7, r3]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <sparse_data_malloc+0x3c>
		bins += sparse_metadata_far.data_length/sweeps;
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <sparse_data_malloc+0x4c>)
 800393e:	8b98      	ldrh	r0, [r3, #28]
 8003940:	0029      	movs	r1, r5
 8003942:	f00d f8d3 	bl	8010aec <__udivsi3>
 8003946:	1824      	adds	r4, r4, r0
 8003948:	2366      	movs	r3, #102	; 0x66
 800394a:	52f4      	strh	r4, [r6, r3]
	return data_malloc(sweeps,bins);
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <sparse_data_malloc+0x50>)
 800394e:	2366      	movs	r3, #102	; 0x66
 8003950:	5ad1      	ldrh	r1, [r2, r3]
 8003952:	0028      	movs	r0, r5
 8003954:	f7ff ff60 	bl	8003818 <data_malloc>
}
 8003958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	2000018c 	.word	0x2000018c
 8003960:	2000010c 	.word	0x2000010c

08003964 <envelope_data_malloc>:
int8_t envelope_data_malloc(void){
 8003964:	b510      	push	{r4, lr}
    bins = envelope_metadata.data_length;
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <envelope_data_malloc+0x1c>)
 8003968:	001a      	movs	r2, r3
 800396a:	3268      	adds	r2, #104	; 0x68
 800396c:	8911      	ldrh	r1, [r2, #8]
 800396e:	2266      	movs	r2, #102	; 0x66
 8003970:	5299      	strh	r1, [r3, r2]
    sweeps = 1;
 8003972:	3a02      	subs	r2, #2
 8003974:	2001      	movs	r0, #1
 8003976:	5298      	strh	r0, [r3, r2]
    return data_malloc(sweeps,bins);
 8003978:	f7ff ff4e 	bl	8003818 <data_malloc>
}
 800397c:	bd10      	pop	{r4, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	2000010c 	.word	0x2000010c

08003984 <RegInt_setregf>:
int8_t RegInt_setregf(uint8_t reg, uint32_t val, uint8_t force){
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	0005      	movs	r5, r0
 8003988:	000e      	movs	r6, r1
	if(!force){
 800398a:	2a00      	cmp	r2, #0
 800398c:	d103      	bne.n	8003996 <RegInt_setregf+0x12>
        if (!RegInt_writeable(reg)){DBG_PRINTLN("not writable");return 0;}
 800398e:	f7fe f988 	bl	8001ca2 <RegInt_writeable>
 8003992:	1e04      	subs	r4, r0, #0
 8003994:	d009      	beq.n	80039aa <RegInt_setregf+0x26>
	uint32_t* regptr = RegInt_regmap(reg);
 8003996:	0028      	movs	r0, r5
 8003998:	f7fe f949 	bl	8001c2e <RegInt_regmap>
	if (!(*regptr == (uint32_t)-1)){
 800399c:	6803      	ldr	r3, [r0, #0]
 800399e:	3301      	adds	r3, #1
 80039a0:	d00f      	beq.n	80039c2 <RegInt_setregf+0x3e>
		*regptr = val;
 80039a2:	6006      	str	r6, [r0, #0]
	return 1;
 80039a4:	2401      	movs	r4, #1
}
 80039a6:	0020      	movs	r0, r4
 80039a8:	bd70      	pop	{r4, r5, r6, pc}
        if (!RegInt_writeable(reg)){DBG_PRINTLN("not writable");return 0;}
 80039aa:	4807      	ldr	r0, [pc, #28]	; (80039c8 <RegInt_setregf+0x44>)
 80039ac:	f011 fe82 	bl	80156b4 <__wrap_printf>
 80039b0:	4806      	ldr	r0, [pc, #24]	; (80039cc <RegInt_setregf+0x48>)
 80039b2:	f011 fe7f 	bl	80156b4 <__wrap_printf>
 80039b6:	2244      	movs	r2, #68	; 0x44
 80039b8:	4905      	ldr	r1, [pc, #20]	; (80039d0 <RegInt_setregf+0x4c>)
 80039ba:	4806      	ldr	r0, [pc, #24]	; (80039d4 <RegInt_setregf+0x50>)
 80039bc:	f011 fe7a 	bl	80156b4 <__wrap_printf>
 80039c0:	e7f1      	b.n	80039a6 <RegInt_setregf+0x22>
	return 1;
 80039c2:	2401      	movs	r4, #1
 80039c4:	e7ef      	b.n	80039a6 <RegInt_setregf+0x22>
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	0801dec0 	.word	0x0801dec0
 80039cc:	0801df74 	.word	0x0801df74
 80039d0:	0801dd88 	.word	0x0801dd88
 80039d4:	0801dd48 	.word	0x0801dd48

080039d8 <Reg_store_envelope_metadata>:
void Reg_store_envelope_metadata(acc_service_envelope_metadata_t metadata){
 80039d8:	b500      	push	{lr}
 80039da:	b087      	sub	sp, #28
 80039dc:	9002      	str	r0, [sp, #8]
 80039de:	9103      	str	r1, [sp, #12]
 80039e0:	9204      	str	r2, [sp, #16]
 80039e2:	9305      	str	r3, [sp, #20]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 80039e4:	4918      	ldr	r1, [pc, #96]	; (8003a48 <Reg_store_envelope_metadata+0x70>)
 80039e6:	9802      	ldr	r0, [sp, #8]
 80039e8:	f00c fd4e 	bl	8010488 <__aeabi_fmul>
 80039ec:	f00d fa8c 	bl	8010f08 <__aeabi_f2uiz>
 80039f0:	0001      	movs	r1, r0
 80039f2:	2201      	movs	r2, #1
 80039f4:	2081      	movs	r0, #129	; 0x81
 80039f6:	f7ff ffc5 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 80039fa:	9b03      	ldr	r3, [sp, #12]
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	4912      	ldr	r1, [pc, #72]	; (8003a48 <Reg_store_envelope_metadata+0x70>)
 8003a00:	1c18      	adds	r0, r3, #0
 8003a02:	f00c fd41 	bl	8010488 <__aeabi_fmul>
 8003a06:	f00d fa7f 	bl	8010f08 <__aeabi_f2uiz>
 8003a0a:	0001      	movs	r1, r0
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	2082      	movs	r0, #130	; 0x82
 8003a10:	f7ff ffb8 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0x83, (uint32_t)metadata.data_length ,1);
 8003a14:	ab02      	add	r3, sp, #8
 8003a16:	8919      	ldrh	r1, [r3, #8]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	2083      	movs	r0, #131	; 0x83
 8003a1c:	f7ff ffb2 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0x84, (uint32_t)metadata.stitch_count,1);
 8003a20:	ab02      	add	r3, sp, #8
 8003a22:	8959      	ldrh	r1, [r3, #10]
 8003a24:	2201      	movs	r2, #1
 8003a26:	2084      	movs	r0, #132	; 0x84
 8003a28:	f7ff ffac 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1.0e6f),1);
 8003a2c:	9805      	ldr	r0, [sp, #20]
 8003a2e:	4907      	ldr	r1, [pc, #28]	; (8003a4c <Reg_store_envelope_metadata+0x74>)
 8003a30:	f00c fd2a 	bl	8010488 <__aeabi_fmul>
 8003a34:	f00d fa68 	bl	8010f08 <__aeabi_f2uiz>
 8003a38:	0001      	movs	r1, r0
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	2085      	movs	r0, #133	; 0x85
 8003a3e:	f7ff ffa1 	bl	8003984 <RegInt_setregf>
}
 8003a42:	b007      	add	sp, #28
 8003a44:	bd00      	pop	{pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	447a0000 	.word	0x447a0000
 8003a4c:	49742400 	.word	0x49742400

08003a50 <Reg_store_sparse_metadata>:
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8003a50:	b084      	sub	sp, #16
 8003a52:	b510      	push	{r4, lr}
 8003a54:	9002      	str	r0, [sp, #8]
 8003a56:	9103      	str	r1, [sp, #12]
 8003a58:	9204      	str	r2, [sp, #16]
 8003a5a:	9305      	str	r3, [sp, #20]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8003a5c:	491d      	ldr	r1, [pc, #116]	; (8003ad4 <Reg_store_sparse_metadata+0x84>)
 8003a5e:	9802      	ldr	r0, [sp, #8]
 8003a60:	f00c fd12 	bl	8010488 <__aeabi_fmul>
 8003a64:	f00d fa50 	bl	8010f08 <__aeabi_f2uiz>
 8003a68:	0001      	movs	r1, r0
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	2081      	movs	r0, #129	; 0x81
 8003a6e:	f7ff ff89 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 8003a72:	4918      	ldr	r1, [pc, #96]	; (8003ad4 <Reg_store_sparse_metadata+0x84>)
 8003a74:	9803      	ldr	r0, [sp, #12]
 8003a76:	f00c fd07 	bl	8010488 <__aeabi_fmul>
 8003a7a:	f00d fa45 	bl	8010f08 <__aeabi_f2uiz>
 8003a7e:	0001      	movs	r1, r0
 8003a80:	2201      	movs	r2, #1
 8003a82:	2082      	movs	r0, #130	; 0x82
 8003a84:	f7ff ff7e 	bl	8003984 <RegInt_setregf>
	uint32_t bufflen = metadata.data_length;
 8003a88:	ab02      	add	r3, sp, #8
 8003a8a:	8919      	ldrh	r1, [r3, #8]
	if(metadata_far_ptr != NULL){
 8003a8c:	9b07      	ldr	r3, [sp, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <Reg_store_sparse_metadata+0x46>
		bufflen += (*metadata_far_ptr).data_length;
 8003a92:	891b      	ldrh	r3, [r3, #8]
 8003a94:	18c9      	adds	r1, r1, r3
	RegInt_setregf(0x83, bufflen ,1);
 8003a96:	2201      	movs	r2, #1
 8003a98:	2083      	movs	r0, #131	; 0x83
 8003a9a:	f7ff ff73 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0x84, (uint32_t)(metadata.sweep_rate * 1000.0f),1);
 8003a9e:	490d      	ldr	r1, [pc, #52]	; (8003ad4 <Reg_store_sparse_metadata+0x84>)
 8003aa0:	9805      	ldr	r0, [sp, #20]
 8003aa2:	f00c fcf1 	bl	8010488 <__aeabi_fmul>
 8003aa6:	f00d fa2f 	bl	8010f08 <__aeabi_f2uiz>
 8003aaa:	0001      	movs	r1, r0
 8003aac:	2201      	movs	r2, #1
 8003aae:	2084      	movs	r0, #132	; 0x84
 8003ab0:	f7ff ff68 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1.0e6f),1);
 8003ab4:	4908      	ldr	r1, [pc, #32]	; (8003ad8 <Reg_store_sparse_metadata+0x88>)
 8003ab6:	9806      	ldr	r0, [sp, #24]
 8003ab8:	f00c fce6 	bl	8010488 <__aeabi_fmul>
 8003abc:	f00d fa24 	bl	8010f08 <__aeabi_f2uiz>
 8003ac0:	0001      	movs	r1, r0
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	2085      	movs	r0, #133	; 0x85
 8003ac6:	f7ff ff5d 	bl	8003984 <RegInt_setregf>
}
 8003aca:	bc10      	pop	{r4}
 8003acc:	bc08      	pop	{r3}
 8003ace:	b004      	add	sp, #16
 8003ad0:	4718      	bx	r3
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	447a0000 	.word	0x447a0000
 8003ad8:	49742400 	.word	0x49742400

08003adc <Reg_regor>:
void Reg_regor(uint8_t reg, uint32_t orbits){
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	0004      	movs	r4, r0
 8003ae0:	000d      	movs	r5, r1
	uint32_t flags = RegInt_getreg(reg); 
 8003ae2:	f7fe f8d9 	bl	8001c98 <RegInt_getreg>
	flags |= orbits;
 8003ae6:	0001      	movs	r1, r0
 8003ae8:	4329      	orrs	r1, r5
	RegInt_setregf(reg, flags, 1);
 8003aea:	2201      	movs	r2, #1
 8003aec:	0020      	movs	r0, r4
 8003aee:	f7ff ff49 	bl	8003984 <RegInt_setregf>
}
 8003af2:	bd70      	pop	{r4, r5, r6, pc}

08003af4 <Reg_regand>:
void Reg_regand(uint8_t reg, uint32_t andbits){
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	0005      	movs	r5, r0
 8003af8:	000c      	movs	r4, r1
	uint32_t flags = RegInt_getreg(reg); 
 8003afa:	f7fe f8cd 	bl	8001c98 <RegInt_getreg>
	flags &= andbits;
 8003afe:	0021      	movs	r1, r4
 8003b00:	4001      	ands	r1, r0
	RegInt_setregf(reg, flags, 1);
 8003b02:	2201      	movs	r2, #1
 8003b04:	0028      	movs	r0, r5
 8003b06:	f7ff ff3d 	bl	8003984 <RegInt_setregf>
}
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}

08003b0c <RegInt_setreg>:
int8_t RegInt_setreg(uint8_t reg, uint32_t val){
 8003b0c:	b510      	push	{r4, lr}
	int8_t success = RegInt_setregf(reg, val, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f7ff ff38 	bl	8003984 <RegInt_setregf>
}
 8003b14:	bd10      	pop	{r4, pc}

08003b16 <makekernel>:
void makekernel(float st_dev){
 8003b16:	b570      	push	{r4, r5, r6, lr}
 8003b18:	1c06      	adds	r6, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 8003b1a:	2400      	movs	r4, #0
	float norm = 0;
 8003b1c:	2500      	movs	r5, #0
 8003b1e:	e01c      	b.n	8003b5a <makekernel+0x44>
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8003b20:	1f20      	subs	r0, r4, #4
 8003b22:	f00d fbe5 	bl	80112f0 <__aeabi_i2f>
 8003b26:	1c31      	adds	r1, r6, #0
 8003b28:	f00c fb9c 	bl	8010264 <__aeabi_fdiv>
 8003b2c:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	061b      	lsls	r3, r3, #24
 8003b32:	18c0      	adds	r0, r0, r3
 8003b34:	f00c fca8 	bl	8010488 <__aeabi_fmul>
 8003b38:	21fc      	movs	r1, #252	; 0xfc
 8003b3a:	0589      	lsls	r1, r1, #22
 8003b3c:	f00c fca4 	bl	8010488 <__aeabi_fmul>
		kernel[i] =  expf(t);
 8003b40:	f00f ffd8 	bl	8013af4 <expf>
 8003b44:	1c01      	adds	r1, r0, #0
 8003b46:	00a2      	lsls	r2, r4, #2
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <makekernel+0x72>)
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	62d8      	str	r0, [r3, #44]	; 0x2c
		norm += kernel[i];
 8003b4e:	1c28      	adds	r0, r5, #0
 8003b50:	f00c f9ee 	bl	800ff30 <__aeabi_fadd>
 8003b54:	1c05      	adds	r5, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 8003b56:	3401      	adds	r4, #1
 8003b58:	b2a4      	uxth	r4, r4
 8003b5a:	2c08      	cmp	r4, #8
 8003b5c:	d9e0      	bls.n	8003b20 <makekernel+0xa>
	float sclfact = 1/norm;
 8003b5e:	1c29      	adds	r1, r5, #0
 8003b60:	20fe      	movs	r0, #254	; 0xfe
 8003b62:	0580      	lsls	r0, r0, #22
 8003b64:	f00c fb7e 	bl	8010264 <__aeabi_fdiv>
 8003b68:	1c06      	adds	r6, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 8003b6a:	2400      	movs	r4, #0
 8003b6c:	e009      	b.n	8003b82 <makekernel+0x6c>
		kernel[i] *= sclfact;
 8003b6e:	00a3      	lsls	r3, r4, #2
 8003b70:	4d05      	ldr	r5, [pc, #20]	; (8003b88 <makekernel+0x72>)
 8003b72:	18ed      	adds	r5, r5, r3
 8003b74:	1c31      	adds	r1, r6, #0
 8003b76:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003b78:	f00c fc86 	bl	8010488 <__aeabi_fmul>
 8003b7c:	62e8      	str	r0, [r5, #44]	; 0x2c
	for(uint16_t i = 0; i < CONVKER; i++){
 8003b7e:	3401      	adds	r4, #1
 8003b80:	b2a4      	uxth	r4, r4
 8003b82:	2c08      	cmp	r4, #8
 8003b84:	d9f3      	bls.n	8003b6e <makekernel+0x58>
}
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	2000018c 	.word	0x2000018c

08003b8c <doconv>:
void doconv(uint16_t** data, uint8v2_t data_size, float st_dev){
 8003b8c:	b530      	push	{r4, r5, lr}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	1c0d      	adds	r5, r1, #0
 8003b92:	040c      	lsls	r4, r1, #16
 8003b94:	ab01      	add	r3, sp, #4
 8003b96:	8019      	strh	r1, [r3, #0]
	_conv_data = data;
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <doconv+0x5c>)
 8003b9a:	6358      	str	r0, [r3, #52]	; 0x34
	_sweeps = data_size.x1;
 8003b9c:	2130      	movs	r1, #48	; 0x30
 8003b9e:	545d      	strb	r5, [r3, r1]
	_bins = data_size.x2;
 8003ba0:	0e24      	lsrs	r4, r4, #24
 8003ba2:	3101      	adds	r1, #1
 8003ba4:	545c      	strb	r4, [r3, r1]
	makekernel(st_dev);
 8003ba6:	1c10      	adds	r0, r2, #0
 8003ba8:	f7ff ffb5 	bl	8003b16 <makekernel>
	for(uint16_t i = 0; i < _bins; i++){
 8003bac:	2400      	movs	r4, #0
 8003bae:	e005      	b.n	8003bbc <doconv+0x30>
		convolve1d(i,0);
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	0020      	movs	r0, r4
 8003bb4:	f7ff fa62 	bl	800307c <convolve1d>
	for(uint16_t i = 0; i < _bins; i++){
 8003bb8:	3401      	adds	r4, #1
 8003bba:	b2a4      	uxth	r4, r4
 8003bbc:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <doconv+0x5c>)
 8003bbe:	2331      	movs	r3, #49	; 0x31
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	42a3      	cmp	r3, r4
 8003bc4:	d8f4      	bhi.n	8003bb0 <doconv+0x24>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8003bc6:	2400      	movs	r4, #0
 8003bc8:	e005      	b.n	8003bd6 <doconv+0x4a>
		convolve1d(j,1);
 8003bca:	2101      	movs	r1, #1
 8003bcc:	0020      	movs	r0, r4
 8003bce:	f7ff fa55 	bl	800307c <convolve1d>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8003bd2:	3401      	adds	r4, #1
 8003bd4:	b2a4      	uxth	r4, r4
 8003bd6:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <doconv+0x5c>)
 8003bd8:	2330      	movs	r3, #48	; 0x30
 8003bda:	5cd3      	ldrb	r3, [r2, r3]
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	42a3      	cmp	r3, r4
 8003be0:	d8f3      	bhi.n	8003bca <doconv+0x3e>
}
 8003be2:	b003      	add	sp, #12
 8003be4:	bd30      	pop	{r4, r5, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	2000008c 	.word	0x2000008c

08003bec <evalEnvelopeData>:
void evalEnvelopeData(void){
 8003bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bee:	b08d      	sub	sp, #52	; 0x34
	uint16_t dist_res = (uint16_t)(envelope_metadata.step_length_m*1.0e6f);
 8003bf0:	4c47      	ldr	r4, [pc, #284]	; (8003d10 <evalEnvelopeData+0x124>)
 8003bf2:	4948      	ldr	r1, [pc, #288]	; (8003d14 <evalEnvelopeData+0x128>)
 8003bf4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003bf6:	f00c fc47 	bl	8010488 <__aeabi_fmul>
 8003bfa:	f00d f985 	bl	8010f08 <__aeabi_f2uiz>
 8003bfe:	b286      	uxth	r6, r0
	uint16_t dist_start = (uint16_t)(envelope_metadata.start_m*1000.0f);
 8003c00:	4945      	ldr	r1, [pc, #276]	; (8003d18 <evalEnvelopeData+0x12c>)
 8003c02:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003c04:	f00c fc40 	bl	8010488 <__aeabi_fmul>
 8003c08:	f00d f97e 	bl	8010f08 <__aeabi_f2uiz>
 8003c0c:	b285      	uxth	r5, r0
	getpeaks(data, bins, indexes, amplitudes);
 8003c0e:	2366      	movs	r3, #102	; 0x66
 8003c10:	5ae1      	ldrh	r1, [r4, r3]
 8003c12:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003c14:	ab04      	add	r3, sp, #16
 8003c16:	aa02      	add	r2, sp, #8
 8003c18:	f7fd fd6e 	bl	80016f8 <getpeaks>
	for(uint8_t i = 0; i < n; i++){
 8003c1c:	2400      	movs	r4, #0
 8003c1e:	e010      	b.n	8003c42 <evalEnvelopeData+0x56>
		distances[i] = (uint16_t)(((uint32_t)indexes[i]*(uint32_t)dist_res)/1e3) + dist_start;
 8003c20:	0067      	lsls	r7, r4, #1
 8003c22:	ab02      	add	r3, sp, #8
 8003c24:	5af8      	ldrh	r0, [r7, r3]
 8003c26:	4370      	muls	r0, r6
 8003c28:	f00f f958 	bl	8012edc <__aeabi_ui2d>
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <evalEnvelopeData+0x130>)
 8003c30:	f00d ff04 	bl	8011a3c <__aeabi_ddiv>
 8003c34:	f00d f980 	bl	8010f38 <__aeabi_d2uiz>
 8003c38:	1940      	adds	r0, r0, r5
 8003c3a:	ab06      	add	r3, sp, #24
 8003c3c:	53d8      	strh	r0, [r3, r7]
	for(uint8_t i = 0; i < n; i++){
 8003c3e:	3401      	adds	r4, #1
 8003c40:	b2e4      	uxtb	r4, r4
 8003c42:	2c03      	cmp	r4, #3
 8003c44:	d9ec      	bls.n	8003c20 <evalEnvelopeData+0x34>
	pack16to32array(distamp_pack, indexes, amplitudes);
 8003c46:	ad04      	add	r5, sp, #16
 8003c48:	002a      	movs	r2, r5
 8003c4a:	a902      	add	r1, sp, #8
 8003c4c:	a808      	add	r0, sp, #32
 8003c4e:	f7fd fd1b 	bl	8001688 <pack16to32array>
	RegInt_setregf(0xD0,(uint32_t)distamp_pack[0], 1);
 8003c52:	2201      	movs	r2, #1
 8003c54:	9908      	ldr	r1, [sp, #32]
 8003c56:	20d0      	movs	r0, #208	; 0xd0
 8003c58:	f7ff fe94 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0xD1,(uint32_t)distamp_pack[1], 1);
 8003c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	0019      	movs	r1, r3
 8003c64:	20d1      	movs	r0, #209	; 0xd1
 8003c66:	f7ff fe8d 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0xD2,(uint32_t)distamp_pack[2], 1);
 8003c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	0019      	movs	r1, r3
 8003c72:	20d2      	movs	r0, #210	; 0xd2
 8003c74:	f7ff fe86 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0xD3,(uint32_t)distamp_pack[3], 1);
 8003c78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	20d3      	movs	r0, #211	; 0xd3
 8003c7e:	f7ff fe81 	bl	8003984 <RegInt_setregf>
	INF_PRINTLN("RESULTS");
 8003c82:	4e27      	ldr	r6, [pc, #156]	; (8003d20 <evalEnvelopeData+0x134>)
 8003c84:	0030      	movs	r0, r6
 8003c86:	f011 fd15 	bl	80156b4 <__wrap_printf>
 8003c8a:	4826      	ldr	r0, [pc, #152]	; (8003d24 <evalEnvelopeData+0x138>)
 8003c8c:	f011 fd12 	bl	80156b4 <__wrap_printf>
 8003c90:	22e1      	movs	r2, #225	; 0xe1
 8003c92:	4c25      	ldr	r4, [pc, #148]	; (8003d28 <evalEnvelopeData+0x13c>)
 8003c94:	0092      	lsls	r2, r2, #2
 8003c96:	0021      	movs	r1, r4
 8003c98:	4824      	ldr	r0, [pc, #144]	; (8003d2c <evalEnvelopeData+0x140>)
 8003c9a:	f011 fd0b 	bl	80156b4 <__wrap_printf>
	INF_PRINTLN("Peak 1: %d mm | %d arb.", distances[0], amplitudes[0]);
 8003c9e:	0030      	movs	r0, r6
 8003ca0:	f011 fd08 	bl	80156b4 <__wrap_printf>
 8003ca4:	882a      	ldrh	r2, [r5, #0]
 8003ca6:	af06      	add	r7, sp, #24
 8003ca8:	8839      	ldrh	r1, [r7, #0]
 8003caa:	4821      	ldr	r0, [pc, #132]	; (8003d30 <evalEnvelopeData+0x144>)
 8003cac:	f011 fd02 	bl	80156b4 <__wrap_printf>
 8003cb0:	4a20      	ldr	r2, [pc, #128]	; (8003d34 <evalEnvelopeData+0x148>)
 8003cb2:	0021      	movs	r1, r4
 8003cb4:	481d      	ldr	r0, [pc, #116]	; (8003d2c <evalEnvelopeData+0x140>)
 8003cb6:	f011 fcfd 	bl	80156b4 <__wrap_printf>
	INF_PRINTLN("Peak 2: %d mm | %d arb.", distances[1], amplitudes[1]);
 8003cba:	0030      	movs	r0, r6
 8003cbc:	f011 fcfa 	bl	80156b4 <__wrap_printf>
 8003cc0:	886a      	ldrh	r2, [r5, #2]
 8003cc2:	8879      	ldrh	r1, [r7, #2]
 8003cc4:	481c      	ldr	r0, [pc, #112]	; (8003d38 <evalEnvelopeData+0x14c>)
 8003cc6:	f011 fcf5 	bl	80156b4 <__wrap_printf>
 8003cca:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <evalEnvelopeData+0x150>)
 8003ccc:	0021      	movs	r1, r4
 8003cce:	4817      	ldr	r0, [pc, #92]	; (8003d2c <evalEnvelopeData+0x140>)
 8003cd0:	f011 fcf0 	bl	80156b4 <__wrap_printf>
	INF_PRINTLN("Peak 3: %d mm | %d arb.", distances[2], amplitudes[2]);
 8003cd4:	0030      	movs	r0, r6
 8003cd6:	f011 fced 	bl	80156b4 <__wrap_printf>
 8003cda:	88aa      	ldrh	r2, [r5, #4]
 8003cdc:	88b9      	ldrh	r1, [r7, #4]
 8003cde:	4818      	ldr	r0, [pc, #96]	; (8003d40 <evalEnvelopeData+0x154>)
 8003ce0:	f011 fce8 	bl	80156b4 <__wrap_printf>
 8003ce4:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <evalEnvelopeData+0x158>)
 8003ce6:	0021      	movs	r1, r4
 8003ce8:	4810      	ldr	r0, [pc, #64]	; (8003d2c <evalEnvelopeData+0x140>)
 8003cea:	f011 fce3 	bl	80156b4 <__wrap_printf>
	INF_PRINTLN("Peak 4: %d mm | %d arb.", distances[3], amplitudes[3]);
 8003cee:	0030      	movs	r0, r6
 8003cf0:	f011 fce0 	bl	80156b4 <__wrap_printf>
 8003cf4:	88ea      	ldrh	r2, [r5, #6]
 8003cf6:	88f9      	ldrh	r1, [r7, #6]
 8003cf8:	4813      	ldr	r0, [pc, #76]	; (8003d48 <evalEnvelopeData+0x15c>)
 8003cfa:	f011 fcdb 	bl	80156b4 <__wrap_printf>
 8003cfe:	22e2      	movs	r2, #226	; 0xe2
 8003d00:	0092      	lsls	r2, r2, #2
 8003d02:	0021      	movs	r1, r4
 8003d04:	4809      	ldr	r0, [pc, #36]	; (8003d2c <evalEnvelopeData+0x140>)
 8003d06:	f011 fcd5 	bl	80156b4 <__wrap_printf>
}
 8003d0a:	b00d      	add	sp, #52	; 0x34
 8003d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	2000010c 	.word	0x2000010c
 8003d14:	49742400 	.word	0x49742400
 8003d18:	447a0000 	.word	0x447a0000
 8003d1c:	408f4000 	.word	0x408f4000
 8003d20:	0801dd78 	.word	0x0801dd78
 8003d24:	0801dd80 	.word	0x0801dd80
 8003d28:	0801dd88 	.word	0x0801dd88
 8003d2c:	0801dd48 	.word	0x0801dd48
 8003d30:	0801df84 	.word	0x0801df84
 8003d34:	00000385 	.word	0x00000385
 8003d38:	0801df9c 	.word	0x0801df9c
 8003d3c:	00000386 	.word	0x00000386
 8003d40:	0801dfb4 	.word	0x0801dfb4
 8003d44:	00000387 	.word	0x00000387
 8003d48:	0801dfcc 	.word	0x0801dfcc

08003d4c <fftWindowing>:
{// Weighing factors are computed once before multiple use of FFT
 8003d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d4e:	46c6      	mov	lr, r8
 8003d50:	b500      	push	{lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	0007      	movs	r7, r0
 8003d56:	000e      	movs	r6, r1
 8003d58:	4690      	mov	r8, r2
	double samplesMinusOne = ((double)samples - 1.0);
 8003d5a:	0008      	movs	r0, r1
 8003d5c:	f00f f8be 	bl	8012edc <__aeabi_ui2d>
 8003d60:	2200      	movs	r2, #0
 8003d62:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <fftWindowing+0xe8>)
 8003d64:	f00e fce6 	bl	8012734 <__aeabi_dsub>
 8003d68:	9002      	str	r0, [sp, #8]
 8003d6a:	9103      	str	r1, [sp, #12]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8003d6c:	2400      	movs	r4, #0
 8003d6e:	0033      	movs	r3, r6
 8003d70:	003e      	movs	r6, r7
 8003d72:	001f      	movs	r7, r3
 8003d74:	e01d      	b.n	8003db2 <fftWindowing+0x66>
			vData[i] = (int16_t) vData[i]* weighingFactor;
 8003d76:	0065      	lsls	r5, r4, #1
 8003d78:	1975      	adds	r5, r6, r5
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	5ee8      	ldrsh	r0, [r5, r3]
 8003d7e:	f00f f873 	bl	8012e68 <__aeabi_i2d>
 8003d82:	9a00      	ldr	r2, [sp, #0]
 8003d84:	9b01      	ldr	r3, [sp, #4]
 8003d86:	f00e fa63 	bl	8012250 <__aeabi_dmul>
 8003d8a:	f00f f837 	bl	8012dfc <__aeabi_d2iz>
 8003d8e:	8028      	strh	r0, [r5, #0]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]*weighingFactor;
 8003d90:	1c65      	adds	r5, r4, #1
 8003d92:	1b7d      	subs	r5, r7, r5
 8003d94:	006d      	lsls	r5, r5, #1
 8003d96:	1975      	adds	r5, r6, r5
 8003d98:	2300      	movs	r3, #0
 8003d9a:	5ee8      	ldrsh	r0, [r5, r3]
 8003d9c:	f00f f864 	bl	8012e68 <__aeabi_i2d>
 8003da0:	9a00      	ldr	r2, [sp, #0]
 8003da2:	9b01      	ldr	r3, [sp, #4]
 8003da4:	f00e fa54 	bl	8012250 <__aeabi_dmul>
 8003da8:	f00f f828 	bl	8012dfc <__aeabi_d2iz>
 8003dac:	8028      	strh	r0, [r5, #0]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8003dae:	3401      	adds	r4, #1
 8003db0:	b2a4      	uxth	r4, r4
 8003db2:	087b      	lsrs	r3, r7, #1
 8003db4:	42a3      	cmp	r3, r4
 8003db6:	d938      	bls.n	8003e2a <fftWindowing+0xde>
		double indexMinusOne = (double)i;
 8003db8:	0020      	movs	r0, r4
 8003dba:	f00f f88f 	bl	8012edc <__aeabi_ui2d>
		double ratio = (indexMinusOne / samplesMinusOne);
 8003dbe:	9a02      	ldr	r2, [sp, #8]
 8003dc0:	9b03      	ldr	r3, [sp, #12]
 8003dc2:	f00d fe3b 	bl	8011a3c <__aeabi_ddiv>
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <fftWindowing+0xec>)
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <fftWindowing+0xf0>)
 8003dca:	f00e fa41 	bl	8012250 <__aeabi_dmul>
 8003dce:	f00f fd93 	bl	80138f8 <cos>
 8003dd2:	4a1b      	ldr	r2, [pc, #108]	; (8003e40 <fftWindowing+0xf4>)
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <fftWindowing+0xf8>)
 8003dd6:	f00e fa3b 	bl	8012250 <__aeabi_dmul>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	000b      	movs	r3, r1
 8003dde:	481a      	ldr	r0, [pc, #104]	; (8003e48 <fftWindowing+0xfc>)
 8003de0:	491a      	ldr	r1, [pc, #104]	; (8003e4c <fftWindowing+0x100>)
 8003de2:	f00e fca7 	bl	8012734 <__aeabi_dsub>
 8003de6:	9000      	str	r0, [sp, #0]
 8003de8:	9101      	str	r1, [sp, #4]
		if (dir == FFT_FORWARD) {
 8003dea:	4643      	mov	r3, r8
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d0c2      	beq.n	8003d76 <fftWindowing+0x2a>
			vData[i] = (int16_t) vData[i]/weighingFactor;
 8003df0:	0065      	lsls	r5, r4, #1
 8003df2:	1975      	adds	r5, r6, r5
 8003df4:	2300      	movs	r3, #0
 8003df6:	5ee8      	ldrsh	r0, [r5, r3]
 8003df8:	f00f f836 	bl	8012e68 <__aeabi_i2d>
 8003dfc:	9a00      	ldr	r2, [sp, #0]
 8003dfe:	9b01      	ldr	r3, [sp, #4]
 8003e00:	f00d fe1c 	bl	8011a3c <__aeabi_ddiv>
 8003e04:	f00e fffa 	bl	8012dfc <__aeabi_d2iz>
 8003e08:	8028      	strh	r0, [r5, #0]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]/weighingFactor;
 8003e0a:	1c65      	adds	r5, r4, #1
 8003e0c:	1b7d      	subs	r5, r7, r5
 8003e0e:	006d      	lsls	r5, r5, #1
 8003e10:	1975      	adds	r5, r6, r5
 8003e12:	2300      	movs	r3, #0
 8003e14:	5ee8      	ldrsh	r0, [r5, r3]
 8003e16:	f00f f827 	bl	8012e68 <__aeabi_i2d>
 8003e1a:	9a00      	ldr	r2, [sp, #0]
 8003e1c:	9b01      	ldr	r3, [sp, #4]
 8003e1e:	f00d fe0d 	bl	8011a3c <__aeabi_ddiv>
 8003e22:	f00e ffeb 	bl	8012dfc <__aeabi_d2iz>
 8003e26:	8028      	strh	r0, [r5, #0]
 8003e28:	e7c1      	b.n	8003dae <fftWindowing+0x62>
}
 8003e2a:	b004      	add	sp, #16
 8003e2c:	bc04      	pop	{r2}
 8003e2e:	4690      	mov	r8, r2
 8003e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	3ff00000 	.word	0x3ff00000
 8003e38:	5474a168 	.word	0x5474a168
 8003e3c:	401921fb 	.word	0x401921fb
 8003e40:	d70a3d71 	.word	0xd70a3d71
 8003e44:	3fdd70a3 	.word	0x3fdd70a3
 8003e48:	147ae148 	.word	0x147ae148
 8003e4c:	3fe147ae 	.word	0x3fe147ae

08003e50 <fftComplexToMagnitude>:
{	// vM is half the size of vReal and vImag
 8003e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e52:	46d6      	mov	lr, sl
 8003e54:	464f      	mov	r7, r9
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	4682      	mov	sl, r0
 8003e5c:	4689      	mov	r9, r1
 8003e5e:	0016      	movs	r6, r2
	for (int16_t i = 0; i < samples; i++) {
 8003e60:	2400      	movs	r4, #0
 8003e62:	e01e      	b.n	8003ea2 <fftComplexToMagnitude+0x52>
		vReal[i] = (int16_t) sqrt(sq((float)vReal[i]) + sq((float)vImag[i]));
 8003e64:	0067      	lsls	r7, r4, #1
 8003e66:	4653      	mov	r3, sl
 8003e68:	19dd      	adds	r5, r3, r7
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	5ee8      	ldrsh	r0, [r5, r3]
 8003e6e:	f00d fa3f 	bl	80112f0 <__aeabi_i2f>
 8003e72:	1c01      	adds	r1, r0, #0
 8003e74:	f00c fb08 	bl	8010488 <__aeabi_fmul>
 8003e78:	9001      	str	r0, [sp, #4]
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	5fd8      	ldrsh	r0, [r3, r7]
 8003e7e:	f00d fa37 	bl	80112f0 <__aeabi_i2f>
 8003e82:	1c01      	adds	r1, r0, #0
 8003e84:	f00c fb00 	bl	8010488 <__aeabi_fmul>
 8003e88:	1c01      	adds	r1, r0, #0
 8003e8a:	9801      	ldr	r0, [sp, #4]
 8003e8c:	f00c f850 	bl	800ff30 <__aeabi_fadd>
 8003e90:	f00f f856 	bl	8012f40 <__aeabi_f2d>
 8003e94:	f00f fdce 	bl	8013a34 <sqrt>
 8003e98:	f00e ffb0 	bl	8012dfc <__aeabi_d2iz>
 8003e9c:	8028      	strh	r0, [r5, #0]
	for (int16_t i = 0; i < samples; i++) {
 8003e9e:	3401      	adds	r4, #1
 8003ea0:	b224      	sxth	r4, r4
 8003ea2:	42b4      	cmp	r4, r6
 8003ea4:	dbde      	blt.n	8003e64 <fftComplexToMagnitude+0x14>
}
 8003ea6:	b003      	add	sp, #12
 8003ea8:	bc0c      	pop	{r2, r3}
 8003eaa:	4691      	mov	r9, r2
 8003eac:	469a      	mov	sl, r3
 8003eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eb0 <fftCompute>:
{	
 8003eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eb2:	46de      	mov	lr, fp
 8003eb4:	4657      	mov	r7, sl
 8003eb6:	464e      	mov	r6, r9
 8003eb8:	4645      	mov	r5, r8
 8003eba:	b5e0      	push	{r5, r6, r7, lr}
 8003ebc:	b093      	sub	sp, #76	; 0x4c
 8003ebe:	0007      	movs	r7, r0
 8003ec0:	468a      	mov	sl, r1
 8003ec2:	4693      	mov	fp, r2
 8003ec4:	9310      	str	r3, [sp, #64]	; 0x40
	uint8_t power = fftExponent(samples);
 8003ec6:	b210      	sxth	r0, r2
 8003ec8:	f7fd fe75 	bl	8001bb6 <fftExponent>
 8003ecc:	9011      	str	r0, [sp, #68]	; 0x44
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8003ece:	2500      	movs	r5, #0
	uint16_t j = 0;
 8003ed0:	2400      	movs	r4, #0
 8003ed2:	465e      	mov	r6, fp
 8003ed4:	e01d      	b.n	8003f12 <fftCompute+0x62>
			fftSwap(&vReal[i], &vReal[j]);
 8003ed6:	006b      	lsls	r3, r5, #1
 8003ed8:	4698      	mov	r8, r3
 8003eda:	0063      	lsls	r3, r4, #1
 8003edc:	4699      	mov	r9, r3
 8003ede:	18f9      	adds	r1, r7, r3
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	18f8      	adds	r0, r7, r3
 8003ee4:	f7fd fe5f 	bl	8001ba6 <fftSwap>
			if(dir==FFT_REVERSE)
 8003ee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d116      	bne.n	8003f1c <fftCompute+0x6c>
				fftSwap(&vImag[i], &vImag[j]);
 8003eee:	4653      	mov	r3, sl
 8003ef0:	4652      	mov	r2, sl
 8003ef2:	444a      	add	r2, r9
 8003ef4:	0011      	movs	r1, r2
 8003ef6:	4443      	add	r3, r8
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7fd fe54 	bl	8001ba6 <fftSwap>
 8003efe:	e00d      	b.n	8003f1c <fftCompute+0x6c>
			j -= k;
 8003f00:	1ae4      	subs	r4, r4, r3
 8003f02:	b2a4      	uxth	r4, r4
			k >>= 1;
 8003f04:	085b      	lsrs	r3, r3, #1
		while (k <= j) {
 8003f06:	429c      	cmp	r4, r3
 8003f08:	d2fa      	bcs.n	8003f00 <fftCompute+0x50>
		j += k;
 8003f0a:	18e4      	adds	r4, r4, r3
 8003f0c:	b2a4      	uxth	r4, r4
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8003f0e:	3501      	adds	r5, #1
 8003f10:	b2ad      	uxth	r5, r5
 8003f12:	1e73      	subs	r3, r6, #1
 8003f14:	429d      	cmp	r5, r3
 8003f16:	da03      	bge.n	8003f20 <fftCompute+0x70>
		if (i < j) {
 8003f18:	42ac      	cmp	r4, r5
 8003f1a:	d8dc      	bhi.n	8003ed6 <fftCompute+0x26>
		uint16_t k = (samples >> 1);
 8003f1c:	0873      	lsrs	r3, r6, #1
 8003f1e:	e7f2      	b.n	8003f06 <fftCompute+0x56>
	for (uint8_t l = 0; (l < power); l++) {
 8003f20:	2300      	movs	r3, #0
 8003f22:	4699      	mov	r9, r3
	uint16_t l2 = 1;
 8003f24:	3301      	adds	r3, #1
 8003f26:	0019      	movs	r1, r3
	double c2 = 0.0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	930e      	str	r3, [sp, #56]	; 0x38
 8003f2c:	930d      	str	r3, [sp, #52]	; 0x34
	double c1 = -1.0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	4c7f      	ldr	r4, [pc, #508]	; (8004130 <fftCompute+0x280>)
 8003f32:	930a      	str	r3, [sp, #40]	; 0x28
 8003f34:	940b      	str	r4, [sp, #44]	; 0x2c
 8003f36:	464b      	mov	r3, r9
 8003f38:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f3a:	9608      	str	r6, [sp, #32]
 8003f3c:	46d3      	mov	fp, sl
 8003f3e:	e0d3      	b.n	80040e8 <fftCompute+0x238>
					uint16_t i1 = i + l1;
 8003f40:	464b      	mov	r3, r9
 8003f42:	195c      	adds	r4, r3, r5
 8003f44:	b2a4      	uxth	r4, r4
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 8003f46:	0064      	lsls	r4, r4, #1
 8003f48:	46a0      	mov	r8, r4
 8003f4a:	44d8      	add	r8, fp
 8003f4c:	4643      	mov	r3, r8
 8003f4e:	2000      	movs	r0, #0
 8003f50:	5e18      	ldrsh	r0, [r3, r0]
 8003f52:	f00e ff89 	bl	8012e68 <__aeabi_i2d>
 8003f56:	9a04      	ldr	r2, [sp, #16]
 8003f58:	9b05      	ldr	r3, [sp, #20]
 8003f5a:	9002      	str	r0, [sp, #8]
 8003f5c:	9103      	str	r1, [sp, #12]
 8003f5e:	f00e f977 	bl	8012250 <__aeabi_dmul>
 8003f62:	9000      	str	r0, [sp, #0]
 8003f64:	9101      	str	r1, [sp, #4]
 8003f66:	4454      	add	r4, sl
 8003f68:	2300      	movs	r3, #0
 8003f6a:	5ee0      	ldrsh	r0, [r4, r3]
 8003f6c:	f00e ff7c 	bl	8012e68 <__aeabi_i2d>
 8003f70:	0006      	movs	r6, r0
 8003f72:	000f      	movs	r7, r1
 8003f74:	9a06      	ldr	r2, [sp, #24]
 8003f76:	9b07      	ldr	r3, [sp, #28]
 8003f78:	f00e f96a 	bl	8012250 <__aeabi_dmul>
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	000b      	movs	r3, r1
 8003f80:	9800      	ldr	r0, [sp, #0]
 8003f82:	9901      	ldr	r1, [sp, #4]
 8003f84:	f00e fbd6 	bl	8012734 <__aeabi_dsub>
 8003f88:	9000      	str	r0, [sp, #0]
 8003f8a:	9101      	str	r1, [sp, #4]
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8003f8c:	9a04      	ldr	r2, [sp, #16]
 8003f8e:	9b05      	ldr	r3, [sp, #20]
 8003f90:	0030      	movs	r0, r6
 8003f92:	0039      	movs	r1, r7
 8003f94:	f00e f95c 	bl	8012250 <__aeabi_dmul>
 8003f98:	0006      	movs	r6, r0
 8003f9a:	000f      	movs	r7, r1
 8003f9c:	9a06      	ldr	r2, [sp, #24]
 8003f9e:	9b07      	ldr	r3, [sp, #28]
 8003fa0:	9802      	ldr	r0, [sp, #8]
 8003fa2:	9903      	ldr	r1, [sp, #12]
 8003fa4:	f00e f954 	bl	8012250 <__aeabi_dmul>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	000b      	movs	r3, r1
 8003fac:	0030      	movs	r0, r6
 8003fae:	0039      	movs	r1, r7
 8003fb0:	f00d fa28 	bl	8011404 <__aeabi_dadd>
 8003fb4:	9002      	str	r0, [sp, #8]
 8003fb6:	9103      	str	r1, [sp, #12]
					vReal[i1] = (int16_t) (vReal[i] - t1);
 8003fb8:	006e      	lsls	r6, r5, #1
 8003fba:	465b      	mov	r3, fp
 8003fbc:	199f      	adds	r7, r3, r6
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	5ef8      	ldrsh	r0, [r7, r3]
 8003fc2:	f00e ff51 	bl	8012e68 <__aeabi_i2d>
 8003fc6:	9a00      	ldr	r2, [sp, #0]
 8003fc8:	9b01      	ldr	r3, [sp, #4]
 8003fca:	f00e fbb3 	bl	8012734 <__aeabi_dsub>
 8003fce:	f00e ff15 	bl	8012dfc <__aeabi_d2iz>
 8003fd2:	4643      	mov	r3, r8
 8003fd4:	8018      	strh	r0, [r3, #0]
					vImag[i1] = (int16_t) (vImag[i] - t2);
 8003fd6:	4456      	add	r6, sl
 8003fd8:	2300      	movs	r3, #0
 8003fda:	5ef0      	ldrsh	r0, [r6, r3]
 8003fdc:	f00e ff44 	bl	8012e68 <__aeabi_i2d>
 8003fe0:	9a02      	ldr	r2, [sp, #8]
 8003fe2:	9b03      	ldr	r3, [sp, #12]
 8003fe4:	f00e fba6 	bl	8012734 <__aeabi_dsub>
 8003fe8:	f00e ff08 	bl	8012dfc <__aeabi_d2iz>
 8003fec:	8020      	strh	r0, [r4, #0]
					vReal[i] = (int16_t) (vReal[i] + t1);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	5ef8      	ldrsh	r0, [r7, r3]
 8003ff2:	f00e ff39 	bl	8012e68 <__aeabi_i2d>
 8003ff6:	9a00      	ldr	r2, [sp, #0]
 8003ff8:	9b01      	ldr	r3, [sp, #4]
 8003ffa:	f00d fa03 	bl	8011404 <__aeabi_dadd>
 8003ffe:	f00e fefd 	bl	8012dfc <__aeabi_d2iz>
 8004002:	8038      	strh	r0, [r7, #0]
					vImag[i] = (int16_t) (vImag[i] +t2);
 8004004:	2300      	movs	r3, #0
 8004006:	5ef0      	ldrsh	r0, [r6, r3]
 8004008:	f00e ff2e 	bl	8012e68 <__aeabi_i2d>
 800400c:	9a02      	ldr	r2, [sp, #8]
 800400e:	9b03      	ldr	r3, [sp, #12]
 8004010:	f00d f9f8 	bl	8011404 <__aeabi_dadd>
 8004014:	f00e fef2 	bl	8012dfc <__aeabi_d2iz>
 8004018:	8030      	strh	r0, [r6, #0]
			 for (uint16_t i = j; i < samples; i += l2) {
 800401a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800401c:	469c      	mov	ip, r3
 800401e:	4465      	add	r5, ip
 8004020:	b2ad      	uxth	r5, r5
 8004022:	9b08      	ldr	r3, [sp, #32]
 8004024:	429d      	cmp	r5, r3
 8004026:	d38b      	bcc.n	8003f40 <fftCompute+0x90>
 8004028:	46c8      	mov	r8, r9
			 double z = ((u1 * c1) - (u2 * c2));
 800402a:	9a04      	ldr	r2, [sp, #16]
 800402c:	9b05      	ldr	r3, [sp, #20]
 800402e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004030:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004032:	f00e f90d 	bl	8012250 <__aeabi_dmul>
 8004036:	0004      	movs	r4, r0
 8004038:	000d      	movs	r5, r1
 800403a:	9a06      	ldr	r2, [sp, #24]
 800403c:	9b07      	ldr	r3, [sp, #28]
 800403e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004040:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004042:	f00e f905 	bl	8012250 <__aeabi_dmul>
 8004046:	0002      	movs	r2, r0
 8004048:	000b      	movs	r3, r1
 800404a:	0020      	movs	r0, r4
 800404c:	0029      	movs	r1, r5
 800404e:	f00e fb71 	bl	8012734 <__aeabi_dsub>
 8004052:	0006      	movs	r6, r0
 8004054:	000f      	movs	r7, r1
			 u2 = ((u1 * c2) + (u2 * c1));
 8004056:	9a04      	ldr	r2, [sp, #16]
 8004058:	9b05      	ldr	r3, [sp, #20]
 800405a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800405c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800405e:	f00e f8f7 	bl	8012250 <__aeabi_dmul>
 8004062:	0004      	movs	r4, r0
 8004064:	000d      	movs	r5, r1
 8004066:	9a06      	ldr	r2, [sp, #24]
 8004068:	9b07      	ldr	r3, [sp, #28]
 800406a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800406c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800406e:	f00e f8ef 	bl	8012250 <__aeabi_dmul>
 8004072:	0002      	movs	r2, r0
 8004074:	000b      	movs	r3, r1
 8004076:	0020      	movs	r0, r4
 8004078:	0029      	movs	r1, r5
 800407a:	f00d f9c3 	bl	8011404 <__aeabi_dadd>
 800407e:	9006      	str	r0, [sp, #24]
 8004080:	9107      	str	r1, [sp, #28]
		for (j = 0; j < l1; j++) {
 8004082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004084:	3301      	adds	r3, #1
 8004086:	b29b      	uxth	r3, r3
 8004088:	930c      	str	r3, [sp, #48]	; 0x30
			 u1 = z;
 800408a:	9604      	str	r6, [sp, #16]
 800408c:	9705      	str	r7, [sp, #20]
		for (j = 0; j < l1; j++) {
 800408e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004090:	4543      	cmp	r3, r8
 8004092:	d202      	bcs.n	800409a <fftCompute+0x1ea>
			 for (uint16_t i = j; i < samples; i += l2) {
 8004094:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004096:	46c1      	mov	r9, r8
 8004098:	e7c3      	b.n	8004022 <fftCompute+0x172>
 800409a:	465f      	mov	r7, fp
 800409c:	46d3      	mov	fp, sl
		c2 = sqrt((1.0 - c1) / 2.0);
 800409e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040a2:	2000      	movs	r0, #0
 80040a4:	4923      	ldr	r1, [pc, #140]	; (8004134 <fftCompute+0x284>)
 80040a6:	f00e fb45 	bl	8012734 <__aeabi_dsub>
 80040aa:	2200      	movs	r2, #0
 80040ac:	4b22      	ldr	r3, [pc, #136]	; (8004138 <fftCompute+0x288>)
 80040ae:	f00e f8cf 	bl	8012250 <__aeabi_dmul>
 80040b2:	f00f fcbf 	bl	8013a34 <sqrt>
 80040b6:	900e      	str	r0, [sp, #56]	; 0x38
 80040b8:	910d      	str	r1, [sp, #52]	; 0x34
		if (dir == FFT_FORWARD) {
 80040ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d028      	beq.n	8004112 <fftCompute+0x262>
		c1 = sqrt((1.0 + c1) / 2.0);
 80040c0:	2200      	movs	r2, #0
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <fftCompute+0x284>)
 80040c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80040c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040c8:	f00d f99c 	bl	8011404 <__aeabi_dadd>
 80040cc:	2200      	movs	r2, #0
 80040ce:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <fftCompute+0x288>)
 80040d0:	f00e f8be 	bl	8012250 <__aeabi_dmul>
 80040d4:	f00f fcae 	bl	8013a34 <sqrt>
 80040d8:	900a      	str	r0, [sp, #40]	; 0x28
 80040da:	910b      	str	r1, [sp, #44]	; 0x2c
	for (uint8_t l = 0; (l < power); l++) {
 80040dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040de:	3301      	adds	r3, #1
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	930f      	str	r3, [sp, #60]	; 0x3c
		l2 <<= 1;
 80040e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e6:	0019      	movs	r1, r3
	for (uint8_t l = 0; (l < power); l++) {
 80040e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d217      	bcs.n	8004120 <fftCompute+0x270>
		l2 <<= 1;
 80040f0:	004b      	lsls	r3, r1, #1
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	9309      	str	r3, [sp, #36]	; 0x24
		double u2 = 0.0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	2400      	movs	r4, #0
 80040fa:	9306      	str	r3, [sp, #24]
 80040fc:	9407      	str	r4, [sp, #28]
		double u1 = 1.0;
 80040fe:	2300      	movs	r3, #0
 8004100:	4c0c      	ldr	r4, [pc, #48]	; (8004134 <fftCompute+0x284>)
 8004102:	9304      	str	r3, [sp, #16]
 8004104:	9405      	str	r4, [sp, #20]
		for (j = 0; j < l1; j++) {
 8004106:	2300      	movs	r3, #0
 8004108:	930c      	str	r3, [sp, #48]	; 0x30
 800410a:	4688      	mov	r8, r1
 800410c:	46da      	mov	sl, fp
 800410e:	46bb      	mov	fp, r7
 8004110:	e7bd      	b.n	800408e <fftCompute+0x1de>
			c2 = -c2;
 8004112:	000b      	movs	r3, r1
 8004114:	2280      	movs	r2, #128	; 0x80
 8004116:	0612      	lsls	r2, r2, #24
 8004118:	4694      	mov	ip, r2
 800411a:	4463      	add	r3, ip
 800411c:	930d      	str	r3, [sp, #52]	; 0x34
 800411e:	e7cf      	b.n	80040c0 <fftCompute+0x210>
}
 8004120:	b013      	add	sp, #76	; 0x4c
 8004122:	bc3c      	pop	{r2, r3, r4, r5}
 8004124:	4690      	mov	r8, r2
 8004126:	4699      	mov	r9, r3
 8004128:	46a2      	mov	sl, r4
 800412a:	46ab      	mov	fp, r5
 800412c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	bff00000 	.word	0xbff00000
 8004134:	3ff00000 	.word	0x3ff00000
 8004138:	3fe00000 	.word	0x3fe00000

0800413c <dofft>:
float dofft(uint16_t** data, uint8v2_t data_size){
 800413c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413e:	46de      	mov	lr, fp
 8004140:	4657      	mov	r7, sl
 8004142:	464e      	mov	r6, r9
 8004144:	4645      	mov	r5, r8
 8004146:	b5e0      	push	{r5, r6, r7, lr}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	0006      	movs	r6, r0
 800414e:	040b      	lsls	r3, r1, #16
 8004150:	81b9      	strh	r1, [r7, #12]
	uint8_t sweeps = data_size.x1;
 8004152:	b2ca      	uxtb	r2, r1
 8004154:	4690      	mov	r8, r2
	uint8_t bins = data_size.x2;
 8004156:	0e1b      	lsrs	r3, r3, #24
 8004158:	603b      	str	r3, [r7, #0]
	float scales[bins];
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	330a      	adds	r3, #10
 800415e:	08db      	lsrs	r3, r3, #3
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	466a      	mov	r2, sp
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	469d      	mov	sp, r3
 8004168:	46eb      	mov	fp, sp
	int16_t real[sweeps];
 800416a:	4643      	mov	r3, r8
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	3308      	adds	r3, #8
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	466a      	mov	r2, sp
 8004176:	1ad2      	subs	r2, r2, r3
 8004178:	4695      	mov	sp, r2
 800417a:	60ba      	str	r2, [r7, #8]
	int16_t imag[sweeps];
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	469d      	mov	sp, r3
 8004180:	46e9      	mov	r9, sp
	for(uint16_t i = 0; i<bins; i++){
 8004182:	2400      	movs	r4, #0
 8004184:	e04d      	b.n	8004222 <dofft+0xe6>
		  real[j] = data[j][i];
 8004186:	009a      	lsls	r2, r3, #2
 8004188:	5992      	ldr	r2, [r2, r6]
 800418a:	0061      	lsls	r1, r4, #1
 800418c:	5e89      	ldrsh	r1, [r1, r2]
 800418e:	005a      	lsls	r2, r3, #1
 8004190:	68b8      	ldr	r0, [r7, #8]
 8004192:	5211      	strh	r1, [r2, r0]
		for (uint16_t j = 0; j < sweeps; j++) {
 8004194:	3301      	adds	r3, #1
 8004196:	b29b      	uxth	r3, r3
 8004198:	4642      	mov	r2, r8
 800419a:	b295      	uxth	r5, r2
 800419c:	42ab      	cmp	r3, r5
 800419e:	d3f2      	bcc.n	8004186 <dofft+0x4a>
		for (uint16_t j = 0; j < sweeps; j++) {
 80041a0:	2300      	movs	r3, #0
 80041a2:	e005      	b.n	80041b0 <dofft+0x74>
		  imag[j] = 0;
 80041a4:	005a      	lsls	r2, r3, #1
 80041a6:	2100      	movs	r1, #0
 80041a8:	4648      	mov	r0, r9
 80041aa:	5211      	strh	r1, [r2, r0]
		for (uint16_t j = 0; j < sweeps; j++) {
 80041ac:	3301      	adds	r3, #1
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	42ab      	cmp	r3, r5
 80041b2:	d3f7      	bcc.n	80041a4 <dofft+0x68>
		scales[i] = fftRangeScaling(real, sweeps);
 80041b4:	0029      	movs	r1, r5
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	469a      	mov	sl, r3
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7fd fd05 	bl	8001bca <fftRangeScaling>
 80041c0:	00a3      	lsls	r3, r4, #2
 80041c2:	465a      	mov	r2, fp
 80041c4:	5098      	str	r0, [r3, r2]
		fftWindowing(real, sweeps, FFT_FORWARD);
 80041c6:	2201      	movs	r2, #1
 80041c8:	0029      	movs	r1, r5
 80041ca:	4650      	mov	r0, sl
 80041cc:	f7ff fdbe 	bl	8003d4c <fftWindowing>
		fftCompute(real, imag, sweeps, FFT_FORWARD);
 80041d0:	2301      	movs	r3, #1
 80041d2:	002a      	movs	r2, r5
 80041d4:	4649      	mov	r1, r9
 80041d6:	4650      	mov	r0, sl
 80041d8:	f7ff fe6a 	bl	8003eb0 <fftCompute>
		fftComplexToMagnitude(real, imag, sweeps);
 80041dc:	002a      	movs	r2, r5
 80041de:	4649      	mov	r1, r9
 80041e0:	4650      	mov	r0, sl
 80041e2:	f7ff fe35 	bl	8003e50 <fftComplexToMagnitude>
		for (uint16_t j = 0; j < sweeps/2; j++) {
 80041e6:	2200      	movs	r2, #0
 80041e8:	e00a      	b.n	8004200 <dofft+0xc4>
		  data[j][i] = real[j];
 80041ea:	0093      	lsls	r3, r2, #2
 80041ec:	5999      	ldr	r1, [r3, r6]
 80041ee:	0063      	lsls	r3, r4, #1
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	0050      	lsls	r0, r2, #1
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	5ac0      	ldrh	r0, [r0, r3]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	52c8      	strh	r0, [r1, r3]
		for (uint16_t j = 0; j < sweeps/2; j++) {
 80041fc:	3201      	adds	r2, #1
 80041fe:	b292      	uxth	r2, r2
 8004200:	4643      	mov	r3, r8
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	429a      	cmp	r2, r3
 8004206:	d3f0      	bcc.n	80041ea <dofft+0xae>
 8004208:	e007      	b.n	800421a <dofft+0xde>
		  data[j][i] = 0;
 800420a:	009a      	lsls	r2, r3, #2
 800420c:	5992      	ldr	r2, [r2, r6]
 800420e:	0061      	lsls	r1, r4, #1
 8004210:	1852      	adds	r2, r2, r1
 8004212:	2100      	movs	r1, #0
 8004214:	8011      	strh	r1, [r2, #0]
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8004216:	3301      	adds	r3, #1
 8004218:	b29b      	uxth	r3, r3
 800421a:	42ab      	cmp	r3, r5
 800421c:	d3f5      	bcc.n	800420a <dofft+0xce>
	for(uint16_t i = 0; i<bins; i++){
 800421e:	3401      	adds	r4, #1
 8004220:	b2a4      	uxth	r4, r4
 8004222:	883b      	ldrh	r3, [r7, #0]
 8004224:	469a      	mov	sl, r3
 8004226:	429c      	cmp	r4, r3
 8004228:	d201      	bcs.n	800422e <dofft+0xf2>
		for (uint16_t j = 0; j < sweeps; j++) {
 800422a:	2300      	movs	r3, #0
 800422c:	e7b4      	b.n	8004198 <dofft+0x5c>
	float min_scale = scales[0];
 800422e:	465b      	mov	r3, fp
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	607b      	str	r3, [r7, #4]
	for(uint16_t i =1; i<bins; i++){
 8004234:	2501      	movs	r5, #1
 8004236:	e001      	b.n	800423c <dofft+0x100>
 8004238:	3501      	adds	r5, #1
 800423a:	b2ad      	uxth	r5, r5
 800423c:	4555      	cmp	r5, sl
 800423e:	d20a      	bcs.n	8004256 <dofft+0x11a>
		if (scales[i] < min_scale){
 8004240:	00ab      	lsls	r3, r5, #2
 8004242:	465a      	mov	r2, fp
 8004244:	589c      	ldr	r4, [r3, r2]
 8004246:	1c21      	adds	r1, r4, #0
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f00c fe29 	bl	8010ea0 <__aeabi_fcmpgt>
 800424e:	2800      	cmp	r0, #0
 8004250:	d0f2      	beq.n	8004238 <dofft+0xfc>
			min_scale = scales[i];		
 8004252:	607c      	str	r4, [r7, #4]
 8004254:	e7f0      	b.n	8004238 <dofft+0xfc>
	for(uint16_t i =0; i<bins; i++){
 8004256:	2300      	movs	r3, #0
 8004258:	4699      	mov	r9, r3
 800425a:	e017      	b.n	800428c <dofft+0x150>
			data[j][i] *= scaling_factor;
 800425c:	00a3      	lsls	r3, r4, #2
 800425e:	599d      	ldr	r5, [r3, r6]
 8004260:	464b      	mov	r3, r9
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	18ed      	adds	r5, r5, r3
 8004266:	8828      	ldrh	r0, [r5, #0]
 8004268:	f00d f842 	bl	80112f0 <__aeabi_i2f>
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	f00c f90b 	bl	8010488 <__aeabi_fmul>
 8004272:	f00c fe49 	bl	8010f08 <__aeabi_f2uiz>
 8004276:	8028      	strh	r0, [r5, #0]
		for(uint16_t j = 0; j < sweeps/2; j++){
 8004278:	3401      	adds	r4, #1
 800427a:	b2a4      	uxth	r4, r4
 800427c:	4643      	mov	r3, r8
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	429c      	cmp	r4, r3
 8004282:	d3eb      	bcc.n	800425c <dofft+0x120>
	for(uint16_t i =0; i<bins; i++){
 8004284:	464b      	mov	r3, r9
 8004286:	3301      	adds	r3, #1
 8004288:	b29b      	uxth	r3, r3
 800428a:	4699      	mov	r9, r3
 800428c:	45d1      	cmp	r9, sl
 800428e:	d209      	bcs.n	80042a4 <dofft+0x168>
		float scaling_factor = min_scale/scales[i]; 
 8004290:	464b      	mov	r3, r9
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	465a      	mov	r2, fp
 8004296:	5899      	ldr	r1, [r3, r2]
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f00b ffe3 	bl	8010264 <__aeabi_fdiv>
 800429e:	60b8      	str	r0, [r7, #8]
		for(uint16_t j = 0; j < sweeps/2; j++){
 80042a0:	2400      	movs	r4, #0
 80042a2:	e7eb      	b.n	800427c <dofft+0x140>
}
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b005      	add	sp, #20
 80042aa:	bc3c      	pop	{r2, r3, r4, r5}
 80042ac:	4690      	mov	r8, r2
 80042ae:	4699      	mov	r9, r3
 80042b0:	46a2      	mov	sl, r4
 80042b2:	46ab      	mov	fp, r5
 80042b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042b6 <evalSparseData>:
void evalSparseData(void){
 80042b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042b8:	46de      	mov	lr, fp
 80042ba:	4657      	mov	r7, sl
 80042bc:	464e      	mov	r6, r9
 80042be:	4645      	mov	r5, r8
 80042c0:	b5e0      	push	{r5, r6, r7, lr}
 80042c2:	b089      	sub	sp, #36	; 0x24
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 80042c4:	4c91      	ldr	r4, [pc, #580]	; (800450c <evalSparseData+0x256>)
 80042c6:	238c      	movs	r3, #140	; 0x8c
 80042c8:	58e0      	ldr	r0, [r4, r3]
 80042ca:	4991      	ldr	r1, [pc, #580]	; (8004510 <evalSparseData+0x25a>)
 80042cc:	f00c f8dc 	bl	8010488 <__aeabi_fmul>
 80042d0:	f00c fe1a 	bl	8010f08 <__aeabi_f2uiz>
 80042d4:	b286      	uxth	r6, r0
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 80042d6:	498e      	ldr	r1, [pc, #568]	; (8004510 <evalSparseData+0x25a>)
 80042d8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80042da:	f00c f8d5 	bl	8010488 <__aeabi_fmul>
 80042de:	f00c fe13 	bl	8010f08 <__aeabi_f2uiz>
 80042e2:	b285      	uxth	r5, r0
	float sweep_rate = sparse_metadata.sweep_rate;
 80042e4:	2388      	movs	r3, #136	; 0x88
 80042e6:	58e3      	ldr	r3, [r4, r3]
 80042e8:	4699      	mov	r9, r3
	uint8v2_t data_size = {sweeps,bins};
 80042ea:	ab07      	add	r3, sp, #28
 80042ec:	2264      	movs	r2, #100	; 0x64
 80042ee:	5aa2      	ldrh	r2, [r4, r2]
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	2266      	movs	r2, #102	; 0x66
 80042f4:	5aa2      	ldrh	r2, [r4, r2]
 80042f6:	705a      	strb	r2, [r3, #1]
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 80042f8:	20d4      	movs	r0, #212	; 0xd4
 80042fa:	f7fd fccd 	bl	8001c98 <RegInt_getreg>
 80042fe:	f00d f841 	bl	8011384 <__aeabi_ui2f>
 8004302:	4983      	ldr	r1, [pc, #524]	; (8004510 <evalSparseData+0x25a>)
 8004304:	f00b ffae 	bl	8010264 <__aeabi_fdiv>
 8004308:	9001      	str	r0, [sp, #4]
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 800430a:	20d8      	movs	r0, #216	; 0xd8
 800430c:	f7fd fcc4 	bl	8001c98 <RegInt_getreg>
 8004310:	f00d f838 	bl	8011384 <__aeabi_ui2f>
 8004314:	497e      	ldr	r1, [pc, #504]	; (8004510 <evalSparseData+0x25a>)
 8004316:	f00b ffa5 	bl	8010264 <__aeabi_fdiv>
 800431a:	9002      	str	r0, [sp, #8]
	uint32_t mode = RegInt_getreg(0xD6);
 800431c:	20d6      	movs	r0, #214	; 0xd6
 800431e:	f7fd fcbb 	bl	8001c98 <RegInt_getreg>
 8004322:	0004      	movs	r4, r0
	uint8_t roi_radius = RegInt_getreg(0xD7);
 8004324:	20d7      	movs	r0, #215	; 0xd7
 8004326:	f7fd fcb7 	bl	8001c98 <RegInt_getreg>
 800432a:	b2c3      	uxtb	r3, r0
 800432c:	4698      	mov	r8, r3
	uint32_t band_filt = RegInt_getreg(0xD9);
 800432e:	20d9      	movs	r0, #217	; 0xd9
 8004330:	f7fd fcb2 	bl	8001c98 <RegInt_getreg>
 8004334:	0007      	movs	r7, r0
	DBG_PRINTINT(mode);
 8004336:	4877      	ldr	r0, [pc, #476]	; (8004514 <evalSparseData+0x25e>)
 8004338:	f011 f9bc 	bl	80156b4 <__wrap_printf>
 800433c:	0022      	movs	r2, r4
 800433e:	4976      	ldr	r1, [pc, #472]	; (8004518 <evalSparseData+0x262>)
 8004340:	4876      	ldr	r0, [pc, #472]	; (800451c <evalSparseData+0x266>)
 8004342:	f011 f9b7 	bl	80156b4 <__wrap_printf>
 8004346:	4a76      	ldr	r2, [pc, #472]	; (8004520 <evalSparseData+0x26a>)
 8004348:	4976      	ldr	r1, [pc, #472]	; (8004524 <evalSparseData+0x26e>)
 800434a:	4877      	ldr	r0, [pc, #476]	; (8004528 <evalSparseData+0x272>)
 800434c:	f011 f9b2 	bl	80156b4 <__wrap_printf>
	if(mode & 0x00000001){dcdatarm(data, data_size);}
 8004350:	07e3      	lsls	r3, r4, #31
 8004352:	d411      	bmi.n	8004378 <evalSparseData+0xc2>
	if(mode & 0x00000002){min_scale = dofft(data, data_size);}
 8004354:	07a3      	lsls	r3, r4, #30
 8004356:	d415      	bmi.n	8004384 <evalSparseData+0xce>
	float min_scale = 1.0f;
 8004358:	23fe      	movs	r3, #254	; 0xfe
 800435a:	059b      	lsls	r3, r3, #22
 800435c:	9300      	str	r3, [sp, #0]
	if(mode & 0x00000020){dobandstop(data, data_size, band_filt);}
 800435e:	06a3      	lsls	r3, r4, #26
 8004360:	d417      	bmi.n	8004392 <evalSparseData+0xdc>
	if(mode & 0x00000004){
 8004362:	0763      	lsls	r3, r4, #29
 8004364:	d41c      	bmi.n	80043a0 <evalSparseData+0xea>
	if(mode & 0x00000008){
 8004366:	0723      	lsls	r3, r4, #28
 8004368:	d429      	bmi.n	80043be <evalSparseData+0x108>
}
 800436a:	b009      	add	sp, #36	; 0x24
 800436c:	bc3c      	pop	{r2, r3, r4, r5}
 800436e:	4690      	mov	r8, r2
 8004370:	4699      	mov	r9, r3
 8004372:	46a2      	mov	sl, r4
 8004374:	46ab      	mov	fp, r5
 8004376:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode & 0x00000001){dcdatarm(data, data_size);}
 8004378:	4b64      	ldr	r3, [pc, #400]	; (800450c <evalSparseData+0x256>)
 800437a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800437c:	9907      	ldr	r1, [sp, #28]
 800437e:	f7fd fbd0 	bl	8001b22 <dcdatarm>
 8004382:	e7e7      	b.n	8004354 <evalSparseData+0x9e>
	if(mode & 0x00000002){min_scale = dofft(data, data_size);}
 8004384:	4b61      	ldr	r3, [pc, #388]	; (800450c <evalSparseData+0x256>)
 8004386:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004388:	9907      	ldr	r1, [sp, #28]
 800438a:	f7ff fed7 	bl	800413c <dofft>
 800438e:	9000      	str	r0, [sp, #0]
 8004390:	e7e5      	b.n	800435e <evalSparseData+0xa8>
	if(mode & 0x00000020){dobandstop(data, data_size, band_filt);}
 8004392:	4b5e      	ldr	r3, [pc, #376]	; (800450c <evalSparseData+0x256>)
 8004394:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004396:	003a      	movs	r2, r7
 8004398:	9907      	ldr	r1, [sp, #28]
 800439a:	f7fd fba2 	bl	8001ae2 <dobandstop>
 800439e:	e7e0      	b.n	8004362 <evalSparseData+0xac>
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 80043a0:	20d5      	movs	r0, #213	; 0xd5
 80043a2:	f7fd fc79 	bl	8001c98 <RegInt_getreg>
 80043a6:	f00c ffed 	bl	8011384 <__aeabi_ui2f>
 80043aa:	4959      	ldr	r1, [pc, #356]	; (8004510 <evalSparseData+0x25a>)
 80043ac:	f00b ff5a 	bl	8010264 <__aeabi_fdiv>
 80043b0:	1c02      	adds	r2, r0, #0
		doconv(data, data_size, st_dev);
 80043b2:	4b56      	ldr	r3, [pc, #344]	; (800450c <evalSparseData+0x256>)
 80043b4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80043b6:	9907      	ldr	r1, [sp, #28]
 80043b8:	f7ff fbe8 	bl	8003b8c <doconv>
 80043bc:	e7d3      	b.n	8004366 <evalSparseData+0xb0>
		uint8v2_t max_index = max2d(data, data_size);
 80043be:	4b53      	ldr	r3, [pc, #332]	; (800450c <evalSparseData+0x256>)
 80043c0:	469b      	mov	fp, r3
 80043c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c4:	469a      	mov	sl, r3
 80043c6:	9907      	ldr	r1, [sp, #28]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7fd fa89 	bl	80018e0 <max2d>
 80043ce:	0403      	lsls	r3, r0, #16
 80043d0:	aa04      	add	r2, sp, #16
 80043d2:	8010      	strh	r0, [r2, #0]
		uint16_t apex = data[max_index.x1][max_index.x2];
 80043d4:	b2c7      	uxtb	r7, r0
 80043d6:	00ba      	lsls	r2, r7, #2
 80043d8:	4651      	mov	r1, sl
 80043da:	5852      	ldr	r2, [r2, r1]
 80043dc:	0e1b      	lsrs	r3, r3, #24
 80043de:	469a      	mov	sl, r3
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	5ad3      	ldrh	r3, [r2, r3]
 80043e4:	9303      	str	r3, [sp, #12]
		DBG_PRINTINT(apex);
 80043e6:	484b      	ldr	r0, [pc, #300]	; (8004514 <evalSparseData+0x25e>)
 80043e8:	f011 f964 	bl	80156b4 <__wrap_printf>
 80043ec:	9a03      	ldr	r2, [sp, #12]
 80043ee:	494f      	ldr	r1, [pc, #316]	; (800452c <evalSparseData+0x276>)
 80043f0:	484a      	ldr	r0, [pc, #296]	; (800451c <evalSparseData+0x266>)
 80043f2:	f011 f95f 	bl	80156b4 <__wrap_printf>
 80043f6:	4a4e      	ldr	r2, [pc, #312]	; (8004530 <evalSparseData+0x27a>)
 80043f8:	494a      	ldr	r1, [pc, #296]	; (8004524 <evalSparseData+0x26e>)
 80043fa:	484b      	ldr	r0, [pc, #300]	; (8004528 <evalSparseData+0x272>)
 80043fc:	f011 f95a 	bl	80156b4 <__wrap_printf>
		DBG_PRINTINT(max_index.x1);
 8004400:	4844      	ldr	r0, [pc, #272]	; (8004514 <evalSparseData+0x25e>)
 8004402:	f011 f957 	bl	80156b4 <__wrap_printf>
 8004406:	003a      	movs	r2, r7
 8004408:	494a      	ldr	r1, [pc, #296]	; (8004534 <evalSparseData+0x27e>)
 800440a:	4844      	ldr	r0, [pc, #272]	; (800451c <evalSparseData+0x266>)
 800440c:	f011 f952 	bl	80156b4 <__wrap_printf>
 8004410:	22d3      	movs	r2, #211	; 0xd3
 8004412:	0092      	lsls	r2, r2, #2
 8004414:	4943      	ldr	r1, [pc, #268]	; (8004524 <evalSparseData+0x26e>)
 8004416:	4844      	ldr	r0, [pc, #272]	; (8004528 <evalSparseData+0x272>)
 8004418:	f011 f94c 	bl	80156b4 <__wrap_printf>
		DBG_PRINTINT(max_index.x2);
 800441c:	483d      	ldr	r0, [pc, #244]	; (8004514 <evalSparseData+0x25e>)
 800441e:	f011 f949 	bl	80156b4 <__wrap_printf>
 8004422:	4652      	mov	r2, sl
 8004424:	4944      	ldr	r1, [pc, #272]	; (8004538 <evalSparseData+0x282>)
 8004426:	483d      	ldr	r0, [pc, #244]	; (800451c <evalSparseData+0x266>)
 8004428:	f011 f944 	bl	80156b4 <__wrap_printf>
 800442c:	4a43      	ldr	r2, [pc, #268]	; (800453c <evalSparseData+0x286>)
 800442e:	493d      	ldr	r1, [pc, #244]	; (8004524 <evalSparseData+0x26e>)
 8004430:	483d      	ldr	r0, [pc, #244]	; (8004528 <evalSparseData+0x272>)
 8004432:	f011 f93f 	bl	80156b4 <__wrap_printf>
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 8004436:	465b      	mov	r3, fp
 8004438:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800443a:	9b01      	ldr	r3, [sp, #4]
 800443c:	9a04      	ldr	r2, [sp, #16]
 800443e:	9907      	ldr	r1, [sp, #28]
 8004440:	f7fd f9d9 	bl	80017f6 <get_msd>
 8004444:	1c07      	adds	r7, r0, #0
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 8004446:	06e3      	lsls	r3, r4, #27
 8004448:	d456      	bmi.n	80044f8 <evalSparseData+0x242>
		floatv2_t com = center_of_mass(max_index, roi_radius);
 800444a:	4642      	mov	r2, r8
 800444c:	9904      	ldr	r1, [sp, #16]
 800444e:	a805      	add	r0, sp, #20
 8004450:	f7fd fad4 	bl	80019fc <center_of_mass>
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 8004454:	9c06      	ldr	r4, [sp, #24]
 8004456:	0030      	movs	r0, r6
 8004458:	f00c ff4a 	bl	80112f0 <__aeabi_i2f>
 800445c:	1c21      	adds	r1, r4, #0
 800445e:	f00c f813 	bl	8010488 <__aeabi_fmul>
 8004462:	1c04      	adds	r4, r0, #0
 8004464:	0028      	movs	r0, r5
 8004466:	f00c ff43 	bl	80112f0 <__aeabi_i2f>
 800446a:	1c01      	adds	r1, r0, #0
 800446c:	1c20      	adds	r0, r4, #0
 800446e:	f00b fd5f 	bl	800ff30 <__aeabi_fadd>
 8004472:	1c04      	adds	r4, r0, #0
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 8004474:	4a25      	ldr	r2, [pc, #148]	; (800450c <evalSparseData+0x256>)
 8004476:	2364      	movs	r3, #100	; 0x64
 8004478:	5ad0      	ldrh	r0, [r2, r3]
 800447a:	f00c ff39 	bl	80112f0 <__aeabi_i2f>
 800447e:	1c01      	adds	r1, r0, #0
 8004480:	4648      	mov	r0, r9
 8004482:	f00b feef 	bl	8010264 <__aeabi_fdiv>
 8004486:	1c01      	adds	r1, r0, #0
 8004488:	9805      	ldr	r0, [sp, #20]
 800448a:	f00b fffd 	bl	8010488 <__aeabi_fmul>
 800448e:	492c      	ldr	r1, [pc, #176]	; (8004540 <evalSparseData+0x28a>)
 8004490:	f00b fffa 	bl	8010488 <__aeabi_fmul>
 8004494:	1c05      	adds	r5, r0, #0
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 8004496:	2100      	movs	r1, #0
 8004498:	9e00      	ldr	r6, [sp, #0]
 800449a:	1c30      	adds	r0, r6, #0
 800449c:	f00c fce6 	bl	8010e6c <__aeabi_fcmpeq>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d131      	bne.n	8004508 <evalSparseData+0x252>
 80044a4:	9803      	ldr	r0, [sp, #12]
 80044a6:	f00c ff23 	bl	80112f0 <__aeabi_i2f>
 80044aa:	1c31      	adds	r1, r6, #0
 80044ac:	f00b feda 	bl	8010264 <__aeabi_fdiv>
 80044b0:	1c06      	adds	r6, r0, #0
		RegInt_setregf(0xD0,(uint32_t)velocity, 1);
 80044b2:	1c28      	adds	r0, r5, #0
 80044b4:	f00c fd28 	bl	8010f08 <__aeabi_f2uiz>
 80044b8:	0001      	movs	r1, r0
 80044ba:	2201      	movs	r2, #1
 80044bc:	20d0      	movs	r0, #208	; 0xd0
 80044be:	f7ff fa61 	bl	8003984 <RegInt_setregf>
		RegInt_setregf(0xD1,(uint32_t)distance, 1);
 80044c2:	1c20      	adds	r0, r4, #0
 80044c4:	f00c fd20 	bl	8010f08 <__aeabi_f2uiz>
 80044c8:	0001      	movs	r1, r0
 80044ca:	2201      	movs	r2, #1
 80044cc:	20d1      	movs	r0, #209	; 0xd1
 80044ce:	f7ff fa59 	bl	8003984 <RegInt_setregf>
		RegInt_setregf(0xD2,(uint32_t)amplitude, 1);
 80044d2:	1c30      	adds	r0, r6, #0
 80044d4:	f00c fd18 	bl	8010f08 <__aeabi_f2uiz>
 80044d8:	0001      	movs	r1, r0
 80044da:	2201      	movs	r2, #1
 80044dc:	20d2      	movs	r0, #210	; 0xd2
 80044de:	f7ff fa51 	bl	8003984 <RegInt_setregf>
		RegInt_setregf(0xD3,(uint32_t)meansqdist, 1);
 80044e2:	1c38      	adds	r0, r7, #0
 80044e4:	f00c fd10 	bl	8010f08 <__aeabi_f2uiz>
 80044e8:	0001      	movs	r1, r0
 80044ea:	2201      	movs	r2, #1
 80044ec:	20d3      	movs	r0, #211	; 0xd3
 80044ee:	f7ff fa49 	bl	8003984 <RegInt_setregf>
		print_sparse_results();
 80044f2:	f7fe fe6b 	bl	80031cc <print_sparse_results>
 80044f6:	e738      	b.n	800436a <evalSparseData+0xb4>
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 80044f8:	4b04      	ldr	r3, [pc, #16]	; (800450c <evalSparseData+0x256>)
 80044fa:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80044fc:	9b02      	ldr	r3, [sp, #8]
 80044fe:	9a04      	ldr	r2, [sp, #16]
 8004500:	9907      	ldr	r1, [sp, #28]
 8004502:	f7fd f943 	bl	800178c <null_data>
 8004506:	e7a0      	b.n	800444a <evalSparseData+0x194>
		else{amplitude = 0;}
 8004508:	2600      	movs	r6, #0
 800450a:	e7d2      	b.n	80044b2 <evalSparseData+0x1fc>
 800450c:	2000010c 	.word	0x2000010c
 8004510:	447a0000 	.word	0x447a0000
 8004514:	0801dec0 	.word	0x0801dec0
 8004518:	0801dfe4 	.word	0x0801dfe4
 800451c:	0801dfec 	.word	0x0801dfec
 8004520:	00000335 	.word	0x00000335
 8004524:	0801dd88 	.word	0x0801dd88
 8004528:	0801dd48 	.word	0x0801dd48
 800452c:	0801dff4 	.word	0x0801dff4
 8004530:	0000034b 	.word	0x0000034b
 8004534:	0801dffc 	.word	0x0801dffc
 8004538:	0801e00c 	.word	0x0801e00c
 800453c:	0000034d 	.word	0x0000034d
 8004540:	401c7ae1 	.word	0x401c7ae1

08004544 <evalData>:
void evalData(void){
 8004544:	b510      	push	{r4, lr}
	uint32_t service_type = RegInt_getreg(0x02);
 8004546:	2002      	movs	r0, #2
 8004548:	f7fd fba6 	bl	8001c98 <RegInt_getreg>
    if(service_type == 0x02){evalEnvelopeData();}
 800454c:	2802      	cmp	r0, #2
 800454e:	d002      	beq.n	8004556 <evalData+0x12>
    else if(service_type == 0x04){evalSparseData();}
 8004550:	2804      	cmp	r0, #4
 8004552:	d003      	beq.n	800455c <evalData+0x18>
}
 8004554:	bd10      	pop	{r4, pc}
    if(service_type == 0x02){evalEnvelopeData();}
 8004556:	f7ff fb49 	bl	8003bec <evalEnvelopeData>
 800455a:	e7fb      	b.n	8004554 <evalData+0x10>
    else if(service_type == 0x04){evalSparseData();}
 800455c:	f7ff feab 	bl	80042b6 <evalSparseData>
 8004560:	e7f8      	b.n	8004554 <evalData+0x10>

08004562 <RegInt_Init>:
void RegInt_Init(void){
 8004562:	b510      	push	{r4, lr}
	queue_cmd_end = 0;
 8004564:	4a2c      	ldr	r2, [pc, #176]	; (8004618 <RegInt_Init+0xb6>)
 8004566:	2360      	movs	r3, #96	; 0x60
 8004568:	2100      	movs	r1, #0
 800456a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 0xFF; i++){
 800456c:	2400      	movs	r4, #0
 800456e:	e006      	b.n	800457e <RegInt_Init+0x1c>
		RegInt_setregf(i, 0, 1);
 8004570:	2201      	movs	r2, #1
 8004572:	2100      	movs	r1, #0
 8004574:	0020      	movs	r0, r4
 8004576:	f7ff fa05 	bl	8003984 <RegInt_setregf>
	for(uint8_t i = 0; i < 0xFF; i++){
 800457a:	3401      	adds	r4, #1
 800457c:	b2e4      	uxtb	r4, r4
 800457e:	2cff      	cmp	r4, #255	; 0xff
 8004580:	d1f6      	bne.n	8004570 <RegInt_Init+0xe>
	RegInt_setregf(0x07, 115200, 1);//set default baud rate
 8004582:	21e1      	movs	r1, #225	; 0xe1
 8004584:	2201      	movs	r2, #1
 8004586:	0249      	lsls	r1, r1, #9
 8004588:	2007      	movs	r0, #7
 800458a:	f7ff f9fb 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0x0A, 0, 1);//set default baud rate
 800458e:	2201      	movs	r2, #1
 8004590:	2100      	movs	r1, #0
 8004592:	200a      	movs	r0, #10
 8004594:	f7ff f9f6 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0x10, HARDWARE_REVISION, 1);//set product identification register
 8004598:	2201      	movs	r2, #1
 800459a:	4920      	ldr	r1, [pc, #128]	; (800461c <RegInt_Init+0xba>)
 800459c:	2010      	movs	r0, #16
 800459e:	f7ff f9f1 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0x11, FIRMWARE_REVISION, 1);//set firmware revision register
 80045a2:	2201      	movs	r2, #1
 80045a4:	491e      	ldr	r1, [pc, #120]	; (8004620 <RegInt_Init+0xbe>)
 80045a6:	2011      	movs	r0, #17
 80045a8:	f7ff f9ec 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0xD4, 600, 1);//set default mean sq distance threshold
 80045ac:	2196      	movs	r1, #150	; 0x96
 80045ae:	2201      	movs	r2, #1
 80045b0:	0089      	lsls	r1, r1, #2
 80045b2:	20d4      	movs	r0, #212	; 0xd4
 80045b4:	f7ff f9e6 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0xD5, 1000, 1);//set default radius for gf kernal
 80045b8:	21fa      	movs	r1, #250	; 0xfa
 80045ba:	2201      	movs	r2, #1
 80045bc:	0089      	lsls	r1, r1, #2
 80045be:	20d5      	movs	r0, #213	; 0xd5
 80045c0:	f7ff f9e0 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0xD6, 0x0000000F, 1);//set default eval mode
 80045c4:	2201      	movs	r2, #1
 80045c6:	210f      	movs	r1, #15
 80045c8:	20d6      	movs	r0, #214	; 0xd6
 80045ca:	f7ff f9db 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0xD7, 0x00000002, 1);//set default radius for averaging
 80045ce:	2201      	movs	r2, #1
 80045d0:	2102      	movs	r1, #2
 80045d2:	20d7      	movs	r0, #215	; 0xd7
 80045d4:	f7ff f9d6 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0xD8, 500, 1);//sets theshold data zeroing
 80045d8:	21fa      	movs	r1, #250	; 0xfa
 80045da:	2201      	movs	r2, #1
 80045dc:	0049      	lsls	r1, r1, #1
 80045de:	20d8      	movs	r0, #216	; 0xd8
 80045e0:	f7ff f9d0 	bl	8003984 <RegInt_setregf>
	RegInt_setregf(0xD9, 0x00000000, 1);//sets no bandstop
 80045e4:	2201      	movs	r2, #1
 80045e6:	2100      	movs	r1, #0
 80045e8:	20d9      	movs	r0, #217	; 0xd9
 80045ea:	f7ff f9cb 	bl	8003984 <RegInt_setregf>
	uart_state = 0;
 80045ee:	490a      	ldr	r1, [pc, #40]	; (8004618 <RegInt_Init+0xb6>)
 80045f0:	2361      	movs	r3, #97	; 0x61
 80045f2:	2200      	movs	r2, #0
 80045f4:	54ca      	strb	r2, [r1, r3]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 80045f6:	3164      	adds	r1, #100	; 0x64
 80045f8:	3201      	adds	r2, #1
 80045fa:	480a      	ldr	r0, [pc, #40]	; (8004624 <RegInt_Init+0xc2>)
 80045fc:	f008 f9a6 	bl	800c94c <HAL_UART_Receive_IT>
	DBG_PRINTLN("Registers Initialised");
 8004600:	4809      	ldr	r0, [pc, #36]	; (8004628 <RegInt_Init+0xc6>)
 8004602:	f011 f857 	bl	80156b4 <__wrap_printf>
 8004606:	4809      	ldr	r0, [pc, #36]	; (800462c <RegInt_Init+0xca>)
 8004608:	f011 f854 	bl	80156b4 <__wrap_printf>
 800460c:	2285      	movs	r2, #133	; 0x85
 800460e:	4908      	ldr	r1, [pc, #32]	; (8004630 <RegInt_Init+0xce>)
 8004610:	4808      	ldr	r0, [pc, #32]	; (8004634 <RegInt_Init+0xd2>)
 8004612:	f011 f84f 	bl	80156b4 <__wrap_printf>
}
 8004616:	bd10      	pop	{r4, pc}
 8004618:	2000018c 	.word	0x2000018c
 800461c:	bd010100 	.word	0xbd010100
 8004620:	bf010400 	.word	0xbf010400
 8004624:	20000400 	.word	0x20000400
 8004628:	0801dec0 	.word	0x0801dec0
 800462c:	0801e01c 	.word	0x0801e01c
 8004630:	0801dd88 	.word	0x0801dd88
 8004634:	0801dd48 	.word	0x0801dd48

08004638 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004638:	b500      	push	{lr}
 800463a:	b083      	sub	sp, #12
	if (queue_cmd_end == 2){
 800463c:	4a0c      	ldr	r2, [pc, #48]	; (8004670 <HAL_UART_TxCpltCallback+0x38>)
 800463e:	2360      	movs	r3, #96	; 0x60
 8004640:	5cd3      	ldrb	r3, [r2, r3]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d003      	beq.n	800464e <HAL_UART_TxCpltCallback+0x16>
	}else if(queue_cmd_end == 1){
 8004646:	2b01      	cmp	r3, #1
 8004648:	d005      	beq.n	8004656 <HAL_UART_TxCpltCallback+0x1e>
}
 800464a:	b003      	add	sp, #12
 800464c:	bd00      	pop	{pc}
		queue_cmd_end = 1;
 800464e:	335e      	adds	r3, #94	; 0x5e
 8004650:	2101      	movs	r1, #1
 8004652:	54d1      	strb	r1, [r2, r3]
 8004654:	e7f9      	b.n	800464a <HAL_UART_TxCpltCallback+0x12>
		queue_cmd_end = 0;
 8004656:	4a06      	ldr	r2, [pc, #24]	; (8004670 <HAL_UART_TxCpltCallback+0x38>)
 8004658:	335f      	adds	r3, #95	; 0x5f
 800465a:	2100      	movs	r1, #0
 800465c:	54d1      	strb	r1, [r2, r3]
		uint8_t end = 0xCD;
 800465e:	466b      	mov	r3, sp
 8004660:	1dd9      	adds	r1, r3, #7
 8004662:	23cd      	movs	r3, #205	; 0xcd
 8004664:	700b      	strb	r3, [r1, #0]
		HAL_UART_Transmit_IT(huart, &end, 1);
 8004666:	2201      	movs	r2, #1
 8004668:	f008 f9fe 	bl	800ca68 <HAL_UART_Transmit_IT>
 800466c:	e7ed      	b.n	800464a <HAL_UART_TxCpltCallback+0x12>
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	2000018c 	.word	0x2000018c

08004674 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004674:	b500      	push	{lr}
 8004676:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004678:	4a0c      	ldr	r2, [pc, #48]	; (80046ac <MX_DMA_Init+0x38>)
 800467a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800467c:	2301      	movs	r3, #1
 800467e:	4319      	orrs	r1, r3
 8004680:	6391      	str	r1, [r2, #56]	; 0x38
 8004682:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004684:	4013      	ands	r3, r2
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800468a:	2100      	movs	r1, #0
 800468c:	2009      	movs	r0, #9
 800468e:	f007 ff1b 	bl	800c4c8 <HAL_NVIC_SetPriority.constprop.89>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004692:	2009      	movs	r0, #9
 8004694:	f008 fb0a 	bl	800ccac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004698:	2100      	movs	r1, #0
 800469a:	200a      	movs	r0, #10
 800469c:	f007 ff14 	bl	800c4c8 <HAL_NVIC_SetPriority.constprop.89>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80046a0:	200a      	movs	r0, #10
 80046a2:	f008 fb03 	bl	800ccac <HAL_NVIC_EnableIRQ>

}
 80046a6:	b003      	add	sp, #12
 80046a8:	bd00      	pop	{pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	40021000 	.word	0x40021000

080046b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b2:	46d6      	mov	lr, sl
 80046b4:	b500      	push	{lr}
 80046b6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	2214      	movs	r2, #20
 80046ba:	2100      	movs	r1, #0
 80046bc:	a803      	add	r0, sp, #12
 80046be:	f00e ffa5 	bl	801360c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c2:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <MX_GPIO_Init+0x114>)
 80046c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c6:	2601      	movs	r6, #1
 80046c8:	4332      	orrs	r2, r6
 80046ca:	635a      	str	r2, [r3, #52]	; 0x34
 80046cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ce:	4032      	ands	r2, r6
 80046d0:	9201      	str	r2, [sp, #4]
 80046d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d6:	2702      	movs	r7, #2
 80046d8:	433a      	orrs	r2, r7
 80046da:	635a      	str	r2, [r3, #52]	; 0x34
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	403b      	ands	r3, r7
 80046e0:	9302      	str	r3, [sp, #8]
 80046e2:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_INT_Pin|A111_ENABLE_Pin, GPIO_PIN_RESET);
 80046e4:	2188      	movs	r1, #136	; 0x88
 80046e6:	2200      	movs	r2, #0
 80046e8:	0049      	lsls	r1, r1, #1
 80046ea:	20a0      	movs	r0, #160	; 0xa0
 80046ec:	05c0      	lsls	r0, r0, #23
 80046ee:	f009 fe41 	bl	800e374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A111_CS_N_Pin|A111_CTRL_Pin|PS_ENABLE_Pin, GPIO_PIN_RESET);
 80046f2:	2200      	movs	r2, #0
 80046f4:	4934      	ldr	r1, [pc, #208]	; (80047c8 <MX_GPIO_Init+0x118>)
 80046f6:	4835      	ldr	r0, [pc, #212]	; (80047cc <MX_GPIO_Init+0x11c>)
 80046f8:	f009 fe3c 	bl	800e374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMU_ENABLE_GPIO_Port, PMU_ENABLE_Pin, GPIO_PIN_SET);
 80046fc:	2201      	movs	r2, #1
 80046fe:	2102      	movs	r1, #2
 8004700:	4832      	ldr	r0, [pc, #200]	; (80047cc <MX_GPIO_Init+0x11c>)
 8004702:	f009 fe37 	bl	800e374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MISC_GPIO2_Pin MISC_GPIO0_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 8004706:	2503      	movs	r5, #3
 8004708:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800470a:	2400      	movs	r4, #0
 800470c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800470e:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004710:	a903      	add	r1, sp, #12
 8004712:	20a0      	movs	r0, #160	; 0xa0
 8004714:	05c0      	lsls	r0, r0, #23
 8004716:	f009 fe33 	bl	800e380 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_INT_Pin */
  GPIO_InitStruct.Pin = MCU_INT_Pin;
 800471a:	2310      	movs	r3, #16
 800471c:	469a      	mov	sl, r3
 800471e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004720:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004724:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 8004726:	a903      	add	r1, sp, #12
 8004728:	20a0      	movs	r0, #160	; 0xa0
 800472a:	05c0      	lsls	r0, r0, #23
 800472c:	f009 fe28 	bl	800e380 <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_CS_N_Pin PMU_ENABLE_Pin PS_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <MX_GPIO_Init+0x120>)
 8004732:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004734:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004736:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004738:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473a:	a903      	add	r1, sp, #12
 800473c:	4823      	ldr	r0, [pc, #140]	; (80047cc <MX_GPIO_Init+0x11c>)
 800473e:	f009 fe1f 	bl	800e380 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_ADDRESS_Pin MISC_GPIO1_Pin */
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 8004742:	23c0      	movs	r3, #192	; 0xc0
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004748:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800474a:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800474c:	a903      	add	r1, sp, #12
 800474e:	481f      	ldr	r0, [pc, #124]	; (80047cc <MX_GPIO_Init+0x11c>)
 8004750:	f009 fe16 	bl	800e380 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800475a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004760:	a903      	add	r1, sp, #12
 8004762:	20a0      	movs	r0, #160	; 0xa0
 8004764:	05c0      	lsls	r0, r0, #23
 8004766:	f009 fe0b 	bl	800e380 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 800476a:	2308      	movs	r3, #8
 800476c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800476e:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <MX_GPIO_Init+0x124>)
 8004770:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004772:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8004774:	a903      	add	r1, sp, #12
 8004776:	4815      	ldr	r0, [pc, #84]	; (80047cc <MX_GPIO_Init+0x11c>)
 8004778:	f009 fe02 	bl	800e380 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_CTRL_Pin */
  GPIO_InitStruct.Pin = A111_CTRL_Pin;
 800477c:	4653      	mov	r3, sl
 800477e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004780:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004784:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 8004786:	a903      	add	r1, sp, #12
 8004788:	4810      	ldr	r0, [pc, #64]	; (80047cc <MX_GPIO_Init+0x11c>)
 800478a:	f009 fdf9 	bl	800e380 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKE_UP_Pin */
  GPIO_InitStruct.Pin = WAKE_UP_Pin;
 800478e:	2320      	movs	r3, #32
 8004790:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <MX_GPIO_Init+0x128>)
 8004794:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004796:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 8004798:	a903      	add	r1, sp, #12
 800479a:	480c      	ldr	r0, [pc, #48]	; (80047cc <MX_GPIO_Init+0x11c>)
 800479c:	f009 fdf0 	bl	800e380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80047a0:	2100      	movs	r1, #0
 80047a2:	2006      	movs	r0, #6
 80047a4:	f007 fe90 	bl	800c4c8 <HAL_NVIC_SetPriority.constprop.89>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80047a8:	2006      	movs	r0, #6
 80047aa:	f008 fa7f 	bl	800ccac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80047ae:	2100      	movs	r1, #0
 80047b0:	2007      	movs	r0, #7
 80047b2:	f007 fe89 	bl	800c4c8 <HAL_NVIC_SetPriority.constprop.89>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80047b6:	2007      	movs	r0, #7
 80047b8:	f008 fa78 	bl	800ccac <HAL_NVIC_EnableIRQ>

}
 80047bc:	b008      	add	sp, #32
 80047be:	bc04      	pop	{r2}
 80047c0:	4692      	mov	sl, r2
 80047c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c4:	40021000 	.word	0x40021000
 80047c8:	00000211 	.word	0x00000211
 80047cc:	50000400 	.word	0x50000400
 80047d0:	00000203 	.word	0x00000203
 80047d4:	10110000 	.word	0x10110000
 80047d8:	10310000 	.word	0x10310000

080047dc <MX_USART2_UART_Init>:
{
 80047dc:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80047de:	4c10      	ldr	r4, [pc, #64]	; (8004820 <MX_USART2_UART_Init+0x44>)
 80047e0:	4b10      	ldr	r3, [pc, #64]	; (8004824 <MX_USART2_UART_Init+0x48>)
 80047e2:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 921600;
 80047e4:	23e1      	movs	r3, #225	; 0xe1
 80047e6:	031b      	lsls	r3, r3, #12
 80047e8:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047ee:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047f0:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047f2:	220c      	movs	r2, #12
 80047f4:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047f6:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047f8:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047fa:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80047fc:	6263      	str	r3, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047fe:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004800:	0020      	movs	r0, r4
 8004802:	f009 fe9f 	bl	800e544 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004806:	2100      	movs	r1, #0
 8004808:	0020      	movs	r0, r4
 800480a:	f008 f861 	bl	800c8d0 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800480e:	2100      	movs	r1, #0
 8004810:	0020      	movs	r0, r4
 8004812:	f008 f839 	bl	800c888 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004816:	0020      	movs	r0, r4
 8004818:	f008 f87b 	bl	800c912 <HAL_UARTEx_DisableFifoMode>
}
 800481c:	bd10      	pop	{r4, pc}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	20000638 	.word	0x20000638
 8004824:	40004400 	.word	0x40004400

08004828 <MX_USART1_UART_Init>:
{
 8004828:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800482a:	4c10      	ldr	r4, [pc, #64]	; (800486c <MX_USART1_UART_Init+0x44>)
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <MX_USART1_UART_Init+0x48>)
 800482e:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = baudrate;
 8004830:	6060      	str	r0, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004832:	2300      	movs	r3, #0
 8004834:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004836:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004838:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800483a:	220c      	movs	r2, #12
 800483c:	6162      	str	r2, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800483e:	22c0      	movs	r2, #192	; 0xc0
 8004840:	0092      	lsls	r2, r2, #2
 8004842:	61a2      	str	r2, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004844:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004846:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004848:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800484a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800484c:	0020      	movs	r0, r4
 800484e:	f009 fe79 	bl	800e544 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004852:	2100      	movs	r1, #0
 8004854:	0020      	movs	r0, r4
 8004856:	f008 f83b 	bl	800c8d0 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800485a:	2100      	movs	r1, #0
 800485c:	0020      	movs	r0, r4
 800485e:	f008 f813 	bl	800c888 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004862:	0020      	movs	r0, r4
 8004864:	f008 f855 	bl	800c912 <HAL_UARTEx_DisableFifoMode>
}
 8004868:	bd10      	pop	{r4, pc}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	20000400 	.word	0x20000400
 8004870:	40013800 	.word	0x40013800

08004874 <changeUART1baud>:
void changeUART1baud(uint32_t baudrate){
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	0005      	movs	r5, r0
	HAL_UART_DeInit(&huart1);
 8004878:	4c06      	ldr	r4, [pc, #24]	; (8004894 <changeUART1baud+0x20>)
 800487a:	0020      	movs	r0, r4
 800487c:	f008 f9c4 	bl	800cc08 <HAL_UART_DeInit>
	MX_USART1_UART_Init(baudrate);
 8004880:	0028      	movs	r0, r5
 8004882:	f7ff ffd1 	bl	8004828 <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8004886:	4904      	ldr	r1, [pc, #16]	; (8004898 <changeUART1baud+0x24>)
 8004888:	2201      	movs	r2, #1
 800488a:	3164      	adds	r1, #100	; 0x64
 800488c:	0020      	movs	r0, r4
 800488e:	f008 f85d 	bl	800c94c <HAL_UART_Receive_IT>
}
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	20000400 	.word	0x20000400
 8004898:	2000018c 	.word	0x2000018c

0800489c <MX_SPI1_Init>:
{
 800489c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 800489e:	480e      	ldr	r0, [pc, #56]	; (80048d8 <MX_SPI1_Init+0x3c>)
 80048a0:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <MX_SPI1_Init+0x40>)
 80048a2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80048a4:	2382      	movs	r3, #130	; 0x82
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80048aa:	2300      	movs	r3, #0
 80048ac:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80048ae:	22e0      	movs	r2, #224	; 0xe0
 80048b0:	00d2      	lsls	r2, r2, #3
 80048b2:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048b4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048b6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80048b8:	2280      	movs	r2, #128	; 0x80
 80048ba:	0092      	lsls	r2, r2, #2
 80048bc:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048be:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048c0:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80048c2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80048c6:	3afa      	subs	r2, #250	; 0xfa
 80048c8:	3aff      	subs	r2, #255	; 0xff
 80048ca:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80048cc:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80048ce:	3308      	adds	r3, #8
 80048d0:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80048d2:	f00a fc0b 	bl	800f0ec <HAL_SPI_Init>
}
 80048d6:	bd10      	pop	{r4, pc}
 80048d8:	200004e0 	.word	0x200004e0
 80048dc:	40013000 	.word	0x40013000

080048e0 <MX_RTC_Init>:
{
 80048e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e2:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 80048e4:	ae0b      	add	r6, sp, #44	; 0x2c
 80048e6:	2214      	movs	r2, #20
 80048e8:	2100      	movs	r1, #0
 80048ea:	0030      	movs	r0, r6
 80048ec:	f00e fe8e 	bl	801360c <memset>
  RTC_DateTypeDef sDate = {0};
 80048f0:	af0a      	add	r7, sp, #40	; 0x28
 80048f2:	2400      	movs	r4, #0
 80048f4:	940a      	str	r4, [sp, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80048f6:	2228      	movs	r2, #40	; 0x28
 80048f8:	2100      	movs	r1, #0
 80048fa:	4668      	mov	r0, sp
 80048fc:	f00e fe86 	bl	801360c <memset>
  hrtc.Instance = RTC;
 8004900:	4d22      	ldr	r5, [pc, #136]	; (800498c <MX_RTC_Init+0xac>)
 8004902:	4b23      	ldr	r3, [pc, #140]	; (8004990 <MX_RTC_Init+0xb0>)
 8004904:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004906:	60ac      	str	r4, [r5, #8]
  hrtc.Init.AsynchPrediv = 31;
 8004908:	231f      	movs	r3, #31
 800490a:	60eb      	str	r3, [r5, #12]
  hrtc.Init.SynchPrediv = 999;
 800490c:	4b21      	ldr	r3, [pc, #132]	; (8004994 <MX_RTC_Init+0xb4>)
 800490e:	612b      	str	r3, [r5, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004910:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004912:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004914:	61ec      	str	r4, [r5, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	05db      	lsls	r3, r3, #23
 800491a:	622b      	str	r3, [r5, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800491c:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800491e:	0028      	movs	r0, r5
 8004920:	f008 fc3c 	bl	800d19c <HAL_RTC_Init>
  sTime.Hours = 0;
 8004924:	7034      	strb	r4, [r6, #0]
  sTime.Minutes = 0;
 8004926:	7074      	strb	r4, [r6, #1]
  sTime.Seconds = 0;
 8004928:	70b4      	strb	r4, [r6, #2]
  sTime.SubSeconds = 0;
 800492a:	6074      	str	r4, [r6, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800492c:	60f4      	str	r4, [r6, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800492e:	6134      	str	r4, [r6, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004930:	2200      	movs	r2, #0
 8004932:	0031      	movs	r1, r6
 8004934:	0028      	movs	r0, r5
 8004936:	f008 fbbb 	bl	800d0b0 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800493a:	2601      	movs	r6, #1
 800493c:	703e      	strb	r6, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800493e:	707e      	strb	r6, [r7, #1]
  sDate.Date = 1;
 8004940:	70be      	strb	r6, [r7, #2]
  sDate.Year = 0;
 8004942:	70fc      	strb	r4, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004944:	2200      	movs	r2, #0
 8004946:	0039      	movs	r1, r7
 8004948:	0028      	movs	r0, r5
 800494a:	f008 fb53 	bl	800cff4 <HAL_RTC_SetDate>
  sAlarm.AlarmTime.Hours = 0;
 800494e:	466b      	mov	r3, sp
 8004950:	701c      	strb	r4, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8004952:	705c      	strb	r4, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8004954:	709c      	strb	r4, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004956:	9401      	str	r4, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004958:	9403      	str	r4, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800495a:	9404      	str	r4, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800495c:	9405      	str	r4, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800495e:	9406      	str	r4, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004960:	9407      	str	r4, [sp, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8004962:	2320      	movs	r3, #32
 8004964:	466a      	mov	r2, sp
 8004966:	54d6      	strb	r6, [r2, r3]
  sAlarm.Alarm = RTC_ALARM_A;
 8004968:	33e0      	adds	r3, #224	; 0xe0
 800496a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800496c:	2200      	movs	r2, #0
 800496e:	4669      	mov	r1, sp
 8004970:	0028      	movs	r0, r5
 8004972:	f008 fa71 	bl	800ce58 <HAL_RTC_SetAlarm_IT>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004976:	2200      	movs	r2, #0
 8004978:	4907      	ldr	r1, [pc, #28]	; (8004998 <MX_RTC_Init+0xb8>)
 800497a:	0028      	movs	r0, r5
 800497c:	f008 f9de 	bl	800cd3c <HAL_RTCEx_SetWakeUpTimer_IT>
  if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 8004980:	0028      	movs	r0, r5
 8004982:	f008 f99f 	bl	800ccc4 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 8004986:	b011      	add	sp, #68	; 0x44
 8004988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	20000548 	.word	0x20000548
 8004990:	40002800 	.word	0x40002800
 8004994:	000003e7 	.word	0x000003e7
 8004998:	0000ffff 	.word	0x0000ffff

0800499c <MX_I2C1_Init>:
{
 800499c:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 800499e:	4c0e      	ldr	r4, [pc, #56]	; (80049d8 <MX_I2C1_Init+0x3c>)
 80049a0:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <MX_I2C1_Init+0x40>)
 80049a2:	6263      	str	r3, [r4, #36]	; 0x24
  hi2c1.Init.Timing = 0x10707DBC;
 80049a4:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <MX_I2C1_Init+0x44>)
 80049a6:	62a3      	str	r3, [r4, #40]	; 0x28
  hi2c1.Init.OwnAddress1 = 164;
 80049a8:	23a4      	movs	r3, #164	; 0xa4
 80049aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049ac:	3ba3      	subs	r3, #163	; 0xa3
 80049ae:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c1.Init.OwnAddress2 = 0;
 80049b4:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80049b6:	63e3      	str	r3, [r4, #60]	; 0x3c
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049b8:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049ba:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80049bc:	3424      	adds	r4, #36	; 0x24
 80049be:	0020      	movs	r0, r4
 80049c0:	f00a fc1c 	bl	800f1fc <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80049c4:	2100      	movs	r1, #0
 80049c6:	0020      	movs	r0, r4
 80049c8:	f008 fc7c 	bl	800d2c4 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80049cc:	2100      	movs	r1, #0
 80049ce:	0020      	movs	r0, r4
 80049d0:	f008 fc54 	bl	800d27c <HAL_I2CEx_ConfigDigitalFilter>
}
 80049d4:	bd10      	pop	{r4, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	2000020c 	.word	0x2000020c
 80049dc:	40005400 	.word	0x40005400
 80049e0:	10707dbc 	.word	0x10707dbc

080049e4 <SystemClock_Config>:
{
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049e8:	2238      	movs	r2, #56	; 0x38
 80049ea:	2100      	movs	r1, #0
 80049ec:	a812      	add	r0, sp, #72	; 0x48
 80049ee:	f00e fe0d 	bl	801360c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049f2:	2210      	movs	r2, #16
 80049f4:	2100      	movs	r1, #0
 80049f6:	a80e      	add	r0, sp, #56	; 0x38
 80049f8:	f00e fe08 	bl	801360c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049fc:	2234      	movs	r2, #52	; 0x34
 80049fe:	2100      	movs	r1, #0
 8004a00:	a801      	add	r0, sp, #4
 8004a02:	f00e fe03 	bl	801360c <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a06:	2680      	movs	r6, #128	; 0x80
 8004a08:	00b6      	lsls	r6, r6, #2
 8004a0a:	0030      	movs	r0, r6
 8004a0c:	f008 fccc 	bl	800d3a8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004a10:	230a      	movs	r3, #10
 8004a12:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a14:	33f6      	adds	r3, #246	; 0xf6
 8004a16:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004a18:	2400      	movs	r4, #0
 8004a1a:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a1c:	3bc0      	subs	r3, #192	; 0xc0
 8004a1e:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004a20:	3b3f      	subs	r3, #63	; 0x3f
 8004a22:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a24:	2502      	movs	r5, #2
 8004a26:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a28:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004a2a:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004a2c:	3307      	adds	r3, #7
 8004a2e:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	029b      	lsls	r3, r3, #10
 8004a34:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	049b      	lsls	r3, r3, #18
 8004a3a:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	059b      	lsls	r3, r3, #22
 8004a40:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a42:	a812      	add	r0, sp, #72	; 0x48
 8004a44:	f009 fa8a 	bl	800df5c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a48:	2307      	movs	r3, #7
 8004a4a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a4c:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a4e:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a50:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004a52:	2102      	movs	r1, #2
 8004a54:	a80e      	add	r0, sp, #56	; 0x38
 8004a56:	f009 f9cf 	bl	800ddf8 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <SystemClock_Config+0x8c>)
 8004a5c:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004a5e:	9402      	str	r4, [sp, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004a60:	9403      	str	r4, [sp, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004a62:	9405      	str	r4, [sp, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a64:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a66:	a801      	add	r0, sp, #4
 8004a68:	f009 f8c2 	bl	800dbf0 <HAL_RCCEx_PeriphCLKConfig>
}
 8004a6c:	b020      	add	sp, #128	; 0x80
 8004a6e:	bd70      	pop	{r4, r5, r6, pc}
 8004a70:	00020043 	.word	0x00020043

08004a74 <EnableBootLoader>:
{
 8004a74:	b500      	push	{lr}
 8004a76:	b091      	sub	sp, #68	; 0x44
  FLASH_OBProgramInitTypeDef obInit = {0};
 8004a78:	2238      	movs	r2, #56	; 0x38
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	a802      	add	r0, sp, #8
 8004a7e:	f00e fdc5 	bl	801360c <memset>
  HAL_FLASHEx_OBGetConfig(&obInit);
 8004a82:	a802      	add	r0, sp, #8
 8004a84:	f008 ff60 	bl	800d948 <HAL_FLASHEx_OBGetConfig>
  if (((obInit.USERConfig & OB_USER_nBOOT1) == OB_BOOT1_SYSTEM) &&
 8004a88:	9b08      	ldr	r3, [sp, #32]
 8004a8a:	22c0      	movs	r2, #192	; 0xc0
 8004a8c:	0492      	lsls	r2, r2, #18
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	0492      	lsls	r2, r2, #18
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d018      	beq.n	8004aca <EnableBootLoader+0x56>
  printf("Enabling BOOT0\n");
 8004a98:	4818      	ldr	r0, [pc, #96]	; (8004afc <EnableBootLoader+0x88>)
 8004a9a:	f010 fdf9 	bl	8015690 <__wrap_puts>
  obInit.USERConfig &= ~OB_USER_nBOOT1;
 8004a9e:	9b08      	ldr	r3, [sp, #32]
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <EnableBootLoader+0x8c>)
 8004aa4:	9a01      	ldr	r2, [sp, #4]
 8004aa6:	4013      	ands	r3, r2
  obInit.USERConfig &= ~OB_USER_nBOOT_SEL;
 8004aa8:	4a16      	ldr	r2, [pc, #88]	; (8004b04 <EnableBootLoader+0x90>)
 8004aaa:	4013      	ands	r3, r2
  obInit.USERConfig |= OB_BOOT1_SYSTEM;
 8004aac:	2280      	movs	r2, #128	; 0x80
 8004aae:	0492      	lsls	r2, r2, #18
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	9308      	str	r3, [sp, #32]
  obInit.OptionType = OPTIONBYTE_USER;
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	9302      	str	r3, [sp, #8]
  HAL_StatusTypeDef result = HAL_FLASH_Unlock();
 8004ab8:	f009 f888 	bl	800dbcc <HAL_FLASH_Unlock>
  if (result == HAL_OK)
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d008      	beq.n	8004ad2 <EnableBootLoader+0x5e>
  printf("BOOT0 enable failed\n");
 8004ac0:	4811      	ldr	r0, [pc, #68]	; (8004b08 <EnableBootLoader+0x94>)
 8004ac2:	f010 fde5 	bl	8015690 <__wrap_puts>
}
 8004ac6:	b011      	add	sp, #68	; 0x44
 8004ac8:	bd00      	pop	{pc}
    printf("Boot config OK\n");
 8004aca:	4810      	ldr	r0, [pc, #64]	; (8004b0c <EnableBootLoader+0x98>)
 8004acc:	f010 fde0 	bl	8015690 <__wrap_puts>
 8004ad0:	e7f9      	b.n	8004ac6 <EnableBootLoader+0x52>
    result = HAL_FLASH_OB_Unlock();
 8004ad2:	f009 f85b 	bl	800db8c <HAL_FLASH_OB_Unlock>
    if (result == HAL_OK)
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d002      	beq.n	8004ae0 <EnableBootLoader+0x6c>
    HAL_FLASH_Lock();
 8004ada:	f009 f86b 	bl	800dbb4 <HAL_FLASH_Lock>
 8004ade:	e7ef      	b.n	8004ac0 <EnableBootLoader+0x4c>
      result = HAL_FLASHEx_OBProgram(&obInit);
 8004ae0:	a802      	add	r0, sp, #8
 8004ae2:	f008 ff91 	bl	800da08 <HAL_FLASHEx_OBProgram>
      if (result == HAL_OK)
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d002      	beq.n	8004af0 <EnableBootLoader+0x7c>
      HAL_FLASH_OB_Lock();
 8004aea:	f009 f841 	bl	800db70 <HAL_FLASH_OB_Lock>
 8004aee:	e7f4      	b.n	8004ada <EnableBootLoader+0x66>
        printf("Reset and reload\n");
 8004af0:	4807      	ldr	r0, [pc, #28]	; (8004b10 <EnableBootLoader+0x9c>)
 8004af2:	f010 fdcd 	bl	8015690 <__wrap_puts>
        HAL_FLASH_OB_Launch();
 8004af6:	f009 f831 	bl	800db5c <HAL_FLASH_OB_Launch>
 8004afa:	e7f6      	b.n	8004aea <EnableBootLoader+0x76>
 8004afc:	0801e044 	.word	0x0801e044
 8004b00:	fdffffff 	.word	0xfdffffff
 8004b04:	feffffff 	.word	0xfeffffff
 8004b08:	0801e068 	.word	0x0801e068
 8004b0c:	0801e034 	.word	0x0801e034
 8004b10:	0801e054 	.word	0x0801e054

08004b14 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8004b14:	b40c      	push	{r2, r3}
 8004b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b18:	464f      	mov	r7, r9
 8004b1a:	4646      	mov	r6, r8
 8004b1c:	46d6      	mov	lr, sl
 8004b1e:	b5c0      	push	{r6, r7, lr}
 8004b20:	b0ac      	sub	sp, #176	; 0xb0
 8004b22:	ab34      	add	r3, sp, #208	; 0xd0
 8004b24:	cb04      	ldmia	r3!, {r2}
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8004b26:	ad06      	add	r5, sp, #24
{
 8004b28:	0006      	movs	r6, r0
 8004b2a:	4689      	mov	r9, r1
	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8004b2c:	0028      	movs	r0, r5
 8004b2e:	2196      	movs	r1, #150	; 0x96
	va_start(ap, format);
 8004b30:	9305      	str	r3, [sp, #20]
	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8004b32:	f010 fde1 	bl	80156f8 <__wrap_vsnprintf>
	if (ret >= LOG_BUFFER_MAX_SIZE)
 8004b36:	2895      	cmp	r0, #149	; 0x95
 8004b38:	dd06      	ble.n	8004b48 <acc_integration_log+0x34>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8004b3a:	23aa      	movs	r3, #170	; 0xaa
 8004b3c:	4a20      	ldr	r2, [pc, #128]	; (8004bc0 <acc_integration_log+0xac>)
 8004b3e:	446b      	add	r3, sp
 8004b40:	801a      	strh	r2, [r3, #0]
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8004b42:	222e      	movs	r2, #46	; 0x2e
 8004b44:	ab2b      	add	r3, sp, #172	; 0xac
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <acc_integration_log+0xb0>)

	uint32_t time_ms = acc_integration_get_time();
	char     level_ch;

	unsigned int timestamp    = time_ms;
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8004b4a:	491f      	ldr	r1, [pc, #124]	; (8004bc8 <acc_integration_log+0xb4>)
 8004b4c:	681c      	ldr	r4, [r3, #0]
 8004b4e:	0020      	movs	r0, r4
 8004b50:	f00b ffcc 	bl	8010aec <__udivsi3>
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8004b54:	491d      	ldr	r1, [pc, #116]	; (8004bcc <acc_integration_log+0xb8>)
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8004b56:	0007      	movs	r7, r0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8004b58:	0020      	movs	r0, r4
 8004b5a:	f00b ffc7 	bl	8010aec <__udivsi3>
 8004b5e:	213c      	movs	r1, #60	; 0x3c
 8004b60:	f00c f84a 	bl	8010bf8 <__aeabi_uidivmod>
 8004b64:	4688      	mov	r8, r1
	unsigned int seconds      = timestamp / 1000 % 60;
 8004b66:	21fa      	movs	r1, #250	; 0xfa
 8004b68:	0020      	movs	r0, r4
 8004b6a:	0089      	lsls	r1, r1, #2
 8004b6c:	f00b ffbe 	bl	8010aec <__udivsi3>
 8004b70:	213c      	movs	r1, #60	; 0x3c
 8004b72:	f00c f841 	bl	8010bf8 <__aeabi_uidivmod>
 8004b76:	468a      	mov	sl, r1
	unsigned int milliseconds = timestamp % 1000;
 8004b78:	21fa      	movs	r1, #250	; 0xfa
 8004b7a:	0020      	movs	r0, r4
 8004b7c:	0089      	lsls	r1, r1, #2
 8004b7e:	f00c f83b 	bl	8010bf8 <__aeabi_uidivmod>

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8004b82:	233f      	movs	r3, #63	; 0x3f
 8004b84:	2e04      	cmp	r6, #4
 8004b86:	d801      	bhi.n	8004b8c <acc_integration_log+0x78>
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <acc_integration_log+0xbc>)
 8004b8a:	5d9b      	ldrb	r3, [r3, r6]

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8004b8c:	464a      	mov	r2, r9
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	9202      	str	r2, [sp, #8]
 8004b92:	9100      	str	r1, [sp, #0]
 8004b94:	4653      	mov	r3, sl
 8004b96:	4642      	mov	r2, r8
 8004b98:	0039      	movs	r1, r7
 8004b9a:	9503      	str	r5, [sp, #12]
 8004b9c:	480d      	ldr	r0, [pc, #52]	; (8004bd4 <acc_integration_log+0xc0>)
 8004b9e:	f010 fd89 	bl	80156b4 <__wrap_printf>

	fflush(stdout);
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <acc_integration_log+0xc4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6898      	ldr	r0, [r3, #8]
 8004ba8:	f00e fc22 	bl	80133f0 <fflush>

	va_end(ap);
}
 8004bac:	b02c      	add	sp, #176	; 0xb0
 8004bae:	bc1c      	pop	{r2, r3, r4}
 8004bb0:	4690      	mov	r8, r2
 8004bb2:	4699      	mov	r9, r3
 8004bb4:	46a2      	mov	sl, r4
 8004bb6:	bcf0      	pop	{r4, r5, r6, r7}
 8004bb8:	bc08      	pop	{r3}
 8004bba:	b002      	add	sp, #8
 8004bbc:	4718      	bx	r3
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	00002e2e 	.word	0x00002e2e
 8004bc4:	2000048c 	.word	0x2000048c
 8004bc8:	0036ee80 	.word	0x0036ee80
 8004bcc:	0000ea60 	.word	0x0000ea60
 8004bd0:	0801cb53 	.word	0x0801cb53
 8004bd4:	0801cb31 	.word	0x0801cb31
 8004bd8:	20000008 	.word	0x20000008

08004bdc <acc_hal_integration_sensor_hibernate_exit>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bdc:	2280      	movs	r2, #128	; 0x80
{
 8004bde:	b510      	push	{r4, lr}
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <acc_hal_integration_sensor_hibernate_exit+0x1c>)
 8004be2:	0092      	lsls	r2, r2, #2
 8004be4:	619a      	str	r2, [r3, #24]
	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_1_HIBERNATE_EXIT);
 8004be6:	2003      	movs	r0, #3
 8004be8:	f7fd f88e 	bl	8001d08 <pulse_hibernate_pin>
	acc_integration_sleep_us(ACC_WAIT_TIME_HIBERNATE_EXIT_MS * 1000);
 8004bec:	f008 f90c 	bl	800ce08 <acc_integration_sleep_us.constprop.91>
	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_2_HIBERNATE_EXIT);
 8004bf0:	200a      	movs	r0, #10
 8004bf2:	f7fd f889 	bl	8001d08 <pulse_hibernate_pin>
}
 8004bf6:	bd10      	pop	{r4, pc}
 8004bf8:	50000400 	.word	0x50000400

08004bfc <acc_hal_integration_sensor_power_off>:
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <acc_hal_integration_sensor_power_off+0x20>)
{
 8004c00:	b510      	push	{r4, lr}
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	629a      	str	r2, [r3, #40]	; 0x28
 8004c06:	22a0      	movs	r2, #160	; 0xa0
 8004c08:	0049      	lsls	r1, r1, #1
 8004c0a:	05d2      	lsls	r2, r2, #23
 8004c0c:	6291      	str	r1, [r2, #40]	; 0x28
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	0092      	lsls	r2, r2, #2
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28
	acc_integration_sleep_us(2000);
 8004c14:	f008 f8f8 	bl	800ce08 <acc_integration_sleep_us.constprop.91>
}
 8004c18:	bd10      	pop	{r4, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	50000400 	.word	0x50000400

08004c20 <acc_hal_integration_sensor_power_on>:
 8004c20:	2210      	movs	r2, #16
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <acc_hal_integration_sensor_power_on+0x24>)
{
 8004c24:	b510      	push	{r4, lr}
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c28:	32f1      	adds	r2, #241	; 0xf1
 8004c2a:	32ff      	adds	r2, #255	; 0xff
 8004c2c:	619a      	str	r2, [r3, #24]
 8004c2e:	2180      	movs	r1, #128	; 0x80
 8004c30:	22a0      	movs	r2, #160	; 0xa0
 8004c32:	0049      	lsls	r1, r1, #1
 8004c34:	05d2      	lsls	r2, r2, #23
 8004c36:	6191      	str	r1, [r2, #24]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	619a      	str	r2, [r3, #24]
	acc_integration_sleep_us(2000);
 8004c3c:	f008 f8e4 	bl	800ce08 <acc_integration_sleep_us.constprop.91>
}
 8004c40:	bd10      	pop	{r4, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	50000400 	.word	0x50000400

08004c48 <acc_hal_integration_sensor_transfer>:
{
 8004c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c4a:	4657      	mov	r7, sl
 8004c4c:	4645      	mov	r5, r8
 8004c4e:	46de      	mov	lr, fp
 8004c50:	464e      	mov	r6, r9

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c52:	4cbb      	ldr	r4, [pc, #748]	; (8004f40 <acc_hal_integration_sensor_transfer+0x2f8>)
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c54:	2001      	movs	r0, #1
 8004c56:	0023      	movs	r3, r4
 8004c58:	b5e0      	push	{r5, r6, r7, lr}
 8004c5a:	4fba      	ldr	r7, [pc, #744]	; (8004f44 <acc_hal_integration_sensor_transfer+0x2fc>)
 8004c5c:	335c      	adds	r3, #92	; 0x5c
 8004c5e:	62b8      	str	r0, [r7, #40]	; 0x28
 8004c60:	781d      	ldrb	r5, [r3, #0]
 8004c62:	b083      	sub	sp, #12
 8004c64:	9701      	str	r7, [sp, #4]
 8004c66:	4285      	cmp	r5, r0
 8004c68:	d100      	bne.n	8004c6c <acc_hal_integration_sensor_transfer+0x24>
 8004c6a:	e0f3      	b.n	8004e54 <acc_hal_integration_sensor_transfer+0x20c>
 8004c6c:	7018      	strb	r0, [r3, #0]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c6e:	0023      	movs	r3, r4
 8004c70:	4db5      	ldr	r5, [pc, #724]	; (8004f48 <acc_hal_integration_sensor_transfer+0x300>)
 8004c72:	335d      	adds	r3, #93	; 0x5d
 8004c74:	682e      	ldr	r6, [r5, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004c78:	6860      	ldr	r0, [r4, #4]
  tmp_state           = hspi->State;
 8004c7a:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8004c7c:	4684      	mov	ip, r0
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d00b      	beq.n	8004c9a <acc_hal_integration_sensor_transfer+0x52>
 8004c82:	2082      	movs	r0, #130	; 0x82
 8004c84:	0040      	lsls	r0, r0, #1
 8004c86:	4584      	cmp	ip, r0
 8004c88:	d000      	beq.n	8004c8c <acc_hal_integration_sensor_transfer+0x44>
 8004c8a:	e0dc      	b.n	8004e46 <acc_hal_integration_sensor_transfer+0x1fe>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c8c:	68a0      	ldr	r0, [r4, #8]
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d000      	beq.n	8004c94 <acc_hal_integration_sensor_transfer+0x4c>
 8004c92:	e0d8      	b.n	8004e46 <acc_hal_integration_sensor_transfer+0x1fe>
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d000      	beq.n	8004c9a <acc_hal_integration_sensor_transfer+0x52>
 8004c98:	e0d5      	b.n	8004e46 <acc_hal_integration_sensor_transfer+0x1fe>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c9a:	2900      	cmp	r1, #0
 8004c9c:	d100      	bne.n	8004ca0 <acc_hal_integration_sensor_transfer+0x58>
 8004c9e:	e0d2      	b.n	8004e46 <acc_hal_integration_sensor_transfer+0x1fe>
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8004ca0:	b292      	uxth	r2, r2
 8004ca2:	2a00      	cmp	r2, #0
 8004ca4:	d100      	bne.n	8004ca8 <acc_hal_integration_sensor_transfer+0x60>
 8004ca6:	e0ce      	b.n	8004e46 <acc_hal_integration_sensor_transfer+0x1fe>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ca8:	0023      	movs	r3, r4
 8004caa:	335d      	adds	r3, #93	; 0x5d
 8004cac:	7818      	ldrb	r0, [r3, #0]
 8004cae:	2804      	cmp	r0, #4
 8004cb0:	d001      	beq.n	8004cb6 <acc_hal_integration_sensor_transfer+0x6e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cb2:	2005      	movs	r0, #5
 8004cb4:	7018      	strb	r0, [r3, #0]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cb6:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
 8004cb8:	0020      	movs	r0, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cba:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8004cbc:	3008      	adds	r0, #8
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cbe:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004cc0:	6523      	str	r3, [r4, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004cc2:	68e3      	ldr	r3, [r4, #12]
  hspi->RxXferCount = Size;
 8004cc4:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cc6:	1da0      	adds	r0, r4, #6
 8004cc8:	87c2      	strh	r2, [r0, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004cca:	4698      	mov	r8, r3
 8004ccc:	20e0      	movs	r0, #224	; 0xe0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cce:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cd0:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004cd2:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004cd4:	87a2      	strh	r2, [r4, #60]	; 0x3c
 8004cd6:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004cd8:	00c0      	lsls	r0, r0, #3
 8004cda:	4580      	cmp	r8, r0
 8004cdc:	d801      	bhi.n	8004ce2 <acc_hal_integration_sensor_transfer+0x9a>
 8004cde:	2a01      	cmp	r2, #1
 8004ce0:	d06c      	beq.n	8004dbc <acc_hal_integration_sensor_transfer+0x174>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ce2:	6858      	ldr	r0, [r3, #4]
 8004ce4:	4f99      	ldr	r7, [pc, #612]	; (8004f4c <acc_hal_integration_sensor_transfer+0x304>)
 8004ce6:	4038      	ands	r0, r7
 8004ce8:	6058      	str	r0, [r3, #4]
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	4681      	mov	r9, r0
 8004cee:	2040      	movs	r0, #64	; 0x40
 8004cf0:	464f      	mov	r7, r9
 8004cf2:	4207      	tst	r7, r0
 8004cf4:	d102      	bne.n	8004cfc <acc_hal_integration_sensor_transfer+0xb4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf6:	681f      	ldr	r7, [r3, #0]
 8004cf8:	4338      	orrs	r0, r7
 8004cfa:	6018      	str	r0, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cfc:	20e0      	movs	r0, #224	; 0xe0
 8004cfe:	00c0      	lsls	r0, r0, #3
 8004d00:	4580      	cmp	r8, r0
 8004d02:	d800      	bhi.n	8004d06 <acc_hal_integration_sensor_transfer+0xbe>
 8004d04:	e0b0      	b.n	8004e68 <acc_hal_integration_sensor_transfer+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d06:	4660      	mov	r0, ip
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d001      	beq.n	8004d10 <acc_hal_integration_sensor_transfer+0xc8>
 8004d0c:	2a01      	cmp	r2, #1
 8004d0e:	d107      	bne.n	8004d20 <acc_hal_integration_sensor_transfer+0xd8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d10:	880a      	ldrh	r2, [r1, #0]
 8004d12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d14:	1c8a      	adds	r2, r1, #2
 8004d16:	63a2      	str	r2, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004d18:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004d1a:	3a01      	subs	r2, #1
 8004d1c:	b292      	uxth	r2, r2
 8004d1e:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8004d20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d22:	2708      	movs	r7, #8
 8004d24:	9200      	str	r2, [sp, #0]
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
        hspi->pRxBuffPtr += sizeof(uint16_t);
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d26:	2200      	movs	r2, #0
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d28:	46b8      	mov	r8, r7
        txallowed = 1U;
 8004d2a:	4694      	mov	ip, r2
 8004d2c:	4691      	mov	r9, r2
 8004d2e:	3201      	adds	r2, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d30:	4693      	mov	fp, r2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d32:	44a0      	add	r8, r4
 8004d34:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d148      	bne.n	8004dcc <acc_hal_integration_sensor_transfer+0x184>
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d144      	bne.n	8004dcc <acc_hal_integration_sensor_transfer+0x184>
 8004d42:	464b      	mov	r3, r9
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <acc_hal_integration_sensor_transfer+0x104>
 8004d48:	9b00      	ldr	r3, [sp, #0]
 8004d4a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d4c:	4663      	mov	r3, ip
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d000      	beq.n	8004d54 <acc_hal_integration_sensor_transfer+0x10c>
 8004d52:	6421      	str	r1, [r4, #64]	; 0x40
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 8004d54:	22c0      	movs	r2, #192	; 0xc0
 8004d56:	6821      	ldr	r1, [r4, #0]
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d58:	487d      	ldr	r0, [pc, #500]	; (8004f50 <acc_hal_integration_sensor_transfer+0x308>)
  while ((hspi->Instance->SR & Fifo) != State)
 8004d5a:	0152      	lsls	r2, r2, #5
 8004d5c:	688b      	ldr	r3, [r1, #8]
 8004d5e:	4213      	tst	r3, r2
 8004d60:	d007      	beq.n	8004d72 <acc_hal_integration_sensor_transfer+0x12a>
 8004d62:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d64:	1b9b      	subs	r3, r3, r6
 8004d66:	4283      	cmp	r3, r0
 8004d68:	d9f8      	bls.n	8004d5c <acc_hal_integration_sensor_transfer+0x114>
 8004d6a:	f007 fb7b 	bl	800c464 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.100>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d11d      	bne.n	8004dae <acc_hal_integration_sensor_transfer+0x166>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d72:	2280      	movs	r2, #128	; 0x80
 8004d74:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d76:	4876      	ldr	r0, [pc, #472]	; (8004f50 <acc_hal_integration_sensor_transfer+0x308>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d78:	688b      	ldr	r3, [r1, #8]
 8004d7a:	4213      	tst	r3, r2
 8004d7c:	d007      	beq.n	8004d8e <acc_hal_integration_sensor_transfer+0x146>
 8004d7e:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d80:	1b9b      	subs	r3, r3, r6
 8004d82:	4283      	cmp	r3, r0
 8004d84:	d9f8      	bls.n	8004d78 <acc_hal_integration_sensor_transfer+0x130>
 8004d86:	f007 fb6d 	bl	800c464 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.100>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d10f      	bne.n	8004dae <acc_hal_integration_sensor_transfer+0x166>
  while ((hspi->Instance->SR & Fifo) != State)
 8004d8e:	21c0      	movs	r1, #192	; 0xc0
 8004d90:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d92:	486f      	ldr	r0, [pc, #444]	; (8004f50 <acc_hal_integration_sensor_transfer+0x308>)
  while ((hspi->Instance->SR & Fifo) != State)
 8004d94:	00c9      	lsls	r1, r1, #3
 8004d96:	6893      	ldr	r3, [r2, #8]
 8004d98:	420b      	tst	r3, r1
 8004d9a:	d054      	beq.n	8004e46 <acc_hal_integration_sensor_transfer+0x1fe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004d9c:	7b13      	ldrb	r3, [r2, #12]
 8004d9e:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004da0:	1b9b      	subs	r3, r3, r6
 8004da2:	4283      	cmp	r3, r0
 8004da4:	d9f7      	bls.n	8004d96 <acc_hal_integration_sensor_transfer+0x14e>
 8004da6:	f007 fb5d 	bl	800c464 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.100>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d04b      	beq.n	8004e46 <acc_hal_integration_sensor_transfer+0x1fe>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dae:	2320      	movs	r3, #32
 8004db0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004db2:	4313      	orrs	r3, r2
 8004db4:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004db6:	2320      	movs	r3, #32
 8004db8:	6623      	str	r3, [r4, #96]	; 0x60
 8004dba:	e044      	b.n	8004e46 <acc_hal_integration_sensor_transfer+0x1fe>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dbc:	6858      	ldr	r0, [r3, #4]
 8004dbe:	4681      	mov	r9, r0
 8004dc0:	2080      	movs	r0, #128	; 0x80
 8004dc2:	464f      	mov	r7, r9
 8004dc4:	0140      	lsls	r0, r0, #5
 8004dc6:	4338      	orrs	r0, r7
 8004dc8:	6058      	str	r0, [r3, #4]
 8004dca:	e78e      	b.n	8004cea <acc_hal_integration_sensor_transfer+0xa2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dcc:	2002      	movs	r0, #2
 8004dce:	689f      	ldr	r7, [r3, #8]
 8004dd0:	4207      	tst	r7, r0
 8004dd2:	d015      	beq.n	8004e00 <acc_hal_integration_sensor_transfer+0x1b8>
 8004dd4:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d012      	beq.n	8004e00 <acc_hal_integration_sensor_transfer+0x1b8>
 8004dda:	2a01      	cmp	r2, #1
 8004ddc:	d110      	bne.n	8004e00 <acc_hal_integration_sensor_transfer+0x1b8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dde:	9800      	ldr	r0, [sp, #0]
 8004de0:	8800      	ldrh	r0, [r0, #0]
 8004de2:	60d8      	str	r0, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de4:	9800      	ldr	r0, [sp, #0]
 8004de6:	3002      	adds	r0, #2
 8004de8:	9000      	str	r0, [sp, #0]
        hspi->TxXferCount--;
 8004dea:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8004dec:	4681      	mov	r9, r0
 8004dee:	2001      	movs	r0, #1
 8004df0:	4240      	negs	r0, r0
 8004df2:	4682      	mov	sl, r0
 8004df4:	44d1      	add	r9, sl
 8004df6:	4648      	mov	r0, r9
 8004df8:	4691      	mov	r9, r2
        txallowed = 0U;
 8004dfa:	2200      	movs	r2, #0
        hspi->TxXferCount--;
 8004dfc:	b280      	uxth	r0, r0
 8004dfe:	87e0      	strh	r0, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e00:	465f      	mov	r7, fp
 8004e02:	6898      	ldr	r0, [r3, #8]
 8004e04:	4238      	tst	r0, r7
 8004e06:	d00e      	beq.n	8004e26 <acc_hal_integration_sensor_transfer+0x1de>
 8004e08:	4640      	mov	r0, r8
 8004e0a:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d00a      	beq.n	8004e26 <acc_hal_integration_sensor_transfer+0x1de>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e10:	68da      	ldr	r2, [r3, #12]
        hspi->RxXferCount--;
 8004e12:	4640      	mov	r0, r8
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e14:	800a      	strh	r2, [r1, #0]
        hspi->RxXferCount--;
 8004e16:	4642      	mov	r2, r8
 8004e18:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8004e1a:	46dc      	mov	ip, fp
 8004e1c:	3a01      	subs	r2, #1
 8004e1e:	b292      	uxth	r2, r2
 8004e20:	87c2      	strh	r2, [r0, #62]	; 0x3e
        txallowed = 1U;
 8004e22:	2201      	movs	r2, #1
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e24:	3102      	adds	r1, #2
 8004e26:	6828      	ldr	r0, [r5, #0]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e28:	1b80      	subs	r0, r0, r6
 8004e2a:	4682      	mov	sl, r0
 8004e2c:	4848      	ldr	r0, [pc, #288]	; (8004f50 <acc_hal_integration_sensor_transfer+0x308>)
 8004e2e:	4582      	cmp	sl, r0
 8004e30:	d800      	bhi.n	8004e34 <acc_hal_integration_sensor_transfer+0x1ec>
 8004e32:	e77f      	b.n	8004d34 <acc_hal_integration_sensor_transfer+0xec>
 8004e34:	464b      	mov	r3, r9
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <acc_hal_integration_sensor_transfer+0x1f6>
 8004e3a:	9b00      	ldr	r3, [sp, #0]
 8004e3c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e3e:	4663      	mov	r3, ip
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d000      	beq.n	8004e46 <acc_hal_integration_sensor_transfer+0x1fe>
 8004e44:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->State = HAL_SPI_STATE_READY;
 8004e46:	0023      	movs	r3, r4
 8004e48:	2201      	movs	r2, #1
 8004e4a:	335d      	adds	r3, #93	; 0x5d
 8004e4c:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	345c      	adds	r4, #92	; 0x5c
 8004e52:	7023      	strb	r3, [r4, #0]
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e54:	2301      	movs	r3, #1
 8004e56:	9a01      	ldr	r2, [sp, #4]
 8004e58:	6193      	str	r3, [r2, #24]
}
 8004e5a:	b003      	add	sp, #12
 8004e5c:	bc3c      	pop	{r2, r3, r4, r5}
 8004e5e:	4690      	mov	r8, r2
 8004e60:	4699      	mov	r9, r3
 8004e62:	46a2      	mov	sl, r4
 8004e64:	46ab      	mov	fp, r5
 8004e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e68:	4660      	mov	r0, ip
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d001      	beq.n	8004e72 <acc_hal_integration_sensor_transfer+0x22a>
 8004e6e:	2a01      	cmp	r2, #1
 8004e70:	d10a      	bne.n	8004e88 <acc_hal_integration_sensor_transfer+0x240>
      if (hspi->TxXferCount > 1U)
 8004e72:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004e74:	2a01      	cmp	r2, #1
 8004e76:	d958      	bls.n	8004f2a <acc_hal_integration_sensor_transfer+0x2e2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e78:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e7a:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e7c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8004e7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e80:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e82:	3b02      	subs	r3, #2
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e88:	2202      	movs	r2, #2
 8004e8a:	4694      	mov	ip, r2
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e8c:	2280      	movs	r2, #128	; 0x80
        txallowed = 1U;
 8004e8e:	2101      	movs	r1, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e90:	0152      	lsls	r2, r2, #5
 8004e92:	4690      	mov	r8, r2
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e94:	4a2e      	ldr	r2, [pc, #184]	; (8004f50 <acc_hal_integration_sensor_transfer+0x308>)
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e96:	0023      	movs	r3, r4
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e98:	468b      	mov	fp, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e9a:	4691      	mov	r9, r2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004ea0:	2a00      	cmp	r2, #0
 8004ea2:	d103      	bne.n	8004eac <acc_hal_integration_sensor_transfer+0x264>
 8004ea4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	d100      	bne.n	8004eac <acc_hal_integration_sensor_transfer+0x264>
 8004eaa:	e753      	b.n	8004d54 <acc_hal_integration_sensor_transfer+0x10c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eac:	4660      	mov	r0, ip
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	6897      	ldr	r7, [r2, #8]
 8004eb2:	4207      	tst	r7, r0
 8004eb4:	d013      	beq.n	8004ede <acc_hal_integration_sensor_transfer+0x296>
 8004eb6:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d010      	beq.n	8004ede <acc_hal_integration_sensor_transfer+0x296>
 8004ebc:	2901      	cmp	r1, #1
 8004ebe:	d10e      	bne.n	8004ede <acc_hal_integration_sensor_transfer+0x296>
        if (hspi->TxXferCount > 1U)
 8004ec0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004ec2:	468a      	mov	sl, r1
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ec8:	2801      	cmp	r0, #1
 8004eca:	d943      	bls.n	8004f54 <acc_hal_integration_sensor_transfer+0x30c>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ecc:	8808      	ldrh	r0, [r1, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ece:	3102      	adds	r1, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed0:	60d0      	str	r0, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed2:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ed4:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004ed6:	3902      	subs	r1, #2
 8004ed8:	b289      	uxth	r1, r1
 8004eda:	87e1      	strh	r1, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004edc:	2100      	movs	r1, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ede:	465f      	mov	r7, fp
 8004ee0:	6890      	ldr	r0, [r2, #8]
 8004ee2:	4238      	tst	r0, r7
 8004ee4:	d01b      	beq.n	8004f1e <acc_hal_integration_sensor_transfer+0x2d6>
 8004ee6:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d018      	beq.n	8004f1e <acc_hal_integration_sensor_transfer+0x2d6>
        if (hspi->RxXferCount > 1U)
 8004eec:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8004eee:	468a      	mov	sl, r1
 8004ef0:	4650      	mov	r0, sl
 8004ef2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004ef4:	2801      	cmp	r0, #1
 8004ef6:	d938      	bls.n	8004f6a <acc_hal_integration_sensor_transfer+0x322>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ef8:	68d0      	ldr	r0, [r2, #12]
 8004efa:	8008      	strh	r0, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004efc:	3102      	adds	r1, #2
 8004efe:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004f00:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8004f02:	3902      	subs	r1, #2
 8004f04:	b289      	uxth	r1, r1
 8004f06:	87d9      	strh	r1, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8004f08:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8004f0a:	468a      	mov	sl, r1
 8004f0c:	4650      	mov	r0, sl
        txallowed = 1U;
 8004f0e:	4659      	mov	r1, fp
          if (hspi->RxXferCount <= 1U)
 8004f10:	2801      	cmp	r0, #1
 8004f12:	d804      	bhi.n	8004f1e <acc_hal_integration_sensor_transfer+0x2d6>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f14:	4640      	mov	r0, r8
 8004f16:	6851      	ldr	r1, [r2, #4]
 8004f18:	4301      	orrs	r1, r0
 8004f1a:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	682a      	ldr	r2, [r5, #0]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f20:	1b92      	subs	r2, r2, r6
 8004f22:	454a      	cmp	r2, r9
 8004f24:	d900      	bls.n	8004f28 <acc_hal_integration_sensor_transfer+0x2e0>
 8004f26:	e78e      	b.n	8004e46 <acc_hal_integration_sensor_transfer+0x1fe>
 8004f28:	e7b9      	b.n	8004e9e <acc_hal_integration_sensor_transfer+0x256>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f2a:	780a      	ldrb	r2, [r1, #0]
 8004f2c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004f2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f30:	3301      	adds	r3, #1
 8004f32:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004f34:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004f3c:	e7a4      	b.n	8004e88 <acc_hal_integration_sensor_transfer+0x240>
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	200004e0 	.word	0x200004e0
 8004f44:	50000400 	.word	0x50000400
 8004f48:	2000048c 	.word	0x2000048c
 8004f4c:	ffffefff 	.word	0xffffefff
 8004f50:	00001387 	.word	0x00001387
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f54:	7809      	ldrb	r1, [r1, #0]
 8004f56:	7311      	strb	r1, [r2, #12]
          hspi->pTxBuffPtr++;
 8004f58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f5a:	3101      	adds	r1, #1
 8004f5c:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004f5e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004f60:	3901      	subs	r1, #1
 8004f62:	b289      	uxth	r1, r1
 8004f64:	87e1      	strh	r1, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004f66:	2100      	movs	r1, #0
 8004f68:	e7b9      	b.n	8004ede <acc_hal_integration_sensor_transfer+0x296>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f6a:	7b12      	ldrb	r2, [r2, #12]
 8004f6c:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8004f6e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        txallowed = 1U;
 8004f70:	4659      	mov	r1, fp
          hspi->pRxBuffPtr++;
 8004f72:	3201      	adds	r2, #1
 8004f74:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8004f76:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004f78:	3a01      	subs	r2, #1
 8004f7a:	b292      	uxth	r2, r2
 8004f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f7e:	e7ce      	b.n	8004f1e <acc_hal_integration_sensor_transfer+0x2d6>

08004f80 <acc_assert_fail>:
 8004f80:	b513      	push	{r0, r1, r4, lr}
 8004f82:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <acc_assert_fail+0x14>)
 8004f84:	9100      	str	r1, [sp, #0]
 8004f86:	0003      	movs	r3, r0
 8004f88:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004f8a:	4903      	ldr	r1, [pc, #12]	; (8004f98 <acc_assert_fail+0x18>)
 8004f8c:	4a03      	ldr	r2, [pc, #12]	; (8004f9c <acc_assert_fail+0x1c>)
 8004f8e:	2000      	movs	r0, #0
 8004f90:	47a0      	blx	r4
 8004f92:	e7fe      	b.n	8004f92 <acc_assert_fail+0x12>
 8004f94:	200004a8 	.word	0x200004a8
 8004f98:	0801cb6e 	.word	0x0801cb6e
 8004f9c:	0801cb59 	.word	0x0801cb59

08004fa0 <acc_element_source_adc_produce>:
 8004fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa2:	4645      	mov	r5, r8
 8004fa4:	46de      	mov	lr, fp
 8004fa6:	4657      	mov	r7, sl
 8004fa8:	464e      	mov	r6, r9
 8004faa:	b5e0      	push	{r5, r6, r7, lr}
 8004fac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004fae:	b087      	sub	sp, #28
 8004fb0:	0005      	movs	r5, r0
 8004fb2:	2c00      	cmp	r4, #0
 8004fb4:	d100      	bne.n	8004fb8 <acc_element_source_adc_produce+0x18>
 8004fb6:	e09d      	b.n	80050f4 <acc_element_source_adc_produce+0x154>
 8004fb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004fba:	4a53      	ldr	r2, [pc, #332]	; (8005108 <acc_element_source_adc_produce+0x168>)
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	6a03      	ldr	r3, [r0, #32]
 8004fc0:	69a2      	ldr	r2, [r4, #24]
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	6943      	ldr	r3, [r0, #20]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	7866      	ldrb	r6, [r4, #1]
 8004fce:	69a3      	ldr	r3, [r4, #24]
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	2e00      	cmp	r6, #0
 8004fd4:	d000      	beq.n	8004fd8 <acc_element_source_adc_produce+0x38>
 8004fd6:	e088      	b.n	80050ea <acc_element_source_adc_produce+0x14a>
 8004fd8:	7823      	ldrb	r3, [r4, #0]
 8004fda:	469b      	mov	fp, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d133      	bne.n	8005048 <acc_element_source_adc_produce+0xa8>
 8004fe0:	0020      	movs	r0, r4
 8004fe2:	f7fb fd4b 	bl	8000a7c <acc_sensor_manager_power_on_and_start_sensor>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d027      	beq.n	800503a <acc_element_source_adc_produce+0x9a>
 8004fea:	0020      	movs	r0, r4
 8004fec:	2210      	movs	r2, #16
 8004fee:	2100      	movs	r1, #0
 8004ff0:	3008      	adds	r0, #8
 8004ff2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8004ff4:	f00e fb0a 	bl	801360c <memset>
 8004ff8:	0020      	movs	r0, r4
 8004ffa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ffc:	0039      	movs	r1, r7
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	aa02      	add	r2, sp, #8
 8005002:	3018      	adds	r0, #24
 8005004:	4798      	blx	r3
 8005006:	ab02      	add	r3, sp, #8
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	60e0      	str	r0, [r4, #12]
 800500c:	8163      	strh	r3, [r4, #10]
 800500e:	aa02      	add	r2, sp, #8
 8005010:	7892      	ldrb	r2, [r2, #2]
 8005012:	9904      	ldr	r1, [sp, #16]
 8005014:	7222      	strb	r2, [r4, #8]
 8005016:	4691      	mov	r9, r2
 8005018:	aa02      	add	r2, sp, #8
 800501a:	78d2      	ldrb	r2, [r2, #3]
 800501c:	7262      	strb	r2, [r4, #9]
 800501e:	4690      	mov	r8, r2
 8005020:	aa02      	add	r2, sp, #8
 8005022:	7b17      	ldrb	r7, [r2, #12]
 8005024:	7427      	strb	r7, [r4, #16]
 8005026:	7912      	ldrb	r2, [r2, #4]
 8005028:	6161      	str	r1, [r4, #20]
 800502a:	7462      	strb	r2, [r4, #17]
 800502c:	2800      	cmp	r0, #0
 800502e:	d163      	bne.n	80050f8 <acc_element_source_adc_produce+0x158>
 8005030:	4b36      	ldr	r3, [pc, #216]	; (800510c <acc_element_source_adc_produce+0x16c>)
 8005032:	4a37      	ldr	r2, [pc, #220]	; (8005110 <acc_element_source_adc_produce+0x170>)
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	4937      	ldr	r1, [pc, #220]	; (8005114 <acc_element_source_adc_produce+0x174>)
 8005038:	4798      	blx	r3
 800503a:	4b34      	ldr	r3, [pc, #208]	; (800510c <acc_element_source_adc_produce+0x16c>)
 800503c:	4a36      	ldr	r2, [pc, #216]	; (8005118 <acc_element_source_adc_produce+0x178>)
 800503e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005040:	4936      	ldr	r1, [pc, #216]	; (800511c <acc_element_source_adc_produce+0x17c>)
 8005042:	2000      	movs	r0, #0
 8005044:	4798      	blx	r3
 8005046:	e042      	b.n	80050ce <acc_element_source_adc_produce+0x12e>
 8005048:	2b01      	cmp	r3, #1
 800504a:	d1ce      	bne.n	8004fea <acc_element_source_adc_produce+0x4a>
 800504c:	4b2f      	ldr	r3, [pc, #188]	; (800510c <acc_element_source_adc_produce+0x16c>)
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ca      	beq.n	8004fea <acc_element_source_adc_produce+0x4a>
 8005054:	4650      	mov	r0, sl
 8005056:	4798      	blx	r3
 8005058:	e7c7      	b.n	8004fea <acc_element_source_adc_produce+0x4a>
 800505a:	9801      	ldr	r0, [sp, #4]
 800505c:	4298      	cmp	r0, r3
 800505e:	d004      	beq.n	800506a <acc_element_source_adc_produce+0xca>
 8005060:	21ca      	movs	r1, #202	; 0xca
 8005062:	482f      	ldr	r0, [pc, #188]	; (8005120 <acc_element_source_adc_produce+0x180>)
 8005064:	31ff      	adds	r1, #255	; 0xff
 8005066:	f7ff ff8b 	bl	8004f80 <acc_assert_fail>
 800506a:	0016      	movs	r6, r2
 800506c:	2348      	movs	r3, #72	; 0x48
 800506e:	4652      	mov	r2, sl
 8005070:	4353      	muls	r3, r2
 8005072:	4a2c      	ldr	r2, [pc, #176]	; (8005124 <acc_element_source_adc_produce+0x184>)
 8005074:	3b48      	subs	r3, #72	; 0x48
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	18d3      	adds	r3, r2, r3
 800507a:	001a      	movs	r2, r3
 800507c:	3242      	adds	r2, #66	; 0x42
 800507e:	7016      	strb	r6, [r2, #0]
 8005080:	6459      	str	r1, [r3, #68]	; 0x44
 8005082:	465b      	mov	r3, fp
 8005084:	2b02      	cmp	r3, #2
 8005086:	d12a      	bne.n	80050de <acc_element_source_adc_produce+0x13e>
 8005088:	4650      	mov	r0, sl
 800508a:	f7fb fce7 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 800508e:	2300      	movs	r3, #0
 8005090:	70e3      	strb	r3, [r4, #3]
 8005092:	7863      	ldrb	r3, [r4, #1]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <acc_element_source_adc_produce+0x104>
 8005098:	9b01      	ldr	r3, [sp, #4]
 800509a:	9a00      	ldr	r2, [sp, #0]
 800509c:	4651      	mov	r1, sl
 800509e:	2002      	movs	r0, #2
 80050a0:	f7fb f84a 	bl	8000138 <acc_probes_execute_uint16>
 80050a4:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80050a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	464a      	mov	r2, r9
 80050ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	4642      	mov	r2, r8
 80050b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	2301      	movs	r3, #1
 80050ba:	2e00      	cmp	r6, #0
 80050bc:	d100      	bne.n	80050c0 <acc_element_source_adc_produce+0x120>
 80050be:	003b      	movs	r3, r7
 80050c0:	2601      	movs	r6, #1
 80050c2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80050c4:	6828      	ldr	r0, [r5, #0]
 80050c6:	4033      	ands	r3, r6
 80050c8:	7013      	strb	r3, [r2, #0]
 80050ca:	6843      	ldr	r3, [r0, #4]
 80050cc:	4798      	blx	r3
 80050ce:	0030      	movs	r0, r6
 80050d0:	b007      	add	sp, #28
 80050d2:	bc3c      	pop	{r2, r3, r4, r5}
 80050d4:	4690      	mov	r8, r2
 80050d6:	4699      	mov	r9, r3
 80050d8:	46a2      	mov	sl, r4
 80050da:	46ab      	mov	fp, r5
 80050dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d1d7      	bne.n	8005092 <acc_element_source_adc_produce+0xf2>
 80050e2:	0020      	movs	r0, r4
 80050e4:	f7fb fc58 	bl	8000998 <acc_sensor_manager_hibernate_enter>
 80050e8:	e7d3      	b.n	8005092 <acc_element_source_adc_produce+0xf2>
 80050ea:	2600      	movs	r6, #0
 80050ec:	0037      	movs	r7, r6
 80050ee:	46b0      	mov	r8, r6
 80050f0:	46b1      	mov	r9, r6
 80050f2:	e7ce      	b.n	8005092 <acc_element_source_adc_produce+0xf2>
 80050f4:	0026      	movs	r6, r4
 80050f6:	e7ea      	b.n	80050ce <acc_element_source_adc_produce+0x12e>
 80050f8:	9e00      	ldr	r6, [sp, #0]
 80050fa:	4286      	cmp	r6, r0
 80050fc:	d0ad      	beq.n	800505a <acc_element_source_adc_produce+0xba>
 80050fe:	21e4      	movs	r1, #228	; 0xe4
 8005100:	4807      	ldr	r0, [pc, #28]	; (8005120 <acc_element_source_adc_produce+0x180>)
 8005102:	0049      	lsls	r1, r1, #1
 8005104:	f7ff ff3c 	bl	8004f80 <acc_assert_fail>
 8005108:	51645c3c 	.word	0x51645c3c
 800510c:	200004a8 	.word	0x200004a8
 8005110:	0801cb79 	.word	0x0801cb79
 8005114:	0801c48e 	.word	0x0801c48e
 8005118:	0801cbc0 	.word	0x0801cbc0
 800511c:	0801cbdd 	.word	0x0801cbdd
 8005120:	0801cb91 	.word	0x0801cb91
 8005124:	2000008c 	.word	0x2000008c

08005128 <produce.lto_priv.186>:
 8005128:	b510      	push	{r4, lr}
 800512a:	0004      	movs	r4, r0
 800512c:	3038      	adds	r0, #56	; 0x38
 800512e:	f7ff ff37 	bl	8004fa0 <acc_element_source_adc_produce>
 8005132:	2800      	cmp	r0, #0
 8005134:	d10c      	bne.n	8005150 <produce.lto_priv.186+0x28>
 8005136:	23e0      	movs	r3, #224	; 0xe0
 8005138:	2201      	movs	r2, #1
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	58e3      	ldr	r3, [r4, r3]
 800513e:	6158      	str	r0, [r3, #20]
 8005140:	7198      	strb	r0, [r3, #6]
 8005142:	715a      	strb	r2, [r3, #5]
 8005144:	23d2      	movs	r3, #210	; 0xd2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	18e0      	adds	r0, r4, r3
 800514a:	3304      	adds	r3, #4
 800514c:	58e3      	ldr	r3, [r4, r3]
 800514e:	4798      	blx	r3
 8005150:	bd10      	pop	{r4, pc}

08005152 <produce.lto_priv.185>:
 8005152:	b510      	push	{r4, lr}
 8005154:	0004      	movs	r4, r0
 8005156:	3038      	adds	r0, #56	; 0x38
 8005158:	f7ff ff22 	bl	8004fa0 <acc_element_source_adc_produce>
 800515c:	2800      	cmp	r0, #0
 800515e:	d10b      	bne.n	8005178 <produce.lto_priv.185+0x26>
 8005160:	0023      	movs	r3, r4
 8005162:	33f0      	adds	r3, #240	; 0xf0
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2201      	movs	r2, #1
 8005168:	6158      	str	r0, [r3, #20]
 800516a:	7198      	strb	r0, [r3, #6]
 800516c:	0020      	movs	r0, r4
 800516e:	34bc      	adds	r4, #188	; 0xbc
 8005170:	715a      	strb	r2, [r3, #5]
 8005172:	30b8      	adds	r0, #184	; 0xb8
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	4798      	blx	r3
 8005178:	bd10      	pop	{r4, pc}

0800517a <do_phase_compensation_q3_12>:
 800517a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517c:	4657      	mov	r7, sl
 800517e:	4645      	mov	r5, r8
 8005180:	46de      	mov	lr, fp
 8005182:	464e      	mov	r6, r9
 8005184:	b5e0      	push	{r5, r6, r7, lr}
 8005186:	4c6b      	ldr	r4, [pc, #428]	; (8005334 <do_phase_compensation_q3_12+0x1ba>)
 8005188:	0017      	movs	r7, r2
 800518a:	44a5      	add	sp, r4
 800518c:	9102      	str	r1, [sp, #8]
 800518e:	4698      	mov	r8, r3
 8005190:	2a7c      	cmp	r2, #124	; 0x7c
 8005192:	d816      	bhi.n	80051c2 <do_phase_compensation_q3_12+0x48>
 8005194:	0093      	lsls	r3, r2, #2
 8005196:	469b      	mov	fp, r3
 8005198:	ab80      	add	r3, sp, #512	; 0x200
 800519a:	445b      	add	r3, fp
 800519c:	3bf7      	subs	r3, #247	; 0xf7
 800519e:	3bff      	subs	r3, #255	; 0xff
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	2300      	movs	r3, #0
 80051a4:	0005      	movs	r5, r0
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	9b02      	ldr	r3, [sp, #8]
 80051aa:	9a00      	ldr	r2, [sp, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d10c      	bne.n	80051ca <do_phase_compensation_q3_12+0x50>
 80051b0:	2381      	movs	r3, #129	; 0x81
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	449d      	add	sp, r3
 80051b6:	bc3c      	pop	{r2, r3, r4, r5}
 80051b8:	4690      	mov	r8, r2
 80051ba:	4699      	mov	r9, r3
 80051bc:	46a2      	mov	sl, r4
 80051be:	46ab      	mov	fp, r5
 80051c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c2:	217d      	movs	r1, #125	; 0x7d
 80051c4:	485c      	ldr	r0, [pc, #368]	; (8005338 <do_phase_compensation_q3_12+0x1be>)
 80051c6:	f7ff fedb 	bl	8004f80 <acc_assert_fail>
 80051ca:	465a      	mov	r2, fp
 80051cc:	0029      	movs	r1, r5
 80051ce:	a804      	add	r0, sp, #16
 80051d0:	f010 fe40 	bl	8015e54 <memcpy>
 80051d4:	a980      	add	r1, sp, #512	; 0x200
 80051d6:	468c      	mov	ip, r1
 80051d8:	2200      	movs	r2, #0
 80051da:	2401      	movs	r4, #1
 80051dc:	1e78      	subs	r0, r7, #1
 80051de:	0083      	lsls	r3, r0, #2
 80051e0:	4463      	add	r3, ip
 80051e2:	3bf1      	subs	r3, #241	; 0xf1
 80051e4:	3bff      	subs	r3, #255	; 0xff
 80051e6:	9204      	str	r2, [sp, #16]
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	aa04      	add	r2, sp, #16
 80051ec:	42a7      	cmp	r7, r4
 80051ee:	d80f      	bhi.n	8005210 <do_phase_compensation_q3_12+0x96>
 80051f0:	9a01      	ldr	r2, [sp, #4]
 80051f2:	3a04      	subs	r2, #4
 80051f4:	3801      	subs	r0, #1
 80051f6:	d22e      	bcs.n	8005256 <do_phase_compensation_q3_12+0xdc>
 80051f8:	2400      	movs	r4, #0
 80051fa:	45a3      	cmp	fp, r4
 80051fc:	d148      	bne.n	8005290 <do_phase_compensation_q3_12+0x116>
 80051fe:	0029      	movs	r1, r5
 8005200:	2200      	movs	r2, #0
 8005202:	42a2      	cmp	r2, r4
 8005204:	d172      	bne.n	80052ec <do_phase_compensation_q3_12+0x172>
 8005206:	9b00      	ldr	r3, [sp, #0]
 8005208:	18ad      	adds	r5, r5, r2
 800520a:	3301      	adds	r3, #1
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	e7cb      	b.n	80051a8 <do_phase_compensation_q3_12+0x2e>
 8005210:	2100      	movs	r1, #0
 8005212:	5e53      	ldrsh	r3, [r2, r1]
 8005214:	3401      	adds	r4, #1
 8005216:	469c      	mov	ip, r3
 8005218:	2304      	movs	r3, #4
 800521a:	5ed1      	ldrsh	r1, [r2, r3]
 800521c:	4663      	mov	r3, ip
 800521e:	1ac9      	subs	r1, r1, r3
 8005220:	4643      	mov	r3, r8
 8005222:	4359      	muls	r1, r3
 8005224:	17cb      	asrs	r3, r1, #31
 8005226:	051b      	lsls	r3, r3, #20
 8005228:	0d1b      	lsrs	r3, r3, #20
 800522a:	185b      	adds	r3, r3, r1
 800522c:	131b      	asrs	r3, r3, #12
 800522e:	4463      	add	r3, ip
 8005230:	8093      	strh	r3, [r2, #4]
 8005232:	2102      	movs	r1, #2
 8005234:	5e53      	ldrsh	r3, [r2, r1]
 8005236:	3204      	adds	r2, #4
 8005238:	469c      	mov	ip, r3
 800523a:	2302      	movs	r3, #2
 800523c:	5ed1      	ldrsh	r1, [r2, r3]
 800523e:	4663      	mov	r3, ip
 8005240:	1ac9      	subs	r1, r1, r3
 8005242:	4643      	mov	r3, r8
 8005244:	4359      	muls	r1, r3
 8005246:	17cb      	asrs	r3, r1, #31
 8005248:	051b      	lsls	r3, r3, #20
 800524a:	0d1b      	lsrs	r3, r3, #20
 800524c:	185b      	adds	r3, r3, r1
 800524e:	131b      	asrs	r3, r3, #12
 8005250:	4463      	add	r3, ip
 8005252:	8053      	strh	r3, [r2, #2]
 8005254:	e7ca      	b.n	80051ec <do_phase_compensation_q3_12+0x72>
 8005256:	2306      	movs	r3, #6
 8005258:	5ed1      	ldrsh	r1, [r2, r3]
 800525a:	2302      	movs	r3, #2
 800525c:	5ed4      	ldrsh	r4, [r2, r3]
 800525e:	4643      	mov	r3, r8
 8005260:	1a64      	subs	r4, r4, r1
 8005262:	435c      	muls	r4, r3
 8005264:	17e3      	asrs	r3, r4, #31
 8005266:	051b      	lsls	r3, r3, #20
 8005268:	0d1b      	lsrs	r3, r3, #20
 800526a:	191b      	adds	r3, r3, r4
 800526c:	131b      	asrs	r3, r3, #12
 800526e:	185b      	adds	r3, r3, r1
 8005270:	8053      	strh	r3, [r2, #2]
 8005272:	2308      	movs	r3, #8
 8005274:	5ed1      	ldrsh	r1, [r2, r3]
 8005276:	2304      	movs	r3, #4
 8005278:	5ed4      	ldrsh	r4, [r2, r3]
 800527a:	4643      	mov	r3, r8
 800527c:	1a64      	subs	r4, r4, r1
 800527e:	435c      	muls	r4, r3
 8005280:	17e3      	asrs	r3, r4, #31
 8005282:	051b      	lsls	r3, r3, #20
 8005284:	0d1b      	lsrs	r3, r3, #20
 8005286:	191b      	adds	r3, r3, r4
 8005288:	131b      	asrs	r3, r3, #12
 800528a:	185b      	adds	r3, r3, r1
 800528c:	8093      	strh	r3, [r2, #4]
 800528e:	e7b0      	b.n	80051f2 <do_phase_compensation_q3_12+0x78>
 8005290:	a904      	add	r1, sp, #16
 8005292:	468c      	mov	ip, r1
 8005294:	0022      	movs	r2, r4
 8005296:	4462      	add	r2, ip
 8005298:	8850      	ldrh	r0, [r2, #2]
 800529a:	ab04      	add	r3, sp, #16
 800529c:	5b1b      	ldrh	r3, [r3, r4]
 800529e:	0400      	lsls	r0, r0, #16
 80052a0:	4318      	orrs	r0, r3
 80052a2:	f00a fa55 	bl	800f750 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 80052a6:	4681      	mov	r9, r0
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d01d      	beq.n	80052e8 <do_phase_compensation_q3_12+0x16e>
 80052ac:	ab04      	add	r3, sp, #16
 80052ae:	5ee0      	ldrsh	r0, [r4, r3]
 80052b0:	4649      	mov	r1, r9
 80052b2:	0300      	lsls	r0, r0, #12
 80052b4:	f00b fca4 	bl	8010c00 <__divsi3>
 80052b8:	aa04      	add	r2, sp, #16
 80052ba:	b203      	sxth	r3, r0
 80052bc:	4694      	mov	ip, r2
 80052be:	469a      	mov	sl, r3
 80052c0:	0023      	movs	r3, r4
 80052c2:	4463      	add	r3, ip
 80052c4:	2002      	movs	r0, #2
 80052c6:	5e18      	ldrsh	r0, [r3, r0]
 80052c8:	4649      	mov	r1, r9
 80052ca:	0300      	lsls	r0, r0, #12
 80052cc:	4240      	negs	r0, r0
 80052ce:	f00b fc97 	bl	8010c00 <__divsi3>
 80052d2:	b200      	sxth	r0, r0
 80052d4:	aa04      	add	r2, sp, #16
 80052d6:	0023      	movs	r3, r4
 80052d8:	4694      	mov	ip, r2
 80052da:	4463      	add	r3, ip
 80052dc:	8058      	strh	r0, [r3, #2]
 80052de:	0013      	movs	r3, r2
 80052e0:	4652      	mov	r2, sl
 80052e2:	52e2      	strh	r2, [r4, r3]
 80052e4:	3404      	adds	r4, #4
 80052e6:	e788      	b.n	80051fa <do_phase_compensation_q3_12+0x80>
 80052e8:	4682      	mov	sl, r0
 80052ea:	e7f3      	b.n	80052d4 <do_phase_compensation_q3_12+0x15a>
 80052ec:	2000      	movs	r0, #0
 80052ee:	5e0b      	ldrsh	r3, [r1, r0]
 80052f0:	4699      	mov	r9, r3
 80052f2:	ab04      	add	r3, sp, #16
 80052f4:	5ed3      	ldrsh	r3, [r2, r3]
 80052f6:	2602      	movs	r6, #2
 80052f8:	5f88      	ldrsh	r0, [r1, r6]
 80052fa:	ae04      	add	r6, sp, #16
 80052fc:	46b4      	mov	ip, r6
 80052fe:	4682      	mov	sl, r0
 8005300:	0010      	movs	r0, r2
 8005302:	4460      	add	r0, ip
 8005304:	2602      	movs	r6, #2
 8005306:	5f80      	ldrsh	r0, [r0, r6]
 8005308:	3204      	adds	r2, #4
 800530a:	4684      	mov	ip, r0
 800530c:	4648      	mov	r0, r9
 800530e:	4358      	muls	r0, r3
 8005310:	4666      	mov	r6, ip
 8005312:	9003      	str	r0, [sp, #12]
 8005314:	4650      	mov	r0, sl
 8005316:	4370      	muls	r0, r6
 8005318:	9e03      	ldr	r6, [sp, #12]
 800531a:	1a30      	subs	r0, r6, r0
 800531c:	1300      	asrs	r0, r0, #12
 800531e:	8008      	strh	r0, [r1, #0]
 8005320:	4650      	mov	r0, sl
 8005322:	4666      	mov	r6, ip
 8005324:	4343      	muls	r3, r0
 8005326:	4648      	mov	r0, r9
 8005328:	4370      	muls	r0, r6
 800532a:	181b      	adds	r3, r3, r0
 800532c:	131b      	asrs	r3, r3, #12
 800532e:	804b      	strh	r3, [r1, #2]
 8005330:	3104      	adds	r1, #4
 8005332:	e766      	b.n	8005202 <do_phase_compensation_q3_12+0x88>
 8005334:	fffffdfc 	.word	0xfffffdfc
 8005338:	0801cbf2 	.word	0x0801cbf2

0800533c <phase_compensate_q3_12_complex>:
 800533c:	b510      	push	{r4, lr}
 800533e:	1d83      	adds	r3, r0, #6
 8005340:	223e      	movs	r2, #62	; 0x3e
 8005342:	5e9b      	ldrsh	r3, [r3, r2]
 8005344:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005346:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005348:	6900      	ldr	r0, [r0, #16]
 800534a:	f7ff ff16 	bl	800517a <do_phase_compensation_q3_12>
 800534e:	bd10      	pop	{r4, pc}

08005350 <get_package_range_coarse_max>:
 8005350:	0003      	movs	r3, r0
 8005352:	b570      	push	{r4, r5, r6, lr}
 8005354:	33cc      	adds	r3, #204	; 0xcc
 8005356:	881d      	ldrh	r5, [r3, #0]
 8005358:	b086      	sub	sp, #24
 800535a:	2d00      	cmp	r5, #0
 800535c:	d104      	bne.n	8005368 <get_package_range_coarse_max+0x18>
 800535e:	2158      	movs	r1, #88	; 0x58
 8005360:	480c      	ldr	r0, [pc, #48]	; (8005394 <get_package_range_coarse_max+0x44>)
 8005362:	31ff      	adds	r1, #255	; 0xff
 8005364:	f7ff fe0c 	bl	8004f80 <acc_assert_fail>
 8005368:	0003      	movs	r3, r0
 800536a:	2480      	movs	r4, #128	; 0x80
 800536c:	33ce      	adds	r3, #206	; 0xce
 800536e:	4669      	mov	r1, sp
 8005370:	881e      	ldrh	r6, [r3, #0]
 8005372:	f00a fdc7 	bl	800ff04 <acc_cpd_linear_sweep_get_info>
 8005376:	9b00      	ldr	r3, [sp, #0]
 8005378:	0029      	movs	r1, r5
 800537a:	0124      	lsls	r4, r4, #4
 800537c:	207c      	movs	r0, #124	; 0x7c
 800537e:	1ae4      	subs	r4, r4, r3
 8005380:	f00b fbb4 	bl	8010aec <__udivsi3>
 8005384:	1ba4      	subs	r4, r4, r6
 8005386:	0001      	movs	r1, r0
 8005388:	0020      	movs	r0, r4
 800538a:	f00b fbaf 	bl	8010aec <__udivsi3>
 800538e:	b006      	add	sp, #24
 8005390:	bd70      	pop	{r4, r5, r6, pc}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	0801c9c5 	.word	0x0801c9c5

08005398 <coarse_count_for_next_package>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	0004      	movs	r4, r0
 800539c:	6940      	ldr	r0, [r0, #20]
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	0002      	movs	r2, r0
 80053a2:	32c2      	adds	r2, #194	; 0xc2
 80053a4:	3b01      	subs	r3, #1
 80053a6:	8812      	ldrh	r2, [r2, #0]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d002      	beq.n	80053b4 <coarse_count_for_next_package+0x1c>
 80053ae:	f7ff ffcf 	bl	8005350 <get_package_range_coarse_max>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	8965      	ldrh	r5, [r4, #10]
 80053b6:	f7ff ffcb 	bl	8005350 <get_package_range_coarse_max>
 80053ba:	0001      	movs	r1, r0
 80053bc:	0028      	movs	r0, r5
 80053be:	f00b fc1b 	bl	8010bf8 <__aeabi_uidivmod>
 80053c2:	1e08      	subs	r0, r1, #0
 80053c4:	d1f5      	bne.n	80053b2 <coarse_count_for_next_package+0x1a>
 80053c6:	6960      	ldr	r0, [r4, #20]
 80053c8:	e7f1      	b.n	80053ae <coarse_count_for_next_package+0x16>

080053ca <update_program.lto_priv.152>:
 80053ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053cc:	4657      	mov	r7, sl
 80053ce:	464e      	mov	r6, r9
 80053d0:	4645      	mov	r5, r8
 80053d2:	46de      	mov	lr, fp
 80053d4:	b5e0      	push	{r5, r6, r7, lr}
 80053d6:	6944      	ldr	r4, [r0, #20]
 80053d8:	000f      	movs	r7, r1
 80053da:	0006      	movs	r6, r0
 80053dc:	8981      	ldrh	r1, [r0, #12]
 80053de:	2001      	movs	r0, #1
 80053e0:	4288      	cmp	r0, r1
 80053e2:	419b      	sbcs	r3, r3
 80053e4:	425b      	negs	r3, r3
 80053e6:	4698      	mov	r8, r3
 80053e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80053ea:	b085      	sub	sp, #20
 80053ec:	425a      	negs	r2, r3
 80053ee:	4153      	adcs	r3, r2
 80053f0:	22c0      	movs	r2, #192	; 0xc0
 80053f2:	4691      	mov	r9, r2
 80053f4:	44a1      	add	r9, r4
 80053f6:	464a      	mov	r2, r9
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	001d      	movs	r5, r3
 80053fc:	7812      	ldrb	r2, [r2, #0]
 80053fe:	433a      	orrs	r2, r7
 8005400:	4055      	eors	r5, r2
 8005402:	46aa      	mov	sl, r5
 8005404:	4281      	cmp	r1, r0
 8005406:	d808      	bhi.n	800541a <update_program.lto_priv.152+0x50>
 8005408:	4293      	cmp	r3, r2
 800540a:	d136      	bne.n	800547a <update_program.lto_priv.152+0xb0>
 800540c:	b005      	add	sp, #20
 800540e:	bc3c      	pop	{r2, r3, r4, r5}
 8005410:	4690      	mov	r8, r2
 8005412:	4699      	mov	r9, r3
 8005414:	46a2      	mov	sl, r4
 8005416:	46ab      	mov	fp, r5
 8005418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800541a:	0025      	movs	r5, r4
 800541c:	35c2      	adds	r5, #194	; 0xc2
 800541e:	8828      	ldrh	r0, [r5, #0]
 8005420:	3001      	adds	r0, #1
 8005422:	b280      	uxth	r0, r0
 8005424:	f00b fbe8 	bl	8010bf8 <__aeabi_uidivmod>
 8005428:	b28b      	uxth	r3, r1
 800542a:	469b      	mov	fp, r3
 800542c:	802b      	strh	r3, [r5, #0]
 800542e:	0020      	movs	r0, r4
 8005430:	2308      	movs	r3, #8
 8005432:	5ef5      	ldrsh	r5, [r6, r3]
 8005434:	f7ff ff8c 	bl	8005350 <get_package_range_coarse_max>
 8005438:	465b      	mov	r3, fp
 800543a:	4358      	muls	r0, r3
 800543c:	1945      	adds	r5, r0, r5
 800543e:	0030      	movs	r0, r6
 8005440:	f7ff ffaa 	bl	8005398 <coarse_count_for_next_package>
 8005444:	0023      	movs	r3, r4
 8005446:	33c8      	adds	r3, #200	; 0xc8
 8005448:	6018      	str	r0, [r3, #0]
 800544a:	466b      	mov	r3, sp
 800544c:	4642      	mov	r2, r8
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	705a      	strb	r2, [r3, #1]
 8005452:	4652      	mov	r2, sl
 8005454:	709a      	strb	r2, [r3, #2]
 8005456:	464b      	mov	r3, r9
 8005458:	3801      	subs	r0, #1
 800545a:	9001      	str	r0, [sp, #4]
 800545c:	9502      	str	r5, [sp, #8]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	4669      	mov	r1, sp
 8005462:	431f      	orrs	r7, r3
 8005464:	2301      	movs	r3, #1
 8005466:	6830      	ldr	r0, [r6, #0]
 8005468:	405f      	eors	r7, r3
 800546a:	9703      	str	r7, [sp, #12]
 800546c:	f7fc fc9c 	bl	8001da8 <acc_cpd_linear_sweep_update_program>
 8005470:	2800      	cmp	r0, #0
 8005472:	d0cb      	beq.n	800540c <update_program.lto_priv.152+0x42>
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005478:	e7c8      	b.n	800540c <update_program.lto_priv.152+0x42>
 800547a:	2000      	movs	r0, #0
 800547c:	0005      	movs	r5, r0
 800547e:	e7e4      	b.n	800544a <update_program.lto_priv.152+0x80>

08005480 <acc_sensor_protocol_r2_is_sensor_running>:
 8005480:	b513      	push	{r0, r1, r4, lr}
 8005482:	466b      	mov	r3, sp
 8005484:	1d9c      	adds	r4, r3, #6
 8005486:	2300      	movs	r3, #0
 8005488:	0022      	movs	r2, r4
 800548a:	2111      	movs	r1, #17
 800548c:	8023      	strh	r3, [r4, #0]
 800548e:	f00a f993 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 8005492:	8820      	ldrh	r0, [r4, #0]
 8005494:	0540      	lsls	r0, r0, #21
 8005496:	0fc0      	lsrs	r0, r0, #31
 8005498:	bd16      	pop	{r1, r2, r4, pc}

0800549a <acc_sensor_protocol_r2_run_program>:
 800549a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800549c:	4d15      	ldr	r5, [pc, #84]	; (80054f4 <acc_sensor_protocol_r2_run_program+0x5a>)
 800549e:	0004      	movs	r4, r0
 80054a0:	002b      	movs	r3, r5
 80054a2:	3330      	adds	r3, #48	; 0x30
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	000e      	movs	r6, r1
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d906      	bls.n	80054ba <acc_sensor_protocol_r2_run_program+0x20>
 80054ac:	9100      	str	r1, [sp, #0]
 80054ae:	0003      	movs	r3, r0
 80054b0:	4a11      	ldr	r2, [pc, #68]	; (80054f8 <acc_sensor_protocol_r2_run_program+0x5e>)
 80054b2:	4912      	ldr	r1, [pc, #72]	; (80054fc <acc_sensor_protocol_r2_run_program+0x62>)
 80054b4:	2004      	movs	r0, #4
 80054b6:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80054b8:	47b8      	blx	r7
 80054ba:	0020      	movs	r0, r4
 80054bc:	f7ff ffe0 	bl	8005480 <acc_sensor_protocol_r2_is_sensor_running>
 80054c0:	1e02      	subs	r2, r0, #0
 80054c2:	d00a      	beq.n	80054da <acc_sensor_protocol_r2_run_program+0x40>
 80054c4:	0023      	movs	r3, r4
 80054c6:	4a0e      	ldr	r2, [pc, #56]	; (8005500 <acc_sensor_protocol_r2_run_program+0x66>)
 80054c8:	490c      	ldr	r1, [pc, #48]	; (80054fc <acc_sensor_protocol_r2_run_program+0x62>)
 80054ca:	2000      	movs	r0, #0
 80054cc:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80054ce:	47a8      	blx	r5
 80054d0:	0020      	movs	r0, r4
 80054d2:	f00a f998 	bl	800f806 <acc_sensor_diagnostics_r2_sensor_status>
 80054d6:	2000      	movs	r0, #0
 80054d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054da:	2110      	movs	r1, #16
 80054dc:	0020      	movs	r0, r4
 80054de:	f007 f8e5 	bl	800c6ac <acc_sensor_reg_write>
 80054e2:	2280      	movs	r2, #128	; 0x80
 80054e4:	00d2      	lsls	r2, r2, #3
 80054e6:	0020      	movs	r0, r4
 80054e8:	4332      	orrs	r2, r6
 80054ea:	2110      	movs	r1, #16
 80054ec:	f007 f8de 	bl	800c6ac <acc_sensor_reg_write>
 80054f0:	2001      	movs	r0, #1
 80054f2:	e7f1      	b.n	80054d8 <acc_sensor_protocol_r2_run_program+0x3e>
 80054f4:	200004a8 	.word	0x200004a8
 80054f8:	0801cc25 	.word	0x0801cc25
 80054fc:	0801c85a 	.word	0x0801c85a
 8005500:	0801cc48 	.word	0x0801cc48

08005504 <acc_rss_integration_mem_alloc_debug>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	4d05      	ldr	r5, [pc, #20]	; (800551c <acc_rss_integration_mem_alloc_debug+0x18>)
 8005508:	68ab      	ldr	r3, [r5, #8]
 800550a:	4798      	blx	r3
 800550c:	1e04      	subs	r4, r0, #0
 800550e:	d103      	bne.n	8005518 <acc_rss_integration_mem_alloc_debug+0x14>
 8005510:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005512:	4a03      	ldr	r2, [pc, #12]	; (8005520 <acc_rss_integration_mem_alloc_debug+0x1c>)
 8005514:	4903      	ldr	r1, [pc, #12]	; (8005524 <acc_rss_integration_mem_alloc_debug+0x20>)
 8005516:	4798      	blx	r3
 8005518:	0020      	movs	r0, r4
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	200004a8 	.word	0x200004a8
 8005520:	0801cc77 	.word	0x0801cc77
 8005524:	0801d996 	.word	0x0801d996

08005528 <sparse_create_service>:
 8005528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552a:	46de      	mov	lr, fp
 800552c:	4645      	mov	r5, r8
 800552e:	4657      	mov	r7, sl
 8005530:	464e      	mov	r6, r9
 8005532:	b5e0      	push	{r5, r6, r7, lr}
 8005534:	b0a5      	sub	sp, #148	; 0x94
 8005536:	4680      	mov	r8, r0
 8005538:	228c      	movs	r2, #140	; 0x8c
 800553a:	a801      	add	r0, sp, #4
 800553c:	000c      	movs	r4, r1
 800553e:	f010 fc89 	bl	8015e54 <memcpy>
 8005542:	a801      	add	r0, sp, #4
 8005544:	f7fb fdaa 	bl	800109c <acc_service_configuration_check>
 8005548:	2800      	cmp	r0, #0
 800554a:	d101      	bne.n	8005550 <sparse_create_service+0x28>
 800554c:	2000      	movs	r0, #0
 800554e:	e014      	b.n	800557a <sparse_create_service+0x52>
 8005550:	a808      	add	r0, sp, #32
 8005552:	f7fb fb39 	bl	8000bc8 <configuration_is_valid>
 8005556:	2800      	cmp	r0, #0
 8005558:	d0f8      	beq.n	800554c <sparse_create_service+0x24>
 800555a:	a808      	add	r0, sp, #32
 800555c:	f7fb fab4 	bl	8000ac8 <acc_base_configuration_check.part.6>
 8005560:	2800      	cmp	r0, #0
 8005562:	d0f3      	beq.n	800554c <sparse_create_service+0x24>
 8005564:	ab22      	add	r3, sp, #136	; 0x88
 8005566:	881d      	ldrh	r5, [r3, #0]
 8005568:	2d00      	cmp	r5, #0
 800556a:	d10d      	bne.n	8005588 <sparse_create_service+0x60>
 800556c:	4b73      	ldr	r3, [pc, #460]	; (800573c <sparse_create_service+0x214>)
 800556e:	0028      	movs	r0, r5
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	4a73      	ldr	r2, [pc, #460]	; (8005740 <sparse_create_service+0x218>)
 8005574:	4973      	ldr	r1, [pc, #460]	; (8005744 <sparse_create_service+0x21c>)
 8005576:	4798      	blx	r3
 8005578:	0028      	movs	r0, r5
 800557a:	b025      	add	sp, #148	; 0x94
 800557c:	bc3c      	pop	{r2, r3, r4, r5}
 800557e:	4690      	mov	r8, r2
 8005580:	4699      	mov	r9, r3
 8005582:	46a2      	mov	sl, r4
 8005584:	46ab      	mov	fp, r5
 8005586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005588:	238a      	movs	r3, #138	; 0x8a
 800558a:	446b      	add	r3, sp
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d10a      	bne.n	80055a8 <sparse_create_service+0x80>
 8005592:	ab20      	add	r3, sp, #128	; 0x80
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d906      	bls.n	80055a8 <sparse_create_service+0x80>
 800559a:	4b68      	ldr	r3, [pc, #416]	; (800573c <sparse_create_service+0x214>)
 800559c:	4a6a      	ldr	r2, [pc, #424]	; (8005748 <sparse_create_service+0x220>)
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	4968      	ldr	r1, [pc, #416]	; (8005744 <sparse_create_service+0x21c>)
 80055a2:	2000      	movs	r0, #0
 80055a4:	4798      	blx	r3
 80055a6:	e7d1      	b.n	800554c <sparse_create_service+0x24>
 80055a8:	4642      	mov	r2, r8
 80055aa:	7923      	ldrb	r3, [r4, #4]
 80055ac:	2010      	movs	r0, #16
 80055ae:	7213      	strb	r3, [r2, #8]
 80055b0:	4b66      	ldr	r3, [pc, #408]	; (800574c <sparse_create_service+0x224>)
 80055b2:	22ec      	movs	r2, #236	; 0xec
 80055b4:	0019      	movs	r1, r3
 80055b6:	469b      	mov	fp, r3
 80055b8:	f007 f818 	bl	800c5ec <acc_rss_integration_mem_calloc_debug.constprop.65>
 80055bc:	0005      	movs	r5, r0
 80055be:	2090      	movs	r0, #144	; 0x90
 80055c0:	22ed      	movs	r2, #237	; 0xed
 80055c2:	4659      	mov	r1, fp
 80055c4:	0040      	lsls	r0, r0, #1
 80055c6:	f007 f811 	bl	800c5ec <acc_rss_integration_mem_calloc_debug.constprop.65>
 80055ca:	0004      	movs	r4, r0
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	d001      	beq.n	80055d4 <sparse_create_service+0xac>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d10f      	bne.n	80055f4 <sparse_create_service+0xcc>
 80055d4:	0028      	movs	r0, r5
 80055d6:	f7fb f9fd 	bl	80009d4 <acc_rss_integration_mem_free>
 80055da:	0020      	movs	r0, r4
 80055dc:	f7fb f9fa 	bl	80009d4 <acc_rss_integration_mem_free>
 80055e0:	2500      	movs	r5, #0
 80055e2:	4643      	mov	r3, r8
 80055e4:	4642      	mov	r2, r8
 80055e6:	611d      	str	r5, [r3, #16]
 80055e8:	1e68      	subs	r0, r5, #1
 80055ea:	4185      	sbcs	r5, r0
 80055ec:	4b58      	ldr	r3, [pc, #352]	; (8005750 <sparse_create_service+0x228>)
 80055ee:	b2e8      	uxtb	r0, r5
 80055f0:	60d3      	str	r3, [r2, #12]
 80055f2:	e7c2      	b.n	800557a <sparse_create_service+0x52>
 80055f4:	2318      	movs	r3, #24
 80055f6:	469a      	mov	sl, r3
 80055f8:	6028      	str	r0, [r5, #0]
 80055fa:	4482      	add	sl, r0
 80055fc:	4640      	mov	r0, r8
 80055fe:	18c0      	adds	r0, r0, r3
 8005600:	33e4      	adds	r3, #228	; 0xe4
 8005602:	4699      	mov	r9, r3
 8005604:	44a1      	add	r9, r4
 8005606:	464b      	mov	r3, r9
 8005608:	4652      	mov	r2, sl
 800560a:	6760      	str	r0, [r4, #116]	; 0x74
 800560c:	a908      	add	r1, sp, #32
 800560e:	f7fc fd15 	bl	800203c <acc_sensor_manager_prepare_radar_engine>
 8005612:	464b      	mov	r3, r9
 8005614:	895a      	ldrh	r2, [r3, #10]
 8005616:	0023      	movs	r3, r4
 8005618:	3370      	adds	r3, #112	; 0x70
 800561a:	1e06      	subs	r6, r0, #0
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	d104      	bne.n	800562a <sparse_create_service+0x102>
 8005620:	0028      	movs	r0, r5
 8005622:	f7fb fa07 	bl	8000a34 <disassemble.lto_priv.181>
 8005626:	0035      	movs	r5, r6
 8005628:	e7db      	b.n	80055e2 <sparse_create_service+0xba>
 800562a:	464b      	mov	r3, r9
 800562c:	89db      	ldrh	r3, [r3, #14]
 800562e:	189b      	adds	r3, r3, r2
 8005630:	464a      	mov	r2, r9
 8005632:	8997      	ldrh	r7, [r2, #12]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	007f      	lsls	r7, r7, #1
 8005638:	429f      	cmp	r7, r3
 800563a:	d200      	bcs.n	800563e <sparse_create_service+0x116>
 800563c:	001f      	movs	r7, r3
 800563e:	a808      	add	r0, sp, #32
 8005640:	f7fb fac2 	bl	8000bc8 <configuration_is_valid>
 8005644:	2600      	movs	r6, #0
 8005646:	42b0      	cmp	r0, r6
 8005648:	d001      	beq.n	800564e <sparse_create_service+0x126>
 800564a:	ab1d      	add	r3, sp, #116	; 0x74
 800564c:	881e      	ldrh	r6, [r3, #0]
 800564e:	42be      	cmp	r6, r7
 8005650:	d200      	bcs.n	8005654 <sparse_create_service+0x12c>
 8005652:	003e      	movs	r6, r7
 8005654:	2298      	movs	r2, #152	; 0x98
 8005656:	4659      	mov	r1, fp
 8005658:	0052      	lsls	r2, r2, #1
 800565a:	0030      	movs	r0, r6
 800565c:	f7ff ff52 	bl	8005504 <acc_rss_integration_mem_alloc_debug>
 8005660:	464b      	mov	r3, r9
 8005662:	1e07      	subs	r7, r0, #0
 8005664:	61d8      	str	r0, [r3, #28]
 8005666:	d056      	beq.n	8005716 <sparse_create_service+0x1ee>
 8005668:	621e      	str	r6, [r3, #32]
 800566a:	0022      	movs	r2, r4
 800566c:	0026      	movs	r6, r4
 800566e:	1da3      	adds	r3, r4, #6
 8005670:	6623      	str	r3, [r4, #96]	; 0x60
 8005672:	1de3      	adds	r3, r4, #7
 8005674:	6663      	str	r3, [r4, #100]	; 0x64
 8005676:	3214      	adds	r2, #20
 8005678:	3305      	adds	r3, #5
 800567a:	3608      	adds	r6, #8
 800567c:	66a3      	str	r3, [r4, #104]	; 0x68
 800567e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005680:	65e2      	str	r2, [r4, #92]	; 0x5c
 8005682:	65a4      	str	r4, [r4, #88]	; 0x58
 8005684:	66e6      	str	r6, [r4, #108]	; 0x6c
 8005686:	67d8      	str	r0, [r3, #124]	; 0x7c
 8005688:	1d23      	adds	r3, r4, #4
 800568a:	4699      	mov	r9, r3
 800568c:	4649      	mov	r1, r9
 800568e:	3388      	adds	r3, #136	; 0x88
 8005690:	6019      	str	r1, [r3, #0]
 8005692:	611a      	str	r2, [r3, #16]
 8005694:	63d8      	str	r0, [r3, #60]	; 0x3c
 8005696:	665c      	str	r4, [r3, #100]	; 0x64
 8005698:	238c      	movs	r3, #140	; 0x8c
 800569a:	4f28      	ldr	r7, [pc, #160]	; (800573c <sparse_create_service+0x214>)
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	469b      	mov	fp, r3
 80056a0:	003b      	movs	r3, r7
 80056a2:	3330      	adds	r3, #48	; 0x30
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	44a3      	add	fp, r4
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d839      	bhi.n	8005720 <sparse_create_service+0x1f8>
 80056ac:	4652      	mov	r2, sl
 80056ae:	465b      	mov	r3, fp
 80056b0:	a908      	add	r1, sp, #32
 80056b2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80056b4:	f7fb fb7a 	bl	8000dac <acc_sensor_manager_prepare_measurement>
 80056b8:	4682      	mov	sl, r0
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d034      	beq.n	8005728 <sparse_create_service+0x200>
 80056be:	0023      	movs	r3, r4
 80056c0:	4a24      	ldr	r2, [pc, #144]	; (8005754 <sparse_create_service+0x22c>)
 80056c2:	33b0      	adds	r3, #176	; 0xb0
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	4a24      	ldr	r2, [pc, #144]	; (8005758 <sparse_create_service+0x230>)
 80056c8:	0020      	movs	r0, r4
 80056ca:	605a      	str	r2, [r3, #4]
 80056cc:	464a      	mov	r2, r9
 80056ce:	4b23      	ldr	r3, [pc, #140]	; (800575c <sparse_create_service+0x234>)
 80056d0:	3078      	adds	r0, #120	; 0x78
 80056d2:	67e3      	str	r3, [r4, #124]	; 0x7c
 80056d4:	4b22      	ldr	r3, [pc, #136]	; (8005760 <sparse_create_service+0x238>)
 80056d6:	67d3      	str	r3, [r2, #124]	; 0x7c
 80056d8:	4b22      	ldr	r3, [pc, #136]	; (8005764 <sparse_create_service+0x23c>)
 80056da:	4a23      	ldr	r2, [pc, #140]	; (8005768 <sparse_create_service+0x240>)
 80056dc:	67f3      	str	r3, [r6, #124]	; 0x7c
 80056de:	0023      	movs	r3, r4
 80056e0:	33b8      	adds	r3, #184	; 0xb8
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
 80056e4:	4a21      	ldr	r2, [pc, #132]	; (800576c <sparse_create_service+0x244>)
 80056e6:	605a      	str	r2, [r3, #4]
 80056e8:	4a21      	ldr	r2, [pc, #132]	; (8005770 <sparse_create_service+0x248>)
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	4a21      	ldr	r2, [pc, #132]	; (8005774 <sparse_create_service+0x24c>)
 80056ee:	60da      	str	r2, [r3, #12]
 80056f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80056f2:	67a3      	str	r3, [r4, #120]	; 0x78
 80056f4:	f7fa fdef 	bl	80002d6 <validate.lto_priv.115>
 80056f8:	1e06      	subs	r6, r0, #0
 80056fa:	d01a      	beq.n	8005732 <sparse_create_service+0x20a>
 80056fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80056fe:	34f4      	adds	r4, #244	; 0xf4
 8005700:	68c3      	ldr	r3, [r0, #12]
 8005702:	4798      	blx	r3
 8005704:	4643      	mov	r3, r8
 8005706:	6023      	str	r3, [r4, #0]
 8005708:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <sparse_create_service+0x250>)
 800570a:	606b      	str	r3, [r5, #4]
 800570c:	4b1b      	ldr	r3, [pc, #108]	; (800577c <sparse_create_service+0x254>)
 800570e:	60ab      	str	r3, [r5, #8]
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <sparse_create_service+0x258>)
 8005712:	60eb      	str	r3, [r5, #12]
 8005714:	e765      	b.n	80055e2 <sparse_create_service+0xba>
 8005716:	0028      	movs	r0, r5
 8005718:	f7fb f98c 	bl	8000a34 <disassemble.lto_priv.181>
 800571c:	003d      	movs	r5, r7
 800571e:	e760      	b.n	80055e2 <sparse_create_service+0xba>
 8005720:	a808      	add	r0, sp, #32
 8005722:	f7fb fc15 	bl	8000f50 <acc_base_configuration_print.part.5>
 8005726:	e7c1      	b.n	80056ac <sparse_create_service+0x184>
 8005728:	0028      	movs	r0, r5
 800572a:	f7fb f983 	bl	8000a34 <disassemble.lto_priv.181>
 800572e:	4655      	mov	r5, sl
 8005730:	e757      	b.n	80055e2 <sparse_create_service+0xba>
 8005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005734:	4a13      	ldr	r2, [pc, #76]	; (8005784 <sparse_create_service+0x25c>)
 8005736:	4914      	ldr	r1, [pc, #80]	; (8005788 <sparse_create_service+0x260>)
 8005738:	4798      	blx	r3
 800573a:	e771      	b.n	8005620 <sparse_create_service+0xf8>
 800573c:	200004a8 	.word	0x200004a8
 8005740:	0801cc85 	.word	0x0801cc85
 8005744:	0801c740 	.word	0x0801c740
 8005748:	0801ccb5 	.word	0x0801ccb5
 800574c:	0801cce0 	.word	0x0801cce0
 8005750:	080010cd 	.word	0x080010cd
 8005754:	40400000 	.word	0x40400000
 8005758:	080021a1 	.word	0x080021a1
 800575c:	0800032d 	.word	0x0800032d
 8005760:	080002d7 	.word	0x080002d7
 8005764:	080008f7 	.word	0x080008f7
 8005768:	08001f41 	.word	0x08001f41
 800576c:	080001c5 	.word	0x080001c5
 8005770:	08000157 	.word	0x08000157
 8005774:	080001c3 	.word	0x080001c3
 8005778:	08005153 	.word	0x08005153
 800577c:	08001ec7 	.word	0x08001ec7
 8005780:	08000a35 	.word	0x08000a35
 8005784:	0801cd09 	.word	0x0801cd09
 8005788:	0801cd29 	.word	0x0801cd29

0800578c <envelope_create_service>:
 800578c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800578e:	46de      	mov	lr, fp
 8005790:	464e      	mov	r6, r9
 8005792:	4645      	mov	r5, r8
 8005794:	4657      	mov	r7, sl
 8005796:	b5e0      	push	{r5, r6, r7, lr}
 8005798:	b0a9      	sub	sp, #164	; 0xa4
 800579a:	9001      	str	r0, [sp, #4]
 800579c:	2290      	movs	r2, #144	; 0x90
 800579e:	a804      	add	r0, sp, #16
 80057a0:	000d      	movs	r5, r1
 80057a2:	f010 fb57 	bl	8015e54 <memcpy>
 80057a6:	a80b      	add	r0, sp, #44	; 0x2c
 80057a8:	f7fb fa44 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 80057ac:	0006      	movs	r6, r0
 80057ae:	a80b      	add	r0, sp, #44	; 0x2c
 80057b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80057b2:	f7fb fa09 	bl	8000bc8 <configuration_is_valid>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d006      	beq.n	80057c8 <envelope_create_service+0x3c>
 80057ba:	0030      	movs	r0, r6
 80057bc:	f00b fd98 	bl	80112f0 <__aeabi_i2f>
 80057c0:	1c21      	adds	r1, r4, #0
 80057c2:	f00a fe61 	bl	8010488 <__aeabi_fmul>
 80057c6:	9013      	str	r0, [sp, #76]	; 0x4c
 80057c8:	a804      	add	r0, sp, #16
 80057ca:	f7fb fc67 	bl	800109c <acc_service_configuration_check>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d101      	bne.n	80057d6 <envelope_create_service+0x4a>
 80057d2:	2000      	movs	r0, #0
 80057d4:	e009      	b.n	80057ea <envelope_create_service+0x5e>
 80057d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d10d      	bne.n	80057f8 <envelope_create_service+0x6c>
 80057dc:	4b45      	ldr	r3, [pc, #276]	; (80058f4 <envelope_create_service+0x168>)
 80057de:	2000      	movs	r0, #0
 80057e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e2:	4a45      	ldr	r2, [pc, #276]	; (80058f8 <envelope_create_service+0x16c>)
 80057e4:	4945      	ldr	r1, [pc, #276]	; (80058fc <envelope_create_service+0x170>)
 80057e6:	4798      	blx	r3
 80057e8:	2000      	movs	r0, #0
 80057ea:	b029      	add	sp, #164	; 0xa4
 80057ec:	bc3c      	pop	{r2, r3, r4, r5}
 80057ee:	4690      	mov	r8, r2
 80057f0:	4699      	mov	r9, r3
 80057f2:	46a2      	mov	sl, r4
 80057f4:	46ab      	mov	fp, r5
 80057f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f8:	a80b      	add	r0, sp, #44	; 0x2c
 80057fa:	f7fb f9e5 	bl	8000bc8 <configuration_is_valid>
 80057fe:	2800      	cmp	r0, #0
 8005800:	d0e7      	beq.n	80057d2 <envelope_create_service+0x46>
 8005802:	a80b      	add	r0, sp, #44	; 0x2c
 8005804:	f7fb f960 	bl	8000ac8 <acc_base_configuration_check.part.6>
 8005808:	2800      	cmp	r0, #0
 800580a:	d0e2      	beq.n	80057d2 <envelope_create_service+0x46>
 800580c:	a80b      	add	r0, sp, #44	; 0x2c
 800580e:	f7fb fa11 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8005812:	1e43      	subs	r3, r0, #1
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b01      	cmp	r3, #1
 8005818:	d908      	bls.n	800582c <envelope_create_service+0xa0>
 800581a:	2804      	cmp	r0, #4
 800581c:	d006      	beq.n	800582c <envelope_create_service+0xa0>
 800581e:	4b35      	ldr	r3, [pc, #212]	; (80058f4 <envelope_create_service+0x168>)
 8005820:	4a37      	ldr	r2, [pc, #220]	; (8005900 <envelope_create_service+0x174>)
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	4935      	ldr	r1, [pc, #212]	; (80058fc <envelope_create_service+0x170>)
 8005826:	2000      	movs	r0, #0
 8005828:	4798      	blx	r3
 800582a:	e7d2      	b.n	80057d2 <envelope_create_service+0x46>
 800582c:	a80b      	add	r0, sp, #44	; 0x2c
 800582e:	f7fb f9cb 	bl	8000bc8 <configuration_is_valid>
 8005832:	1e04      	subs	r4, r0, #0
 8005834:	d004      	beq.n	8005840 <envelope_create_service+0xb4>
 8005836:	aa04      	add	r2, sp, #16
 8005838:	236b      	movs	r3, #107	; 0x6b
 800583a:	4694      	mov	ip, r2
 800583c:	4463      	add	r3, ip
 800583e:	781c      	ldrb	r4, [r3, #0]
 8005840:	a80b      	add	r0, sp, #44	; 0x2c
 8005842:	f7fb f9c1 	bl	8000bc8 <configuration_is_valid>
 8005846:	2800      	cmp	r0, #0
 8005848:	d010      	beq.n	800586c <envelope_create_service+0xe0>
 800584a:	2c00      	cmp	r4, #0
 800584c:	d00e      	beq.n	800586c <envelope_create_service+0xe0>
 800584e:	ab11      	add	r3, sp, #68	; 0x44
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <envelope_create_service+0xe0>
 8005856:	4b27      	ldr	r3, [pc, #156]	; (80058f4 <envelope_create_service+0x168>)
 8005858:	001a      	movs	r2, r3
 800585a:	3230      	adds	r2, #48	; 0x30
 800585c:	7812      	ldrb	r2, [r2, #0]
 800585e:	2a00      	cmp	r2, #0
 8005860:	d004      	beq.n	800586c <envelope_create_service+0xe0>
 8005862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005864:	4a27      	ldr	r2, [pc, #156]	; (8005904 <envelope_create_service+0x178>)
 8005866:	4925      	ldr	r1, [pc, #148]	; (80058fc <envelope_create_service+0x170>)
 8005868:	2001      	movs	r0, #1
 800586a:	4798      	blx	r3
 800586c:	792b      	ldrb	r3, [r5, #4]
 800586e:	9a01      	ldr	r2, [sp, #4]
 8005870:	2010      	movs	r0, #16
 8005872:	7213      	strb	r3, [r2, #8]
 8005874:	2280      	movs	r2, #128	; 0x80
 8005876:	4b24      	ldr	r3, [pc, #144]	; (8005908 <envelope_create_service+0x17c>)
 8005878:	0052      	lsls	r2, r2, #1
 800587a:	0019      	movs	r1, r3
 800587c:	4699      	mov	r9, r3
 800587e:	f006 feb5 	bl	800c5ec <acc_rss_integration_mem_calloc_debug.constprop.65>
 8005882:	2202      	movs	r2, #2
 8005884:	0005      	movs	r5, r0
 8005886:	20ec      	movs	r0, #236	; 0xec
 8005888:	32ff      	adds	r2, #255	; 0xff
 800588a:	4649      	mov	r1, r9
 800588c:	0080      	lsls	r0, r0, #2
 800588e:	f006 fead 	bl	800c5ec <acc_rss_integration_mem_calloc_debug.constprop.65>
 8005892:	0004      	movs	r4, r0
 8005894:	2d00      	cmp	r5, #0
 8005896:	d001      	beq.n	800589c <envelope_create_service+0x110>
 8005898:	2800      	cmp	r0, #0
 800589a:	d10f      	bne.n	80058bc <envelope_create_service+0x130>
 800589c:	0028      	movs	r0, r5
 800589e:	f7fb f899 	bl	80009d4 <acc_rss_integration_mem_free>
 80058a2:	0020      	movs	r0, r4
 80058a4:	f7fb f896 	bl	80009d4 <acc_rss_integration_mem_free>
 80058a8:	2500      	movs	r5, #0
 80058aa:	9b01      	ldr	r3, [sp, #4]
 80058ac:	9a01      	ldr	r2, [sp, #4]
 80058ae:	611d      	str	r5, [r3, #16]
 80058b0:	1e68      	subs	r0, r5, #1
 80058b2:	4185      	sbcs	r5, r0
 80058b4:	4b15      	ldr	r3, [pc, #84]	; (800590c <envelope_create_service+0x180>)
 80058b6:	b2e8      	uxtb	r0, r5
 80058b8:	60d3      	str	r3, [r2, #12]
 80058ba:	e796      	b.n	80057ea <envelope_create_service+0x5e>
 80058bc:	2318      	movs	r3, #24
 80058be:	469c      	mov	ip, r3
 80058c0:	4484      	add	ip, r0
 80058c2:	4663      	mov	r3, ip
 80058c4:	9302      	str	r3, [sp, #8]
 80058c6:	23e3      	movs	r3, #227	; 0xe3
 80058c8:	6028      	str	r0, [r5, #0]
 80058ca:	9801      	ldr	r0, [sp, #4]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	3018      	adds	r0, #24
 80058d0:	18e7      	adds	r7, r4, r3
 80058d2:	003b      	movs	r3, r7
 80058d4:	4662      	mov	r2, ip
 80058d6:	6760      	str	r0, [r4, #116]	; 0x74
 80058d8:	a90b      	add	r1, sp, #44	; 0x2c
 80058da:	f7fc fbaf 	bl	800203c <acc_sensor_manager_prepare_radar_engine>
 80058de:	0023      	movs	r3, r4
 80058e0:	897a      	ldrh	r2, [r7, #10]
 80058e2:	3370      	adds	r3, #112	; 0x70
 80058e4:	1e06      	subs	r6, r0, #0
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	d112      	bne.n	8005910 <envelope_create_service+0x184>
 80058ea:	0028      	movs	r0, r5
 80058ec:	f7fb f88e 	bl	8000a0c <disassemble.lto_priv.182>
 80058f0:	0035      	movs	r5, r6
 80058f2:	e7da      	b.n	80058aa <envelope_create_service+0x11e>
 80058f4:	200004a8 	.word	0x200004a8
 80058f8:	0801cd39 	.word	0x0801cd39
 80058fc:	0801c7d9 	.word	0x0801c7d9
 8005900:	0801cd74 	.word	0x0801cd74
 8005904:	0801cd94 	.word	0x0801cd94
 8005908:	0801cdd9 	.word	0x0801cdd9
 800590c:	080010cd 	.word	0x080010cd
 8005910:	a80b      	add	r0, sp, #44	; 0x2c
 8005912:	f7fb f959 	bl	8000bc8 <configuration_is_valid>
 8005916:	4682      	mov	sl, r0
 8005918:	2800      	cmp	r0, #0
 800591a:	d002      	beq.n	8005922 <envelope_create_service+0x196>
 800591c:	ab11      	add	r3, sp, #68	; 0x44
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	469a      	mov	sl, r3
 8005922:	23e3      	movs	r3, #227	; 0xe3
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	5ae2      	ldrh	r2, [r4, r3]
 8005928:	89bb      	ldrh	r3, [r7, #12]
 800592a:	0092      	lsls	r2, r2, #2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4293      	cmp	r3, r2
 8005930:	d200      	bcs.n	8005934 <envelope_create_service+0x1a8>
 8005932:	0013      	movs	r3, r2
 8005934:	897e      	ldrh	r6, [r7, #10]
 8005936:	89fa      	ldrh	r2, [r7, #14]
 8005938:	18b6      	adds	r6, r6, r2
 800593a:	0076      	lsls	r6, r6, #1
 800593c:	429e      	cmp	r6, r3
 800593e:	d200      	bcs.n	8005942 <envelope_create_service+0x1b6>
 8005940:	001e      	movs	r6, r3
 8005942:	a80b      	add	r0, sp, #44	; 0x2c
 8005944:	f7fb f940 	bl	8000bc8 <configuration_is_valid>
 8005948:	2300      	movs	r3, #0
 800594a:	4298      	cmp	r0, r3
 800594c:	d001      	beq.n	8005952 <envelope_create_service+0x1c6>
 800594e:	ab20      	add	r3, sp, #128	; 0x80
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	4698      	mov	r8, r3
 8005954:	42b3      	cmp	r3, r6
 8005956:	d200      	bcs.n	800595a <envelope_create_service+0x1ce>
 8005958:	46b0      	mov	r8, r6
 800595a:	23eb      	movs	r3, #235	; 0xeb
 800595c:	4642      	mov	r2, r8
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	50e2      	str	r2, [r4, r3]
 8005962:	4653      	mov	r3, sl
 8005964:	4640      	mov	r0, r8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <envelope_create_service+0x1ea>
 800596a:	23e3      	movs	r3, #227	; 0xe3
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	5ae0      	ldrh	r0, [r4, r3]
 8005970:	0080      	lsls	r0, r0, #2
 8005972:	300a      	adds	r0, #10
 8005974:	4440      	add	r0, r8
 8005976:	2286      	movs	r2, #134	; 0x86
 8005978:	4649      	mov	r1, r9
 800597a:	32ff      	adds	r2, #255	; 0xff
 800597c:	f7ff fdc2 	bl	8005504 <acc_rss_integration_mem_alloc_debug>
 8005980:	23ea      	movs	r3, #234	; 0xea
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	1e06      	subs	r6, r0, #0
 8005986:	50e0      	str	r0, [r4, r3]
 8005988:	d0af      	beq.n	80058ea <envelope_create_service+0x15e>
 800598a:	887b      	ldrh	r3, [r7, #2]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4699      	mov	r9, r3
 8005990:	4653      	mov	r3, sl
 8005992:	4481      	add	r9, r0
 8005994:	46cb      	mov	fp, r9
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <envelope_create_service+0x216>
 800599a:	4643      	mov	r3, r8
 800599c:	3304      	adds	r3, #4
 800599e:	469b      	mov	fp, r3
 80059a0:	4483      	add	fp, r0
 80059a2:	1da3      	adds	r3, r4, #6
 80059a4:	6623      	str	r3, [r4, #96]	; 0x60
 80059a6:	1de3      	adds	r3, r4, #7
 80059a8:	6663      	str	r3, [r4, #100]	; 0x64
 80059aa:	230c      	movs	r3, #12
 80059ac:	469c      	mov	ip, r3
 80059ae:	44a4      	add	ip, r4
 80059b0:	4663      	mov	r3, ip
 80059b2:	0027      	movs	r7, r4
 80059b4:	66a3      	str	r3, [r4, #104]	; 0x68
 80059b6:	9303      	str	r3, [sp, #12]
 80059b8:	3b04      	subs	r3, #4
 80059ba:	66e3      	str	r3, [r4, #108]	; 0x6c
 80059bc:	3714      	adds	r7, #20
 80059be:	3380      	adds	r3, #128	; 0x80
 80059c0:	1d22      	adds	r2, r4, #4
 80059c2:	64e6      	str	r6, [r4, #76]	; 0x4c
 80059c4:	65e7      	str	r7, [r4, #92]	; 0x5c
 80059c6:	65a4      	str	r4, [r4, #88]	; 0x58
 80059c8:	a80b      	add	r0, sp, #44	; 0x2c
 80059ca:	601e      	str	r6, [r3, #0]
 80059cc:	605a      	str	r2, [r3, #4]
 80059ce:	615f      	str	r7, [r3, #20]
 80059d0:	641e      	str	r6, [r3, #64]	; 0x40
 80059d2:	645e      	str	r6, [r3, #68]	; 0x44
 80059d4:	655f      	str	r7, [r3, #84]	; 0x54
 80059d6:	f7fb f91a 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d004      	beq.n	80059e8 <envelope_create_service+0x25c>
 80059de:	0023      	movs	r3, r4
 80059e0:	33fc      	adds	r3, #252	; 0xfc
 80059e2:	60de      	str	r6, [r3, #12]
 80059e4:	611e      	str	r6, [r3, #16]
 80059e6:	621f      	str	r7, [r3, #32]
 80059e8:	0023      	movs	r3, r4
 80059ea:	33fc      	adds	r3, #252	; 0xfc
 80059ec:	64de      	str	r6, [r3, #76]	; 0x4c
 80059ee:	651e      	str	r6, [r3, #80]	; 0x50
 80059f0:	661f      	str	r7, [r3, #96]	; 0x60
 80059f2:	23c2      	movs	r3, #194	; 0xc2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	50e6      	str	r6, [r4, r3]
 80059f8:	3304      	adds	r3, #4
 80059fa:	50e6      	str	r6, [r4, r3]
 80059fc:	9a03      	ldr	r2, [sp, #12]
 80059fe:	3310      	adds	r3, #16
 8005a00:	50e7      	str	r7, [r4, r3]
 8005a02:	330c      	adds	r3, #12
 8005a04:	50e2      	str	r2, [r4, r3]
 8005a06:	464a      	mov	r2, r9
 8005a08:	3324      	adds	r3, #36	; 0x24
 8005a0a:	50e6      	str	r6, [r4, r3]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	50e6      	str	r6, [r4, r3]
 8005a10:	3310      	adds	r3, #16
 8005a12:	50e7      	str	r7, [r4, r3]
 8005a14:	3334      	adds	r3, #52	; 0x34
 8005a16:	50e6      	str	r6, [r4, r3]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	50e2      	str	r2, [r4, r3]
 8005a1c:	3310      	adds	r3, #16
 8005a1e:	50e7      	str	r7, [r4, r3]
 8005a20:	3328      	adds	r3, #40	; 0x28
 8005a22:	50e2      	str	r2, [r4, r3]
 8005a24:	3304      	adds	r3, #4
 8005a26:	50e2      	str	r2, [r4, r3]
 8005a28:	3310      	adds	r3, #16
 8005a2a:	50e7      	str	r7, [r4, r3]
 8005a2c:	4653      	mov	r3, sl
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <envelope_create_service+0x2c2>
 8005a32:	23a8      	movs	r3, #168	; 0xa8
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	50e2      	str	r2, [r4, r3]
 8005a38:	4643      	mov	r3, r8
 8005a3a:	22ab      	movs	r2, #171	; 0xab
 8005a3c:	18f3      	adds	r3, r6, r3
 8005a3e:	0092      	lsls	r2, r2, #2
 8005a40:	50a3      	str	r3, [r4, r2]
 8005a42:	23a9      	movs	r3, #169	; 0xa9
 8005a44:	465a      	mov	r2, fp
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	50e2      	str	r2, [r4, r3]
 8005a4a:	3310      	adds	r3, #16
 8005a4c:	50e7      	str	r7, [r4, r3]
 8005a4e:	23b8      	movs	r3, #184	; 0xb8
 8005a50:	465a      	mov	r2, fp
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	50e2      	str	r2, [r4, r3]
 8005a56:	3304      	adds	r3, #4
 8005a58:	50e6      	str	r6, [r4, r3]
 8005a5a:	3310      	adds	r3, #16
 8005a5c:	50e7      	str	r7, [r4, r3]
 8005a5e:	3328      	adds	r3, #40	; 0x28
 8005a60:	50e6      	str	r6, [r4, r3]
 8005a62:	3304      	adds	r3, #4
 8005a64:	50e6      	str	r6, [r4, r3]
 8005a66:	3310      	adds	r3, #16
 8005a68:	50e7      	str	r7, [r4, r3]
 8005a6a:	3328      	adds	r3, #40	; 0x28
 8005a6c:	50e6      	str	r6, [r4, r3]
 8005a6e:	3328      	adds	r3, #40	; 0x28
 8005a70:	50e4      	str	r4, [r4, r3]
 8005a72:	3328      	adds	r3, #40	; 0x28
 8005a74:	18e6      	adds	r6, r4, r3
 8005a76:	4be9      	ldr	r3, [pc, #932]	; (8005e1c <envelope_create_service+0x690>)
 8005a78:	469b      	mov	fp, r3
 8005a7a:	3330      	adds	r3, #48	; 0x30
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d900      	bls.n	8005a84 <envelope_create_service+0x2f8>
 8005a82:	e270      	b.n	8005f66 <envelope_create_service+0x7da>
 8005a84:	0033      	movs	r3, r6
 8005a86:	9a02      	ldr	r2, [sp, #8]
 8005a88:	a90b      	add	r1, sp, #44	; 0x2c
 8005a8a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005a8c:	f7fb f98e 	bl	8000dac <acc_sensor_manager_prepare_measurement>
 8005a90:	1e06      	subs	r6, r0, #0
 8005a92:	d100      	bne.n	8005a96 <envelope_create_service+0x30a>
 8005a94:	e729      	b.n	80058ea <envelope_create_service+0x15e>
 8005a96:	0023      	movs	r3, r4
 8005a98:	2700      	movs	r7, #0
 8005a9a:	0026      	movs	r6, r4
 8005a9c:	4ae0      	ldr	r2, [pc, #896]	; (8005e20 <envelope_create_service+0x694>)
 8005a9e:	33b0      	adds	r3, #176	; 0xb0
 8005aa0:	605a      	str	r2, [r3, #4]
 8005aa2:	601f      	str	r7, [r3, #0]
 8005aa4:	4bdf      	ldr	r3, [pc, #892]	; (8005e24 <envelope_create_service+0x698>)
 8005aa6:	4ae0      	ldr	r2, [pc, #896]	; (8005e28 <envelope_create_service+0x69c>)
 8005aa8:	67e3      	str	r3, [r4, #124]	; 0x7c
 8005aaa:	1d23      	adds	r3, r4, #4
 8005aac:	67da      	str	r2, [r3, #124]	; 0x7c
 8005aae:	4adf      	ldr	r2, [pc, #892]	; (8005e2c <envelope_create_service+0x6a0>)
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	67da      	str	r2, [r3, #124]	; 0x7c
 8005ab4:	4bde      	ldr	r3, [pc, #888]	; (8005e30 <envelope_create_service+0x6a4>)
 8005ab6:	36b8      	adds	r6, #184	; 0xb8
 8005ab8:	6073      	str	r3, [r6, #4]
 8005aba:	4bde      	ldr	r3, [pc, #888]	; (8005e34 <envelope_create_service+0x6a8>)
 8005abc:	a80b      	add	r0, sp, #44	; 0x2c
 8005abe:	60b3      	str	r3, [r6, #8]
 8005ac0:	4bdd      	ldr	r3, [pc, #884]	; (8005e38 <envelope_create_service+0x6ac>)
 8005ac2:	60f3      	str	r3, [r6, #12]
 8005ac4:	4bdd      	ldr	r3, [pc, #884]	; (8005e3c <envelope_create_service+0x6b0>)
 8005ac6:	63b3      	str	r3, [r6, #56]	; 0x38
 8005ac8:	2300      	movs	r3, #0
 8005aca:	87b3      	strh	r3, [r6, #60]	; 0x3c
 8005acc:	f7fb f89f 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 8005ad0:	9702      	str	r7, [sp, #8]
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d01b      	beq.n	8005b0e <envelope_create_service+0x382>
 8005ad6:	a80b      	add	r0, sp, #44	; 0x2c
 8005ad8:	f7fb f876 	bl	8000bc8 <configuration_is_valid>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d007      	beq.n	8005af0 <envelope_create_service+0x364>
 8005ae0:	aa04      	add	r2, sp, #16
 8005ae2:	4694      	mov	ip, r2
 8005ae4:	2366      	movs	r3, #102	; 0x66
 8005ae6:	4463      	add	r3, ip
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	221e      	movs	r2, #30
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <envelope_create_service+0x368>
 8005af0:	2296      	movs	r2, #150	; 0x96
 8005af2:	0052      	lsls	r2, r2, #1
 8005af4:	0023      	movs	r3, r4
 8005af6:	33f8      	adds	r3, #248	; 0xf8
 8005af8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005afa:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005afc:	4ad0      	ldr	r2, [pc, #832]	; (8005e40 <envelope_create_service+0x6b4>)
 8005afe:	8719      	strh	r1, [r3, #56]	; 0x38
 8005b00:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b02:	4ad0      	ldr	r2, [pc, #832]	; (8005e44 <envelope_create_service+0x6b8>)
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	4ad0      	ldr	r2, [pc, #832]	; (8005e48 <envelope_create_service+0x6bc>)
 8005b08:	609a      	str	r2, [r3, #8]
 8005b0a:	4ad0      	ldr	r2, [pc, #832]	; (8005e4c <envelope_create_service+0x6c0>)
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	0023      	movs	r3, r4
 8005b10:	4acf      	ldr	r2, [pc, #828]	; (8005e50 <envelope_create_service+0x6c4>)
 8005b12:	3339      	adds	r3, #57	; 0x39
 8005b14:	33ff      	adds	r3, #255	; 0xff
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38
 8005b18:	4ace      	ldr	r2, [pc, #824]	; (8005e54 <envelope_create_service+0x6c8>)
 8005b1a:	49cf      	ldr	r1, [pc, #828]	; (8005e58 <envelope_create_service+0x6cc>)
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	4acf      	ldr	r2, [pc, #828]	; (8005e5c <envelope_create_service+0x6d0>)
 8005b20:	a80b      	add	r0, sp, #44	; 0x2c
 8005b22:	609a      	str	r2, [r3, #8]
 8005b24:	4ace      	ldr	r2, [pc, #824]	; (8005e60 <envelope_create_service+0x6d4>)
 8005b26:	60da      	str	r2, [r3, #12]
 8005b28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b2a:	6419      	str	r1, [r3, #64]	; 0x40
 8005b2c:	679a      	str	r2, [r3, #120]	; 0x78
 8005b2e:	49cd      	ldr	r1, [pc, #820]	; (8005e64 <envelope_create_service+0x6d8>)
 8005b30:	9a02      	ldr	r2, [sp, #8]
 8005b32:	6459      	str	r1, [r3, #68]	; 0x44
 8005b34:	67da      	str	r2, [r3, #124]	; 0x7c
 8005b36:	49cc      	ldr	r1, [pc, #816]	; (8005e68 <envelope_create_service+0x6dc>)
 8005b38:	4acc      	ldr	r2, [pc, #816]	; (8005e6c <envelope_create_service+0x6e0>)
 8005b3a:	6499      	str	r1, [r3, #72]	; 0x48
 8005b3c:	675a      	str	r2, [r3, #116]	; 0x74
 8005b3e:	23e3      	movs	r3, #227	; 0xe3
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4698      	mov	r8, r3
 8005b44:	44a0      	add	r8, r4
 8005b46:	4643      	mov	r3, r8
 8005b48:	891b      	ldrh	r3, [r3, #8]
 8005b4a:	469a      	mov	sl, r3
 8005b4c:	4643      	mov	r3, r8
 8005b4e:	88db      	ldrh	r3, [r3, #6]
 8005b50:	9303      	str	r3, [sp, #12]
 8005b52:	f7fb f839 	bl	8000bc8 <configuration_is_valid>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d100      	bne.n	8005b5c <envelope_create_service+0x3d0>
 8005b5a:	e208      	b.n	8005f6e <envelope_create_service+0x7e2>
 8005b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b5e:	4699      	mov	r9, r3
 8005b60:	0027      	movs	r7, r4
 8005b62:	4bc3      	ldr	r3, [pc, #780]	; (8005e70 <envelope_create_service+0x6e4>)
 8005b64:	37b9      	adds	r7, #185	; 0xb9
 8005b66:	37ff      	adds	r7, #255	; 0xff
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	4bc2      	ldr	r3, [pc, #776]	; (8005e74 <envelope_create_service+0x6e8>)
 8005b6c:	218b      	movs	r1, #139	; 0x8b
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	4bc1      	ldr	r3, [pc, #772]	; (8005e78 <envelope_create_service+0x6ec>)
 8005b72:	05c9      	lsls	r1, r1, #23
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	4648      	mov	r0, r9
 8005b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b7c:	4653      	mov	r3, sl
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b80:	f00a fc82 	bl	8010488 <__aeabi_fmul>
 8005b84:	2100      	movs	r1, #0
 8005b86:	4682      	mov	sl, r0
 8005b88:	4648      	mov	r0, r9
 8005b8a:	f00b f993 	bl	8010eb4 <__aeabi_fcmpge>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d100      	bne.n	8005b94 <envelope_create_service+0x408>
 8005b92:	e1ef      	b.n	8005f74 <envelope_create_service+0x7e8>
 8005b94:	21fc      	movs	r1, #252	; 0xfc
 8005b96:	0589      	lsls	r1, r1, #22
 8005b98:	4650      	mov	r0, sl
 8005b9a:	f00a f9c9 	bl	800ff30 <__aeabi_fadd>
 8005b9e:	f00b fb87 	bl	80112b0 <__aeabi_f2iz>
 8005ba2:	0023      	movs	r3, r4
 8005ba4:	33bf      	adds	r3, #191	; 0xbf
 8005ba6:	33ff      	adds	r3, #255	; 0xff
 8005ba8:	87d8      	strh	r0, [r3, #62]	; 0x3e
 8005baa:	4bb4      	ldr	r3, [pc, #720]	; (8005e7c <envelope_create_service+0x6f0>)
 8005bac:	4642      	mov	r2, r8
 8005bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	8892      	ldrh	r2, [r2, #4]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	18e3      	adds	r3, r4, r3
 8005bb8:	0092      	lsls	r2, r2, #2
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
 8005bbc:	4ab0      	ldr	r2, [pc, #704]	; (8005e80 <envelope_create_service+0x6f4>)
 8005bbe:	a80b      	add	r0, sp, #44	; 0x2c
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	4ab0      	ldr	r2, [pc, #704]	; (8005e84 <envelope_create_service+0x6f8>)
 8005bc4:	609a      	str	r2, [r3, #8]
 8005bc6:	4ab0      	ldr	r2, [pc, #704]	; (8005e88 <envelope_create_service+0x6fc>)
 8005bc8:	60da      	str	r2, [r3, #12]
 8005bca:	f7fa fffd 	bl	8000bc8 <configuration_is_valid>
 8005bce:	4681      	mov	r9, r0
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d002      	beq.n	8005bda <envelope_create_service+0x44e>
 8005bd4:	ab12      	add	r3, sp, #72	; 0x48
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	4699      	mov	r9, r3
 8005bda:	a80b      	add	r0, sp, #44	; 0x2c
 8005bdc:	f7fa fff4 	bl	8000bc8 <configuration_is_valid>
 8005be0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d100      	bne.n	8005be8 <envelope_create_service+0x45c>
 8005be6:	2700      	movs	r7, #0
 8005be8:	238f      	movs	r3, #143	; 0x8f
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4698      	mov	r8, r3
 8005bee:	44a0      	add	r8, r4
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	4ba6      	ldr	r3, [pc, #664]	; (8005e8c <envelope_create_service+0x700>)
 8005bf4:	6053      	str	r3, [r2, #4]
 8005bf6:	4ba6      	ldr	r3, [pc, #664]	; (8005e90 <envelope_create_service+0x704>)
 8005bf8:	6093      	str	r3, [r2, #8]
 8005bfa:	4ba6      	ldr	r3, [pc, #664]	; (8005e94 <envelope_create_service+0x708>)
 8005bfc:	60d3      	str	r3, [r2, #12]
 8005bfe:	464b      	mov	r3, r9
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d100      	bne.n	8005c06 <envelope_create_service+0x47a>
 8005c04:	e1b9      	b.n	8005f7a <envelope_create_service+0x7ee>
 8005c06:	49a4      	ldr	r1, [pc, #656]	; (8005e98 <envelope_create_service+0x70c>)
 8005c08:	1c38      	adds	r0, r7, #0
 8005c0a:	f00b f935 	bl	8010e78 <__aeabi_fcmplt>
 8005c0e:	4682      	mov	sl, r0
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d000      	beq.n	8005c16 <envelope_create_service+0x48a>
 8005c14:	e1b4      	b.n	8005f80 <envelope_create_service+0x7f4>
 8005c16:	49a1      	ldr	r1, [pc, #644]	; (8005e9c <envelope_create_service+0x710>)
 8005c18:	1c38      	adds	r0, r7, #0
 8005c1a:	f00b f941 	bl	8010ea0 <__aeabi_fcmpgt>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d000      	beq.n	8005c24 <envelope_create_service+0x498>
 8005c22:	e1af      	b.n	8005f84 <envelope_create_service+0x7f8>
 8005c24:	4643      	mov	r3, r8
 8005c26:	63df      	str	r7, [r3, #60]	; 0x3c
 8005c28:	464b      	mov	r3, r9
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d100      	bne.n	8005c30 <envelope_create_service+0x4a4>
 8005c2e:	e28b      	b.n	8006148 <envelope_create_service+0x9bc>
 8005c30:	4642      	mov	r2, r8
 8005c32:	4b9b      	ldr	r3, [pc, #620]	; (8005ea0 <envelope_create_service+0x714>)
 8005c34:	007f      	lsls	r7, r7, #1
 8005c36:	087f      	lsrs	r7, r7, #1
 8005c38:	6393      	str	r3, [r2, #56]	; 0x38
 8005c3a:	499a      	ldr	r1, [pc, #616]	; (8005ea4 <envelope_create_service+0x718>)
 8005c3c:	1c38      	adds	r0, r7, #0
 8005c3e:	f00b f92f 	bl	8010ea0 <__aeabi_fcmpgt>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d000      	beq.n	8005c48 <envelope_create_service+0x4bc>
 8005c46:	4f97      	ldr	r7, [pc, #604]	; (8005ea4 <envelope_create_service+0x718>)
 8005c48:	2191      	movs	r1, #145	; 0x91
 8005c4a:	1c38      	adds	r0, r7, #0
 8005c4c:	05c9      	lsls	r1, r1, #23
 8005c4e:	f00a fc1b 	bl	8010488 <__aeabi_fmul>
 8005c52:	f00d fecd 	bl	80139f0 <roundf>
 8005c56:	21da      	movs	r1, #218	; 0xda
 8005c58:	0589      	lsls	r1, r1, #22
 8005c5a:	f00a fc15 	bl	8010488 <__aeabi_fmul>
 8005c5e:	4992      	ldr	r1, [pc, #584]	; (8005ea8 <envelope_create_service+0x71c>)
 8005c60:	f00a fc12 	bl	8010488 <__aeabi_fmul>
 8005c64:	1c01      	adds	r1, r0, #0
 8005c66:	1c07      	adds	r7, r0, #0
 8005c68:	4890      	ldr	r0, [pc, #576]	; (8005eac <envelope_create_service+0x720>)
 8005c6a:	f00a fd3f 	bl	80106ec <__aeabi_fsub>
 8005c6e:	4990      	ldr	r1, [pc, #576]	; (8005eb0 <envelope_create_service+0x724>)
 8005c70:	f00a fd3c 	bl	80106ec <__aeabi_fsub>
 8005c74:	4680      	mov	r8, r0
 8005c76:	1c01      	adds	r1, r0, #0
 8005c78:	1c38      	adds	r0, r7, #0
 8005c7a:	f00b f8fd 	bl	8010e78 <__aeabi_fcmplt>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d100      	bne.n	8005c84 <envelope_create_service+0x4f8>
 8005c82:	e183      	b.n	8005f8c <envelope_create_service+0x800>
 8005c84:	2100      	movs	r1, #0
 8005c86:	1c38      	adds	r0, r7, #0
 8005c88:	f009 fd27 	bl	800f6da <quarter_pi_cos_sin_f32.lto_priv.569>
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	4681      	mov	r9, r0
 8005c90:	1c38      	adds	r0, r7, #0
 8005c92:	f009 fd22 	bl	800f6da <quarter_pi_cos_sin_f32.lto_priv.569>
 8005c96:	1c01      	adds	r1, r0, #0
 8005c98:	4648      	mov	r0, r9
 8005c9a:	f00a fae3 	bl	8010264 <__aeabi_fdiv>
 8005c9e:	4985      	ldr	r1, [pc, #532]	; (8005eb4 <envelope_create_service+0x728>)
 8005ca0:	f00a fbf2 	bl	8010488 <__aeabi_fmul>
 8005ca4:	4984      	ldr	r1, [pc, #528]	; (8005eb8 <envelope_create_service+0x72c>)
 8005ca6:	1c07      	adds	r7, r0, #0
 8005ca8:	f00a f942 	bl	800ff30 <__aeabi_fadd>
 8005cac:	1c39      	adds	r1, r7, #0
 8005cae:	f00a fbeb 	bl	8010488 <__aeabi_fmul>
 8005cb2:	4981      	ldr	r1, [pc, #516]	; (8005eb8 <envelope_create_service+0x72c>)
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	1c38      	adds	r0, r7, #0
 8005cb8:	f00a fbe6 	bl	8010488 <__aeabi_fmul>
 8005cbc:	21fe      	movs	r1, #254	; 0xfe
 8005cbe:	0589      	lsls	r1, r1, #22
 8005cc0:	f00a f936 	bl	800ff30 <__aeabi_fadd>
 8005cc4:	1c01      	adds	r1, r0, #0
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	f00a facc 	bl	8010264 <__aeabi_fdiv>
 8005ccc:	1c01      	adds	r1, r0, #0
 8005cce:	1c07      	adds	r7, r0, #0
 8005cd0:	f00a fbda 	bl	8010488 <__aeabi_fmul>
 8005cd4:	21fe      	movs	r1, #254	; 0xfe
 8005cd6:	0589      	lsls	r1, r1, #22
 8005cd8:	f00a f92a 	bl	800ff30 <__aeabi_fadd>
 8005cdc:	f00d fa72 	bl	80131c4 <__ieee754_sqrtf>
 8005ce0:	1c01      	adds	r1, r0, #0
 8005ce2:	20fe      	movs	r0, #254	; 0xfe
 8005ce4:	0580      	lsls	r0, r0, #22
 8005ce6:	f00a fabd 	bl	8010264 <__aeabi_fdiv>
 8005cea:	2181      	movs	r1, #129	; 0x81
 8005cec:	4680      	mov	r8, r0
 8005cee:	05c9      	lsls	r1, r1, #23
 8005cf0:	1c38      	adds	r0, r7, #0
 8005cf2:	f00b f8c1 	bl	8010e78 <__aeabi_fcmplt>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d100      	bne.n	8005cfc <envelope_create_service+0x570>
 8005cfa:	e15e      	b.n	8005fba <envelope_create_service+0x82e>
 8005cfc:	21fe      	movs	r1, #254	; 0xfe
 8005cfe:	1c38      	adds	r0, r7, #0
 8005d00:	0589      	lsls	r1, r1, #22
 8005d02:	f00b f8cd 	bl	8010ea0 <__aeabi_fcmpgt>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d100      	bne.n	8005d0c <envelope_create_service+0x580>
 8005d0a:	e149      	b.n	8005fa0 <envelope_create_service+0x814>
 8005d0c:	218a      	movs	r1, #138	; 0x8a
 8005d0e:	4640      	mov	r0, r8
 8005d10:	05c9      	lsls	r1, r1, #23
 8005d12:	f00a fbb9 	bl	8010488 <__aeabi_fmul>
 8005d16:	21fc      	movs	r1, #252	; 0xfc
 8005d18:	0589      	lsls	r1, r1, #22
 8005d1a:	f00a f909 	bl	800ff30 <__aeabi_fadd>
 8005d1e:	f00b fac7 	bl	80112b0 <__aeabi_f2iz>
 8005d22:	0043      	lsls	r3, r0, #1
 8005d24:	4698      	mov	r8, r3
 8005d26:	4643      	mov	r3, r8
 8005d28:	4642      	mov	r2, r8
 8005d2a:	2080      	movs	r0, #128	; 0x80
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4353      	muls	r3, r2
 8005d30:	04c0      	lsls	r0, r0, #19
 8005d32:	1ac0      	subs	r0, r0, r3
 8005d34:	f00b fb26 	bl	8011384 <__aeabi_ui2f>
 8005d38:	f00d fa44 	bl	80131c4 <__ieee754_sqrtf>
 8005d3c:	21fc      	movs	r1, #252	; 0xfc
 8005d3e:	0589      	lsls	r1, r1, #22
 8005d40:	f00a f8f6 	bl	800ff30 <__aeabi_fadd>
 8005d44:	f00b fab4 	bl	80112b0 <__aeabi_f2iz>
 8005d48:	0007      	movs	r7, r0
 8005d4a:	239f      	movs	r3, #159	; 0x9f
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4699      	mov	r9, r3
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	015b      	lsls	r3, r3, #5
 8005d54:	469a      	mov	sl, r3
 8005d56:	4643      	mov	r3, r8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d000      	beq.n	8005d5e <envelope_create_service+0x5d2>
 8005d5c:	e151      	b.n	8006002 <envelope_create_service+0x876>
 8005d5e:	229e      	movs	r2, #158	; 0x9e
 8005d60:	21fc      	movs	r1, #252	; 0xfc
 8005d62:	0092      	lsls	r2, r2, #2
 8005d64:	0589      	lsls	r1, r1, #22
 8005d66:	50a1      	str	r1, [r4, r2]
 8005d68:	4653      	mov	r3, sl
 8005d6a:	464a      	mov	r2, r9
 8005d6c:	50a3      	str	r3, [r4, r2]
 8005d6e:	23a0      	movs	r3, #160	; 0xa0
 8005d70:	4642      	mov	r2, r8
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	50e2      	str	r2, [r4, r3]
 8005d76:	3304      	adds	r3, #4
 8005d78:	52e2      	strh	r2, [r4, r3]
 8005d7a:	465b      	mov	r3, fp
 8005d7c:	4a4f      	ldr	r2, [pc, #316]	; (8005ebc <envelope_create_service+0x730>)
 8005d7e:	4950      	ldr	r1, [pc, #320]	; (8005ec0 <envelope_create_service+0x734>)
 8005d80:	2000      	movs	r0, #0
 8005d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d84:	4798      	blx	r3
 8005d86:	a80b      	add	r0, sp, #44	; 0x2c
 8005d88:	f7fa ff1e 	bl	8000bc8 <configuration_is_valid>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d010      	beq.n	8005db2 <envelope_create_service+0x626>
 8005d90:	ab11      	add	r3, sp, #68	; 0x44
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00c      	beq.n	8005db2 <envelope_create_service+0x626>
 8005d98:	23a4      	movs	r3, #164	; 0xa4
 8005d9a:	494a      	ldr	r1, [pc, #296]	; (8005ec4 <envelope_create_service+0x738>)
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	18e3      	adds	r3, r4, r3
 8005da0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005da2:	6059      	str	r1, [r3, #4]
 8005da4:	4948      	ldr	r1, [pc, #288]	; (8005ec8 <envelope_create_service+0x73c>)
 8005da6:	63da      	str	r2, [r3, #60]	; 0x3c
 8005da8:	6099      	str	r1, [r3, #8]
 8005daa:	4a48      	ldr	r2, [pc, #288]	; (8005ecc <envelope_create_service+0x740>)
 8005dac:	4948      	ldr	r1, [pc, #288]	; (8005ed0 <envelope_create_service+0x744>)
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
 8005db0:	60d9      	str	r1, [r3, #12]
 8005db2:	23b4      	movs	r3, #180	; 0xb4
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4699      	mov	r9, r3
 8005db8:	44a1      	add	r9, r4
 8005dba:	464a      	mov	r2, r9
 8005dbc:	4b45      	ldr	r3, [pc, #276]	; (8005ed4 <envelope_create_service+0x748>)
 8005dbe:	a80b      	add	r0, sp, #44	; 0x2c
 8005dc0:	6053      	str	r3, [r2, #4]
 8005dc2:	4b45      	ldr	r3, [pc, #276]	; (8005ed8 <envelope_create_service+0x74c>)
 8005dc4:	6093      	str	r3, [r2, #8]
 8005dc6:	4b45      	ldr	r3, [pc, #276]	; (8005edc <envelope_create_service+0x750>)
 8005dc8:	60d3      	str	r3, [r2, #12]
 8005dca:	4b45      	ldr	r3, [pc, #276]	; (8005ee0 <envelope_create_service+0x754>)
 8005dcc:	6393      	str	r3, [r2, #56]	; 0x38
 8005dce:	23c3      	movs	r3, #195	; 0xc3
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4698      	mov	r8, r3
 8005dd4:	44a0      	add	r8, r4
 8005dd6:	4642      	mov	r2, r8
 8005dd8:	4b42      	ldr	r3, [pc, #264]	; (8005ee4 <envelope_create_service+0x758>)
 8005dda:	6393      	str	r3, [r2, #56]	; 0x38
 8005ddc:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <envelope_create_service+0x6c8>)
 8005dde:	6053      	str	r3, [r2, #4]
 8005de0:	4b1e      	ldr	r3, [pc, #120]	; (8005e5c <envelope_create_service+0x6d0>)
 8005de2:	6093      	str	r3, [r2, #8]
 8005de4:	4b1e      	ldr	r3, [pc, #120]	; (8005e60 <envelope_create_service+0x6d4>)
 8005de6:	60d3      	str	r3, [r2, #12]
 8005de8:	23d2      	movs	r3, #210	; 0xd2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	18e7      	adds	r7, r4, r3
 8005dee:	4b3e      	ldr	r3, [pc, #248]	; (8005ee8 <envelope_create_service+0x75c>)
 8005df0:	643b      	str	r3, [r7, #64]	; 0x40
 8005df2:	4b3e      	ldr	r3, [pc, #248]	; (8005eec <envelope_create_service+0x760>)
 8005df4:	607b      	str	r3, [r7, #4]
 8005df6:	4b3e      	ldr	r3, [pc, #248]	; (8005ef0 <envelope_create_service+0x764>)
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	4b3e      	ldr	r3, [pc, #248]	; (8005ef4 <envelope_create_service+0x768>)
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	0023      	movs	r3, r4
 8005e00:	3378      	adds	r3, #120	; 0x78
 8005e02:	63a3      	str	r3, [r4, #56]	; 0x38
 8005e04:	3340      	adds	r3, #64	; 0x40
 8005e06:	67a3      	str	r3, [r4, #120]	; 0x78
 8005e08:	f7fa ff01 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 8005e0c:	0023      	movs	r3, r4
 8005e0e:	3339      	adds	r3, #57	; 0x39
 8005e10:	33ff      	adds	r3, #255	; 0xff
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d000      	beq.n	8005e18 <envelope_create_service+0x68c>
 8005e16:	e19b      	b.n	8006150 <envelope_create_service+0x9c4>
 8005e18:	e06e      	b.n	8005ef8 <envelope_create_service+0x76c>
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	200004a8 	.word	0x200004a8
 8005e20:	080021a1 	.word	0x080021a1
 8005e24:	0800032d 	.word	0x0800032d
 8005e28:	080002d7 	.word	0x080002d7
 8005e2c:	080008f7 	.word	0x080008f7
 8005e30:	08000881 	.word	0x08000881
 8005e34:	0800082b 	.word	0x0800082b
 8005e38:	0800092f 	.word	0x0800092f
 8005e3c:	0800237d 	.word	0x0800237d
 8005e40:	08000493 	.word	0x08000493
 8005e44:	08000479 	.word	0x08000479
 8005e48:	08000425 	.word	0x08000425
 8005e4c:	08000907 	.word	0x08000907
 8005e50:	080006fd 	.word	0x080006fd
 8005e54:	08000951 	.word	0x08000951
 8005e58:	080005b5 	.word	0x080005b5
 8005e5c:	080006a9 	.word	0x080006a9
 8005e60:	08000927 	.word	0x08000927
 8005e64:	080004fd 	.word	0x080004fd
 8005e68:	0800090f 	.word	0x0800090f
 8005e6c:	080021dd 	.word	0x080021dd
 8005e70:	08000415 	.word	0x08000415
 8005e74:	080003a5 	.word	0x080003a5
 8005e78:	080008ff 	.word	0x080008ff
 8005e7c:	0800533d 	.word	0x0800533d
 8005e80:	08000699 	.word	0x08000699
 8005e84:	08000645 	.word	0x08000645
 8005e88:	0800091f 	.word	0x0800091f
 8005e8c:	08000635 	.word	0x08000635
 8005e90:	080005c5 	.word	0x080005c5
 8005e94:	08000917 	.word	0x08000917
 8005e98:	3b843809 	.word	0x3b843809
 8005e9c:	3efdca08 	.word	0x3efdca08
 8005ea0:	0800232b 	.word	0x0800232b
 8005ea4:	3effffde 	.word	0x3effffde
 8005ea8:	40490fdb 	.word	0x40490fdb
 8005eac:	3fc90fdb 	.word	0x3fc90fdb
 8005eb0:	333bbd2e 	.word	0x333bbd2e
 8005eb4:	3f9f8d77 	.word	0x3f9f8d77
 8005eb8:	3fb504f3 	.word	0x3fb504f3
 8005ebc:	0801ce04 	.word	0x0801ce04
 8005ec0:	0801c419 	.word	0x0801c419
 8005ec4:	08001ed1 	.word	0x08001ed1
 8005ec8:	080001db 	.word	0x080001db
 8005ecc:	08000251 	.word	0x08000251
 8005ed0:	08000241 	.word	0x08000241
 8005ed4:	08000937 	.word	0x08000937
 8005ed8:	08000899 	.word	0x08000899
 8005edc:	080008ed 	.word	0x080008ed
 8005ee0:	080021a9 	.word	0x080021a9
 8005ee4:	0800080f 	.word	0x0800080f
 8005ee8:	08001f65 	.word	0x08001f65
 8005eec:	080001c5 	.word	0x080001c5
 8005ef0:	08000157 	.word	0x08000157
 8005ef4:	080001c3 	.word	0x080001c3
 8005ef8:	6033      	str	r3, [r6, #0]
 8005efa:	0023      	movs	r3, r4
 8005efc:	229c      	movs	r2, #156	; 0x9c
 8005efe:	3375      	adds	r3, #117	; 0x75
 8005f00:	0052      	lsls	r2, r2, #1
 8005f02:	33ff      	adds	r3, #255	; 0xff
 8005f04:	50a3      	str	r3, [r4, r2]
 8005f06:	323c      	adds	r2, #60	; 0x3c
 8005f08:	3344      	adds	r3, #68	; 0x44
 8005f0a:	50a3      	str	r3, [r4, r2]
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	3244      	adds	r2, #68	; 0x44
 8005f12:	18e3      	adds	r3, r4, r3
 8005f14:	50a3      	str	r3, [r4, r2]
 8005f16:	238f      	movs	r3, #143	; 0x8f
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	18e3      	adds	r3, r4, r3
 8005f1c:	3248      	adds	r2, #72	; 0x48
 8005f1e:	50a3      	str	r3, [r4, r2]
 8005f20:	a80b      	add	r0, sp, #44	; 0x2c
 8005f22:	f7fa fe51 	bl	8000bc8 <configuration_is_valid>
 8005f26:	464b      	mov	r3, r9
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d007      	beq.n	8005f3c <envelope_create_service+0x7b0>
 8005f2c:	aa11      	add	r2, sp, #68	; 0x44
 8005f2e:	7812      	ldrb	r2, [r2, #0]
 8005f30:	2a00      	cmp	r2, #0
 8005f32:	d003      	beq.n	8005f3c <envelope_create_service+0x7b0>
 8005f34:	22a4      	movs	r2, #164	; 0xa4
 8005f36:	0092      	lsls	r2, r2, #2
 8005f38:	50a3      	str	r3, [r4, r2]
 8005f3a:	18a3      	adds	r3, r4, r2
 8005f3c:	228f      	movs	r2, #143	; 0x8f
 8005f3e:	0092      	lsls	r2, r2, #2
 8005f40:	50a3      	str	r3, [r4, r2]
 8005f42:	23b4      	movs	r3, #180	; 0xb4
 8005f44:	4642      	mov	r2, r8
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	50e2      	str	r2, [r4, r3]
 8005f4a:	333c      	adds	r3, #60	; 0x3c
 8005f4c:	50e7      	str	r7, [r4, r3]
 8005f4e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005f50:	6883      	ldr	r3, [r0, #8]
 8005f52:	4798      	blx	r3
 8005f54:	1e06      	subs	r6, r0, #0
 8005f56:	d000      	beq.n	8005f5a <envelope_create_service+0x7ce>
 8005f58:	e0ff      	b.n	800615a <envelope_create_service+0x9ce>
 8005f5a:	465b      	mov	r3, fp
 8005f5c:	4a86      	ldr	r2, [pc, #536]	; (8006178 <envelope_create_service+0x9ec>)
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f60:	4986      	ldr	r1, [pc, #536]	; (800617c <envelope_create_service+0x9f0>)
 8005f62:	4798      	blx	r3
 8005f64:	e4c1      	b.n	80058ea <envelope_create_service+0x15e>
 8005f66:	a80b      	add	r0, sp, #44	; 0x2c
 8005f68:	f7fa fff2 	bl	8000f50 <acc_base_configuration_print.part.5>
 8005f6c:	e58a      	b.n	8005a84 <envelope_create_service+0x2f8>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	4699      	mov	r9, r3
 8005f72:	e5f5      	b.n	8005b60 <envelope_create_service+0x3d4>
 8005f74:	21bf      	movs	r1, #191	; 0xbf
 8005f76:	0609      	lsls	r1, r1, #24
 8005f78:	e60e      	b.n	8005b98 <envelope_create_service+0x40c>
 8005f7a:	27fc      	movs	r7, #252	; 0xfc
 8005f7c:	05bf      	lsls	r7, r7, #22
 8005f7e:	e651      	b.n	8005c24 <envelope_create_service+0x498>
 8005f80:	4f7f      	ldr	r7, [pc, #508]	; (8006180 <envelope_create_service+0x9f4>)
 8005f82:	e64f      	b.n	8005c24 <envelope_create_service+0x498>
 8005f84:	27fc      	movs	r7, #252	; 0xfc
 8005f86:	46d1      	mov	r9, sl
 8005f88:	05bf      	lsls	r7, r7, #22
 8005f8a:	e64b      	b.n	8005c24 <envelope_create_service+0x498>
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	4640      	mov	r0, r8
 8005f90:	f009 fba3 	bl	800f6da <quarter_pi_cos_sin_f32.lto_priv.569>
 8005f94:	2100      	movs	r1, #0
 8005f96:	4681      	mov	r9, r0
 8005f98:	4640      	mov	r0, r8
 8005f9a:	f009 fb9e 	bl	800f6da <quarter_pi_cos_sin_f32.lto_priv.569>
 8005f9e:	e67a      	b.n	8005c96 <envelope_create_service+0x50a>
 8005fa0:	218b      	movs	r1, #139	; 0x8b
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	05c9      	lsls	r1, r1, #23
 8005fa6:	f00a fa6f 	bl	8010488 <__aeabi_fmul>
 8005faa:	21fc      	movs	r1, #252	; 0xfc
 8005fac:	0589      	lsls	r1, r1, #22
 8005fae:	f009 ffbf 	bl	800ff30 <__aeabi_fadd>
 8005fb2:	f00b f97d 	bl	80112b0 <__aeabi_f2iz>
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	e6b5      	b.n	8005d26 <envelope_create_service+0x59a>
 8005fba:	218c      	movs	r1, #140	; 0x8c
 8005fbc:	1c38      	adds	r0, r7, #0
 8005fbe:	05c9      	lsls	r1, r1, #23
 8005fc0:	f00a fa62 	bl	8010488 <__aeabi_fmul>
 8005fc4:	4641      	mov	r1, r8
 8005fc6:	f00a fa5f 	bl	8010488 <__aeabi_fmul>
 8005fca:	21fc      	movs	r1, #252	; 0xfc
 8005fcc:	0589      	lsls	r1, r1, #22
 8005fce:	f009 ffaf 	bl	800ff30 <__aeabi_fadd>
 8005fd2:	f00b f96d 	bl	80112b0 <__aeabi_f2iz>
 8005fd6:	0003      	movs	r3, r0
 8005fd8:	0007      	movs	r7, r0
 8005fda:	4343      	muls	r3, r0
 8005fdc:	2080      	movs	r0, #128	; 0x80
 8005fde:	04c0      	lsls	r0, r0, #19
 8005fe0:	1ac0      	subs	r0, r0, r3
 8005fe2:	f00b f9cf 	bl	8011384 <__aeabi_ui2f>
 8005fe6:	f00d f8ed 	bl	80131c4 <__ieee754_sqrtf>
 8005fea:	21fc      	movs	r1, #252	; 0xfc
 8005fec:	0589      	lsls	r1, r1, #22
 8005fee:	f00a fa4b 	bl	8010488 <__aeabi_fmul>
 8005ff2:	21fc      	movs	r1, #252	; 0xfc
 8005ff4:	0589      	lsls	r1, r1, #22
 8005ff6:	f009 ff9b 	bl	800ff30 <__aeabi_fadd>
 8005ffa:	f00b f959 	bl	80112b0 <__aeabi_f2iz>
 8005ffe:	4680      	mov	r8, r0
 8006000:	e6a3      	b.n	8005d4a <envelope_create_service+0x5be>
 8006002:	4642      	mov	r2, r8
 8006004:	4653      	mov	r3, sl
 8006006:	b292      	uxth	r2, r2
 8006008:	1a99      	subs	r1, r3, r2
 800600a:	464b      	mov	r3, r9
 800600c:	b289      	uxth	r1, r1
 800600e:	b208      	sxth	r0, r1
 8006010:	52e0      	strh	r0, [r4, r3]
 8006012:	004b      	lsls	r3, r1, #1
 8006014:	4699      	mov	r9, r3
 8006016:	239f      	movs	r3, #159	; 0x9f
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	18e1      	adds	r1, r4, r3
 800601c:	464b      	mov	r3, r9
 800601e:	8088      	strh	r0, [r1, #4]
 8006020:	0052      	lsls	r2, r2, #1
 8006022:	b2b8      	uxth	r0, r7
 8006024:	1a82      	subs	r2, r0, r2
 8006026:	80ca      	strh	r2, [r1, #6]
 8006028:	22c0      	movs	r2, #192	; 0xc0
 800602a:	804b      	strh	r3, [r1, #2]
 800602c:	4643      	mov	r3, r8
 800602e:	0152      	lsls	r2, r2, #5
 8006030:	1ad2      	subs	r2, r2, r3
 8006032:	0052      	lsls	r2, r2, #1
 8006034:	1a10      	subs	r0, r2, r0
 8006036:	8108      	strh	r0, [r1, #8]
 8006038:	2f00      	cmp	r7, #0
 800603a:	d104      	bne.n	8006046 <envelope_create_service+0x8ba>
 800603c:	239e      	movs	r3, #158	; 0x9e
 800603e:	9a02      	ldr	r2, [sp, #8]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	50e2      	str	r2, [r4, r3]
 8006044:	e699      	b.n	8005d7a <envelope_create_service+0x5ee>
 8006046:	4652      	mov	r2, sl
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	4642      	mov	r2, r8
 800604c:	0090      	lsls	r0, r2, #2
 800604e:	4350      	muls	r0, r2
 8006050:	003a      	movs	r2, r7
 8006052:	437a      	muls	r2, r7
 8006054:	1880      	adds	r0, r0, r2
 8006056:	22fc      	movs	r2, #252	; 0xfc
 8006058:	0612      	lsls	r2, r2, #24
 800605a:	4694      	mov	ip, r2
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	1bdb      	subs	r3, r3, r7
 8006060:	435b      	muls	r3, r3
 8006062:	4460      	add	r0, ip
 8006064:	0042      	lsls	r2, r0, #1
 8006066:	1a98      	subs	r0, r3, r2
 8006068:	4690      	mov	r8, r2
 800606a:	f00b f941 	bl	80112f0 <__aeabi_i2f>
 800606e:	4682      	mov	sl, r0
 8006070:	4640      	mov	r0, r8
 8006072:	f00b f93d 	bl	80112f0 <__aeabi_i2f>
 8006076:	4651      	mov	r1, sl
 8006078:	f00a f8f4 	bl	8010264 <__aeabi_fdiv>
 800607c:	4941      	ldr	r1, [pc, #260]	; (8006184 <envelope_create_service+0x9f8>)
 800607e:	4680      	mov	r8, r0
 8006080:	f009 ff56 	bl	800ff30 <__aeabi_fadd>
 8006084:	4681      	mov	r9, r0
 8006086:	4650      	mov	r0, sl
 8006088:	f00d f89c 	bl	80131c4 <__ieee754_sqrtf>
 800608c:	4682      	mov	sl, r0
 800608e:	2080      	movs	r0, #128	; 0x80
 8006090:	0180      	lsls	r0, r0, #6
 8006092:	1bc0      	subs	r0, r0, r7
 8006094:	0040      	lsls	r0, r0, #1
 8006096:	f00b f92b 	bl	80112f0 <__aeabi_i2f>
 800609a:	1c01      	adds	r1, r0, #0
 800609c:	4650      	mov	r0, sl
 800609e:	f00a f8e1 	bl	8010264 <__aeabi_fdiv>
 80060a2:	4939      	ldr	r1, [pc, #228]	; (8006188 <envelope_create_service+0x9fc>)
 80060a4:	1c07      	adds	r7, r0, #0
 80060a6:	4648      	mov	r0, r9
 80060a8:	f00a f9ee 	bl	8010488 <__aeabi_fmul>
 80060ac:	4649      	mov	r1, r9
 80060ae:	f00a f9eb 	bl	8010488 <__aeabi_fmul>
 80060b2:	4936      	ldr	r1, [pc, #216]	; (800618c <envelope_create_service+0xa00>)
 80060b4:	f009 ff3c 	bl	800ff30 <__aeabi_fadd>
 80060b8:	f00d f884 	bl	80131c4 <__ieee754_sqrtf>
 80060bc:	4641      	mov	r1, r8
 80060be:	f00a fb15 	bl	80106ec <__aeabi_fsub>
 80060c2:	f00d f87f 	bl	80131c4 <__ieee754_sqrtf>
 80060c6:	1c01      	adds	r1, r0, #0
 80060c8:	1c38      	adds	r0, r7, #0
 80060ca:	f00a f9dd 	bl	8010488 <__aeabi_fmul>
 80060ce:	4930      	ldr	r1, [pc, #192]	; (8006190 <envelope_create_service+0xa04>)
 80060d0:	1c07      	adds	r7, r0, #0
 80060d2:	f00a fed1 	bl	8010e78 <__aeabi_fcmplt>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d134      	bne.n	8006144 <envelope_create_service+0x9b8>
 80060da:	21fe      	movs	r1, #254	; 0xfe
 80060dc:	1c38      	adds	r0, r7, #0
 80060de:	0589      	lsls	r1, r1, #22
 80060e0:	f00a fede 	bl	8010ea0 <__aeabi_fcmpgt>
 80060e4:	4b2b      	ldr	r3, [pc, #172]	; (8006194 <envelope_create_service+0xa08>)
 80060e6:	4698      	mov	r8, r3
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d021      	beq.n	8006130 <envelope_create_service+0x9a4>
 80060ec:	20fe      	movs	r0, #254	; 0xfe
 80060ee:	1c39      	adds	r1, r7, #0
 80060f0:	0580      	lsls	r0, r0, #22
 80060f2:	f00a f8b7 	bl	8010264 <__aeabi_fdiv>
 80060f6:	2109      	movs	r1, #9
 80060f8:	1c02      	adds	r2, r0, #0
 80060fa:	1c07      	adds	r7, r0, #0
 80060fc:	4640      	mov	r0, r8
 80060fe:	f009 fad3 	bl	800f6a8 <eval_even_poly_f32.lto_priv.570>
 8006102:	1c01      	adds	r1, r0, #0
 8006104:	1c38      	adds	r0, r7, #0
 8006106:	f00a f9bf 	bl	8010488 <__aeabi_fmul>
 800610a:	1c01      	adds	r1, r0, #0
 800610c:	4822      	ldr	r0, [pc, #136]	; (8006198 <envelope_create_service+0xa0c>)
 800610e:	f00a faed 	bl	80106ec <__aeabi_fsub>
 8006112:	4922      	ldr	r1, [pc, #136]	; (800619c <envelope_create_service+0xa10>)
 8006114:	f00a faea 	bl	80106ec <__aeabi_fsub>
 8006118:	4921      	ldr	r1, [pc, #132]	; (80061a0 <envelope_create_service+0xa14>)
 800611a:	f00a f8a3 	bl	8010264 <__aeabi_fdiv>
 800611e:	239e      	movs	r3, #158	; 0x9e
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	50e0      	str	r0, [r4, r3]
 8006124:	238f      	movs	r3, #143	; 0x8f
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	18e3      	adds	r3, r4, r3
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	6363      	str	r3, [r4, #52]	; 0x34
 800612e:	e62a      	b.n	8005d86 <envelope_create_service+0x5fa>
 8006130:	1c3a      	adds	r2, r7, #0
 8006132:	2109      	movs	r1, #9
 8006134:	0018      	movs	r0, r3
 8006136:	f009 fab7 	bl	800f6a8 <eval_even_poly_f32.lto_priv.570>
 800613a:	1c01      	adds	r1, r0, #0
 800613c:	1c38      	adds	r0, r7, #0
 800613e:	f00a f9a3 	bl	8010488 <__aeabi_fmul>
 8006142:	e7e9      	b.n	8006118 <envelope_create_service+0x98c>
 8006144:	4817      	ldr	r0, [pc, #92]	; (80061a4 <envelope_create_service+0xa18>)
 8006146:	e7e7      	b.n	8006118 <envelope_create_service+0x98c>
 8006148:	4642      	mov	r2, r8
 800614a:	4b17      	ldr	r3, [pc, #92]	; (80061a8 <envelope_create_service+0xa1c>)
 800614c:	6393      	str	r3, [r2, #56]	; 0x38
 800614e:	e7e9      	b.n	8006124 <envelope_create_service+0x998>
 8006150:	0022      	movs	r2, r4
 8006152:	32f8      	adds	r2, #248	; 0xf8
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	0013      	movs	r3, r2
 8006158:	e6ce      	b.n	8005ef8 <envelope_create_service+0x76c>
 800615a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800615c:	68c3      	ldr	r3, [r0, #12]
 800615e:	4798      	blx	r3
 8006160:	23e1      	movs	r3, #225	; 0xe1
 8006162:	9a01      	ldr	r2, [sp, #4]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	50e2      	str	r2, [r4, r3]
 8006168:	4b10      	ldr	r3, [pc, #64]	; (80061ac <envelope_create_service+0xa20>)
 800616a:	606b      	str	r3, [r5, #4]
 800616c:	4b10      	ldr	r3, [pc, #64]	; (80061b0 <envelope_create_service+0xa24>)
 800616e:	60ab      	str	r3, [r5, #8]
 8006170:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <envelope_create_service+0xa28>)
 8006172:	60eb      	str	r3, [r5, #12]
 8006174:	f7ff fb99 	bl	80058aa <envelope_create_service+0x11e>
 8006178:	0801cd09 	.word	0x0801cd09
 800617c:	0801ce2d 	.word	0x0801ce2d
 8006180:	3b843809 	.word	0x3b843809
 8006184:	3f15f61a 	.word	0x3f15f61a
 8006188:	3fb504f3 	.word	0x3fb504f3
 800618c:	3f95f61a 	.word	0x3f95f61a
 8006190:	bf800000 	.word	0xbf800000
 8006194:	08015fa8 	.word	0x08015fa8
 8006198:	3fc90fdb 	.word	0x3fc90fdb
 800619c:	333bbd2e 	.word	0x333bbd2e
 80061a0:	40490fdb 	.word	0x40490fdb
 80061a4:	7fc00000 	.word	0x7fc00000
 80061a8:	080001c1 	.word	0x080001c1
 80061ac:	08005129 	.word	0x08005129
 80061b0:	08001ebd 	.word	0x08001ebd
 80061b4:	08000a0d 	.word	0x08000a0d

080061b8 <acc_rss_activate>:
 80061b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ba:	4d50      	ldr	r5, [pc, #320]	; (80062fc <acc_rss_activate+0x144>)
 80061bc:	46d6      	mov	lr, sl
 80061be:	002b      	movs	r3, r5
 80061c0:	464f      	mov	r7, r9
 80061c2:	4646      	mov	r6, r8
 80061c4:	3370      	adds	r3, #112	; 0x70
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	b5c0      	push	{r6, r7, lr}
 80061ca:	0001      	movs	r1, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d000      	beq.n	80061d2 <acc_rss_activate+0x1a>
 80061d0:	e088      	b.n	80062e4 <acc_rss_activate+0x12c>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d06a      	beq.n	80062ac <acc_rss_activate+0xf4>
 80061d6:	6942      	ldr	r2, [r0, #20]
 80061d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80061da:	2a00      	cmp	r2, #0
 80061dc:	d060      	beq.n	80062a0 <acc_rss_activate+0xe8>
 80061de:	6982      	ldr	r2, [r0, #24]
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d05d      	beq.n	80062a0 <acc_rss_activate+0xe8>
 80061e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	d05a      	beq.n	80062a0 <acc_rss_activate+0xe8>
 80061ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80061ec:	2a00      	cmp	r2, #0
 80061ee:	d057      	beq.n	80062a0 <acc_rss_activate+0xe8>
 80061f0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	d054      	beq.n	80062a0 <acc_rss_activate+0xe8>
 80061f6:	6882      	ldr	r2, [r0, #8]
 80061f8:	2a00      	cmp	r2, #0
 80061fa:	d051      	beq.n	80062a0 <acc_rss_activate+0xe8>
 80061fc:	68c2      	ldr	r2, [r0, #12]
 80061fe:	2a00      	cmp	r2, #0
 8006200:	d04e      	beq.n	80062a0 <acc_rss_activate+0xe8>
 8006202:	6902      	ldr	r2, [r0, #16]
 8006204:	2a00      	cmp	r2, #0
 8006206:	d04b      	beq.n	80062a0 <acc_rss_activate+0xe8>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d04f      	beq.n	80062ac <acc_rss_activate+0xf4>
 800620c:	6802      	ldr	r2, [r0, #0]
 800620e:	2a2a      	cmp	r2, #42	; 0x2a
 8006210:	d848      	bhi.n	80062a4 <acc_rss_activate+0xec>
 8006212:	6842      	ldr	r2, [r0, #4]
 8006214:	2a0f      	cmp	r2, #15
 8006216:	d945      	bls.n	80062a4 <acc_rss_activate+0xec>
 8006218:	69c2      	ldr	r2, [r0, #28]
 800621a:	2a00      	cmp	r2, #0
 800621c:	d002      	beq.n	8006224 <acc_rss_activate+0x6c>
 800621e:	6a02      	ldr	r2, [r0, #32]
 8006220:	2a00      	cmp	r2, #0
 8006222:	d03f      	beq.n	80062a4 <acc_rss_activate+0xec>
 8006224:	4f36      	ldr	r7, [pc, #216]	; (8006300 <acc_rss_activate+0x148>)
 8006226:	2238      	movs	r2, #56	; 0x38
 8006228:	0038      	movs	r0, r7
 800622a:	f00f fe13 	bl	8015e54 <memcpy>
 800622e:	4c35      	ldr	r4, [pc, #212]	; (8006304 <acc_rss_activate+0x14c>)
 8006230:	7923      	ldrb	r3, [r4, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <acc_rss_activate+0x88>
 8006236:	002a      	movs	r2, r5
 8006238:	2301      	movs	r3, #1
 800623a:	3271      	adds	r2, #113	; 0x71
 800623c:	7123      	strb	r3, [r4, #4]
 800623e:	7013      	strb	r3, [r2, #0]
 8006240:	7923      	ldrb	r3, [r4, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d048      	beq.n	80062d8 <acc_rss_activate+0x120>
 8006246:	002b      	movs	r3, r5
 8006248:	3372      	adds	r3, #114	; 0x72
 800624a:	781e      	ldrb	r6, [r3, #0]
 800624c:	2e00      	cmp	r6, #0
 800624e:	d118      	bne.n	8006282 <acc_rss_activate+0xca>
 8006250:	2048      	movs	r0, #72	; 0x48
 8006252:	2254      	movs	r2, #84	; 0x54
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	32ff      	adds	r2, #255	; 0xff
 8006258:	4358      	muls	r0, r3
 800625a:	492b      	ldr	r1, [pc, #172]	; (8006308 <acc_rss_activate+0x150>)
 800625c:	f7ff f952 	bl	8005504 <acc_rss_integration_mem_alloc_debug>
 8006260:	6020      	str	r0, [r4, #0]
 8006262:	2800      	cmp	r0, #0
 8006264:	d038      	beq.n	80062d8 <acc_rss_activate+0x120>
 8006266:	2344      	movs	r3, #68	; 0x44
 8006268:	4699      	mov	r9, r3
 800626a:	4b28      	ldr	r3, [pc, #160]	; (800630c <acc_rss_activate+0x154>)
 800626c:	3040      	adds	r0, #64	; 0x40
 800626e:	0004      	movs	r4, r0
 8006270:	46b0      	mov	r8, r6
 8006272:	469a      	mov	sl, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	429e      	cmp	r6, r3
 8006278:	d31f      	bcc.n	80062ba <acc_rss_activate+0x102>
 800627a:	002b      	movs	r3, r5
 800627c:	2201      	movs	r2, #1
 800627e:	3372      	adds	r3, #114	; 0x72
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	002b      	movs	r3, r5
 8006284:	2201      	movs	r2, #1
 8006286:	3370      	adds	r3, #112	; 0x70
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	003b      	movs	r3, r7
 800628c:	3330      	adds	r3, #48	; 0x30
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	4293      	cmp	r3, r2
 8006292:	d90b      	bls.n	80062ac <acc_rss_activate+0xf4>
 8006294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006296:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <acc_rss_activate+0x158>)
 8006298:	491e      	ldr	r1, [pc, #120]	; (8006314 <acc_rss_activate+0x15c>)
 800629a:	2002      	movs	r0, #2
 800629c:	4798      	blx	r3
 800629e:	e005      	b.n	80062ac <acc_rss_activate+0xf4>
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <acc_rss_activate+0xf4>
 80062a4:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <acc_rss_activate+0x160>)
 80062a6:	491d      	ldr	r1, [pc, #116]	; (800631c <acc_rss_activate+0x164>)
 80062a8:	2000      	movs	r0, #0
 80062aa:	4798      	blx	r3
 80062ac:	3570      	adds	r5, #112	; 0x70
 80062ae:	7828      	ldrb	r0, [r5, #0]
 80062b0:	bc1c      	pop	{r2, r3, r4}
 80062b2:	4690      	mov	r8, r2
 80062b4:	4699      	mov	r9, r3
 80062b6:	46a2      	mov	sl, r4
 80062b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ba:	0020      	movs	r0, r4
 80062bc:	464a      	mov	r2, r9
 80062be:	3840      	subs	r0, #64	; 0x40
 80062c0:	2100      	movs	r1, #0
 80062c2:	f00d f9a3 	bl	801360c <memset>
 80062c6:	4643      	mov	r3, r8
 80062c8:	7063      	strb	r3, [r4, #1]
 80062ca:	7023      	strb	r3, [r4, #0]
 80062cc:	70a3      	strb	r3, [r4, #2]
 80062ce:	4653      	mov	r3, sl
 80062d0:	3601      	adds	r6, #1
 80062d2:	6063      	str	r3, [r4, #4]
 80062d4:	3448      	adds	r4, #72	; 0x48
 80062d6:	e7cd      	b.n	8006274 <acc_rss_activate+0xbc>
 80062d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062da:	4a11      	ldr	r2, [pc, #68]	; (8006320 <acc_rss_activate+0x168>)
 80062dc:	490d      	ldr	r1, [pc, #52]	; (8006314 <acc_rss_activate+0x15c>)
 80062de:	2000      	movs	r0, #0
 80062e0:	4798      	blx	r3
 80062e2:	e7e3      	b.n	80062ac <acc_rss_activate+0xf4>
 80062e4:	4b06      	ldr	r3, [pc, #24]	; (8006300 <acc_rss_activate+0x148>)
 80062e6:	001a      	movs	r2, r3
 80062e8:	3230      	adds	r2, #48	; 0x30
 80062ea:	7812      	ldrb	r2, [r2, #0]
 80062ec:	2a01      	cmp	r2, #1
 80062ee:	d9dd      	bls.n	80062ac <acc_rss_activate+0xf4>
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	4a0c      	ldr	r2, [pc, #48]	; (8006324 <acc_rss_activate+0x16c>)
 80062f4:	4907      	ldr	r1, [pc, #28]	; (8006314 <acc_rss_activate+0x15c>)
 80062f6:	2002      	movs	r0, #2
 80062f8:	4798      	blx	r3
 80062fa:	e7d7      	b.n	80062ac <acc_rss_activate+0xf4>
 80062fc:	2000020c 	.word	0x2000020c
 8006300:	200004a8 	.word	0x200004a8
 8006304:	2000008c 	.word	0x2000008c
 8006308:	0801cb91 	.word	0x0801cb91
 800630c:	ff800000 	.word	0xff800000
 8006310:	0801ce53 	.word	0x0801ce53
 8006314:	0801ce73 	.word	0x0801ce73
 8006318:	0801ce3f 	.word	0x0801ce3f
 800631c:	0801d996 	.word	0x0801d996
 8006320:	0801ce77 	.word	0x0801ce77
 8006324:	0801ce8d 	.word	0x0801ce8d

08006328 <initRSS>:
void initRSS(void){
 8006328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632a:	b083      	sub	sp, #12
	INF_PRINTLN("build at %s %s", __DATE__, __TIME__);
 800632c:	4e4e      	ldr	r6, [pc, #312]	; (8006468 <initRSS+0x140>)
 800632e:	0030      	movs	r0, r6
 8006330:	f00f f9c0 	bl	80156b4 <__wrap_printf>
 8006334:	4a4d      	ldr	r2, [pc, #308]	; (800646c <initRSS+0x144>)
 8006336:	494e      	ldr	r1, [pc, #312]	; (8006470 <initRSS+0x148>)
 8006338:	484e      	ldr	r0, [pc, #312]	; (8006474 <initRSS+0x14c>)
 800633a:	f00f f9bb 	bl	80156b4 <__wrap_printf>
 800633e:	22a8      	movs	r2, #168	; 0xa8
 8006340:	4d4d      	ldr	r5, [pc, #308]	; (8006478 <initRSS+0x150>)
 8006342:	4c4e      	ldr	r4, [pc, #312]	; (800647c <initRSS+0x154>)
 8006344:	0052      	lsls	r2, r2, #1
 8006346:	0029      	movs	r1, r5
 8006348:	0020      	movs	r0, r4
 800634a:	f00f f9b3 	bl	80156b4 <__wrap_printf>
	INF_PRINTLN("of firmware revision: %d.%d.%d", get_byte(FIRMWARE_REVISION,2),get_byte(FIRMWARE_REVISION,1),get_byte(FIRMWARE_REVISION,0) );
 800634e:	0030      	movs	r0, r6
 8006350:	f00f f9b0 	bl	80156b4 <__wrap_printf>
 8006354:	4f4a      	ldr	r7, [pc, #296]	; (8006480 <initRSS+0x158>)
 8006356:	2102      	movs	r1, #2
 8006358:	0038      	movs	r0, r7
 800635a:	f7fb fc1d 	bl	8001b98 <get_byte>
 800635e:	9000      	str	r0, [sp, #0]
 8006360:	2101      	movs	r1, #1
 8006362:	0038      	movs	r0, r7
 8006364:	f7fb fc18 	bl	8001b98 <get_byte>
 8006368:	9001      	str	r0, [sp, #4]
 800636a:	2100      	movs	r1, #0
 800636c:	0038      	movs	r0, r7
 800636e:	f7fb fc13 	bl	8001b98 <get_byte>
 8006372:	0003      	movs	r3, r0
 8006374:	9a01      	ldr	r2, [sp, #4]
 8006376:	9900      	ldr	r1, [sp, #0]
 8006378:	4842      	ldr	r0, [pc, #264]	; (8006484 <initRSS+0x15c>)
 800637a:	f00f f99b 	bl	80156b4 <__wrap_printf>
 800637e:	2252      	movs	r2, #82	; 0x52
 8006380:	32ff      	adds	r2, #255	; 0xff
 8006382:	0029      	movs	r1, r5
 8006384:	0020      	movs	r0, r4
 8006386:	f00f f995 	bl	80156b4 <__wrap_printf>
	INF_PRINTLN("for hardware revision: %d.%d.%d", get_byte(HARDWARE_REVISION,2),get_byte(HARDWARE_REVISION,1),get_byte(HARDWARE_REVISION,0) );
 800638a:	0030      	movs	r0, r6
 800638c:	f00f f992 	bl	80156b4 <__wrap_printf>
 8006390:	4e3d      	ldr	r6, [pc, #244]	; (8006488 <initRSS+0x160>)
 8006392:	2102      	movs	r1, #2
 8006394:	0030      	movs	r0, r6
 8006396:	f7fb fbff 	bl	8001b98 <get_byte>
 800639a:	9000      	str	r0, [sp, #0]
 800639c:	2101      	movs	r1, #1
 800639e:	0030      	movs	r0, r6
 80063a0:	f7fb fbfa 	bl	8001b98 <get_byte>
 80063a4:	0007      	movs	r7, r0
 80063a6:	2100      	movs	r1, #0
 80063a8:	0030      	movs	r0, r6
 80063aa:	f7fb fbf5 	bl	8001b98 <get_byte>
 80063ae:	0003      	movs	r3, r0
 80063b0:	003a      	movs	r2, r7
 80063b2:	9900      	ldr	r1, [sp, #0]
 80063b4:	4835      	ldr	r0, [pc, #212]	; (800648c <initRSS+0x164>)
 80063b6:	f00f f97d 	bl	80156b4 <__wrap_printf>
 80063ba:	22a9      	movs	r2, #169	; 0xa9
 80063bc:	0052      	lsls	r2, r2, #1
 80063be:	0029      	movs	r1, r5
 80063c0:	0020      	movs	r0, r4
 80063c2:	f00f f977 	bl	80156b4 <__wrap_printf>
	radar_hal = *acc_hal_integration_get_implementation();
 80063c6:	f7fb fc99 	bl	8001cfc <acc_hal_integration_get_implementation>
 80063ca:	0001      	movs	r1, r0
 80063cc:	4c30      	ldr	r4, [pc, #192]	; (8006490 <initRSS+0x168>)
 80063ce:	3474      	adds	r4, #116	; 0x74
 80063d0:	2238      	movs	r2, #56	; 0x38
 80063d2:	0020      	movs	r0, r4
 80063d4:	f00f fd3e 	bl	8015e54 <memcpy>
	if (!acc_rss_activate(&radar_hal))
 80063d8:	0020      	movs	r0, r4
 80063da:	f7ff feed 	bl	80061b8 <acc_rss_activate>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d016      	beq.n	8006410 <initRSS+0xe8>
	acc_rss_override_sensor_id_check_at_creation(true);
 80063e2:	2001      	movs	r0, #1
 80063e4:	f7fb f94a 	bl	800167c <acc_rss_override_sensor_id_check_at_creation>
	sparse_config = acc_service_sparse_configuration_create();
 80063e8:	f7fc fab4 	bl	8002954 <acc_service_sparse_configuration_create>
 80063ec:	4b29      	ldr	r3, [pc, #164]	; (8006494 <initRSS+0x16c>)
 80063ee:	65d8      	str	r0, [r3, #92]	; 0x5c
	if (sparse_config == NULL)
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d01a      	beq.n	800642a <initRSS+0x102>
	sparse_config_far = acc_service_sparse_configuration_create();
 80063f4:	f7fc faae 	bl	8002954 <acc_service_sparse_configuration_create>
 80063f8:	4b27      	ldr	r3, [pc, #156]	; (8006498 <initRSS+0x170>)
 80063fa:	62d8      	str	r0, [r3, #44]	; 0x2c
	if (sparse_config_far == NULL)
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d021      	beq.n	8006444 <initRSS+0x11c>
    envelope_config = acc_service_envelope_configuration_create();
 8006400:	f7fc fc14 	bl	8002c2c <acc_service_envelope_configuration_create>
 8006404:	4b24      	ldr	r3, [pc, #144]	; (8006498 <initRSS+0x170>)
 8006406:	6318      	str	r0, [r3, #48]	; 0x30
	if (envelope_config == NULL)
 8006408:	2800      	cmp	r0, #0
 800640a:	d028      	beq.n	800645e <initRSS+0x136>
}
 800640c:	b003      	add	sp, #12
 800640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ERR_PRINTLN("RSS activation fail");
 8006410:	4822      	ldr	r0, [pc, #136]	; (800649c <initRSS+0x174>)
 8006412:	f00f f94f 	bl	80156b4 <__wrap_printf>
 8006416:	4822      	ldr	r0, [pc, #136]	; (80064a0 <initRSS+0x178>)
 8006418:	f00f f94c 	bl	80156b4 <__wrap_printf>
 800641c:	225a      	movs	r2, #90	; 0x5a
 800641e:	32ff      	adds	r2, #255	; 0xff
 8006420:	4915      	ldr	r1, [pc, #84]	; (8006478 <initRSS+0x150>)
 8006422:	4816      	ldr	r0, [pc, #88]	; (800647c <initRSS+0x154>)
 8006424:	f00f f946 	bl	80156b4 <__wrap_printf>
 8006428:	e7db      	b.n	80063e2 <initRSS+0xba>
		ERR_PRINTLN("sparse config creation fail");
 800642a:	481c      	ldr	r0, [pc, #112]	; (800649c <initRSS+0x174>)
 800642c:	f00f f942 	bl	80156b4 <__wrap_printf>
 8006430:	481c      	ldr	r0, [pc, #112]	; (80064a4 <initRSS+0x17c>)
 8006432:	f00f f93f 	bl	80156b4 <__wrap_printf>
 8006436:	22b1      	movs	r2, #177	; 0xb1
 8006438:	0052      	lsls	r2, r2, #1
 800643a:	490f      	ldr	r1, [pc, #60]	; (8006478 <initRSS+0x150>)
 800643c:	480f      	ldr	r0, [pc, #60]	; (800647c <initRSS+0x154>)
 800643e:	f00f f939 	bl	80156b4 <__wrap_printf>
 8006442:	e7d7      	b.n	80063f4 <initRSS+0xcc>
		ERR_PRINTLN("far sparse config creation fail");
 8006444:	4815      	ldr	r0, [pc, #84]	; (800649c <initRSS+0x174>)
 8006446:	f00f f935 	bl	80156b4 <__wrap_printf>
 800644a:	4817      	ldr	r0, [pc, #92]	; (80064a8 <initRSS+0x180>)
 800644c:	f00f f932 	bl	80156b4 <__wrap_printf>
 8006450:	22b5      	movs	r2, #181	; 0xb5
 8006452:	0052      	lsls	r2, r2, #1
 8006454:	4908      	ldr	r1, [pc, #32]	; (8006478 <initRSS+0x150>)
 8006456:	4809      	ldr	r0, [pc, #36]	; (800647c <initRSS+0x154>)
 8006458:	f00f f92c 	bl	80156b4 <__wrap_printf>
 800645c:	e7d0      	b.n	8006400 <initRSS+0xd8>
		printf("envelope config creation fail");
 800645e:	4813      	ldr	r0, [pc, #76]	; (80064ac <initRSS+0x184>)
 8006460:	f00f f928 	bl	80156b4 <__wrap_printf>
 8006464:	e7d2      	b.n	800640c <initRSS+0xe4>
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	0801dd78 	.word	0x0801dd78
 800646c:	0801e07c 	.word	0x0801e07c
 8006470:	0801e088 	.word	0x0801e088
 8006474:	0801e094 	.word	0x0801e094
 8006478:	0801dd88 	.word	0x0801dd88
 800647c:	0801dd48 	.word	0x0801dd48
 8006480:	bf010400 	.word	0xbf010400
 8006484:	0801e0a4 	.word	0x0801e0a4
 8006488:	bd010100 	.word	0xbd010100
 800648c:	0801e0c4 	.word	0x0801e0c4
 8006490:	2000020c 	.word	0x2000020c
 8006494:	2000018c 	.word	0x2000018c
 8006498:	2000028c 	.word	0x2000028c
 800649c:	0801dd10 	.word	0x0801dd10
 80064a0:	0801e0e4 	.word	0x0801e0e4
 80064a4:	0801e0fc 	.word	0x0801e0fc
 80064a8:	0801e0f8 	.word	0x0801e0f8
 80064ac:	0801e118 	.word	0x0801e118

080064b0 <acc_rss_integration_sensor_device_transfer>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	001e      	movs	r6, r3
 80064b4:	000c      	movs	r4, r1
 80064b6:	0015      	movs	r5, r2
 80064b8:	000b      	movs	r3, r1
 80064ba:	3a01      	subs	r2, #1
 80064bc:	d209      	bcs.n	80064d2 <acc_rss_integration_sensor_device_transfer+0x22>
 80064be:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <acc_rss_integration_sensor_device_transfer+0x38>)
 80064c0:	006a      	lsls	r2, r5, #1
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	0021      	movs	r1, r4
 80064c6:	4798      	blx	r3
 80064c8:	2e00      	cmp	r6, #0
 80064ca:	d001      	beq.n	80064d0 <acc_rss_integration_sensor_device_transfer+0x20>
 80064cc:	3d01      	subs	r5, #1
 80064ce:	d205      	bcs.n	80064dc <acc_rss_integration_sensor_device_transfer+0x2c>
 80064d0:	bd70      	pop	{r4, r5, r6, pc}
 80064d2:	8819      	ldrh	r1, [r3, #0]
 80064d4:	ba49      	rev16	r1, r1
 80064d6:	8019      	strh	r1, [r3, #0]
 80064d8:	3302      	adds	r3, #2
 80064da:	e7ee      	b.n	80064ba <acc_rss_integration_sensor_device_transfer+0xa>
 80064dc:	8823      	ldrh	r3, [r4, #0]
 80064de:	ba5b      	rev16	r3, r3
 80064e0:	8023      	strh	r3, [r4, #0]
 80064e2:	3402      	adds	r4, #2
 80064e4:	e7f2      	b.n	80064cc <acc_rss_integration_sensor_device_transfer+0x1c>
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	200004a8 	.word	0x200004a8

080064ec <acc_sensor_r2_conf_write_instr>:
 80064ec:	23a0      	movs	r3, #160	; 0xa0
 80064ee:	b530      	push	{r4, r5, lr}
 80064f0:	01db      	lsls	r3, r3, #7
 80064f2:	b085      	sub	sp, #20
 80064f4:	4319      	orrs	r1, r3
 80064f6:	ac02      	add	r4, sp, #8
 80064f8:	8021      	strh	r1, [r4, #0]
 80064fa:	210a      	movs	r1, #10
 80064fc:	0005      	movs	r5, r0
 80064fe:	9201      	str	r2, [sp, #4]
 8006500:	4469      	add	r1, sp
 8006502:	a801      	add	r0, sp, #4
 8006504:	2201      	movs	r2, #1
 8006506:	f008 ff8b 	bl	800f420 <acc_confprogram_copy>
 800650a:	2300      	movs	r3, #0
 800650c:	2203      	movs	r2, #3
 800650e:	0021      	movs	r1, r4
 8006510:	0028      	movs	r0, r5
 8006512:	f7ff ffcd 	bl	80064b0 <acc_rss_integration_sensor_device_transfer>
 8006516:	b005      	add	sp, #20
 8006518:	bd30      	pop	{r4, r5, pc}

0800651a <acc_sensor_r2_load_confmem>:
 800651a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651c:	4647      	mov	r7, r8
 800651e:	46ce      	mov	lr, r9
 8006520:	1c5c      	adds	r4, r3, #1
 8006522:	4d17      	ldr	r5, [pc, #92]	; (8006580 <acc_sensor_r2_load_confmem+0x66>)
 8006524:	0063      	lsls	r3, r4, #1
 8006526:	4699      	mov	r9, r3
 8006528:	002b      	movs	r3, r5
 800652a:	b580      	push	{r7, lr}
 800652c:	3330      	adds	r3, #48	; 0x30
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	b083      	sub	sp, #12
 8006532:	0006      	movs	r6, r0
 8006534:	4688      	mov	r8, r1
 8006536:	0017      	movs	r7, r2
 8006538:	2b03      	cmp	r3, #3
 800653a:	d906      	bls.n	800654a <acc_sensor_r2_load_confmem+0x30>
 800653c:	9100      	str	r1, [sp, #0]
 800653e:	0003      	movs	r3, r0
 8006540:	4a10      	ldr	r2, [pc, #64]	; (8006584 <acc_sensor_r2_load_confmem+0x6a>)
 8006542:	4911      	ldr	r1, [pc, #68]	; (8006588 <acc_sensor_r2_load_confmem+0x6e>)
 8006544:	2004      	movs	r0, #4
 8006546:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8006548:	47a0      	blx	r4
 800654a:	686b      	ldr	r3, [r5, #4]
 800654c:	4599      	cmp	r9, r3
 800654e:	d909      	bls.n	8006564 <acc_sensor_r2_load_confmem+0x4a>
 8006550:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006552:	4a0e      	ldr	r2, [pc, #56]	; (800658c <acc_sensor_r2_load_confmem+0x72>)
 8006554:	490c      	ldr	r1, [pc, #48]	; (8006588 <acc_sensor_r2_load_confmem+0x6e>)
 8006556:	2000      	movs	r0, #0
 8006558:	4798      	blx	r3
 800655a:	b003      	add	sp, #12
 800655c:	bc0c      	pop	{r2, r3}
 800655e:	4690      	mov	r8, r2
 8006560:	4699      	mov	r9, r3
 8006562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006564:	21a0      	movs	r1, #160	; 0xa0
 8006566:	4643      	mov	r3, r8
 8006568:	01c9      	lsls	r1, r1, #7
 800656a:	4319      	orrs	r1, r3
 800656c:	464b      	mov	r3, r9
 800656e:	8039      	strh	r1, [r7, #0]
 8006570:	085a      	lsrs	r2, r3, #1
 8006572:	0039      	movs	r1, r7
 8006574:	2300      	movs	r3, #0
 8006576:	0030      	movs	r0, r6
 8006578:	f7ff ff9a 	bl	80064b0 <acc_rss_integration_sensor_device_transfer>
 800657c:	e7ed      	b.n	800655a <acc_sensor_r2_load_confmem+0x40>
 800657e:	46c0      	nop			; (mov r8, r8)
 8006580:	200004a8 	.word	0x200004a8
 8006584:	0801ceb5 	.word	0x0801ceb5
 8006588:	0801cedb 	.word	0x0801cedb
 800658c:	0801cee5 	.word	0x0801cee5

08006590 <acc_cpd_linear_sweep_load_program>:
 8006590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006592:	46de      	mov	lr, fp
 8006594:	4657      	mov	r7, sl
 8006596:	4645      	mov	r5, r8
 8006598:	464e      	mov	r6, r9
 800659a:	b5e0      	push	{r5, r6, r7, lr}
 800659c:	001f      	movs	r7, r3
 800659e:	2316      	movs	r3, #22
 80065a0:	b08f      	sub	sp, #60	; 0x3c
 80065a2:	ac0b      	add	r4, sp, #44	; 0x2c
 80065a4:	7023      	strb	r3, [r4, #0]
 80065a6:	2307      	movs	r3, #7
 80065a8:	9005      	str	r0, [sp, #20]
 80065aa:	9108      	str	r1, [sp, #32]
 80065ac:	0015      	movs	r5, r2
 80065ae:	900c      	str	r0, [sp, #48]	; 0x30
 80065b0:	22bc      	movs	r2, #188	; 0xbc
 80065b2:	0039      	movs	r1, r7
 80065b4:	0020      	movs	r0, r4
 80065b6:	930d      	str	r3, [sp, #52]	; 0x34
 80065b8:	f7f9 fda4 	bl	8000104 <acc_probes_execute>
 80065bc:	2300      	movs	r3, #0
 80065be:	930b      	str	r3, [sp, #44]	; 0x2c
 80065c0:	930a      	str	r3, [sp, #40]	; 0x28
 80065c2:	ab0a      	add	r3, sp, #40	; 0x28
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	002a      	movs	r2, r5
 80065c8:	0023      	movs	r3, r4
 80065ca:	9908      	ldr	r1, [sp, #32]
 80065cc:	9805      	ldr	r0, [sp, #20]
 80065ce:	f009 fc1b 	bl	800fe08 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 80065d2:	9009      	str	r0, [sp, #36]	; 0x24
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d101      	bne.n	80065dc <acc_cpd_linear_sweep_load_program+0x4c>
 80065d8:	f000 fc50 	bl	8006e7c <acc_cpd_linear_sweep_load_program+0x8ec>
 80065dc:	4bf9      	ldr	r3, [pc, #996]	; (80069c4 <acc_cpd_linear_sweep_load_program+0x434>)
 80065de:	001a      	movs	r2, r3
 80065e0:	3230      	adds	r2, #48	; 0x30
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	2a03      	cmp	r2, #3
 80065e6:	d904      	bls.n	80065f2 <acc_cpd_linear_sweep_load_program+0x62>
 80065e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ea:	4af7      	ldr	r2, [pc, #988]	; (80069c8 <acc_cpd_linear_sweep_load_program+0x438>)
 80065ec:	49f7      	ldr	r1, [pc, #988]	; (80069cc <acc_cpd_linear_sweep_load_program+0x43c>)
 80065ee:	2004      	movs	r0, #4
 80065f0:	4798      	blx	r3
 80065f2:	2300      	movs	r3, #0
 80065f4:	469b      	mov	fp, r3
 80065f6:	23e2      	movs	r3, #226	; 0xe2
 80065f8:	465a      	mov	r2, fp
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006600:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006602:	9203      	str	r2, [sp, #12]
 8006604:	429a      	cmp	r2, r3
 8006606:	d900      	bls.n	800660a <acc_cpd_linear_sweep_load_program+0x7a>
 8006608:	9303      	str	r3, [sp, #12]
 800660a:	465b      	mov	r3, fp
 800660c:	085b      	lsrs	r3, r3, #1
 800660e:	9306      	str	r3, [sp, #24]
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	0021      	movs	r1, r4
 8006614:	085a      	lsrs	r2, r3, #1
 8006616:	9b06      	ldr	r3, [sp, #24]
 8006618:	0098      	lsls	r0, r3, #2
 800661a:	4bed      	ldr	r3, [pc, #948]	; (80069d0 <acc_cpd_linear_sweep_load_program+0x440>)
 800661c:	18c0      	adds	r0, r0, r3
 800661e:	f008 feff 	bl	800f420 <acc_confprogram_copy>
 8006622:	465b      	mov	r3, fp
 8006624:	b29d      	uxth	r5, r3
 8006626:	466b      	mov	r3, sp
 8006628:	899e      	ldrh	r6, [r3, #12]
 800662a:	4bea      	ldr	r3, [pc, #936]	; (80069d4 <acc_cpd_linear_sweep_load_program+0x444>)
 800662c:	0032      	movs	r2, r6
 800662e:	4698      	mov	r8, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	0029      	movs	r1, r5
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	2350      	movs	r3, #80	; 0x50
 8006638:	0020      	movs	r0, r4
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	4643      	mov	r3, r8
 800663e:	f008 ff37 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	0032      	movs	r2, r6
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	234e      	movs	r3, #78	; 0x4e
 800664a:	0029      	movs	r1, r5
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	0020      	movs	r0, r4
 8006650:	4643      	mov	r3, r8
 8006652:	f008 ff2d 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	0032      	movs	r2, r6
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	234f      	movs	r3, #79	; 0x4f
 800665e:	0029      	movs	r1, r5
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	0020      	movs	r0, r4
 8006664:	4643      	mov	r3, r8
 8006666:	f008 ff23 	bl	800f4b0 <acc_confprogram_patch_offset>
 800666a:	89bb      	ldrh	r3, [r7, #12]
 800666c:	0032      	movs	r2, r6
 800666e:	9301      	str	r3, [sp, #4]
 8006670:	234c      	movs	r3, #76	; 0x4c
 8006672:	0029      	movs	r1, r5
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	0020      	movs	r0, r4
 8006678:	4643      	mov	r3, r8
 800667a:	f008 ff19 	bl	800f4b0 <acc_confprogram_patch_offset>
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	0032      	movs	r2, r6
 8006682:	9301      	str	r3, [sp, #4]
 8006684:	2326      	movs	r3, #38	; 0x26
 8006686:	0029      	movs	r1, r5
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	0020      	movs	r0, r4
 800668c:	4643      	mov	r3, r8
 800668e:	f008 ff0f 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	0032      	movs	r2, r6
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	2373      	movs	r3, #115	; 0x73
 800669a:	0029      	movs	r1, r5
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	0020      	movs	r0, r4
 80066a0:	4643      	mov	r3, r8
 80066a2:	f008 ff05 	bl	800f4b0 <acc_confprogram_patch_offset>
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	0032      	movs	r2, r6
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	2362      	movs	r3, #98	; 0x62
 80066ae:	0029      	movs	r1, r5
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	0020      	movs	r0, r4
 80066b4:	4643      	mov	r3, r8
 80066b6:	f008 fefb 	bl	800f4b0 <acc_confprogram_patch_offset>
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	0032      	movs	r2, r6
 80066be:	9301      	str	r3, [sp, #4]
 80066c0:	2337      	movs	r3, #55	; 0x37
 80066c2:	0029      	movs	r1, r5
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	0020      	movs	r0, r4
 80066c8:	4643      	mov	r3, r8
 80066ca:	f008 fef1 	bl	800f4b0 <acc_confprogram_patch_offset>
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	0032      	movs	r2, r6
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	2376      	movs	r3, #118	; 0x76
 80066d6:	0029      	movs	r1, r5
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	0020      	movs	r0, r4
 80066dc:	4643      	mov	r3, r8
 80066de:	f008 fee7 	bl	800f4b0 <acc_confprogram_patch_offset>
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	0032      	movs	r2, r6
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	2369      	movs	r3, #105	; 0x69
 80066ea:	0029      	movs	r1, r5
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	0020      	movs	r0, r4
 80066f0:	4643      	mov	r3, r8
 80066f2:	f008 fedd 	bl	800f4b0 <acc_confprogram_patch_offset>
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	0032      	movs	r2, r6
 80066fa:	9301      	str	r3, [sp, #4]
 80066fc:	236a      	movs	r3, #106	; 0x6a
 80066fe:	0029      	movs	r1, r5
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	0020      	movs	r0, r4
 8006704:	4643      	mov	r3, r8
 8006706:	f008 fed3 	bl	800f4b0 <acc_confprogram_patch_offset>
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	0032      	movs	r2, r6
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	2319      	movs	r3, #25
 8006712:	0029      	movs	r1, r5
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	0020      	movs	r0, r4
 8006718:	4643      	mov	r3, r8
 800671a:	f008 fec9 	bl	800f4b0 <acc_confprogram_patch_offset>
 800671e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006720:	0032      	movs	r2, r6
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	231a      	movs	r3, #26
 8006726:	0029      	movs	r1, r5
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	0020      	movs	r0, r4
 800672c:	4643      	mov	r3, r8
 800672e:	f008 febf 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	0032      	movs	r2, r6
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	231b      	movs	r3, #27
 800673a:	0029      	movs	r1, r5
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	0020      	movs	r0, r4
 8006740:	4643      	mov	r3, r8
 8006742:	f008 feb5 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006748:	0032      	movs	r2, r6
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	231c      	movs	r3, #28
 800674e:	0029      	movs	r1, r5
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	0020      	movs	r0, r4
 8006754:	4643      	mov	r3, r8
 8006756:	f008 feab 	bl	800f4b0 <acc_confprogram_patch_offset>
 800675a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800675c:	0032      	movs	r2, r6
 800675e:	9301      	str	r3, [sp, #4]
 8006760:	231d      	movs	r3, #29
 8006762:	0029      	movs	r1, r5
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	0020      	movs	r0, r4
 8006768:	4643      	mov	r3, r8
 800676a:	f008 fea1 	bl	800f4b0 <acc_confprogram_patch_offset>
 800676e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006770:	0032      	movs	r2, r6
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	231e      	movs	r3, #30
 8006776:	0029      	movs	r1, r5
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	0020      	movs	r0, r4
 800677c:	4643      	mov	r3, r8
 800677e:	f008 fe97 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006784:	0032      	movs	r2, r6
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	2355      	movs	r3, #85	; 0x55
 800678a:	0029      	movs	r1, r5
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	0020      	movs	r0, r4
 8006790:	4643      	mov	r3, r8
 8006792:	f008 fe8d 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006798:	0032      	movs	r2, r6
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	2356      	movs	r3, #86	; 0x56
 800679e:	0029      	movs	r1, r5
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	0020      	movs	r0, r4
 80067a4:	4643      	mov	r3, r8
 80067a6:	f008 fe83 	bl	800f4b0 <acc_confprogram_patch_offset>
 80067aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ac:	0032      	movs	r2, r6
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	2358      	movs	r3, #88	; 0x58
 80067b2:	0029      	movs	r1, r5
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	0020      	movs	r0, r4
 80067b8:	4643      	mov	r3, r8
 80067ba:	f008 fe79 	bl	800f4b0 <acc_confprogram_patch_offset>
 80067be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067c0:	0032      	movs	r2, r6
 80067c2:	9301      	str	r3, [sp, #4]
 80067c4:	236b      	movs	r3, #107	; 0x6b
 80067c6:	0029      	movs	r1, r5
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	0020      	movs	r0, r4
 80067cc:	4643      	mov	r3, r8
 80067ce:	f008 fe6f 	bl	800f4b0 <acc_confprogram_patch_offset>
 80067d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067d4:	0032      	movs	r2, r6
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	2386      	movs	r3, #134	; 0x86
 80067da:	0029      	movs	r1, r5
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	0020      	movs	r0, r4
 80067e0:	4643      	mov	r3, r8
 80067e2:	f008 fe65 	bl	800f4b0 <acc_confprogram_patch_offset>
 80067e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e8:	0032      	movs	r2, r6
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	2364      	movs	r3, #100	; 0x64
 80067ee:	0029      	movs	r1, r5
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	0020      	movs	r0, r4
 80067f4:	4643      	mov	r3, r8
 80067f6:	f008 fe5b 	bl	800f4b0 <acc_confprogram_patch_offset>
 80067fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067fc:	0032      	movs	r2, r6
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	2365      	movs	r3, #101	; 0x65
 8006802:	0029      	movs	r1, r5
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	0020      	movs	r0, r4
 8006808:	4643      	mov	r3, r8
 800680a:	f008 fe51 	bl	800f4b0 <acc_confprogram_patch_offset>
 800680e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006810:	0032      	movs	r2, r6
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	0029      	movs	r1, r5
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	0020      	movs	r0, r4
 800681c:	4643      	mov	r3, r8
 800681e:	f008 fe47 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006824:	0032      	movs	r2, r6
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	2341      	movs	r3, #65	; 0x41
 800682a:	0029      	movs	r1, r5
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	0020      	movs	r0, r4
 8006830:	4643      	mov	r3, r8
 8006832:	f008 fe3d 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006838:	0032      	movs	r2, r6
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	2372      	movs	r3, #114	; 0x72
 800683e:	0029      	movs	r1, r5
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	0020      	movs	r0, r4
 8006844:	4643      	mov	r3, r8
 8006846:	f008 fe33 	bl	800f4b0 <acc_confprogram_patch_offset>
 800684a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800684c:	0032      	movs	r2, r6
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	2354      	movs	r3, #84	; 0x54
 8006852:	0029      	movs	r1, r5
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	0020      	movs	r0, r4
 8006858:	4643      	mov	r3, r8
 800685a:	f008 fe29 	bl	800f4b0 <acc_confprogram_patch_offset>
 800685e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006860:	0032      	movs	r2, r6
 8006862:	9301      	str	r3, [sp, #4]
 8006864:	2339      	movs	r3, #57	; 0x39
 8006866:	0029      	movs	r1, r5
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	0020      	movs	r0, r4
 800686c:	4643      	mov	r3, r8
 800686e:	f008 fe1f 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006874:	2b00      	cmp	r3, #0
 8006876:	d06f      	beq.n	8006958 <acc_cpd_linear_sweep_load_program+0x3c8>
 8006878:	2301      	movs	r3, #1
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	330f      	adds	r3, #15
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	0032      	movs	r2, r6
 8006882:	4643      	mov	r3, r8
 8006884:	0029      	movs	r1, r5
 8006886:	0020      	movs	r0, r4
 8006888:	f008 fe12 	bl	800f4b0 <acc_confprogram_patch_offset>
 800688c:	4b52      	ldr	r3, [pc, #328]	; (80069d8 <acc_cpd_linear_sweep_load_program+0x448>)
 800688e:	0032      	movs	r2, r6
 8006890:	469a      	mov	sl, r3
 8006892:	9301      	str	r3, [sp, #4]
 8006894:	2312      	movs	r3, #18
 8006896:	0029      	movs	r1, r5
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	0020      	movs	r0, r4
 800689c:	4643      	mov	r3, r8
 800689e:	f008 fe07 	bl	800f4b0 <acc_confprogram_patch_offset>
 80068a2:	2307      	movs	r3, #7
 80068a4:	4699      	mov	r9, r3
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	330d      	adds	r3, #13
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	0032      	movs	r2, r6
 80068ae:	4643      	mov	r3, r8
 80068b0:	0029      	movs	r1, r5
 80068b2:	0020      	movs	r0, r4
 80068b4:	f008 fdfc 	bl	800f4b0 <acc_confprogram_patch_offset>
 80068b8:	4653      	mov	r3, sl
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	2311      	movs	r3, #17
 80068be:	0032      	movs	r2, r6
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	0029      	movs	r1, r5
 80068c4:	4643      	mov	r3, r8
 80068c6:	0020      	movs	r0, r4
 80068c8:	f008 fdf2 	bl	800f4b0 <acc_confprogram_patch_offset>
 80068cc:	2300      	movs	r3, #0
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	3313      	adds	r3, #19
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	0032      	movs	r2, r6
 80068d6:	4643      	mov	r3, r8
 80068d8:	0029      	movs	r1, r5
 80068da:	0020      	movs	r0, r4
 80068dc:	f008 fde8 	bl	800f4b0 <acc_confprogram_patch_offset>
 80068e0:	4b3e      	ldr	r3, [pc, #248]	; (80069dc <acc_cpd_linear_sweep_load_program+0x44c>)
 80068e2:	0032      	movs	r2, r6
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	2315      	movs	r3, #21
 80068e8:	0029      	movs	r1, r5
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	0020      	movs	r0, r4
 80068ee:	4643      	mov	r3, r8
 80068f0:	f008 fdde 	bl	800f4b0 <acc_confprogram_patch_offset>
 80068f4:	464b      	mov	r3, r9
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	330f      	adds	r3, #15
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	0032      	movs	r2, r6
 80068fe:	4643      	mov	r3, r8
 8006900:	0029      	movs	r1, r5
 8006902:	0020      	movs	r0, r4
 8006904:	f008 fdd4 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006908:	4b35      	ldr	r3, [pc, #212]	; (80069e0 <acc_cpd_linear_sweep_load_program+0x450>)
 800690a:	0032      	movs	r2, r6
 800690c:	9301      	str	r3, [sp, #4]
 800690e:	230e      	movs	r3, #14
 8006910:	0029      	movs	r1, r5
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	0020      	movs	r0, r4
 8006916:	4643      	mov	r3, r8
 8006918:	f008 fdca 	bl	800f4b0 <acc_confprogram_patch_offset>
 800691c:	464b      	mov	r3, r9
 800691e:	9301      	str	r3, [sp, #4]
 8006920:	3308      	adds	r3, #8
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	0032      	movs	r2, r6
 8006926:	4643      	mov	r3, r8
 8006928:	0029      	movs	r1, r5
 800692a:	0020      	movs	r0, r4
 800692c:	f008 fdc0 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006930:	4b2c      	ldr	r3, [pc, #176]	; (80069e4 <acc_cpd_linear_sweep_load_program+0x454>)
 8006932:	0032      	movs	r2, r6
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	2317      	movs	r3, #23
 8006938:	0029      	movs	r1, r5
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	0020      	movs	r0, r4
 800693e:	4643      	mov	r3, r8
 8006940:	f008 fdb6 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006944:	464b      	mov	r3, r9
 8006946:	9301      	str	r3, [sp, #4]
 8006948:	3311      	adds	r3, #17
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	0032      	movs	r2, r6
 800694e:	4643      	mov	r3, r8
 8006950:	0029      	movs	r1, r5
 8006952:	0020      	movs	r0, r4
 8006954:	f008 fdac 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006958:	4b1e      	ldr	r3, [pc, #120]	; (80069d4 <acc_cpd_linear_sweep_load_program+0x444>)
 800695a:	0032      	movs	r2, r6
 800695c:	4698      	mov	r8, r3
 800695e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006960:	0029      	movs	r1, r5
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	2351      	movs	r3, #81	; 0x51
 8006966:	0020      	movs	r0, r4
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	4643      	mov	r3, r8
 800696c:	f008 fda0 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006972:	0032      	movs	r2, r6
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	2377      	movs	r3, #119	; 0x77
 8006978:	0029      	movs	r1, r5
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	0020      	movs	r0, r4
 800697e:	4643      	mov	r3, r8
 8006980:	f008 fd96 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006984:	1d3b      	adds	r3, r7, #4
 8006986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006988:	0032      	movs	r2, r6
 800698a:	9301      	str	r3, [sp, #4]
 800698c:	2344      	movs	r3, #68	; 0x44
 800698e:	0029      	movs	r1, r5
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	0020      	movs	r0, r4
 8006994:	4643      	mov	r3, r8
 8006996:	f008 fd8b 	bl	800f4b0 <acc_confprogram_patch_offset>
 800699a:	003b      	movs	r3, r7
 800699c:	3308      	adds	r3, #8
 800699e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069a0:	0032      	movs	r2, r6
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	2343      	movs	r3, #67	; 0x43
 80069a6:	0029      	movs	r1, r5
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	0020      	movs	r0, r4
 80069ac:	4643      	mov	r3, r8
 80069ae:	f008 fd7f 	bl	800f4b0 <acc_confprogram_patch_offset>
 80069b2:	003b      	movs	r3, r7
 80069b4:	3388      	adds	r3, #136	; 0x88
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	4691      	mov	r9, r2
 80069bc:	2200      	movs	r2, #0
 80069be:	4692      	mov	sl, r2
 80069c0:	464a      	mov	r2, r9
 80069c2:	e011      	b.n	80069e8 <acc_cpd_linear_sweep_load_program+0x458>
 80069c4:	200004a8 	.word	0x200004a8
 80069c8:	0801cf05 	.word	0x0801cf05
 80069cc:	0801cae5 	.word	0x0801cae5
 80069d0:	0801af7c 	.word	0x0801af7c
 80069d4:	08018434 	.word	0x08018434
 80069d8:	0000ff80 	.word	0x0000ff80
 80069dc:	0000ffc0 	.word	0x0000ffc0
 80069e0:	0000fff0 	.word	0x0000fff0
 80069e4:	0000ffff 	.word	0x0000ffff
 80069e8:	2a08      	cmp	r2, #8
 80069ea:	d914      	bls.n	8006a16 <acc_cpd_linear_sweep_load_program+0x486>
 80069ec:	464b      	mov	r3, r9
 80069ee:	22ff      	movs	r2, #255	; 0xff
 80069f0:	3b08      	subs	r3, #8
 80069f2:	409a      	lsls	r2, r3
 80069f4:	0013      	movs	r3, r2
 80069f6:	22ff      	movs	r2, #255	; 0xff
 80069f8:	4393      	bics	r3, r2
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	469a      	mov	sl, r3
 80069fe:	2302      	movs	r3, #2
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	3365      	adds	r3, #101	; 0x65
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	0032      	movs	r2, r6
 8006a08:	4643      	mov	r3, r8
 8006a0a:	0029      	movs	r1, r5
 8006a0c:	0020      	movs	r0, r4
 8006a0e:	f008 fd4f 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006a12:	2308      	movs	r3, #8
 8006a14:	4699      	mov	r9, r3
 8006a16:	4bf2      	ldr	r3, [pc, #968]	; (8006de0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006a18:	0032      	movs	r2, r6
 8006a1a:	4698      	mov	r8, r3
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	236c      	movs	r3, #108	; 0x6c
 8006a22:	0029      	movs	r1, r5
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	0020      	movs	r0, r4
 8006a28:	4643      	mov	r3, r8
 8006a2a:	f008 fd41 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006a2e:	464b      	mov	r3, r9
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	2359      	movs	r3, #89	; 0x59
 8006a34:	0032      	movs	r2, r6
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	0029      	movs	r1, r5
 8006a3a:	4643      	mov	r3, r8
 8006a3c:	0020      	movs	r0, r4
 8006a3e:	f008 fd37 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006a42:	2380      	movs	r3, #128	; 0x80
 8006a44:	4652      	mov	r2, sl
 8006a46:	431a      	orrs	r2, r3
 8006a48:	236e      	movs	r3, #110	; 0x6e
 8006a4a:	9207      	str	r2, [sp, #28]
 8006a4c:	9201      	str	r2, [sp, #4]
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	0032      	movs	r2, r6
 8006a52:	4643      	mov	r3, r8
 8006a54:	0029      	movs	r1, r5
 8006a56:	0020      	movs	r0, r4
 8006a58:	f008 fd2a 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006a5c:	23c0      	movs	r3, #192	; 0xc0
 8006a5e:	4652      	mov	r2, sl
 8006a60:	431a      	orrs	r2, r3
 8006a62:	2370      	movs	r3, #112	; 0x70
 8006a64:	4691      	mov	r9, r2
 8006a66:	9201      	str	r2, [sp, #4]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	0032      	movs	r2, r6
 8006a6c:	4643      	mov	r3, r8
 8006a6e:	0029      	movs	r1, r5
 8006a70:	0020      	movs	r0, r4
 8006a72:	f008 fd1d 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006a76:	4652      	mov	r2, sl
 8006a78:	23ff      	movs	r3, #255	; 0xff
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	9304      	str	r3, [sp, #16]
 8006a7e:	9301      	str	r3, [sp, #4]
 8006a80:	236f      	movs	r3, #111	; 0x6f
 8006a82:	0032      	movs	r2, r6
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	0029      	movs	r1, r5
 8006a88:	4643      	mov	r3, r8
 8006a8a:	0020      	movs	r0, r4
 8006a8c:	f008 fd10 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006a90:	9b07      	ldr	r3, [sp, #28]
 8006a92:	0032      	movs	r2, r6
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	235b      	movs	r3, #91	; 0x5b
 8006a98:	0029      	movs	r1, r5
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	0020      	movs	r0, r4
 8006a9e:	4643      	mov	r3, r8
 8006aa0:	f008 fd06 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	235d      	movs	r3, #93	; 0x5d
 8006aaa:	0032      	movs	r2, r6
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	0029      	movs	r1, r5
 8006ab0:	4643      	mov	r3, r8
 8006ab2:	0020      	movs	r0, r4
 8006ab4:	f008 fcfc 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006ab8:	9b04      	ldr	r3, [sp, #16]
 8006aba:	0032      	movs	r2, r6
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	235c      	movs	r3, #92	; 0x5c
 8006ac0:	0029      	movs	r1, r5
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	0020      	movs	r0, r4
 8006ac6:	4643      	mov	r3, r8
 8006ac8:	f008 fcf2 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006acc:	23f0      	movs	r3, #240	; 0xf0
 8006ace:	4652      	mov	r2, sl
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	234a      	movs	r3, #74	; 0x4a
 8006ad4:	4691      	mov	r9, r2
 8006ad6:	9201      	str	r2, [sp, #4]
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	0032      	movs	r2, r6
 8006adc:	4643      	mov	r3, r8
 8006ade:	0029      	movs	r1, r5
 8006ae0:	0020      	movs	r0, r4
 8006ae2:	f008 fce5 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	2345      	movs	r3, #69	; 0x45
 8006aec:	0032      	movs	r2, r6
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	0029      	movs	r1, r5
 8006af2:	4643      	mov	r3, r8
 8006af4:	0020      	movs	r0, r4
 8006af6:	f008 fcdb 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006afa:	9b04      	ldr	r3, [sp, #16]
 8006afc:	0032      	movs	r2, r6
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	2322      	movs	r3, #34	; 0x22
 8006b02:	0029      	movs	r1, r5
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	0020      	movs	r0, r4
 8006b08:	4643      	mov	r3, r8
 8006b0a:	f008 fcd1 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006b0e:	003b      	movs	r3, r7
 8006b10:	3390      	adds	r3, #144	; 0x90
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	2364      	movs	r3, #100	; 0x64
 8006b16:	2a05      	cmp	r2, #5
 8006b18:	d800      	bhi.n	8006b1c <acc_cpd_linear_sweep_load_program+0x58c>
 8006b1a:	3b20      	subs	r3, #32
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	2305      	movs	r3, #5
 8006b20:	0032      	movs	r2, r6
 8006b22:	4699      	mov	r9, r3
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	0029      	movs	r1, r5
 8006b28:	4643      	mov	r3, r8
 8006b2a:	0020      	movs	r0, r4
 8006b2c:	f008 fcc0 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006b30:	2390      	movs	r3, #144	; 0x90
 8006b32:	469a      	mov	sl, r3
 8006b34:	44ba      	add	sl, r7
 8006b36:	4653      	mov	r3, sl
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	0032      	movs	r2, r6
 8006b3c:	015b      	lsls	r3, r3, #5
 8006b3e:	3b03      	subs	r3, #3
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	2324      	movs	r3, #36	; 0x24
 8006b44:	0029      	movs	r1, r5
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	0020      	movs	r0, r4
 8006b4a:	4643      	mov	r3, r8
 8006b4c:	f008 fcb0 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006b50:	4653      	mov	r3, sl
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	0032      	movs	r2, r6
 8006b56:	015b      	lsls	r3, r3, #5
 8006b58:	085b      	lsrs	r3, r3, #1
 8006b5a:	3b03      	subs	r3, #3
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	2325      	movs	r3, #37	; 0x25
 8006b60:	0029      	movs	r1, r5
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	0020      	movs	r0, r4
 8006b66:	4643      	mov	r3, r8
 8006b68:	f008 fca2 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006b6c:	003b      	movs	r3, r7
 8006b6e:	3394      	adds	r3, #148	; 0x94
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	0032      	movs	r2, r6
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	2336      	movs	r3, #54	; 0x36
 8006b78:	0029      	movs	r1, r5
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	0020      	movs	r0, r4
 8006b7e:	4643      	mov	r3, r8
 8006b80:	f008 fc96 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006b84:	003b      	movs	r3, r7
 8006b86:	3398      	adds	r3, #152	; 0x98
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	0032      	movs	r2, r6
 8006b8c:	330e      	adds	r3, #14
 8006b8e:	9301      	str	r3, [sp, #4]
 8006b90:	235e      	movs	r3, #94	; 0x5e
 8006b92:	0029      	movs	r1, r5
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	0020      	movs	r0, r4
 8006b98:	4643      	mov	r3, r8
 8006b9a:	f008 fc89 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006b9e:	4653      	mov	r3, sl
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	469a      	mov	sl, r3
 8006ba4:	4599      	cmp	r9, r3
 8006ba6:	4180      	sbcs	r0, r0
 8006ba8:	2301      	movs	r3, #1
 8006baa:	4398      	bics	r0, r3
 8006bac:	4b8d      	ldr	r3, [pc, #564]	; (8006de4 <acc_cpd_linear_sweep_load_program+0x854>)
 8006bae:	4651      	mov	r1, sl
 8006bb0:	469c      	mov	ip, r3
 8006bb2:	4460      	add	r0, ip
 8006bb4:	f00a f820 	bl	8010bf8 <__aeabi_uidivmod>
 8006bb8:	4688      	mov	r8, r1
 8006bba:	2900      	cmp	r1, #0
 8006bbc:	d002      	beq.n	8006bc4 <acc_cpd_linear_sweep_load_program+0x634>
 8006bbe:	4653      	mov	r3, sl
 8006bc0:	1a5b      	subs	r3, r3, r1
 8006bc2:	4698      	mov	r8, r3
 8006bc4:	239c      	movs	r3, #156	; 0x9c
 8006bc6:	469a      	mov	sl, r3
 8006bc8:	44ba      	add	sl, r7
 8006bca:	4653      	mov	r3, sl
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	0032      	movs	r2, r6
 8006bd0:	4443      	add	r3, r8
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	4699      	mov	r9, r3
 8006bd6:	231f      	movs	r3, #31
 8006bd8:	0029      	movs	r1, r5
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	0020      	movs	r0, r4
 8006bde:	4b80      	ldr	r3, [pc, #512]	; (8006de0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006be0:	f008 fc66 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006be4:	4653      	mov	r3, sl
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d019      	beq.n	8006c20 <acc_cpd_linear_sweep_load_program+0x690>
 8006bec:	4b7e      	ldr	r3, [pc, #504]	; (8006de8 <acc_cpd_linear_sweep_load_program+0x858>)
 8006bee:	001a      	movs	r2, r3
 8006bf0:	3230      	adds	r2, #48	; 0x30
 8006bf2:	7812      	ldrb	r2, [r2, #0]
 8006bf4:	2a01      	cmp	r2, #1
 8006bf6:	d906      	bls.n	8006c06 <acc_cpd_linear_sweep_load_program+0x676>
 8006bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfa:	4a7c      	ldr	r2, [pc, #496]	; (8006dec <acc_cpd_linear_sweep_load_program+0x85c>)
 8006bfc:	469a      	mov	sl, r3
 8006bfe:	497c      	ldr	r1, [pc, #496]	; (8006df0 <acc_cpd_linear_sweep_load_program+0x860>)
 8006c00:	4643      	mov	r3, r8
 8006c02:	2002      	movs	r0, #2
 8006c04:	47d0      	blx	sl
 8006c06:	4b78      	ldr	r3, [pc, #480]	; (8006de8 <acc_cpd_linear_sweep_load_program+0x858>)
 8006c08:	001a      	movs	r2, r3
 8006c0a:	3230      	adds	r2, #48	; 0x30
 8006c0c:	7812      	ldrb	r2, [r2, #0]
 8006c0e:	2a01      	cmp	r2, #1
 8006c10:	d906      	bls.n	8006c20 <acc_cpd_linear_sweep_load_program+0x690>
 8006c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c14:	4a77      	ldr	r2, [pc, #476]	; (8006df4 <acc_cpd_linear_sweep_load_program+0x864>)
 8006c16:	4698      	mov	r8, r3
 8006c18:	4975      	ldr	r1, [pc, #468]	; (8006df0 <acc_cpd_linear_sweep_load_program+0x860>)
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	2002      	movs	r0, #2
 8006c1e:	47c0      	blx	r8
 8006c20:	003b      	movs	r3, r7
 8006c22:	3390      	adds	r3, #144	; 0x90
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2008      	movs	r0, #8
 8006c28:	4699      	mov	r9, r3
 8006c2a:	2b05      	cmp	r3, #5
 8006c2c:	d800      	bhi.n	8006c30 <acc_cpd_linear_sweep_load_program+0x6a0>
 8006c2e:	3002      	adds	r0, #2
 8006c30:	4649      	mov	r1, r9
 8006c32:	f009 ffe1 	bl	8010bf8 <__aeabi_uidivmod>
 8006c36:	4688      	mov	r8, r1
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	d002      	beq.n	8006c42 <acc_cpd_linear_sweep_load_program+0x6b2>
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	1a5b      	subs	r3, r3, r1
 8006c40:	4698      	mov	r8, r3
 8006c42:	23a0      	movs	r3, #160	; 0xa0
 8006c44:	469a      	mov	sl, r3
 8006c46:	44ba      	add	sl, r7
 8006c48:	4653      	mov	r3, sl
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	0032      	movs	r2, r6
 8006c4e:	4443      	add	r3, r8
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	4699      	mov	r9, r3
 8006c54:	2366      	movs	r3, #102	; 0x66
 8006c56:	0029      	movs	r1, r5
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	0020      	movs	r0, r4
 8006c5c:	4b60      	ldr	r3, [pc, #384]	; (8006de0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006c5e:	f008 fc27 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006c62:	4653      	mov	r3, sl
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d019      	beq.n	8006c9e <acc_cpd_linear_sweep_load_program+0x70e>
 8006c6a:	4b5f      	ldr	r3, [pc, #380]	; (8006de8 <acc_cpd_linear_sweep_load_program+0x858>)
 8006c6c:	001a      	movs	r2, r3
 8006c6e:	3230      	adds	r2, #48	; 0x30
 8006c70:	7812      	ldrb	r2, [r2, #0]
 8006c72:	2a01      	cmp	r2, #1
 8006c74:	d906      	bls.n	8006c84 <acc_cpd_linear_sweep_load_program+0x6f4>
 8006c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c78:	4a5f      	ldr	r2, [pc, #380]	; (8006df8 <acc_cpd_linear_sweep_load_program+0x868>)
 8006c7a:	469a      	mov	sl, r3
 8006c7c:	495c      	ldr	r1, [pc, #368]	; (8006df0 <acc_cpd_linear_sweep_load_program+0x860>)
 8006c7e:	4643      	mov	r3, r8
 8006c80:	2002      	movs	r0, #2
 8006c82:	47d0      	blx	sl
 8006c84:	4b58      	ldr	r3, [pc, #352]	; (8006de8 <acc_cpd_linear_sweep_load_program+0x858>)
 8006c86:	001a      	movs	r2, r3
 8006c88:	3230      	adds	r2, #48	; 0x30
 8006c8a:	7812      	ldrb	r2, [r2, #0]
 8006c8c:	2a01      	cmp	r2, #1
 8006c8e:	d906      	bls.n	8006c9e <acc_cpd_linear_sweep_load_program+0x70e>
 8006c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c92:	4a5a      	ldr	r2, [pc, #360]	; (8006dfc <acc_cpd_linear_sweep_load_program+0x86c>)
 8006c94:	4698      	mov	r8, r3
 8006c96:	4956      	ldr	r1, [pc, #344]	; (8006df0 <acc_cpd_linear_sweep_load_program+0x860>)
 8006c98:	464b      	mov	r3, r9
 8006c9a:	2002      	movs	r0, #2
 8006c9c:	47c0      	blx	r8
 8006c9e:	003b      	movs	r3, r7
 8006ca0:	338d      	adds	r3, #141	; 0x8d
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d014      	beq.n	8006cd2 <acc_cpd_linear_sweep_load_program+0x742>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9301      	str	r3, [sp, #4]
 8006cac:	333b      	adds	r3, #59	; 0x3b
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	0032      	movs	r2, r6
 8006cb2:	4b4b      	ldr	r3, [pc, #300]	; (8006de0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006cb4:	0029      	movs	r1, r5
 8006cb6:	0020      	movs	r0, r4
 8006cb8:	f008 fbfa 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006cbc:	4b4a      	ldr	r3, [pc, #296]	; (8006de8 <acc_cpd_linear_sweep_load_program+0x858>)
 8006cbe:	001a      	movs	r2, r3
 8006cc0:	3230      	adds	r2, #48	; 0x30
 8006cc2:	7812      	ldrb	r2, [r2, #0]
 8006cc4:	2a01      	cmp	r2, #1
 8006cc6:	d904      	bls.n	8006cd2 <acc_cpd_linear_sweep_load_program+0x742>
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	4a4d      	ldr	r2, [pc, #308]	; (8006e00 <acc_cpd_linear_sweep_load_program+0x870>)
 8006ccc:	4948      	ldr	r1, [pc, #288]	; (8006df0 <acc_cpd_linear_sweep_load_program+0x860>)
 8006cce:	2002      	movs	r0, #2
 8006cd0:	4798      	blx	r3
 8006cd2:	003b      	movs	r3, r7
 8006cd4:	33a4      	adds	r3, #164	; 0xa4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	0032      	movs	r2, r6
 8006cda:	4699      	mov	r9, r3
 8006cdc:	4b40      	ldr	r3, [pc, #256]	; (8006de0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006cde:	0029      	movs	r1, r5
 8006ce0:	4698      	mov	r8, r3
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	2306      	movs	r3, #6
 8006cea:	0020      	movs	r0, r4
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	4643      	mov	r3, r8
 8006cf0:	f008 fbde 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	2004      	movs	r0, #4
 8006cf8:	f009 fef8 	bl	8010aec <__udivsi3>
 8006cfc:	2363      	movs	r3, #99	; 0x63
 8006cfe:	3801      	subs	r0, #1
 8006d00:	9001      	str	r0, [sp, #4]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	0032      	movs	r2, r6
 8006d06:	4643      	mov	r3, r8
 8006d08:	0029      	movs	r1, r5
 8006d0a:	0020      	movs	r0, r4
 8006d0c:	f008 fbd0 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006d10:	003b      	movs	r3, r7
 8006d12:	33a8      	adds	r3, #168	; 0xa8
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	0032      	movs	r2, r6
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	2361      	movs	r3, #97	; 0x61
 8006d1c:	0029      	movs	r1, r5
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	0020      	movs	r0, r4
 8006d22:	4643      	mov	r3, r8
 8006d24:	f008 fbc4 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006d28:	23ad      	movs	r3, #173	; 0xad
 8006d2a:	4699      	mov	r9, r3
 8006d2c:	44b9      	add	r9, r7
 8006d2e:	464b      	mov	r3, r9
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	0032      	movs	r2, r6
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	2346      	movs	r3, #70	; 0x46
 8006d38:	0029      	movs	r1, r5
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	0020      	movs	r0, r4
 8006d3e:	4643      	mov	r3, r8
 8006d40:	f008 fbb6 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006d44:	464b      	mov	r3, r9
 8006d46:	781a      	ldrb	r2, [r3, #0]
 8006d48:	2323      	movs	r3, #35	; 0x23
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	d100      	bne.n	8006d50 <acc_cpd_linear_sweep_load_program+0x7c0>
 8006d4e:	e09d      	b.n	8006e8c <acc_cpd_linear_sweep_load_program+0x8fc>
 8006d50:	2203      	movs	r2, #3
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	9201      	str	r2, [sp, #4]
 8006d56:	4643      	mov	r3, r8
 8006d58:	0032      	movs	r2, r6
 8006d5a:	0029      	movs	r1, r5
 8006d5c:	0020      	movs	r0, r4
 8006d5e:	f008 fba7 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006d62:	2300      	movs	r3, #0
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	337d      	adds	r3, #125	; 0x7d
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	0032      	movs	r2, r6
 8006d6c:	4643      	mov	r3, r8
 8006d6e:	0029      	movs	r1, r5
 8006d70:	0020      	movs	r0, r4
 8006d72:	f008 fb9d 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006d76:	2301      	movs	r3, #1
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	3380      	adds	r3, #128	; 0x80
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	0032      	movs	r2, r6
 8006d80:	4643      	mov	r3, r8
 8006d82:	0029      	movs	r1, r5
 8006d84:	0020      	movs	r0, r4
 8006d86:	f008 fb93 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	3373      	adds	r3, #115	; 0x73
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	0032      	movs	r2, r6
 8006d94:	4643      	mov	r3, r8
 8006d96:	0029      	movs	r1, r5
 8006d98:	0020      	movs	r0, r4
 8006d9a:	f008 fb89 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006d9e:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006da0:	0032      	movs	r2, r6
 8006da2:	4698      	mov	r8, r3
 8006da4:	003b      	movs	r3, r7
 8006da6:	33ac      	adds	r3, #172	; 0xac
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	0029      	movs	r1, r5
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	2352      	movs	r3, #82	; 0x52
 8006db0:	0020      	movs	r0, r4
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	4643      	mov	r3, r8
 8006db6:	f008 fb7b 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006dba:	003b      	movs	r3, r7
 8006dbc:	33b0      	adds	r3, #176	; 0xb0
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	4910      	ldr	r1, [pc, #64]	; (8006e04 <acc_cpd_linear_sweep_load_program+0x874>)
 8006dc2:	f009 fb61 	bl	8010488 <__aeabi_fmul>
 8006dc6:	f00a f89f 	bl	8010f08 <__aeabi_f2uiz>
 8006dca:	2368      	movs	r3, #104	; 0x68
 8006dcc:	3801      	subs	r0, #1
 8006dce:	b280      	uxth	r0, r0
 8006dd0:	9001      	str	r0, [sp, #4]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	0032      	movs	r2, r6
 8006dd6:	4643      	mov	r3, r8
 8006dd8:	0029      	movs	r1, r5
 8006dda:	0020      	movs	r0, r4
 8006ddc:	e014      	b.n	8006e08 <acc_cpd_linear_sweep_load_program+0x878>
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	08018434 	.word	0x08018434
 8006de4:	000004e4 	.word	0x000004e4
 8006de8:	200004a8 	.word	0x200004a8
 8006dec:	0801cf2a 	.word	0x0801cf2a
 8006df0:	0801cae5 	.word	0x0801cae5
 8006df4:	0801cf61 	.word	0x0801cf61
 8006df8:	0801cf98 	.word	0x0801cf98
 8006dfc:	0801cfbd 	.word	0x0801cfbd
 8006e00:	0801cfe2 	.word	0x0801cfe2
 8006e04:	3751b717 	.word	0x3751b717
 8006e08:	f008 fb52 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006e0c:	23b4      	movs	r3, #180	; 0xb4
 8006e0e:	4699      	mov	r9, r3
 8006e10:	44b9      	add	r9, r7
 8006e12:	464b      	mov	r3, r9
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	0032      	movs	r2, r6
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	2353      	movs	r3, #83	; 0x53
 8006e1c:	0029      	movs	r1, r5
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	0020      	movs	r0, r4
 8006e22:	4643      	mov	r3, r8
 8006e24:	f008 fb44 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006e28:	464b      	mov	r3, r9
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00b      	beq.n	8006e48 <acc_cpd_linear_sweep_load_program+0x8b8>
 8006e30:	003b      	movs	r3, r7
 8006e32:	33b8      	adds	r3, #184	; 0xb8
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	0032      	movs	r2, r6
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	2332      	movs	r3, #50	; 0x32
 8006e3c:	0029      	movs	r1, r5
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	0020      	movs	r0, r4
 8006e42:	4643      	mov	r3, r8
 8006e44:	f008 fb34 	bl	800f4b0 <acc_confprogram_patch_offset>
 8006e48:	466b      	mov	r3, sp
 8006e4a:	9a08      	ldr	r2, [sp, #32]
 8006e4c:	8b19      	ldrh	r1, [r3, #24]
 8006e4e:	9805      	ldr	r0, [sp, #20]
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	f7ff fb62 	bl	800651a <acc_sensor_r2_load_confmem>
 8006e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e58:	469c      	mov	ip, r3
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <acc_cpd_linear_sweep_load_program+0x900>)
 8006e5c:	44e3      	add	fp, ip
 8006e5e:	459b      	cmp	fp, r3
 8006e60:	d801      	bhi.n	8006e66 <acc_cpd_linear_sweep_load_program+0x8d6>
 8006e62:	f7ff fbc8 	bl	80065f6 <acc_cpd_linear_sweep_load_program+0x66>
 8006e66:	4b0b      	ldr	r3, [pc, #44]	; (8006e94 <acc_cpd_linear_sweep_load_program+0x904>)
 8006e68:	001a      	movs	r2, r3
 8006e6a:	3230      	adds	r2, #48	; 0x30
 8006e6c:	7812      	ldrb	r2, [r2, #0]
 8006e6e:	2a03      	cmp	r2, #3
 8006e70:	d904      	bls.n	8006e7c <acc_cpd_linear_sweep_load_program+0x8ec>
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	4a08      	ldr	r2, [pc, #32]	; (8006e98 <acc_cpd_linear_sweep_load_program+0x908>)
 8006e76:	4909      	ldr	r1, [pc, #36]	; (8006e9c <acc_cpd_linear_sweep_load_program+0x90c>)
 8006e78:	2004      	movs	r0, #4
 8006e7a:	4798      	blx	r3
 8006e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e7e:	b00f      	add	sp, #60	; 0x3c
 8006e80:	bc3c      	pop	{r2, r3, r4, r5}
 8006e82:	4690      	mov	r8, r2
 8006e84:	4699      	mov	r9, r3
 8006e86:	46a2      	mov	sl, r4
 8006e88:	46ab      	mov	fp, r5
 8006e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e8c:	9201      	str	r2, [sp, #4]
 8006e8e:	e77f      	b.n	8006d90 <acc_cpd_linear_sweep_load_program+0x800>
 8006e90:	0000070f 	.word	0x0000070f
 8006e94:	200004a8 	.word	0x200004a8
 8006e98:	0801cffc 	.word	0x0801cffc
 8006e9c:	0801cae5 	.word	0x0801cae5

08006ea0 <start.lto_priv.158>:
 8006ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ea2:	464f      	mov	r7, r9
 8006ea4:	46d6      	mov	lr, sl
 8006ea6:	4646      	mov	r6, r8
 8006ea8:	6944      	ldr	r4, [r0, #20]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	0022      	movs	r2, r4
 8006eae:	b5c0      	push	{r6, r7, lr}
 8006eb0:	32c2      	adds	r2, #194	; 0xc2
 8006eb2:	8013      	strh	r3, [r2, #0]
 8006eb4:	8053      	strh	r3, [r2, #2]
 8006eb6:	8093      	strh	r3, [r2, #4]
 8006eb8:	3a16      	subs	r2, #22
 8006eba:	7812      	ldrb	r2, [r2, #0]
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	4692      	mov	sl, r2
 8006ec0:	0022      	movs	r2, r4
 8006ec2:	32b4      	adds	r2, #180	; 0xb4
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	0007      	movs	r7, r0
 8006ec8:	4691      	mov	r9, r2
 8006eca:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006ecc:	000d      	movs	r5, r1
 8006ece:	4690      	mov	r8, r2
 8006ed0:	464a      	mov	r2, r9
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d003      	beq.n	8006ede <start.lto_priv.158+0x3e>
 8006ed6:	4652      	mov	r2, sl
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d000      	beq.n	8006ede <start.lto_priv.158+0x3e>
 8006edc:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006ede:	0038      	movs	r0, r7
 8006ee0:	f7fe fa5a 	bl	8005398 <coarse_count_for_next_package>
 8006ee4:	0023      	movs	r3, r4
 8006ee6:	4e2c      	ldr	r6, [pc, #176]	; (8006f98 <start.lto_priv.158+0xf8>)
 8006ee8:	33c8      	adds	r3, #200	; 0xc8
 8006eea:	6018      	str	r0, [r3, #0]
 8006eec:	0033      	movs	r3, r6
 8006eee:	3330      	adds	r3, #48	; 0x30
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d904      	bls.n	8006f00 <start.lto_priv.158+0x60>
 8006ef6:	4a29      	ldr	r2, [pc, #164]	; (8006f9c <start.lto_priv.158+0xfc>)
 8006ef8:	4929      	ldr	r1, [pc, #164]	; (8006fa0 <start.lto_priv.158+0x100>)
 8006efa:	2004      	movs	r0, #4
 8006efc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006efe:	4798      	blx	r3
 8006f00:	cd06      	ldmia	r5!, {r1, r2}
 8006f02:	0023      	movs	r3, r4
 8006f04:	6838      	ldr	r0, [r7, #0]
 8006f06:	f7ff fb43 	bl	8006590 <acc_cpd_linear_sweep_load_program>
 8006f0a:	1e05      	subs	r5, r0, #0
 8006f0c:	d10a      	bne.n	8006f24 <start.lto_priv.158+0x84>
 8006f0e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006f10:	4a24      	ldr	r2, [pc, #144]	; (8006fa4 <start.lto_priv.158+0x104>)
 8006f12:	4923      	ldr	r1, [pc, #140]	; (8006fa0 <start.lto_priv.158+0x100>)
 8006f14:	4798      	blx	r3
 8006f16:	0028      	movs	r0, r5
 8006f18:	b004      	add	sp, #16
 8006f1a:	bc1c      	pop	{r2, r3, r4}
 8006f1c:	4690      	mov	r8, r2
 8006f1e:	4699      	mov	r9, r3
 8006f20:	46a2      	mov	sl, r4
 8006f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f24:	4920      	ldr	r1, [pc, #128]	; (8006fa8 <start.lto_priv.158+0x108>)
 8006f26:	6838      	ldr	r0, [r7, #0]
 8006f28:	f7fe fab7 	bl	800549a <acc_sensor_protocol_r2_run_program>
 8006f2c:	1e05      	subs	r5, r0, #0
 8006f2e:	d101      	bne.n	8006f34 <start.lto_priv.158+0x94>
 8006f30:	2500      	movs	r5, #0
 8006f32:	e7f0      	b.n	8006f16 <start.lto_priv.158+0x76>
 8006f34:	4653      	mov	r3, sl
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d023      	beq.n	8006f82 <start.lto_priv.158+0xe2>
 8006f3a:	6939      	ldr	r1, [r7, #16]
 8006f3c:	6838      	ldr	r0, [r7, #0]
 8006f3e:	f7fb fb41 	bl	80025c4 <acc_sensor_protocol_r2_wait_for_sync_start>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d0f4      	beq.n	8006f30 <start.lto_priv.158+0x90>
 8006f46:	0033      	movs	r3, r6
 8006f48:	3330      	adds	r3, #48	; 0x30
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d904      	bls.n	8006f5a <start.lto_priv.158+0xba>
 8006f50:	4a16      	ldr	r2, [pc, #88]	; (8006fac <start.lto_priv.158+0x10c>)
 8006f52:	4913      	ldr	r1, [pc, #76]	; (8006fa0 <start.lto_priv.158+0x100>)
 8006f54:	2002      	movs	r0, #2
 8006f56:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006f58:	4798      	blx	r3
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d010      	beq.n	8006f82 <start.lto_priv.158+0xe2>
 8006f60:	2300      	movs	r3, #0
 8006f62:	466a      	mov	r2, sp
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	7013      	strb	r3, [r2, #0]
 8006f68:	7053      	strb	r3, [r2, #1]
 8006f6a:	9302      	str	r3, [sp, #8]
 8006f6c:	4643      	mov	r3, r8
 8006f6e:	2201      	movs	r2, #1
 8006f70:	4669      	mov	r1, sp
 8006f72:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006f74:	6838      	ldr	r0, [r7, #0]
 8006f76:	708a      	strb	r2, [r1, #2]
 8006f78:	9303      	str	r3, [sp, #12]
 8006f7a:	f7fa ff15 	bl	8001da8 <acc_cpd_linear_sweep_update_program>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d0d6      	beq.n	8006f30 <start.lto_priv.158+0x90>
 8006f82:	0033      	movs	r3, r6
 8006f84:	3330      	adds	r3, #48	; 0x30
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d9c4      	bls.n	8006f16 <start.lto_priv.158+0x76>
 8006f8c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006f8e:	4a08      	ldr	r2, [pc, #32]	; (8006fb0 <start.lto_priv.158+0x110>)
 8006f90:	4903      	ldr	r1, [pc, #12]	; (8006fa0 <start.lto_priv.158+0x100>)
 8006f92:	2004      	movs	r0, #4
 8006f94:	4798      	blx	r3
 8006f96:	e7be      	b.n	8006f16 <start.lto_priv.158+0x76>
 8006f98:	200004a8 	.word	0x200004a8
 8006f9c:	0801d01f 	.word	0x0801d01f
 8006fa0:	0801d044 	.word	0x0801d044
 8006fa4:	0801d058 	.word	0x0801d058
 8006fa8:	0000023a 	.word	0x0000023a
 8006fac:	0801d072 	.word	0x0801d072
 8006fb0:	0801d096 	.word	0x0801d096

08006fb4 <measure_noise.lto_priv.145>:
 8006fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fb6:	464e      	mov	r6, r9
 8006fb8:	46de      	mov	lr, fp
 8006fba:	4657      	mov	r7, sl
 8006fbc:	4645      	mov	r5, r8
 8006fbe:	b5e0      	push	{r5, r6, r7, lr}
 8006fc0:	4e4a      	ldr	r6, [pc, #296]	; (80070ec <measure_noise.lto_priv.145+0x138>)
 8006fc2:	b0b9      	sub	sp, #228	; 0xe4
 8006fc4:	0033      	movs	r3, r6
 8006fc6:	9201      	str	r2, [sp, #4]
 8006fc8:	3330      	adds	r3, #48	; 0x30
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	0004      	movs	r4, r0
 8006fce:	4689      	mov	r9, r1
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d904      	bls.n	8006fde <measure_noise.lto_priv.145+0x2a>
 8006fd4:	4a46      	ldr	r2, [pc, #280]	; (80070f0 <measure_noise.lto_priv.145+0x13c>)
 8006fd6:	4947      	ldr	r1, [pc, #284]	; (80070f4 <measure_noise.lto_priv.145+0x140>)
 8006fd8:	2004      	movs	r0, #4
 8006fda:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006fdc:	4798      	blx	r3
 8006fde:	6967      	ldr	r7, [r4, #20]
 8006fe0:	22bc      	movs	r2, #188	; 0xbc
 8006fe2:	0039      	movs	r1, r7
 8006fe4:	a809      	add	r0, sp, #36	; 0x24
 8006fe6:	6825      	ldr	r5, [r4, #0]
 8006fe8:	f00e ff34 	bl	8015e54 <memcpy>
 8006fec:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8006fee:	2400      	movs	r4, #0
 8006ff0:	4698      	mov	r8, r3
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	932e      	str	r3, [sp, #184]	; 0xb8
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	931f      	str	r3, [sp, #124]	; 0x7c
 8006ffe:	ab34      	add	r3, sp, #208	; 0xd0
 8007000:	701c      	strb	r4, [r3, #0]
 8007002:	003b      	movs	r3, r7
 8007004:	922f      	str	r2, [sp, #188]	; 0xbc
 8007006:	4649      	mov	r1, r9
 8007008:	464a      	mov	r2, r9
 800700a:	9424      	str	r4, [sp, #144]	; 0x90
 800700c:	941e      	str	r4, [sp, #120]	; 0x78
 800700e:	9436      	str	r4, [sp, #216]	; 0xd8
 8007010:	33cc      	adds	r3, #204	; 0xcc
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	6852      	ldr	r2, [r2, #4]
 8007016:	6809      	ldr	r1, [r1, #0]
 8007018:	469b      	mov	fp, r3
 800701a:	0028      	movs	r0, r5
 800701c:	ab09      	add	r3, sp, #36	; 0x24
 800701e:	f7ff fab7 	bl	8006590 <acc_cpd_linear_sweep_load_program>
 8007022:	4935      	ldr	r1, [pc, #212]	; (80070f8 <measure_noise.lto_priv.145+0x144>)
 8007024:	0028      	movs	r0, r5
 8007026:	f7fe fa38 	bl	800549a <acc_sensor_protocol_r2_run_program>
 800702a:	21fa      	movs	r1, #250	; 0xfa
 800702c:	aa02      	add	r2, sp, #8
 800702e:	00c9      	lsls	r1, r1, #3
 8007030:	0028      	movs	r0, r5
 8007032:	f008 fdf1 	bl	800fc18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8007036:	4682      	mov	sl, r0
 8007038:	42a0      	cmp	r0, r4
 800703a:	d040      	beq.n	80070be <measure_noise.lto_priv.145+0x10a>
 800703c:	4643      	mov	r3, r8
 800703e:	049b      	lsls	r3, r3, #18
 8007040:	0c1b      	lsrs	r3, r3, #16
 8007042:	4698      	mov	r8, r3
 8007044:	4659      	mov	r1, fp
 8007046:	207c      	movs	r0, #124	; 0x7c
 8007048:	f009 fd50 	bl	8010aec <__udivsi3>
 800704c:	4643      	mov	r3, r8
 800704e:	4343      	muls	r3, r0
 8007050:	4698      	mov	r8, r3
 8007052:	464b      	mov	r3, r9
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	a903      	add	r1, sp, #12
 8007058:	4699      	mov	r9, r3
 800705a:	0038      	movs	r0, r7
 800705c:	f008 ff52 	bl	800ff04 <acc_cpd_linear_sweep_get_info>
 8007060:	9b03      	ldr	r3, [sp, #12]
 8007062:	4649      	mov	r1, r9
 8007064:	4443      	add	r3, r8
 8007066:	001a      	movs	r2, r3
 8007068:	0028      	movs	r0, r5
 800706a:	f7fa ff05 	bl	8001e78 <acc_sensor_protocol_r2_transfer_data>
 800706e:	4681      	mov	r9, r0
 8007070:	0028      	movs	r0, r5
 8007072:	f008 fe83 	bl	800fd7c <acc_sensor_protocol_r2_stop.constprop.25>
 8007076:	0038      	movs	r0, r7
 8007078:	a903      	add	r1, sp, #12
 800707a:	f008 ff43 	bl	800ff04 <acc_cpd_linear_sweep_get_info>
 800707e:	9b03      	ldr	r3, [sp, #12]
 8007080:	0020      	movs	r0, r4
 8007082:	005d      	lsls	r5, r3, #1
 8007084:	230e      	movs	r3, #14
 8007086:	444d      	add	r5, r9
 8007088:	4598      	cmp	r8, r3
 800708a:	d820      	bhi.n	80070ce <measure_noise.lto_priv.145+0x11a>
 800708c:	4644      	mov	r4, r8
 800708e:	3c0e      	subs	r4, #14
 8007090:	0021      	movs	r1, r4
 8007092:	f009 fd2b 	bl	8010aec <__udivsi3>
 8007096:	220e      	movs	r2, #14
 8007098:	0001      	movs	r1, r0
 800709a:	2000      	movs	r0, #0
 800709c:	4590      	cmp	r8, r2
 800709e:	d81b      	bhi.n	80070d8 <measure_noise.lto_priv.145+0x124>
 80070a0:	0021      	movs	r1, r4
 80070a2:	f009 fd23 	bl	8010aec <__udivsi3>
 80070a6:	9b01      	ldr	r3, [sp, #4]
 80070a8:	8018      	strh	r0, [r3, #0]
 80070aa:	0033      	movs	r3, r6
 80070ac:	3330      	adds	r3, #48	; 0x30
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d904      	bls.n	80070be <measure_noise.lto_priv.145+0x10a>
 80070b4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80070b6:	4a11      	ldr	r2, [pc, #68]	; (80070fc <measure_noise.lto_priv.145+0x148>)
 80070b8:	490e      	ldr	r1, [pc, #56]	; (80070f4 <measure_noise.lto_priv.145+0x140>)
 80070ba:	2004      	movs	r0, #4
 80070bc:	4798      	blx	r3
 80070be:	4650      	mov	r0, sl
 80070c0:	b039      	add	sp, #228	; 0xe4
 80070c2:	bc3c      	pop	{r2, r3, r4, r5}
 80070c4:	4690      	mov	r8, r2
 80070c6:	4699      	mov	r9, r3
 80070c8:	46a2      	mov	sl, r4
 80070ca:	46ab      	mov	fp, r5
 80070cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ce:	005a      	lsls	r2, r3, #1
 80070d0:	5aaa      	ldrh	r2, [r5, r2]
 80070d2:	3301      	adds	r3, #1
 80070d4:	1880      	adds	r0, r0, r2
 80070d6:	e7d7      	b.n	8007088 <measure_noise.lto_priv.145+0xd4>
 80070d8:	0053      	lsls	r3, r2, #1
 80070da:	5aeb      	ldrh	r3, [r5, r3]
 80070dc:	3201      	adds	r2, #1
 80070de:	1a5b      	subs	r3, r3, r1
 80070e0:	17df      	asrs	r7, r3, #31
 80070e2:	19db      	adds	r3, r3, r7
 80070e4:	407b      	eors	r3, r7
 80070e6:	18c0      	adds	r0, r0, r3
 80070e8:	e7d8      	b.n	800709c <measure_noise.lto_priv.145+0xe8>
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	200004a8 	.word	0x200004a8
 80070f0:	0801d0b9 	.word	0x0801d0b9
 80070f4:	0801d044 	.word	0x0801d044
 80070f8:	0000023a 	.word	0x0000023a
 80070fc:	0801d0da 	.word	0x0801d0da

08007100 <acc_cpd_cbank_and_vana_calibration>:
 8007100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007102:	46de      	mov	lr, fp
 8007104:	4657      	mov	r7, sl
 8007106:	4645      	mov	r5, r8
 8007108:	464e      	mov	r6, r9
 800710a:	0014      	movs	r4, r2
 800710c:	b5e0      	push	{r5, r6, r7, lr}
 800710e:	2500      	movs	r5, #0
 8007110:	b089      	sub	sp, #36	; 0x24
 8007112:	469b      	mov	fp, r3
 8007114:	ab07      	add	r3, sp, #28
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	9003      	str	r0, [sp, #12]
 800711a:	9104      	str	r1, [sp, #16]
 800711c:	000a      	movs	r2, r1
 800711e:	ab06      	add	r3, sp, #24
 8007120:	0001      	movs	r1, r0
 8007122:	6820      	ldr	r0, [r4, #0]
 8007124:	9506      	str	r5, [sp, #24]
 8007126:	9507      	str	r5, [sp, #28]
 8007128:	f008 fe6e 	bl	800fe08 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 800712c:	0007      	movs	r7, r0
 800712e:	42a8      	cmp	r0, r5
 8007130:	d10c      	bne.n	800714c <acc_cpd_cbank_and_vana_calibration+0x4c>
 8007132:	4bbc      	ldr	r3, [pc, #752]	; (8007424 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8007134:	4abc      	ldr	r2, [pc, #752]	; (8007428 <acc_cpd_cbank_and_vana_calibration+0x328>)
 8007136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007138:	49bc      	ldr	r1, [pc, #752]	; (800742c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800713a:	4798      	blx	r3
 800713c:	0038      	movs	r0, r7
 800713e:	b009      	add	sp, #36	; 0x24
 8007140:	bc3c      	pop	{r2, r3, r4, r5}
 8007142:	4690      	mov	r8, r2
 8007144:	4699      	mov	r9, r3
 8007146:	46a2      	mov	sl, r4
 8007148:	46ab      	mov	fp, r5
 800714a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800714c:	4bb8      	ldr	r3, [pc, #736]	; (8007430 <acc_cpd_cbank_and_vana_calibration+0x330>)
 800714e:	9a07      	ldr	r2, [sp, #28]
 8007150:	9f06      	ldr	r7, [sp, #24]
 8007152:	1b5b      	subs	r3, r3, r5
 8007154:	4690      	mov	r8, r2
 8007156:	429a      	cmp	r2, r3
 8007158:	d900      	bls.n	800715c <acc_cpd_cbank_and_vana_calibration+0x5c>
 800715a:	4698      	mov	r8, r3
 800715c:	086b      	lsrs	r3, r5, #1
 800715e:	9305      	str	r3, [sp, #20]
 8007160:	4643      	mov	r3, r8
 8007162:	085a      	lsrs	r2, r3, #1
 8007164:	086b      	lsrs	r3, r5, #1
 8007166:	0098      	lsls	r0, r3, #2
 8007168:	4bb2      	ldr	r3, [pc, #712]	; (8007434 <acc_cpd_cbank_and_vana_calibration+0x334>)
 800716a:	0039      	movs	r1, r7
 800716c:	469c      	mov	ip, r3
 800716e:	4460      	add	r0, ip
 8007170:	f008 f956 	bl	800f420 <acc_confprogram_copy>
 8007174:	b2ab      	uxth	r3, r5
 8007176:	4699      	mov	r9, r3
 8007178:	4643      	mov	r3, r8
 800717a:	b29b      	uxth	r3, r3
 800717c:	469a      	mov	sl, r3
 800717e:	6863      	ldr	r3, [r4, #4]
 8007180:	4ead      	ldr	r6, [pc, #692]	; (8007438 <acc_cpd_cbank_and_vana_calibration+0x338>)
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	231b      	movs	r3, #27
 8007186:	4652      	mov	r2, sl
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	4649      	mov	r1, r9
 800718c:	0033      	movs	r3, r6
 800718e:	0038      	movs	r0, r7
 8007190:	f008 f98e 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007194:	68a3      	ldr	r3, [r4, #8]
 8007196:	4652      	mov	r2, sl
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	2319      	movs	r3, #25
 800719c:	4649      	mov	r1, r9
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	0038      	movs	r0, r7
 80071a2:	0033      	movs	r3, r6
 80071a4:	f008 f984 	bl	800f4b0 <acc_confprogram_patch_offset>
 80071a8:	68e3      	ldr	r3, [r4, #12]
 80071aa:	4652      	mov	r2, sl
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	231a      	movs	r3, #26
 80071b0:	4649      	mov	r1, r9
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	0038      	movs	r0, r7
 80071b6:	0033      	movs	r3, r6
 80071b8:	f008 f97a 	bl	800f4b0 <acc_confprogram_patch_offset>
 80071bc:	8a23      	ldrh	r3, [r4, #16]
 80071be:	4652      	mov	r2, sl
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	2317      	movs	r3, #23
 80071c4:	4649      	mov	r1, r9
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	0038      	movs	r0, r7
 80071ca:	0033      	movs	r3, r6
 80071cc:	f008 f970 	bl	800f4b0 <acc_confprogram_patch_offset>
 80071d0:	2310      	movs	r3, #16
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	2300      	movs	r3, #0
 80071d6:	4652      	mov	r2, sl
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	4649      	mov	r1, r9
 80071dc:	0033      	movs	r3, r6
 80071de:	0038      	movs	r0, r7
 80071e0:	f008 f966 	bl	800f4b0 <acc_confprogram_patch_offset>
 80071e4:	466b      	mov	r3, sp
 80071e6:	9a03      	ldr	r2, [sp, #12]
 80071e8:	8a99      	ldrh	r1, [r3, #20]
 80071ea:	6820      	ldr	r0, [r4, #0]
 80071ec:	4643      	mov	r3, r8
 80071ee:	f7ff f994 	bl	800651a <acc_sensor_r2_load_confmem>
 80071f2:	9b07      	ldr	r3, [sp, #28]
 80071f4:	469c      	mov	ip, r3
 80071f6:	4b91      	ldr	r3, [pc, #580]	; (800743c <acc_cpd_cbank_and_vana_calibration+0x33c>)
 80071f8:	4465      	add	r5, ip
 80071fa:	429d      	cmp	r5, r3
 80071fc:	d9a6      	bls.n	800714c <acc_cpd_cbank_and_vana_calibration+0x4c>
 80071fe:	2118      	movs	r1, #24
 8007200:	6820      	ldr	r0, [r4, #0]
 8007202:	f7fe f94a 	bl	800549a <acc_sensor_protocol_r2_run_program>
 8007206:	1e07      	subs	r7, r0, #0
 8007208:	d105      	bne.n	8007216 <acc_cpd_cbank_and_vana_calibration+0x116>
 800720a:	4b86      	ldr	r3, [pc, #536]	; (8007424 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800720c:	4a8c      	ldr	r2, [pc, #560]	; (8007440 <acc_cpd_cbank_and_vana_calibration+0x340>)
 800720e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007210:	4986      	ldr	r1, [pc, #536]	; (800742c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8007212:	4798      	blx	r3
 8007214:	e792      	b.n	800713c <acc_cpd_cbank_and_vana_calibration+0x3c>
 8007216:	488b      	ldr	r0, [pc, #556]	; (8007444 <acc_cpd_cbank_and_vana_calibration+0x344>)
 8007218:	f008 f9f9 	bl	800f60e <acc_diagnostic_log_set_scope>
 800721c:	6821      	ldr	r1, [r4, #0]
 800721e:	488a      	ldr	r0, [pc, #552]	; (8007448 <acc_cpd_cbank_and_vana_calibration+0x348>)
 8007220:	f008 f9f1 	bl	800f606 <acc_diagnostic_log_scalar>
 8007224:	2203      	movs	r2, #3
 8007226:	2100      	movs	r1, #0
 8007228:	4888      	ldr	r0, [pc, #544]	; (800744c <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800722a:	f008 f9ef 	bl	800f60c <acc_diagnostic_log_declare_parameter>
 800722e:	21fa      	movs	r1, #250	; 0xfa
 8007230:	6827      	ldr	r7, [r4, #0]
 8007232:	2300      	movs	r3, #0
 8007234:	2203      	movs	r2, #3
 8007236:	00c9      	lsls	r1, r1, #3
 8007238:	0038      	movs	r0, r7
 800723a:	f7fb fa59 	bl	80026f0 <acc_sensor_protocol_r2_wait_for_specific_event>
 800723e:	2800      	cmp	r0, #0
 8007240:	d04d      	beq.n	80072de <acc_cpd_cbank_and_vana_calibration+0x1de>
 8007242:	ad07      	add	r5, sp, #28
 8007244:	002a      	movs	r2, r5
 8007246:	219d      	movs	r1, #157	; 0x9d
 8007248:	0038      	movs	r0, r7
 800724a:	f008 fab5 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800724e:	2207      	movs	r2, #7
 8007250:	882b      	ldrh	r3, [r5, #0]
 8007252:	2006      	movs	r0, #6
 8007254:	4013      	ands	r3, r2
 8007256:	802b      	strh	r3, [r5, #0]
 8007258:	002a      	movs	r2, r5
 800725a:	2301      	movs	r3, #1
 800725c:	0039      	movs	r1, r7
 800725e:	f7f8 ff6b 	bl	8000138 <acc_probes_execute_uint16>
 8007262:	0038      	movs	r0, r7
 8007264:	f7fb fa24 	bl	80026b0 <acc_sensor_protocol_r2_ack_event>
 8007268:	2800      	cmp	r0, #0
 800726a:	d038      	beq.n	80072de <acc_cpd_cbank_and_vana_calibration+0x1de>
 800726c:	465b      	mov	r3, fp
 800726e:	882f      	ldrh	r7, [r5, #0]
 8007270:	601f      	str	r7, [r3, #0]
 8007272:	23c0      	movs	r3, #192	; 0xc0
 8007274:	6824      	ldr	r4, [r4, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	802b      	strh	r3, [r5, #0]
 800727a:	0020      	movs	r0, r4
 800727c:	f7fe f900 	bl	8005480 <acc_sensor_protocol_r2_is_sensor_running>
 8007280:	4680      	mov	r8, r0
 8007282:	2800      	cmp	r0, #0
 8007284:	d133      	bne.n	80072ee <acc_cpd_cbank_and_vana_calibration+0x1ee>
 8007286:	0032      	movs	r2, r6
 8007288:	2311      	movs	r3, #17
 800728a:	496a      	ldr	r1, [pc, #424]	; (8007434 <acc_cpd_cbank_and_vana_calibration+0x334>)
 800728c:	0020      	movs	r0, r4
 800728e:	9700      	str	r7, [sp, #0]
 8007290:	f005 fa1a 	bl	800c6c8 <acc_confprogram_live_patch.constprop.16>
 8007294:	4643      	mov	r3, r8
 8007296:	0032      	movs	r2, r6
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	4966      	ldr	r1, [pc, #408]	; (8007434 <acc_cpd_cbank_and_vana_calibration+0x334>)
 800729c:	2301      	movs	r3, #1
 800729e:	0020      	movs	r0, r4
 80072a0:	f005 fa12 	bl	800c6c8 <acc_confprogram_live_patch.constprop.16>
 80072a4:	4646      	mov	r6, r8
 80072a6:	5dab      	ldrb	r3, [r5, r6]
 80072a8:	4868      	ldr	r0, [pc, #416]	; (800744c <acc_cpd_cbank_and_vana_calibration+0x34c>)
 80072aa:	4698      	mov	r8, r3
 80072ac:	0019      	movs	r1, r3
 80072ae:	f008 f9ac 	bl	800f60a <acc_diagnostic_log_set_parameter>
 80072b2:	4643      	mov	r3, r8
 80072b4:	495f      	ldr	r1, [pc, #380]	; (8007434 <acc_cpd_cbank_and_vana_calibration+0x334>)
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	0020      	movs	r0, r4
 80072ba:	231f      	movs	r3, #31
 80072bc:	4a5e      	ldr	r2, [pc, #376]	; (8007438 <acc_cpd_cbank_and_vana_calibration+0x338>)
 80072be:	f005 fa03 	bl	800c6c8 <acc_confprogram_live_patch.constprop.16>
 80072c2:	21e8      	movs	r1, #232	; 0xe8
 80072c4:	0020      	movs	r0, r4
 80072c6:	0049      	lsls	r1, r1, #1
 80072c8:	f7fe f8e7 	bl	800549a <acc_sensor_protocol_r2_run_program>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d11d      	bne.n	800730c <acc_cpd_cbank_and_vana_calibration+0x20c>
 80072d0:	4b54      	ldr	r3, [pc, #336]	; (8007424 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80072d2:	4a5f      	ldr	r2, [pc, #380]	; (8007450 <acc_cpd_cbank_and_vana_calibration+0x350>)
 80072d4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80072d6:	4955      	ldr	r1, [pc, #340]	; (800742c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80072d8:	4643      	mov	r3, r8
 80072da:	47a0      	blx	r4
 80072dc:	e00e      	b.n	80072fc <acc_cpd_cbank_and_vana_calibration+0x1fc>
 80072de:	4b51      	ldr	r3, [pc, #324]	; (8007424 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80072e0:	4a5c      	ldr	r2, [pc, #368]	; (8007454 <acc_cpd_cbank_and_vana_calibration+0x354>)
 80072e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e4:	4951      	ldr	r1, [pc, #324]	; (800742c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80072e6:	2000      	movs	r0, #0
 80072e8:	4798      	blx	r3
 80072ea:	2700      	movs	r7, #0
 80072ec:	e726      	b.n	800713c <acc_cpd_cbank_and_vana_calibration+0x3c>
 80072ee:	4b4d      	ldr	r3, [pc, #308]	; (8007424 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80072f0:	4a59      	ldr	r2, [pc, #356]	; (8007458 <acc_cpd_cbank_and_vana_calibration+0x358>)
 80072f2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80072f4:	494d      	ldr	r1, [pc, #308]	; (800742c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80072f6:	0023      	movs	r3, r4
 80072f8:	2000      	movs	r0, #0
 80072fa:	47a8      	blx	r5
 80072fc:	4b49      	ldr	r3, [pc, #292]	; (8007424 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80072fe:	4a57      	ldr	r2, [pc, #348]	; (800745c <acc_cpd_cbank_and_vana_calibration+0x35c>)
 8007300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007302:	494a      	ldr	r1, [pc, #296]	; (800742c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8007304:	2000      	movs	r0, #0
 8007306:	4798      	blx	r3
 8007308:	2700      	movs	r7, #0
 800730a:	e717      	b.n	800713c <acc_cpd_cbank_and_vana_calibration+0x3c>
 800730c:	21fa      	movs	r1, #250	; 0xfa
 800730e:	2300      	movs	r3, #0
 8007310:	2209      	movs	r2, #9
 8007312:	00c9      	lsls	r1, r1, #3
 8007314:	0020      	movs	r0, r4
 8007316:	f7fb f9eb 	bl	80026f0 <acc_sensor_protocol_r2_wait_for_specific_event>
 800731a:	2800      	cmp	r0, #0
 800731c:	d008      	beq.n	8007330 <acc_cpd_cbank_and_vana_calibration+0x230>
 800731e:	9b04      	ldr	r3, [sp, #16]
 8007320:	2b25      	cmp	r3, #37	; 0x25
 8007322:	d80d      	bhi.n	8007340 <acc_cpd_cbank_and_vana_calibration+0x240>
 8007324:	4b3f      	ldr	r3, [pc, #252]	; (8007424 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8007326:	4a4e      	ldr	r2, [pc, #312]	; (8007460 <acc_cpd_cbank_and_vana_calibration+0x360>)
 8007328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732a:	4940      	ldr	r1, [pc, #256]	; (800742c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800732c:	2000      	movs	r0, #0
 800732e:	4798      	blx	r3
 8007330:	4b3c      	ldr	r3, [pc, #240]	; (8007424 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8007332:	4a4c      	ldr	r2, [pc, #304]	; (8007464 <acc_cpd_cbank_and_vana_calibration+0x364>)
 8007334:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007336:	493d      	ldr	r1, [pc, #244]	; (800742c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8007338:	4643      	mov	r3, r8
 800733a:	2000      	movs	r0, #0
 800733c:	47a0      	blx	r4
 800733e:	e7dd      	b.n	80072fc <acc_cpd_cbank_and_vana_calibration+0x1fc>
 8007340:	2210      	movs	r2, #16
 8007342:	9903      	ldr	r1, [sp, #12]
 8007344:	0020      	movs	r0, r4
 8007346:	f005 f95d 	bl	800c604 <internal_buffer_processed_read.constprop.30>
 800734a:	2310      	movs	r3, #16
 800734c:	0002      	movs	r2, r0
 800734e:	0007      	movs	r7, r0
 8007350:	0021      	movs	r1, r4
 8007352:	2000      	movs	r0, #0
 8007354:	f7f8 fef0 	bl	8000138 <acc_probes_execute_uint16>
 8007358:	0020      	movs	r0, r4
 800735a:	f7fb f9a9 	bl	80026b0 <acc_sensor_protocol_r2_ack_event>
 800735e:	2800      	cmp	r0, #0
 8007360:	d0e6      	beq.n	8007330 <acc_cpd_cbank_and_vana_calibration+0x230>
 8007362:	221e      	movs	r2, #30
 8007364:	4694      	mov	ip, r2
 8007366:	2200      	movs	r2, #0
 8007368:	003b      	movs	r3, r7
 800736a:	4691      	mov	r9, r2
 800736c:	4692      	mov	sl, r2
 800736e:	44bc      	add	ip, r7
 8007370:	885a      	ldrh	r2, [r3, #2]
 8007372:	8818      	ldrh	r0, [r3, #0]
 8007374:	4492      	add	sl, r2
 8007376:	1a11      	subs	r1, r2, r0
 8007378:	4282      	cmp	r2, r0
 800737a:	d200      	bcs.n	800737e <acc_cpd_cbank_and_vana_calibration+0x27e>
 800737c:	1a81      	subs	r1, r0, r2
 800737e:	4589      	cmp	r9, r1
 8007380:	d200      	bcs.n	8007384 <acc_cpd_cbank_and_vana_calibration+0x284>
 8007382:	4689      	mov	r9, r1
 8007384:	3302      	adds	r3, #2
 8007386:	459c      	cmp	ip, r3
 8007388:	d1f2      	bne.n	8007370 <acc_cpd_cbank_and_vana_calibration+0x270>
 800738a:	4930      	ldr	r1, [pc, #192]	; (800744c <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800738c:	4836      	ldr	r0, [pc, #216]	; (8007468 <acc_cpd_cbank_and_vana_calibration+0x368>)
 800738e:	f008 f93b 	bl	800f608 <acc_diagnostic_log_array>
 8007392:	2110      	movs	r1, #16
 8007394:	0038      	movs	r0, r7
 8007396:	f008 f935 	bl	800f604 <acc_diagnostic_log_data_u16>
 800739a:	883b      	ldrh	r3, [r7, #0]
 800739c:	4a33      	ldr	r2, [pc, #204]	; (800746c <acc_cpd_cbank_and_vana_calibration+0x36c>)
 800739e:	4453      	add	r3, sl
 80073a0:	091b      	lsrs	r3, r3, #4
 80073a2:	189a      	adds	r2, r3, r2
 80073a4:	4932      	ldr	r1, [pc, #200]	; (8007470 <acc_cpd_cbank_and_vana_calibration+0x370>)
 80073a6:	b292      	uxth	r2, r2
 80073a8:	2700      	movs	r7, #0
 80073aa:	428a      	cmp	r2, r1
 80073ac:	d805      	bhi.n	80073ba <acc_cpd_cbank_and_vana_calibration+0x2ba>
 80073ae:	22c8      	movs	r2, #200	; 0xc8
 80073b0:	4649      	mov	r1, r9
 80073b2:	0092      	lsls	r2, r2, #2
 80073b4:	428a      	cmp	r2, r1
 80073b6:	417f      	adcs	r7, r7
 80073b8:	b2ff      	uxtb	r7, r7
 80073ba:	4a1a      	ldr	r2, [pc, #104]	; (8007424 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80073bc:	0011      	movs	r1, r2
 80073be:	3130      	adds	r1, #48	; 0x30
 80073c0:	7809      	ldrb	r1, [r1, #0]
 80073c2:	2903      	cmp	r1, #3
 80073c4:	d90a      	bls.n	80073dc <acc_cpd_cbank_and_vana_calibration+0x2dc>
 80073c6:	4649      	mov	r1, r9
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	9101      	str	r1, [sp, #4]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80073d0:	4916      	ldr	r1, [pc, #88]	; (800742c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80073d2:	4699      	mov	r9, r3
 80073d4:	4a27      	ldr	r2, [pc, #156]	; (8007474 <acc_cpd_cbank_and_vana_calibration+0x374>)
 80073d6:	0023      	movs	r3, r4
 80073d8:	2004      	movs	r0, #4
 80073da:	47c8      	blx	r9
 80073dc:	2f00      	cmp	r7, #0
 80073de:	d014      	beq.n	800740a <acc_cpd_cbank_and_vana_calibration+0x30a>
 80073e0:	465b      	mov	r3, fp
 80073e2:	4642      	mov	r2, r8
 80073e4:	711a      	strb	r2, [r3, #4]
 80073e6:	4a0f      	ldr	r2, [pc, #60]	; (8007424 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	0011      	movs	r1, r2
 80073ec:	3130      	adds	r1, #48	; 0x30
 80073ee:	7809      	ldrb	r1, [r1, #0]
 80073f0:	2901      	cmp	r1, #1
 80073f2:	d80f      	bhi.n	8007414 <acc_cpd_cbank_and_vana_calibration+0x314>
 80073f4:	465b      	mov	r3, fp
 80073f6:	4820      	ldr	r0, [pc, #128]	; (8007478 <acc_cpd_cbank_and_vana_calibration+0x378>)
 80073f8:	6819      	ldr	r1, [r3, #0]
 80073fa:	f008 f904 	bl	800f606 <acc_diagnostic_log_scalar>
 80073fe:	465b      	mov	r3, fp
 8007400:	4812      	ldr	r0, [pc, #72]	; (800744c <acc_cpd_cbank_and_vana_calibration+0x34c>)
 8007402:	7919      	ldrb	r1, [r3, #4]
 8007404:	f008 f8ff 	bl	800f606 <acc_diagnostic_log_scalar>
 8007408:	e698      	b.n	800713c <acc_cpd_cbank_and_vana_calibration+0x3c>
 800740a:	2e01      	cmp	r6, #1
 800740c:	d100      	bne.n	8007410 <acc_cpd_cbank_and_vana_calibration+0x310>
 800740e:	e775      	b.n	80072fc <acc_cpd_cbank_and_vana_calibration+0x1fc>
 8007410:	2601      	movs	r6, #1
 8007412:	e748      	b.n	80072a6 <acc_cpd_cbank_and_vana_calibration+0x1a6>
 8007414:	4641      	mov	r1, r8
 8007416:	9100      	str	r1, [sp, #0]
 8007418:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800741a:	4904      	ldr	r1, [pc, #16]	; (800742c <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800741c:	4a17      	ldr	r2, [pc, #92]	; (800747c <acc_cpd_cbank_and_vana_calibration+0x37c>)
 800741e:	2002      	movs	r0, #2
 8007420:	47a0      	blx	r4
 8007422:	e7e7      	b.n	80073f4 <acc_cpd_cbank_and_vana_calibration+0x2f4>
 8007424:	200004a8 	.word	0x200004a8
 8007428:	0801d0f9 	.word	0x0801d0f9
 800742c:	0801d13a 	.word	0x0801d13a
 8007430:	00000572 	.word	0x00000572
 8007434:	0801a498 	.word	0x0801a498
 8007438:	0801830c 	.word	0x0801830c
 800743c:	00000571 	.word	0x00000571
 8007440:	0801d159 	.word	0x0801d159
 8007444:	0801d13e 	.word	0x0801d13e
 8007448:	0801d18b 	.word	0x0801d18b
 800744c:	0801d195 	.word	0x0801d195
 8007450:	0801d1e7 	.word	0x0801d1e7
 8007454:	0801d19e 	.word	0x0801d19e
 8007458:	0801d1b6 	.word	0x0801d1b6
 800745c:	0801d296 	.word	0x0801d296
 8007460:	0801d227 	.word	0x0801d227
 8007464:	0801d26b 	.word	0x0801d26b
 8007468:	0801d23f 	.word	0x0801d23f
 800746c:	ffff86e8 	.word	0xffff86e8
 8007470:	00000bb8 	.word	0x00000bb8
 8007474:	0801d24d 	.word	0x0801d24d
 8007478:	0801d2c0 	.word	0x0801d2c0
 800747c:	0801d2ad 	.word	0x0801d2ad

08007480 <start.lto_priv.159>:
 8007480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007482:	46de      	mov	lr, fp
 8007484:	4657      	mov	r7, sl
 8007486:	464e      	mov	r6, r9
 8007488:	4645      	mov	r5, r8
 800748a:	b5e0      	push	{r5, r6, r7, lr}
 800748c:	6947      	ldr	r7, [r0, #20]
 800748e:	b093      	sub	sp, #76	; 0x4c
 8007490:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007492:	4683      	mov	fp, r0
 8007494:	9307      	str	r3, [sp, #28]
 8007496:	003b      	movs	r3, r7
 8007498:	3308      	adds	r3, #8
 800749a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800749c:	9308      	str	r3, [sp, #32]
 800749e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a0:	930a      	str	r3, [sp, #40]	; 0x28
 80074a2:	9b08      	ldr	r3, [sp, #32]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d004      	beq.n	80074b2 <start.lto_priv.159+0x32>
 80074a8:	9b07      	ldr	r3, [sp, #28]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <start.lto_priv.159+0x32>
 80074ae:	2300      	movs	r3, #0
 80074b0:	643b      	str	r3, [r7, #64]	; 0x40
 80074b2:	465b      	mov	r3, fp
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	ac0f      	add	r4, sp, #60	; 0x3c
 80074b8:	9306      	str	r3, [sp, #24]
 80074ba:	680b      	ldr	r3, [r1, #0]
 80074bc:	2500      	movs	r5, #0
 80074be:	9309      	str	r3, [sp, #36]	; 0x24
 80074c0:	2315      	movs	r3, #21
 80074c2:	7023      	strb	r3, [r4, #0]
 80074c4:	9b06      	ldr	r3, [sp, #24]
 80074c6:	684e      	ldr	r6, [r1, #4]
 80074c8:	9310      	str	r3, [sp, #64]	; 0x40
 80074ca:	2307      	movs	r3, #7
 80074cc:	0020      	movs	r0, r4
 80074ce:	22b4      	movs	r2, #180	; 0xb4
 80074d0:	0039      	movs	r1, r7
 80074d2:	9311      	str	r3, [sp, #68]	; 0x44
 80074d4:	f7f8 fe16 	bl	8000104 <acc_probes_execute>
 80074d8:	9400      	str	r4, [sp, #0]
 80074da:	ab0e      	add	r3, sp, #56	; 0x38
 80074dc:	0032      	movs	r2, r6
 80074de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074e0:	9806      	ldr	r0, [sp, #24]
 80074e2:	950e      	str	r5, [sp, #56]	; 0x38
 80074e4:	950f      	str	r5, [sp, #60]	; 0x3c
 80074e6:	f008 fc8f 	bl	800fe08 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 80074ea:	9503      	str	r5, [sp, #12]
 80074ec:	0004      	movs	r4, r0
 80074ee:	42a8      	cmp	r0, r5
 80074f0:	d112      	bne.n	8007518 <start.lto_priv.159+0x98>
 80074f2:	4b06      	ldr	r3, [pc, #24]	; (800750c <start.lto_priv.159+0x8c>)
 80074f4:	4a06      	ldr	r2, [pc, #24]	; (8007510 <start.lto_priv.159+0x90>)
 80074f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f8:	4906      	ldr	r1, [pc, #24]	; (8007514 <start.lto_priv.159+0x94>)
 80074fa:	4798      	blx	r3
 80074fc:	0020      	movs	r0, r4
 80074fe:	b013      	add	sp, #76	; 0x4c
 8007500:	bc3c      	pop	{r2, r3, r4, r5}
 8007502:	4690      	mov	r8, r2
 8007504:	4699      	mov	r9, r3
 8007506:	46a2      	mov	sl, r4
 8007508:	46ab      	mov	fp, r5
 800750a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800750c:	200004a8 	.word	0x200004a8
 8007510:	0801d2cc 	.word	0x0801d2cc
 8007514:	0801d2e9 	.word	0x0801d2e9
 8007518:	9a03      	ldr	r2, [sp, #12]
 800751a:	4bfa      	ldr	r3, [pc, #1000]	; (8007904 <start.lto_priv.159+0x484>)
 800751c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007522:	9205      	str	r2, [sp, #20]
 8007524:	429a      	cmp	r2, r3
 8007526:	d900      	bls.n	800752a <start.lto_priv.159+0xaa>
 8007528:	9305      	str	r3, [sp, #20]
 800752a:	9b03      	ldr	r3, [sp, #12]
 800752c:	0021      	movs	r1, r4
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	930b      	str	r3, [sp, #44]	; 0x2c
 8007532:	9b05      	ldr	r3, [sp, #20]
 8007534:	085a      	lsrs	r2, r3, #1
 8007536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007538:	0098      	lsls	r0, r3, #2
 800753a:	4bf3      	ldr	r3, [pc, #972]	; (8007908 <start.lto_priv.159+0x488>)
 800753c:	18c0      	adds	r0, r0, r3
 800753e:	f007 ff6f 	bl	800f420 <acc_confprogram_copy>
 8007542:	466b      	mov	r3, sp
 8007544:	899d      	ldrh	r5, [r3, #12]
 8007546:	8a9e      	ldrh	r6, [r3, #20]
 8007548:	4bf0      	ldr	r3, [pc, #960]	; (800790c <start.lto_priv.159+0x48c>)
 800754a:	0032      	movs	r2, r6
 800754c:	4698      	mov	r8, r3
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	0029      	movs	r1, r5
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	23d2      	movs	r3, #210	; 0xd2
 8007556:	0020      	movs	r0, r4
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4643      	mov	r3, r8
 800755c:	f007 ffa8 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	0032      	movs	r2, r6
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	23d0      	movs	r3, #208	; 0xd0
 8007568:	0029      	movs	r1, r5
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	0020      	movs	r0, r4
 800756e:	4643      	mov	r3, r8
 8007570:	f007 ff9e 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	0032      	movs	r2, r6
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	23d1      	movs	r3, #209	; 0xd1
 800757c:	0029      	movs	r1, r5
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	0020      	movs	r0, r4
 8007582:	4643      	mov	r3, r8
 8007584:	f007 ff94 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007588:	89bb      	ldrh	r3, [r7, #12]
 800758a:	0032      	movs	r2, r6
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	23ce      	movs	r3, #206	; 0xce
 8007590:	0029      	movs	r1, r5
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	0020      	movs	r0, r4
 8007596:	4643      	mov	r3, r8
 8007598:	f007 ff8a 	bl	800f4b0 <acc_confprogram_patch_offset>
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	0032      	movs	r2, r6
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	2365      	movs	r3, #101	; 0x65
 80075a4:	0029      	movs	r1, r5
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	0020      	movs	r0, r4
 80075aa:	4643      	mov	r3, r8
 80075ac:	f007 ff80 	bl	800f4b0 <acc_confprogram_patch_offset>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	0032      	movs	r2, r6
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	23f0      	movs	r3, #240	; 0xf0
 80075b8:	0029      	movs	r1, r5
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	0020      	movs	r0, r4
 80075be:	4643      	mov	r3, r8
 80075c0:	f007 ff76 	bl	800f4b0 <acc_confprogram_patch_offset>
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	0032      	movs	r2, r6
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	23e8      	movs	r3, #232	; 0xe8
 80075cc:	0029      	movs	r1, r5
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	0020      	movs	r0, r4
 80075d2:	4643      	mov	r3, r8
 80075d4:	f007 ff6c 	bl	800f4b0 <acc_confprogram_patch_offset>
 80075d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075da:	0032      	movs	r2, r6
 80075dc:	9301      	str	r3, [sp, #4]
 80075de:	23fc      	movs	r3, #252	; 0xfc
 80075e0:	0029      	movs	r1, r5
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	0020      	movs	r0, r4
 80075e6:	4643      	mov	r3, r8
 80075e8:	f007 ff62 	bl	800f4b0 <acc_confprogram_patch_offset>
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	0032      	movs	r2, r6
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	23e0      	movs	r3, #224	; 0xe0
 80075f4:	0029      	movs	r1, r5
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	0020      	movs	r0, r4
 80075fa:	4643      	mov	r3, r8
 80075fc:	f007 ff58 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	0032      	movs	r2, r6
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	23e1      	movs	r3, #225	; 0xe1
 8007608:	0029      	movs	r1, r5
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	0020      	movs	r0, r4
 800760e:	4643      	mov	r3, r8
 8007610:	f007 ff4e 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007616:	0032      	movs	r2, r6
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	2380      	movs	r3, #128	; 0x80
 800761c:	0029      	movs	r1, r5
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	0020      	movs	r0, r4
 8007622:	4643      	mov	r3, r8
 8007624:	f007 ff44 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	0032      	movs	r2, r6
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	2381      	movs	r3, #129	; 0x81
 8007630:	0029      	movs	r1, r5
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	0020      	movs	r0, r4
 8007636:	4643      	mov	r3, r8
 8007638:	f007 ff3a 	bl	800f4b0 <acc_confprogram_patch_offset>
 800763c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763e:	0032      	movs	r2, r6
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	237f      	movs	r3, #127	; 0x7f
 8007644:	0029      	movs	r1, r5
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	0020      	movs	r0, r4
 800764a:	4643      	mov	r3, r8
 800764c:	f007 ff30 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007650:	2300      	movs	r3, #0
 8007652:	0032      	movs	r2, r6
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	0029      	movs	r1, r5
 800765a:	0020      	movs	r0, r4
 800765c:	469a      	mov	sl, r3
 800765e:	4643      	mov	r3, r8
 8007660:	f007 ff26 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007666:	0032      	movs	r2, r6
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	23ef      	movs	r3, #239	; 0xef
 800766c:	0029      	movs	r1, r5
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	0020      	movs	r0, r4
 8007672:	4643      	mov	r3, r8
 8007674:	f007 ff1c 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800767a:	0032      	movs	r2, r6
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	23d6      	movs	r3, #214	; 0xd6
 8007680:	0029      	movs	r1, r5
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	0020      	movs	r0, r4
 8007686:	4643      	mov	r3, r8
 8007688:	f007 ff12 	bl	800f4b0 <acc_confprogram_patch_offset>
 800768c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800768e:	0032      	movs	r2, r6
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	2378      	movs	r3, #120	; 0x78
 8007694:	0029      	movs	r1, r5
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	0020      	movs	r0, r4
 800769a:	4643      	mov	r3, r8
 800769c:	f007 ff08 	bl	800f4b0 <acc_confprogram_patch_offset>
 80076a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a2:	4553      	cmp	r3, sl
 80076a4:	d06e      	beq.n	8007784 <start.lto_priv.159+0x304>
 80076a6:	2301      	movs	r3, #1
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	330e      	adds	r3, #14
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	0032      	movs	r2, r6
 80076b0:	4643      	mov	r3, r8
 80076b2:	0029      	movs	r1, r5
 80076b4:	0020      	movs	r0, r4
 80076b6:	f007 fefb 	bl	800f4b0 <acc_confprogram_patch_offset>
 80076ba:	4b95      	ldr	r3, [pc, #596]	; (8007910 <start.lto_priv.159+0x490>)
 80076bc:	0032      	movs	r2, r6
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	2311      	movs	r3, #17
 80076c2:	0029      	movs	r1, r5
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	0020      	movs	r0, r4
 80076c8:	4643      	mov	r3, r8
 80076ca:	f007 fef1 	bl	800f4b0 <acc_confprogram_patch_offset>
 80076ce:	2207      	movs	r2, #7
 80076d0:	2313      	movs	r3, #19
 80076d2:	4691      	mov	r9, r2
 80076d4:	9201      	str	r2, [sp, #4]
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	0032      	movs	r2, r6
 80076da:	4643      	mov	r3, r8
 80076dc:	0029      	movs	r1, r5
 80076de:	0020      	movs	r0, r4
 80076e0:	f007 fee6 	bl	800f4b0 <acc_confprogram_patch_offset>
 80076e4:	4b8a      	ldr	r3, [pc, #552]	; (8007910 <start.lto_priv.159+0x490>)
 80076e6:	0032      	movs	r2, r6
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	2310      	movs	r3, #16
 80076ec:	0029      	movs	r1, r5
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	0020      	movs	r0, r4
 80076f2:	4643      	mov	r3, r8
 80076f4:	f007 fedc 	bl	800f4b0 <acc_confprogram_patch_offset>
 80076f8:	4653      	mov	r3, sl
 80076fa:	9301      	str	r3, [sp, #4]
 80076fc:	3312      	adds	r3, #18
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	0032      	movs	r2, r6
 8007702:	4643      	mov	r3, r8
 8007704:	0029      	movs	r1, r5
 8007706:	0020      	movs	r0, r4
 8007708:	f007 fed2 	bl	800f4b0 <acc_confprogram_patch_offset>
 800770c:	4b81      	ldr	r3, [pc, #516]	; (8007914 <start.lto_priv.159+0x494>)
 800770e:	0032      	movs	r2, r6
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	2314      	movs	r3, #20
 8007714:	0029      	movs	r1, r5
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	0020      	movs	r0, r4
 800771a:	4643      	mov	r3, r8
 800771c:	f007 fec8 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007720:	464b      	mov	r3, r9
 8007722:	9301      	str	r3, [sp, #4]
 8007724:	330e      	adds	r3, #14
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	0032      	movs	r2, r6
 800772a:	4643      	mov	r3, r8
 800772c:	0029      	movs	r1, r5
 800772e:	0020      	movs	r0, r4
 8007730:	f007 febe 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007734:	4b78      	ldr	r3, [pc, #480]	; (8007918 <start.lto_priv.159+0x498>)
 8007736:	0032      	movs	r2, r6
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	230d      	movs	r3, #13
 800773c:	0029      	movs	r1, r5
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	0020      	movs	r0, r4
 8007742:	4643      	mov	r3, r8
 8007744:	f007 feb4 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007748:	464b      	mov	r3, r9
 800774a:	9301      	str	r3, [sp, #4]
 800774c:	18db      	adds	r3, r3, r3
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	0032      	movs	r2, r6
 8007752:	4643      	mov	r3, r8
 8007754:	0029      	movs	r1, r5
 8007756:	0020      	movs	r0, r4
 8007758:	f007 feaa 	bl	800f4b0 <acc_confprogram_patch_offset>
 800775c:	4b6f      	ldr	r3, [pc, #444]	; (800791c <start.lto_priv.159+0x49c>)
 800775e:	0032      	movs	r2, r6
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	2316      	movs	r3, #22
 8007764:	0029      	movs	r1, r5
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	0020      	movs	r0, r4
 800776a:	4643      	mov	r3, r8
 800776c:	f007 fea0 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007770:	464b      	mov	r3, r9
 8007772:	9301      	str	r3, [sp, #4]
 8007774:	3310      	adds	r3, #16
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	0032      	movs	r2, r6
 800777a:	4643      	mov	r3, r8
 800777c:	0029      	movs	r1, r5
 800777e:	0020      	movs	r0, r4
 8007780:	f007 fe96 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007784:	4b61      	ldr	r3, [pc, #388]	; (800790c <start.lto_priv.159+0x48c>)
 8007786:	0032      	movs	r2, r6
 8007788:	4699      	mov	r9, r3
 800778a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778c:	0029      	movs	r1, r5
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	2386      	movs	r3, #134	; 0x86
 8007792:	0020      	movs	r0, r4
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	464b      	mov	r3, r9
 8007798:	f007 fe8a 	bl	800f4b0 <acc_confprogram_patch_offset>
 800779c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779e:	0032      	movs	r2, r6
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	23d3      	movs	r3, #211	; 0xd3
 80077a4:	0029      	movs	r1, r5
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	0020      	movs	r0, r4
 80077aa:	464b      	mov	r3, r9
 80077ac:	f007 fe80 	bl	800f4b0 <acc_confprogram_patch_offset>
 80077b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077b2:	0032      	movs	r2, r6
 80077b4:	9301      	str	r3, [sp, #4]
 80077b6:	23f3      	movs	r3, #243	; 0xf3
 80077b8:	0029      	movs	r1, r5
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	0020      	movs	r0, r4
 80077be:	464b      	mov	r3, r9
 80077c0:	f007 fe76 	bl	800f4b0 <acc_confprogram_patch_offset>
 80077c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077c6:	0032      	movs	r2, r6
 80077c8:	9301      	str	r3, [sp, #4]
 80077ca:	2382      	movs	r3, #130	; 0x82
 80077cc:	0029      	movs	r1, r5
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	0020      	movs	r0, r4
 80077d2:	464b      	mov	r3, r9
 80077d4:	f007 fe6c 	bl	800f4b0 <acc_confprogram_patch_offset>
 80077d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077da:	b29a      	uxth	r2, r3
 80077dc:	4690      	mov	r8, r2
 80077de:	2200      	movs	r2, #0
 80077e0:	9204      	str	r2, [sp, #16]
 80077e2:	4642      	mov	r2, r8
 80077e4:	2a08      	cmp	r2, #8
 80077e6:	d914      	bls.n	8007812 <start.lto_priv.159+0x392>
 80077e8:	4643      	mov	r3, r8
 80077ea:	22ff      	movs	r2, #255	; 0xff
 80077ec:	3b08      	subs	r3, #8
 80077ee:	409a      	lsls	r2, r3
 80077f0:	0013      	movs	r3, r2
 80077f2:	22ff      	movs	r2, #255	; 0xff
 80077f4:	4393      	bics	r3, r2
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	2302      	movs	r3, #2
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	33e0      	adds	r3, #224	; 0xe0
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	0032      	movs	r2, r6
 8007804:	464b      	mov	r3, r9
 8007806:	0029      	movs	r1, r5
 8007808:	0020      	movs	r0, r4
 800780a:	f007 fe51 	bl	800f4b0 <acc_confprogram_patch_offset>
 800780e:	2308      	movs	r3, #8
 8007810:	4698      	mov	r8, r3
 8007812:	4b3e      	ldr	r3, [pc, #248]	; (800790c <start.lto_priv.159+0x48c>)
 8007814:	0032      	movs	r2, r6
 8007816:	469a      	mov	sl, r3
 8007818:	4643      	mov	r3, r8
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	23e9      	movs	r3, #233	; 0xe9
 800781e:	0029      	movs	r1, r5
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	0020      	movs	r0, r4
 8007824:	4653      	mov	r3, sl
 8007826:	f007 fe43 	bl	800f4b0 <acc_confprogram_patch_offset>
 800782a:	4643      	mov	r3, r8
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	23d9      	movs	r3, #217	; 0xd9
 8007830:	0032      	movs	r2, r6
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	0029      	movs	r1, r5
 8007836:	4653      	mov	r3, sl
 8007838:	0020      	movs	r0, r4
 800783a:	f007 fe39 	bl	800f4b0 <acc_confprogram_patch_offset>
 800783e:	2380      	movs	r3, #128	; 0x80
 8007840:	9a04      	ldr	r2, [sp, #16]
 8007842:	0029      	movs	r1, r5
 8007844:	4313      	orrs	r3, r2
 8007846:	930c      	str	r3, [sp, #48]	; 0x30
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	23eb      	movs	r3, #235	; 0xeb
 800784c:	0032      	movs	r2, r6
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	0020      	movs	r0, r4
 8007852:	4653      	mov	r3, sl
 8007854:	f007 fe2c 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007858:	23c0      	movs	r3, #192	; 0xc0
 800785a:	9a04      	ldr	r2, [sp, #16]
 800785c:	0029      	movs	r1, r5
 800785e:	431a      	orrs	r2, r3
 8007860:	23ed      	movs	r3, #237	; 0xed
 8007862:	4690      	mov	r8, r2
 8007864:	9201      	str	r2, [sp, #4]
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	0032      	movs	r2, r6
 800786a:	4653      	mov	r3, sl
 800786c:	0020      	movs	r0, r4
 800786e:	f007 fe1f 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007872:	23ff      	movs	r3, #255	; 0xff
 8007874:	9a04      	ldr	r2, [sp, #16]
 8007876:	0029      	movs	r1, r5
 8007878:	4313      	orrs	r3, r2
 800787a:	4699      	mov	r9, r3
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	23ec      	movs	r3, #236	; 0xec
 8007880:	0032      	movs	r2, r6
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	0020      	movs	r0, r4
 8007886:	4653      	mov	r3, sl
 8007888:	f007 fe12 	bl	800f4b0 <acc_confprogram_patch_offset>
 800788c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800788e:	0032      	movs	r2, r6
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	23db      	movs	r3, #219	; 0xdb
 8007894:	0029      	movs	r1, r5
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	0020      	movs	r0, r4
 800789a:	4653      	mov	r3, sl
 800789c:	f007 fe08 	bl	800f4b0 <acc_confprogram_patch_offset>
 80078a0:	4643      	mov	r3, r8
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	23dd      	movs	r3, #221	; 0xdd
 80078a6:	0032      	movs	r2, r6
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	0029      	movs	r1, r5
 80078ac:	4653      	mov	r3, sl
 80078ae:	0020      	movs	r0, r4
 80078b0:	f007 fdfe 	bl	800f4b0 <acc_confprogram_patch_offset>
 80078b4:	464b      	mov	r3, r9
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	23dc      	movs	r3, #220	; 0xdc
 80078ba:	0032      	movs	r2, r6
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	0029      	movs	r1, r5
 80078c0:	4653      	mov	r3, sl
 80078c2:	0020      	movs	r0, r4
 80078c4:	f007 fdf4 	bl	800f4b0 <acc_confprogram_patch_offset>
 80078c8:	22f0      	movs	r2, #240	; 0xf0
 80078ca:	9b04      	ldr	r3, [sp, #16]
 80078cc:	0029      	movs	r1, r5
 80078ce:	4313      	orrs	r3, r2
 80078d0:	4698      	mov	r8, r3
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	23cd      	movs	r3, #205	; 0xcd
 80078d6:	0032      	movs	r2, r6
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	0020      	movs	r0, r4
 80078dc:	4653      	mov	r3, sl
 80078de:	f007 fde7 	bl	800f4b0 <acc_confprogram_patch_offset>
 80078e2:	4643      	mov	r3, r8
 80078e4:	9301      	str	r3, [sp, #4]
 80078e6:	2385      	movs	r3, #133	; 0x85
 80078e8:	0032      	movs	r2, r6
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	0029      	movs	r1, r5
 80078ee:	4653      	mov	r3, sl
 80078f0:	0020      	movs	r0, r4
 80078f2:	f007 fddd 	bl	800f4b0 <acc_confprogram_patch_offset>
 80078f6:	464b      	mov	r3, r9
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	2321      	movs	r3, #33	; 0x21
 80078fc:	0032      	movs	r2, r6
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	e00e      	b.n	8007920 <start.lto_priv.159+0x4a0>
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	0000076a 	.word	0x0000076a
 8007908:	080195c4 	.word	0x080195c4
 800790c:	08017a04 	.word	0x08017a04
 8007910:	0000ff80 	.word	0x0000ff80
 8007914:	0000ffc0 	.word	0x0000ffc0
 8007918:	0000fff0 	.word	0x0000fff0
 800791c:	0000ffff 	.word	0x0000ffff
 8007920:	0029      	movs	r1, r5
 8007922:	4653      	mov	r3, sl
 8007924:	0020      	movs	r0, r4
 8007926:	f007 fdc3 	bl	800f4b0 <acc_confprogram_patch_offset>
 800792a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800792c:	0032      	movs	r2, r6
 800792e:	3b01      	subs	r3, #1
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	2374      	movs	r3, #116	; 0x74
 8007934:	0029      	movs	r1, r5
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	0020      	movs	r0, r4
 800793a:	4653      	mov	r3, sl
 800793c:	f007 fdb8 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007942:	0032      	movs	r2, r6
 8007944:	9301      	str	r3, [sp, #4]
 8007946:	2305      	movs	r3, #5
 8007948:	0029      	movs	r1, r5
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	0020      	movs	r0, r4
 800794e:	4653      	mov	r3, sl
 8007950:	f007 fdae 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007956:	0032      	movs	r2, r6
 8007958:	015b      	lsls	r3, r3, #5
 800795a:	3b03      	subs	r3, #3
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	2363      	movs	r3, #99	; 0x63
 8007960:	0029      	movs	r1, r5
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	0020      	movs	r0, r4
 8007966:	4653      	mov	r3, sl
 8007968:	f007 fda2 	bl	800f4b0 <acc_confprogram_patch_offset>
 800796c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800796e:	0032      	movs	r2, r6
 8007970:	015b      	lsls	r3, r3, #5
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	3b03      	subs	r3, #3
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	2364      	movs	r3, #100	; 0x64
 800797a:	0029      	movs	r1, r5
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	0020      	movs	r0, r4
 8007980:	4653      	mov	r3, sl
 8007982:	f007 fd95 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007986:	2390      	movs	r3, #144	; 0x90
 8007988:	4698      	mov	r8, r3
 800798a:	44b8      	add	r8, r7
 800798c:	4643      	mov	r3, r8
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	0032      	movs	r2, r6
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	23de      	movs	r3, #222	; 0xde
 8007996:	0029      	movs	r1, r5
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	0020      	movs	r0, r4
 800799c:	4653      	mov	r3, sl
 800799e:	f007 fd87 	bl	800f4b0 <acc_confprogram_patch_offset>
 80079a2:	003b      	movs	r3, r7
 80079a4:	338c      	adds	r3, #140	; 0x8c
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	0032      	movs	r2, r6
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	23ee      	movs	r3, #238	; 0xee
 80079ae:	0029      	movs	r1, r5
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	0020      	movs	r0, r4
 80079b4:	4653      	mov	r3, sl
 80079b6:	f007 fd7b 	bl	800f4b0 <acc_confprogram_patch_offset>
 80079ba:	4643      	mov	r3, r8
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	0032      	movs	r2, r6
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	237e      	movs	r3, #126	; 0x7e
 80079c4:	0029      	movs	r1, r5
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	0020      	movs	r0, r4
 80079ca:	4653      	mov	r3, sl
 80079cc:	f007 fd70 	bl	800f4b0 <acc_confprogram_patch_offset>
 80079d0:	003b      	movs	r3, r7
 80079d2:	3394      	adds	r3, #148	; 0x94
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	0032      	movs	r2, r6
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	23e4      	movs	r3, #228	; 0xe4
 80079dc:	0029      	movs	r1, r5
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	0020      	movs	r0, r4
 80079e2:	4653      	mov	r3, sl
 80079e4:	f007 fd64 	bl	800f4b0 <acc_confprogram_patch_offset>
 80079e8:	003b      	movs	r3, r7
 80079ea:	3398      	adds	r3, #152	; 0x98
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	0032      	movs	r2, r6
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	237c      	movs	r3, #124	; 0x7c
 80079f4:	0029      	movs	r1, r5
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	0020      	movs	r0, r4
 80079fa:	4653      	mov	r3, sl
 80079fc:	f007 fd58 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007a00:	003b      	movs	r3, r7
 8007a02:	339c      	adds	r3, #156	; 0x9c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	0032      	movs	r2, r6
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	23c9      	movs	r3, #201	; 0xc9
 8007a0c:	0029      	movs	r1, r5
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	0020      	movs	r0, r4
 8007a12:	4653      	mov	r3, sl
 8007a14:	f007 fd4c 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007a18:	003b      	movs	r3, r7
 8007a1a:	33a0      	adds	r3, #160	; 0xa0
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	0032      	movs	r2, r6
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	2384      	movs	r3, #132	; 0x84
 8007a24:	0029      	movs	r1, r5
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	0020      	movs	r0, r4
 8007a2a:	4653      	mov	r3, sl
 8007a2c:	f007 fd40 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007a30:	003b      	movs	r3, r7
 8007a32:	33a4      	adds	r3, #164	; 0xa4
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	0032      	movs	r2, r6
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	237b      	movs	r3, #123	; 0x7b
 8007a3c:	0029      	movs	r1, r5
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	0020      	movs	r0, r4
 8007a42:	4653      	mov	r3, sl
 8007a44:	f007 fd34 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007a48:	003b      	movs	r3, r7
 8007a4a:	33a8      	adds	r3, #168	; 0xa8
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	0032      	movs	r2, r6
 8007a50:	9301      	str	r3, [sp, #4]
 8007a52:	23c7      	movs	r3, #199	; 0xc7
 8007a54:	0029      	movs	r1, r5
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	0020      	movs	r0, r4
 8007a5a:	4653      	mov	r3, sl
 8007a5c:	f007 fd28 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007a60:	003b      	movs	r3, r7
 8007a62:	33ac      	adds	r3, #172	; 0xac
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	0032      	movs	r2, r6
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	2383      	movs	r3, #131	; 0x83
 8007a6c:	0029      	movs	r1, r5
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	0020      	movs	r0, r4
 8007a72:	4653      	mov	r3, sl
 8007a74:	f007 fd1c 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007a78:	003b      	movs	r3, r7
 8007a7a:	33b0      	adds	r3, #176	; 0xb0
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	0032      	movs	r2, r6
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	23c8      	movs	r3, #200	; 0xc8
 8007a84:	0029      	movs	r1, r5
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	0020      	movs	r0, r4
 8007a8a:	4653      	mov	r3, sl
 8007a8c:	f007 fd10 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007a90:	003b      	movs	r3, r7
 8007a92:	3370      	adds	r3, #112	; 0x70
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	4698      	mov	r8, r3
 8007a98:	4642      	mov	r2, r8
 8007a9a:	23d7      	movs	r3, #215	; 0xd7
 8007a9c:	2a00      	cmp	r2, #0
 8007a9e:	d000      	beq.n	8007aa2 <start.lto_priv.159+0x622>
 8007aa0:	e07e      	b.n	8007ba0 <start.lto_priv.159+0x720>
 8007aa2:	3201      	adds	r2, #1
 8007aa4:	9201      	str	r2, [sp, #4]
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	0032      	movs	r2, r6
 8007aaa:	4653      	mov	r3, sl
 8007aac:	0029      	movs	r1, r5
 8007aae:	0020      	movs	r0, r4
 8007ab0:	f007 fcfe 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007ab4:	4643      	mov	r3, r8
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	23d8      	movs	r3, #216	; 0xd8
 8007aba:	0032      	movs	r2, r6
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	0029      	movs	r1, r5
 8007ac0:	4653      	mov	r3, sl
 8007ac2:	0020      	movs	r0, r4
 8007ac4:	f007 fcf4 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007ac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aca:	0032      	movs	r2, r6
 8007acc:	3b01      	subs	r3, #1
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	23e3      	movs	r3, #227	; 0xe3
 8007ad2:	0029      	movs	r1, r5
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	0020      	movs	r0, r4
 8007ad8:	4653      	mov	r3, sl
 8007ada:	f007 fce9 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007ade:	4b66      	ldr	r3, [pc, #408]	; (8007c78 <start.lto_priv.159+0x7f8>)
 8007ae0:	0032      	movs	r2, r6
 8007ae2:	4698      	mov	r8, r3
 8007ae4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ae6:	0029      	movs	r1, r5
 8007ae8:	9301      	str	r3, [sp, #4]
 8007aea:	23d4      	movs	r3, #212	; 0xd4
 8007aec:	0020      	movs	r0, r4
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	4643      	mov	r3, r8
 8007af2:	f007 fcdd 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007af8:	0032      	movs	r2, r6
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	2375      	movs	r3, #117	; 0x75
 8007afe:	0029      	movs	r1, r5
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	0020      	movs	r0, r4
 8007b04:	4643      	mov	r3, r8
 8007b06:	f007 fcd3 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007b0a:	1d3b      	adds	r3, r7, #4
 8007b0c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007b0e:	495b      	ldr	r1, [pc, #364]	; (8007c7c <start.lto_priv.159+0x7fc>)
 8007b10:	f008 fcba 	bl	8010488 <__aeabi_fmul>
 8007b14:	f009 f9f8 	bl	8010f08 <__aeabi_f2uiz>
 8007b18:	23e5      	movs	r3, #229	; 0xe5
 8007b1a:	3801      	subs	r0, #1
 8007b1c:	b280      	uxth	r0, r0
 8007b1e:	9001      	str	r0, [sp, #4]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	0032      	movs	r2, r6
 8007b24:	4643      	mov	r3, r8
 8007b26:	0029      	movs	r1, r5
 8007b28:	0020      	movs	r0, r4
 8007b2a:	f007 fcc1 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007b2e:	2308      	movs	r3, #8
 8007b30:	4699      	mov	r9, r3
 8007b32:	44b9      	add	r9, r7
 8007b34:	464b      	mov	r3, r9
 8007b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b38:	0032      	movs	r2, r6
 8007b3a:	9301      	str	r3, [sp, #4]
 8007b3c:	23d5      	movs	r3, #213	; 0xd5
 8007b3e:	0029      	movs	r1, r5
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	0020      	movs	r0, r4
 8007b44:	4643      	mov	r3, r8
 8007b46:	f007 fcb3 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007b4a:	464b      	mov	r3, r9
 8007b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00b      	beq.n	8007b6a <start.lto_priv.159+0x6ea>
 8007b52:	003b      	movs	r3, r7
 8007b54:	3388      	adds	r3, #136	; 0x88
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	0032      	movs	r2, r6
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	2371      	movs	r3, #113	; 0x71
 8007b5e:	0029      	movs	r1, r5
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	0020      	movs	r0, r4
 8007b64:	4643      	mov	r3, r8
 8007b66:	f007 fca3 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007b6a:	466b      	mov	r3, sp
 8007b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b6e:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007b70:	9806      	ldr	r0, [sp, #24]
 8007b72:	9b05      	ldr	r3, [sp, #20]
 8007b74:	f7fe fcd1 	bl	800651a <acc_sensor_r2_load_confmem>
 8007b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	4694      	mov	ip, r2
 8007b7e:	4463      	add	r3, ip
 8007b80:	9303      	str	r3, [sp, #12]
 8007b82:	9a03      	ldr	r2, [sp, #12]
 8007b84:	4b3e      	ldr	r3, [pc, #248]	; (8007c80 <start.lto_priv.159+0x800>)
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d800      	bhi.n	8007b8c <start.lto_priv.159+0x70c>
 8007b8a:	e4c5      	b.n	8007518 <start.lto_priv.159+0x98>
 8007b8c:	465b      	mov	r3, fp
 8007b8e:	21f4      	movs	r1, #244	; 0xf4
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	0049      	lsls	r1, r1, #1
 8007b94:	f7fd fc81 	bl	800549a <acc_sensor_protocol_r2_run_program>
 8007b98:	1e04      	subs	r4, r0, #0
 8007b9a:	d146      	bne.n	8007c2a <start.lto_priv.159+0x7aa>
 8007b9c:	2400      	movs	r4, #0
 8007b9e:	e4ad      	b.n	80074fc <start.lto_priv.159+0x7c>
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4690      	mov	r8, r2
 8007ba4:	9201      	str	r2, [sp, #4]
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	0032      	movs	r2, r6
 8007baa:	4653      	mov	r3, sl
 8007bac:	0029      	movs	r1, r5
 8007bae:	0020      	movs	r0, r4
 8007bb0:	f007 fc7e 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	46c1      	mov	r9, r8
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	33d7      	adds	r3, #215	; 0xd7
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	0032      	movs	r2, r6
 8007bc0:	4653      	mov	r3, sl
 8007bc2:	0029      	movs	r1, r5
 8007bc4:	0020      	movs	r0, r4
 8007bc6:	f007 fc73 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bcc:	3301      	adds	r3, #1
 8007bce:	930d      	str	r3, [sp, #52]	; 0x34
 8007bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bd2:	0029      	movs	r1, r5
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	464b      	mov	r3, r9
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	930c      	str	r3, [sp, #48]	; 0x30
 8007bdc:	9b04      	ldr	r3, [sp, #16]
 8007bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007be0:	4599      	cmp	r9, r3
 8007be2:	419b      	sbcs	r3, r3
 8007be4:	425b      	negs	r3, r3
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	4b26      	ldr	r3, [pc, #152]	; (8007c84 <start.lto_priv.159+0x804>)
 8007bea:	0020      	movs	r0, r4
 8007bec:	5a9b      	ldrh	r3, [r3, r2]
 8007bee:	0032      	movs	r2, r6
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	4653      	mov	r3, sl
 8007bf4:	f007 fc5c 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007bf8:	9b04      	ldr	r3, [sp, #16]
 8007bfa:	4599      	cmp	r9, r3
 8007bfc:	d20b      	bcs.n	8007c16 <start.lto_priv.159+0x796>
 8007bfe:	4643      	mov	r3, r8
 8007c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	4b20      	ldr	r3, [pc, #128]	; (8007c88 <start.lto_priv.159+0x808>)
 8007c06:	0029      	movs	r1, r5
 8007c08:	5a9b      	ldrh	r3, [r3, r2]
 8007c0a:	0020      	movs	r0, r4
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	0032      	movs	r2, r6
 8007c10:	4653      	mov	r3, sl
 8007c12:	f007 fc4d 	bl	800f4b0 <acc_confprogram_patch_offset>
 8007c16:	2301      	movs	r3, #1
 8007c18:	469c      	mov	ip, r3
 8007c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c1c:	44e1      	add	r9, ip
 8007c1e:	469c      	mov	ip, r3
 8007c20:	464b      	mov	r3, r9
 8007c22:	44e0      	add	r8, ip
 8007c24:	2b40      	cmp	r3, #64	; 0x40
 8007c26:	d1d3      	bne.n	8007bd0 <start.lto_priv.159+0x750>
 8007c28:	e759      	b.n	8007ade <start.lto_priv.159+0x65e>
 8007c2a:	9b07      	ldr	r3, [sp, #28]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d100      	bne.n	8007c32 <start.lto_priv.159+0x7b2>
 8007c30:	e464      	b.n	80074fc <start.lto_priv.159+0x7c>
 8007c32:	465b      	mov	r3, fp
 8007c34:	6919      	ldr	r1, [r3, #16]
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	f7fa fcc4 	bl	80025c4 <acc_sensor_protocol_r2_wait_for_sync_start>
 8007c3c:	1e05      	subs	r5, r0, #0
 8007c3e:	d0ad      	beq.n	8007b9c <start.lto_priv.159+0x71c>
 8007c40:	4b12      	ldr	r3, [pc, #72]	; (8007c8c <start.lto_priv.159+0x80c>)
 8007c42:	001a      	movs	r2, r3
 8007c44:	3230      	adds	r2, #48	; 0x30
 8007c46:	7812      	ldrb	r2, [r2, #0]
 8007c48:	2a01      	cmp	r2, #1
 8007c4a:	d904      	bls.n	8007c56 <start.lto_priv.159+0x7d6>
 8007c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4e:	4a10      	ldr	r2, [pc, #64]	; (8007c90 <start.lto_priv.159+0x810>)
 8007c50:	4910      	ldr	r1, [pc, #64]	; (8007c94 <start.lto_priv.159+0x814>)
 8007c52:	2002      	movs	r0, #2
 8007c54:	4798      	blx	r3
 8007c56:	9b08      	ldr	r3, [sp, #32]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d100      	bne.n	8007c5e <start.lto_priv.159+0x7de>
 8007c5c:	e44e      	b.n	80074fc <start.lto_priv.159+0x7c>
 8007c5e:	4658      	mov	r0, fp
 8007c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c62:	4642      	mov	r2, r8
 8007c64:	643b      	str	r3, [r7, #64]	; 0x40
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	490b      	ldr	r1, [pc, #44]	; (8007c98 <start.lto_priv.159+0x818>)
 8007c6a:	23ef      	movs	r3, #239	; 0xef
 8007c6c:	6800      	ldr	r0, [r0, #0]
 8007c6e:	f004 fd2b 	bl	800c6c8 <acc_confprogram_live_patch.constprop.16>
 8007c72:	002c      	movs	r4, r5
 8007c74:	e442      	b.n	80074fc <start.lto_priv.159+0x7c>
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	08017a04 	.word	0x08017a04
 8007c7c:	3751b717 	.word	0x3751b717
 8007c80:	00000769 	.word	0x00000769
 8007c84:	08017984 	.word	0x08017984
 8007c88:	08017904 	.word	0x08017904
 8007c8c:	200004a8 	.word	0x200004a8
 8007c90:	0801d072 	.word	0x0801d072
 8007c94:	0801d2e9 	.word	0x0801d2e9
 8007c98:	080195c4 	.word	0x080195c4

08007c9c <acc_rss_integration_get_sensor_reference_frequency>:
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	4b02      	ldr	r3, [pc, #8]	; (8007ca8 <acc_rss_integration_get_sensor_reference_frequency+0xc>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca2:	4798      	blx	r3
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	200004a8 	.word	0x200004a8

08007cac <acc_radar_engine_common_frequency_to_main_clk>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	1c06      	adds	r6, r0, #0
 8007cb0:	0015      	movs	r5, r2
 8007cb2:	000c      	movs	r4, r1
 8007cb4:	f7ff fff2 	bl	8007c9c <acc_rss_integration_get_sensor_reference_frequency>
 8007cb8:	1c31      	adds	r1, r6, #0
 8007cba:	f008 fad3 	bl	8010264 <__aeabi_fdiv>
 8007cbe:	f009 f923 	bl	8010f08 <__aeabi_f2uiz>
 8007cc2:	0c03      	lsrs	r3, r0, #16
 8007cc4:	b280      	uxth	r0, r0
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	6020      	str	r0, [r4, #0]
 8007cca:	bd70      	pop	{r4, r5, r6, pc}

08007ccc <calculate_pll_divisors.lto_priv.160>:
 8007ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cce:	0005      	movs	r5, r0
 8007cd0:	f7ff ffe4 	bl	8007c9c <acc_rss_integration_get_sensor_reference_frequency>
 8007cd4:	1c01      	adds	r1, r0, #0
 8007cd6:	1c06      	adds	r6, r0, #0
 8007cd8:	4830      	ldr	r0, [pc, #192]	; (8007d9c <calculate_pll_divisors.lto_priv.160+0xd0>)
 8007cda:	f008 fac3 	bl	8010264 <__aeabi_fdiv>
 8007cde:	21fc      	movs	r1, #252	; 0xfc
 8007ce0:	0589      	lsls	r1, r1, #22
 8007ce2:	f008 f925 	bl	800ff30 <__aeabi_fadd>
 8007ce6:	f009 f90f 	bl	8010f08 <__aeabi_f2uiz>
 8007cea:	492d      	ldr	r1, [pc, #180]	; (8007da0 <calculate_pll_divisors.lto_priv.160+0xd4>)
 8007cec:	b284      	uxth	r4, r0
 8007cee:	1c30      	adds	r0, r6, #0
 8007cf0:	f008 fcfc 	bl	80106ec <__aeabi_fsub>
 8007cf4:	492b      	ldr	r1, [pc, #172]	; (8007da4 <calculate_pll_divisors.lto_priv.160+0xd8>)
 8007cf6:	f008 fbc7 	bl	8010488 <__aeabi_fmul>
 8007cfa:	492b      	ldr	r1, [pc, #172]	; (8007da8 <calculate_pll_divisors.lto_priv.160+0xdc>)
 8007cfc:	f008 f918 	bl	800ff30 <__aeabi_fadd>
 8007d00:	f009 f902 	bl	8010f08 <__aeabi_f2uiz>
 8007d04:	0023      	movs	r3, r4
 8007d06:	3b10      	subs	r3, #16
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	8128      	strh	r0, [r5, #8]
 8007d0c:	2bef      	cmp	r3, #239	; 0xef
 8007d0e:	d92b      	bls.n	8007d68 <calculate_pll_divisors.lto_priv.160+0x9c>
 8007d10:	4b26      	ldr	r3, [pc, #152]	; (8007dac <calculate_pll_divisors.lto_priv.160+0xe0>)
 8007d12:	2100      	movs	r1, #0
 8007d14:	1c30      	adds	r0, r6, #0
 8007d16:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8007d18:	f009 f8ae 	bl	8010e78 <__aeabi_fcmplt>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d01f      	beq.n	8007d60 <calculate_pll_divisors.lto_priv.160+0x94>
 8007d20:	4c23      	ldr	r4, [pc, #140]	; (8007db0 <calculate_pll_divisors.lto_priv.160+0xe4>)
 8007d22:	4924      	ldr	r1, [pc, #144]	; (8007db4 <calculate_pll_divisors.lto_priv.160+0xe8>)
 8007d24:	1c30      	adds	r0, r6, #0
 8007d26:	f008 fbaf 	bl	8010488 <__aeabi_fmul>
 8007d2a:	4923      	ldr	r1, [pc, #140]	; (8007db8 <calculate_pll_divisors.lto_priv.160+0xec>)
 8007d2c:	f008 f900 	bl	800ff30 <__aeabi_fadd>
 8007d30:	1c06      	adds	r6, r0, #0
 8007d32:	f009 f8e9 	bl	8010f08 <__aeabi_f2uiz>
 8007d36:	0005      	movs	r5, r0
 8007d38:	f009 fb24 	bl	8011384 <__aeabi_ui2f>
 8007d3c:	1c01      	adds	r1, r0, #0
 8007d3e:	1c30      	adds	r0, r6, #0
 8007d40:	f008 fcd4 	bl	80106ec <__aeabi_fsub>
 8007d44:	491d      	ldr	r1, [pc, #116]	; (8007dbc <calculate_pll_divisors.lto_priv.160+0xf0>)
 8007d46:	f008 fb9f 	bl	8010488 <__aeabi_fmul>
 8007d4a:	f009 f8dd 	bl	8010f08 <__aeabi_f2uiz>
 8007d4e:	9500      	str	r5, [sp, #0]
 8007d50:	9001      	str	r0, [sp, #4]
 8007d52:	0023      	movs	r3, r4
 8007d54:	2000      	movs	r0, #0
 8007d56:	4a1a      	ldr	r2, [pc, #104]	; (8007dc0 <calculate_pll_divisors.lto_priv.160+0xf4>)
 8007d58:	491a      	ldr	r1, [pc, #104]	; (8007dc4 <calculate_pll_divisors.lto_priv.160+0xf8>)
 8007d5a:	47b8      	blx	r7
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d60:	21fe      	movs	r1, #254	; 0xfe
 8007d62:	4c19      	ldr	r4, [pc, #100]	; (8007dc8 <calculate_pll_divisors.lto_priv.160+0xfc>)
 8007d64:	0589      	lsls	r1, r1, #22
 8007d66:	e7dd      	b.n	8007d24 <calculate_pll_divisors.lto_priv.160+0x58>
 8007d68:	2c3f      	cmp	r4, #63	; 0x3f
 8007d6a:	d809      	bhi.n	8007d80 <calculate_pll_divisors.lto_priv.160+0xb4>
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	806a      	strh	r2, [r5, #2]
 8007d70:	2c2f      	cmp	r4, #47	; 0x2f
 8007d72:	d900      	bls.n	8007d76 <calculate_pll_divisors.lto_priv.160+0xaa>
 8007d74:	0023      	movs	r3, r4
 8007d76:	80ab      	strh	r3, [r5, #4]
 8007d78:	80ea      	strh	r2, [r5, #6]
 8007d7a:	802c      	strh	r4, [r5, #0]
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	e7ee      	b.n	8007d5e <calculate_pll_divisors.lto_priv.160+0x92>
 8007d80:	2301      	movs	r3, #1
 8007d82:	806b      	strh	r3, [r5, #2]
 8007d84:	08e3      	lsrs	r3, r4, #3
 8007d86:	2cbf      	cmp	r4, #191	; 0xbf
 8007d88:	d803      	bhi.n	8007d92 <calculate_pll_divisors.lto_priv.160+0xc6>
 8007d8a:	0023      	movs	r3, r4
 8007d8c:	3b40      	subs	r3, #64	; 0x40
 8007d8e:	10db      	asrs	r3, r3, #3
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	80ab      	strh	r3, [r5, #4]
 8007d94:	2307      	movs	r3, #7
 8007d96:	4023      	ands	r3, r4
 8007d98:	80eb      	strh	r3, [r5, #6]
 8007d9a:	e7ee      	b.n	8007d7a <calculate_pll_divisors.lto_priv.160+0xae>
 8007d9c:	4f1502f9 	.word	0x4f1502f9
 8007da0:	4b989680 	.word	0x4b989680
 8007da4:	b55b38e8 	.word	0xb55b38e8
 8007da8:	427c0000 	.word	0x427c0000
 8007dac:	200004a8 	.word	0x200004a8
 8007db0:	0801e6f0 	.word	0x0801e6f0
 8007db4:	bf800000 	.word	0xbf800000
 8007db8:	350637bd 	.word	0x350637bd
 8007dbc:	49742400 	.word	0x49742400
 8007dc0:	0801d2fd 	.word	0x0801d2fd
 8007dc4:	0801d328 	.word	0x0801d328
 8007dc8:	0801e61b 	.word	0x0801e61b

08007dcc <set_calibration_context.lto_priv.149>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	680b      	ldr	r3, [r1, #0]
 8007dd0:	b086      	sub	sp, #24
 8007dd2:	0004      	movs	r4, r0
 8007dd4:	000e      	movs	r6, r1
 8007dd6:	2b06      	cmp	r3, #6
 8007dd8:	d00a      	beq.n	8007df0 <set_calibration_context.lto_priv.149+0x24>
 8007dda:	2206      	movs	r2, #6
 8007ddc:	9200      	str	r2, [sp, #0]
 8007dde:	4a0e      	ldr	r2, [pc, #56]	; (8007e18 <set_calibration_context.lto_priv.149+0x4c>)
 8007de0:	2000      	movs	r0, #0
 8007de2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007de4:	490d      	ldr	r1, [pc, #52]	; (8007e1c <set_calibration_context.lto_priv.149+0x50>)
 8007de6:	4a0e      	ldr	r2, [pc, #56]	; (8007e20 <set_calibration_context.lto_priv.149+0x54>)
 8007de8:	47a0      	blx	r4
 8007dea:	2000      	movs	r0, #0
 8007dec:	b006      	add	sp, #24
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	ad03      	add	r5, sp, #12
 8007df2:	0028      	movs	r0, r5
 8007df4:	f7ff ff6a 	bl	8007ccc <calculate_pll_divisors.lto_priv.160>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d0f7      	beq.n	8007dec <set_calibration_context.lto_priv.149+0x20>
 8007dfc:	88ab      	ldrh	r3, [r5, #4]
 8007dfe:	6063      	str	r3, [r4, #4]
 8007e00:	88eb      	ldrh	r3, [r5, #6]
 8007e02:	60a3      	str	r3, [r4, #8]
 8007e04:	886b      	ldrh	r3, [r5, #2]
 8007e06:	6023      	str	r3, [r4, #0]
 8007e08:	892b      	ldrh	r3, [r5, #8]
 8007e0a:	81a3      	strh	r3, [r4, #12]
 8007e0c:	88b3      	ldrh	r3, [r6, #4]
 8007e0e:	6123      	str	r3, [r4, #16]
 8007e10:	88f3      	ldrh	r3, [r6, #6]
 8007e12:	6163      	str	r3, [r4, #20]
 8007e14:	e7ea      	b.n	8007dec <set_calibration_context.lto_priv.149+0x20>
 8007e16:	46c0      	nop			; (mov r8, r8)
 8007e18:	200004a8 	.word	0x200004a8
 8007e1c:	0801d2e9 	.word	0x0801d2e9
 8007e20:	0801d339 	.word	0x0801d339

08007e24 <calibrate.lto_priv.163>:
 8007e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e26:	b08b      	sub	sp, #44	; 0x2c
 8007e28:	ac02      	add	r4, sp, #8
 8007e2a:	6807      	ldr	r7, [r0, #0]
 8007e2c:	0020      	movs	r0, r4
 8007e2e:	000e      	movs	r6, r1
 8007e30:	0015      	movs	r5, r2
 8007e32:	f7ff ff4b 	bl	8007ccc <calculate_pll_divisors.lto_priv.160>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d103      	bne.n	8007e42 <calibrate.lto_priv.163+0x1e>
 8007e3a:	2400      	movs	r4, #0
 8007e3c:	0020      	movs	r0, r4
 8007e3e:	b00b      	add	sp, #44	; 0x2c
 8007e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e42:	9705      	str	r7, [sp, #20]
 8007e44:	8863      	ldrh	r3, [r4, #2]
 8007e46:	aa05      	add	r2, sp, #20
 8007e48:	6053      	str	r3, [r2, #4]
 8007e4a:	88a3      	ldrh	r3, [r4, #4]
 8007e4c:	ce03      	ldmia	r6!, {r0, r1}
 8007e4e:	6093      	str	r3, [r2, #8]
 8007e50:	88e3      	ldrh	r3, [r4, #6]
 8007e52:	60d3      	str	r3, [r2, #12]
 8007e54:	8923      	ldrh	r3, [r4, #8]
 8007e56:	8213      	strh	r3, [r2, #16]
 8007e58:	466b      	mov	r3, sp
 8007e5a:	f7ff f951 	bl	8007100 <acc_cpd_cbank_and_vana_calibration>
 8007e5e:	1e04      	subs	r4, r0, #0
 8007e60:	d0eb      	beq.n	8007e3a <calibrate.lto_priv.163+0x16>
 8007e62:	9b00      	ldr	r3, [sp, #0]
 8007e64:	80ab      	strh	r3, [r5, #4]
 8007e66:	466b      	mov	r3, sp
 8007e68:	791b      	ldrb	r3, [r3, #4]
 8007e6a:	80eb      	strh	r3, [r5, #6]
 8007e6c:	2306      	movs	r3, #6
 8007e6e:	602b      	str	r3, [r5, #0]
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <calibrate.lto_priv.163+0x64>)
 8007e72:	001a      	movs	r2, r3
 8007e74:	3230      	adds	r2, #48	; 0x30
 8007e76:	7812      	ldrb	r2, [r2, #0]
 8007e78:	2a01      	cmp	r2, #1
 8007e7a:	d9df      	bls.n	8007e3c <calibrate.lto_priv.163+0x18>
 8007e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7e:	4a03      	ldr	r2, [pc, #12]	; (8007e8c <calibrate.lto_priv.163+0x68>)
 8007e80:	4903      	ldr	r1, [pc, #12]	; (8007e90 <calibrate.lto_priv.163+0x6c>)
 8007e82:	2002      	movs	r0, #2
 8007e84:	4798      	blx	r3
 8007e86:	e7d9      	b.n	8007e3c <calibrate.lto_priv.163+0x18>
 8007e88:	200004a8 	.word	0x200004a8
 8007e8c:	0801d377 	.word	0x0801d377
 8007e90:	0801d2e9 	.word	0x0801d2e9

08007e94 <set_calibration_context.lto_priv.148>:
 8007e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e96:	680b      	ldr	r3, [r1, #0]
 8007e98:	b087      	sub	sp, #28
 8007e9a:	0004      	movs	r4, r0
 8007e9c:	000d      	movs	r5, r1
 8007e9e:	2b06      	cmp	r3, #6
 8007ea0:	d00b      	beq.n	8007eba <set_calibration_context.lto_priv.148+0x26>
 8007ea2:	2206      	movs	r2, #6
 8007ea4:	9200      	str	r2, [sp, #0]
 8007ea6:	4a22      	ldr	r2, [pc, #136]	; (8007f30 <set_calibration_context.lto_priv.148+0x9c>)
 8007ea8:	4922      	ldr	r1, [pc, #136]	; (8007f34 <set_calibration_context.lto_priv.148+0xa0>)
 8007eaa:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007eac:	2000      	movs	r0, #0
 8007eae:	4a22      	ldr	r2, [pc, #136]	; (8007f38 <set_calibration_context.lto_priv.148+0xa4>)
 8007eb0:	47a0      	blx	r4
 8007eb2:	2700      	movs	r7, #0
 8007eb4:	0038      	movs	r0, r7
 8007eb6:	b007      	add	sp, #28
 8007eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eba:	ae03      	add	r6, sp, #12
 8007ebc:	0030      	movs	r0, r6
 8007ebe:	f7ff ff05 	bl	8007ccc <calculate_pll_divisors.lto_priv.160>
 8007ec2:	1e07      	subs	r7, r0, #0
 8007ec4:	d0f6      	beq.n	8007eb4 <set_calibration_context.lto_priv.148+0x20>
 8007ec6:	88b3      	ldrh	r3, [r6, #4]
 8007ec8:	6063      	str	r3, [r4, #4]
 8007eca:	88f3      	ldrh	r3, [r6, #6]
 8007ecc:	60a3      	str	r3, [r4, #8]
 8007ece:	8873      	ldrh	r3, [r6, #2]
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	8933      	ldrh	r3, [r6, #8]
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	88ab      	ldrh	r3, [r5, #4]
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	88eb      	ldrh	r3, [r5, #6]
 8007edc:	6163      	str	r3, [r4, #20]
 8007ede:	892b      	ldrh	r3, [r5, #8]
 8007ee0:	61a3      	str	r3, [r4, #24]
 8007ee2:	896b      	ldrh	r3, [r5, #10]
 8007ee4:	61e3      	str	r3, [r4, #28]
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	6223      	str	r3, [r4, #32]
 8007eea:	8a2b      	ldrh	r3, [r5, #16]
 8007eec:	84a3      	strh	r3, [r4, #36]	; 0x24
 8007eee:	8a6b      	ldrh	r3, [r5, #18]
 8007ef0:	84e3      	strh	r3, [r4, #38]	; 0x26
 8007ef2:	89ed      	ldrh	r5, [r5, #14]
 8007ef4:	00ad      	lsls	r5, r5, #2
 8007ef6:	b2ad      	uxth	r5, r5
 8007ef8:	0028      	movs	r0, r5
 8007efa:	303e      	adds	r0, #62	; 0x3e
 8007efc:	b280      	uxth	r0, r0
 8007efe:	287b      	cmp	r0, #123	; 0x7b
 8007f00:	d912      	bls.n	8007f28 <set_calibration_context.lto_priv.148+0x94>
 8007f02:	217c      	movs	r1, #124	; 0x7c
 8007f04:	f008 fe78 	bl	8010bf8 <__aeabi_uidivmod>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	0028      	movs	r0, r5
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	b28d      	uxth	r5, r1
 8007f10:	0011      	movs	r1, r2
 8007f12:	62e0      	str	r0, [r4, #44]	; 0x2c
 8007f14:	6323      	str	r3, [r4, #48]	; 0x30
 8007f16:	2003      	movs	r0, #3
 8007f18:	6423      	str	r3, [r4, #64]	; 0x40
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	62a5      	str	r5, [r4, #40]	; 0x28
 8007f1e:	6360      	str	r0, [r4, #52]	; 0x34
 8007f20:	63a1      	str	r1, [r4, #56]	; 0x38
 8007f22:	63e2      	str	r2, [r4, #60]	; 0x3c
 8007f24:	6463      	str	r3, [r4, #68]	; 0x44
 8007f26:	e7c5      	b.n	8007eb4 <set_calibration_context.lto_priv.148+0x20>
 8007f28:	2203      	movs	r2, #3
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e7f0      	b.n	8007f12 <set_calibration_context.lto_priv.148+0x7e>
 8007f30:	200004a8 	.word	0x200004a8
 8007f34:	0801d044 	.word	0x0801d044
 8007f38:	0801d339 	.word	0x0801d339

08007f3c <get_pll_freq>:
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	f7ff fead 	bl	8007c9c <acc_rss_integration_get_sensor_reference_frequency>
 8007f42:	1c01      	adds	r1, r0, #0
 8007f44:	1c04      	adds	r4, r0, #0
 8007f46:	4805      	ldr	r0, [pc, #20]	; (8007f5c <get_pll_freq+0x20>)
 8007f48:	f008 f98c 	bl	8010264 <__aeabi_fdiv>
 8007f4c:	f00b fd50 	bl	80139f0 <roundf>
 8007f50:	1c01      	adds	r1, r0, #0
 8007f52:	1c20      	adds	r0, r4, #0
 8007f54:	f008 fa98 	bl	8010488 <__aeabi_fmul>
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	4f1502f9 	.word	0x4f1502f9

08007f60 <points_to_meter.lto_priv.164>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	0004      	movs	r4, r0
 8007f64:	f7ff ffea 	bl	8007f3c <get_pll_freq>
 8007f68:	1c05      	adds	r5, r0, #0
 8007f6a:	0020      	movs	r0, r4
 8007f6c:	f009 f9c0 	bl	80112f0 <__aeabi_i2f>
 8007f70:	1c04      	adds	r4, r0, #0
 8007f72:	20fe      	movs	r0, #254	; 0xfe
 8007f74:	1c29      	adds	r1, r5, #0
 8007f76:	0580      	lsls	r0, r0, #22
 8007f78:	f008 f974 	bl	8010264 <__aeabi_fdiv>
 8007f7c:	1c01      	adds	r1, r0, #0
 8007f7e:	1c20      	adds	r0, r4, #0
 8007f80:	f008 fa82 	bl	8010488 <__aeabi_fmul>
 8007f84:	4903      	ldr	r1, [pc, #12]	; (8007f94 <points_to_meter.lto_priv.164+0x34>)
 8007f86:	f008 fa7f 	bl	8010488 <__aeabi_fmul>
 8007f8a:	21fc      	movs	r1, #252	; 0xfc
 8007f8c:	0589      	lsls	r1, r1, #22
 8007f8e:	f008 fa7b 	bl	8010488 <__aeabi_fmul>
 8007f92:	bd70      	pop	{r4, r5, r6, pc}
 8007f94:	4d8ef3c2 	.word	0x4d8ef3c2

08007f98 <meter_to_points.lto_priv.168>:
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	1c04      	adds	r4, r0, #0
 8007f9c:	f7ff ffce 	bl	8007f3c <get_pll_freq>
 8007fa0:	1c21      	adds	r1, r4, #0
 8007fa2:	1c06      	adds	r6, r0, #0
 8007fa4:	1c20      	adds	r0, r4, #0
 8007fa6:	f007 ffc3 	bl	800ff30 <__aeabi_fadd>
 8007faa:	1c05      	adds	r5, r0, #0
 8007fac:	20fe      	movs	r0, #254	; 0xfe
 8007fae:	1c31      	adds	r1, r6, #0
 8007fb0:	0580      	lsls	r0, r0, #22
 8007fb2:	f008 f957 	bl	8010264 <__aeabi_fdiv>
 8007fb6:	490c      	ldr	r1, [pc, #48]	; (8007fe8 <meter_to_points.lto_priv.168+0x50>)
 8007fb8:	f008 fa66 	bl	8010488 <__aeabi_fmul>
 8007fbc:	1c01      	adds	r1, r0, #0
 8007fbe:	1c28      	adds	r0, r5, #0
 8007fc0:	f008 f950 	bl	8010264 <__aeabi_fdiv>
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	1c05      	adds	r5, r0, #0
 8007fc8:	1c20      	adds	r0, r4, #0
 8007fca:	f008 ff55 	bl	8010e78 <__aeabi_fcmplt>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d107      	bne.n	8007fe2 <meter_to_points.lto_priv.168+0x4a>
 8007fd2:	21fc      	movs	r1, #252	; 0xfc
 8007fd4:	0589      	lsls	r1, r1, #22
 8007fd6:	1c28      	adds	r0, r5, #0
 8007fd8:	f007 ffaa 	bl	800ff30 <__aeabi_fadd>
 8007fdc:	f009 f968 	bl	80112b0 <__aeabi_f2iz>
 8007fe0:	bd70      	pop	{r4, r5, r6, pc}
 8007fe2:	21bf      	movs	r1, #191	; 0xbf
 8007fe4:	0609      	lsls	r1, r1, #24
 8007fe6:	e7f6      	b.n	8007fd6 <meter_to_points.lto_priv.168+0x3e>
 8007fe8:	4d8ef3c2 	.word	0x4d8ef3c2

08007fec <initialize.lto_priv.171>:
 8007fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fee:	4657      	mov	r7, sl
 8007ff0:	46de      	mov	lr, fp
 8007ff2:	464e      	mov	r6, r9
 8007ff4:	4645      	mov	r5, r8
 8007ff6:	b5e0      	push	{r5, r6, r7, lr}
 8007ff8:	000f      	movs	r7, r1
 8007ffa:	b09d      	sub	sp, #116	; 0x74
 8007ffc:	3732      	adds	r7, #50	; 0x32
 8007ffe:	9308      	str	r3, [sp, #32]
 8008000:	783b      	ldrb	r3, [r7, #0]
 8008002:	4683      	mov	fp, r0
 8008004:	000e      	movs	r6, r1
 8008006:	4692      	mov	sl, r2
 8008008:	2b06      	cmp	r3, #6
 800800a:	d00f      	beq.n	800802c <initialize.lto_priv.171+0x40>
 800800c:	2b09      	cmp	r3, #9
 800800e:	d00d      	beq.n	800802c <initialize.lto_priv.171+0x40>
 8008010:	4bb7      	ldr	r3, [pc, #732]	; (80082f0 <initialize.lto_priv.171+0x304>)
 8008012:	2000      	movs	r0, #0
 8008014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008016:	4ab7      	ldr	r2, [pc, #732]	; (80082f4 <initialize.lto_priv.171+0x308>)
 8008018:	49b7      	ldr	r1, [pc, #732]	; (80082f8 <initialize.lto_priv.171+0x30c>)
 800801a:	4798      	blx	r3
 800801c:	2000      	movs	r0, #0
 800801e:	b01d      	add	sp, #116	; 0x74
 8008020:	bc3c      	pop	{r2, r3, r4, r5}
 8008022:	4690      	mov	r8, r2
 8008024:	4699      	mov	r9, r3
 8008026:	46a2      	mov	sl, r4
 8008028:	46ab      	mov	fp, r5
 800802a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800802c:	465b      	mov	r3, fp
 800802e:	0030      	movs	r0, r6
 8008030:	695d      	ldr	r5, [r3, #20]
 8008032:	f7f8 fdc9 	bl	8000bc8 <configuration_is_valid>
 8008036:	2800      	cmp	r0, #0
 8008038:	d040      	beq.n	80080bc <initialize.lto_priv.171+0xd0>
 800803a:	0033      	movs	r3, r6
 800803c:	332c      	adds	r3, #44	; 0x2c
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d03b      	beq.n	80080bc <initialize.lto_priv.171+0xd0>
 8008044:	0030      	movs	r0, r6
 8008046:	f7f8 fdbf 	bl	8000bc8 <configuration_is_valid>
 800804a:	2400      	movs	r4, #0
 800804c:	42a0      	cmp	r0, r4
 800804e:	d001      	beq.n	8008054 <initialize.lto_priv.171+0x68>
 8008050:	2334      	movs	r3, #52	; 0x34
 8008052:	5ef4      	ldrsh	r4, [r6, r3]
 8008054:	b223      	sxth	r3, r4
 8008056:	0030      	movs	r0, r6
 8008058:	9307      	str	r3, [sp, #28]
 800805a:	f7f8 fdb5 	bl	8000bc8 <configuration_is_valid>
 800805e:	2300      	movs	r3, #0
 8008060:	b2a4      	uxth	r4, r4
 8008062:	4298      	cmp	r0, r3
 8008064:	d001      	beq.n	800806a <initialize.lto_priv.171+0x7e>
 8008066:	2236      	movs	r2, #54	; 0x36
 8008068:	5eb3      	ldrsh	r3, [r6, r2]
 800806a:	18e4      	adds	r4, r4, r3
 800806c:	b223      	sxth	r3, r4
 800806e:	4698      	mov	r8, r3
 8008070:	0030      	movs	r0, r6
 8008072:	f7f8 fddf 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8008076:	4643      	mov	r3, r8
 8008078:	9a07      	ldr	r2, [sp, #28]
 800807a:	0001      	movs	r1, r0
 800807c:	1a9b      	subs	r3, r3, r2
 800807e:	0018      	movs	r0, r3
 8008080:	f008 fea4 	bl	8010dcc <__aeabi_idivmod>
 8008084:	1e0c      	subs	r4, r1, #0
 8008086:	dd0e      	ble.n	80080a6 <initialize.lto_priv.171+0xba>
 8008088:	4b99      	ldr	r3, [pc, #612]	; (80082f0 <initialize.lto_priv.171+0x304>)
 800808a:	001a      	movs	r2, r3
 800808c:	3230      	adds	r2, #48	; 0x30
 800808e:	7812      	ldrb	r2, [r2, #0]
 8008090:	2a01      	cmp	r2, #1
 8008092:	d904      	bls.n	800809e <initialize.lto_priv.171+0xb2>
 8008094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008096:	4a99      	ldr	r2, [pc, #612]	; (80082fc <initialize.lto_priv.171+0x310>)
 8008098:	4997      	ldr	r1, [pc, #604]	; (80082f8 <initialize.lto_priv.171+0x30c>)
 800809a:	2002      	movs	r0, #2
 800809c:	4798      	blx	r3
 800809e:	4643      	mov	r3, r8
 80080a0:	1b1c      	subs	r4, r3, r4
 80080a2:	b223      	sxth	r3, r4
 80080a4:	4698      	mov	r8, r3
 80080a6:	9b07      	ldr	r3, [sp, #28]
 80080a8:	4543      	cmp	r3, r8
 80080aa:	dd28      	ble.n	80080fe <initialize.lto_priv.171+0x112>
 80080ac:	4b90      	ldr	r3, [pc, #576]	; (80082f0 <initialize.lto_priv.171+0x304>)
 80080ae:	2000      	movs	r0, #0
 80080b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b2:	4a93      	ldr	r2, [pc, #588]	; (8008300 <initialize.lto_priv.171+0x314>)
 80080b4:	4990      	ldr	r1, [pc, #576]	; (80082f8 <initialize.lto_priv.171+0x30c>)
 80080b6:	4798      	blx	r3
 80080b8:	2000      	movs	r0, #0
 80080ba:	e7b0      	b.n	800801e <initialize.lto_priv.171+0x32>
 80080bc:	0030      	movs	r0, r6
 80080be:	f7f8 fd83 	bl	8000bc8 <configuration_is_valid>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d016      	beq.n	80080f4 <initialize.lto_priv.171+0x108>
 80080c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80080c8:	4698      	mov	r8, r3
 80080ca:	0030      	movs	r0, r6
 80080cc:	f7f8 fd7c 	bl	8000bc8 <configuration_is_valid>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d012      	beq.n	80080fa <initialize.lto_priv.171+0x10e>
 80080d4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80080d6:	4641      	mov	r1, r8
 80080d8:	f007 ff2a 	bl	800ff30 <__aeabi_fadd>
 80080dc:	1c04      	adds	r4, r0, #0
 80080de:	4640      	mov	r0, r8
 80080e0:	f7ff ff5a 	bl	8007f98 <meter_to_points.lto_priv.168>
 80080e4:	b203      	sxth	r3, r0
 80080e6:	1c20      	adds	r0, r4, #0
 80080e8:	9307      	str	r3, [sp, #28]
 80080ea:	f7ff ff55 	bl	8007f98 <meter_to_points.lto_priv.168>
 80080ee:	b203      	sxth	r3, r0
 80080f0:	4698      	mov	r8, r3
 80080f2:	e7bd      	b.n	8008070 <initialize.lto_priv.171+0x84>
 80080f4:	2300      	movs	r3, #0
 80080f6:	4698      	mov	r8, r3
 80080f8:	e7e7      	b.n	80080ca <initialize.lto_priv.171+0xde>
 80080fa:	2000      	movs	r0, #0
 80080fc:	e7eb      	b.n	80080d6 <initialize.lto_priv.171+0xea>
 80080fe:	0030      	movs	r0, r6
 8008100:	f7f8 fd62 	bl	8000bc8 <configuration_is_valid>
 8008104:	2800      	cmp	r0, #0
 8008106:	d005      	beq.n	8008114 <initialize.lto_priv.171+0x128>
 8008108:	0033      	movs	r3, r6
 800810a:	336e      	adds	r3, #110	; 0x6e
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d000      	beq.n	8008114 <initialize.lto_priv.171+0x128>
 8008112:	e1d7      	b.n	80084c4 <initialize.lto_priv.171+0x4d8>
 8008114:	0033      	movs	r3, r6
 8008116:	332e      	adds	r3, #46	; 0x2e
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d100      	bne.n	8008120 <initialize.lto_priv.171+0x134>
 800811e:	e0d2      	b.n	80082c6 <initialize.lto_priv.171+0x2da>
 8008120:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8008122:	b213      	sxth	r3, r2
 8008124:	3b01      	subs	r3, #1
 8008126:	2007      	movs	r0, #7
 8008128:	015b      	lsls	r3, r3, #5
 800812a:	b29b      	uxth	r3, r3
 800812c:	0019      	movs	r1, r3
 800812e:	0152      	lsls	r2, r2, #5
 8008130:	3a1a      	subs	r2, #26
 8008132:	b212      	sxth	r2, r2
 8008134:	17d4      	asrs	r4, r2, #31
 8008136:	4004      	ands	r4, r0
 8008138:	18a2      	adds	r2, r4, r2
 800813a:	10d2      	asrs	r2, r2, #3
 800813c:	00d2      	lsls	r2, r2, #3
 800813e:	390f      	subs	r1, #15
 8008140:	1a8c      	subs	r4, r1, r2
 8008142:	9a07      	ldr	r2, [sp, #28]
 8008144:	b224      	sxth	r4, r4
 8008146:	4294      	cmp	r4, r2
 8008148:	dc00      	bgt.n	800814c <initialize.lto_priv.171+0x160>
 800814a:	e0e7      	b.n	800831c <initialize.lto_priv.171+0x330>
 800814c:	4b68      	ldr	r3, [pc, #416]	; (80082f0 <initialize.lto_priv.171+0x304>)
 800814e:	0010      	movs	r0, r2
 8008150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008152:	9308      	str	r3, [sp, #32]
 8008154:	f7ff ff04 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008158:	2100      	movs	r1, #0
 800815a:	f008 fe8d 	bl	8010e78 <__aeabi_fcmplt>
 800815e:	4d69      	ldr	r5, [pc, #420]	; (8008304 <initialize.lto_priv.171+0x318>)
 8008160:	2800      	cmp	r0, #0
 8008162:	d100      	bne.n	8008166 <initialize.lto_priv.171+0x17a>
 8008164:	4d68      	ldr	r5, [pc, #416]	; (8008308 <initialize.lto_priv.171+0x31c>)
 8008166:	9807      	ldr	r0, [sp, #28]
 8008168:	f7ff fefa 	bl	8007f60 <points_to_meter.lto_priv.164>
 800816c:	1c06      	adds	r6, r0, #0
 800816e:	9807      	ldr	r0, [sp, #28]
 8008170:	f7ff fef6 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008174:	2100      	movs	r1, #0
 8008176:	f008 fe7f 	bl	8010e78 <__aeabi_fcmplt>
 800817a:	2800      	cmp	r0, #0
 800817c:	d100      	bne.n	8008180 <initialize.lto_priv.171+0x194>
 800817e:	e0a4      	b.n	80082ca <initialize.lto_priv.171+0x2de>
 8008180:	4962      	ldr	r1, [pc, #392]	; (800830c <initialize.lto_priv.171+0x320>)
 8008182:	1c30      	adds	r0, r6, #0
 8008184:	f008 f980 	bl	8010488 <__aeabi_fmul>
 8008188:	4961      	ldr	r1, [pc, #388]	; (8008310 <initialize.lto_priv.171+0x324>)
 800818a:	f007 fed1 	bl	800ff30 <__aeabi_fadd>
 800818e:	f008 febb 	bl	8010f08 <__aeabi_f2uiz>
 8008192:	0007      	movs	r7, r0
 8008194:	9807      	ldr	r0, [sp, #28]
 8008196:	f7ff fee3 	bl	8007f60 <points_to_meter.lto_priv.164>
 800819a:	1c06      	adds	r6, r0, #0
 800819c:	9807      	ldr	r0, [sp, #28]
 800819e:	f7ff fedf 	bl	8007f60 <points_to_meter.lto_priv.164>
 80081a2:	2100      	movs	r1, #0
 80081a4:	f008 fe68 	bl	8010e78 <__aeabi_fcmplt>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d100      	bne.n	80081ae <initialize.lto_priv.171+0x1c2>
 80081ac:	e090      	b.n	80082d0 <initialize.lto_priv.171+0x2e4>
 80081ae:	4957      	ldr	r1, [pc, #348]	; (800830c <initialize.lto_priv.171+0x320>)
 80081b0:	1c30      	adds	r0, r6, #0
 80081b2:	f008 f969 	bl	8010488 <__aeabi_fmul>
 80081b6:	4956      	ldr	r1, [pc, #344]	; (8008310 <initialize.lto_priv.171+0x324>)
 80081b8:	f007 feba 	bl	800ff30 <__aeabi_fadd>
 80081bc:	1c06      	adds	r6, r0, #0
 80081be:	9807      	ldr	r0, [sp, #28]
 80081c0:	f7ff fece 	bl	8007f60 <points_to_meter.lto_priv.164>
 80081c4:	4680      	mov	r8, r0
 80081c6:	9807      	ldr	r0, [sp, #28]
 80081c8:	f7ff feca 	bl	8007f60 <points_to_meter.lto_priv.164>
 80081cc:	2100      	movs	r1, #0
 80081ce:	f008 fe53 	bl	8010e78 <__aeabi_fcmplt>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d07f      	beq.n	80082d6 <initialize.lto_priv.171+0x2ea>
 80081d6:	494d      	ldr	r1, [pc, #308]	; (800830c <initialize.lto_priv.171+0x320>)
 80081d8:	4640      	mov	r0, r8
 80081da:	f008 f955 	bl	8010488 <__aeabi_fmul>
 80081de:	494c      	ldr	r1, [pc, #304]	; (8008310 <initialize.lto_priv.171+0x324>)
 80081e0:	f007 fea6 	bl	800ff30 <__aeabi_fadd>
 80081e4:	f008 fe90 	bl	8010f08 <__aeabi_f2uiz>
 80081e8:	f009 f8cc 	bl	8011384 <__aeabi_ui2f>
 80081ec:	1c01      	adds	r1, r0, #0
 80081ee:	1c30      	adds	r0, r6, #0
 80081f0:	f008 fa7c 	bl	80106ec <__aeabi_fsub>
 80081f4:	4947      	ldr	r1, [pc, #284]	; (8008314 <initialize.lto_priv.171+0x328>)
 80081f6:	f008 f947 	bl	8010488 <__aeabi_fmul>
 80081fa:	f008 fe85 	bl	8010f08 <__aeabi_f2uiz>
 80081fe:	4680      	mov	r8, r0
 8008200:	0020      	movs	r0, r4
 8008202:	f7ff fead 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008206:	2100      	movs	r1, #0
 8008208:	f008 fe36 	bl	8010e78 <__aeabi_fcmplt>
 800820c:	4e3d      	ldr	r6, [pc, #244]	; (8008304 <initialize.lto_priv.171+0x318>)
 800820e:	2800      	cmp	r0, #0
 8008210:	d100      	bne.n	8008214 <initialize.lto_priv.171+0x228>
 8008212:	4e3d      	ldr	r6, [pc, #244]	; (8008308 <initialize.lto_priv.171+0x31c>)
 8008214:	0020      	movs	r0, r4
 8008216:	f7ff fea3 	bl	8007f60 <points_to_meter.lto_priv.164>
 800821a:	4681      	mov	r9, r0
 800821c:	0020      	movs	r0, r4
 800821e:	f7ff fe9f 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008222:	2100      	movs	r1, #0
 8008224:	f008 fe28 	bl	8010e78 <__aeabi_fcmplt>
 8008228:	2800      	cmp	r0, #0
 800822a:	d057      	beq.n	80082dc <initialize.lto_priv.171+0x2f0>
 800822c:	4937      	ldr	r1, [pc, #220]	; (800830c <initialize.lto_priv.171+0x320>)
 800822e:	4648      	mov	r0, r9
 8008230:	f008 f92a 	bl	8010488 <__aeabi_fmul>
 8008234:	4936      	ldr	r1, [pc, #216]	; (8008310 <initialize.lto_priv.171+0x324>)
 8008236:	f007 fe7b 	bl	800ff30 <__aeabi_fadd>
 800823a:	f008 fe65 	bl	8010f08 <__aeabi_f2uiz>
 800823e:	4681      	mov	r9, r0
 8008240:	0020      	movs	r0, r4
 8008242:	f7ff fe8d 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008246:	4682      	mov	sl, r0
 8008248:	0020      	movs	r0, r4
 800824a:	f7ff fe89 	bl	8007f60 <points_to_meter.lto_priv.164>
 800824e:	2100      	movs	r1, #0
 8008250:	f008 fe12 	bl	8010e78 <__aeabi_fcmplt>
 8008254:	2800      	cmp	r0, #0
 8008256:	d044      	beq.n	80082e2 <initialize.lto_priv.171+0x2f6>
 8008258:	492c      	ldr	r1, [pc, #176]	; (800830c <initialize.lto_priv.171+0x320>)
 800825a:	4650      	mov	r0, sl
 800825c:	f008 f914 	bl	8010488 <__aeabi_fmul>
 8008260:	492b      	ldr	r1, [pc, #172]	; (8008310 <initialize.lto_priv.171+0x324>)
 8008262:	f007 fe65 	bl	800ff30 <__aeabi_fadd>
 8008266:	4682      	mov	sl, r0
 8008268:	0020      	movs	r0, r4
 800826a:	f7ff fe79 	bl	8007f60 <points_to_meter.lto_priv.164>
 800826e:	4683      	mov	fp, r0
 8008270:	0020      	movs	r0, r4
 8008272:	f7ff fe75 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008276:	2100      	movs	r1, #0
 8008278:	f008 fdfe 	bl	8010e78 <__aeabi_fcmplt>
 800827c:	2800      	cmp	r0, #0
 800827e:	d033      	beq.n	80082e8 <initialize.lto_priv.171+0x2fc>
 8008280:	4922      	ldr	r1, [pc, #136]	; (800830c <initialize.lto_priv.171+0x320>)
 8008282:	4658      	mov	r0, fp
 8008284:	f008 f900 	bl	8010488 <__aeabi_fmul>
 8008288:	4921      	ldr	r1, [pc, #132]	; (8008310 <initialize.lto_priv.171+0x324>)
 800828a:	f007 fe51 	bl	800ff30 <__aeabi_fadd>
 800828e:	f008 fe3b 	bl	8010f08 <__aeabi_f2uiz>
 8008292:	f009 f877 	bl	8011384 <__aeabi_ui2f>
 8008296:	1c01      	adds	r1, r0, #0
 8008298:	4650      	mov	r0, sl
 800829a:	f008 fa27 	bl	80106ec <__aeabi_fsub>
 800829e:	491d      	ldr	r1, [pc, #116]	; (8008314 <initialize.lto_priv.171+0x328>)
 80082a0:	f008 f8f2 	bl	8010488 <__aeabi_fmul>
 80082a4:	f008 fe30 	bl	8010f08 <__aeabi_f2uiz>
 80082a8:	464b      	mov	r3, r9
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	4643      	mov	r3, r8
 80082ae:	9004      	str	r0, [sp, #16]
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	2000      	movs	r0, #0
 80082b4:	9602      	str	r6, [sp, #8]
 80082b6:	9700      	str	r7, [sp, #0]
 80082b8:	002b      	movs	r3, r5
 80082ba:	4a17      	ldr	r2, [pc, #92]	; (8008318 <initialize.lto_priv.171+0x32c>)
 80082bc:	490e      	ldr	r1, [pc, #56]	; (80082f8 <initialize.lto_priv.171+0x30c>)
 80082be:	9c08      	ldr	r4, [sp, #32]
 80082c0:	47a0      	blx	r4
 80082c2:	2000      	movs	r0, #0
 80082c4:	e6ab      	b.n	800801e <initialize.lto_priv.171+0x32>
 80082c6:	783a      	ldrb	r2, [r7, #0]
 80082c8:	e72b      	b.n	8008122 <initialize.lto_priv.171+0x136>
 80082ca:	21fe      	movs	r1, #254	; 0xfe
 80082cc:	0589      	lsls	r1, r1, #22
 80082ce:	e758      	b.n	8008182 <initialize.lto_priv.171+0x196>
 80082d0:	21fe      	movs	r1, #254	; 0xfe
 80082d2:	0589      	lsls	r1, r1, #22
 80082d4:	e76c      	b.n	80081b0 <initialize.lto_priv.171+0x1c4>
 80082d6:	21fe      	movs	r1, #254	; 0xfe
 80082d8:	0589      	lsls	r1, r1, #22
 80082da:	e77d      	b.n	80081d8 <initialize.lto_priv.171+0x1ec>
 80082dc:	21fe      	movs	r1, #254	; 0xfe
 80082de:	0589      	lsls	r1, r1, #22
 80082e0:	e7a5      	b.n	800822e <initialize.lto_priv.171+0x242>
 80082e2:	21fe      	movs	r1, #254	; 0xfe
 80082e4:	0589      	lsls	r1, r1, #22
 80082e6:	e7b8      	b.n	800825a <initialize.lto_priv.171+0x26e>
 80082e8:	21fe      	movs	r1, #254	; 0xfe
 80082ea:	0589      	lsls	r1, r1, #22
 80082ec:	e7c9      	b.n	8008282 <initialize.lto_priv.171+0x296>
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	200004a8 	.word	0x200004a8
 80082f4:	0801d395 	.word	0x0801d395
 80082f8:	0801d2e9 	.word	0x0801d2e9
 80082fc:	0801d3c0 	.word	0x0801d3c0
 8008300:	0801d3f3 	.word	0x0801d3f3
 8008304:	0801e6f0 	.word	0x0801e6f0
 8008308:	0801e61b 	.word	0x0801e61b
 800830c:	bf800000 	.word	0xbf800000
 8008310:	350637bd 	.word	0x350637bd
 8008314:	49742400 	.word	0x49742400
 8008318:	0801d422 	.word	0x0801d422
 800831c:	3b30      	subs	r3, #48	; 0x30
 800831e:	b21c      	sxth	r4, r3
 8008320:	4544      	cmp	r4, r8
 8008322:	db00      	blt.n	8008326 <initialize.lto_priv.171+0x33a>
 8008324:	e0ce      	b.n	80084c4 <initialize.lto_priv.171+0x4d8>
 8008326:	4bd7      	ldr	r3, [pc, #860]	; (8008684 <initialize.lto_priv.171+0x698>)
 8008328:	4640      	mov	r0, r8
 800832a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832c:	9307      	str	r3, [sp, #28]
 800832e:	f7ff fe17 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008332:	2100      	movs	r1, #0
 8008334:	f008 fda0 	bl	8010e78 <__aeabi_fcmplt>
 8008338:	4dd3      	ldr	r5, [pc, #844]	; (8008688 <initialize.lto_priv.171+0x69c>)
 800833a:	2800      	cmp	r0, #0
 800833c:	d100      	bne.n	8008340 <initialize.lto_priv.171+0x354>
 800833e:	4dd3      	ldr	r5, [pc, #844]	; (800868c <initialize.lto_priv.171+0x6a0>)
 8008340:	4640      	mov	r0, r8
 8008342:	f7ff fe0d 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008346:	1c06      	adds	r6, r0, #0
 8008348:	4640      	mov	r0, r8
 800834a:	f7ff fe09 	bl	8007f60 <points_to_meter.lto_priv.164>
 800834e:	2100      	movs	r1, #0
 8008350:	f008 fd92 	bl	8010e78 <__aeabi_fcmplt>
 8008354:	2800      	cmp	r0, #0
 8008356:	d100      	bne.n	800835a <initialize.lto_priv.171+0x36e>
 8008358:	e0a2      	b.n	80084a0 <initialize.lto_priv.171+0x4b4>
 800835a:	49cd      	ldr	r1, [pc, #820]	; (8008690 <initialize.lto_priv.171+0x6a4>)
 800835c:	1c30      	adds	r0, r6, #0
 800835e:	f008 f893 	bl	8010488 <__aeabi_fmul>
 8008362:	49cc      	ldr	r1, [pc, #816]	; (8008694 <initialize.lto_priv.171+0x6a8>)
 8008364:	f007 fde4 	bl	800ff30 <__aeabi_fadd>
 8008368:	f008 fdce 	bl	8010f08 <__aeabi_f2uiz>
 800836c:	0007      	movs	r7, r0
 800836e:	4640      	mov	r0, r8
 8008370:	f7ff fdf6 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008374:	1c06      	adds	r6, r0, #0
 8008376:	4640      	mov	r0, r8
 8008378:	f7ff fdf2 	bl	8007f60 <points_to_meter.lto_priv.164>
 800837c:	2100      	movs	r1, #0
 800837e:	f008 fd7b 	bl	8010e78 <__aeabi_fcmplt>
 8008382:	2800      	cmp	r0, #0
 8008384:	d100      	bne.n	8008388 <initialize.lto_priv.171+0x39c>
 8008386:	e08e      	b.n	80084a6 <initialize.lto_priv.171+0x4ba>
 8008388:	49c1      	ldr	r1, [pc, #772]	; (8008690 <initialize.lto_priv.171+0x6a4>)
 800838a:	1c30      	adds	r0, r6, #0
 800838c:	f008 f87c 	bl	8010488 <__aeabi_fmul>
 8008390:	49c0      	ldr	r1, [pc, #768]	; (8008694 <initialize.lto_priv.171+0x6a8>)
 8008392:	f007 fdcd 	bl	800ff30 <__aeabi_fadd>
 8008396:	1c06      	adds	r6, r0, #0
 8008398:	4640      	mov	r0, r8
 800839a:	f7ff fde1 	bl	8007f60 <points_to_meter.lto_priv.164>
 800839e:	4681      	mov	r9, r0
 80083a0:	4640      	mov	r0, r8
 80083a2:	f7ff fddd 	bl	8007f60 <points_to_meter.lto_priv.164>
 80083a6:	2100      	movs	r1, #0
 80083a8:	f008 fd66 	bl	8010e78 <__aeabi_fcmplt>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d07d      	beq.n	80084ac <initialize.lto_priv.171+0x4c0>
 80083b0:	49b7      	ldr	r1, [pc, #732]	; (8008690 <initialize.lto_priv.171+0x6a4>)
 80083b2:	4648      	mov	r0, r9
 80083b4:	f008 f868 	bl	8010488 <__aeabi_fmul>
 80083b8:	49b6      	ldr	r1, [pc, #728]	; (8008694 <initialize.lto_priv.171+0x6a8>)
 80083ba:	f007 fdb9 	bl	800ff30 <__aeabi_fadd>
 80083be:	f008 fda3 	bl	8010f08 <__aeabi_f2uiz>
 80083c2:	f008 ffdf 	bl	8011384 <__aeabi_ui2f>
 80083c6:	1c01      	adds	r1, r0, #0
 80083c8:	1c30      	adds	r0, r6, #0
 80083ca:	f008 f98f 	bl	80106ec <__aeabi_fsub>
 80083ce:	49b2      	ldr	r1, [pc, #712]	; (8008698 <initialize.lto_priv.171+0x6ac>)
 80083d0:	f008 f85a 	bl	8010488 <__aeabi_fmul>
 80083d4:	f008 fd98 	bl	8010f08 <__aeabi_f2uiz>
 80083d8:	4680      	mov	r8, r0
 80083da:	0020      	movs	r0, r4
 80083dc:	f7ff fdc0 	bl	8007f60 <points_to_meter.lto_priv.164>
 80083e0:	2100      	movs	r1, #0
 80083e2:	f008 fd49 	bl	8010e78 <__aeabi_fcmplt>
 80083e6:	4ea8      	ldr	r6, [pc, #672]	; (8008688 <initialize.lto_priv.171+0x69c>)
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d100      	bne.n	80083ee <initialize.lto_priv.171+0x402>
 80083ec:	4ea7      	ldr	r6, [pc, #668]	; (800868c <initialize.lto_priv.171+0x6a0>)
 80083ee:	0020      	movs	r0, r4
 80083f0:	f7ff fdb6 	bl	8007f60 <points_to_meter.lto_priv.164>
 80083f4:	4681      	mov	r9, r0
 80083f6:	0020      	movs	r0, r4
 80083f8:	f7ff fdb2 	bl	8007f60 <points_to_meter.lto_priv.164>
 80083fc:	2100      	movs	r1, #0
 80083fe:	f008 fd3b 	bl	8010e78 <__aeabi_fcmplt>
 8008402:	2800      	cmp	r0, #0
 8008404:	d055      	beq.n	80084b2 <initialize.lto_priv.171+0x4c6>
 8008406:	49a2      	ldr	r1, [pc, #648]	; (8008690 <initialize.lto_priv.171+0x6a4>)
 8008408:	4648      	mov	r0, r9
 800840a:	f008 f83d 	bl	8010488 <__aeabi_fmul>
 800840e:	49a1      	ldr	r1, [pc, #644]	; (8008694 <initialize.lto_priv.171+0x6a8>)
 8008410:	f007 fd8e 	bl	800ff30 <__aeabi_fadd>
 8008414:	f008 fd78 	bl	8010f08 <__aeabi_f2uiz>
 8008418:	4681      	mov	r9, r0
 800841a:	0020      	movs	r0, r4
 800841c:	f7ff fda0 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008420:	4682      	mov	sl, r0
 8008422:	0020      	movs	r0, r4
 8008424:	f7ff fd9c 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008428:	2100      	movs	r1, #0
 800842a:	f008 fd25 	bl	8010e78 <__aeabi_fcmplt>
 800842e:	2800      	cmp	r0, #0
 8008430:	d042      	beq.n	80084b8 <initialize.lto_priv.171+0x4cc>
 8008432:	4997      	ldr	r1, [pc, #604]	; (8008690 <initialize.lto_priv.171+0x6a4>)
 8008434:	4650      	mov	r0, sl
 8008436:	f008 f827 	bl	8010488 <__aeabi_fmul>
 800843a:	4996      	ldr	r1, [pc, #600]	; (8008694 <initialize.lto_priv.171+0x6a8>)
 800843c:	f007 fd78 	bl	800ff30 <__aeabi_fadd>
 8008440:	4682      	mov	sl, r0
 8008442:	0020      	movs	r0, r4
 8008444:	f7ff fd8c 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008448:	4683      	mov	fp, r0
 800844a:	0020      	movs	r0, r4
 800844c:	f7ff fd88 	bl	8007f60 <points_to_meter.lto_priv.164>
 8008450:	2100      	movs	r1, #0
 8008452:	f008 fd11 	bl	8010e78 <__aeabi_fcmplt>
 8008456:	2800      	cmp	r0, #0
 8008458:	d031      	beq.n	80084be <initialize.lto_priv.171+0x4d2>
 800845a:	498d      	ldr	r1, [pc, #564]	; (8008690 <initialize.lto_priv.171+0x6a4>)
 800845c:	4658      	mov	r0, fp
 800845e:	f008 f813 	bl	8010488 <__aeabi_fmul>
 8008462:	498c      	ldr	r1, [pc, #560]	; (8008694 <initialize.lto_priv.171+0x6a8>)
 8008464:	f007 fd64 	bl	800ff30 <__aeabi_fadd>
 8008468:	f008 fd4e 	bl	8010f08 <__aeabi_f2uiz>
 800846c:	f008 ff8a 	bl	8011384 <__aeabi_ui2f>
 8008470:	1c01      	adds	r1, r0, #0
 8008472:	4650      	mov	r0, sl
 8008474:	f008 f93a 	bl	80106ec <__aeabi_fsub>
 8008478:	4987      	ldr	r1, [pc, #540]	; (8008698 <initialize.lto_priv.171+0x6ac>)
 800847a:	f008 f805 	bl	8010488 <__aeabi_fmul>
 800847e:	f008 fd43 	bl	8010f08 <__aeabi_f2uiz>
 8008482:	464b      	mov	r3, r9
 8008484:	9303      	str	r3, [sp, #12]
 8008486:	4643      	mov	r3, r8
 8008488:	9004      	str	r0, [sp, #16]
 800848a:	9301      	str	r3, [sp, #4]
 800848c:	2000      	movs	r0, #0
 800848e:	9602      	str	r6, [sp, #8]
 8008490:	9700      	str	r7, [sp, #0]
 8008492:	002b      	movs	r3, r5
 8008494:	4a81      	ldr	r2, [pc, #516]	; (800869c <initialize.lto_priv.171+0x6b0>)
 8008496:	4982      	ldr	r1, [pc, #520]	; (80086a0 <initialize.lto_priv.171+0x6b4>)
 8008498:	9c07      	ldr	r4, [sp, #28]
 800849a:	47a0      	blx	r4
 800849c:	2000      	movs	r0, #0
 800849e:	e5be      	b.n	800801e <initialize.lto_priv.171+0x32>
 80084a0:	21fe      	movs	r1, #254	; 0xfe
 80084a2:	0589      	lsls	r1, r1, #22
 80084a4:	e75a      	b.n	800835c <initialize.lto_priv.171+0x370>
 80084a6:	21fe      	movs	r1, #254	; 0xfe
 80084a8:	0589      	lsls	r1, r1, #22
 80084aa:	e76e      	b.n	800838a <initialize.lto_priv.171+0x39e>
 80084ac:	21fe      	movs	r1, #254	; 0xfe
 80084ae:	0589      	lsls	r1, r1, #22
 80084b0:	e77f      	b.n	80083b2 <initialize.lto_priv.171+0x3c6>
 80084b2:	21fe      	movs	r1, #254	; 0xfe
 80084b4:	0589      	lsls	r1, r1, #22
 80084b6:	e7a7      	b.n	8008408 <initialize.lto_priv.171+0x41c>
 80084b8:	21fe      	movs	r1, #254	; 0xfe
 80084ba:	0589      	lsls	r1, r1, #22
 80084bc:	e7ba      	b.n	8008434 <initialize.lto_priv.171+0x448>
 80084be:	21fe      	movs	r1, #254	; 0xfe
 80084c0:	0589      	lsls	r1, r1, #22
 80084c2:	e7cb      	b.n	800845c <initialize.lto_priv.171+0x470>
 80084c4:	0030      	movs	r0, r6
 80084c6:	f7f8 fbb5 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 80084ca:	4643      	mov	r3, r8
 80084cc:	9a07      	ldr	r2, [sp, #28]
 80084ce:	9009      	str	r0, [sp, #36]	; 0x24
 80084d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084d2:	1a98      	subs	r0, r3, r2
 80084d4:	f008 fb94 	bl	8010c00 <__divsi3>
 80084d8:	3001      	adds	r0, #1
 80084da:	b283      	uxth	r3, r0
 80084dc:	0030      	movs	r0, r6
 80084de:	930a      	str	r3, [sp, #40]	; 0x28
 80084e0:	f7f8 fbb3 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 80084e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e6:	4358      	muls	r0, r3
 80084e8:	b283      	uxth	r3, r0
 80084ea:	0030      	movs	r0, r6
 80084ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ee:	f7f8 fb6b 	bl	8000bc8 <configuration_is_valid>
 80084f2:	2300      	movs	r3, #0
 80084f4:	4298      	cmp	r0, r3
 80084f6:	d009      	beq.n	800850c <initialize.lto_priv.171+0x520>
 80084f8:	0032      	movs	r2, r6
 80084fa:	324f      	adds	r2, #79	; 0x4f
 80084fc:	0033      	movs	r3, r6
 80084fe:	7812      	ldrb	r2, [r2, #0]
 8008500:	3352      	adds	r3, #82	; 0x52
 8008502:	1e51      	subs	r1, r2, #1
 8008504:	418a      	sbcs	r2, r1
 8008506:	881b      	ldrh	r3, [r3, #0]
 8008508:	4252      	negs	r2, r2
 800850a:	4013      	ands	r3, r2
 800850c:	002a      	movs	r2, r5
 800850e:	32b8      	adds	r2, #184	; 0xb8
 8008510:	8013      	strh	r3, [r2, #0]
 8008512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008514:	4694      	mov	ip, r2
 8008516:	2280      	movs	r2, #128	; 0x80
 8008518:	4463      	add	r3, ip
 800851a:	0112      	lsls	r2, r2, #4
 800851c:	4293      	cmp	r3, r2
 800851e:	dd07      	ble.n	8008530 <initialize.lto_priv.171+0x544>
 8008520:	4b58      	ldr	r3, [pc, #352]	; (8008684 <initialize.lto_priv.171+0x698>)
 8008522:	2000      	movs	r0, #0
 8008524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008526:	4a5f      	ldr	r2, [pc, #380]	; (80086a4 <initialize.lto_priv.171+0x6b8>)
 8008528:	495d      	ldr	r1, [pc, #372]	; (80086a0 <initialize.lto_priv.171+0x6b4>)
 800852a:	4798      	blx	r3
 800852c:	2000      	movs	r0, #0
 800852e:	e576      	b.n	800801e <initialize.lto_priv.171+0x32>
 8008530:	0030      	movs	r0, r6
 8008532:	f7f8 fc01 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 8008536:	4681      	mov	r9, r0
 8008538:	0030      	movs	r0, r6
 800853a:	f7f8 fb45 	bl	8000bc8 <configuration_is_valid>
 800853e:	2406      	movs	r4, #6
 8008540:	2800      	cmp	r0, #0
 8008542:	d000      	beq.n	8008546 <initialize.lto_priv.171+0x55a>
 8008544:	783c      	ldrb	r4, [r7, #0]
 8008546:	0030      	movs	r0, r6
 8008548:	f7f8 fb3e 	bl	8000bc8 <configuration_is_valid>
 800854c:	2303      	movs	r3, #3
 800854e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008550:	435a      	muls	r2, r3
 8008552:	920c      	str	r2, [sp, #48]	; 0x30
 8008554:	2800      	cmp	r0, #0
 8008556:	d004      	beq.n	8008562 <initialize.lto_priv.171+0x576>
 8008558:	0032      	movs	r2, r6
 800855a:	326a      	adds	r2, #106	; 0x6a
 800855c:	7812      	ldrb	r2, [r2, #0]
 800855e:	2a00      	cmp	r2, #0
 8008560:	d142      	bne.n	80085e8 <initialize.lto_priv.171+0x5fc>
 8008562:	464b      	mov	r3, r9
 8008564:	2007      	movs	r0, #7
 8008566:	4358      	muls	r0, r3
 8008568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800856a:	300d      	adds	r0, #13
 800856c:	4358      	muls	r0, r3
 800856e:	4344      	muls	r4, r0
 8008570:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008572:	0023      	movs	r3, r4
 8008574:	4694      	mov	ip, r2
 8008576:	4463      	add	r3, ip
 8008578:	9313      	str	r3, [sp, #76]	; 0x4c
 800857a:	f7ff fcdf 	bl	8007f3c <get_pll_freq>
 800857e:	21f4      	movs	r1, #244	; 0xf4
 8008580:	0589      	lsls	r1, r1, #22
 8008582:	f007 ff81 	bl	8010488 <__aeabi_fmul>
 8008586:	9014      	str	r0, [sp, #80]	; 0x50
 8008588:	0030      	movs	r0, r6
 800858a:	f7f8 fb1d 	bl	8000bc8 <configuration_is_valid>
 800858e:	2800      	cmp	r0, #0
 8008590:	d03d      	beq.n	800860e <initialize.lto_priv.171+0x622>
 8008592:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008594:	f008 fef6 	bl	8011384 <__aeabi_ui2f>
 8008598:	6e74      	ldr	r4, [r6, #100]	; 0x64
 800859a:	1c07      	adds	r7, r0, #0
 800859c:	2100      	movs	r1, #0
 800859e:	1c20      	adds	r0, r4, #0
 80085a0:	f008 fc7e 	bl	8010ea0 <__aeabi_fcmpgt>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d032      	beq.n	800860e <initialize.lto_priv.171+0x622>
 80085a8:	1c21      	adds	r1, r4, #0
 80085aa:	9814      	ldr	r0, [sp, #80]	; 0x50
 80085ac:	f007 fe5a 	bl	8010264 <__aeabi_fdiv>
 80085b0:	1c39      	adds	r1, r7, #0
 80085b2:	f008 f89b 	bl	80106ec <__aeabi_fsub>
 80085b6:	1c04      	adds	r4, r0, #0
 80085b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80085ba:	f008 fee3 	bl	8011384 <__aeabi_ui2f>
 80085be:	1c01      	adds	r1, r0, #0
 80085c0:	1c20      	adds	r0, r4, #0
 80085c2:	f007 fe4f 	bl	8010264 <__aeabi_fdiv>
 80085c6:	21fc      	movs	r1, #252	; 0xfc
 80085c8:	0589      	lsls	r1, r1, #22
 80085ca:	f007 fcb1 	bl	800ff30 <__aeabi_fadd>
 80085ce:	f008 fe6f 	bl	80112b0 <__aeabi_f2iz>
 80085d2:	900d      	str	r0, [sp, #52]	; 0x34
 80085d4:	2800      	cmp	r0, #0
 80085d6:	da0f      	bge.n	80085f8 <initialize.lto_priv.171+0x60c>
 80085d8:	4b2a      	ldr	r3, [pc, #168]	; (8008684 <initialize.lto_priv.171+0x698>)
 80085da:	2000      	movs	r0, #0
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	4a32      	ldr	r2, [pc, #200]	; (80086a8 <initialize.lto_priv.171+0x6bc>)
 80085e0:	492f      	ldr	r1, [pc, #188]	; (80086a0 <initialize.lto_priv.171+0x6b4>)
 80085e2:	4798      	blx	r3
 80085e4:	2000      	movs	r0, #0
 80085e6:	e51a      	b.n	800801e <initialize.lto_priv.171+0x32>
 80085e8:	464a      	mov	r2, r9
 80085ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80085ec:	930c      	str	r3, [sp, #48]	; 0x30
 80085ee:	4350      	muls	r0, r2
 80085f0:	300f      	adds	r0, #15
 80085f2:	4344      	muls	r4, r0
 80085f4:	34d4      	adds	r4, #212	; 0xd4
 80085f6:	e7bb      	b.n	8008570 <initialize.lto_priv.171+0x584>
 80085f8:	4b2c      	ldr	r3, [pc, #176]	; (80086ac <initialize.lto_priv.171+0x6c0>)
 80085fa:	4298      	cmp	r0, r3
 80085fc:	dd08      	ble.n	8008610 <initialize.lto_priv.171+0x624>
 80085fe:	4b21      	ldr	r3, [pc, #132]	; (8008684 <initialize.lto_priv.171+0x698>)
 8008600:	2000      	movs	r0, #0
 8008602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008604:	4a2a      	ldr	r2, [pc, #168]	; (80086b0 <initialize.lto_priv.171+0x6c4>)
 8008606:	4926      	ldr	r1, [pc, #152]	; (80086a0 <initialize.lto_priv.171+0x6b4>)
 8008608:	4798      	blx	r3
 800860a:	2000      	movs	r0, #0
 800860c:	e507      	b.n	800801e <initialize.lto_priv.171+0x32>
 800860e:	900d      	str	r0, [sp, #52]	; 0x34
 8008610:	002b      	movs	r3, r5
 8008612:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008614:	33b6      	adds	r3, #182	; 0xb6
 8008616:	801a      	strh	r2, [r3, #0]
 8008618:	0030      	movs	r0, r6
 800861a:	f7f8 fba1 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 800861e:	002b      	movs	r3, r5
 8008620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008622:	33ba      	adds	r3, #186	; 0xba
 8008624:	7018      	strb	r0, [r3, #0]
 8008626:	3b06      	subs	r3, #6
 8008628:	801a      	strh	r2, [r3, #0]
 800862a:	0033      	movs	r3, r6
 800862c:	332e      	adds	r3, #46	; 0x2e
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d022      	beq.n	800867a <initialize.lto_priv.171+0x68e>
 8008634:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 8008636:	465b      	mov	r3, fp
 8008638:	809c      	strh	r4, [r3, #4]
 800863a:	466b      	mov	r3, sp
 800863c:	8b9f      	ldrh	r7, [r3, #28]
 800863e:	465b      	mov	r3, fp
 8008640:	9a07      	ldr	r2, [sp, #28]
 8008642:	811a      	strh	r2, [r3, #8]
 8008644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008646:	815a      	strh	r2, [r3, #10]
 8008648:	2301      	movs	r3, #1
 800864a:	4699      	mov	r9, r3
 800864c:	465b      	mov	r3, fp
 800864e:	464a      	mov	r2, r9
 8008650:	819a      	strh	r2, [r3, #12]
 8008652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008654:	3b01      	subs	r3, #1
 8008656:	b29b      	uxth	r3, r3
 8008658:	2b07      	cmp	r3, #7
 800865a:	d806      	bhi.n	800866a <initialize.lto_priv.171+0x67e>
 800865c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800865e:	2008      	movs	r0, #8
 8008660:	f008 fbb4 	bl	8010dcc <__aeabi_idivmod>
 8008664:	910e      	str	r1, [sp, #56]	; 0x38
 8008666:	2900      	cmp	r1, #0
 8008668:	d026      	beq.n	80086b8 <initialize.lto_priv.171+0x6cc>
 800866a:	4b06      	ldr	r3, [pc, #24]	; (8008684 <initialize.lto_priv.171+0x698>)
 800866c:	2000      	movs	r0, #0
 800866e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008670:	4a10      	ldr	r2, [pc, #64]	; (80086b4 <initialize.lto_priv.171+0x6c8>)
 8008672:	490b      	ldr	r1, [pc, #44]	; (80086a0 <initialize.lto_priv.171+0x6b4>)
 8008674:	4798      	blx	r3
 8008676:	2000      	movs	r0, #0
 8008678:	e4d1      	b.n	800801e <initialize.lto_priv.171+0x32>
 800867a:	0033      	movs	r3, r6
 800867c:	3332      	adds	r3, #50	; 0x32
 800867e:	781c      	ldrb	r4, [r3, #0]
 8008680:	e7d9      	b.n	8008636 <initialize.lto_priv.171+0x64a>
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	200004a8 	.word	0x200004a8
 8008688:	0801e6f0 	.word	0x0801e6f0
 800868c:	0801e61b 	.word	0x0801e61b
 8008690:	bf800000 	.word	0xbf800000
 8008694:	350637bd 	.word	0x350637bd
 8008698:	49742400 	.word	0x49742400
 800869c:	0801d45f 	.word	0x0801d45f
 80086a0:	0801d2e9 	.word	0x0801d2e9
 80086a4:	0801d49c 	.word	0x0801d49c
 80086a8:	0801d4fc 	.word	0x0801d4fc
 80086ac:	0000fffe 	.word	0x0000fffe
 80086b0:	0801d51d 	.word	0x0801d51d
 80086b4:	0801d53d 	.word	0x0801d53d
 80086b8:	b224      	sxth	r4, r4
 80086ba:	3c01      	subs	r4, #1
 80086bc:	0164      	lsls	r4, r4, #5
 80086be:	b2a3      	uxth	r3, r4
 80086c0:	001c      	movs	r4, r3
 80086c2:	3c0f      	subs	r4, #15
 80086c4:	b2a4      	uxth	r4, r4
 80086c6:	1b3f      	subs	r7, r7, r4
 80086c8:	b23f      	sxth	r7, r7
 80086ca:	9315      	str	r3, [sp, #84]	; 0x54
 80086cc:	10fb      	asrs	r3, r7, #3
 80086ce:	9318      	str	r3, [sp, #96]	; 0x60
 80086d0:	4643      	mov	r3, r8
 80086d2:	1b1c      	subs	r4, r3, r4
 80086d4:	464b      	mov	r3, r9
 80086d6:	10f9      	asrs	r1, r7, #3
 80086d8:	b224      	sxth	r4, r4
 80086da:	10e2      	asrs	r2, r4, #3
 80086dc:	1a5b      	subs	r3, r3, r1
 80086de:	189b      	adds	r3, r3, r2
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	9311      	str	r3, [sp, #68]	; 0x44
 80086e4:	2244      	movs	r2, #68	; 0x44
 80086e6:	466b      	mov	r3, sp
 80086e8:	189b      	adds	r3, r3, r2
 80086ea:	2200      	movs	r2, #0
 80086ec:	5e9b      	ldrsh	r3, [r3, r2]
 80086ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086f0:	2008      	movs	r0, #8
 80086f2:	4699      	mov	r9, r3
 80086f4:	f008 fa84 	bl	8010c00 <__divsi3>
 80086f8:	9010      	str	r0, [sp, #64]	; 0x40
 80086fa:	48db      	ldr	r0, [pc, #876]	; (8008a68 <initialize.lto_priv.171+0xa7c>)
 80086fc:	4007      	ands	r7, r0
 80086fe:	9012      	str	r0, [sp, #72]	; 0x48
 8008700:	d504      	bpl.n	800870c <initialize.lto_priv.171+0x720>
 8008702:	2308      	movs	r3, #8
 8008704:	3f01      	subs	r7, #1
 8008706:	425b      	negs	r3, r3
 8008708:	431f      	orrs	r7, r3
 800870a:	3701      	adds	r7, #1
 800870c:	b23f      	sxth	r7, r7
 800870e:	2f00      	cmp	r7, #0
 8008710:	da01      	bge.n	8008716 <initialize.lto_priv.171+0x72a>
 8008712:	3708      	adds	r7, #8
 8008714:	b23f      	sxth	r7, r7
 8008716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008718:	0038      	movs	r0, r7
 800871a:	f008 fb57 	bl	8010dcc <__aeabi_idivmod>
 800871e:	466b      	mov	r3, sp
 8008720:	910f      	str	r1, [sp, #60]	; 0x3c
 8008722:	213c      	movs	r1, #60	; 0x3c
 8008724:	5e59      	ldrsh	r1, [r3, r1]
 8008726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008728:	9812      	ldr	r0, [sp, #72]	; 0x48
 800872a:	3b01      	subs	r3, #1
 800872c:	9316      	str	r3, [sp, #88]	; 0x58
 800872e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008732:	4004      	ands	r4, r0
 8008734:	4353      	muls	r3, r2
 8008736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008738:	4694      	mov	ip, r2
 800873a:	4463      	add	r3, ip
 800873c:	b29b      	uxth	r3, r3
 800873e:	b21a      	sxth	r2, r3
 8008740:	2c00      	cmp	r4, #0
 8008742:	da04      	bge.n	800874e <initialize.lto_priv.171+0x762>
 8008744:	2008      	movs	r0, #8
 8008746:	3c01      	subs	r4, #1
 8008748:	4240      	negs	r0, r0
 800874a:	4304      	orrs	r4, r0
 800874c:	3401      	adds	r4, #1
 800874e:	b224      	sxth	r4, r4
 8008750:	2c00      	cmp	r4, #0
 8008752:	da01      	bge.n	8008758 <initialize.lto_priv.171+0x76c>
 8008754:	3408      	adds	r4, #8
 8008756:	b224      	sxth	r4, r4
 8008758:	4648      	mov	r0, r9
 800875a:	2801      	cmp	r0, #1
 800875c:	d172      	bne.n	8008844 <initialize.lto_priv.171+0x858>
 800875e:	46cc      	mov	ip, r9
 8008760:	42b9      	cmp	r1, r7
 8008762:	d102      	bne.n	800876a <initialize.lto_priv.171+0x77e>
 8008764:	1b10      	subs	r0, r2, r4
 8008766:	1e42      	subs	r2, r0, #1
 8008768:	4190      	sbcs	r0, r2
 800876a:	4662      	mov	r2, ip
 800876c:	4002      	ands	r2, r0
 800876e:	9210      	str	r2, [sp, #64]	; 0x40
 8008770:	2200      	movs	r2, #0
 8008772:	9212      	str	r2, [sp, #72]	; 0x48
 8008774:	2000      	movs	r0, #0
 8008776:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008778:	9910      	ldr	r1, [sp, #64]	; 0x40
 800877a:	1a52      	subs	r2, r2, r1
 800877c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800877e:	1a52      	subs	r2, r2, r1
 8008780:	b212      	sxth	r2, r2
 8008782:	9211      	str	r2, [sp, #68]	; 0x44
 8008784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008786:	4282      	cmp	r2, r0
 8008788:	d008      	beq.n	800879c <initialize.lto_priv.171+0x7b0>
 800878a:	464a      	mov	r2, r9
 800878c:	2a01      	cmp	r2, #1
 800878e:	d100      	bne.n	8008792 <initialize.lto_priv.171+0x7a6>
 8008790:	b2a3      	uxth	r3, r4
 8008792:	1bd8      	subs	r0, r3, r7
 8008794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008796:	f008 fa33 	bl	8010c00 <__divsi3>
 800879a:	b280      	uxth	r0, r0
 800879c:	465b      	mov	r3, fp
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	2205      	movs	r2, #5
 80087a2:	0019      	movs	r1, r3
 80087a4:	4699      	mov	r9, r3
 80087a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80087a8:	318c      	adds	r1, #140	; 0x8c
 80087aa:	00db      	lsls	r3, r3, #3
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	600b      	str	r3, [r1, #0]
 80087b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80087b2:	464a      	mov	r2, r9
 80087b4:	468c      	mov	ip, r1
 80087b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087b8:	3290      	adds	r2, #144	; 0x90
 80087ba:	3b32      	subs	r3, #50	; 0x32
 80087bc:	b21b      	sxth	r3, r3
 80087be:	18ff      	adds	r7, r7, r3
 80087c0:	4463      	add	r3, ip
 80087c2:	6053      	str	r3, [r2, #4]
 80087c4:	464b      	mov	r3, r9
 80087c6:	6017      	str	r7, [r2, #0]
 80087c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087ca:	3398      	adds	r3, #152	; 0x98
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	464a      	mov	r2, r9
 80087d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80087d4:	17db      	asrs	r3, r3, #31
 80087d6:	1a5b      	subs	r3, r3, r1
 80087d8:	329c      	adds	r2, #156	; 0x9c
 80087da:	0fdb      	lsrs	r3, r3, #31
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	464b      	mov	r3, r9
 80087e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087e2:	33a0      	adds	r3, #160	; 0xa0
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80087e8:	6058      	str	r0, [r3, #4]
 80087ea:	609a      	str	r2, [r3, #8]
 80087ec:	4663      	mov	r3, ip
 80087ee:	464f      	mov	r7, r9
 80087f0:	1ae0      	subs	r0, r4, r3
 80087f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087f4:	f008 fa04 	bl	8010c00 <__divsi3>
 80087f8:	2200      	movs	r2, #0
 80087fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087fc:	37ac      	adds	r7, #172	; 0xac
 80087fe:	6038      	str	r0, [r7, #0]
 8008800:	4293      	cmp	r3, r2
 8008802:	dd01      	ble.n	8008808 <initialize.lto_priv.171+0x81c>
 8008804:	001a      	movs	r2, r3
 8008806:	3a01      	subs	r2, #1
 8008808:	464b      	mov	r3, r9
 800880a:	33b0      	adds	r3, #176	; 0xb0
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	0030      	movs	r0, r6
 8008810:	f7f8 f9da 	bl	8000bc8 <configuration_is_valid>
 8008814:	2300      	movs	r3, #0
 8008816:	4298      	cmp	r0, r3
 8008818:	d005      	beq.n	8008826 <initialize.lto_priv.171+0x83a>
 800881a:	0033      	movs	r3, r6
 800881c:	336a      	adds	r3, #106	; 0x6a
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	1e5a      	subs	r2, r3, #1
 8008822:	4193      	sbcs	r3, r2
 8008824:	b2db      	uxtb	r3, r3
 8008826:	222e      	movs	r2, #46	; 0x2e
 8008828:	66aa      	str	r2, [r5, #104]	; 0x68
 800882a:	002a      	movs	r2, r5
 800882c:	3270      	adds	r2, #112	; 0x70
 800882e:	7013      	strb	r3, [r2, #0]
 8008830:	0030      	movs	r0, r6
 8008832:	f7f8 fa5f 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 8008836:	2803      	cmp	r0, #3
 8008838:	d813      	bhi.n	8008862 <initialize.lto_priv.171+0x876>
 800883a:	2300      	movs	r3, #0
 800883c:	f008 f942 	bl	8010ac4 <__gnu_thumb1_case_uqi>
 8008840:	33231d0d 	.word	0x33231d0d
 8008844:	1bc9      	subs	r1, r1, r7
 8008846:	1e48      	subs	r0, r1, #1
 8008848:	4181      	sbcs	r1, r0
 800884a:	1b12      	subs	r2, r2, r4
 800884c:	b2c9      	uxtb	r1, r1
 800884e:	9110      	str	r1, [sp, #64]	; 0x40
 8008850:	1e51      	subs	r1, r2, #1
 8008852:	418a      	sbcs	r2, r1
 8008854:	b2d2      	uxtb	r2, r2
 8008856:	9212      	str	r2, [sp, #72]	; 0x48
 8008858:	e78c      	b.n	8008774 <initialize.lto_priv.171+0x788>
 800885a:	626b      	str	r3, [r5, #36]	; 0x24
 800885c:	62ab      	str	r3, [r5, #40]	; 0x28
 800885e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8008860:	632b      	str	r3, [r5, #48]	; 0x30
 8008862:	0030      	movs	r0, r6
 8008864:	f7f8 fa85 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8008868:	2804      	cmp	r0, #4
 800886a:	d829      	bhi.n	80088c0 <initialize.lto_priv.171+0x8d4>
 800886c:	2300      	movs	r3, #0
 800886e:	2201      	movs	r2, #1
 8008870:	f008 f928 	bl	8010ac4 <__gnu_thumb1_case_uqi>
 8008874:	f0ec2323 	.word	0xf0ec2323
 8008878:	e8          	.byte	0xe8
 8008879:	00          	.byte	0x00
 800887a:	2201      	movs	r2, #1
 800887c:	626b      	str	r3, [r5, #36]	; 0x24
 800887e:	62aa      	str	r2, [r5, #40]	; 0x28
 8008880:	62eb      	str	r3, [r5, #44]	; 0x2c
 8008882:	632b      	str	r3, [r5, #48]	; 0x30
 8008884:	e7ed      	b.n	8008862 <initialize.lto_priv.171+0x876>
 8008886:	0030      	movs	r0, r6
 8008888:	f7f8 fa1e 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 800888c:	aa1a      	add	r2, sp, #104	; 0x68
 800888e:	a91b      	add	r1, sp, #108	; 0x6c
 8008890:	f7ff fa0c 	bl	8007cac <acc_radar_engine_common_frequency_to_main_clk>
 8008894:	2301      	movs	r3, #1
 8008896:	626b      	str	r3, [r5, #36]	; 0x24
 8008898:	2300      	movs	r3, #0
 800889a:	62ab      	str	r3, [r5, #40]	; 0x28
 800889c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800889e:	62eb      	str	r3, [r5, #44]	; 0x2c
 80088a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80088a2:	632b      	str	r3, [r5, #48]	; 0x30
 80088a4:	e7dd      	b.n	8008862 <initialize.lto_priv.171+0x876>
 80088a6:	0030      	movs	r0, r6
 80088a8:	f7f8 fa0e 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 80088ac:	aa1a      	add	r2, sp, #104	; 0x68
 80088ae:	a91b      	add	r1, sp, #108	; 0x6c
 80088b0:	f7ff f9fc 	bl	8007cac <acc_radar_engine_common_frequency_to_main_clk>
 80088b4:	2301      	movs	r3, #1
 80088b6:	626b      	str	r3, [r5, #36]	; 0x24
 80088b8:	e7ef      	b.n	800889a <initialize.lto_priv.171+0x8ae>
 80088ba:	636a      	str	r2, [r5, #52]	; 0x34
 80088bc:	63aa      	str	r2, [r5, #56]	; 0x38
 80088be:	63eb      	str	r3, [r5, #60]	; 0x3c
 80088c0:	0030      	movs	r0, r6
 80088c2:	f7f8 f981 	bl	8000bc8 <configuration_is_valid>
 80088c6:	2300      	movs	r3, #0
 80088c8:	0004      	movs	r4, r0
 80088ca:	4298      	cmp	r0, r3
 80088cc:	d00b      	beq.n	80088e6 <initialize.lto_priv.171+0x8fa>
 80088ce:	0033      	movs	r3, r6
 80088d0:	3350      	adds	r3, #80	; 0x50
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80088d6:	0033      	movs	r3, r6
 80088d8:	3352      	adds	r3, #82	; 0x52
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	9319      	str	r3, [sp, #100]	; 0x64
 80088de:	0033      	movs	r3, r6
 80088e0:	334f      	adds	r3, #79	; 0x4f
 80088e2:	781c      	ldrb	r4, [r3, #0]
 80088e4:	0023      	movs	r3, r4
 80088e6:	002a      	movs	r2, r5
 80088e8:	3208      	adds	r2, #8
 80088ea:	67d3      	str	r3, [r2, #124]	; 0x7c
 80088ec:	2c00      	cmp	r4, #0
 80088ee:	d003      	beq.n	80088f8 <initialize.lto_priv.171+0x90c>
 80088f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088f2:	3280      	adds	r2, #128	; 0x80
 80088f4:	3b01      	subs	r3, #1
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	0030      	movs	r0, r6
 80088fa:	f7f8 fa31 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 80088fe:	2701      	movs	r7, #1
 8008900:	2800      	cmp	r0, #0
 8008902:	d000      	beq.n	8008906 <initialize.lto_priv.171+0x91a>
 8008904:	e0aa      	b.n	8008a5c <initialize.lto_priv.171+0xa70>
 8008906:	2c00      	cmp	r4, #0
 8008908:	d001      	beq.n	800890e <initialize.lto_priv.171+0x922>
 800890a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800890c:	930e      	str	r3, [sp, #56]	; 0x38
 800890e:	003b      	movs	r3, r7
 8008910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008912:	0030      	movs	r0, r6
 8008914:	4393      	bics	r3, r2
 8008916:	642b      	str	r3, [r5, #64]	; 0x40
 8008918:	f7f8 fa19 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 800891c:	4078      	eors	r0, r7
 800891e:	b2c0      	uxtb	r0, r0
 8008920:	6468      	str	r0, [r5, #68]	; 0x44
 8008922:	64af      	str	r7, [r5, #72]	; 0x48
 8008924:	0030      	movs	r0, r6
 8008926:	f7f8 fa07 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 800892a:	2801      	cmp	r0, #1
 800892c:	d800      	bhi.n	8008930 <initialize.lto_priv.171+0x944>
 800892e:	e097      	b.n	8008a60 <initialize.lto_priv.171+0xa74>
 8008930:	2301      	movs	r3, #1
 8008932:	3802      	subs	r0, #2
 8008934:	6528      	str	r0, [r5, #80]	; 0x50
 8008936:	64eb      	str	r3, [r5, #76]	; 0x4c
 8008938:	0030      	movs	r0, r6
 800893a:	f7f8 f945 	bl	8000bc8 <configuration_is_valid>
 800893e:	2300      	movs	r3, #0
 8008940:	4298      	cmp	r0, r3
 8008942:	d000      	beq.n	8008946 <initialize.lto_priv.171+0x95a>
 8008944:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8008946:	656b      	str	r3, [r5, #84]	; 0x54
 8008948:	0030      	movs	r0, r6
 800894a:	f7f8 f9b2 	bl	8000cb2 <acc_base_configuration_integrator_get>
 800894e:	65a8      	str	r0, [r5, #88]	; 0x58
 8008950:	0030      	movs	r0, r6
 8008952:	f7f8 f999 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 8008956:	65e8      	str	r0, [r5, #92]	; 0x5c
 8008958:	0030      	movs	r0, r6
 800895a:	f7f8 f976 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 800895e:	6628      	str	r0, [r5, #96]	; 0x60
 8008960:	0030      	movs	r0, r6
 8008962:	f7f8 f967 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8008966:	67a8      	str	r0, [r5, #120]	; 0x78
 8008968:	0030      	movs	r0, r6
 800896a:	f7f8 f947 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 800896e:	2601      	movs	r6, #1
 8008970:	465b      	mov	r3, fp
 8008972:	4070      	eors	r0, r6
 8008974:	b2c0      	uxtb	r0, r0
 8008976:	67e8      	str	r0, [r5, #124]	; 0x7c
 8008978:	889b      	ldrh	r3, [r3, #4]
 800897a:	666b      	str	r3, [r5, #100]	; 0x64
 800897c:	465b      	mov	r3, fp
 800897e:	895b      	ldrh	r3, [r3, #10]
 8008980:	3b01      	subs	r3, #1
 8008982:	66eb      	str	r3, [r5, #108]	; 0x6c
 8008984:	465b      	mov	r3, fp
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	33b6      	adds	r3, #182	; 0xb6
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	676b      	str	r3, [r5, #116]	; 0x74
 800898e:	f7ff f985 	bl	8007c9c <acc_rss_integration_get_sensor_reference_frequency>
 8008992:	1d2b      	adds	r3, r5, #4
 8008994:	67d8      	str	r0, [r3, #124]	; 0x7c
 8008996:	f7ff fad1 	bl	8007f3c <get_pll_freq>
 800899a:	1c07      	adds	r7, r0, #0
 800899c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800899e:	f008 fcf1 	bl	8011384 <__aeabi_ui2f>
 80089a2:	1c04      	adds	r4, r0, #0
 80089a4:	20fe      	movs	r0, #254	; 0xfe
 80089a6:	1c39      	adds	r1, r7, #0
 80089a8:	0580      	lsls	r0, r0, #22
 80089aa:	f007 fc5b 	bl	8010264 <__aeabi_fdiv>
 80089ae:	1c01      	adds	r1, r0, #0
 80089b0:	1c20      	adds	r0, r4, #0
 80089b2:	f007 fd69 	bl	8010488 <__aeabi_fmul>
 80089b6:	4653      	mov	r3, sl
 80089b8:	60d8      	str	r0, [r3, #12]
 80089ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80089be:	35b8      	adds	r5, #184	; 0xb8
 80089c0:	4358      	muls	r0, r3
 80089c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089c4:	469c      	mov	ip, r3
 80089c6:	4460      	add	r0, ip
 80089c8:	f008 fcdc 	bl	8011384 <__aeabi_ui2f>
 80089cc:	1c01      	adds	r1, r0, #0
 80089ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 80089d0:	f007 fc48 	bl	8010264 <__aeabi_fdiv>
 80089d4:	4653      	mov	r3, sl
 80089d6:	6118      	str	r0, [r3, #16]
 80089d8:	9807      	ldr	r0, [sp, #28]
 80089da:	f7ff fac1 	bl	8007f60 <points_to_meter.lto_priv.164>
 80089de:	4653      	mov	r3, sl
 80089e0:	6018      	str	r0, [r3, #0]
 80089e2:	4640      	mov	r0, r8
 80089e4:	f7ff fabc 	bl	8007f60 <points_to_meter.lto_priv.164>
 80089e8:	4653      	mov	r3, sl
 80089ea:	6819      	ldr	r1, [r3, #0]
 80089ec:	6098      	str	r0, [r3, #8]
 80089ee:	f007 fe7d 	bl	80106ec <__aeabi_fsub>
 80089f2:	4653      	mov	r3, sl
 80089f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089f6:	6058      	str	r0, [r3, #4]
 80089f8:	82da      	strh	r2, [r3, #22]
 80089fa:	2300      	movs	r3, #0
 80089fc:	4652      	mov	r2, sl
 80089fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a00:	8293      	strh	r3, [r2, #20]
 8008a02:	8316      	strh	r6, [r2, #24]
 8008a04:	9a08      	ldr	r2, [sp, #32]
 8008a06:	2013      	movs	r0, #19
 8008a08:	8011      	strh	r1, [r2, #0]
 8008a0a:	8151      	strh	r1, [r2, #10]
 8008a0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a0e:	8053      	strh	r3, [r2, #2]
 8008a10:	8111      	strh	r1, [r2, #8]
 8008a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a14:	8313      	strh	r3, [r2, #24]
 8008a16:	8091      	strh	r1, [r2, #4]
 8008a18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a1a:	80d6      	strh	r6, [r2, #6]
 8008a1c:	8291      	strh	r1, [r2, #20]
 8008a1e:	82d1      	strh	r1, [r2, #22]
 8008a20:	4659      	mov	r1, fp
 8008a22:	8216      	strh	r6, [r2, #16]
 8008a24:	aa1b      	add	r2, sp, #108	; 0x6c
 8008a26:	8013      	strh	r3, [r2, #0]
 8008a28:	6809      	ldr	r1, [r1, #0]
 8008a2a:	0033      	movs	r3, r6
 8008a2c:	f7f7 fb84 	bl	8000138 <acc_probes_execute_uint16>
 8008a30:	882b      	ldrh	r3, [r5, #0]
 8008a32:	9a08      	ldr	r2, [sp, #32]
 8008a34:	3303      	adds	r3, #3
 8008a36:	81d3      	strh	r3, [r2, #14]
 8008a38:	2380      	movs	r3, #128	; 0x80
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	8193      	strh	r3, [r2, #12]
 8008a3e:	0030      	movs	r0, r6
 8008a40:	f7ff faed 	bl	800801e <initialize.lto_priv.171+0x32>
 8008a44:	636a      	str	r2, [r5, #52]	; 0x34
 8008a46:	63aa      	str	r2, [r5, #56]	; 0x38
 8008a48:	63ea      	str	r2, [r5, #60]	; 0x3c
 8008a4a:	e739      	b.n	80088c0 <initialize.lto_priv.171+0x8d4>
 8008a4c:	636a      	str	r2, [r5, #52]	; 0x34
 8008a4e:	63ab      	str	r3, [r5, #56]	; 0x38
 8008a50:	63eb      	str	r3, [r5, #60]	; 0x3c
 8008a52:	e735      	b.n	80088c0 <initialize.lto_priv.171+0x8d4>
 8008a54:	636b      	str	r3, [r5, #52]	; 0x34
 8008a56:	63ab      	str	r3, [r5, #56]	; 0x38
 8008a58:	63eb      	str	r3, [r5, #60]	; 0x3c
 8008a5a:	e731      	b.n	80088c0 <initialize.lto_priv.171+0x8d4>
 8008a5c:	970e      	str	r7, [sp, #56]	; 0x38
 8008a5e:	e756      	b.n	800890e <initialize.lto_priv.171+0x922>
 8008a60:	2000      	movs	r0, #0
 8008a62:	0003      	movs	r3, r0
 8008a64:	e766      	b.n	8008934 <initialize.lto_priv.171+0x948>
 8008a66:	46c0      	nop			; (mov r8, r8)
 8008a68:	80000007 	.word	0x80000007

08008a6c <calibrate.lto_priv.162>:
 8008a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a6e:	4657      	mov	r7, sl
 8008a70:	4645      	mov	r5, r8
 8008a72:	46de      	mov	lr, fp
 8008a74:	464e      	mov	r6, r9
 8008a76:	b5e0      	push	{r5, r6, r7, lr}
 8008a78:	4cb4      	ldr	r4, [pc, #720]	; (8008d4c <calibrate.lto_priv.162+0x2e0>)
 8008a7a:	000f      	movs	r7, r1
 8008a7c:	44a5      	add	sp, r4
 8008a7e:	9337      	str	r3, [sp, #220]	; 0xdc
 8008a80:	4bb3      	ldr	r3, [pc, #716]	; (8008d50 <calibrate.lto_priv.162+0x2e4>)
 8008a82:	920f      	str	r2, [sp, #60]	; 0x3c
 8008a84:	4698      	mov	r8, r3
 8008a86:	3330      	adds	r3, #48	; 0x30
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	0004      	movs	r4, r0
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d905      	bls.n	8008a9c <calibrate.lto_priv.162+0x30>
 8008a90:	4643      	mov	r3, r8
 8008a92:	4ab0      	ldr	r2, [pc, #704]	; (8008d54 <calibrate.lto_priv.162+0x2e8>)
 8008a94:	49b0      	ldr	r1, [pc, #704]	; (8008d58 <calibrate.lto_priv.162+0x2ec>)
 8008a96:	2004      	movs	r0, #4
 8008a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9a:	4798      	blx	r3
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	6965      	ldr	r5, [r4, #20]
 8008aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa2:	002b      	movs	r3, r5
 8008aa4:	2600      	movs	r6, #0
 8008aa6:	33bc      	adds	r3, #188	; 0xbc
 8008aa8:	ac48      	add	r4, sp, #288	; 0x120
 8008aaa:	601e      	str	r6, [r3, #0]
 8008aac:	0020      	movs	r0, r4
 8008aae:	f7ff f90d 	bl	8007ccc <calculate_pll_divisors.lto_priv.160>
 8008ab2:	42b0      	cmp	r0, r6
 8008ab4:	d10a      	bne.n	8008acc <calibrate.lto_priv.162+0x60>
 8008ab6:	2400      	movs	r4, #0
 8008ab8:	0020      	movs	r0, r4
 8008aba:	239b      	movs	r3, #155	; 0x9b
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	449d      	add	sp, r3
 8008ac0:	bc3c      	pop	{r2, r3, r4, r5}
 8008ac2:	4690      	mov	r8, r2
 8008ac4:	4699      	mov	r9, r3
 8008ac6:	46a2      	mov	sl, r4
 8008ac8:	46ab      	mov	fp, r5
 8008aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ace:	aa4e      	add	r2, sp, #312	; 0x138
 8008ad0:	934e      	str	r3, [sp, #312]	; 0x138
 8008ad2:	8863      	ldrh	r3, [r4, #2]
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	6053      	str	r3, [r2, #4]
 8008ad8:	88a3      	ldrh	r3, [r4, #4]
 8008ada:	6838      	ldr	r0, [r7, #0]
 8008adc:	6093      	str	r3, [r2, #8]
 8008ade:	88e3      	ldrh	r3, [r4, #6]
 8008ae0:	60d3      	str	r3, [r2, #12]
 8008ae2:	8923      	ldrh	r3, [r4, #8]
 8008ae4:	8213      	strh	r3, [r2, #16]
 8008ae6:	ab46      	add	r3, sp, #280	; 0x118
 8008ae8:	4699      	mov	r9, r3
 8008aea:	f7fe fb09 	bl	8007100 <acc_cpd_cbank_and_vana_calibration>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d0e1      	beq.n	8008ab6 <calibrate.lto_priv.162+0x4a>
 8008af2:	002b      	movs	r3, r5
 8008af4:	33ce      	adds	r3, #206	; 0xce
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	35d0      	adds	r5, #208	; 0xd0
 8008afa:	930c      	str	r3, [sp, #48]	; 0x30
 8008afc:	1e5a      	subs	r2, r3, #1
 8008afe:	4193      	sbcs	r3, r2
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	9338      	str	r3, [sp, #224]	; 0xe0
 8008b04:	782b      	ldrb	r3, [r5, #0]
 8008b06:	4a95      	ldr	r2, [pc, #596]	; (8008d5c <calibrate.lto_priv.162+0x2f0>)
 8008b08:	932a      	str	r3, [sp, #168]	; 0xa8
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d80e      	bhi.n	8008b2e <calibrate.lto_priv.162+0xc2>
 8008b10:	4643      	mov	r3, r8
 8008b12:	4a93      	ldr	r2, [pc, #588]	; (8008d60 <calibrate.lto_priv.162+0x2f4>)
 8008b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b16:	4993      	ldr	r1, [pc, #588]	; (8008d64 <calibrate.lto_priv.162+0x2f8>)
 8008b18:	0030      	movs	r0, r6
 8008b1a:	4798      	blx	r3
 8008b1c:	4b92      	ldr	r3, [pc, #584]	; (8008d68 <calibrate.lto_priv.162+0x2fc>)
 8008b1e:	9617      	str	r6, [sp, #92]	; 0x5c
 8008b20:	9316      	str	r3, [sp, #88]	; 0x58
 8008b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0c6      	beq.n	8008ab6 <calibrate.lto_priv.162+0x4a>
 8008b28:	2400      	movs	r4, #0
 8008b2a:	f001 f986 	bl	8009e3a <calibrate.lto_priv.162+0x13ce>
 8008b2e:	8862      	ldrh	r2, [r4, #2]
 8008b30:	2101      	movs	r1, #1
 8008b32:	9224      	str	r2, [sp, #144]	; 0x90
 8008b34:	88a2      	ldrh	r2, [r4, #4]
 8008b36:	9225      	str	r2, [sp, #148]	; 0x94
 8008b38:	88e2      	ldrh	r2, [r4, #6]
 8008b3a:	9226      	str	r2, [sp, #152]	; 0x98
 8008b3c:	8922      	ldrh	r2, [r4, #8]
 8008b3e:	9227      	str	r2, [sp, #156]	; 0x9c
 8008b40:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8008b42:	9228      	str	r2, [sp, #160]	; 0xa0
 8008b44:	464a      	mov	r2, r9
 8008b46:	7912      	ldrb	r2, [r2, #4]
 8008b48:	9229      	str	r2, [sp, #164]	; 0xa4
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	9210      	str	r2, [sp, #64]	; 0x40
 8008b4e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b50:	4a86      	ldr	r2, [pc, #536]	; (8008d6c <calibrate.lto_priv.162+0x300>)
 8008b52:	4684      	mov	ip, r0
 8008b54:	189a      	adds	r2, r3, r2
 8008b56:	438a      	bics	r2, r1
 8008b58:	4462      	add	r2, ip
 8008b5a:	922b      	str	r2, [sp, #172]	; 0xac
 8008b5c:	4a84      	ldr	r2, [pc, #528]	; (8008d70 <calibrate.lto_priv.162+0x304>)
 8008b5e:	4683      	mov	fp, r0
 8008b60:	4694      	mov	ip, r2
 8008b62:	4463      	add	r3, ip
 8008b64:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b66:	438b      	bics	r3, r1
 8008b68:	449b      	add	fp, r3
 8008b6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b6c:	4b81      	ldr	r3, [pc, #516]	; (8008d74 <calibrate.lto_priv.162+0x308>)
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d80a      	bhi.n	8008b88 <calibrate.lto_priv.162+0x11c>
 8008b72:	4b77      	ldr	r3, [pc, #476]	; (8008d50 <calibrate.lto_priv.162+0x2e4>)
 8008b74:	001a      	movs	r2, r3
 8008b76:	3230      	adds	r2, #48	; 0x30
 8008b78:	7812      	ldrb	r2, [r2, #0]
 8008b7a:	428a      	cmp	r2, r1
 8008b7c:	d904      	bls.n	8008b88 <calibrate.lto_priv.162+0x11c>
 8008b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b80:	4a7d      	ldr	r2, [pc, #500]	; (8008d78 <calibrate.lto_priv.162+0x30c>)
 8008b82:	4978      	ldr	r1, [pc, #480]	; (8008d64 <calibrate.lto_priv.162+0x2f8>)
 8008b84:	2002      	movs	r0, #2
 8008b86:	4798      	blx	r3
 8008b88:	487c      	ldr	r0, [pc, #496]	; (8008d7c <calibrate.lto_priv.162+0x310>)
 8008b8a:	f006 fd40 	bl	800f60e <acc_diagnostic_log_set_scope>
 8008b8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b90:	487b      	ldr	r0, [pc, #492]	; (8008d80 <calibrate.lto_priv.162+0x314>)
 8008b92:	f006 fd38 	bl	800f606 <acc_diagnostic_log_scalar>
 8008b96:	2202      	movs	r2, #2
 8008b98:	2101      	movs	r1, #1
 8008b9a:	487a      	ldr	r0, [pc, #488]	; (8008d84 <calibrate.lto_priv.162+0x318>)
 8008b9c:	f006 fd36 	bl	800f60c <acc_diagnostic_log_declare_parameter>
 8008ba0:	221f      	movs	r2, #31
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	4878      	ldr	r0, [pc, #480]	; (8008d88 <calibrate.lto_priv.162+0x31c>)
 8008ba6:	f006 fd31 	bl	800f60c <acc_diagnostic_log_declare_parameter>
 8008baa:	227b      	movs	r2, #123	; 0x7b
 8008bac:	2100      	movs	r1, #0
 8008bae:	4877      	ldr	r0, [pc, #476]	; (8008d8c <calibrate.lto_priv.162+0x320>)
 8008bb0:	f006 fd2c 	bl	800f60c <acc_diagnostic_log_declare_parameter>
 8008bb4:	220b      	movs	r2, #11
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	4875      	ldr	r0, [pc, #468]	; (8008d90 <calibrate.lto_priv.162+0x324>)
 8008bba:	f006 fd27 	bl	800f60c <acc_diagnostic_log_declare_parameter>
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	9336      	str	r3, [sp, #216]	; 0xd8
 8008bc2:	4b69      	ldr	r3, [pc, #420]	; (8008d68 <calibrate.lto_priv.162+0x2fc>)
 8008bc4:	9316      	str	r3, [sp, #88]	; 0x58
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8008bca:	3302      	adds	r3, #2
 8008bcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bd0:	486c      	ldr	r0, [pc, #432]	; (8008d84 <calibrate.lto_priv.162+0x318>)
 8008bd2:	f006 fd1a 	bl	800f60a <acc_diagnostic_log_set_parameter>
 8008bd6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8008bda:	2300      	movs	r3, #0
 8008bdc:	4699      	mov	r9, r3
 8008bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	930d      	str	r3, [sp, #52]	; 0x34
 8008be4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008be6:	4b6b      	ldr	r3, [pc, #428]	; (8008d94 <calibrate.lto_priv.162+0x328>)
 8008be8:	4694      	mov	ip, r2
 8008bea:	4463      	add	r3, ip
 8008bec:	9312      	str	r3, [sp, #72]	; 0x48
 8008bee:	2400      	movs	r4, #0
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	4867      	ldr	r0, [pc, #412]	; (8008d90 <calibrate.lto_priv.162+0x324>)
 8008bf4:	f006 fd09 	bl	800f60a <acc_diagnostic_log_set_parameter>
 8008bf8:	ab8d      	add	r3, sp, #564	; 0x234
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008bfe:	ab80      	add	r3, sp, #512	; 0x200
 8008c00:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008c02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c04:	9480      	str	r4, [sp, #512]	; 0x200
 8008c06:	948d      	str	r4, [sp, #564]	; 0x234
 8008c08:	f007 f8fe 	bl	800fe08 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 8008c0c:	42a0      	cmp	r0, r4
 8008c0e:	d105      	bne.n	8008c1c <calibrate.lto_priv.162+0x1b0>
 8008c10:	4b4f      	ldr	r3, [pc, #316]	; (8008d50 <calibrate.lto_priv.162+0x2e4>)
 8008c12:	4a61      	ldr	r2, [pc, #388]	; (8008d98 <calibrate.lto_priv.162+0x32c>)
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	4961      	ldr	r1, [pc, #388]	; (8008d9c <calibrate.lto_priv.162+0x330>)
 8008c18:	4798      	blx	r3
 8008c1a:	e782      	b.n	8008b22 <calibrate.lto_priv.162+0xb6>
 8008c1c:	4b60      	ldr	r3, [pc, #384]	; (8008da0 <calibrate.lto_priv.162+0x334>)
 8008c1e:	9a8d      	ldr	r2, [sp, #564]	; 0x234
 8008c20:	9d80      	ldr	r5, [sp, #512]	; 0x200
 8008c22:	1b1b      	subs	r3, r3, r4
 8008c24:	4692      	mov	sl, r2
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d900      	bls.n	8008c2c <calibrate.lto_priv.162+0x1c0>
 8008c2a:	469a      	mov	sl, r3
 8008c2c:	0863      	lsrs	r3, r4, #1
 8008c2e:	9311      	str	r3, [sp, #68]	; 0x44
 8008c30:	4653      	mov	r3, sl
 8008c32:	085a      	lsrs	r2, r3, #1
 8008c34:	0863      	lsrs	r3, r4, #1
 8008c36:	0098      	lsls	r0, r3, #2
 8008c38:	4b5a      	ldr	r3, [pc, #360]	; (8008da4 <calibrate.lto_priv.162+0x338>)
 8008c3a:	0029      	movs	r1, r5
 8008c3c:	18c0      	adds	r0, r0, r3
 8008c3e:	f006 fbef 	bl	800f420 <acc_confprogram_copy>
 8008c42:	4653      	mov	r3, sl
 8008c44:	b29f      	uxth	r7, r3
 8008c46:	4b58      	ldr	r3, [pc, #352]	; (8008da8 <calibrate.lto_priv.162+0x33c>)
 8008c48:	b2a6      	uxth	r6, r4
 8008c4a:	4698      	mov	r8, r3
 8008c4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008c4e:	003a      	movs	r2, r7
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	231b      	movs	r3, #27
 8008c54:	0031      	movs	r1, r6
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	0028      	movs	r0, r5
 8008c5a:	4643      	mov	r3, r8
 8008c5c:	f006 fc28 	bl	800f4b0 <acc_confprogram_patch_offset>
 8008c60:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008c62:	003a      	movs	r2, r7
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	2319      	movs	r3, #25
 8008c68:	0031      	movs	r1, r6
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	0028      	movs	r0, r5
 8008c6e:	4643      	mov	r3, r8
 8008c70:	f006 fc1e 	bl	800f4b0 <acc_confprogram_patch_offset>
 8008c74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c76:	003a      	movs	r2, r7
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	231a      	movs	r3, #26
 8008c7c:	0031      	movs	r1, r6
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	0028      	movs	r0, r5
 8008c82:	4643      	mov	r3, r8
 8008c84:	f006 fc14 	bl	800f4b0 <acc_confprogram_patch_offset>
 8008c88:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008c8a:	003a      	movs	r2, r7
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	2317      	movs	r3, #23
 8008c90:	0031      	movs	r1, r6
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	0028      	movs	r0, r5
 8008c96:	4643      	mov	r3, r8
 8008c98:	f006 fc0a 	bl	800f4b0 <acc_confprogram_patch_offset>
 8008c9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008c9e:	003a      	movs	r2, r7
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	230d      	movs	r3, #13
 8008ca4:	0031      	movs	r1, r6
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	0028      	movs	r0, r5
 8008caa:	4643      	mov	r3, r8
 8008cac:	f006 fc00 	bl	800f4b0 <acc_confprogram_patch_offset>
 8008cb0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008cb2:	003a      	movs	r2, r7
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	232a      	movs	r3, #42	; 0x2a
 8008cb8:	0031      	movs	r1, r6
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	0028      	movs	r0, r5
 8008cbe:	4643      	mov	r3, r8
 8008cc0:	f006 fbf6 	bl	800f4b0 <acc_confprogram_patch_offset>
 8008cc4:	464b      	mov	r3, r9
 8008cc6:	9301      	str	r3, [sp, #4]
 8008cc8:	230f      	movs	r3, #15
 8008cca:	003a      	movs	r2, r7
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	0031      	movs	r1, r6
 8008cd0:	4643      	mov	r3, r8
 8008cd2:	0028      	movs	r0, r5
 8008cd4:	f006 fbec 	bl	800f4b0 <acc_confprogram_patch_offset>
 8008cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cda:	003a      	movs	r2, r7
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	232c      	movs	r3, #44	; 0x2c
 8008ce0:	0031      	movs	r1, r6
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	0028      	movs	r0, r5
 8008ce6:	4643      	mov	r3, r8
 8008ce8:	f006 fbe2 	bl	800f4b0 <acc_confprogram_patch_offset>
 8008cec:	2244      	movs	r2, #68	; 0x44
 8008cee:	466b      	mov	r3, sp
 8008cf0:	189b      	adds	r3, r3, r2
 8008cf2:	8819      	ldrh	r1, [r3, #0]
 8008cf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cf6:	4653      	mov	r3, sl
 8008cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cfa:	f7fd fc0e 	bl	800651a <acc_sensor_r2_load_confmem>
 8008cfe:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 8008d00:	469c      	mov	ip, r3
 8008d02:	4b2a      	ldr	r3, [pc, #168]	; (8008dac <calibrate.lto_priv.162+0x340>)
 8008d04:	4464      	add	r4, ip
 8008d06:	429c      	cmp	r4, r3
 8008d08:	d988      	bls.n	8008c1c <calibrate.lto_priv.162+0x1b0>
 8008d0a:	2118      	movs	r1, #24
 8008d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d0e:	f7fc fbc4 	bl	800549a <acc_sensor_protocol_r2_run_program>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d105      	bne.n	8008d22 <calibrate.lto_priv.162+0x2b6>
 8008d16:	4b0e      	ldr	r3, [pc, #56]	; (8008d50 <calibrate.lto_priv.162+0x2e4>)
 8008d18:	4a25      	ldr	r2, [pc, #148]	; (8008db0 <calibrate.lto_priv.162+0x344>)
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1c:	491f      	ldr	r1, [pc, #124]	; (8008d9c <calibrate.lto_priv.162+0x330>)
 8008d1e:	4798      	blx	r3
 8008d20:	e6ff      	b.n	8008b22 <calibrate.lto_priv.162+0xb6>
 8008d22:	21fa      	movs	r1, #250	; 0xfa
 8008d24:	2300      	movs	r3, #0
 8008d26:	2208      	movs	r2, #8
 8008d28:	00c9      	lsls	r1, r1, #3
 8008d2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d2c:	f7f9 fce0 	bl	80026f0 <acc_sensor_protocol_r2_wait_for_specific_event>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d100      	bne.n	8008d36 <calibrate.lto_priv.162+0x2ca>
 8008d34:	e6f5      	b.n	8008b22 <calibrate.lto_priv.162+0xb6>
 8008d36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d38:	2b37      	cmp	r3, #55	; 0x37
 8008d3a:	d83d      	bhi.n	8008db8 <calibrate.lto_priv.162+0x34c>
 8008d3c:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <calibrate.lto_priv.162+0x2e4>)
 8008d3e:	4a1d      	ldr	r2, [pc, #116]	; (8008db4 <calibrate.lto_priv.162+0x348>)
 8008d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d42:	4916      	ldr	r1, [pc, #88]	; (8008d9c <calibrate.lto_priv.162+0x330>)
 8008d44:	2000      	movs	r0, #0
 8008d46:	4798      	blx	r3
 8008d48:	e6eb      	b.n	8008b22 <calibrate.lto_priv.162+0xb6>
 8008d4a:	46c0      	nop			; (mov r8, r8)
 8008d4c:	fffffd94 	.word	0xfffffd94
 8008d50:	200004a8 	.word	0x200004a8
 8008d54:	0801d564 	.word	0x0801d564
 8008d58:	0801d044 	.word	0x0801d044
 8008d5c:	00000313 	.word	0x00000313
 8008d60:	0801cc77 	.word	0x0801cc77
 8008d64:	0801d581 	.word	0x0801d581
 8008d68:	ff800000 	.word	0xff800000
 8008d6c:	fffffda8 	.word	0xfffffda8
 8008d70:	fffffcec 	.word	0xfffffcec
 8008d74:	000001ff 	.word	0x000001ff
 8008d78:	0801d591 	.word	0x0801d591
 8008d7c:	0801d5bc 	.word	0x0801d5bc
 8008d80:	0801d18b 	.word	0x0801d18b
 8008d84:	0801d5cb 	.word	0x0801d5cb
 8008d88:	0801da15 	.word	0x0801da15
 8008d8c:	0801d885 	.word	0x0801d885
 8008d90:	0801d64d 	.word	0x0801d64d
 8008d94:	08015fa8 	.word	0x08015fa8
 8008d98:	0801d5d4 	.word	0x0801d5d4
 8008d9c:	0801d5f9 	.word	0x0801d5f9
 8008da0:	000006ac 	.word	0x000006ac
 8008da4:	0801886c 	.word	0x0801886c
 8008da8:	0801773c 	.word	0x0801773c
 8008dac:	000006ab 	.word	0x000006ab
 8008db0:	0801d611 	.word	0x0801d611
 8008db4:	0801d227 	.word	0x0801d227
 8008db8:	2219      	movs	r2, #25
 8008dba:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dbe:	f003 fc21 	bl	800c604 <internal_buffer_processed_read.constprop.30>
 8008dc2:	0004      	movs	r4, r0
 8008dc4:	2319      	movs	r3, #25
 8008dc6:	0002      	movs	r2, r0
 8008dc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dca:	200a      	movs	r0, #10
 8008dcc:	f7f7 f9b4 	bl	8000138 <acc_probes_execute_uint16>
 8008dd0:	2232      	movs	r2, #50	; 0x32
 8008dd2:	0021      	movs	r1, r4
 8008dd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008dd6:	f00d f83d 	bl	8015e54 <memcpy>
 8008dda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ddc:	f7f9 fc68 	bl	80026b0 <acc_sensor_protocol_r2_ack_event>
 8008de0:	9018      	str	r0, [sp, #96]	; 0x60
 8008de2:	902d      	str	r0, [sp, #180]	; 0xb4
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d100      	bne.n	8008dea <calibrate.lto_priv.162+0x37e>
 8008de8:	e69b      	b.n	8008b22 <calibrate.lto_priv.162+0xb6>
 8008dea:	4cbf      	ldr	r4, [pc, #764]	; (80090e8 <calibrate.lto_priv.162+0x67c>)
 8008dec:	48bf      	ldr	r0, [pc, #764]	; (80090ec <calibrate.lto_priv.162+0x680>)
 8008dee:	0021      	movs	r1, r4
 8008df0:	f006 fc0a 	bl	800f608 <acc_diagnostic_log_array>
 8008df4:	2119      	movs	r1, #25
 8008df6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008df8:	f006 fc04 	bl	800f604 <acc_diagnostic_log_data_u16>
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	005e      	lsls	r6, r3, #1
 8008e00:	4bbb      	ldr	r3, [pc, #748]	; (80090f0 <calibrate.lto_priv.162+0x684>)
 8008e02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e04:	3378      	adds	r3, #120	; 0x78
 8008e06:	5ad0      	ldrh	r0, [r2, r3]
 8008e08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e0a:	ad53      	add	r5, sp, #332	; 0x14c
 8008e0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008e0e:	1ac0      	subs	r0, r0, r3
 8008e10:	b200      	sxth	r0, r0
 8008e12:	f008 fa6d 	bl	80112f0 <__aeabi_i2f>
 8008e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e18:	1c07      	adds	r7, r0, #0
 8008e1a:	8818      	ldrh	r0, [r3, #0]
 8008e1c:	f008 fab2 	bl	8011384 <__aeabi_ui2f>
 8008e20:	21de      	movs	r1, #222	; 0xde
 8008e22:	0589      	lsls	r1, r1, #22
 8008e24:	f007 fb30 	bl	8010488 <__aeabi_fmul>
 8008e28:	21fc      	movs	r1, #252	; 0xfc
 8008e2a:	0589      	lsls	r1, r1, #22
 8008e2c:	f007 fc5e 	bl	80106ec <__aeabi_fsub>
 8008e30:	49b0      	ldr	r1, [pc, #704]	; (80090f4 <calibrate.lto_priv.162+0x688>)
 8008e32:	f007 fb29 	bl	8010488 <__aeabi_fmul>
 8008e36:	49b0      	ldr	r1, [pc, #704]	; (80090f8 <calibrate.lto_priv.162+0x68c>)
 8008e38:	f007 fb26 	bl	8010488 <__aeabi_fmul>
 8008e3c:	1c01      	adds	r1, r0, #0
 8008e3e:	1c38      	adds	r0, r7, #0
 8008e40:	f007 fc54 	bl	80106ec <__aeabi_fsub>
 8008e44:	f008 fa34 	bl	80112b0 <__aeabi_f2iz>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	469c      	mov	ip, r3
 8008e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e4e:	44e1      	add	r9, ip
 8008e50:	3332      	adds	r3, #50	; 0x32
 8008e52:	930a      	str	r3, [sp, #40]	; 0x28
 8008e54:	464b      	mov	r3, r9
 8008e56:	5370      	strh	r0, [r6, r5]
 8008e58:	2b0c      	cmp	r3, #12
 8008e5a:	d000      	beq.n	8008e5e <calibrate.lto_priv.162+0x3f2>
 8008e5c:	e6c7      	b.n	8008bee <calibrate.lto_priv.162+0x182>
 8008e5e:	0021      	movs	r1, r4
 8008e60:	48a6      	ldr	r0, [pc, #664]	; (80090fc <calibrate.lto_priv.162+0x690>)
 8008e62:	f006 fbd1 	bl	800f608 <acc_diagnostic_log_array>
 8008e66:	4649      	mov	r1, r9
 8008e68:	0028      	movs	r0, r5
 8008e6a:	f006 fbcb 	bl	800f604 <acc_diagnostic_log_data_u16>
 8008e6e:	2214      	movs	r2, #20
 8008e70:	5eab      	ldrsh	r3, [r5, r2]
 8008e72:	2700      	movs	r7, #0
 8008e74:	930a      	str	r3, [sp, #40]	; 0x28
 8008e76:	2216      	movs	r2, #22
 8008e78:	5eab      	ldrsh	r3, [r5, r2]
 8008e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e7c:	9311      	str	r3, [sp, #68]	; 0x44
 8008e7e:	1a9b      	subs	r3, r3, r2
 8008e80:	9314      	str	r3, [sp, #80]	; 0x50
 8008e82:	2200      	movs	r2, #0
 8008e84:	5eab      	ldrsh	r3, [r5, r2]
 8008e86:	2632      	movs	r6, #50	; 0x32
 8008e88:	4699      	mov	r9, r3
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	5eab      	ldrsh	r3, [r5, r2]
 8008e8e:	464a      	mov	r2, r9
 8008e90:	930d      	str	r3, [sp, #52]	; 0x34
 8008e92:	1a9b      	subs	r3, r3, r2
 8008e94:	9312      	str	r3, [sp, #72]	; 0x48
 8008e96:	4b9a      	ldr	r3, [pc, #616]	; (8009100 <calibrate.lto_priv.162+0x694>)
 8008e98:	469a      	mov	sl, r3
 8008e9a:	b2fb      	uxtb	r3, r7
 8008e9c:	9315      	str	r3, [sp, #84]	; 0x54
 8008e9e:	007b      	lsls	r3, r7, #1
 8008ea0:	5f5a      	ldrsh	r2, [r3, r5]
 8008ea2:	4690      	mov	r8, r2
 8008ea4:	2f00      	cmp	r7, #0
 8008ea6:	d000      	beq.n	8008eaa <calibrate.lto_priv.162+0x43e>
 8008ea8:	e0d8      	b.n	800905c <calibrate.lto_priv.162+0x5f0>
 8008eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eac:	0034      	movs	r4, r6
 8008eae:	4599      	cmp	r9, r3
 8008eb0:	dd0b      	ble.n	8008eca <calibrate.lto_priv.162+0x45e>
 8008eb2:	45d1      	cmp	r9, sl
 8008eb4:	dc09      	bgt.n	8008eca <calibrate.lto_priv.162+0x45e>
 8008eb6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008eb8:	f008 fa1a 	bl	80112f0 <__aeabi_i2f>
 8008ebc:	4991      	ldr	r1, [pc, #580]	; (8009104 <calibrate.lto_priv.162+0x698>)
 8008ebe:	f007 ffdb 	bl	8010e78 <__aeabi_fcmplt>
 8008ec2:	2400      	movs	r4, #0
 8008ec4:	42a0      	cmp	r0, r4
 8008ec6:	d100      	bne.n	8008eca <calibrate.lto_priv.162+0x45e>
 8008ec8:	0034      	movs	r4, r6
 8008eca:	488f      	ldr	r0, [pc, #572]	; (8009108 <calibrate.lto_priv.162+0x69c>)
 8008ecc:	4440      	add	r0, r8
 8008ece:	17c3      	asrs	r3, r0, #31
 8008ed0:	18c0      	adds	r0, r0, r3
 8008ed2:	4058      	eors	r0, r3
 8008ed4:	f008 fa0c 	bl	80112f0 <__aeabi_i2f>
 8008ed8:	4987      	ldr	r1, [pc, #540]	; (80090f8 <calibrate.lto_priv.162+0x68c>)
 8008eda:	f007 f9c3 	bl	8010264 <__aeabi_fdiv>
 8008ede:	498b      	ldr	r1, [pc, #556]	; (800910c <calibrate.lto_priv.162+0x6a0>)
 8008ee0:	f007 fad2 	bl	8010488 <__aeabi_fmul>
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	0020      	movs	r0, r4
 8008ee8:	f008 fa02 	bl	80112f0 <__aeabi_i2f>
 8008eec:	1c01      	adds	r1, r0, #0
 8008eee:	4640      	mov	r0, r8
 8008ef0:	f007 f81e 	bl	800ff30 <__aeabi_fadd>
 8008ef4:	f008 f808 	bl	8010f08 <__aeabi_f2uiz>
 8008ef8:	22a2      	movs	r2, #162	; 0xa2
 8008efa:	ab3c      	add	r3, sp, #240	; 0xf0
 8008efc:	0052      	lsls	r2, r2, #1
 8008efe:	189b      	adds	r3, r3, r2
 8008f00:	55d8      	strb	r0, [r3, r7]
 8008f02:	a94b      	add	r1, sp, #300	; 0x12c
 8008f04:	b2fb      	uxtb	r3, r7
 8008f06:	547b      	strb	r3, [r7, r1]
 8008f08:	3701      	adds	r7, #1
 8008f0a:	2f0c      	cmp	r7, #12
 8008f0c:	d1c5      	bne.n	8008e9a <calibrate.lto_priv.162+0x42e>
 8008f0e:	3a3a      	subs	r2, #58	; 0x3a
 8008f10:	3aff      	subs	r2, #255	; 0xff
 8008f12:	ac8d      	add	r4, sp, #564	; 0x234
 8008f14:	2300      	movs	r3, #0
 8008f16:	0018      	movs	r0, r3
 8008f18:	5c5e      	ldrb	r6, [r3, r1]
 8008f1a:	18cd      	adds	r5, r1, r3
 8008f1c:	786f      	ldrb	r7, [r5, #1]
 8008f1e:	46a9      	mov	r9, r5
 8008f20:	5da5      	ldrb	r5, [r4, r6]
 8008f22:	46a8      	mov	r8, r5
 8008f24:	5de5      	ldrb	r5, [r4, r7]
 8008f26:	45a8      	cmp	r8, r5
 8008f28:	d904      	bls.n	8008f34 <calibrate.lto_priv.162+0x4c8>
 8008f2a:	464d      	mov	r5, r9
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	545f      	strb	r7, [r3, r1]
 8008f30:	b2c0      	uxtb	r0, r0
 8008f32:	706e      	strb	r6, [r5, #1]
 8008f34:	3301      	adds	r3, #1
 8008f36:	b2dd      	uxtb	r5, r3
 8008f38:	4295      	cmp	r5, r2
 8008f3a:	d3ed      	bcc.n	8008f18 <calibrate.lto_priv.162+0x4ac>
 8008f3c:	3a01      	subs	r2, #1
 8008f3e:	b2d2      	uxtb	r2, r2
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	d001      	beq.n	8008f48 <calibrate.lto_priv.162+0x4dc>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d1e5      	bne.n	8008f14 <calibrate.lto_priv.162+0x4a8>
 8008f48:	4967      	ldr	r1, [pc, #412]	; (80090e8 <calibrate.lto_priv.162+0x67c>)
 8008f4a:	4871      	ldr	r0, [pc, #452]	; (8009110 <calibrate.lto_priv.162+0x6a4>)
 8008f4c:	f006 fb5c 	bl	800f608 <acc_diagnostic_log_array>
 8008f50:	2300      	movs	r3, #0
 8008f52:	931a      	str	r3, [sp, #104]	; 0x68
 8008f54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008f56:	ab4b      	add	r3, sp, #300	; 0x12c
 8008f58:	5cd3      	ldrb	r3, [r2, r3]
 8008f5a:	2601      	movs	r6, #1
 8008f5c:	9311      	str	r3, [sp, #68]	; 0x44
 8008f5e:	932c      	str	r3, [sp, #176]	; 0xb0
 8008f60:	2332      	movs	r3, #50	; 0x32
 8008f62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f64:	2700      	movs	r7, #0
 8008f66:	4353      	muls	r3, r2
 8008f68:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008f6a:	4694      	mov	ip, r2
 8008f6c:	4463      	add	r3, ip
 8008f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f70:	4698      	mov	r8, r3
 8008f72:	2300      	movs	r3, #0
 8008f74:	4699      	mov	r9, r3
 8008f76:	001d      	movs	r5, r3
 8008f78:	001c      	movs	r4, r3
 8008f7a:	b2b3      	uxth	r3, r6
 8008f7c:	930d      	str	r3, [sp, #52]	; 0x34
 8008f7e:	4643      	mov	r3, r8
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	3401      	adds	r4, #1
 8008f84:	0018      	movs	r0, r3
 8008f86:	469a      	mov	sl, r3
 8008f88:	f008 f9b2 	bl	80112f0 <__aeabi_i2f>
 8008f8c:	1c01      	adds	r1, r0, #0
 8008f8e:	1c38      	adds	r0, r7, #0
 8008f90:	f006 ffce 	bl	800ff30 <__aeabi_fadd>
 8008f94:	b2b3      	uxth	r3, r6
 8008f96:	469c      	mov	ip, r3
 8008f98:	4643      	mov	r3, r8
 8008f9a:	885b      	ldrh	r3, [r3, #2]
 8008f9c:	4465      	add	r5, ip
 8008f9e:	1c07      	adds	r7, r0, #0
 8008fa0:	b2a4      	uxth	r4, r4
 8008fa2:	b2ad      	uxth	r5, r5
 8008fa4:	4652      	mov	r2, sl
 8008fa6:	459a      	cmp	sl, r3
 8008fa8:	d300      	bcc.n	8008fac <calibrate.lto_priv.162+0x540>
 8008faa:	e082      	b.n	80090b2 <calibrate.lto_priv.162+0x646>
 8008fac:	1a9b      	subs	r3, r3, r2
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	22fa      	movs	r2, #250	; 0xfa
 8008fb2:	0092      	lsls	r2, r2, #2
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d801      	bhi.n	8008fbc <calibrate.lto_priv.162+0x550>
 8008fb8:	2e18      	cmp	r6, #24
 8008fba:	d136      	bne.n	800902a <calibrate.lto_priv.162+0x5be>
 8008fbc:	2c02      	cmp	r4, #2
 8008fbe:	d97b      	bls.n	80090b8 <calibrate.lto_priv.162+0x64c>
 8008fc0:	0028      	movs	r0, r5
 8008fc2:	f008 f9df 	bl	8011384 <__aeabi_ui2f>
 8008fc6:	1c05      	adds	r5, r0, #0
 8008fc8:	0020      	movs	r0, r4
 8008fca:	f008 f9db 	bl	8011384 <__aeabi_ui2f>
 8008fce:	1c01      	adds	r1, r0, #0
 8008fd0:	1c28      	adds	r0, r5, #0
 8008fd2:	f007 f947 	bl	8010264 <__aeabi_fdiv>
 8008fd6:	21fe      	movs	r1, #254	; 0xfe
 8008fd8:	0589      	lsls	r1, r1, #22
 8008fda:	f007 fb87 	bl	80106ec <__aeabi_fsub>
 8008fde:	f007 ff93 	bl	8010f08 <__aeabi_f2uiz>
 8008fe2:	b283      	uxth	r3, r0
 8008fe4:	469a      	mov	sl, r3
 8008fe6:	464b      	mov	r3, r9
 8008fe8:	b2b2      	uxth	r2, r6
 8008fea:	005d      	lsls	r5, r3, #1
 8008fec:	ab73      	add	r3, sp, #460	; 0x1cc
 8008fee:	52ea      	strh	r2, [r5, r3]
 8008ff0:	ab8d      	add	r3, sp, #564	; 0x234
 8008ff2:	52ec      	strh	r4, [r5, r3]
 8008ff4:	0020      	movs	r0, r4
 8008ff6:	f008 f97b 	bl	80112f0 <__aeabi_i2f>
 8008ffa:	1c01      	adds	r1, r0, #0
 8008ffc:	1c38      	adds	r0, r7, #0
 8008ffe:	f007 f931 	bl	8010264 <__aeabi_fdiv>
 8009002:	f007 ff81 	bl	8010f08 <__aeabi_f2uiz>
 8009006:	ab80      	add	r3, sp, #512	; 0x200
 8009008:	52e8      	strh	r0, [r5, r3]
 800900a:	ab9a      	add	r3, sp, #616	; 0x268
 800900c:	469c      	mov	ip, r3
 800900e:	4650      	mov	r0, sl
 8009010:	2305      	movs	r3, #5
 8009012:	4358      	muls	r0, r3
 8009014:	4465      	add	r5, ip
 8009016:	464b      	mov	r3, r9
 8009018:	3d05      	subs	r5, #5
 800901a:	3dff      	subs	r5, #255	; 0xff
 800901c:	8028      	strh	r0, [r5, #0]
 800901e:	2500      	movs	r5, #0
 8009020:	3301      	adds	r3, #1
 8009022:	b29b      	uxth	r3, r3
 8009024:	4699      	mov	r9, r3
 8009026:	002c      	movs	r4, r5
 8009028:	2700      	movs	r7, #0
 800902a:	2302      	movs	r3, #2
 800902c:	469c      	mov	ip, r3
 800902e:	3601      	adds	r6, #1
 8009030:	44e0      	add	r8, ip
 8009032:	2e19      	cmp	r6, #25
 8009034:	d1a1      	bne.n	8008f7a <calibrate.lto_priv.162+0x50e>
 8009036:	4b37      	ldr	r3, [pc, #220]	; (8009114 <calibrate.lto_priv.162+0x6a8>)
 8009038:	001a      	movs	r2, r3
 800903a:	3230      	adds	r2, #48	; 0x30
 800903c:	7812      	ldrb	r2, [r2, #0]
 800903e:	2a03      	cmp	r2, #3
 8009040:	d905      	bls.n	800904e <calibrate.lto_priv.162+0x5e2>
 8009042:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009044:	4a34      	ldr	r2, [pc, #208]	; (8009118 <calibrate.lto_priv.162+0x6ac>)
 8009046:	464b      	mov	r3, r9
 8009048:	4934      	ldr	r1, [pc, #208]	; (800911c <calibrate.lto_priv.162+0x6b0>)
 800904a:	2004      	movs	r0, #4
 800904c:	47a0      	blx	r4
 800904e:	4d31      	ldr	r5, [pc, #196]	; (8009114 <calibrate.lto_priv.162+0x6a8>)
 8009050:	4b33      	ldr	r3, [pc, #204]	; (8009120 <calibrate.lto_priv.162+0x6b4>)
 8009052:	002e      	movs	r6, r5
 8009054:	2400      	movs	r4, #0
 8009056:	3630      	adds	r6, #48	; 0x30
 8009058:	4698      	mov	r8, r3
 800905a:	e07b      	b.n	8009154 <calibrate.lto_priv.162+0x6e8>
 800905c:	b2fa      	uxtb	r2, r7
 800905e:	2a0b      	cmp	r2, #11
 8009060:	d10c      	bne.n	800907c <calibrate.lto_priv.162+0x610>
 8009062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009064:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009066:	0034      	movs	r4, r6
 8009068:	4293      	cmp	r3, r2
 800906a:	dc00      	bgt.n	800906e <calibrate.lto_priv.162+0x602>
 800906c:	e72d      	b.n	8008eca <calibrate.lto_priv.162+0x45e>
 800906e:	4553      	cmp	r3, sl
 8009070:	dd00      	ble.n	8009074 <calibrate.lto_priv.162+0x608>
 8009072:	e72a      	b.n	8008eca <calibrate.lto_priv.162+0x45e>
 8009074:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009076:	f008 f93b 	bl	80112f0 <__aeabi_i2f>
 800907a:	e71f      	b.n	8008ebc <calibrate.lto_priv.162+0x450>
 800907c:	18eb      	adds	r3, r5, r3
 800907e:	1e9a      	subs	r2, r3, #2
 8009080:	2100      	movs	r1, #0
 8009082:	5e52      	ldrsh	r2, [r2, r1]
 8009084:	0034      	movs	r4, r6
 8009086:	4542      	cmp	r2, r8
 8009088:	dc00      	bgt.n	800908c <calibrate.lto_priv.162+0x620>
 800908a:	e71e      	b.n	8008eca <calibrate.lto_priv.162+0x45e>
 800908c:	2002      	movs	r0, #2
 800908e:	5e18      	ldrsh	r0, [r3, r0]
 8009090:	4540      	cmp	r0, r8
 8009092:	db00      	blt.n	8009096 <calibrate.lto_priv.162+0x62a>
 8009094:	e719      	b.n	8008eca <calibrate.lto_priv.162+0x45e>
 8009096:	4552      	cmp	r2, sl
 8009098:	dd00      	ble.n	800909c <calibrate.lto_priv.162+0x630>
 800909a:	e716      	b.n	8008eca <calibrate.lto_priv.162+0x45e>
 800909c:	45d0      	cmp	r8, sl
 800909e:	dd00      	ble.n	80090a2 <calibrate.lto_priv.162+0x636>
 80090a0:	e713      	b.n	8008eca <calibrate.lto_priv.162+0x45e>
 80090a2:	1a80      	subs	r0, r0, r2
 80090a4:	f008 f924 	bl	80112f0 <__aeabi_i2f>
 80090a8:	21fc      	movs	r1, #252	; 0xfc
 80090aa:	0589      	lsls	r1, r1, #22
 80090ac:	f007 f9ec 	bl	8010488 <__aeabi_fmul>
 80090b0:	e704      	b.n	8008ebc <calibrate.lto_priv.162+0x450>
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	e77b      	b.n	8008fb0 <calibrate.lto_priv.162+0x544>
 80090b8:	4b16      	ldr	r3, [pc, #88]	; (8009114 <calibrate.lto_priv.162+0x6a8>)
 80090ba:	001a      	movs	r2, r3
 80090bc:	3230      	adds	r2, #48	; 0x30
 80090be:	7812      	ldrb	r2, [r2, #0]
 80090c0:	2a03      	cmp	r2, #3
 80090c2:	d90c      	bls.n	80090de <calibrate.lto_priv.162+0x672>
 80090c4:	4652      	mov	r2, sl
 80090c6:	9401      	str	r4, [sp, #4]
 80090c8:	9200      	str	r2, [sp, #0]
 80090ca:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80090cc:	4a15      	ldr	r2, [pc, #84]	; (8009124 <calibrate.lto_priv.162+0x6b8>)
 80090ce:	0033      	movs	r3, r6
 80090d0:	4912      	ldr	r1, [pc, #72]	; (800911c <calibrate.lto_priv.162+0x6b0>)
 80090d2:	2004      	movs	r0, #4
 80090d4:	47a0      	blx	r4
 80090d6:	2400      	movs	r4, #0
 80090d8:	2700      	movs	r7, #0
 80090da:	0025      	movs	r5, r4
 80090dc:	e7a5      	b.n	800902a <calibrate.lto_priv.162+0x5be>
 80090de:	2500      	movs	r5, #0
 80090e0:	2700      	movs	r7, #0
 80090e2:	002c      	movs	r4, r5
 80090e4:	e7a1      	b.n	800902a <calibrate.lto_priv.162+0x5be>
 80090e6:	46c0      	nop			; (mov r8, r8)
 80090e8:	0801d643 	.word	0x0801d643
 80090ec:	0801d658 	.word	0x0801d658
 80090f0:	08015f28 	.word	0x08015f28
 80090f4:	3f99999a 	.word	0x3f99999a
 80090f8:	447a0000 	.word	0x447a0000
 80090fc:	0801d668 	.word	0x0801d668
 8009100:	00000513 	.word	0x00000513
 8009104:	c2c80000 	.word	0xc2c80000
 8009108:	fffffc18 	.word	0xfffffc18
 800910c:	42c80000 	.word	0x42c80000
 8009110:	0801d679 	.word	0x0801d679
 8009114:	200004a8 	.word	0x200004a8
 8009118:	0801d6f8 	.word	0x0801d6f8
 800911c:	0801d6e1 	.word	0x0801d6e1
 8009120:	0801d70b 	.word	0x0801d70b
 8009124:	0801d690 	.word	0x0801d690
 8009128:	2f03      	cmp	r7, #3
 800912a:	d912      	bls.n	8009152 <calibrate.lto_priv.162+0x6e6>
 800912c:	0063      	lsls	r3, r4, #1
 800912e:	aa80      	add	r2, sp, #512	; 0x200
 8009130:	5a9a      	ldrh	r2, [r3, r2]
 8009132:	49c4      	ldr	r1, [pc, #784]	; (8009444 <calibrate.lto_priv.162+0x9d8>)
 8009134:	9203      	str	r2, [sp, #12]
 8009136:	aa8d      	add	r2, sp, #564	; 0x234
 8009138:	5a9a      	ldrh	r2, [r3, r2]
 800913a:	2004      	movs	r0, #4
 800913c:	9202      	str	r2, [sp, #8]
 800913e:	aa59      	add	r2, sp, #356	; 0x164
 8009140:	5a9a      	ldrh	r2, [r3, r2]
 8009142:	9201      	str	r2, [sp, #4]
 8009144:	aa73      	add	r2, sp, #460	; 0x1cc
 8009146:	5a9b      	ldrh	r3, [r3, r2]
 8009148:	4642      	mov	r2, r8
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800914e:	0023      	movs	r3, r4
 8009150:	47b8      	blx	r7
 8009152:	3401      	adds	r4, #1
 8009154:	b2a3      	uxth	r3, r4
 8009156:	7837      	ldrb	r7, [r6, #0]
 8009158:	4599      	cmp	r9, r3
 800915a:	d8e5      	bhi.n	8009128 <calibrate.lto_priv.162+0x6bc>
 800915c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915e:	881e      	ldrh	r6, [r3, #0]
 8009160:	4bb9      	ldr	r3, [pc, #740]	; (8009448 <calibrate.lto_priv.162+0x9dc>)
 8009162:	429e      	cmp	r6, r3
 8009164:	d825      	bhi.n	80091b2 <calibrate.lto_priv.162+0x746>
 8009166:	2f03      	cmp	r7, #3
 8009168:	d905      	bls.n	8009176 <calibrate.lto_priv.162+0x70a>
 800916a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800916c:	0033      	movs	r3, r6
 800916e:	4ab7      	ldr	r2, [pc, #732]	; (800944c <calibrate.lto_priv.162+0x9e0>)
 8009170:	49b4      	ldr	r1, [pc, #720]	; (8009444 <calibrate.lto_priv.162+0x9d8>)
 8009172:	2004      	movs	r0, #4
 8009174:	47a0      	blx	r4
 8009176:	4bb6      	ldr	r3, [pc, #728]	; (8009450 <calibrate.lto_priv.162+0x9e4>)
 8009178:	001a      	movs	r2, r3
 800917a:	3230      	adds	r2, #48	; 0x30
 800917c:	7812      	ldrb	r2, [r2, #0]
 800917e:	2a03      	cmp	r2, #3
 8009180:	d907      	bls.n	8009192 <calibrate.lto_priv.162+0x726>
 8009182:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009184:	49b3      	ldr	r1, [pc, #716]	; (8009454 <calibrate.lto_priv.162+0x9e8>)
 8009186:	9200      	str	r2, [sp, #0]
 8009188:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800918a:	4ab3      	ldr	r2, [pc, #716]	; (8009458 <calibrate.lto_priv.162+0x9ec>)
 800918c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800918e:	2004      	movs	r0, #4
 8009190:	47a0      	blx	r4
 8009192:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009194:	3301      	adds	r3, #1
 8009196:	931a      	str	r3, [sp, #104]	; 0x68
 8009198:	2b0c      	cmp	r3, #12
 800919a:	d000      	beq.n	800919e <calibrate.lto_priv.162+0x732>
 800919c:	e6da      	b.n	8008f54 <calibrate.lto_priv.162+0x4e8>
 800919e:	3b0b      	subs	r3, #11
 80091a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80091a2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d101      	bne.n	80091ac <calibrate.lto_priv.162+0x740>
 80091a8:	f000 fe3c 	bl	8009e24 <calibrate.lto_priv.162+0x13b8>
 80091ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ae:	9336      	str	r3, [sp, #216]	; 0xd8
 80091b0:	e50d      	b.n	8008bce <calibrate.lto_priv.162+0x162>
 80091b2:	4baa      	ldr	r3, [pc, #680]	; (800945c <calibrate.lto_priv.162+0x9f0>)
 80091b4:	18f0      	adds	r0, r6, r3
 80091b6:	f008 f8e5 	bl	8011384 <__aeabi_ui2f>
 80091ba:	49a9      	ldr	r1, [pc, #676]	; (8009460 <calibrate.lto_priv.162+0x9f4>)
 80091bc:	f007 f964 	bl	8010488 <__aeabi_fmul>
 80091c0:	21de      	movs	r1, #222	; 0xde
 80091c2:	0589      	lsls	r1, r1, #22
 80091c4:	f007 f960 	bl	8010488 <__aeabi_fmul>
 80091c8:	1c01      	adds	r1, r0, #0
 80091ca:	48a5      	ldr	r0, [pc, #660]	; (8009460 <calibrate.lto_priv.162+0x9f4>)
 80091cc:	f007 fa8e 	bl	80106ec <__aeabi_fsub>
 80091d0:	1c01      	adds	r1, r0, #0
 80091d2:	48a4      	ldr	r0, [pc, #656]	; (8009464 <calibrate.lto_priv.162+0x9f8>)
 80091d4:	f007 fa8a 	bl	80106ec <__aeabi_fsub>
 80091d8:	49a1      	ldr	r1, [pc, #644]	; (8009460 <calibrate.lto_priv.162+0x9f4>)
 80091da:	f007 f843 	bl	8010264 <__aeabi_fdiv>
 80091de:	218f      	movs	r1, #143	; 0x8f
 80091e0:	05c9      	lsls	r1, r1, #23
 80091e2:	f007 f951 	bl	8010488 <__aeabi_fmul>
 80091e6:	218e      	movs	r1, #142	; 0x8e
 80091e8:	05c9      	lsls	r1, r1, #23
 80091ea:	f006 fea1 	bl	800ff30 <__aeabi_fadd>
 80091ee:	f007 fe8b 	bl	8010f08 <__aeabi_f2uiz>
 80091f2:	b284      	uxth	r4, r0
 80091f4:	2f03      	cmp	r7, #3
 80091f6:	d905      	bls.n	8009204 <calibrate.lto_priv.162+0x798>
 80091f8:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80091fa:	0023      	movs	r3, r4
 80091fc:	4a9a      	ldr	r2, [pc, #616]	; (8009468 <calibrate.lto_priv.162+0x9fc>)
 80091fe:	4991      	ldr	r1, [pc, #580]	; (8009444 <calibrate.lto_priv.162+0x9d8>)
 8009200:	2004      	movs	r0, #4
 8009202:	47a8      	blx	r5
 8009204:	2300      	movs	r3, #0
 8009206:	9312      	str	r3, [sp, #72]	; 0x48
 8009208:	930d      	str	r3, [sp, #52]	; 0x34
 800920a:	3330      	adds	r3, #48	; 0x30
 800920c:	4698      	mov	r8, r3
 800920e:	4f90      	ldr	r7, [pc, #576]	; (8009450 <calibrate.lto_priv.162+0x9e4>)
 8009210:	ab80      	add	r3, sp, #512	; 0x200
 8009212:	44b8      	add	r8, r7
 8009214:	469a      	mov	sl, r3
 8009216:	e010      	b.n	800923a <calibrate.lto_priv.162+0x7ce>
 8009218:	4650      	mov	r0, sl
 800921a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	5a1b      	ldrh	r3, [r3, r0]
 8009220:	4892      	ldr	r0, [pc, #584]	; (800946c <calibrate.lto_priv.162+0xa00>)
 8009222:	4283      	cmp	r3, r0
 8009224:	d84f      	bhi.n	80092c6 <calibrate.lto_priv.162+0x85a>
 8009226:	2903      	cmp	r1, #3
 8009228:	d904      	bls.n	8009234 <calibrate.lto_priv.162+0x7c8>
 800922a:	4a91      	ldr	r2, [pc, #580]	; (8009470 <calibrate.lto_priv.162+0xa04>)
 800922c:	4985      	ldr	r1, [pc, #532]	; (8009444 <calibrate.lto_priv.162+0x9d8>)
 800922e:	2004      	movs	r0, #4
 8009230:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8009232:	47a8      	blx	r5
 8009234:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009236:	3301      	adds	r3, #1
 8009238:	9312      	str	r3, [sp, #72]	; 0x48
 800923a:	2248      	movs	r2, #72	; 0x48
 800923c:	466b      	mov	r3, sp
 800923e:	189b      	adds	r3, r3, r2
 8009240:	881a      	ldrh	r2, [r3, #0]
 8009242:	4643      	mov	r3, r8
 8009244:	7819      	ldrb	r1, [r3, #0]
 8009246:	454a      	cmp	r2, r9
 8009248:	d3e6      	bcc.n	8009218 <calibrate.lto_priv.162+0x7ac>
 800924a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800924c:	2b01      	cmp	r3, #1
 800924e:	d933      	bls.n	80092b8 <calibrate.lto_priv.162+0x84c>
 8009250:	1e9f      	subs	r7, r3, #2
 8009252:	b23f      	sxth	r7, r7
 8009254:	007b      	lsls	r3, r7, #1
 8009256:	9312      	str	r3, [sp, #72]	; 0x48
 8009258:	ad66      	add	r5, sp, #408	; 0x198
 800925a:	ae80      	add	r6, sp, #512	; 0x200
 800925c:	2300      	movs	r3, #0
 800925e:	0039      	movs	r1, r7
 8009260:	469c      	mov	ip, r3
 8009262:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009264:	2900      	cmp	r1, #0
 8009266:	da46      	bge.n	80092f6 <calibrate.lto_priv.162+0x88a>
 8009268:	4663      	mov	r3, ip
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1f6      	bne.n	800925c <calibrate.lto_priv.162+0x7f0>
 800926e:	2201      	movs	r2, #1
 8009270:	0015      	movs	r5, r2
 8009272:	a866      	add	r0, sp, #408	; 0x198
 8009274:	8803      	ldrh	r3, [r0, #0]
 8009276:	a980      	add	r1, sp, #512	; 0x200
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	5a5c      	ldrh	r4, [r3, r1]
 800927c:	4e7d      	ldr	r6, [pc, #500]	; (8009474 <calibrate.lto_priv.162+0xa08>)
 800927e:	0053      	lsls	r3, r2, #1
 8009280:	5a1b      	ldrh	r3, [r3, r0]
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	5a5b      	ldrh	r3, [r3, r1]
 8009286:	429c      	cmp	r4, r3
 8009288:	d25c      	bcs.n	8009344 <calibrate.lto_priv.162+0x8d8>
 800928a:	1b1b      	subs	r3, r3, r4
 800928c:	b29b      	uxth	r3, r3
 800928e:	42b3      	cmp	r3, r6
 8009290:	d801      	bhi.n	8009296 <calibrate.lto_priv.162+0x82a>
 8009292:	3501      	adds	r5, #1
 8009294:	b2ad      	uxth	r5, r5
 8009296:	3201      	adds	r2, #1
 8009298:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800929a:	b293      	uxth	r3, r2
 800929c:	429f      	cmp	r7, r3
 800929e:	d8ee      	bhi.n	800927e <calibrate.lto_priv.162+0x812>
 80092a0:	4e6b      	ldr	r6, [pc, #428]	; (8009450 <calibrate.lto_priv.162+0x9e4>)
 80092a2:	0037      	movs	r7, r6
 80092a4:	3730      	adds	r7, #48	; 0x30
 80092a6:	9714      	str	r7, [sp, #80]	; 0x50
 80092a8:	2200      	movs	r2, #0
 80092aa:	1e6b      	subs	r3, r5, #1
 80092ac:	0014      	movs	r4, r2
 80092ae:	4698      	mov	r8, r3
 80092b0:	4544      	cmp	r4, r8
 80092b2:	d34a      	bcc.n	800934a <calibrate.lto_priv.162+0x8de>
 80092b4:	2a00      	cmp	r2, #0
 80092b6:	d1f7      	bne.n	80092a8 <calibrate.lto_priv.162+0x83c>
 80092b8:	4c65      	ldr	r4, [pc, #404]	; (8009450 <calibrate.lto_priv.162+0x9e4>)
 80092ba:	ab66      	add	r3, sp, #408	; 0x198
 80092bc:	0027      	movs	r7, r4
 80092be:	2500      	movs	r5, #0
 80092c0:	3730      	adds	r7, #48	; 0x30
 80092c2:	4698      	mov	r8, r3
 80092c4:	e07b      	b.n	80093be <calibrate.lto_priv.162+0x952>
 80092c6:	486c      	ldr	r0, [pc, #432]	; (8009478 <calibrate.lto_priv.162+0xa0c>)
 80092c8:	1830      	adds	r0, r6, r0
 80092ca:	4283      	cmp	r3, r0
 80092cc:	d907      	bls.n	80092de <calibrate.lto_priv.162+0x872>
 80092ce:	2903      	cmp	r1, #3
 80092d0:	d9b0      	bls.n	8009234 <calibrate.lto_priv.162+0x7c8>
 80092d2:	4a6a      	ldr	r2, [pc, #424]	; (800947c <calibrate.lto_priv.162+0xa10>)
 80092d4:	495b      	ldr	r1, [pc, #364]	; (8009444 <calibrate.lto_priv.162+0x9d8>)
 80092d6:	2004      	movs	r0, #4
 80092d8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 80092da:	47a8      	blx	r5
 80092dc:	e7aa      	b.n	8009234 <calibrate.lto_priv.162+0x7c8>
 80092de:	a99a      	add	r1, sp, #616	; 0x268
 80092e0:	468c      	mov	ip, r1
 80092e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	4463      	add	r3, ip
 80092e8:	3bd0      	subs	r3, #208	; 0xd0
 80092ea:	801a      	strh	r2, [r3, #0]
 80092ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ee:	3301      	adds	r3, #1
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	930d      	str	r3, [sp, #52]	; 0x34
 80092f4:	e79e      	b.n	8009234 <calibrate.lto_priv.162+0x7c8>
 80092f6:	5b43      	ldrh	r3, [r0, r5]
 80092f8:	4699      	mov	r9, r3
 80092fa:	182b      	adds	r3, r5, r0
 80092fc:	4698      	mov	r8, r3
 80092fe:	885b      	ldrh	r3, [r3, #2]
 8009300:	469a      	mov	sl, r3
 8009302:	464b      	mov	r3, r9
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	5b9a      	ldrh	r2, [r3, r6]
 8009308:	4294      	cmp	r4, r2
 800930a:	d215      	bcs.n	8009338 <calibrate.lto_priv.162+0x8cc>
 800930c:	1b12      	subs	r2, r2, r4
 800930e:	b292      	uxth	r2, r2
 8009310:	4653      	mov	r3, sl
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	5af3      	ldrh	r3, [r6, r3]
 8009316:	429c      	cmp	r4, r3
 8009318:	d211      	bcs.n	800933e <calibrate.lto_priv.162+0x8d2>
 800931a:	1b1b      	subs	r3, r3, r4
 800931c:	b29b      	uxth	r3, r3
 800931e:	429a      	cmp	r2, r3
 8009320:	d906      	bls.n	8009330 <calibrate.lto_priv.162+0x8c4>
 8009322:	4653      	mov	r3, sl
 8009324:	464a      	mov	r2, r9
 8009326:	5343      	strh	r3, [r0, r5]
 8009328:	4643      	mov	r3, r8
 800932a:	805a      	strh	r2, [r3, #2]
 800932c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800932e:	469c      	mov	ip, r3
 8009330:	3901      	subs	r1, #1
 8009332:	b209      	sxth	r1, r1
 8009334:	3802      	subs	r0, #2
 8009336:	e795      	b.n	8009264 <calibrate.lto_priv.162+0x7f8>
 8009338:	1aa2      	subs	r2, r4, r2
 800933a:	b292      	uxth	r2, r2
 800933c:	e7e8      	b.n	8009310 <calibrate.lto_priv.162+0x8a4>
 800933e:	1ae3      	subs	r3, r4, r3
 8009340:	b29b      	uxth	r3, r3
 8009342:	e7ec      	b.n	800931e <calibrate.lto_priv.162+0x8b2>
 8009344:	1ae3      	subs	r3, r4, r3
 8009346:	b29b      	uxth	r3, r3
 8009348:	e7a1      	b.n	800928e <calibrate.lto_priv.162+0x822>
 800934a:	a966      	add	r1, sp, #408	; 0x198
 800934c:	468c      	mov	ip, r1
 800934e:	a866      	add	r0, sp, #408	; 0x198
 8009350:	4681      	mov	r9, r0
 8009352:	0063      	lsls	r3, r4, #1
 8009354:	449c      	add	ip, r3
 8009356:	3302      	adds	r3, #2
 8009358:	444b      	add	r3, r9
 800935a:	4661      	mov	r1, ip
 800935c:	8818      	ldrh	r0, [r3, #0]
 800935e:	8809      	ldrh	r1, [r1, #0]
 8009360:	4681      	mov	r9, r0
 8009362:	004f      	lsls	r7, r1, #1
 8009364:	46ba      	mov	sl, r7
 8009366:	464f      	mov	r7, r9
 8009368:	007f      	lsls	r7, r7, #1
 800936a:	9712      	str	r7, [sp, #72]	; 0x48
 800936c:	4657      	mov	r7, sl
 800936e:	a88d      	add	r0, sp, #564	; 0x234
 8009370:	5a3f      	ldrh	r7, [r7, r0]
 8009372:	46ba      	mov	sl, r7
 8009374:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009376:	5a38      	ldrh	r0, [r7, r0]
 8009378:	4582      	cmp	sl, r0
 800937a:	d20e      	bcs.n	800939a <calibrate.lto_priv.162+0x92e>
 800937c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800937e:	464f      	mov	r7, r9
 8009380:	7810      	ldrb	r0, [r2, #0]
 8009382:	4662      	mov	r2, ip
 8009384:	8017      	strh	r7, [r2, #0]
 8009386:	8019      	strh	r1, [r3, #0]
 8009388:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800938a:	2803      	cmp	r0, #3
 800938c:	d905      	bls.n	800939a <calibrate.lto_priv.162+0x92e>
 800938e:	4a3c      	ldr	r2, [pc, #240]	; (8009480 <calibrate.lto_priv.162+0xa14>)
 8009390:	492c      	ldr	r1, [pc, #176]	; (8009444 <calibrate.lto_priv.162+0x9d8>)
 8009392:	2004      	movs	r0, #4
 8009394:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009396:	4798      	blx	r3
 8009398:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800939a:	3401      	adds	r4, #1
 800939c:	b2a4      	uxth	r4, r4
 800939e:	e787      	b.n	80092b0 <calibrate.lto_priv.162+0x844>
 80093a0:	2e03      	cmp	r6, #3
 80093a2:	d90b      	bls.n	80093bc <calibrate.lto_priv.162+0x950>
 80093a4:	4642      	mov	r2, r8
 80093a6:	006b      	lsls	r3, r5, #1
 80093a8:	5a9b      	ldrh	r3, [r3, r2]
 80093aa:	aa80      	add	r2, sp, #512	; 0x200
 80093ac:	0059      	lsls	r1, r3, #1
 80093ae:	5a8a      	ldrh	r2, [r1, r2]
 80093b0:	2004      	movs	r0, #4
 80093b2:	9200      	str	r2, [sp, #0]
 80093b4:	4923      	ldr	r1, [pc, #140]	; (8009444 <calibrate.lto_priv.162+0x9d8>)
 80093b6:	4a33      	ldr	r2, [pc, #204]	; (8009484 <calibrate.lto_priv.162+0xa18>)
 80093b8:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80093ba:	47b0      	blx	r6
 80093bc:	3501      	adds	r5, #1
 80093be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093c0:	b2ab      	uxth	r3, r5
 80093c2:	783e      	ldrb	r6, [r7, #0]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d8eb      	bhi.n	80093a0 <calibrate.lto_priv.162+0x934>
 80093c8:	2a00      	cmp	r2, #0
 80093ca:	d100      	bne.n	80093ce <calibrate.lto_priv.162+0x962>
 80093cc:	e6d3      	b.n	8009176 <calibrate.lto_priv.162+0x70a>
 80093ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093d0:	4a2d      	ldr	r2, [pc, #180]	; (8009488 <calibrate.lto_priv.162+0xa1c>)
 80093d2:	0059      	lsls	r1, r3, #1
 80093d4:	4b2d      	ldr	r3, [pc, #180]	; (800948c <calibrate.lto_priv.162+0xa20>)
 80093d6:	3278      	adds	r2, #120	; 0x78
 80093d8:	185b      	adds	r3, r3, r1
 80093da:	5a88      	ldrh	r0, [r1, r2]
 80093dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80093de:	1ac0      	subs	r0, r0, r3
 80093e0:	b200      	sxth	r0, r0
 80093e2:	f007 ff85 	bl	80112f0 <__aeabi_i2f>
 80093e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e8:	1c05      	adds	r5, r0, #0
 80093ea:	8818      	ldrh	r0, [r3, #0]
 80093ec:	f007 ffca 	bl	8011384 <__aeabi_ui2f>
 80093f0:	21de      	movs	r1, #222	; 0xde
 80093f2:	0589      	lsls	r1, r1, #22
 80093f4:	f007 f848 	bl	8010488 <__aeabi_fmul>
 80093f8:	21fc      	movs	r1, #252	; 0xfc
 80093fa:	0589      	lsls	r1, r1, #22
 80093fc:	f007 f976 	bl	80106ec <__aeabi_fsub>
 8009400:	4917      	ldr	r1, [pc, #92]	; (8009460 <calibrate.lto_priv.162+0x9f4>)
 8009402:	f007 f841 	bl	8010488 <__aeabi_fmul>
 8009406:	4922      	ldr	r1, [pc, #136]	; (8009490 <calibrate.lto_priv.162+0xa24>)
 8009408:	f007 f83e 	bl	8010488 <__aeabi_fmul>
 800940c:	1c01      	adds	r1, r0, #0
 800940e:	1c28      	adds	r0, r5, #0
 8009410:	f007 f96c 	bl	80106ec <__aeabi_fsub>
 8009414:	f007 ff4c 	bl	80112b0 <__aeabi_f2iz>
 8009418:	aa3c      	add	r2, sp, #240	; 0xf0
 800941a:	4694      	mov	ip, r2
 800941c:	2322      	movs	r3, #34	; 0x22
 800941e:	22e6      	movs	r2, #230	; 0xe6
 8009420:	b205      	sxth	r5, r0
 8009422:	4463      	add	r3, ip
 8009424:	801d      	strh	r5, [r3, #0]
 8009426:	4b1b      	ldr	r3, [pc, #108]	; (8009494 <calibrate.lto_priv.162+0xa28>)
 8009428:	0052      	lsls	r2, r2, #1
 800942a:	18eb      	adds	r3, r5, r3
 800942c:	b29b      	uxth	r3, r3
 800942e:	4293      	cmp	r3, r2
 8009430:	d934      	bls.n	800949c <calibrate.lto_priv.162+0xa30>
 8009432:	2e03      	cmp	r6, #3
 8009434:	d800      	bhi.n	8009438 <calibrate.lto_priv.162+0x9cc>
 8009436:	e69e      	b.n	8009176 <calibrate.lto_priv.162+0x70a>
 8009438:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800943a:	4a17      	ldr	r2, [pc, #92]	; (8009498 <calibrate.lto_priv.162+0xa2c>)
 800943c:	4905      	ldr	r1, [pc, #20]	; (8009454 <calibrate.lto_priv.162+0x9e8>)
 800943e:	2004      	movs	r0, #4
 8009440:	4798      	blx	r3
 8009442:	e698      	b.n	8009176 <calibrate.lto_priv.162+0x70a>
 8009444:	0801d6e1 	.word	0x0801d6e1
 8009448:	000087cf 	.word	0x000087cf
 800944c:	0801d74d 	.word	0x0801d74d
 8009450:	200004a8 	.word	0x200004a8
 8009454:	0801d581 	.word	0x0801d581
 8009458:	0801dbf4 	.word	0x0801dbf4
 800945c:	ffff8000 	.word	0xffff8000
 8009460:	3f99999a 	.word	0x3f99999a
 8009464:	3f866666 	.word	0x3f866666
 8009468:	0801d772 	.word	0x0801d772
 800946c:	00001387 	.word	0x00001387
 8009470:	0801d782 	.word	0x0801d782
 8009474:	000007cf 	.word	0x000007cf
 8009478:	fffff830 	.word	0xfffff830
 800947c:	0801d7b0 	.word	0x0801d7b0
 8009480:	0801d7de 	.word	0x0801d7de
 8009484:	0801d80f 	.word	0x0801d80f
 8009488:	08015f28 	.word	0x08015f28
 800948c:	08015fa8 	.word	0x08015fa8
 8009490:	447a0000 	.word	0x447a0000
 8009494:	fffffcf4 	.word	0xfffffcf4
 8009498:	0801d831 	.word	0x0801d831
 800949c:	ab66      	add	r3, sp, #408	; 0x198
 800949e:	881f      	ldrh	r7, [r3, #0]
 80094a0:	ab59      	add	r3, sp, #356	; 0x164
 80094a2:	007a      	lsls	r2, r7, #1
 80094a4:	5ad3      	ldrh	r3, [r2, r3]
 80094a6:	2105      	movs	r1, #5
 80094a8:	0018      	movs	r0, r3
 80094aa:	9312      	str	r3, [sp, #72]	; 0x48
 80094ac:	f007 fb1e 	bl	8010aec <__udivsi3>
 80094b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094b2:	b2c0      	uxtb	r0, r0
 80094b4:	0040      	lsls	r0, r0, #1
 80094b6:	5ac0      	ldrh	r0, [r0, r3]
 80094b8:	f007 ff64 	bl	8011384 <__aeabi_ui2f>
 80094bc:	21de      	movs	r1, #222	; 0xde
 80094be:	0589      	lsls	r1, r1, #22
 80094c0:	f006 ffe2 	bl	8010488 <__aeabi_fmul>
 80094c4:	21fc      	movs	r1, #252	; 0xfc
 80094c6:	0589      	lsls	r1, r1, #22
 80094c8:	f007 f910 	bl	80106ec <__aeabi_fsub>
 80094cc:	49cd      	ldr	r1, [pc, #820]	; (8009804 <calibrate.lto_priv.162+0xd98>)
 80094ce:	f006 ffdb 	bl	8010488 <__aeabi_fmul>
 80094d2:	49cd      	ldr	r1, [pc, #820]	; (8009808 <calibrate.lto_priv.162+0xd9c>)
 80094d4:	f006 ffd8 	bl	8010488 <__aeabi_fmul>
 80094d8:	4680      	mov	r8, r0
 80094da:	0028      	movs	r0, r5
 80094dc:	f007 ff08 	bl	80112f0 <__aeabi_i2f>
 80094e0:	1c01      	adds	r1, r0, #0
 80094e2:	4640      	mov	r0, r8
 80094e4:	f006 fd24 	bl	800ff30 <__aeabi_fadd>
 80094e8:	f007 fee2 	bl	80112b0 <__aeabi_f2iz>
 80094ec:	ab45      	add	r3, sp, #276	; 0x114
 80094ee:	8018      	strh	r0, [r3, #0]
 80094f0:	2e03      	cmp	r6, #3
 80094f2:	d907      	bls.n	8009504 <calibrate.lto_priv.162+0xa98>
 80094f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094f6:	4ac5      	ldr	r2, [pc, #788]	; (800980c <calibrate.lto_priv.162+0xda0>)
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80094fc:	003b      	movs	r3, r7
 80094fe:	49c4      	ldr	r1, [pc, #784]	; (8009810 <calibrate.lto_priv.162+0xda4>)
 8009500:	2004      	movs	r0, #4
 8009502:	47a0      	blx	r4
 8009504:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009506:	48c3      	ldr	r0, [pc, #780]	; (8009814 <calibrate.lto_priv.162+0xda8>)
 8009508:	f006 f87f 	bl	800f60a <acc_diagnostic_log_set_parameter>
 800950c:	4dc2      	ldr	r5, [pc, #776]	; (8009818 <calibrate.lto_priv.162+0xdac>)
 800950e:	48c3      	ldr	r0, [pc, #780]	; (800981c <calibrate.lto_priv.162+0xdb0>)
 8009510:	0029      	movs	r1, r5
 8009512:	ac45      	add	r4, sp, #276	; 0x114
 8009514:	f006 f878 	bl	800f608 <acc_diagnostic_log_array>
 8009518:	0020      	movs	r0, r4
 800951a:	f003 f8d4 	bl	800c6c6 <acc_diagnostic_log_data_i16.constprop.20>
 800951e:	0029      	movs	r1, r5
 8009520:	48bf      	ldr	r0, [pc, #764]	; (8009820 <calibrate.lto_priv.162+0xdb4>)
 8009522:	f006 f871 	bl	800f608 <acc_diagnostic_log_array>
 8009526:	ab3c      	add	r3, sp, #240	; 0xf0
 8009528:	469c      	mov	ip, r3
 800952a:	2022      	movs	r0, #34	; 0x22
 800952c:	4460      	add	r0, ip
 800952e:	f003 f8ca 	bl	800c6c6 <acc_diagnostic_log_data_i16.constprop.20>
 8009532:	4abc      	ldr	r2, [pc, #752]	; (8009824 <calibrate.lto_priv.162+0xdb8>)
 8009534:	8823      	ldrh	r3, [r4, #0]
 8009536:	4694      	mov	ip, r2
 8009538:	2200      	movs	r2, #0
 800953a:	4463      	add	r3, ip
 800953c:	9223      	str	r2, [sp, #140]	; 0x8c
 800953e:	2bc8      	cmp	r3, #200	; 0xc8
 8009540:	d900      	bls.n	8009544 <calibrate.lto_priv.162+0xad8>
 8009542:	e0a9      	b.n	8009698 <calibrate.lto_priv.162+0xc2c>
 8009544:	2301      	movs	r3, #1
 8009546:	469a      	mov	sl, r3
 8009548:	4bb7      	ldr	r3, [pc, #732]	; (8009828 <calibrate.lto_priv.162+0xdbc>)
 800954a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800954c:	332c      	adds	r3, #44	; 0x2c
 800954e:	5cd3      	ldrb	r3, [r2, r3]
 8009550:	48b6      	ldr	r0, [pc, #728]	; (800982c <calibrate.lto_priv.162+0xdc0>)
 8009552:	0019      	movs	r1, r3
 8009554:	9320      	str	r3, [sp, #128]	; 0x80
 8009556:	f006 f858 	bl	800f60a <acc_diagnostic_log_set_parameter>
 800955a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800955c:	2280      	movs	r2, #128	; 0x80
 800955e:	932e      	str	r3, [sp, #184]	; 0xb8
 8009560:	466b      	mov	r3, sp
 8009562:	189b      	adds	r3, r3, r2
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	009c      	lsls	r4, r3, #2
 8009568:	0020      	movs	r0, r4
 800956a:	303e      	adds	r0, #62	; 0x3e
 800956c:	9322      	str	r3, [sp, #136]	; 0x88
 800956e:	287b      	cmp	r0, #123	; 0x7b
 8009570:	d800      	bhi.n	8009574 <calibrate.lto_priv.162+0xb08>
 8009572:	e09e      	b.n	80096b2 <calibrate.lto_priv.162+0xc46>
 8009574:	217c      	movs	r1, #124	; 0x7c
 8009576:	f007 fb3f 	bl	8010bf8 <__aeabi_uidivmod>
 800957a:	2200      	movs	r2, #0
 800957c:	4653      	mov	r3, sl
 800957e:	0015      	movs	r5, r2
 8009580:	0020      	movs	r0, r4
 8009582:	b28c      	uxth	r4, r1
 8009584:	2100      	movs	r1, #0
 8009586:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009588:	428e      	cmp	r6, r1
 800958a:	d000      	beq.n	800958e <calibrate.lto_priv.162+0xb22>
 800958c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800958e:	465e      	mov	r6, fp
 8009590:	62b4      	str	r4, [r6, #40]	; 0x28
 8009592:	4654      	mov	r4, sl
 8009594:	62f0      	str	r0, [r6, #44]	; 0x2c
 8009596:	6333      	str	r3, [r6, #48]	; 0x30
 8009598:	6433      	str	r3, [r6, #64]	; 0x40
 800959a:	64f4      	str	r4, [r6, #76]	; 0x4c
 800959c:	2300      	movs	r3, #0
 800959e:	65b4      	str	r4, [r6, #88]	; 0x58
 80095a0:	2003      	movs	r0, #3
 80095a2:	465c      	mov	r4, fp
 80095a4:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80095a6:	6370      	str	r0, [r6, #52]	; 0x34
 80095a8:	6037      	str	r7, [r6, #0]
 80095aa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80095ac:	63b5      	str	r5, [r6, #56]	; 0x38
 80095ae:	6077      	str	r7, [r6, #4]
 80095b0:	9f26      	ldr	r7, [sp, #152]	; 0x98
 80095b2:	63f2      	str	r2, [r6, #60]	; 0x3c
 80095b4:	60b7      	str	r7, [r6, #8]
 80095b6:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 80095b8:	001a      	movs	r2, r3
 80095ba:	81b7      	strh	r7, [r6, #12]
 80095bc:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 80095be:	6473      	str	r3, [r6, #68]	; 0x44
 80095c0:	6137      	str	r7, [r6, #16]
 80095c2:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 80095c4:	64b3      	str	r3, [r6, #72]	; 0x48
 80095c6:	6177      	str	r7, [r6, #20]
 80095c8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80095ca:	6533      	str	r3, [r6, #80]	; 0x50
 80095cc:	61b7      	str	r7, [r6, #24]
 80095ce:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80095d0:	6573      	str	r3, [r6, #84]	; 0x54
 80095d2:	61f7      	str	r7, [r6, #28]
 80095d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80095d6:	3604      	adds	r6, #4
 80095d8:	61f7      	str	r7, [r6, #28]
 80095da:	65e3      	str	r3, [r4, #92]	; 0x5c
 80095dc:	4653      	mov	r3, sl
 80095de:	438b      	bics	r3, r1
 80095e0:	65f2      	str	r2, [r6, #92]	; 0x5c
 80095e2:	4651      	mov	r1, sl
 80095e4:	66b3      	str	r3, [r6, #104]	; 0x68
 80095e6:	465b      	mov	r3, fp
 80095e8:	6632      	str	r2, [r6, #96]	; 0x60
 80095ea:	6672      	str	r2, [r6, #100]	; 0x64
 80095ec:	66f1      	str	r1, [r6, #108]	; 0x6c
 80095ee:	6731      	str	r1, [r6, #112]	; 0x70
 80095f0:	679a      	str	r2, [r3, #120]	; 0x78
 80095f2:	2316      	movs	r3, #22
 80095f4:	67b3      	str	r3, [r6, #120]	; 0x78
 80095f6:	230f      	movs	r3, #15
 80095f8:	67f3      	str	r3, [r6, #124]	; 0x7c
 80095fa:	465b      	mov	r3, fp
 80095fc:	0011      	movs	r1, r2
 80095fe:	3308      	adds	r3, #8
 8009600:	67d9      	str	r1, [r3, #124]	; 0x7c
 8009602:	465d      	mov	r5, fp
 8009604:	465b      	mov	r3, fp
 8009606:	2207      	movs	r2, #7
 8009608:	3388      	adds	r3, #136	; 0x88
 800960a:	358c      	adds	r5, #140	; 0x8c
 800960c:	7029      	strb	r1, [r5, #0]
 800960e:	601a      	str	r2, [r3, #0]
 8009610:	3a01      	subs	r2, #1
 8009612:	609a      	str	r2, [r3, #8]
 8009614:	3494      	adds	r4, #148	; 0x94
 8009616:	3a08      	subs	r2, #8
 8009618:	6020      	str	r0, [r4, #0]
 800961a:	465f      	mov	r7, fp
 800961c:	611a      	str	r2, [r3, #16]
 800961e:	6159      	str	r1, [r3, #20]
 8009620:	6199      	str	r1, [r3, #24]
 8009622:	3305      	adds	r3, #5
 8009624:	7019      	strb	r1, [r3, #0]
 8009626:	4653      	mov	r3, sl
 8009628:	37a4      	adds	r7, #164	; 0xa4
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	465b      	mov	r3, fp
 800962e:	4652      	mov	r2, sl
 8009630:	33a8      	adds	r3, #168	; 0xa8
 8009632:	6019      	str	r1, [r3, #0]
 8009634:	715a      	strb	r2, [r3, #5]
 8009636:	f7fe fb31 	bl	8007c9c <acc_rss_integration_get_sensor_reference_frequency>
 800963a:	465b      	mov	r3, fp
 800963c:	2100      	movs	r1, #0
 800963e:	33b0      	adds	r3, #176	; 0xb0
 8009640:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8009642:	6018      	str	r0, [r3, #0]
 8009644:	3b04      	subs	r3, #4
 8009646:	609a      	str	r2, [r3, #8]
 8009648:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800964a:	7019      	strb	r1, [r3, #0]
 800964c:	3a01      	subs	r2, #1
 800964e:	60da      	str	r2, [r3, #12]
 8009650:	aa3c      	add	r2, sp, #240	; 0xf0
 8009652:	4694      	mov	ip, r2
 8009654:	2322      	movs	r3, #34	; 0x22
 8009656:	4463      	add	r3, ip
 8009658:	2200      	movs	r2, #0
 800965a:	5e9b      	ldrsh	r3, [r3, r2]
 800965c:	a98d      	add	r1, sp, #564	; 0x234
 800965e:	933a      	str	r3, [sp, #232]	; 0xe8
 8009660:	ab45      	add	r3, sp, #276	; 0x114
 8009662:	2200      	movs	r2, #0
 8009664:	5e9b      	ldrsh	r3, [r3, r2]
 8009666:	4658      	mov	r0, fp
 8009668:	933b      	str	r3, [sp, #236]	; 0xec
 800966a:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 800966c:	6824      	ldr	r4, [r4, #0]
 800966e:	4699      	mov	r9, r3
 8009670:	782b      	ldrb	r3, [r5, #0]
 8009672:	683f      	ldr	r7, [r7, #0]
 8009674:	930a      	str	r3, [sp, #40]	; 0x28
 8009676:	f006 fc45 	bl	800ff04 <acc_cpd_linear_sweep_get_info>
 800967a:	9a8e      	ldr	r2, [sp, #568]	; 0x238
 800967c:	9b92      	ldr	r3, [sp, #584]	; 0x248
 800967e:	429a      	cmp	r2, r3
 8009680:	d11b      	bne.n	80096ba <calibrate.lto_priv.162+0xc4e>
 8009682:	4b6b      	ldr	r3, [pc, #428]	; (8009830 <calibrate.lto_priv.162+0xdc4>)
 8009684:	4a6b      	ldr	r2, [pc, #428]	; (8009834 <calibrate.lto_priv.162+0xdc8>)
 8009686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009688:	4961      	ldr	r1, [pc, #388]	; (8009810 <calibrate.lto_priv.162+0xda4>)
 800968a:	2000      	movs	r0, #0
 800968c:	4798      	blx	r3
 800968e:	2300      	movs	r3, #0
 8009690:	9322      	str	r3, [sp, #136]	; 0x88
 8009692:	932e      	str	r3, [sp, #184]	; 0xb8
 8009694:	931c      	str	r3, [sp, #112]	; 0x70
 8009696:	e085      	b.n	80097a4 <calibrate.lto_priv.162+0xd38>
 8009698:	4b65      	ldr	r3, [pc, #404]	; (8009830 <calibrate.lto_priv.162+0xdc4>)
 800969a:	001a      	movs	r2, r3
 800969c:	3230      	adds	r2, #48	; 0x30
 800969e:	7812      	ldrb	r2, [r2, #0]
 80096a0:	2a03      	cmp	r2, #3
 80096a2:	d800      	bhi.n	80096a6 <calibrate.lto_priv.162+0xc3a>
 80096a4:	e567      	b.n	8009176 <calibrate.lto_priv.162+0x70a>
 80096a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a8:	4a63      	ldr	r2, [pc, #396]	; (8009838 <calibrate.lto_priv.162+0xdcc>)
 80096aa:	4959      	ldr	r1, [pc, #356]	; (8009810 <calibrate.lto_priv.162+0xda4>)
 80096ac:	2004      	movs	r0, #4
 80096ae:	4798      	blx	r3
 80096b0:	e561      	b.n	8009176 <calibrate.lto_priv.162+0x70a>
 80096b2:	2203      	movs	r2, #3
 80096b4:	4655      	mov	r5, sl
 80096b6:	2300      	movs	r3, #0
 80096b8:	e764      	b.n	8009584 <calibrate.lto_priv.162+0xb18>
 80096ba:	465b      	mov	r3, fp
 80096bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096be:	9910      	ldr	r1, [sp, #64]	; 0x40
 80096c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c2:	9d8d      	ldr	r5, [sp, #564]	; 0x234
 80096c4:	f7fc ff64 	bl	8006590 <acc_cpd_linear_sweep_load_program>
 80096c8:	901f      	str	r0, [sp, #124]	; 0x7c
 80096ca:	901c      	str	r0, [sp, #112]	; 0x70
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d0de      	beq.n	800968e <calibrate.lto_priv.162+0xc22>
 80096d0:	2600      	movs	r6, #0
 80096d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096d4:	42b3      	cmp	r3, r6
 80096d6:	d000      	beq.n	80096da <calibrate.lto_priv.162+0xc6e>
 80096d8:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80096da:	0038      	movs	r0, r7
 80096dc:	f007 fe52 	bl	8011384 <__aeabi_ui2f>
 80096e0:	1c01      	adds	r1, r0, #0
 80096e2:	4856      	ldr	r0, [pc, #344]	; (800983c <calibrate.lto_priv.162+0xdd0>)
 80096e4:	f006 fdbe 	bl	8010264 <__aeabi_fdiv>
 80096e8:	f007 fc0e 	bl	8010f08 <__aeabi_f2uiz>
 80096ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096ee:	3401      	adds	r4, #1
 80096f0:	469c      	mov	ip, r3
 80096f2:	b280      	uxth	r0, r0
 80096f4:	b2a4      	uxth	r4, r4
 80096f6:	4344      	muls	r4, r0
 80096f8:	4465      	add	r5, ip
 80096fa:	002b      	movs	r3, r5
 80096fc:	46a4      	mov	ip, r4
 80096fe:	4463      	add	r3, ip
 8009700:	9331      	str	r3, [sp, #196]	; 0xc4
 8009702:	4653      	mov	r3, sl
 8009704:	4033      	ands	r3, r6
 8009706:	22c4      	movs	r2, #196	; 0xc4
 8009708:	9314      	str	r3, [sp, #80]	; 0x50
 800970a:	466b      	mov	r3, sp
 800970c:	189b      	adds	r3, r3, r2
 800970e:	881b      	ldrh	r3, [r3, #0]
 8009710:	2105      	movs	r1, #5
 8009712:	3303      	adds	r3, #3
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	9340      	str	r3, [sp, #256]	; 0x100
 8009718:	0020      	movs	r0, r4
 800971a:	0063      	lsls	r3, r4, #1
 800971c:	9321      	str	r3, [sp, #132]	; 0x84
 800971e:	941b      	str	r4, [sp, #108]	; 0x6c
 8009720:	f007 f9e4 	bl	8010aec <__udivsi3>
 8009724:	2700      	movs	r7, #0
 8009726:	2305      	movs	r3, #5
 8009728:	0002      	movs	r2, r0
 800972a:	003e      	movs	r6, r7
 800972c:	003d      	movs	r5, r7
 800972e:	435a      	muls	r2, r3
 8009730:	0843      	lsrs	r3, r0, #1
 8009732:	9333      	str	r3, [sp, #204]	; 0xcc
 8009734:	3308      	adds	r3, #8
 8009736:	9334      	str	r3, [sp, #208]	; 0xd0
 8009738:	0053      	lsls	r3, r2, #1
 800973a:	9342      	str	r3, [sp, #264]	; 0x108
 800973c:	0043      	lsls	r3, r0, #1
 800973e:	9343      	str	r3, [sp, #268]	; 0x10c
 8009740:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009742:	9015      	str	r0, [sp, #84]	; 0x54
 8009744:	921d      	str	r2, [sp, #116]	; 0x74
 8009746:	9332      	str	r3, [sp, #200]	; 0xc8
 8009748:	2e00      	cmp	r6, #0
 800974a:	d03c      	beq.n	80097c6 <calibrate.lto_priv.162+0xd5a>
 800974c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800974e:	f7fb fe97 	bl	8005480 <acc_sensor_protocol_r2_is_sensor_running>
 8009752:	2800      	cmp	r0, #0
 8009754:	d02d      	beq.n	80097b2 <calibrate.lto_priv.162+0xd46>
 8009756:	4b36      	ldr	r3, [pc, #216]	; (8009830 <calibrate.lto_priv.162+0xdc4>)
 8009758:	4a39      	ldr	r2, [pc, #228]	; (8009840 <calibrate.lto_priv.162+0xdd4>)
 800975a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800975c:	492c      	ldr	r1, [pc, #176]	; (8009810 <calibrate.lto_priv.162+0xda4>)
 800975e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009760:	2000      	movs	r0, #0
 8009762:	47a0      	blx	r4
 8009764:	2f00      	cmp	r7, #0
 8009766:	d092      	beq.n	800968e <calibrate.lto_priv.162+0xc22>
 8009768:	2700      	movs	r7, #0
 800976a:	aa3c      	add	r2, sp, #240	; 0xf0
 800976c:	4694      	mov	ip, r2
 800976e:	2322      	movs	r3, #34	; 0x22
 8009770:	4463      	add	r3, ip
 8009772:	2200      	movs	r2, #0
 8009774:	5e9b      	ldrsh	r3, [r3, r2]
 8009776:	9330      	str	r3, [sp, #192]	; 0xc0
 8009778:	ab45      	add	r3, sp, #276	; 0x114
 800977a:	2200      	movs	r2, #0
 800977c:	5e9b      	ldrsh	r3, [r3, r2]
 800977e:	932f      	str	r3, [sp, #188]	; 0xbc
 8009780:	4b2b      	ldr	r3, [pc, #172]	; (8009830 <calibrate.lto_priv.162+0xdc4>)
 8009782:	001a      	movs	r2, r3
 8009784:	3230      	adds	r2, #48	; 0x30
 8009786:	7812      	ldrb	r2, [r2, #0]
 8009788:	2a03      	cmp	r2, #3
 800978a:	d800      	bhi.n	800978e <calibrate.lto_priv.162+0xd22>
 800978c:	e30b      	b.n	8009da6 <calibrate.lto_priv.162+0x133a>
 800978e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009790:	491f      	ldr	r1, [pc, #124]	; (8009810 <calibrate.lto_priv.162+0xda4>)
 8009792:	9200      	str	r2, [sp, #0]
 8009794:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009796:	4a2b      	ldr	r2, [pc, #172]	; (8009844 <calibrate.lto_priv.162+0xdd8>)
 8009798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800979a:	2004      	movs	r0, #4
 800979c:	47a0      	blx	r4
 800979e:	2f00      	cmp	r7, #0
 80097a0:	d000      	beq.n	80097a4 <calibrate.lto_priv.162+0xd38>
 80097a2:	e303      	b.n	8009dac <calibrate.lto_priv.162+0x1340>
 80097a4:	2300      	movs	r3, #0
 80097a6:	2200      	movs	r2, #0
 80097a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80097aa:	932c      	str	r3, [sp, #176]	; 0xb0
 80097ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80097ae:	921c      	str	r2, [sp, #112]	; 0x70
 80097b0:	e31b      	b.n	8009dea <calibrate.lto_priv.162+0x137e>
 80097b2:	2d00      	cmp	r5, #0
 80097b4:	d110      	bne.n	80097d8 <calibrate.lto_priv.162+0xd6c>
 80097b6:	4653      	mov	r3, sl
 80097b8:	4a23      	ldr	r2, [pc, #140]	; (8009848 <calibrate.lto_priv.162+0xddc>)
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	4923      	ldr	r1, [pc, #140]	; (800984c <calibrate.lto_priv.162+0xde0>)
 80097be:	2372      	movs	r3, #114	; 0x72
 80097c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097c2:	f002 ff81 	bl	800c6c8 <acc_confprogram_live_patch.constprop.16>
 80097c6:	4922      	ldr	r1, [pc, #136]	; (8009850 <calibrate.lto_priv.162+0xde4>)
 80097c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ca:	f7fb fe66 	bl	800549a <acc_sensor_protocol_r2_run_program>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	d0c8      	beq.n	8009764 <calibrate.lto_priv.162+0xcf8>
 80097d2:	2300      	movs	r3, #0
 80097d4:	931e      	str	r3, [sp, #120]	; 0x78
 80097d6:	e176      	b.n	8009ac6 <calibrate.lto_priv.162+0x105a>
 80097d8:	464b      	mov	r3, r9
 80097da:	4d1b      	ldr	r5, [pc, #108]	; (8009848 <calibrate.lto_priv.162+0xddc>)
 80097dc:	4c1b      	ldr	r4, [pc, #108]	; (800984c <calibrate.lto_priv.162+0xde0>)
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	002a      	movs	r2, r5
 80097e2:	2344      	movs	r3, #68	; 0x44
 80097e4:	0021      	movs	r1, r4
 80097e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097e8:	f002 ff6e 	bl	800c6c8 <acc_confprogram_live_patch.constprop.16>
 80097ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ee:	002a      	movs	r2, r5
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	0021      	movs	r1, r4
 80097f4:	2342      	movs	r3, #66	; 0x42
 80097f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097f8:	f002 ff66 	bl	800c6c8 <acc_confprogram_live_patch.constprop.16>
 80097fc:	2e00      	cmp	r6, #0
 80097fe:	d0e2      	beq.n	80097c6 <calibrate.lto_priv.162+0xd5a>
 8009800:	e7d9      	b.n	80097b6 <calibrate.lto_priv.162+0xd4a>
 8009802:	46c0      	nop			; (mov r8, r8)
 8009804:	3f99999a 	.word	0x3f99999a
 8009808:	447a0000 	.word	0x447a0000
 800980c:	0801d857 	.word	0x0801d857
 8009810:	0801d581 	.word	0x0801d581
 8009814:	0801d885 	.word	0x0801d885
 8009818:	0801d86f 	.word	0x0801d86f
 800981c:	0801d891 	.word	0x0801d891
 8009820:	0801d898 	.word	0x0801d898
 8009824:	fffffbe6 	.word	0xfffffbe6
 8009828:	08015fa8 	.word	0x08015fa8
 800982c:	0801da15 	.word	0x0801da15
 8009830:	200004a8 	.word	0x200004a8
 8009834:	0801d8c5 	.word	0x0801d8c5
 8009838:	0801d8a0 	.word	0x0801d8a0
 800983c:	42f80000 	.word	0x42f80000
 8009840:	0801d1b6 	.word	0x0801d1b6
 8009844:	0801db66 	.word	0x0801db66
 8009848:	08018434 	.word	0x08018434
 800984c:	0801af7c 	.word	0x0801af7c
 8009850:	0000023a 	.word	0x0000023a
 8009854:	2b03      	cmp	r3, #3
 8009856:	d904      	bls.n	8009862 <calibrate.lto_priv.162+0xdf6>
 8009858:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800985a:	49d1      	ldr	r1, [pc, #836]	; (8009ba0 <calibrate.lto_priv.162+0x1134>)
 800985c:	4ad1      	ldr	r2, [pc, #836]	; (8009ba4 <calibrate.lto_priv.162+0x1138>)
 800985e:	2004      	movs	r0, #4
 8009860:	4798      	blx	r3
 8009862:	4ad1      	ldr	r2, [pc, #836]	; (8009ba8 <calibrate.lto_priv.162+0x113c>)
 8009864:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009866:	0020      	movs	r0, r4
 8009868:	f005 fef0 	bl	800f64c <acc_alg_basic_saturation_check_u16>
 800986c:	2800      	cmp	r0, #0
 800986e:	d012      	beq.n	8009896 <calibrate.lto_priv.162+0xe2a>
 8009870:	4ace      	ldr	r2, [pc, #824]	; (8009bac <calibrate.lto_priv.162+0x1140>)
 8009872:	4649      	mov	r1, r9
 8009874:	0013      	movs	r3, r2
 8009876:	3330      	adds	r3, #48	; 0x30
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	290f      	cmp	r1, #15
 800987c:	d000      	beq.n	8009880 <calibrate.lto_priv.162+0xe14>
 800987e:	e0f8      	b.n	8009a72 <calibrate.lto_priv.162+0x1006>
 8009880:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009882:	2900      	cmp	r1, #0
 8009884:	d100      	bne.n	8009888 <calibrate.lto_priv.162+0xe1c>
 8009886:	e0e7      	b.n	8009a58 <calibrate.lto_priv.162+0xfec>
 8009888:	2b03      	cmp	r3, #3
 800988a:	d904      	bls.n	8009896 <calibrate.lto_priv.162+0xe2a>
 800988c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800988e:	49c4      	ldr	r1, [pc, #784]	; (8009ba0 <calibrate.lto_priv.162+0x1134>)
 8009890:	4ac7      	ldr	r2, [pc, #796]	; (8009bb0 <calibrate.lto_priv.162+0x1144>)
 8009892:	2004      	movs	r0, #4
 8009894:	4798      	blx	r3
 8009896:	4642      	mov	r2, r8
 8009898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800989a:	49c6      	ldr	r1, [pc, #792]	; (8009bb4 <calibrate.lto_priv.162+0x1148>)
 800989c:	9341      	str	r3, [sp, #260]	; 0x104
 800989e:	9b90      	ldr	r3, [sp, #576]	; 0x240
 80098a0:	3178      	adds	r1, #120	; 0x78
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	5a9b      	ldrh	r3, [r3, r2]
 80098a6:	ad73      	add	r5, sp, #460	; 0x1cc
 80098a8:	9335      	str	r3, [sp, #212]	; 0xd4
 80098aa:	9b91      	ldr	r3, [sp, #580]	; 0x244
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	5a9b      	ldrh	r3, [r3, r2]
 80098b0:	4ac1      	ldr	r2, [pc, #772]	; (8009bb8 <calibrate.lto_priv.162+0x114c>)
 80098b2:	933f      	str	r3, [sp, #252]	; 0xfc
 80098b4:	465b      	mov	r3, fp
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	18d2      	adds	r2, r2, r3
 80098bc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80098be:	5a5b      	ldrh	r3, [r3, r1]
 80098c0:	1a9b      	subs	r3, r3, r2
 80098c2:	b21b      	sxth	r3, r3
 80098c4:	0018      	movs	r0, r3
 80098c6:	930e      	str	r3, [sp, #56]	; 0x38
 80098c8:	f007 fd12 	bl	80112f0 <__aeabi_i2f>
 80098cc:	4642      	mov	r2, r8
 80098ce:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
 80098d0:	1c06      	adds	r6, r0, #0
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	5a98      	ldrh	r0, [r3, r2]
 80098d6:	f007 fd55 	bl	8011384 <__aeabi_ui2f>
 80098da:	21de      	movs	r1, #222	; 0xde
 80098dc:	0589      	lsls	r1, r1, #22
 80098de:	f006 fdd3 	bl	8010488 <__aeabi_fmul>
 80098e2:	21fc      	movs	r1, #252	; 0xfc
 80098e4:	0589      	lsls	r1, r1, #22
 80098e6:	f006 ff01 	bl	80106ec <__aeabi_fsub>
 80098ea:	49b4      	ldr	r1, [pc, #720]	; (8009bbc <calibrate.lto_priv.162+0x1150>)
 80098ec:	f006 fdcc 	bl	8010488 <__aeabi_fmul>
 80098f0:	49b3      	ldr	r1, [pc, #716]	; (8009bc0 <calibrate.lto_priv.162+0x1154>)
 80098f2:	f006 fdc9 	bl	8010488 <__aeabi_fmul>
 80098f6:	1c01      	adds	r1, r0, #0
 80098f8:	1c30      	adds	r0, r6, #0
 80098fa:	f006 fef7 	bl	80106ec <__aeabi_fsub>
 80098fe:	f007 fcd7 	bl	80112b0 <__aeabi_f2iz>
 8009902:	b203      	sxth	r3, r0
 8009904:	4698      	mov	r8, r3
 8009906:	ab3c      	add	r3, sp, #240	; 0xf0
 8009908:	469c      	mov	ip, r3
 800990a:	2626      	movs	r6, #38	; 0x26
 800990c:	4643      	mov	r3, r8
 800990e:	4466      	add	r6, ip
 8009910:	8033      	strh	r3, [r6, #0]
 8009912:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8009914:	f007 fd36 	bl	8011384 <__aeabi_ui2f>
 8009918:	21de      	movs	r1, #222	; 0xde
 800991a:	0589      	lsls	r1, r1, #22
 800991c:	f006 fdb4 	bl	8010488 <__aeabi_fmul>
 8009920:	21fc      	movs	r1, #252	; 0xfc
 8009922:	0589      	lsls	r1, r1, #22
 8009924:	f006 fee2 	bl	80106ec <__aeabi_fsub>
 8009928:	49a4      	ldr	r1, [pc, #656]	; (8009bbc <calibrate.lto_priv.162+0x1150>)
 800992a:	f006 fdad 	bl	8010488 <__aeabi_fmul>
 800992e:	49a4      	ldr	r1, [pc, #656]	; (8009bc0 <calibrate.lto_priv.162+0x1154>)
 8009930:	f006 fdaa 	bl	8010488 <__aeabi_fmul>
 8009934:	9035      	str	r0, [sp, #212]	; 0xd4
 8009936:	4640      	mov	r0, r8
 8009938:	f007 fcda 	bl	80112f0 <__aeabi_i2f>
 800993c:	1c01      	adds	r1, r0, #0
 800993e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8009940:	f006 faf6 	bl	800ff30 <__aeabi_fadd>
 8009944:	f007 fcb4 	bl	80112b0 <__aeabi_f2iz>
 8009948:	8028      	strh	r0, [r5, #0]
 800994a:	983f      	ldr	r0, [sp, #252]	; 0xfc
 800994c:	f007 fd1a 	bl	8011384 <__aeabi_ui2f>
 8009950:	21de      	movs	r1, #222	; 0xde
 8009952:	0589      	lsls	r1, r1, #22
 8009954:	f006 fd98 	bl	8010488 <__aeabi_fmul>
 8009958:	21fc      	movs	r1, #252	; 0xfc
 800995a:	0589      	lsls	r1, r1, #22
 800995c:	f006 fec6 	bl	80106ec <__aeabi_fsub>
 8009960:	4996      	ldr	r1, [pc, #600]	; (8009bbc <calibrate.lto_priv.162+0x1150>)
 8009962:	f006 fd91 	bl	8010488 <__aeabi_fmul>
 8009966:	4996      	ldr	r1, [pc, #600]	; (8009bc0 <calibrate.lto_priv.162+0x1154>)
 8009968:	f006 fd8e 	bl	8010488 <__aeabi_fmul>
 800996c:	f007 fca0 	bl	80112b0 <__aeabi_f2iz>
 8009970:	2288      	movs	r2, #136	; 0x88
 8009972:	ab3c      	add	r3, sp, #240	; 0xf0
 8009974:	0052      	lsls	r2, r2, #1
 8009976:	189b      	adds	r3, r3, r2
 8009978:	8018      	strh	r0, [r3, #0]
 800997a:	4b92      	ldr	r3, [pc, #584]	; (8009bc4 <calibrate.lto_priv.162+0x1158>)
 800997c:	4892      	ldr	r0, [pc, #584]	; (8009bc8 <calibrate.lto_priv.162+0x115c>)
 800997e:	4698      	mov	r8, r3
 8009980:	0019      	movs	r1, r3
 8009982:	f005 fe41 	bl	800f608 <acc_diagnostic_log_array>
 8009986:	0030      	movs	r0, r6
 8009988:	f002 fe9d 	bl	800c6c6 <acc_diagnostic_log_data_i16.constprop.20>
 800998c:	4641      	mov	r1, r8
 800998e:	488e      	ldr	r0, [pc, #568]	; (8009bc8 <calibrate.lto_priv.162+0x115c>)
 8009990:	f005 fe3a 	bl	800f608 <acc_diagnostic_log_array>
 8009994:	0028      	movs	r0, r5
 8009996:	f002 fe96 	bl	800c6c6 <acc_diagnostic_log_data_i16.constprop.20>
 800999a:	4641      	mov	r1, r8
 800999c:	488b      	ldr	r0, [pc, #556]	; (8009bcc <calibrate.lto_priv.162+0x1160>)
 800999e:	f005 fe33 	bl	800f608 <acc_diagnostic_log_array>
 80099a2:	a880      	add	r0, sp, #512	; 0x200
 80099a4:	f002 fe8f 	bl	800c6c6 <acc_diagnostic_log_data_i16.constprop.20>
 80099a8:	8832      	ldrh	r2, [r6, #0]
 80099aa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80099ac:	1a9b      	subs	r3, r3, r2
 80099ae:	b21b      	sxth	r3, r3
 80099b0:	17d9      	asrs	r1, r3, #31
 80099b2:	185b      	adds	r3, r3, r1
 80099b4:	404b      	eors	r3, r1
 80099b6:	b21b      	sxth	r3, r3
 80099b8:	2b64      	cmp	r3, #100	; 0x64
 80099ba:	dc6d      	bgt.n	8009a98 <calibrate.lto_priv.162+0x102c>
 80099bc:	4b84      	ldr	r3, [pc, #528]	; (8009bd0 <calibrate.lto_priv.162+0x1164>)
 80099be:	469c      	mov	ip, r3
 80099c0:	23e6      	movs	r3, #230	; 0xe6
 80099c2:	4462      	add	r2, ip
 80099c4:	b292      	uxth	r2, r2
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d865      	bhi.n	8009a98 <calibrate.lto_priv.162+0x102c>
 80099cc:	2300      	movs	r3, #0
 80099ce:	5eea      	ldrsh	r2, [r5, r3]
 80099d0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80099d2:	1a9b      	subs	r3, r3, r2
 80099d4:	b21b      	sxth	r3, r3
 80099d6:	17d9      	asrs	r1, r3, #31
 80099d8:	185b      	adds	r3, r3, r1
 80099da:	404b      	eors	r3, r1
 80099dc:	b21b      	sxth	r3, r3
 80099de:	2b64      	cmp	r3, #100	; 0x64
 80099e0:	dc5a      	bgt.n	8009a98 <calibrate.lto_priv.162+0x102c>
 80099e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099e4:	4293      	cmp	r3, r2
 80099e6:	db57      	blt.n	8009a98 <calibrate.lto_priv.162+0x102c>
 80099e8:	497a      	ldr	r1, [pc, #488]	; (8009bd4 <calibrate.lto_priv.162+0x1168>)
 80099ea:	487b      	ldr	r0, [pc, #492]	; (8009bd8 <calibrate.lto_priv.162+0x116c>)
 80099ec:	f005 fe0c 	bl	800f608 <acc_diagnostic_log_array>
 80099f0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80099f2:	0020      	movs	r0, r4
 80099f4:	f005 fe06 	bl	800f604 <acc_diagnostic_log_data_u16>
 80099f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d000      	beq.n	8009a00 <calibrate.lto_priv.162+0xf94>
 80099fe:	e08d      	b.n	8009b1c <calibrate.lto_priv.162+0x10b0>
 8009a00:	2124      	movs	r1, #36	; 0x24
 8009a02:	4876      	ldr	r0, [pc, #472]	; (8009bdc <calibrate.lto_priv.162+0x1170>)
 8009a04:	f7fb fabc 	bl	8004f80 <acc_assert_fail>
 8009a08:	464a      	mov	r2, r9
 8009a0a:	2908      	cmp	r1, #8
 8009a0c:	d200      	bcs.n	8009a10 <calibrate.lto_priv.162+0xfa4>
 8009a0e:	2208      	movs	r2, #8
 8009a10:	2108      	movs	r1, #8
 8009a12:	4249      	negs	r1, r1
 8009a14:	4689      	mov	r9, r1
 8009a16:	4491      	add	r9, r2
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d906      	bls.n	8009a2a <calibrate.lto_priv.162+0xfbe>
 8009a1c:	4b63      	ldr	r3, [pc, #396]	; (8009bac <calibrate.lto_priv.162+0x1140>)
 8009a1e:	4a70      	ldr	r2, [pc, #448]	; (8009be0 <calibrate.lto_priv.162+0x1174>)
 8009a20:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009a22:	495f      	ldr	r1, [pc, #380]	; (8009ba0 <calibrate.lto_priv.162+0x1134>)
 8009a24:	464b      	mov	r3, r9
 8009a26:	2004      	movs	r0, #4
 8009a28:	47a0      	blx	r4
 8009a2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a2c:	f006 f9a6 	bl	800fd7c <acc_sensor_protocol_r2_stop.constprop.25>
 8009a30:	2d00      	cmp	r5, #0
 8009a32:	d000      	beq.n	8009a36 <calibrate.lto_priv.162+0xfca>
 8009a34:	e68a      	b.n	800974c <calibrate.lto_priv.162+0xce0>
 8009a36:	2e00      	cmp	r6, #0
 8009a38:	d000      	beq.n	8009a3c <calibrate.lto_priv.162+0xfd0>
 8009a3a:	e685      	b.n	8009748 <calibrate.lto_priv.162+0xcdc>
 8009a3c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d100      	bne.n	8009a44 <calibrate.lto_priv.162+0xfd8>
 8009a42:	e68f      	b.n	8009764 <calibrate.lto_priv.162+0xcf8>
 8009a44:	2f00      	cmp	r7, #0
 8009a46:	d000      	beq.n	8009a4a <calibrate.lto_priv.162+0xfde>
 8009a48:	e68f      	b.n	800976a <calibrate.lto_priv.162+0xcfe>
 8009a4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d100      	bne.n	8009a52 <calibrate.lto_priv.162+0xfe6>
 8009a50:	e1d6      	b.n	8009e00 <calibrate.lto_priv.162+0x1394>
 8009a52:	4653      	mov	r3, sl
 8009a54:	9323      	str	r3, [sp, #140]	; 0x8c
 8009a56:	e577      	b.n	8009548 <calibrate.lto_priv.162+0xadc>
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d800      	bhi.n	8009a5e <calibrate.lto_priv.162+0xff2>
 8009a5c:	e198      	b.n	8009d90 <calibrate.lto_priv.162+0x1324>
 8009a5e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009a60:	494f      	ldr	r1, [pc, #316]	; (8009ba0 <calibrate.lto_priv.162+0x1134>)
 8009a62:	4a60      	ldr	r2, [pc, #384]	; (8009be4 <calibrate.lto_priv.162+0x1178>)
 8009a64:	2004      	movs	r0, #4
 8009a66:	4798      	blx	r3
 8009a68:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009a6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a6c:	46b1      	mov	r9, r6
 8009a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a70:	e7db      	b.n	8009a2a <calibrate.lto_priv.162+0xfbe>
 8009a72:	2208      	movs	r2, #8
 8009a74:	4694      	mov	ip, r2
 8009a76:	44e1      	add	r9, ip
 8009a78:	464a      	mov	r2, r9
 8009a7a:	2a0f      	cmp	r2, #15
 8009a7c:	d901      	bls.n	8009a82 <calibrate.lto_priv.162+0x1016>
 8009a7e:	220f      	movs	r2, #15
 8009a80:	4691      	mov	r9, r2
 8009a82:	2600      	movs	r6, #0
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d9d0      	bls.n	8009a2a <calibrate.lto_priv.162+0xfbe>
 8009a88:	4b48      	ldr	r3, [pc, #288]	; (8009bac <calibrate.lto_priv.162+0x1140>)
 8009a8a:	4a57      	ldr	r2, [pc, #348]	; (8009be8 <calibrate.lto_priv.162+0x117c>)
 8009a8c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009a8e:	4944      	ldr	r1, [pc, #272]	; (8009ba0 <calibrate.lto_priv.162+0x1134>)
 8009a90:	464b      	mov	r3, r9
 8009a92:	2004      	movs	r0, #4
 8009a94:	47a0      	blx	r4
 8009a96:	e7c8      	b.n	8009a2a <calibrate.lto_priv.162+0xfbe>
 8009a98:	4b44      	ldr	r3, [pc, #272]	; (8009bac <calibrate.lto_priv.162+0x1140>)
 8009a9a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009a9c:	001a      	movs	r2, r3
 8009a9e:	3230      	adds	r2, #48	; 0x30
 8009aa0:	7812      	ldrb	r2, [r2, #0]
 8009aa2:	2902      	cmp	r1, #2
 8009aa4:	d02d      	beq.n	8009b02 <calibrate.lto_priv.162+0x1096>
 8009aa6:	2a03      	cmp	r2, #3
 8009aa8:	d905      	bls.n	8009ab6 <calibrate.lto_priv.162+0x104a>
 8009aaa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009aac:	4a4f      	ldr	r2, [pc, #316]	; (8009bec <calibrate.lto_priv.162+0x1180>)
 8009aae:	000b      	movs	r3, r1
 8009ab0:	2004      	movs	r0, #4
 8009ab2:	493b      	ldr	r1, [pc, #236]	; (8009ba0 <calibrate.lto_priv.162+0x1134>)
 8009ab4:	47a0      	blx	r4
 8009ab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ab8:	f7f8 fdfa 	bl	80026b0 <acc_sensor_protocol_r2_ack_event>
 8009abc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009abe:	3301      	adds	r3, #1
 8009ac0:	931e      	str	r3, [sp, #120]	; 0x78
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8009ac6:	21fa      	movs	r1, #250	; 0xfa
 8009ac8:	ac80      	add	r4, sp, #512	; 0x200
 8009aca:	0022      	movs	r2, r4
 8009acc:	00c9      	lsls	r1, r1, #3
 8009ace:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ad0:	f006 f8a2 	bl	800fc18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8009ad4:	9019      	str	r0, [sp, #100]	; 0x64
 8009ad6:	1e05      	subs	r5, r0, #0
 8009ad8:	d100      	bne.n	8009adc <calibrate.lto_priv.162+0x1070>
 8009ada:	e643      	b.n	8009764 <calibrate.lto_priv.162+0xcf8>
 8009adc:	7823      	ldrb	r3, [r4, #0]
 8009ade:	2b06      	cmp	r3, #6
 8009ae0:	d000      	beq.n	8009ae4 <calibrate.lto_priv.162+0x1078>
 8009ae2:	e63f      	b.n	8009764 <calibrate.lto_priv.162+0xcf8>
 8009ae4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ae6:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d300      	bcc.n	8009aee <calibrate.lto_priv.162+0x1082>
 8009aec:	e0f6      	b.n	8009cdc <calibrate.lto_priv.162+0x1270>
 8009aee:	4b2f      	ldr	r3, [pc, #188]	; (8009bac <calibrate.lto_priv.162+0x1140>)
 8009af0:	4a3f      	ldr	r2, [pc, #252]	; (8009bf0 <calibrate.lto_priv.162+0x1184>)
 8009af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af4:	492a      	ldr	r1, [pc, #168]	; (8009ba0 <calibrate.lto_priv.162+0x1134>)
 8009af6:	2000      	movs	r0, #0
 8009af8:	4798      	blx	r3
 8009afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009afc:	f006 f93e 	bl	800fd7c <acc_sensor_protocol_r2_stop.constprop.25>
 8009b00:	e630      	b.n	8009764 <calibrate.lto_priv.162+0xcf8>
 8009b02:	2a03      	cmp	r2, #3
 8009b04:	d904      	bls.n	8009b10 <calibrate.lto_priv.162+0x10a4>
 8009b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b08:	4a3a      	ldr	r2, [pc, #232]	; (8009bf4 <calibrate.lto_priv.162+0x1188>)
 8009b0a:	4925      	ldr	r1, [pc, #148]	; (8009ba0 <calibrate.lto_priv.162+0x1134>)
 8009b0c:	2004      	movs	r0, #4
 8009b0e:	4798      	blx	r3
 8009b10:	2700      	movs	r7, #0
 8009b12:	464b      	mov	r3, r9
 8009b14:	003e      	movs	r6, r7
 8009b16:	930e      	str	r3, [sp, #56]	; 0x38
 8009b18:	003d      	movs	r5, r7
 8009b1a:	e786      	b.n	8009a2a <calibrate.lto_priv.162+0xfbe>
 8009b1c:	0025      	movs	r5, r4
 8009b1e:	2000      	movs	r0, #0
 8009b20:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8009b22:	940e      	str	r4, [sp, #56]	; 0x38
 8009b24:	191b      	adds	r3, r3, r4
 8009b26:	882a      	ldrh	r2, [r5, #0]
 8009b28:	3502      	adds	r5, #2
 8009b2a:	1880      	adds	r0, r0, r2
 8009b2c:	42ab      	cmp	r3, r5
 8009b2e:	d1fa      	bne.n	8009b26 <calibrate.lto_priv.162+0x10ba>
 8009b30:	991d      	ldr	r1, [sp, #116]	; 0x74
 8009b32:	f006 ffdb 	bl	8010aec <__udivsi3>
 8009b36:	0022      	movs	r2, r4
 8009b38:	b280      	uxth	r0, r0
 8009b3a:	8813      	ldrh	r3, [r2, #0]
 8009b3c:	4283      	cmp	r3, r0
 8009b3e:	d92b      	bls.n	8009b98 <calibrate.lto_priv.162+0x112c>
 8009b40:	1a1b      	subs	r3, r3, r0
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	8013      	strh	r3, [r2, #0]
 8009b46:	3202      	adds	r2, #2
 8009b48:	4295      	cmp	r5, r2
 8009b4a:	d1f6      	bne.n	8009b3a <calibrate.lto_priv.162+0x10ce>
 8009b4c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009b4e:	0027      	movs	r7, r4
 8009b50:	469c      	mov	ip, r3
 8009b52:	44a4      	add	ip, r4
 8009b54:	4663      	mov	r3, ip
 8009b56:	46a0      	mov	r8, r4
 8009b58:	9335      	str	r3, [sp, #212]	; 0xd4
 8009b5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b5c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009b5e:	931e      	str	r3, [sp, #120]	; 0x78
 8009b60:	2d00      	cmp	r5, #0
 8009b62:	d14d      	bne.n	8009c00 <calibrate.lto_priv.162+0x1194>
 8009b64:	0023      	movs	r3, r4
 8009b66:	0028      	movs	r0, r5
 8009b68:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d168      	bne.n	8009c40 <calibrate.lto_priv.162+0x11d4>
 8009b6e:	2103      	movs	r1, #3
 8009b70:	f006 ffbc 	bl	8010aec <__udivsi3>
 8009b74:	0025      	movs	r5, r4
 8009b76:	2302      	movs	r3, #2
 8009b78:	b280      	uxth	r0, r0
 8009b7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d867      	bhi.n	8009c50 <calibrate.lto_priv.162+0x11e4>
 8009b80:	0013      	movs	r3, r2
 8009b82:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d300      	bcc.n	8009b8a <calibrate.lto_priv.162+0x111e>
 8009b88:	e081      	b.n	8009c8e <calibrate.lto_priv.162+0x1222>
 8009b8a:	4b08      	ldr	r3, [pc, #32]	; (8009bac <calibrate.lto_priv.162+0x1140>)
 8009b8c:	4a1a      	ldr	r2, [pc, #104]	; (8009bf8 <calibrate.lto_priv.162+0x118c>)
 8009b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b90:	491a      	ldr	r1, [pc, #104]	; (8009bfc <calibrate.lto_priv.162+0x1190>)
 8009b92:	2000      	movs	r0, #0
 8009b94:	4798      	blx	r3
 8009b96:	e7bb      	b.n	8009b10 <calibrate.lto_priv.162+0x10a4>
 8009b98:	1ac3      	subs	r3, r0, r3
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	e7d2      	b.n	8009b44 <calibrate.lto_priv.162+0x10d8>
 8009b9e:	46c0      	nop			; (mov r8, r8)
 8009ba0:	0801d581 	.word	0x0801d581
 8009ba4:	0801d90a 	.word	0x0801d90a
 8009ba8:	402ca8ad 	.word	0x402ca8ad
 8009bac:	200004a8 	.word	0x200004a8
 8009bb0:	0801d95a 	.word	0x0801d95a
 8009bb4:	08015f28 	.word	0x08015f28
 8009bb8:	08015fa8 	.word	0x08015fa8
 8009bbc:	3f99999a 	.word	0x3f99999a
 8009bc0:	447a0000 	.word	0x447a0000
 8009bc4:	0801d86f 	.word	0x0801d86f
 8009bc8:	0801d9d6 	.word	0x0801d9d6
 8009bcc:	0801d9e4 	.word	0x0801d9e4
 8009bd0:	fffffcf4 	.word	0xfffffcf4
 8009bd4:	0801d9f2 	.word	0x0801d9f2
 8009bd8:	0801da20 	.word	0x0801da20
 8009bdc:	0801da72 	.word	0x0801da72
 8009be0:	0801d928 	.word	0x0801d928
 8009be4:	0801d97a 	.word	0x0801d97a
 8009be8:	0801d9a2 	.word	0x0801d9a2
 8009bec:	0801da34 	.word	0x0801da34
 8009bf0:	0801d227 	.word	0x0801d227
 8009bf4:	0801da5b 	.word	0x0801da5b
 8009bf8:	0801db19 	.word	0x0801db19
 8009bfc:	0801dafc 	.word	0x0801dafc
 8009c00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c02:	0058      	lsls	r0, r3, #1
 8009c04:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8009c06:	1940      	adds	r0, r0, r5
 8009c08:	1bd9      	subs	r1, r3, r7
 8009c0a:	f006 ff6f 	bl	8010aec <__udivsi3>
 8009c0e:	1e06      	subs	r6, r0, #0
 8009c10:	d014      	beq.n	8009c3c <calibrate.lto_priv.162+0x11d0>
 8009c12:	0042      	lsls	r2, r0, #1
 8009c14:	4643      	mov	r3, r8
 8009c16:	2000      	movs	r0, #0
 8009c18:	4442      	add	r2, r8
 8009c1a:	8819      	ldrh	r1, [r3, #0]
 8009c1c:	3302      	adds	r3, #2
 8009c1e:	1840      	adds	r0, r0, r1
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d1fa      	bne.n	8009c1a <calibrate.lto_priv.162+0x11ae>
 8009c24:	0031      	movs	r1, r6
 8009c26:	f006 ff61 	bl	8010aec <__udivsi3>
 8009c2a:	8038      	strh	r0, [r7, #0]
 8009c2c:	0073      	lsls	r3, r6, #1
 8009c2e:	4498      	add	r8, r3
 8009c30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c32:	3d01      	subs	r5, #1
 8009c34:	1b9b      	subs	r3, r3, r6
 8009c36:	931e      	str	r3, [sp, #120]	; 0x78
 8009c38:	3702      	adds	r7, #2
 8009c3a:	e791      	b.n	8009b60 <calibrate.lto_priv.162+0x10f4>
 8009c3c:	8038      	strh	r0, [r7, #0]
 8009c3e:	e7f5      	b.n	8009c2c <calibrate.lto_priv.162+0x11c0>
 8009c40:	8819      	ldrh	r1, [r3, #0]
 8009c42:	1c0a      	adds	r2, r1, #0
 8009c44:	4281      	cmp	r1, r0
 8009c46:	d200      	bcs.n	8009c4a <calibrate.lto_priv.162+0x11de>
 8009c48:	1c02      	adds	r2, r0, #0
 8009c4a:	b290      	uxth	r0, r2
 8009c4c:	3302      	adds	r3, #2
 8009c4e:	e78b      	b.n	8009b68 <calibrate.lto_priv.162+0x10fc>
 8009c50:	882a      	ldrh	r2, [r5, #0]
 8009c52:	88a9      	ldrh	r1, [r5, #4]
 8009c54:	428a      	cmp	r2, r1
 8009c56:	d802      	bhi.n	8009c5e <calibrate.lto_priv.162+0x11f2>
 8009c58:	0016      	movs	r6, r2
 8009c5a:	000a      	movs	r2, r1
 8009c5c:	0031      	movs	r1, r6
 8009c5e:	4290      	cmp	r0, r2
 8009c60:	d212      	bcs.n	8009c88 <calibrate.lto_priv.162+0x121c>
 8009c62:	00ce      	lsls	r6, r1, #3
 8009c64:	42b2      	cmp	r2, r6
 8009c66:	d90f      	bls.n	8009c88 <calibrate.lto_priv.162+0x121c>
 8009c68:	4c90      	ldr	r4, [pc, #576]	; (8009eac <calibrate.lto_priv.162+0x1440>)
 8009c6a:	0025      	movs	r5, r4
 8009c6c:	3530      	adds	r5, #48	; 0x30
 8009c6e:	782d      	ldrb	r5, [r5, #0]
 8009c70:	2d03      	cmp	r5, #3
 8009c72:	d800      	bhi.n	8009c76 <calibrate.lto_priv.162+0x120a>
 8009c74:	e74c      	b.n	8009b10 <calibrate.lto_priv.162+0x10a4>
 8009c76:	9002      	str	r0, [sp, #8]
 8009c78:	9101      	str	r1, [sp, #4]
 8009c7a:	9200      	str	r2, [sp, #0]
 8009c7c:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8009c7e:	4a8c      	ldr	r2, [pc, #560]	; (8009eb0 <calibrate.lto_priv.162+0x1444>)
 8009c80:	498c      	ldr	r1, [pc, #560]	; (8009eb4 <calibrate.lto_priv.162+0x1448>)
 8009c82:	2004      	movs	r0, #4
 8009c84:	47a0      	blx	r4
 8009c86:	e743      	b.n	8009b10 <calibrate.lto_priv.162+0x10a4>
 8009c88:	3301      	adds	r3, #1
 8009c8a:	3502      	adds	r5, #2
 8009c8c:	e775      	b.n	8009b7a <calibrate.lto_priv.162+0x110e>
 8009c8e:	0022      	movs	r2, r4
 8009c90:	2300      	movs	r3, #0
 8009c92:	3210      	adds	r2, #16
 8009c94:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009c96:	8809      	ldrh	r1, [r1, #0]
 8009c98:	185b      	adds	r3, r3, r1
 8009c9a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009c9c:	3102      	adds	r1, #2
 8009c9e:	910e      	str	r1, [sp, #56]	; 0x38
 8009ca0:	428a      	cmp	r2, r1
 8009ca2:	d1f7      	bne.n	8009c94 <calibrate.lto_priv.162+0x1228>
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8009ca8:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8009caa:	4288      	cmp	r0, r1
 8009cac:	d811      	bhi.n	8009cd2 <calibrate.lto_priv.162+0x1266>
 8009cae:	2105      	movs	r1, #5
 8009cb0:	4359      	muls	r1, r3
 8009cb2:	428a      	cmp	r2, r1
 8009cb4:	d271      	bcs.n	8009d9a <calibrate.lto_priv.162+0x132e>
 8009cb6:	497d      	ldr	r1, [pc, #500]	; (8009eac <calibrate.lto_priv.162+0x1440>)
 8009cb8:	0008      	movs	r0, r1
 8009cba:	3030      	adds	r0, #48	; 0x30
 8009cbc:	7800      	ldrb	r0, [r0, #0]
 8009cbe:	2803      	cmp	r0, #3
 8009cc0:	d800      	bhi.n	8009cc4 <calibrate.lto_priv.162+0x1258>
 8009cc2:	e725      	b.n	8009b10 <calibrate.lto_priv.162+0x10a4>
 8009cc4:	9200      	str	r2, [sp, #0]
 8009cc6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009cc8:	4a7b      	ldr	r2, [pc, #492]	; (8009eb8 <calibrate.lto_priv.162+0x144c>)
 8009cca:	497a      	ldr	r1, [pc, #488]	; (8009eb4 <calibrate.lto_priv.162+0x1448>)
 8009ccc:	2004      	movs	r0, #4
 8009cce:	47a0      	blx	r4
 8009cd0:	e71e      	b.n	8009b10 <calibrate.lto_priv.162+0x10a4>
 8009cd2:	0048      	lsls	r0, r1, #1
 8009cd4:	5a20      	ldrh	r0, [r4, r0]
 8009cd6:	3101      	adds	r1, #1
 8009cd8:	1812      	adds	r2, r2, r0
 8009cda:	e7e5      	b.n	8009ca8 <calibrate.lto_priv.162+0x123c>
 8009cdc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8009cde:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ce2:	f7f8 f8c9 	bl	8001e78 <acc_sensor_protocol_r2_transfer_data>
 8009ce6:	4680      	mov	r8, r0
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d100      	bne.n	8009cee <calibrate.lto_priv.162+0x1282>
 8009cec:	e53a      	b.n	8009764 <calibrate.lto_priv.162+0xcf8>
 8009cee:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 8009cf0:	005c      	lsls	r4, r3, #1
 8009cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cf4:	4444      	add	r4, r8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d01f      	beq.n	8009d3a <calibrate.lto_priv.162+0x12ce>
 8009cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cfe:	18e6      	adds	r6, r4, r3
 8009d00:	0032      	movs	r2, r6
 8009d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d04:	4650      	mov	r0, sl
 8009d06:	f7f6 fa17 	bl	8000138 <acc_probes_execute_uint16>
 8009d0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d0c:	0030      	movs	r0, r6
 8009d0e:	f7f8 fba1 	bl	8002454 <acc_alg_cca_calculate>
 8009d12:	496a      	ldr	r1, [pc, #424]	; (8009ebc <calibrate.lto_priv.162+0x1450>)
 8009d14:	9016      	str	r0, [sp, #88]	; 0x58
 8009d16:	2601      	movs	r6, #1
 8009d18:	f007 f8c2 	bl	8010ea0 <__aeabi_fcmpgt>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d100      	bne.n	8009d22 <calibrate.lto_priv.162+0x12b6>
 8009d20:	1c06      	adds	r6, r0, #0
 8009d22:	b2f3      	uxtb	r3, r6
 8009d24:	4965      	ldr	r1, [pc, #404]	; (8009ebc <calibrate.lto_priv.162+0x1450>)
 8009d26:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009d28:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d2a:	f007 f8b9 	bl	8010ea0 <__aeabi_fcmpgt>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d124      	bne.n	8009d7c <calibrate.lto_priv.162+0x1310>
 8009d32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d126      	bne.n	8009d86 <calibrate.lto_priv.162+0x131a>
 8009d38:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d3a:	4a61      	ldr	r2, [pc, #388]	; (8009ec0 <calibrate.lto_priv.162+0x1454>)
 8009d3c:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009d3e:	0020      	movs	r0, r4
 8009d40:	f005 fc84 	bl	800f64c <acc_alg_basic_saturation_check_u16>
 8009d44:	1e06      	subs	r6, r0, #0
 8009d46:	d000      	beq.n	8009d4a <calibrate.lto_priv.162+0x12de>
 8009d48:	e58b      	b.n	8009862 <calibrate.lto_priv.162+0xdf6>
 8009d4a:	4a58      	ldr	r2, [pc, #352]	; (8009eac <calibrate.lto_priv.162+0x1440>)
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	0013      	movs	r3, r2
 8009d50:	3330      	adds	r3, #48	; 0x30
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2900      	cmp	r1, #0
 8009d56:	d000      	beq.n	8009d5a <calibrate.lto_priv.162+0x12ee>
 8009d58:	e656      	b.n	8009a08 <calibrate.lto_priv.162+0xf9c>
 8009d5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d5c:	2900      	cmp	r1, #0
 8009d5e:	d100      	bne.n	8009d62 <calibrate.lto_priv.162+0x12f6>
 8009d60:	e578      	b.n	8009854 <calibrate.lto_priv.162+0xde8>
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d904      	bls.n	8009d70 <calibrate.lto_priv.162+0x1304>
 8009d66:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009d68:	4956      	ldr	r1, [pc, #344]	; (8009ec4 <calibrate.lto_priv.162+0x1458>)
 8009d6a:	4a57      	ldr	r2, [pc, #348]	; (8009ec8 <calibrate.lto_priv.162+0x145c>)
 8009d6c:	2004      	movs	r0, #4
 8009d6e:	4798      	blx	r3
 8009d70:	464b      	mov	r3, r9
 8009d72:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009d74:	930a      	str	r3, [sp, #40]	; 0x28
 8009d76:	230f      	movs	r3, #15
 8009d78:	4699      	mov	r9, r3
 8009d7a:	e656      	b.n	8009a2a <calibrate.lto_priv.162+0xfbe>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9332      	str	r3, [sp, #200]	; 0xc8
 8009d80:	001e      	movs	r6, r3
 8009d82:	001d      	movs	r5, r3
 8009d84:	e651      	b.n	8009a2a <calibrate.lto_priv.162+0xfbe>
 8009d86:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009d88:	9017      	str	r0, [sp, #92]	; 0x5c
 8009d8a:	9014      	str	r0, [sp, #80]	; 0x50
 8009d8c:	0005      	movs	r5, r0
 8009d8e:	e64c      	b.n	8009a2a <calibrate.lto_priv.162+0xfbe>
 8009d90:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009d92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d94:	46b1      	mov	r9, r6
 8009d96:	930a      	str	r3, [sp, #40]	; 0x28
 8009d98:	e647      	b.n	8009a2a <calibrate.lto_priv.162+0xfbe>
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	2500      	movs	r5, #0
 8009d9e:	930e      	str	r3, [sp, #56]	; 0x38
 8009da0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8009da2:	002e      	movs	r6, r5
 8009da4:	e641      	b.n	8009a2a <calibrate.lto_priv.162+0xfbe>
 8009da6:	2f00      	cmp	r7, #0
 8009da8:	d100      	bne.n	8009dac <calibrate.lto_priv.162+0x1340>
 8009daa:	e4fb      	b.n	80097a4 <calibrate.lto_priv.162+0xd38>
 8009dac:	4b3f      	ldr	r3, [pc, #252]	; (8009eac <calibrate.lto_priv.162+0x1440>)
 8009dae:	001a      	movs	r2, r3
 8009db0:	3230      	adds	r2, #48	; 0x30
 8009db2:	7812      	ldrb	r2, [r2, #0]
 8009db4:	2a01      	cmp	r2, #1
 8009db6:	d917      	bls.n	8009de8 <calibrate.lto_priv.162+0x137c>
 8009db8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009dba:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009dbc:	4b43      	ldr	r3, [pc, #268]	; (8009ecc <calibrate.lto_priv.162+0x1460>)
 8009dbe:	2a00      	cmp	r2, #0
 8009dc0:	d000      	beq.n	8009dc4 <calibrate.lto_priv.162+0x1358>
 8009dc2:	4b43      	ldr	r3, [pc, #268]	; (8009ed0 <calibrate.lto_priv.162+0x1464>)
 8009dc4:	9306      	str	r3, [sp, #24]
 8009dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dc8:	4a42      	ldr	r2, [pc, #264]	; (8009ed4 <calibrate.lto_priv.162+0x1468>)
 8009dca:	9305      	str	r3, [sp, #20]
 8009dcc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8009dce:	493d      	ldr	r1, [pc, #244]	; (8009ec4 <calibrate.lto_priv.162+0x1458>)
 8009dd0:	9304      	str	r3, [sp, #16]
 8009dd2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8009dd4:	2002      	movs	r0, #2
 8009dd6:	9303      	str	r3, [sp, #12]
 8009dd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009dda:	9302      	str	r3, [sp, #8]
 8009ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dde:	9301      	str	r3, [sp, #4]
 8009de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de6:	47a0      	blx	r4
 8009de8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009dea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009dec:	9239      	str	r2, [sp, #228]	; 0xe4
 8009dee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009df0:	923e      	str	r2, [sp, #248]	; 0xf8
 8009df2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009df4:	923d      	str	r2, [sp, #244]	; 0xf4
 8009df6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009df8:	923c      	str	r2, [sp, #240]	; 0xf0
 8009dfa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009dfc:	922d      	str	r2, [sp, #180]	; 0xb4
 8009dfe:	e012      	b.n	8009e26 <calibrate.lto_priv.162+0x13ba>
 8009e00:	4b2a      	ldr	r3, [pc, #168]	; (8009eac <calibrate.lto_priv.162+0x1440>)
 8009e02:	001a      	movs	r2, r3
 8009e04:	3230      	adds	r2, #48	; 0x30
 8009e06:	7812      	ldrb	r2, [r2, #0]
 8009e08:	2a03      	cmp	r2, #3
 8009e0a:	d801      	bhi.n	8009e10 <calibrate.lto_priv.162+0x13a4>
 8009e0c:	f7ff f9b3 	bl	8009176 <calibrate.lto_priv.162+0x70a>
 8009e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e12:	492c      	ldr	r1, [pc, #176]	; (8009ec4 <calibrate.lto_priv.162+0x1458>)
 8009e14:	9200      	str	r2, [sp, #0]
 8009e16:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009e18:	4a2f      	ldr	r2, [pc, #188]	; (8009ed8 <calibrate.lto_priv.162+0x146c>)
 8009e1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e1c:	2004      	movs	r0, #4
 8009e1e:	47a0      	blx	r4
 8009e20:	f7ff f9a9 	bl	8009176 <calibrate.lto_priv.162+0x70a>
 8009e24:	2300      	movs	r3, #0
 8009e26:	2400      	movs	r4, #0
 8009e28:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8009e2a:	42a2      	cmp	r2, r4
 8009e2c:	d000      	beq.n	8009e30 <calibrate.lto_priv.162+0x13c4>
 8009e2e:	001c      	movs	r4, r3
 8009e30:	2301      	movs	r3, #1
 8009e32:	401c      	ands	r4, r3
 8009e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d004      	beq.n	8009e44 <calibrate.lto_priv.162+0x13d8>
 8009e3a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8009e3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e3e:	701a      	strb	r2, [r3, #0]
 8009e40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e42:	605a      	str	r2, [r3, #4]
 8009e44:	2c00      	cmp	r4, #0
 8009e46:	d101      	bne.n	8009e4c <calibrate.lto_priv.162+0x13e0>
 8009e48:	f7fe fe35 	bl	8008ab6 <calibrate.lto_priv.162+0x4a>
 8009e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e4e:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8009e50:	4d16      	ldr	r5, [pc, #88]	; (8009eac <calibrate.lto_priv.162+0x1440>)
 8009e52:	8093      	strh	r3, [r2, #4]
 8009e54:	ab46      	add	r3, sp, #280	; 0x118
 8009e56:	791b      	ldrb	r3, [r3, #4]
 8009e58:	80d3      	strh	r3, [r2, #6]
 8009e5a:	0013      	movs	r3, r2
 8009e5c:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8009e5e:	811a      	strh	r2, [r3, #8]
 8009e60:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8009e62:	815a      	strh	r2, [r3, #10]
 8009e64:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8009e66:	819a      	strh	r2, [r3, #12]
 8009e68:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8009e6a:	81da      	strh	r2, [r3, #14]
 8009e6c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8009e6e:	821a      	strh	r2, [r3, #16]
 8009e70:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009e72:	825a      	strh	r2, [r3, #18]
 8009e74:	2306      	movs	r3, #6
 8009e76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	002b      	movs	r3, r5
 8009e7c:	3330      	adds	r3, #48	; 0x30
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	2b03      	cmp	r3, #3
 8009e82:	d904      	bls.n	8009e8e <calibrate.lto_priv.162+0x1422>
 8009e84:	4a15      	ldr	r2, [pc, #84]	; (8009edc <calibrate.lto_priv.162+0x1470>)
 8009e86:	4916      	ldr	r1, [pc, #88]	; (8009ee0 <calibrate.lto_priv.162+0x1474>)
 8009e88:	2004      	movs	r0, #4
 8009e8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009e8c:	4798      	blx	r3
 8009e8e:	002b      	movs	r3, r5
 8009e90:	3330      	adds	r3, #48	; 0x30
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d801      	bhi.n	8009e9c <calibrate.lto_priv.162+0x1430>
 8009e98:	f7fe fe0e 	bl	8008ab8 <calibrate.lto_priv.162+0x4c>
 8009e9c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009e9e:	4a11      	ldr	r2, [pc, #68]	; (8009ee4 <calibrate.lto_priv.162+0x1478>)
 8009ea0:	490f      	ldr	r1, [pc, #60]	; (8009ee0 <calibrate.lto_priv.162+0x1474>)
 8009ea2:	2002      	movs	r0, #2
 8009ea4:	4798      	blx	r3
 8009ea6:	f7fe fe07 	bl	8008ab8 <calibrate.lto_priv.162+0x4c>
 8009eaa:	46c0      	nop			; (mov r8, r8)
 8009eac:	200004a8 	.word	0x200004a8
 8009eb0:	0801daa0 	.word	0x0801daa0
 8009eb4:	0801dafc 	.word	0x0801dafc
 8009eb8:	0801db29 	.word	0x0801db29
 8009ebc:	42640000 	.word	0x42640000
 8009ec0:	42172c98 	.word	0x42172c98
 8009ec4:	0801d581 	.word	0x0801d581
 8009ec8:	0801d8e3 	.word	0x0801d8e3
 8009ecc:	0801d55e 	.word	0x0801d55e
 8009ed0:	0801d559 	.word	0x0801d559
 8009ed4:	0801dbc7 	.word	0x0801dbc7
 8009ed8:	0801db93 	.word	0x0801db93
 8009edc:	0801dc2f 	.word	0x0801dc2f
 8009ee0:	0801d044 	.word	0x0801d044
 8009ee4:	0801d377 	.word	0x0801d377

08009ee8 <initialize.lto_priv.170>:
 8009ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eea:	464e      	mov	r6, r9
 8009eec:	46de      	mov	lr, fp
 8009eee:	4657      	mov	r7, sl
 8009ef0:	4645      	mov	r5, r8
 8009ef2:	b5e0      	push	{r5, r6, r7, lr}
 8009ef4:	b097      	sub	sp, #92	; 0x5c
 8009ef6:	9306      	str	r3, [sp, #24]
 8009ef8:	2332      	movs	r3, #50	; 0x32
 8009efa:	469a      	mov	sl, r3
 8009efc:	448a      	add	sl, r1
 8009efe:	4653      	mov	r3, sl
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	4681      	mov	r9, r0
 8009f04:	000e      	movs	r6, r1
 8009f06:	4693      	mov	fp, r2
 8009f08:	2b06      	cmp	r3, #6
 8009f0a:	d00f      	beq.n	8009f2c <initialize.lto_priv.170+0x44>
 8009f0c:	2b09      	cmp	r3, #9
 8009f0e:	d00d      	beq.n	8009f2c <initialize.lto_priv.170+0x44>
 8009f10:	4b7a      	ldr	r3, [pc, #488]	; (800a0fc <initialize.lto_priv.170+0x214>)
 8009f12:	2000      	movs	r0, #0
 8009f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f16:	4a7a      	ldr	r2, [pc, #488]	; (800a100 <initialize.lto_priv.170+0x218>)
 8009f18:	497a      	ldr	r1, [pc, #488]	; (800a104 <initialize.lto_priv.170+0x21c>)
 8009f1a:	4798      	blx	r3
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	b017      	add	sp, #92	; 0x5c
 8009f20:	bc3c      	pop	{r2, r3, r4, r5}
 8009f22:	4690      	mov	r8, r2
 8009f24:	4699      	mov	r9, r3
 8009f26:	46a2      	mov	sl, r4
 8009f28:	46ab      	mov	fp, r5
 8009f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f2c:	464b      	mov	r3, r9
 8009f2e:	0030      	movs	r0, r6
 8009f30:	695d      	ldr	r5, [r3, #20]
 8009f32:	f7f6 fe49 	bl	8000bc8 <configuration_is_valid>
 8009f36:	2300      	movs	r3, #0
 8009f38:	4298      	cmp	r0, r3
 8009f3a:	d00c      	beq.n	8009f56 <initialize.lto_priv.170+0x6e>
 8009f3c:	0032      	movs	r2, r6
 8009f3e:	324f      	adds	r2, #79	; 0x4f
 8009f40:	7810      	ldrb	r0, [r2, #0]
 8009f42:	0033      	movs	r3, r6
 8009f44:	0002      	movs	r2, r0
 8009f46:	1e51      	subs	r1, r2, #1
 8009f48:	418a      	sbcs	r2, r1
 8009f4a:	3350      	adds	r3, #80	; 0x50
 8009f4c:	781c      	ldrb	r4, [r3, #0]
 8009f4e:	3302      	adds	r3, #2
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	4252      	negs	r2, r2
 8009f54:	4013      	ands	r3, r2
 8009f56:	002a      	movs	r2, r5
 8009f58:	32ce      	adds	r2, #206	; 0xce
 8009f5a:	8013      	strh	r3, [r2, #0]
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d000      	beq.n	8009f62 <initialize.lto_priv.170+0x7a>
 8009f60:	0020      	movs	r0, r4
 8009f62:	002b      	movs	r3, r5
 8009f64:	33d0      	adds	r3, #208	; 0xd0
 8009f66:	7018      	strb	r0, [r3, #0]
 8009f68:	0030      	movs	r0, r6
 8009f6a:	f7f6 fe63 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8009f6e:	002b      	movs	r3, r5
 8009f70:	2700      	movs	r7, #0
 8009f72:	33cc      	adds	r3, #204	; 0xcc
 8009f74:	8018      	strh	r0, [r3, #0]
 8009f76:	3b10      	subs	r3, #16
 8009f78:	601f      	str	r7, [r3, #0]
 8009f7a:	0030      	movs	r0, r6
 8009f7c:	f7f6 fef0 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 8009f80:	002b      	movs	r3, r5
 8009f82:	2201      	movs	r2, #1
 8009f84:	33c0      	adds	r3, #192	; 0xc0
 8009f86:	7018      	strb	r0, [r3, #0]
 8009f88:	3b13      	subs	r3, #19
 8009f8a:	701a      	strb	r2, [r3, #0]
 8009f8c:	0028      	movs	r0, r5
 8009f8e:	f7fb f9df 	bl	8005350 <get_package_range_coarse_max>
 8009f92:	9008      	str	r0, [sp, #32]
 8009f94:	0030      	movs	r0, r6
 8009f96:	f7f6 fe17 	bl	8000bc8 <configuration_is_valid>
 8009f9a:	42b8      	cmp	r0, r7
 8009f9c:	d052      	beq.n	800a044 <initialize.lto_priv.170+0x15c>
 8009f9e:	0033      	movs	r3, r6
 8009fa0:	332c      	adds	r3, #44	; 0x2c
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	42bb      	cmp	r3, r7
 8009fa6:	d04d      	beq.n	800a044 <initialize.lto_priv.170+0x15c>
 8009fa8:	0030      	movs	r0, r6
 8009faa:	f7f6 fe0d 	bl	8000bc8 <configuration_is_valid>
 8009fae:	42b8      	cmp	r0, r7
 8009fb0:	d001      	beq.n	8009fb6 <initialize.lto_priv.170+0xce>
 8009fb2:	2334      	movs	r3, #52	; 0x34
 8009fb4:	5ef7      	ldrsh	r7, [r6, r3]
 8009fb6:	0030      	movs	r0, r6
 8009fb8:	f7f6 fe06 	bl	8000bc8 <configuration_is_valid>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4298      	cmp	r0, r3
 8009fc0:	d001      	beq.n	8009fc6 <initialize.lto_priv.170+0xde>
 8009fc2:	2236      	movs	r2, #54	; 0x36
 8009fc4:	5eb3      	ldrsh	r3, [r6, r2]
 8009fc6:	4698      	mov	r8, r3
 8009fc8:	44b8      	add	r8, r7
 8009fca:	0033      	movs	r3, r6
 8009fcc:	332e      	adds	r3, #46	; 0x2e
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d100      	bne.n	8009fd6 <initialize.lto_priv.170+0xee>
 8009fd4:	e08e      	b.n	800a0f4 <initialize.lto_priv.170+0x20c>
 8009fd6:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 8009fd8:	0030      	movs	r0, r6
 8009fda:	f7f6 fe2b 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8009fde:	4682      	mov	sl, r0
 8009fe0:	2801      	cmp	r0, #1
 8009fe2:	d925      	bls.n	800a030 <initialize.lto_priv.170+0x148>
 8009fe4:	2802      	cmp	r0, #2
 8009fe6:	d10c      	bne.n	800a002 <initialize.lto_priv.170+0x11a>
 8009fe8:	07fb      	lsls	r3, r7, #31
 8009fea:	d40a      	bmi.n	800a002 <initialize.lto_priv.170+0x11a>
 8009fec:	4b43      	ldr	r3, [pc, #268]	; (800a0fc <initialize.lto_priv.170+0x214>)
 8009fee:	001a      	movs	r2, r3
 8009ff0:	3230      	adds	r2, #48	; 0x30
 8009ff2:	7812      	ldrb	r2, [r2, #0]
 8009ff4:	2a01      	cmp	r2, #1
 8009ff6:	d903      	bls.n	800a000 <initialize.lto_priv.170+0x118>
 8009ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffa:	4a43      	ldr	r2, [pc, #268]	; (800a108 <initialize.lto_priv.170+0x220>)
 8009ffc:	4943      	ldr	r1, [pc, #268]	; (800a10c <initialize.lto_priv.170+0x224>)
 8009ffe:	4798      	blx	r3
 800a000:	3701      	adds	r7, #1
 800a002:	4643      	mov	r3, r8
 800a004:	4651      	mov	r1, sl
 800a006:	1bd8      	subs	r0, r3, r7
 800a008:	f006 fee0 	bl	8010dcc <__aeabi_idivmod>
 800a00c:	468a      	mov	sl, r1
 800a00e:	2900      	cmp	r1, #0
 800a010:	dd0e      	ble.n	800a030 <initialize.lto_priv.170+0x148>
 800a012:	4b3a      	ldr	r3, [pc, #232]	; (800a0fc <initialize.lto_priv.170+0x214>)
 800a014:	001a      	movs	r2, r3
 800a016:	3230      	adds	r2, #48	; 0x30
 800a018:	7812      	ldrb	r2, [r2, #0]
 800a01a:	2a01      	cmp	r2, #1
 800a01c:	d904      	bls.n	800a028 <initialize.lto_priv.170+0x140>
 800a01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a020:	4a3b      	ldr	r2, [pc, #236]	; (800a110 <initialize.lto_priv.170+0x228>)
 800a022:	493a      	ldr	r1, [pc, #232]	; (800a10c <initialize.lto_priv.170+0x224>)
 800a024:	2002      	movs	r0, #2
 800a026:	4798      	blx	r3
 800a028:	4643      	mov	r3, r8
 800a02a:	4652      	mov	r2, sl
 800a02c:	1a9b      	subs	r3, r3, r2
 800a02e:	4698      	mov	r8, r3
 800a030:	45b8      	cmp	r8, r7
 800a032:	da73      	bge.n	800a11c <initialize.lto_priv.170+0x234>
 800a034:	4b31      	ldr	r3, [pc, #196]	; (800a0fc <initialize.lto_priv.170+0x214>)
 800a036:	4a37      	ldr	r2, [pc, #220]	; (800a114 <initialize.lto_priv.170+0x22c>)
 800a038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03a:	4934      	ldr	r1, [pc, #208]	; (800a10c <initialize.lto_priv.170+0x224>)
 800a03c:	2000      	movs	r0, #0
 800a03e:	4798      	blx	r3
 800a040:	2000      	movs	r0, #0
 800a042:	e76c      	b.n	8009f1e <initialize.lto_priv.170+0x36>
 800a044:	0030      	movs	r0, r6
 800a046:	f7f6 fdbf 	bl	8000bc8 <configuration_is_valid>
 800a04a:	2400      	movs	r4, #0
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d000      	beq.n	800a052 <initialize.lto_priv.170+0x16a>
 800a050:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a052:	0030      	movs	r0, r6
 800a054:	f7f6 fdb8 	bl	8000bc8 <configuration_is_valid>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d043      	beq.n	800a0e4 <initialize.lto_priv.170+0x1fc>
 800a05c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800a05e:	1c21      	adds	r1, r4, #0
 800a060:	f005 ff66 	bl	800ff30 <__aeabi_fadd>
 800a064:	4680      	mov	r8, r0
 800a066:	f002 fbdd 	bl	800c824 <get_dt.constprop.10>
 800a06a:	1c21      	adds	r1, r4, #0
 800a06c:	9007      	str	r0, [sp, #28]
 800a06e:	1c20      	adds	r0, r4, #0
 800a070:	f005 ff5e 	bl	800ff30 <__aeabi_fadd>
 800a074:	4928      	ldr	r1, [pc, #160]	; (800a118 <initialize.lto_priv.170+0x230>)
 800a076:	1c07      	adds	r7, r0, #0
 800a078:	9807      	ldr	r0, [sp, #28]
 800a07a:	f006 fa05 	bl	8010488 <__aeabi_fmul>
 800a07e:	1c01      	adds	r1, r0, #0
 800a080:	1c38      	adds	r0, r7, #0
 800a082:	f006 f8ef 	bl	8010264 <__aeabi_fdiv>
 800a086:	2100      	movs	r1, #0
 800a088:	1c07      	adds	r7, r0, #0
 800a08a:	1c20      	adds	r0, r4, #0
 800a08c:	f006 fef4 	bl	8010e78 <__aeabi_fcmplt>
 800a090:	2800      	cmp	r0, #0
 800a092:	d129      	bne.n	800a0e8 <initialize.lto_priv.170+0x200>
 800a094:	21fc      	movs	r1, #252	; 0xfc
 800a096:	0589      	lsls	r1, r1, #22
 800a098:	1c38      	adds	r0, r7, #0
 800a09a:	f005 ff49 	bl	800ff30 <__aeabi_fadd>
 800a09e:	f007 f907 	bl	80112b0 <__aeabi_f2iz>
 800a0a2:	0007      	movs	r7, r0
 800a0a4:	f002 fbbe 	bl	800c824 <get_dt.constprop.10>
 800a0a8:	4641      	mov	r1, r8
 800a0aa:	9007      	str	r0, [sp, #28]
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	f005 ff3f 	bl	800ff30 <__aeabi_fadd>
 800a0b2:	4919      	ldr	r1, [pc, #100]	; (800a118 <initialize.lto_priv.170+0x230>)
 800a0b4:	1c04      	adds	r4, r0, #0
 800a0b6:	9807      	ldr	r0, [sp, #28]
 800a0b8:	f006 f9e6 	bl	8010488 <__aeabi_fmul>
 800a0bc:	1c01      	adds	r1, r0, #0
 800a0be:	1c20      	adds	r0, r4, #0
 800a0c0:	f006 f8d0 	bl	8010264 <__aeabi_fdiv>
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	1c04      	adds	r4, r0, #0
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	f006 fed5 	bl	8010e78 <__aeabi_fcmplt>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d10d      	bne.n	800a0ee <initialize.lto_priv.170+0x206>
 800a0d2:	21fc      	movs	r1, #252	; 0xfc
 800a0d4:	0589      	lsls	r1, r1, #22
 800a0d6:	1c20      	adds	r0, r4, #0
 800a0d8:	f005 ff2a 	bl	800ff30 <__aeabi_fadd>
 800a0dc:	f007 f8e8 	bl	80112b0 <__aeabi_f2iz>
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	e772      	b.n	8009fca <initialize.lto_priv.170+0xe2>
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	e7ba      	b.n	800a05e <initialize.lto_priv.170+0x176>
 800a0e8:	21bf      	movs	r1, #191	; 0xbf
 800a0ea:	0609      	lsls	r1, r1, #24
 800a0ec:	e7d4      	b.n	800a098 <initialize.lto_priv.170+0x1b0>
 800a0ee:	21bf      	movs	r1, #191	; 0xbf
 800a0f0:	0609      	lsls	r1, r1, #24
 800a0f2:	e7f0      	b.n	800a0d6 <initialize.lto_priv.170+0x1ee>
 800a0f4:	4653      	mov	r3, sl
 800a0f6:	781c      	ldrb	r4, [r3, #0]
 800a0f8:	e76e      	b.n	8009fd8 <initialize.lto_priv.170+0xf0>
 800a0fa:	46c0      	nop			; (mov r8, r8)
 800a0fc:	200004a8 	.word	0x200004a8
 800a100:	0801c64b 	.word	0x0801c64b
 800a104:	0801d044 	.word	0x0801d044
 800a108:	0801dc4a 	.word	0x0801dc4a
 800a10c:	0801dc7f 	.word	0x0801dc7f
 800a110:	0801d3c0 	.word	0x0801d3c0
 800a114:	0801d3f3 	.word	0x0801d3f3
 800a118:	4d8ef3c2 	.word	0x4d8ef3c2
 800a11c:	0030      	movs	r0, r6
 800a11e:	f7f6 fd53 	bl	8000bc8 <configuration_is_valid>
 800a122:	2800      	cmp	r0, #0
 800a124:	d005      	beq.n	800a132 <initialize.lto_priv.170+0x24a>
 800a126:	0033      	movs	r3, r6
 800a128:	336e      	adds	r3, #110	; 0x6e
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d000      	beq.n	800a132 <initialize.lto_priv.170+0x24a>
 800a130:	e1b8      	b.n	800a4a4 <initialize.lto_priv.170+0x5bc>
 800a132:	4bd2      	ldr	r3, [pc, #840]	; (800a47c <initialize.lto_priv.170+0x594>)
 800a134:	429f      	cmp	r7, r3
 800a136:	db00      	blt.n	800a13a <initialize.lto_priv.170+0x252>
 800a138:	e0cb      	b.n	800a2d2 <initialize.lto_priv.170+0x3ea>
 800a13a:	4bd1      	ldr	r3, [pc, #836]	; (800a480 <initialize.lto_priv.170+0x598>)
 800a13c:	0038      	movs	r0, r7
 800a13e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800a140:	f002 fb8c 	bl	800c85c <points_to_meter.constprop.9>
 800a144:	2100      	movs	r1, #0
 800a146:	f006 fe97 	bl	8010e78 <__aeabi_fcmplt>
 800a14a:	4cce      	ldr	r4, [pc, #824]	; (800a484 <initialize.lto_priv.170+0x59c>)
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d100      	bne.n	800a152 <initialize.lto_priv.170+0x26a>
 800a150:	4ccd      	ldr	r4, [pc, #820]	; (800a488 <initialize.lto_priv.170+0x5a0>)
 800a152:	0038      	movs	r0, r7
 800a154:	f002 fb82 	bl	800c85c <points_to_meter.constprop.9>
 800a158:	1c05      	adds	r5, r0, #0
 800a15a:	0038      	movs	r0, r7
 800a15c:	f002 fb7e 	bl	800c85c <points_to_meter.constprop.9>
 800a160:	2100      	movs	r1, #0
 800a162:	f006 fe89 	bl	8010e78 <__aeabi_fcmplt>
 800a166:	2800      	cmp	r0, #0
 800a168:	d000      	beq.n	800a16c <initialize.lto_priv.170+0x284>
 800a16a:	e0a6      	b.n	800a2ba <initialize.lto_priv.170+0x3d2>
 800a16c:	21fe      	movs	r1, #254	; 0xfe
 800a16e:	0589      	lsls	r1, r1, #22
 800a170:	1c28      	adds	r0, r5, #0
 800a172:	f006 f989 	bl	8010488 <__aeabi_fmul>
 800a176:	49c5      	ldr	r1, [pc, #788]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a178:	f005 feda 	bl	800ff30 <__aeabi_fadd>
 800a17c:	f006 fec4 	bl	8010f08 <__aeabi_f2uiz>
 800a180:	4680      	mov	r8, r0
 800a182:	0038      	movs	r0, r7
 800a184:	f002 fb6a 	bl	800c85c <points_to_meter.constprop.9>
 800a188:	1c05      	adds	r5, r0, #0
 800a18a:	0038      	movs	r0, r7
 800a18c:	f002 fb66 	bl	800c85c <points_to_meter.constprop.9>
 800a190:	2100      	movs	r1, #0
 800a192:	f006 fe71 	bl	8010e78 <__aeabi_fcmplt>
 800a196:	2800      	cmp	r0, #0
 800a198:	d000      	beq.n	800a19c <initialize.lto_priv.170+0x2b4>
 800a19a:	e090      	b.n	800a2be <initialize.lto_priv.170+0x3d6>
 800a19c:	21fe      	movs	r1, #254	; 0xfe
 800a19e:	0589      	lsls	r1, r1, #22
 800a1a0:	1c28      	adds	r0, r5, #0
 800a1a2:	f006 f971 	bl	8010488 <__aeabi_fmul>
 800a1a6:	49b9      	ldr	r1, [pc, #740]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a1a8:	f005 fec2 	bl	800ff30 <__aeabi_fadd>
 800a1ac:	1c05      	adds	r5, r0, #0
 800a1ae:	0038      	movs	r0, r7
 800a1b0:	f002 fb54 	bl	800c85c <points_to_meter.constprop.9>
 800a1b4:	4681      	mov	r9, r0
 800a1b6:	0038      	movs	r0, r7
 800a1b8:	f002 fb50 	bl	800c85c <points_to_meter.constprop.9>
 800a1bc:	2100      	movs	r1, #0
 800a1be:	f006 fe5b 	bl	8010e78 <__aeabi_fcmplt>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d17d      	bne.n	800a2c2 <initialize.lto_priv.170+0x3da>
 800a1c6:	21fe      	movs	r1, #254	; 0xfe
 800a1c8:	0589      	lsls	r1, r1, #22
 800a1ca:	4648      	mov	r0, r9
 800a1cc:	f006 f95c 	bl	8010488 <__aeabi_fmul>
 800a1d0:	49ae      	ldr	r1, [pc, #696]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a1d2:	f005 fead 	bl	800ff30 <__aeabi_fadd>
 800a1d6:	f006 fe97 	bl	8010f08 <__aeabi_f2uiz>
 800a1da:	f007 f8d3 	bl	8011384 <__aeabi_ui2f>
 800a1de:	1c01      	adds	r1, r0, #0
 800a1e0:	1c28      	adds	r0, r5, #0
 800a1e2:	f006 fa83 	bl	80106ec <__aeabi_fsub>
 800a1e6:	49aa      	ldr	r1, [pc, #680]	; (800a490 <initialize.lto_priv.170+0x5a8>)
 800a1e8:	f006 f94e 	bl	8010488 <__aeabi_fmul>
 800a1ec:	f006 fe8c 	bl	8010f08 <__aeabi_f2uiz>
 800a1f0:	0007      	movs	r7, r0
 800a1f2:	48a2      	ldr	r0, [pc, #648]	; (800a47c <initialize.lto_priv.170+0x594>)
 800a1f4:	f002 fb32 	bl	800c85c <points_to_meter.constprop.9>
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	f006 fe3d 	bl	8010e78 <__aeabi_fcmplt>
 800a1fe:	4da1      	ldr	r5, [pc, #644]	; (800a484 <initialize.lto_priv.170+0x59c>)
 800a200:	2800      	cmp	r0, #0
 800a202:	d100      	bne.n	800a206 <initialize.lto_priv.170+0x31e>
 800a204:	4da0      	ldr	r5, [pc, #640]	; (800a488 <initialize.lto_priv.170+0x5a0>)
 800a206:	489d      	ldr	r0, [pc, #628]	; (800a47c <initialize.lto_priv.170+0x594>)
 800a208:	f002 fb28 	bl	800c85c <points_to_meter.constprop.9>
 800a20c:	4681      	mov	r9, r0
 800a20e:	489b      	ldr	r0, [pc, #620]	; (800a47c <initialize.lto_priv.170+0x594>)
 800a210:	f002 fb24 	bl	800c85c <points_to_meter.constprop.9>
 800a214:	2100      	movs	r1, #0
 800a216:	f006 fe2f 	bl	8010e78 <__aeabi_fcmplt>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d153      	bne.n	800a2c6 <initialize.lto_priv.170+0x3de>
 800a21e:	21fe      	movs	r1, #254	; 0xfe
 800a220:	0589      	lsls	r1, r1, #22
 800a222:	4648      	mov	r0, r9
 800a224:	f006 f930 	bl	8010488 <__aeabi_fmul>
 800a228:	4998      	ldr	r1, [pc, #608]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a22a:	f005 fe81 	bl	800ff30 <__aeabi_fadd>
 800a22e:	f006 fe6b 	bl	8010f08 <__aeabi_f2uiz>
 800a232:	4681      	mov	r9, r0
 800a234:	4891      	ldr	r0, [pc, #580]	; (800a47c <initialize.lto_priv.170+0x594>)
 800a236:	f002 fb11 	bl	800c85c <points_to_meter.constprop.9>
 800a23a:	4682      	mov	sl, r0
 800a23c:	488f      	ldr	r0, [pc, #572]	; (800a47c <initialize.lto_priv.170+0x594>)
 800a23e:	f002 fb0d 	bl	800c85c <points_to_meter.constprop.9>
 800a242:	2100      	movs	r1, #0
 800a244:	f006 fe18 	bl	8010e78 <__aeabi_fcmplt>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d13e      	bne.n	800a2ca <initialize.lto_priv.170+0x3e2>
 800a24c:	21fe      	movs	r1, #254	; 0xfe
 800a24e:	0589      	lsls	r1, r1, #22
 800a250:	4650      	mov	r0, sl
 800a252:	f006 f919 	bl	8010488 <__aeabi_fmul>
 800a256:	498d      	ldr	r1, [pc, #564]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a258:	f005 fe6a 	bl	800ff30 <__aeabi_fadd>
 800a25c:	4682      	mov	sl, r0
 800a25e:	4887      	ldr	r0, [pc, #540]	; (800a47c <initialize.lto_priv.170+0x594>)
 800a260:	f002 fafc 	bl	800c85c <points_to_meter.constprop.9>
 800a264:	4683      	mov	fp, r0
 800a266:	4885      	ldr	r0, [pc, #532]	; (800a47c <initialize.lto_priv.170+0x594>)
 800a268:	f002 faf8 	bl	800c85c <points_to_meter.constprop.9>
 800a26c:	2100      	movs	r1, #0
 800a26e:	f006 fe03 	bl	8010e78 <__aeabi_fcmplt>
 800a272:	2800      	cmp	r0, #0
 800a274:	d12b      	bne.n	800a2ce <initialize.lto_priv.170+0x3e6>
 800a276:	21fe      	movs	r1, #254	; 0xfe
 800a278:	0589      	lsls	r1, r1, #22
 800a27a:	4658      	mov	r0, fp
 800a27c:	f006 f904 	bl	8010488 <__aeabi_fmul>
 800a280:	4982      	ldr	r1, [pc, #520]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a282:	f005 fe55 	bl	800ff30 <__aeabi_fadd>
 800a286:	f006 fe3f 	bl	8010f08 <__aeabi_f2uiz>
 800a28a:	f007 f87b 	bl	8011384 <__aeabi_ui2f>
 800a28e:	1c01      	adds	r1, r0, #0
 800a290:	4650      	mov	r0, sl
 800a292:	f006 fa2b 	bl	80106ec <__aeabi_fsub>
 800a296:	497e      	ldr	r1, [pc, #504]	; (800a490 <initialize.lto_priv.170+0x5a8>)
 800a298:	f006 f8f6 	bl	8010488 <__aeabi_fmul>
 800a29c:	f006 fe34 	bl	8010f08 <__aeabi_f2uiz>
 800a2a0:	464b      	mov	r3, r9
 800a2a2:	9303      	str	r3, [sp, #12]
 800a2a4:	4643      	mov	r3, r8
 800a2a6:	9004      	str	r0, [sp, #16]
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	9502      	str	r5, [sp, #8]
 800a2ac:	9701      	str	r7, [sp, #4]
 800a2ae:	0023      	movs	r3, r4
 800a2b0:	4a78      	ldr	r2, [pc, #480]	; (800a494 <initialize.lto_priv.170+0x5ac>)
 800a2b2:	4979      	ldr	r1, [pc, #484]	; (800a498 <initialize.lto_priv.170+0x5b0>)
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	47b0      	blx	r6
 800a2b8:	e6c2      	b.n	800a040 <initialize.lto_priv.170+0x158>
 800a2ba:	4978      	ldr	r1, [pc, #480]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a2bc:	e758      	b.n	800a170 <initialize.lto_priv.170+0x288>
 800a2be:	4977      	ldr	r1, [pc, #476]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a2c0:	e76e      	b.n	800a1a0 <initialize.lto_priv.170+0x2b8>
 800a2c2:	4976      	ldr	r1, [pc, #472]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a2c4:	e781      	b.n	800a1ca <initialize.lto_priv.170+0x2e2>
 800a2c6:	4975      	ldr	r1, [pc, #468]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a2c8:	e7ab      	b.n	800a222 <initialize.lto_priv.170+0x33a>
 800a2ca:	4974      	ldr	r1, [pc, #464]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a2cc:	e7c0      	b.n	800a250 <initialize.lto_priv.170+0x368>
 800a2ce:	4973      	ldr	r1, [pc, #460]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a2d0:	e7d3      	b.n	800a27a <initialize.lto_priv.170+0x392>
 800a2d2:	237c      	movs	r3, #124	; 0x7c
 800a2d4:	0164      	lsls	r4, r4, #5
 800a2d6:	3c4b      	subs	r4, #75	; 0x4b
 800a2d8:	435c      	muls	r4, r3
 800a2da:	4544      	cmp	r4, r8
 800a2dc:	db00      	blt.n	800a2e0 <initialize.lto_priv.170+0x3f8>
 800a2de:	e0e1      	b.n	800a4a4 <initialize.lto_priv.170+0x5bc>
 800a2e0:	4b67      	ldr	r3, [pc, #412]	; (800a480 <initialize.lto_priv.170+0x598>)
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e6:	9306      	str	r3, [sp, #24]
 800a2e8:	f002 fab8 	bl	800c85c <points_to_meter.constprop.9>
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	f006 fdc3 	bl	8010e78 <__aeabi_fcmplt>
 800a2f2:	4d64      	ldr	r5, [pc, #400]	; (800a484 <initialize.lto_priv.170+0x59c>)
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d100      	bne.n	800a2fa <initialize.lto_priv.170+0x412>
 800a2f8:	4d63      	ldr	r5, [pc, #396]	; (800a488 <initialize.lto_priv.170+0x5a0>)
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	f002 faae 	bl	800c85c <points_to_meter.constprop.9>
 800a300:	1c06      	adds	r6, r0, #0
 800a302:	4640      	mov	r0, r8
 800a304:	f002 faaa 	bl	800c85c <points_to_meter.constprop.9>
 800a308:	2100      	movs	r1, #0
 800a30a:	f006 fdb5 	bl	8010e78 <__aeabi_fcmplt>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d000      	beq.n	800a314 <initialize.lto_priv.170+0x42c>
 800a312:	e0a7      	b.n	800a464 <initialize.lto_priv.170+0x57c>
 800a314:	21fe      	movs	r1, #254	; 0xfe
 800a316:	0589      	lsls	r1, r1, #22
 800a318:	1c30      	adds	r0, r6, #0
 800a31a:	f006 f8b5 	bl	8010488 <__aeabi_fmul>
 800a31e:	495b      	ldr	r1, [pc, #364]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a320:	f005 fe06 	bl	800ff30 <__aeabi_fadd>
 800a324:	f006 fdf0 	bl	8010f08 <__aeabi_f2uiz>
 800a328:	0007      	movs	r7, r0
 800a32a:	4640      	mov	r0, r8
 800a32c:	f002 fa96 	bl	800c85c <points_to_meter.constprop.9>
 800a330:	1c06      	adds	r6, r0, #0
 800a332:	4640      	mov	r0, r8
 800a334:	f002 fa92 	bl	800c85c <points_to_meter.constprop.9>
 800a338:	2100      	movs	r1, #0
 800a33a:	f006 fd9d 	bl	8010e78 <__aeabi_fcmplt>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d000      	beq.n	800a344 <initialize.lto_priv.170+0x45c>
 800a342:	e091      	b.n	800a468 <initialize.lto_priv.170+0x580>
 800a344:	21fe      	movs	r1, #254	; 0xfe
 800a346:	0589      	lsls	r1, r1, #22
 800a348:	1c30      	adds	r0, r6, #0
 800a34a:	f006 f89d 	bl	8010488 <__aeabi_fmul>
 800a34e:	494f      	ldr	r1, [pc, #316]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a350:	f005 fdee 	bl	800ff30 <__aeabi_fadd>
 800a354:	1c06      	adds	r6, r0, #0
 800a356:	4640      	mov	r0, r8
 800a358:	f002 fa80 	bl	800c85c <points_to_meter.constprop.9>
 800a35c:	4681      	mov	r9, r0
 800a35e:	4640      	mov	r0, r8
 800a360:	f002 fa7c 	bl	800c85c <points_to_meter.constprop.9>
 800a364:	2100      	movs	r1, #0
 800a366:	f006 fd87 	bl	8010e78 <__aeabi_fcmplt>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d17e      	bne.n	800a46c <initialize.lto_priv.170+0x584>
 800a36e:	21fe      	movs	r1, #254	; 0xfe
 800a370:	0589      	lsls	r1, r1, #22
 800a372:	4648      	mov	r0, r9
 800a374:	f006 f888 	bl	8010488 <__aeabi_fmul>
 800a378:	4944      	ldr	r1, [pc, #272]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a37a:	f005 fdd9 	bl	800ff30 <__aeabi_fadd>
 800a37e:	f006 fdc3 	bl	8010f08 <__aeabi_f2uiz>
 800a382:	f006 ffff 	bl	8011384 <__aeabi_ui2f>
 800a386:	1c01      	adds	r1, r0, #0
 800a388:	1c30      	adds	r0, r6, #0
 800a38a:	f006 f9af 	bl	80106ec <__aeabi_fsub>
 800a38e:	4940      	ldr	r1, [pc, #256]	; (800a490 <initialize.lto_priv.170+0x5a8>)
 800a390:	f006 f87a 	bl	8010488 <__aeabi_fmul>
 800a394:	f006 fdb8 	bl	8010f08 <__aeabi_f2uiz>
 800a398:	4680      	mov	r8, r0
 800a39a:	0020      	movs	r0, r4
 800a39c:	f002 fa5e 	bl	800c85c <points_to_meter.constprop.9>
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	f006 fd69 	bl	8010e78 <__aeabi_fcmplt>
 800a3a6:	4e37      	ldr	r6, [pc, #220]	; (800a484 <initialize.lto_priv.170+0x59c>)
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d100      	bne.n	800a3ae <initialize.lto_priv.170+0x4c6>
 800a3ac:	4e36      	ldr	r6, [pc, #216]	; (800a488 <initialize.lto_priv.170+0x5a0>)
 800a3ae:	0020      	movs	r0, r4
 800a3b0:	f002 fa54 	bl	800c85c <points_to_meter.constprop.9>
 800a3b4:	4681      	mov	r9, r0
 800a3b6:	0020      	movs	r0, r4
 800a3b8:	f002 fa50 	bl	800c85c <points_to_meter.constprop.9>
 800a3bc:	2100      	movs	r1, #0
 800a3be:	f006 fd5b 	bl	8010e78 <__aeabi_fcmplt>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d154      	bne.n	800a470 <initialize.lto_priv.170+0x588>
 800a3c6:	21fe      	movs	r1, #254	; 0xfe
 800a3c8:	0589      	lsls	r1, r1, #22
 800a3ca:	4648      	mov	r0, r9
 800a3cc:	f006 f85c 	bl	8010488 <__aeabi_fmul>
 800a3d0:	492e      	ldr	r1, [pc, #184]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a3d2:	f005 fdad 	bl	800ff30 <__aeabi_fadd>
 800a3d6:	f006 fd97 	bl	8010f08 <__aeabi_f2uiz>
 800a3da:	4681      	mov	r9, r0
 800a3dc:	0020      	movs	r0, r4
 800a3de:	f002 fa3d 	bl	800c85c <points_to_meter.constprop.9>
 800a3e2:	4682      	mov	sl, r0
 800a3e4:	0020      	movs	r0, r4
 800a3e6:	f002 fa39 	bl	800c85c <points_to_meter.constprop.9>
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	f006 fd44 	bl	8010e78 <__aeabi_fcmplt>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d13f      	bne.n	800a474 <initialize.lto_priv.170+0x58c>
 800a3f4:	21fe      	movs	r1, #254	; 0xfe
 800a3f6:	0589      	lsls	r1, r1, #22
 800a3f8:	4650      	mov	r0, sl
 800a3fa:	f006 f845 	bl	8010488 <__aeabi_fmul>
 800a3fe:	4923      	ldr	r1, [pc, #140]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a400:	f005 fd96 	bl	800ff30 <__aeabi_fadd>
 800a404:	4682      	mov	sl, r0
 800a406:	0020      	movs	r0, r4
 800a408:	f002 fa28 	bl	800c85c <points_to_meter.constprop.9>
 800a40c:	4683      	mov	fp, r0
 800a40e:	0020      	movs	r0, r4
 800a410:	f002 fa24 	bl	800c85c <points_to_meter.constprop.9>
 800a414:	2100      	movs	r1, #0
 800a416:	f006 fd2f 	bl	8010e78 <__aeabi_fcmplt>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d12c      	bne.n	800a478 <initialize.lto_priv.170+0x590>
 800a41e:	21fe      	movs	r1, #254	; 0xfe
 800a420:	0589      	lsls	r1, r1, #22
 800a422:	4658      	mov	r0, fp
 800a424:	f006 f830 	bl	8010488 <__aeabi_fmul>
 800a428:	4918      	ldr	r1, [pc, #96]	; (800a48c <initialize.lto_priv.170+0x5a4>)
 800a42a:	f005 fd81 	bl	800ff30 <__aeabi_fadd>
 800a42e:	f006 fd6b 	bl	8010f08 <__aeabi_f2uiz>
 800a432:	f006 ffa7 	bl	8011384 <__aeabi_ui2f>
 800a436:	1c01      	adds	r1, r0, #0
 800a438:	4650      	mov	r0, sl
 800a43a:	f006 f957 	bl	80106ec <__aeabi_fsub>
 800a43e:	4914      	ldr	r1, [pc, #80]	; (800a490 <initialize.lto_priv.170+0x5a8>)
 800a440:	f006 f822 	bl	8010488 <__aeabi_fmul>
 800a444:	f006 fd60 	bl	8010f08 <__aeabi_f2uiz>
 800a448:	464b      	mov	r3, r9
 800a44a:	9303      	str	r3, [sp, #12]
 800a44c:	4643      	mov	r3, r8
 800a44e:	9004      	str	r0, [sp, #16]
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	9602      	str	r6, [sp, #8]
 800a454:	9700      	str	r7, [sp, #0]
 800a456:	002b      	movs	r3, r5
 800a458:	4a11      	ldr	r2, [pc, #68]	; (800a4a0 <initialize.lto_priv.170+0x5b8>)
 800a45a:	490f      	ldr	r1, [pc, #60]	; (800a498 <initialize.lto_priv.170+0x5b0>)
 800a45c:	2000      	movs	r0, #0
 800a45e:	9c06      	ldr	r4, [sp, #24]
 800a460:	47a0      	blx	r4
 800a462:	e5ed      	b.n	800a040 <initialize.lto_priv.170+0x158>
 800a464:	490d      	ldr	r1, [pc, #52]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a466:	e757      	b.n	800a318 <initialize.lto_priv.170+0x430>
 800a468:	490c      	ldr	r1, [pc, #48]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a46a:	e76d      	b.n	800a348 <initialize.lto_priv.170+0x460>
 800a46c:	490b      	ldr	r1, [pc, #44]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a46e:	e780      	b.n	800a372 <initialize.lto_priv.170+0x48a>
 800a470:	490a      	ldr	r1, [pc, #40]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a472:	e7aa      	b.n	800a3ca <initialize.lto_priv.170+0x4e2>
 800a474:	4909      	ldr	r1, [pc, #36]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a476:	e7bf      	b.n	800a3f8 <initialize.lto_priv.170+0x510>
 800a478:	4908      	ldr	r1, [pc, #32]	; (800a49c <initialize.lto_priv.170+0x5b4>)
 800a47a:	e7d2      	b.n	800a422 <initialize.lto_priv.170+0x53a>
 800a47c:	fffffa30 	.word	0xfffffa30
 800a480:	200004a8 	.word	0x200004a8
 800a484:	0801e6f0 	.word	0x0801e6f0
 800a488:	0801e61b 	.word	0x0801e61b
 800a48c:	350637bd 	.word	0x350637bd
 800a490:	49742400 	.word	0x49742400
 800a494:	0801d422 	.word	0x0801d422
 800a498:	0801dc7f 	.word	0x0801dc7f
 800a49c:	bf800000 	.word	0xbf800000
 800a4a0:	0801d45f 	.word	0x0801d45f
 800a4a4:	0030      	movs	r0, r6
 800a4a6:	f7f6 fbc5 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 800a4aa:	0033      	movs	r3, r6
 800a4ac:	332e      	adds	r3, #46	; 0x2e
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	4682      	mov	sl, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d049      	beq.n	800a54a <initialize.lto_priv.170+0x662>
 800a4b6:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800a4b8:	466a      	mov	r2, sp
 800a4ba:	8c12      	ldrh	r2, [r2, #32]
 800a4bc:	0ffc      	lsrs	r4, r7, #31
 800a4be:	9207      	str	r2, [sp, #28]
 800a4c0:	464a      	mov	r2, r9
 800a4c2:	19e0      	adds	r0, r4, r7
 800a4c4:	8093      	strh	r3, [r2, #4]
 800a4c6:	217c      	movs	r1, #124	; 0x7c
 800a4c8:	f006 fb9a 	bl	8010c00 <__divsi3>
 800a4cc:	464b      	mov	r3, r9
 800a4ce:	1b04      	subs	r4, r0, r4
 800a4d0:	811c      	strh	r4, [r3, #8]
 800a4d2:	4643      	mov	r3, r8
 800a4d4:	0fdb      	lsrs	r3, r3, #31
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	4443      	add	r3, r8
 800a4da:	0018      	movs	r0, r3
 800a4dc:	217c      	movs	r1, #124	; 0x7c
 800a4de:	f006 fb8f 	bl	8010c00 <__divsi3>
 800a4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e4:	4651      	mov	r1, sl
 800a4e6:	1ac0      	subs	r0, r0, r3
 800a4e8:	464b      	mov	r3, r9
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	1b04      	subs	r4, r0, r4
 800a4ee:	b2a4      	uxth	r4, r4
 800a4f0:	815c      	strh	r4, [r3, #10]
 800a4f2:	0038      	movs	r0, r7
 800a4f4:	f006 fc6a 	bl	8010dcc <__aeabi_idivmod>
 800a4f8:	4451      	add	r1, sl
 800a4fa:	0008      	movs	r0, r1
 800a4fc:	4651      	mov	r1, sl
 800a4fe:	f006 fc65 	bl	8010dcc <__aeabi_idivmod>
 800a502:	464b      	mov	r3, r9
 800a504:	0020      	movs	r0, r4
 800a506:	80d9      	strh	r1, [r3, #6]
 800a508:	9907      	ldr	r1, [sp, #28]
 800a50a:	f006 fb75 	bl	8010bf8 <__aeabi_uidivmod>
 800a50e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a510:	b280      	uxth	r0, r0
 800a512:	2900      	cmp	r1, #0
 800a514:	d11d      	bne.n	800a552 <initialize.lto_priv.170+0x66a>
 800a516:	464b      	mov	r3, r9
 800a518:	8198      	strh	r0, [r3, #12]
 800a51a:	0030      	movs	r0, r6
 800a51c:	f7f6 fc29 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 800a520:	0004      	movs	r4, r0
 800a522:	0030      	movs	r0, r6
 800a524:	f7f6 fbe6 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 800a528:	2c04      	cmp	r4, #4
 800a52a:	d001      	beq.n	800a530 <initialize.lto_priv.170+0x648>
 800a52c:	2801      	cmp	r0, #1
 800a52e:	d012      	beq.n	800a556 <initialize.lto_priv.170+0x66e>
 800a530:	464b      	mov	r3, r9
 800a532:	9a07      	ldr	r2, [sp, #28]
 800a534:	895b      	ldrh	r3, [r3, #10]
 800a536:	429a      	cmp	r2, r3
 800a538:	d20d      	bcs.n	800a556 <initialize.lto_priv.170+0x66e>
 800a53a:	4bce      	ldr	r3, [pc, #824]	; (800a874 <initialize.lto_priv.170+0x98c>)
 800a53c:	2000      	movs	r0, #0
 800a53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a540:	4acd      	ldr	r2, [pc, #820]	; (800a878 <initialize.lto_priv.170+0x990>)
 800a542:	49ce      	ldr	r1, [pc, #824]	; (800a87c <initialize.lto_priv.170+0x994>)
 800a544:	4798      	blx	r3
 800a546:	2000      	movs	r0, #0
 800a548:	e4e9      	b.n	8009f1e <initialize.lto_priv.170+0x36>
 800a54a:	0033      	movs	r3, r6
 800a54c:	3332      	adds	r3, #50	; 0x32
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	e7b2      	b.n	800a4b8 <initialize.lto_priv.170+0x5d0>
 800a552:	3001      	adds	r0, #1
 800a554:	e7df      	b.n	800a516 <initialize.lto_priv.170+0x62e>
 800a556:	f002 f965 	bl	800c824 <get_dt.constprop.10>
 800a55a:	1c04      	adds	r4, r0, #0
 800a55c:	4650      	mov	r0, sl
 800a55e:	f006 ff11 	bl	8011384 <__aeabi_ui2f>
 800a562:	1c21      	adds	r1, r4, #0
 800a564:	f005 ff90 	bl	8010488 <__aeabi_fmul>
 800a568:	465b      	mov	r3, fp
 800a56a:	60d8      	str	r0, [r3, #12]
 800a56c:	0038      	movs	r0, r7
 800a56e:	f002 f975 	bl	800c85c <points_to_meter.constprop.9>
 800a572:	465b      	mov	r3, fp
 800a574:	6018      	str	r0, [r3, #0]
 800a576:	4640      	mov	r0, r8
 800a578:	f002 f970 	bl	800c85c <points_to_meter.constprop.9>
 800a57c:	465b      	mov	r3, fp
 800a57e:	6819      	ldr	r1, [r3, #0]
 800a580:	6098      	str	r0, [r3, #8]
 800a582:	f006 f8b3 	bl	80106ec <__aeabi_fsub>
 800a586:	465b      	mov	r3, fp
 800a588:	6058      	str	r0, [r3, #4]
 800a58a:	4643      	mov	r3, r8
 800a58c:	4651      	mov	r1, sl
 800a58e:	1bd8      	subs	r0, r3, r7
 800a590:	f006 fb36 	bl	8010c00 <__divsi3>
 800a594:	3001      	adds	r0, #1
 800a596:	b283      	uxth	r3, r0
 800a598:	9309      	str	r3, [sp, #36]	; 0x24
 800a59a:	465b      	mov	r3, fp
 800a59c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a59e:	4651      	mov	r1, sl
 800a5a0:	82da      	strh	r2, [r3, #22]
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	899b      	ldrh	r3, [r3, #12]
 800a5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5a8:	465b      	mov	r3, fp
 800a5aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ac:	831a      	strh	r2, [r3, #24]
 800a5ae:	464b      	mov	r3, r9
 800a5b0:	895c      	ldrh	r4, [r3, #10]
 800a5b2:	237c      	movs	r3, #124	; 0x7c
 800a5b4:	0018      	movs	r0, r3
 800a5b6:	4360      	muls	r0, r4
 800a5b8:	4698      	mov	r8, r3
 800a5ba:	f006 fa97 	bl	8010aec <__udivsi3>
 800a5be:	9b06      	ldr	r3, [sp, #24]
 800a5c0:	4641      	mov	r1, r8
 800a5c2:	8018      	strh	r0, [r3, #0]
 800a5c4:	811c      	strh	r4, [r3, #8]
 800a5c6:	0038      	movs	r0, r7
 800a5c8:	f006 fc00 	bl	8010dcc <__aeabi_idivmod>
 800a5cc:	4441      	add	r1, r8
 800a5ce:	0008      	movs	r0, r1
 800a5d0:	4641      	mov	r1, r8
 800a5d2:	f006 fbfb 	bl	8010dcc <__aeabi_idivmod>
 800a5d6:	0008      	movs	r0, r1
 800a5d8:	4651      	mov	r1, sl
 800a5da:	f006 fb11 	bl	8010c00 <__divsi3>
 800a5de:	9b06      	ldr	r3, [sp, #24]
 800a5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e2:	8058      	strh	r0, [r3, #2]
 800a5e4:	809a      	strh	r2, [r3, #4]
 800a5e6:	4651      	mov	r1, sl
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	f006 fa7f 	bl	8010aec <__udivsi3>
 800a5ee:	9b06      	ldr	r3, [sp, #24]
 800a5f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5f2:	80d8      	strh	r0, [r3, #6]
 800a5f4:	821a      	strh	r2, [r3, #16]
 800a5f6:	9b07      	ldr	r3, [sp, #28]
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	d228      	bcs.n	800a64e <initialize.lto_priv.170+0x766>
 800a5fc:	466b      	mov	r3, sp
 800a5fe:	8c19      	ldrh	r1, [r3, #32]
 800a600:	9b06      	ldr	r3, [sp, #24]
 800a602:	8299      	strh	r1, [r3, #20]
 800a604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a606:	2b00      	cmp	r3, #0
 800a608:	d004      	beq.n	800a614 <initialize.lto_priv.170+0x72c>
 800a60a:	9907      	ldr	r1, [sp, #28]
 800a60c:	0020      	movs	r0, r4
 800a60e:	f006 faf3 	bl	8010bf8 <__aeabi_uidivmod>
 800a612:	b289      	uxth	r1, r1
 800a614:	9b06      	ldr	r3, [sp, #24]
 800a616:	82d9      	strh	r1, [r3, #22]
 800a618:	0030      	movs	r0, r6
 800a61a:	f7f6 fad5 	bl	8000bc8 <configuration_is_valid>
 800a61e:	2800      	cmp	r0, #0
 800a620:	d019      	beq.n	800a656 <initialize.lto_priv.170+0x76e>
 800a622:	0033      	movs	r3, r6
 800a624:	3346      	adds	r3, #70	; 0x46
 800a626:	7818      	ldrb	r0, [r3, #0]
 800a628:	2800      	cmp	r0, #0
 800a62a:	d014      	beq.n	800a656 <initialize.lto_priv.170+0x76e>
 800a62c:	2300      	movs	r3, #0
 800a62e:	2001      	movs	r0, #1
 800a630:	2400      	movs	r4, #0
 800a632:	64eb      	str	r3, [r5, #76]	; 0x4c
 800a634:	64a8      	str	r0, [r5, #72]	; 0x48
 800a636:	652c      	str	r4, [r5, #80]	; 0x50
 800a638:	0030      	movs	r0, r6
 800a63a:	f7f6 fb5b 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 800a63e:	0023      	movs	r3, r4
 800a640:	ac10      	add	r4, sp, #64	; 0x40
 800a642:	2803      	cmp	r0, #3
 800a644:	d80d      	bhi.n	800a662 <initialize.lto_priv.170+0x77a>
 800a646:	f006 fa3d 	bl	8010ac4 <__gnu_thumb1_case_uqi>
 800a64a:	1a08      	.short	0x1a08
 800a64c:	3020      	.short	0x3020
 800a64e:	9b06      	ldr	r3, [sp, #24]
 800a650:	829c      	strh	r4, [r3, #20]
 800a652:	82dc      	strh	r4, [r3, #22]
 800a654:	e7e0      	b.n	800a618 <initialize.lto_priv.170+0x730>
 800a656:	2301      	movs	r3, #1
 800a658:	e7ea      	b.n	800a630 <initialize.lto_priv.170+0x748>
 800a65a:	656b      	str	r3, [r5, #84]	; 0x54
 800a65c:	65ab      	str	r3, [r5, #88]	; 0x58
 800a65e:	65eb      	str	r3, [r5, #92]	; 0x5c
 800a660:	662b      	str	r3, [r5, #96]	; 0x60
 800a662:	0030      	movs	r0, r6
 800a664:	f7f6 fb85 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 800a668:	2804      	cmp	r0, #4
 800a66a:	d82a      	bhi.n	800a6c2 <initialize.lto_priv.170+0x7da>
 800a66c:	2300      	movs	r3, #0
 800a66e:	2201      	movs	r2, #1
 800a670:	f006 fa32 	bl	8010ad8 <__gnu_thumb1_case_uhi>
 800a674:	00250025 	.word	0x00250025
 800a678:	00fa00f7 	.word	0x00fa00f7
 800a67c:	0025      	.short	0x0025
 800a67e:	2201      	movs	r2, #1
 800a680:	656b      	str	r3, [r5, #84]	; 0x54
 800a682:	65aa      	str	r2, [r5, #88]	; 0x58
 800a684:	65eb      	str	r3, [r5, #92]	; 0x5c
 800a686:	662b      	str	r3, [r5, #96]	; 0x60
 800a688:	e7eb      	b.n	800a662 <initialize.lto_priv.170+0x77a>
 800a68a:	0030      	movs	r0, r6
 800a68c:	f7f6 fb1c 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 800a690:	aa0f      	add	r2, sp, #60	; 0x3c
 800a692:	0021      	movs	r1, r4
 800a694:	f7fd fb0a 	bl	8007cac <acc_radar_engine_common_frequency_to_main_clk>
 800a698:	2301      	movs	r3, #1
 800a69a:	656b      	str	r3, [r5, #84]	; 0x54
 800a69c:	2300      	movs	r3, #0
 800a69e:	65ab      	str	r3, [r5, #88]	; 0x58
 800a6a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6a2:	65eb      	str	r3, [r5, #92]	; 0x5c
 800a6a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6a6:	662b      	str	r3, [r5, #96]	; 0x60
 800a6a8:	e7db      	b.n	800a662 <initialize.lto_priv.170+0x77a>
 800a6aa:	0030      	movs	r0, r6
 800a6ac:	f7f6 fb0c 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 800a6b0:	aa0f      	add	r2, sp, #60	; 0x3c
 800a6b2:	0021      	movs	r1, r4
 800a6b4:	f7fd fafa 	bl	8007cac <acc_radar_engine_common_frequency_to_main_clk>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	656b      	str	r3, [r5, #84]	; 0x54
 800a6bc:	e7ef      	b.n	800a69e <initialize.lto_priv.170+0x7b6>
 800a6be:	666a      	str	r2, [r5, #100]	; 0x64
 800a6c0:	66aa      	str	r2, [r5, #104]	; 0x68
 800a6c2:	0030      	movs	r0, r6
 800a6c4:	f7f6 fa80 	bl	8000bc8 <configuration_is_valid>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	0007      	movs	r7, r0
 800a6cc:	4298      	cmp	r0, r3
 800a6ce:	d00b      	beq.n	800a6e8 <initialize.lto_priv.170+0x800>
 800a6d0:	0033      	movs	r3, r6
 800a6d2:	3350      	adds	r3, #80	; 0x50
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a6d8:	0033      	movs	r3, r6
 800a6da:	3352      	adds	r3, #82	; 0x52
 800a6dc:	881b      	ldrh	r3, [r3, #0]
 800a6de:	930c      	str	r3, [sp, #48]	; 0x30
 800a6e0:	0033      	movs	r3, r6
 800a6e2:	334f      	adds	r3, #79	; 0x4f
 800a6e4:	781f      	ldrb	r7, [r3, #0]
 800a6e6:	003b      	movs	r3, r7
 800a6e8:	002a      	movs	r2, r5
 800a6ea:	32b4      	adds	r2, #180	; 0xb4
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	2f00      	cmp	r7, #0
 800a6f0:	d002      	beq.n	800a6f8 <initialize.lto_priv.170+0x810>
 800a6f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	6053      	str	r3, [r2, #4]
 800a6f8:	0030      	movs	r0, r6
 800a6fa:	f7f6 fb31 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 800a6fe:	2301      	movs	r3, #1
 800a700:	4698      	mov	r8, r3
 800a702:	2800      	cmp	r0, #0
 800a704:	d103      	bne.n	800a70e <initialize.lto_priv.170+0x826>
 800a706:	0003      	movs	r3, r0
 800a708:	2f00      	cmp	r7, #0
 800a70a:	d000      	beq.n	800a70e <initialize.lto_priv.170+0x826>
 800a70c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a70e:	4642      	mov	r2, r8
 800a710:	439a      	bics	r2, r3
 800a712:	66ea      	str	r2, [r5, #108]	; 0x6c
 800a714:	0030      	movs	r0, r6
 800a716:	f7f6 fb1a 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 800a71a:	4643      	mov	r3, r8
 800a71c:	4058      	eors	r0, r3
 800a71e:	b2c0      	uxtb	r0, r0
 800a720:	676b      	str	r3, [r5, #116]	; 0x74
 800a722:	6728      	str	r0, [r5, #112]	; 0x70
 800a724:	0030      	movs	r0, r6
 800a726:	f7f6 fb07 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 800a72a:	3801      	subs	r0, #1
 800a72c:	67a8      	str	r0, [r5, #120]	; 0x78
 800a72e:	0030      	movs	r0, r6
 800a730:	f7f6 fa4a 	bl	8000bc8 <configuration_is_valid>
 800a734:	2300      	movs	r3, #0
 800a736:	4298      	cmp	r0, r3
 800a738:	d000      	beq.n	800a73c <initialize.lto_priv.170+0x854>
 800a73a:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 800a73c:	67eb      	str	r3, [r5, #124]	; 0x7c
 800a73e:	0030      	movs	r0, r6
 800a740:	f7f6 fab7 	bl	8000cb2 <acc_base_configuration_integrator_get>
 800a744:	1d2b      	adds	r3, r5, #4
 800a746:	67d8      	str	r0, [r3, #124]	; 0x7c
 800a748:	0030      	movs	r0, r6
 800a74a:	f7f6 fa3d 	bl	8000bc8 <configuration_is_valid>
 800a74e:	2300      	movs	r3, #0
 800a750:	4298      	cmp	r0, r3
 800a752:	d001      	beq.n	800a758 <initialize.lto_priv.170+0x870>
 800a754:	1db3      	adds	r3, r6, #6
 800a756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a758:	002a      	movs	r2, r5
 800a75a:	3b01      	subs	r3, #1
 800a75c:	3208      	adds	r2, #8
 800a75e:	67d3      	str	r3, [r2, #124]	; 0x7c
 800a760:	0030      	movs	r0, r6
 800a762:	f7f6 fa91 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 800a766:	002b      	movs	r3, r5
 800a768:	3388      	adds	r3, #136	; 0x88
 800a76a:	6018      	str	r0, [r3, #0]
 800a76c:	0030      	movs	r0, r6
 800a76e:	f7f6 fa2b 	bl	8000bc8 <configuration_is_valid>
 800a772:	2800      	cmp	r0, #0
 800a774:	d002      	beq.n	800a77c <initialize.lto_priv.170+0x894>
 800a776:	0033      	movs	r3, r6
 800a778:	336d      	adds	r3, #109	; 0x6d
 800a77a:	7818      	ldrb	r0, [r3, #0]
 800a77c:	002b      	movs	r3, r5
 800a77e:	338d      	adds	r3, #141	; 0x8d
 800a780:	7018      	strb	r0, [r3, #0]
 800a782:	0030      	movs	r0, r6
 800a784:	f7f6 fa56 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 800a788:	002b      	movs	r3, r5
 800a78a:	33a4      	adds	r3, #164	; 0xa4
 800a78c:	6018      	str	r0, [r3, #0]
 800a78e:	0030      	movs	r0, r6
 800a790:	f7f6 fa1a 	bl	8000bc8 <configuration_is_valid>
 800a794:	2300      	movs	r3, #0
 800a796:	4298      	cmp	r0, r3
 800a798:	d002      	beq.n	800a7a0 <initialize.lto_priv.170+0x8b8>
 800a79a:	0033      	movs	r3, r6
 800a79c:	336b      	adds	r3, #107	; 0x6b
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	002a      	movs	r2, r5
 800a7a2:	329c      	adds	r2, #156	; 0x9c
 800a7a4:	6013      	str	r3, [r2, #0]
 800a7a6:	0030      	movs	r0, r6
 800a7a8:	f7f6 fa0e 	bl	8000bc8 <configuration_is_valid>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4298      	cmp	r0, r3
 800a7b0:	d002      	beq.n	800a7b8 <initialize.lto_priv.170+0x8d0>
 800a7b2:	0033      	movs	r3, r6
 800a7b4:	336c      	adds	r3, #108	; 0x6c
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	002a      	movs	r2, r5
 800a7ba:	32a0      	adds	r2, #160	; 0xa0
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	0030      	movs	r0, r6
 800a7c0:	f7f6 fa1c 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	002a      	movs	r2, r5
 800a7c8:	4058      	eors	r0, r3
 800a7ca:	32ac      	adds	r2, #172	; 0xac
 800a7cc:	7053      	strb	r3, [r2, #1]
 800a7ce:	7010      	strb	r0, [r2, #0]
 800a7d0:	464a      	mov	r2, r9
 800a7d2:	002b      	movs	r3, r5
 800a7d4:	8892      	ldrh	r2, [r2, #4]
 800a7d6:	3390      	adds	r3, #144	; 0x90
 800a7d8:	601a      	str	r2, [r3, #0]
 800a7da:	464b      	mov	r3, r9
 800a7dc:	899b      	ldrh	r3, [r3, #12]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d945      	bls.n	800a86e <initialize.lto_priv.170+0x986>
 800a7e2:	464b      	mov	r3, r9
 800a7e4:	6958      	ldr	r0, [r3, #20]
 800a7e6:	f7fa fdb3 	bl	8005350 <get_package_range_coarse_max>
 800a7ea:	002b      	movs	r3, r5
 800a7ec:	464a      	mov	r2, r9
 800a7ee:	3394      	adds	r3, #148	; 0x94
 800a7f0:	3801      	subs	r0, #1
 800a7f2:	6018      	str	r0, [r3, #0]
 800a7f4:	2108      	movs	r1, #8
 800a7f6:	5e52      	ldrsh	r2, [r2, r1]
 800a7f8:	605a      	str	r2, [r3, #4]
 800a7fa:	464a      	mov	r2, r9
 800a7fc:	88d2      	ldrh	r2, [r2, #6]
 800a7fe:	615a      	str	r2, [r3, #20]
 800a800:	f7fd fa4c 	bl	8007c9c <acc_rss_integration_get_sensor_reference_frequency>
 800a804:	002b      	movs	r3, r5
 800a806:	33b0      	adds	r3, #176	; 0xb0
 800a808:	6018      	str	r0, [r3, #0]
 800a80a:	23e1      	movs	r3, #225	; 0xe1
 800a80c:	465a      	mov	r2, fp
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	8293      	strh	r3, [r2, #20]
 800a812:	002b      	movs	r3, r5
 800a814:	33cc      	adds	r3, #204	; 0xcc
 800a816:	8819      	ldrh	r1, [r3, #0]
 800a818:	207c      	movs	r0, #124	; 0x7c
 800a81a:	f006 f967 	bl	8010aec <__udivsi3>
 800a81e:	9b06      	ldr	r3, [sp, #24]
 800a820:	9a06      	ldr	r2, [sp, #24]
 800a822:	891b      	ldrh	r3, [r3, #8]
 800a824:	0021      	movs	r1, r4
 800a826:	4358      	muls	r0, r3
 800a828:	9b06      	ldr	r3, [sp, #24]
 800a82a:	8158      	strh	r0, [r3, #10]
 800a82c:	2300      	movs	r3, #0
 800a82e:	0028      	movs	r0, r5
 800a830:	8313      	strh	r3, [r2, #24]
 800a832:	f005 fb67 	bl	800ff04 <acc_cpd_linear_sweep_get_info>
 800a836:	4649      	mov	r1, r9
 800a838:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a83a:	0022      	movs	r2, r4
 800a83c:	8023      	strh	r3, [r4, #0]
 800a83e:	2013      	movs	r0, #19
 800a840:	2301      	movs	r3, #1
 800a842:	6809      	ldr	r1, [r1, #0]
 800a844:	f7f5 fc78 	bl	8000138 <acc_probes_execute_uint16>
 800a848:	35ce      	adds	r5, #206	; 0xce
 800a84a:	8823      	ldrh	r3, [r4, #0]
 800a84c:	882a      	ldrh	r2, [r5, #0]
 800a84e:	3303      	adds	r3, #3
 800a850:	189b      	adds	r3, r3, r2
 800a852:	9a06      	ldr	r2, [sp, #24]
 800a854:	2001      	movs	r0, #1
 800a856:	81d3      	strh	r3, [r2, #14]
 800a858:	2396      	movs	r3, #150	; 0x96
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	8193      	strh	r3, [r2, #12]
 800a85e:	f7ff fb5e 	bl	8009f1e <initialize.lto_priv.170+0x36>
 800a862:	666a      	str	r2, [r5, #100]	; 0x64
 800a864:	66ab      	str	r3, [r5, #104]	; 0x68
 800a866:	e72c      	b.n	800a6c2 <initialize.lto_priv.170+0x7da>
 800a868:	666b      	str	r3, [r5, #100]	; 0x64
 800a86a:	66ab      	str	r3, [r5, #104]	; 0x68
 800a86c:	e729      	b.n	800a6c2 <initialize.lto_priv.170+0x7da>
 800a86e:	464b      	mov	r3, r9
 800a870:	8958      	ldrh	r0, [r3, #10]
 800a872:	e7ba      	b.n	800a7ea <initialize.lto_priv.170+0x902>
 800a874:	200004a8 	.word	0x200004a8
 800a878:	0801dc9f 	.word	0x0801dc9f
 800a87c:	0801dc7f 	.word	0x0801dc7f

0800a880 <acc_service_handle_valid>:
 800a880:	b510      	push	{r4, lr}
 800a882:	2800      	cmp	r0, #0
 800a884:	d004      	beq.n	800a890 <acc_service_handle_valid+0x10>
 800a886:	6802      	ldr	r2, [r0, #0]
 800a888:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <acc_service_handle_valid+0x20>)
 800a88a:	2001      	movs	r0, #1
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d006      	beq.n	800a89e <acc_service_handle_valid+0x1e>
 800a890:	4b04      	ldr	r3, [pc, #16]	; (800a8a4 <acc_service_handle_valid+0x24>)
 800a892:	2000      	movs	r0, #0
 800a894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a896:	4a04      	ldr	r2, [pc, #16]	; (800a8a8 <acc_service_handle_valid+0x28>)
 800a898:	4904      	ldr	r1, [pc, #16]	; (800a8ac <acc_service_handle_valid+0x2c>)
 800a89a:	4798      	blx	r3
 800a89c:	2000      	movs	r0, #0
 800a89e:	bd10      	pop	{r4, pc}
 800a8a0:	acc09ee8 	.word	0xacc09ee8
 800a8a4:	200004a8 	.word	0x200004a8
 800a8a8:	0801dcca 	.word	0x0801dcca
 800a8ac:	0801d3b8 	.word	0x0801d3b8

0800a8b0 <acc_service_deactivate>:
 800a8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b2:	0004      	movs	r4, r0
 800a8b4:	f7ff ffe4 	bl	800a880 <acc_service_handle_valid>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d02d      	beq.n	800a918 <acc_service_deactivate+0x68>
 800a8bc:	4b1a      	ldr	r3, [pc, #104]	; (800a928 <acc_service_deactivate+0x78>)
 800a8be:	3371      	adds	r3, #113	; 0x71
 800a8c0:	781e      	ldrb	r6, [r3, #0]
 800a8c2:	2e00      	cmp	r6, #0
 800a8c4:	d028      	beq.n	800a918 <acc_service_deactivate+0x68>
 800a8c6:	7a63      	ldrb	r3, [r4, #9]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d123      	bne.n	800a914 <acc_service_deactivate+0x64>
 800a8cc:	6863      	ldr	r3, [r4, #4]
 800a8ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d0:	d822      	bhi.n	800a918 <acc_service_deactivate+0x68>
 800a8d2:	4d16      	ldr	r5, [pc, #88]	; (800a92c <acc_service_deactivate+0x7c>)
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	002a      	movs	r2, r5
 800a8d8:	3234      	adds	r2, #52	; 0x34
 800a8da:	5c9f      	ldrb	r7, [r3, r2]
 800a8dc:	2f00      	cmp	r7, #0
 800a8de:	d11b      	bne.n	800a918 <acc_service_deactivate+0x68>
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	5499      	strb	r1, [r3, r2]
 800a8e4:	7ee3      	ldrb	r3, [r4, #27]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <acc_service_deactivate+0x42>
 800a8ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a8ec:	f7f6 f8b6 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 800a8f0:	76e7      	strb	r7, [r4, #27]
 800a8f2:	6863      	ldr	r3, [r4, #4]
 800a8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a8f6:	d805      	bhi.n	800a904 <acc_service_deactivate+0x54>
 800a8f8:	002a      	movs	r2, r5
 800a8fa:	0059      	lsls	r1, r3, #1
 800a8fc:	3234      	adds	r2, #52	; 0x34
 800a8fe:	1852      	adds	r2, r2, r1
 800a900:	2100      	movs	r1, #0
 800a902:	7051      	strb	r1, [r2, #1]
 800a904:	2201      	movs	r2, #1
 800a906:	7262      	strb	r2, [r4, #9]
 800a908:	2b2a      	cmp	r3, #42	; 0x2a
 800a90a:	d803      	bhi.n	800a914 <acc_service_deactivate+0x64>
 800a90c:	4093      	lsls	r3, r2
 800a90e:	2200      	movs	r2, #0
 800a910:	3534      	adds	r5, #52	; 0x34
 800a912:	555a      	strb	r2, [r3, r5]
 800a914:	0030      	movs	r0, r6
 800a916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a918:	4b05      	ldr	r3, [pc, #20]	; (800a930 <acc_service_deactivate+0x80>)
 800a91a:	4a06      	ldr	r2, [pc, #24]	; (800a934 <acc_service_deactivate+0x84>)
 800a91c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a91e:	4906      	ldr	r1, [pc, #24]	; (800a938 <acc_service_deactivate+0x88>)
 800a920:	2000      	movs	r0, #0
 800a922:	4798      	blx	r3
 800a924:	2600      	movs	r6, #0
 800a926:	e7f5      	b.n	800a914 <acc_service_deactivate+0x64>
 800a928:	2000020c 	.word	0x2000020c
 800a92c:	2000028c 	.word	0x2000028c
 800a930:	200004a8 	.word	0x200004a8
 800a934:	0801dcd9 	.word	0x0801dcd9
 800a938:	0801d3b8 	.word	0x0801d3b8

0800a93c <acc_service_destroy>:
 800a93c:	4b13      	ldr	r3, [pc, #76]	; (800a98c <acc_service_destroy+0x50>)
 800a93e:	b510      	push	{r4, lr}
 800a940:	791b      	ldrb	r3, [r3, #4]
 800a942:	0004      	movs	r4, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d014      	beq.n	800a972 <acc_service_destroy+0x36>
 800a948:	2800      	cmp	r0, #0
 800a94a:	d011      	beq.n	800a970 <acc_service_destroy+0x34>
 800a94c:	6800      	ldr	r0, [r0, #0]
 800a94e:	f7ff ff97 	bl	800a880 <acc_service_handle_valid>
 800a952:	2800      	cmp	r0, #0
 800a954:	d00c      	beq.n	800a970 <acc_service_destroy+0x34>
 800a956:	6820      	ldr	r0, [r4, #0]
 800a958:	f7ff ffaa 	bl	800a8b0 <acc_service_deactivate>
 800a95c:	6820      	ldr	r0, [r4, #0]
 800a95e:	68c3      	ldr	r3, [r0, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d000      	beq.n	800a966 <acc_service_destroy+0x2a>
 800a964:	4798      	blx	r3
 800a966:	6820      	ldr	r0, [r4, #0]
 800a968:	f7f6 fd6f 	bl	800144a <destroy_handle>
 800a96c:	2300      	movs	r3, #0
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	bd10      	pop	{r4, pc}
 800a972:	4b07      	ldr	r3, [pc, #28]	; (800a990 <acc_service_destroy+0x54>)
 800a974:	001a      	movs	r2, r3
 800a976:	3230      	adds	r2, #48	; 0x30
 800a978:	7812      	ldrb	r2, [r2, #0]
 800a97a:	2a00      	cmp	r2, #0
 800a97c:	d0f8      	beq.n	800a970 <acc_service_destroy+0x34>
 800a97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a980:	4a04      	ldr	r2, [pc, #16]	; (800a994 <acc_service_destroy+0x58>)
 800a982:	4905      	ldr	r1, [pc, #20]	; (800a998 <acc_service_destroy+0x5c>)
 800a984:	2001      	movs	r0, #1
 800a986:	4798      	blx	r3
 800a988:	e7f2      	b.n	800a970 <acc_service_destroy+0x34>
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	2000008c 	.word	0x2000008c
 800a990:	200004a8 	.word	0x200004a8
 800a994:	0801ca72 	.word	0x0801ca72
 800a998:	0801c795 	.word	0x0801c795

0800a99c <stopService>:
void stopService(void){
 800a99c:	b500      	push	{lr}
 800a99e:	b083      	sub	sp, #12
    DBG_PRINTLN("stopping service");
 800a9a0:	4843      	ldr	r0, [pc, #268]	; (800aab0 <stopService+0x114>)
 800a9a2:	f00a fe87 	bl	80156b4 <__wrap_printf>
 800a9a6:	4843      	ldr	r0, [pc, #268]	; (800aab4 <stopService+0x118>)
 800a9a8:	f00a fe84 	bl	80156b4 <__wrap_printf>
 800a9ac:	4a42      	ldr	r2, [pc, #264]	; (800aab8 <stopService+0x11c>)
 800a9ae:	4943      	ldr	r1, [pc, #268]	; (800aabc <stopService+0x120>)
 800a9b0:	4843      	ldr	r0, [pc, #268]	; (800aac0 <stopService+0x124>)
 800a9b2:	f00a fe7f 	bl	80156b4 <__wrap_printf>
    if(!(RegInt_getreg(0x06) && 0x00000001)){DBG_PRINTLN("no active service"); return;}
 800a9b6:	2006      	movs	r0, #6
 800a9b8:	f7f7 f96e 	bl	8001c98 <RegInt_getreg>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d10d      	bne.n	800a9dc <stopService+0x40>
 800a9c0:	483b      	ldr	r0, [pc, #236]	; (800aab0 <stopService+0x114>)
 800a9c2:	f00a fe77 	bl	80156b4 <__wrap_printf>
 800a9c6:	483f      	ldr	r0, [pc, #252]	; (800aac4 <stopService+0x128>)
 800a9c8:	f00a fe74 	bl	80156b4 <__wrap_printf>
 800a9cc:	22a9      	movs	r2, #169	; 0xa9
 800a9ce:	0092      	lsls	r2, r2, #2
 800a9d0:	493a      	ldr	r1, [pc, #232]	; (800aabc <stopService+0x120>)
 800a9d2:	483b      	ldr	r0, [pc, #236]	; (800aac0 <stopService+0x124>)
 800a9d4:	f00a fe6e 	bl	80156b4 <__wrap_printf>
}
 800a9d8:	b003      	add	sp, #12
 800a9da:	bd00      	pop	{pc}
	uint32_t service_type = RegInt_getreg(0x02);
 800a9dc:	2002      	movs	r0, #2
 800a9de:	f7f7 f95b 	bl	8001c98 <RegInt_getreg>
    if(service_type == 0x02){handle = envelope_handle;}
 800a9e2:	2802      	cmp	r0, #2
 800a9e4:	d005      	beq.n	800a9f2 <stopService+0x56>
    else if(service_type == 0x04){handle = sparse_handle;}
 800a9e6:	2804      	cmp	r0, #4
 800a9e8:	d1f6      	bne.n	800a9d8 <stopService+0x3c>
 800a9ea:	4b37      	ldr	r3, [pc, #220]	; (800aac8 <stopService+0x12c>)
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	9301      	str	r3, [sp, #4]
 800a9f0:	e002      	b.n	800a9f8 <stopService+0x5c>
    if(service_type == 0x02){handle = envelope_handle;}
 800a9f2:	4b36      	ldr	r3, [pc, #216]	; (800aacc <stopService+0x130>)
 800a9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9f6:	9301      	str	r3, [sp, #4]
	if(acc_service_deactivate(handle)){
 800a9f8:	9801      	ldr	r0, [sp, #4]
 800a9fa:	f7ff ff59 	bl	800a8b0 <acc_service_deactivate>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d020      	beq.n	800aa44 <stopService+0xa8>
		acc_service_destroy(&handle);	
 800aa02:	a801      	add	r0, sp, #4
 800aa04:	f7ff ff9a 	bl	800a93c <acc_service_destroy>
		data_free();//maybe a memory leak?
 800aa08:	f7f7 f9c0 	bl	8001d8c <data_free>
		DBG_PRINTLN("sparse service destroyed");
 800aa0c:	4828      	ldr	r0, [pc, #160]	; (800aab0 <stopService+0x114>)
 800aa0e:	f00a fe51 	bl	80156b4 <__wrap_printf>
 800aa12:	482f      	ldr	r0, [pc, #188]	; (800aad0 <stopService+0x134>)
 800aa14:	f00a fe4e 	bl	80156b4 <__wrap_printf>
 800aa18:	22ac      	movs	r2, #172	; 0xac
 800aa1a:	0092      	lsls	r2, r2, #2
 800aa1c:	4927      	ldr	r1, [pc, #156]	; (800aabc <stopService+0x120>)
 800aa1e:	4828      	ldr	r0, [pc, #160]	; (800aac0 <stopService+0x124>)
 800aa20:	f00a fe48 	bl	80156b4 <__wrap_printf>
	if(far_active){
 800aa24:	4a29      	ldr	r2, [pc, #164]	; (800aacc <stopService+0x130>)
 800aa26:	2350      	movs	r3, #80	; 0x50
 800aa28:	5cd3      	ldrb	r3, [r2, r3]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d116      	bne.n	800aa5c <stopService+0xc0>
    uint32_t setbits = RegInt_getreg(0x06);
 800aa2e:	2006      	movs	r0, #6
 800aa30:	f7f7 f932 	bl	8001c98 <RegInt_getreg>
    setbits &= 0xFFFFFFFC;
 800aa34:	2303      	movs	r3, #3
 800aa36:	0001      	movs	r1, r0
 800aa38:	4399      	bics	r1, r3
    RegInt_setregf(0x06, setbits, 1);
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	2006      	movs	r0, #6
 800aa3e:	f7f8 ffa1 	bl	8003984 <RegInt_setregf>
 800aa42:	e7c9      	b.n	800a9d8 <stopService+0x3c>
		ERR_PRINTLN("sparse service deactivation fail");
 800aa44:	4823      	ldr	r0, [pc, #140]	; (800aad4 <stopService+0x138>)
 800aa46:	f00a fe35 	bl	80156b4 <__wrap_printf>
 800aa4a:	4823      	ldr	r0, [pc, #140]	; (800aad8 <stopService+0x13c>)
 800aa4c:	f00a fe32 	bl	80156b4 <__wrap_printf>
 800aa50:	4a22      	ldr	r2, [pc, #136]	; (800aadc <stopService+0x140>)
 800aa52:	491a      	ldr	r1, [pc, #104]	; (800aabc <stopService+0x120>)
 800aa54:	481a      	ldr	r0, [pc, #104]	; (800aac0 <stopService+0x124>)
 800aa56:	f00a fe2d 	bl	80156b4 <__wrap_printf>
 800aa5a:	e7e3      	b.n	800aa24 <stopService+0x88>
	if(acc_service_deactivate(sparse_handle_far)){
 800aa5c:	4b1a      	ldr	r3, [pc, #104]	; (800aac8 <stopService+0x12c>)
 800aa5e:	6918      	ldr	r0, [r3, #16]
 800aa60:	f7ff ff26 	bl	800a8b0 <acc_service_deactivate>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d015      	beq.n	800aa94 <stopService+0xf8>
		acc_service_destroy(&sparse_handle_far);	
 800aa68:	4817      	ldr	r0, [pc, #92]	; (800aac8 <stopService+0x12c>)
 800aa6a:	3010      	adds	r0, #16
 800aa6c:	f7ff ff66 	bl	800a93c <acc_service_destroy>
		data_free();
 800aa70:	f7f7 f98c 	bl	8001d8c <data_free>
		far_active = 0;
 800aa74:	4a15      	ldr	r2, [pc, #84]	; (800aacc <stopService+0x130>)
 800aa76:	2350      	movs	r3, #80	; 0x50
 800aa78:	2100      	movs	r1, #0
 800aa7a:	54d1      	strb	r1, [r2, r3]
		DBG_PRINTLN("far sparse service destroyed");
 800aa7c:	480c      	ldr	r0, [pc, #48]	; (800aab0 <stopService+0x114>)
 800aa7e:	f00a fe19 	bl	80156b4 <__wrap_printf>
 800aa82:	4817      	ldr	r0, [pc, #92]	; (800aae0 <stopService+0x144>)
 800aa84:	f00a fe16 	bl	80156b4 <__wrap_printf>
 800aa88:	4a16      	ldr	r2, [pc, #88]	; (800aae4 <stopService+0x148>)
 800aa8a:	490c      	ldr	r1, [pc, #48]	; (800aabc <stopService+0x120>)
 800aa8c:	480c      	ldr	r0, [pc, #48]	; (800aac0 <stopService+0x124>)
 800aa8e:	f00a fe11 	bl	80156b4 <__wrap_printf>
 800aa92:	e7cc      	b.n	800aa2e <stopService+0x92>
		ERR_PRINTLN("far sparse service deactivation fail");
 800aa94:	480f      	ldr	r0, [pc, #60]	; (800aad4 <stopService+0x138>)
 800aa96:	f00a fe0d 	bl	80156b4 <__wrap_printf>
 800aa9a:	4813      	ldr	r0, [pc, #76]	; (800aae8 <stopService+0x14c>)
 800aa9c:	f00a fe0a 	bl	80156b4 <__wrap_printf>
 800aaa0:	22af      	movs	r2, #175	; 0xaf
 800aaa2:	0092      	lsls	r2, r2, #2
 800aaa4:	4905      	ldr	r1, [pc, #20]	; (800aabc <stopService+0x120>)
 800aaa6:	4806      	ldr	r0, [pc, #24]	; (800aac0 <stopService+0x124>)
 800aaa8:	f00a fe04 	bl	80156b4 <__wrap_printf>
 800aaac:	e7bf      	b.n	800aa2e <stopService+0x92>
 800aaae:	46c0      	nop			; (mov r8, r8)
 800aab0:	0801dec0 	.word	0x0801dec0
 800aab4:	0801e138 	.word	0x0801e138
 800aab8:	000002a1 	.word	0x000002a1
 800aabc:	0801dd88 	.word	0x0801dd88
 800aac0:	0801dd48 	.word	0x0801dd48
 800aac4:	0801e14c 	.word	0x0801e14c
 800aac8:	2000030c 	.word	0x2000030c
 800aacc:	2000018c 	.word	0x2000018c
 800aad0:	0801e164 	.word	0x0801e164
 800aad4:	0801dd10 	.word	0x0801dd10
 800aad8:	0801e184 	.word	0x0801e184
 800aadc:	000002b2 	.word	0x000002b2
 800aae0:	0801e160 	.word	0x0801e160
 800aae4:	000002ba 	.word	0x000002ba
 800aae8:	0801e180 	.word	0x0801e180

0800aaec <createSparseService>:
int8_t createSparseService(void){
 800aaec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaee:	46c6      	mov	lr, r8
 800aaf0:	b500      	push	{lr}
 800aaf2:	b082      	sub	sp, #8
	uint32_t start_reg = roundDown(RegInt_getreg(0x20),60);
 800aaf4:	2020      	movs	r0, #32
 800aaf6:	f7f7 f8cf 	bl	8001c98 <RegInt_getreg>
 800aafa:	213c      	movs	r1, #60	; 0x3c
 800aafc:	f7f7 f841 	bl	8001b82 <roundDown>
 800ab00:	0004      	movs	r4, r0
	uint32_t len_reg = roundDown(RegInt_getreg(0x21),60);
 800ab02:	2021      	movs	r0, #33	; 0x21
 800ab04:	f7f7 f8c8 	bl	8001c98 <RegInt_getreg>
 800ab08:	213c      	movs	r1, #60	; 0x3c
 800ab0a:	f7f7 f83a 	bl	8001b82 <roundDown>
 800ab0e:	0006      	movs	r6, r0
	if (len_reg < 1891){
 800ab10:	4b83      	ldr	r3, [pc, #524]	; (800ad20 <createSparseService+0x234>)
 800ab12:	4298      	cmp	r0, r3
 800ab14:	d800      	bhi.n	800ab18 <createSparseService+0x2c>
 800ab16:	e07a      	b.n	800ac0e <createSparseService+0x122>
	}else if (len_reg < 3811){
 800ab18:	4b82      	ldr	r3, [pc, #520]	; (800ad24 <createSparseService+0x238>)
 800ab1a:	4298      	cmp	r0, r3
 800ab1c:	d900      	bls.n	800ab20 <createSparseService+0x34>
 800ab1e:	e08b      	b.n	800ac38 <createSparseService+0x14c>
		far_active = 1;
 800ab20:	4d81      	ldr	r5, [pc, #516]	; (800ad28 <createSparseService+0x23c>)
 800ab22:	2350      	movs	r3, #80	; 0x50
 800ab24:	2201      	movs	r2, #1
 800ab26:	54ea      	strb	r2, [r5, r3]
		DBG_PRINTLN("updating sparse config");
 800ab28:	4f80      	ldr	r7, [pc, #512]	; (800ad2c <createSparseService+0x240>)
 800ab2a:	0038      	movs	r0, r7
 800ab2c:	f00a fdc2 	bl	80156b4 <__wrap_printf>
 800ab30:	487f      	ldr	r0, [pc, #508]	; (800ad30 <createSparseService+0x244>)
 800ab32:	f00a fdbf 	bl	80156b4 <__wrap_printf>
 800ab36:	2292      	movs	r2, #146	; 0x92
 800ab38:	0092      	lsls	r2, r2, #2
 800ab3a:	497e      	ldr	r1, [pc, #504]	; (800ad34 <createSparseService+0x248>)
 800ab3c:	487e      	ldr	r0, [pc, #504]	; (800ad38 <createSparseService+0x24c>)
 800ab3e:	f00a fdb9 	bl	80156b4 <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, 1890);
 800ab42:	b2a4      	uxth	r4, r4
 800ab44:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800ab46:	4a76      	ldr	r2, [pc, #472]	; (800ad20 <createSparseService+0x234>)
 800ab48:	0021      	movs	r1, r4
 800ab4a:	f7f8 fdbf 	bl	80036cc <updateSparseConfig>
		DBG_PRINTLN("updating sparse far config");
 800ab4e:	0038      	movs	r0, r7
 800ab50:	f00a fdb0 	bl	80156b4 <__wrap_printf>
 800ab54:	4879      	ldr	r0, [pc, #484]	; (800ad3c <createSparseService+0x250>)
 800ab56:	f00a fdad 	bl	80156b4 <__wrap_printf>
 800ab5a:	4a79      	ldr	r2, [pc, #484]	; (800ad40 <createSparseService+0x254>)
 800ab5c:	4975      	ldr	r1, [pc, #468]	; (800ad34 <createSparseService+0x248>)
 800ab5e:	4876      	ldr	r0, [pc, #472]	; (800ad38 <createSparseService+0x24c>)
 800ab60:	f00a fda8 	bl	80156b4 <__wrap_printf>
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 800ab64:	0032      	movs	r2, r6
 800ab66:	4b77      	ldr	r3, [pc, #476]	; (800ad44 <createSparseService+0x258>)
 800ab68:	429e      	cmp	r6, r3
 800ab6a:	d200      	bcs.n	800ab6e <createSparseService+0x82>
 800ab6c:	001a      	movs	r2, r3
 800ab6e:	4b76      	ldr	r3, [pc, #472]	; (800ad48 <createSparseService+0x25c>)
 800ab70:	469c      	mov	ip, r3
 800ab72:	4462      	add	r2, ip
 800ab74:	b295      	uxth	r5, r2
 800ab76:	b22e      	sxth	r6, r5
		DBG_PRINTINT(far_len);
 800ab78:	486c      	ldr	r0, [pc, #432]	; (800ad2c <createSparseService+0x240>)
 800ab7a:	f00a fd9b 	bl	80156b4 <__wrap_printf>
 800ab7e:	0032      	movs	r2, r6
 800ab80:	4972      	ldr	r1, [pc, #456]	; (800ad4c <createSparseService+0x260>)
 800ab82:	4873      	ldr	r0, [pc, #460]	; (800ad50 <createSparseService+0x264>)
 800ab84:	f00a fd96 	bl	80156b4 <__wrap_printf>
 800ab88:	4a72      	ldr	r2, [pc, #456]	; (800ad54 <createSparseService+0x268>)
 800ab8a:	496a      	ldr	r1, [pc, #424]	; (800ad34 <createSparseService+0x248>)
 800ab8c:	486a      	ldr	r0, [pc, #424]	; (800ad38 <createSparseService+0x24c>)
 800ab8e:	f00a fd91 	bl	80156b4 <__wrap_printf>
		updateSparseConfig(sparse_config_far,start_reg+1920,far_len);
 800ab92:	23f0      	movs	r3, #240	; 0xf0
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	469c      	mov	ip, r3
 800ab98:	4464      	add	r4, ip
 800ab9a:	b2a1      	uxth	r1, r4
 800ab9c:	4b6e      	ldr	r3, [pc, #440]	; (800ad58 <createSparseService+0x26c>)
 800ab9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800aba0:	002a      	movs	r2, r5
 800aba2:	f7f8 fd93 	bl	80036cc <updateSparseConfig>
	sparse_handle = acc_service_create(sparse_config);	
 800aba6:	4b60      	ldr	r3, [pc, #384]	; (800ad28 <createSparseService+0x23c>)
 800aba8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800abaa:	f7f7 ffc9 	bl	8002b40 <acc_service_create>
 800abae:	4b6b      	ldr	r3, [pc, #428]	; (800ad5c <createSparseService+0x270>)
 800abb0:	60d8      	str	r0, [r3, #12]
	if (sparse_handle == NULL){//handles error
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d04e      	beq.n	800ac54 <createSparseService+0x168>
		acc_service_sparse_get_metadata(sparse_handle, &sparse_metadata);
 800abb6:	496a      	ldr	r1, [pc, #424]	; (800ad60 <createSparseService+0x274>)
 800abb8:	317c      	adds	r1, #124	; 0x7c
 800abba:	f7f6 fbca 	bl	8001352 <acc_service_sparse_get_metadata>
		if(!far_active){
 800abbe:	4a5a      	ldr	r2, [pc, #360]	; (800ad28 <createSparseService+0x23c>)
 800abc0:	2350      	movs	r3, #80	; 0x50
 800abc2:	5cd3      	ldrb	r3, [r2, r3]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d052      	beq.n	800ac6e <createSparseService+0x182>
		Reg_store_sparse_metadata(sparse_metadata, NULL);
 800abc8:	4c65      	ldr	r4, [pc, #404]	; (800ad60 <createSparseService+0x274>)
 800abca:	2300      	movs	r3, #0
 800abcc:	9301      	str	r3, [sp, #4]
 800abce:	338c      	adds	r3, #140	; 0x8c
 800abd0:	4698      	mov	r8, r3
 800abd2:	58e3      	ldr	r3, [r4, r3]
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800abd8:	2780      	movs	r7, #128	; 0x80
 800abda:	59e1      	ldr	r1, [r4, r7]
 800abdc:	2684      	movs	r6, #132	; 0x84
 800abde:	59a2      	ldr	r2, [r4, r6]
 800abe0:	2588      	movs	r5, #136	; 0x88
 800abe2:	5963      	ldr	r3, [r4, r5]
 800abe4:	f7f8 ff34 	bl	8003a50 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata);
 800abe8:	4643      	mov	r3, r8
 800abea:	58e3      	ldr	r3, [r4, r3]
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800abf0:	59e1      	ldr	r1, [r4, r7]
 800abf2:	59a2      	ldr	r2, [r4, r6]
 800abf4:	5963      	ldr	r3, [r4, r5]
 800abf6:	f7f8 fbd5 	bl	80033a4 <printf_sparse_metadata>
	if(far_active){
 800abfa:	4a4b      	ldr	r2, [pc, #300]	; (800ad28 <createSparseService+0x23c>)
 800abfc:	2350      	movs	r3, #80	; 0x50
 800abfe:	5cd3      	ldrb	r3, [r2, r3]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d147      	bne.n	800ac94 <createSparseService+0x1a8>
	return 1;
 800ac04:	2001      	movs	r0, #1
}
 800ac06:	b002      	add	sp, #8
 800ac08:	bc04      	pop	{r2}
 800ac0a:	4690      	mov	r8, r2
 800ac0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		far_active = 0;
 800ac0e:	4d46      	ldr	r5, [pc, #280]	; (800ad28 <createSparseService+0x23c>)
 800ac10:	2350      	movs	r3, #80	; 0x50
 800ac12:	2200      	movs	r2, #0
 800ac14:	54ea      	strb	r2, [r5, r3]
        DBG_PRINTLN("updating sparse config");
 800ac16:	4845      	ldr	r0, [pc, #276]	; (800ad2c <createSparseService+0x240>)
 800ac18:	f00a fd4c 	bl	80156b4 <__wrap_printf>
 800ac1c:	4844      	ldr	r0, [pc, #272]	; (800ad30 <createSparseService+0x244>)
 800ac1e:	f00a fd49 	bl	80156b4 <__wrap_printf>
 800ac22:	4a50      	ldr	r2, [pc, #320]	; (800ad64 <createSparseService+0x278>)
 800ac24:	4943      	ldr	r1, [pc, #268]	; (800ad34 <createSparseService+0x248>)
 800ac26:	4844      	ldr	r0, [pc, #272]	; (800ad38 <createSparseService+0x24c>)
 800ac28:	f00a fd44 	bl	80156b4 <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, len_reg);
 800ac2c:	b2b2      	uxth	r2, r6
 800ac2e:	b2a1      	uxth	r1, r4
 800ac30:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800ac32:	f7f8 fd4b 	bl	80036cc <updateSparseConfig>
 800ac36:	e7b6      	b.n	800aba6 <createSparseService+0xba>
		ERR_PRINTLN("sparse service creation failed (too long)");
 800ac38:	484b      	ldr	r0, [pc, #300]	; (800ad68 <createSparseService+0x27c>)
 800ac3a:	f00a fd3b 	bl	80156b4 <__wrap_printf>
 800ac3e:	484b      	ldr	r0, [pc, #300]	; (800ad6c <createSparseService+0x280>)
 800ac40:	f00a fd38 	bl	80156b4 <__wrap_printf>
 800ac44:	2294      	movs	r2, #148	; 0x94
 800ac46:	0092      	lsls	r2, r2, #2
 800ac48:	493a      	ldr	r1, [pc, #232]	; (800ad34 <createSparseService+0x248>)
 800ac4a:	483b      	ldr	r0, [pc, #236]	; (800ad38 <createSparseService+0x24c>)
 800ac4c:	f00a fd32 	bl	80156b4 <__wrap_printf>
		return 0;
 800ac50:	2000      	movs	r0, #0
 800ac52:	e7d8      	b.n	800ac06 <createSparseService+0x11a>
		ERR_PRINTLN("sparse service creation fail");
 800ac54:	4844      	ldr	r0, [pc, #272]	; (800ad68 <createSparseService+0x27c>)
 800ac56:	f00a fd2d 	bl	80156b4 <__wrap_printf>
 800ac5a:	4845      	ldr	r0, [pc, #276]	; (800ad70 <createSparseService+0x284>)
 800ac5c:	f00a fd2a 	bl	80156b4 <__wrap_printf>
 800ac60:	4a44      	ldr	r2, [pc, #272]	; (800ad74 <createSparseService+0x288>)
 800ac62:	4934      	ldr	r1, [pc, #208]	; (800ad34 <createSparseService+0x248>)
 800ac64:	4834      	ldr	r0, [pc, #208]	; (800ad38 <createSparseService+0x24c>)
 800ac66:	f00a fd25 	bl	80156b4 <__wrap_printf>
		return 0;
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	e7cb      	b.n	800ac06 <createSparseService+0x11a>
			if(sparse_data_malloc() == -1){
 800ac6e:	f7f8 fe4f 	bl	8003910 <sparse_data_malloc>
 800ac72:	1c43      	adds	r3, r0, #1
 800ac74:	d1a8      	bne.n	800abc8 <createSparseService+0xdc>
                DBG_PRINTLN("data buffer allocation failed");
 800ac76:	482d      	ldr	r0, [pc, #180]	; (800ad2c <createSparseService+0x240>)
 800ac78:	f00a fd1c 	bl	80156b4 <__wrap_printf>
 800ac7c:	483e      	ldr	r0, [pc, #248]	; (800ad78 <createSparseService+0x28c>)
 800ac7e:	f00a fd19 	bl	80156b4 <__wrap_printf>
 800ac82:	2297      	movs	r2, #151	; 0x97
 800ac84:	0092      	lsls	r2, r2, #2
 800ac86:	492b      	ldr	r1, [pc, #172]	; (800ad34 <createSparseService+0x248>)
 800ac88:	482b      	ldr	r0, [pc, #172]	; (800ad38 <createSparseService+0x24c>)
 800ac8a:	f00a fd13 	bl	80156b4 <__wrap_printf>
                stopService();
 800ac8e:	f7ff fe85 	bl	800a99c <stopService>
 800ac92:	e799      	b.n	800abc8 <createSparseService+0xdc>
	sparse_handle_far = acc_service_create(sparse_config_far);
 800ac94:	4b30      	ldr	r3, [pc, #192]	; (800ad58 <createSparseService+0x26c>)
 800ac96:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ac98:	f7f7 ff52 	bl	8002b40 <acc_service_create>
 800ac9c:	4b2f      	ldr	r3, [pc, #188]	; (800ad5c <createSparseService+0x270>)
 800ac9e:	6118      	str	r0, [r3, #16]
	if (sparse_handle_far == NULL){//handles error		
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d022      	beq.n	800acea <createSparseService+0x1fe>
		acc_service_sparse_get_metadata(sparse_handle_far, &sparse_metadata_far);
 800aca4:	4920      	ldr	r1, [pc, #128]	; (800ad28 <createSparseService+0x23c>)
 800aca6:	3114      	adds	r1, #20
 800aca8:	f7f6 fb53 	bl	8001352 <acc_service_sparse_get_metadata>
		if(sparse_data_malloc() == -1){
 800acac:	f7f8 fe30 	bl	8003910 <sparse_data_malloc>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d027      	beq.n	800ad04 <createSparseService+0x218>
		Reg_store_sparse_metadata(sparse_metadata, &sparse_metadata_far);
 800acb4:	4b2a      	ldr	r3, [pc, #168]	; (800ad60 <createSparseService+0x274>)
 800acb6:	4c1c      	ldr	r4, [pc, #112]	; (800ad28 <createSparseService+0x23c>)
 800acb8:	0022      	movs	r2, r4
 800acba:	3214      	adds	r2, #20
 800acbc:	9201      	str	r2, [sp, #4]
 800acbe:	228c      	movs	r2, #140	; 0x8c
 800acc0:	589a      	ldr	r2, [r3, r2]
 800acc2:	9200      	str	r2, [sp, #0]
 800acc4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800acc6:	2280      	movs	r2, #128	; 0x80
 800acc8:	5899      	ldr	r1, [r3, r2]
 800acca:	3204      	adds	r2, #4
 800accc:	589a      	ldr	r2, [r3, r2]
 800acce:	2588      	movs	r5, #136	; 0x88
 800acd0:	595b      	ldr	r3, [r3, r5]
 800acd2:	f7f8 febd 	bl	8003a50 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata_far);
 800acd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	6960      	ldr	r0, [r4, #20]
 800acdc:	69a1      	ldr	r1, [r4, #24]
 800acde:	69e2      	ldr	r2, [r4, #28]
 800ace0:	6a23      	ldr	r3, [r4, #32]
 800ace2:	f7f8 fb5f 	bl	80033a4 <printf_sparse_metadata>
	return 1;
 800ace6:	2001      	movs	r0, #1
 800ace8:	e78d      	b.n	800ac06 <createSparseService+0x11a>
		ERR_PRINTLN("sparse far service creation fail");
 800acea:	481f      	ldr	r0, [pc, #124]	; (800ad68 <createSparseService+0x27c>)
 800acec:	f00a fce2 	bl	80156b4 <__wrap_printf>
 800acf0:	4822      	ldr	r0, [pc, #136]	; (800ad7c <createSparseService+0x290>)
 800acf2:	f00a fcdf 	bl	80156b4 <__wrap_printf>
 800acf6:	4a22      	ldr	r2, [pc, #136]	; (800ad80 <createSparseService+0x294>)
 800acf8:	490e      	ldr	r1, [pc, #56]	; (800ad34 <createSparseService+0x248>)
 800acfa:	480f      	ldr	r0, [pc, #60]	; (800ad38 <createSparseService+0x24c>)
 800acfc:	f00a fcda 	bl	80156b4 <__wrap_printf>
		return 0;
 800ad00:	2000      	movs	r0, #0
 800ad02:	e780      	b.n	800ac06 <createSparseService+0x11a>
            DBG_PRINTLN("data buffer allocation failed");
 800ad04:	4809      	ldr	r0, [pc, #36]	; (800ad2c <createSparseService+0x240>)
 800ad06:	f00a fcd5 	bl	80156b4 <__wrap_printf>
 800ad0a:	481b      	ldr	r0, [pc, #108]	; (800ad78 <createSparseService+0x28c>)
 800ad0c:	f00a fcd2 	bl	80156b4 <__wrap_printf>
 800ad10:	4a1c      	ldr	r2, [pc, #112]	; (800ad84 <createSparseService+0x298>)
 800ad12:	4908      	ldr	r1, [pc, #32]	; (800ad34 <createSparseService+0x248>)
 800ad14:	4808      	ldr	r0, [pc, #32]	; (800ad38 <createSparseService+0x24c>)
 800ad16:	f00a fccd 	bl	80156b4 <__wrap_printf>
            stopService();
 800ad1a:	f7ff fe3f 	bl	800a99c <stopService>
 800ad1e:	e7c9      	b.n	800acb4 <createSparseService+0x1c8>
 800ad20:	00000762 	.word	0x00000762
 800ad24:	00000ee2 	.word	0x00000ee2
 800ad28:	2000018c 	.word	0x2000018c
 800ad2c:	0801dec0 	.word	0x0801dec0
 800ad30:	0801e1a8 	.word	0x0801e1a8
 800ad34:	0801dd88 	.word	0x0801dd88
 800ad38:	0801dd48 	.word	0x0801dd48
 800ad3c:	0801e1c0 	.word	0x0801e1c0
 800ad40:	0000024a 	.word	0x0000024a
 800ad44:	00000781 	.word	0x00000781
 800ad48:	fffff880 	.word	0xfffff880
 800ad4c:	0801e1dc 	.word	0x0801e1dc
 800ad50:	0801dfec 	.word	0x0801dfec
 800ad54:	0000024d 	.word	0x0000024d
 800ad58:	2000028c 	.word	0x2000028c
 800ad5c:	2000030c 	.word	0x2000030c
 800ad60:	2000010c 	.word	0x2000010c
 800ad64:	00000243 	.word	0x00000243
 800ad68:	0801dd10 	.word	0x0801dd10
 800ad6c:	0801e1e4 	.word	0x0801e1e4
 800ad70:	0801e210 	.word	0x0801e210
 800ad74:	00000256 	.word	0x00000256
 800ad78:	0801e230 	.word	0x0801e230
 800ad7c:	0801e250 	.word	0x0801e250
 800ad80:	0000026a 	.word	0x0000026a
 800ad84:	0000026f 	.word	0x0000026f

0800ad88 <createEnvelopeService>:
int8_t createEnvelopeService(void){
 800ad88:	b510      	push	{r4, lr}
    updateEnvelopeConfig(envelope_config);
 800ad8a:	4c1f      	ldr	r4, [pc, #124]	; (800ae08 <createEnvelopeService+0x80>)
 800ad8c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ad8e:	f7f8 fbf3 	bl	8003578 <updateEnvelopeConfig>
   	envelope_handle = acc_service_create(envelope_config);	
 800ad92:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ad94:	f7f7 fed4 	bl	8002b40 <acc_service_create>
 800ad98:	4b1c      	ldr	r3, [pc, #112]	; (800ae0c <createEnvelopeService+0x84>)
 800ad9a:	6598      	str	r0, [r3, #88]	; 0x58
	if (envelope_handle == NULL){//handles error
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d016      	beq.n	800adce <createEnvelopeService+0x46>
		acc_service_envelope_get_metadata(envelope_handle, &envelope_metadata);
 800ada0:	491b      	ldr	r1, [pc, #108]	; (800ae10 <createEnvelopeService+0x88>)
 800ada2:	3168      	adds	r1, #104	; 0x68
 800ada4:	f7f6 fbee 	bl	8001584 <acc_service_envelope_get_metadata>
        if(envelope_data_malloc() == -1){
 800ada8:	f7f8 fddc 	bl	8003964 <envelope_data_malloc>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	d01c      	beq.n	800adea <createEnvelopeService+0x62>
		Reg_store_envelope_metadata(envelope_metadata);
 800adb0:	4c17      	ldr	r4, [pc, #92]	; (800ae10 <createEnvelopeService+0x88>)
 800adb2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800adb4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800adb6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800adb8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800adba:	f7f8 fe0d 	bl	80039d8 <Reg_store_envelope_metadata>
		printf_envelope_metadata(envelope_metadata);
 800adbe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800adc0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800adc2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800adc4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800adc6:	f7f8 fa67 	bl	8003298 <printf_envelope_metadata>
	return 1;
 800adca:	2001      	movs	r0, #1
}
 800adcc:	bd10      	pop	{r4, pc}
		ERR_PRINTLN("envelope service creation failed");
 800adce:	4811      	ldr	r0, [pc, #68]	; (800ae14 <createEnvelopeService+0x8c>)
 800add0:	f00a fc70 	bl	80156b4 <__wrap_printf>
 800add4:	4810      	ldr	r0, [pc, #64]	; (800ae18 <createEnvelopeService+0x90>)
 800add6:	f00a fc6d 	bl	80156b4 <__wrap_printf>
 800adda:	228b      	movs	r2, #139	; 0x8b
 800addc:	0092      	lsls	r2, r2, #2
 800adde:	490f      	ldr	r1, [pc, #60]	; (800ae1c <createEnvelopeService+0x94>)
 800ade0:	480f      	ldr	r0, [pc, #60]	; (800ae20 <createEnvelopeService+0x98>)
 800ade2:	f00a fc67 	bl	80156b4 <__wrap_printf>
		return 0;
 800ade6:	2000      	movs	r0, #0
 800ade8:	e7f0      	b.n	800adcc <createEnvelopeService+0x44>
            DBG_PRINTLN("data buffer allocation failed");
 800adea:	480e      	ldr	r0, [pc, #56]	; (800ae24 <createEnvelopeService+0x9c>)
 800adec:	f00a fc62 	bl	80156b4 <__wrap_printf>
 800adf0:	480d      	ldr	r0, [pc, #52]	; (800ae28 <createEnvelopeService+0xa0>)
 800adf2:	f00a fc5f 	bl	80156b4 <__wrap_printf>
 800adf6:	4a0d      	ldr	r2, [pc, #52]	; (800ae2c <createEnvelopeService+0xa4>)
 800adf8:	4908      	ldr	r1, [pc, #32]	; (800ae1c <createEnvelopeService+0x94>)
 800adfa:	4809      	ldr	r0, [pc, #36]	; (800ae20 <createEnvelopeService+0x98>)
 800adfc:	f00a fc5a 	bl	80156b4 <__wrap_printf>
            stopService();
 800ae00:	f7ff fdcc 	bl	800a99c <stopService>
 800ae04:	e7d4      	b.n	800adb0 <createEnvelopeService+0x28>
 800ae06:	46c0      	nop			; (mov r8, r8)
 800ae08:	2000028c 	.word	0x2000028c
 800ae0c:	2000018c 	.word	0x2000018c
 800ae10:	2000010c 	.word	0x2000010c
 800ae14:	0801dd10 	.word	0x0801dd10
 800ae18:	0801e274 	.word	0x0801e274
 800ae1c:	0801dd88 	.word	0x0801dd88
 800ae20:	0801dd48 	.word	0x0801dd48
 800ae24:	0801dec0 	.word	0x0801dec0
 800ae28:	0801e230 	.word	0x0801e230
 800ae2c:	00000232 	.word	0x00000232

0800ae30 <createService>:
int8_t createService(void){
 800ae30:	b510      	push	{r4, lr}
    DBG_PRINTLN("creating service");
 800ae32:	4817      	ldr	r0, [pc, #92]	; (800ae90 <createService+0x60>)
 800ae34:	f00a fc3e 	bl	80156b4 <__wrap_printf>
 800ae38:	4816      	ldr	r0, [pc, #88]	; (800ae94 <createService+0x64>)
 800ae3a:	f00a fc3b 	bl	80156b4 <__wrap_printf>
 800ae3e:	4a16      	ldr	r2, [pc, #88]	; (800ae98 <createService+0x68>)
 800ae40:	4916      	ldr	r1, [pc, #88]	; (800ae9c <createService+0x6c>)
 800ae42:	4817      	ldr	r0, [pc, #92]	; (800aea0 <createService+0x70>)
 800ae44:	f00a fc36 	bl	80156b4 <__wrap_printf>
    uint32_t service_type = RegInt_getreg(0x02);
 800ae48:	2002      	movs	r0, #2
 800ae4a:	f7f6 ff25 	bl	8001c98 <RegInt_getreg>
    if(service_type == 0x02){success = createEnvelopeService();}
 800ae4e:	2802      	cmp	r0, #2
 800ae50:	d009      	beq.n	800ae66 <createService+0x36>
    else if(service_type == 0x04){success = createSparseService();}
 800ae52:	2804      	cmp	r0, #4
 800ae54:	d00b      	beq.n	800ae6e <createService+0x3e>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 800ae56:	2180      	movs	r1, #128	; 0x80
 800ae58:	02c9      	lsls	r1, r1, #11
 800ae5a:	2006      	movs	r0, #6
 800ae5c:	f7f8 fe3e 	bl	8003adc <Reg_regor>
 800ae60:	2400      	movs	r4, #0
}
 800ae62:	0020      	movs	r0, r4
 800ae64:	bd10      	pop	{r4, pc}
    if(service_type == 0x02){success = createEnvelopeService();}
 800ae66:	f7ff ff8f 	bl	800ad88 <createEnvelopeService>
 800ae6a:	0004      	movs	r4, r0
 800ae6c:	e002      	b.n	800ae74 <createService+0x44>
    else if(service_type == 0x04){success = createSparseService();}
 800ae6e:	f7ff fe3d 	bl	800aaec <createSparseService>
 800ae72:	0004      	movs	r4, r0
    if(success){
 800ae74:	2c00      	cmp	r4, #0
 800ae76:	d105      	bne.n	800ae84 <createService+0x54>
        Reg_regor(0x06, 0x00080000);
 800ae78:	2180      	movs	r1, #128	; 0x80
 800ae7a:	0309      	lsls	r1, r1, #12
 800ae7c:	2006      	movs	r0, #6
 800ae7e:	f7f8 fe2d 	bl	8003adc <Reg_regor>
 800ae82:	e7ee      	b.n	800ae62 <createService+0x32>
        Reg_regor(0x06, 0x00000001);
 800ae84:	2101      	movs	r1, #1
 800ae86:	2006      	movs	r0, #6
 800ae88:	f7f8 fe28 	bl	8003adc <Reg_regor>
        return 1;
 800ae8c:	2401      	movs	r4, #1
 800ae8e:	e7e8      	b.n	800ae62 <createService+0x32>
 800ae90:	0801dec0 	.word	0x0801dec0
 800ae94:	0801e298 	.word	0x0801e298
 800ae98:	00000211 	.word	0x00000211
 800ae9c:	0801dd88 	.word	0x0801dd88
 800aea0:	0801dd48 	.word	0x0801dd48

0800aea4 <sleepMCU>:
void sleepMCU(uint32_t mode){
 800aea4:	b570      	push	{r4, r5, r6, lr}
    if(mode == 0x00000000){return;}
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d006      	beq.n	800aeb8 <sleepMCU+0x14>
    if(mode == 0x00000001){    
 800aeaa:	2801      	cmp	r0, #1
 800aeac:	d005      	beq.n	800aeba <sleepMCU+0x16>
    RegInt_setregf(0x0A,0x00000000,1);
 800aeae:	2201      	movs	r2, #1
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	200a      	movs	r0, #10
 800aeb4:	f7f8 fd66 	bl	8003984 <RegInt_setregf>
}
 800aeb8:	bd70      	pop	{r4, r5, r6, pc}
        stopService();
 800aeba:	f7ff fd6f 	bl	800a99c <stopService>
        INF_PRINTLN("STM32 Sleep");
 800aebe:	4e17      	ldr	r6, [pc, #92]	; (800af1c <sleepMCU+0x78>)
 800aec0:	0030      	movs	r0, r6
 800aec2:	f00a fbf7 	bl	80156b4 <__wrap_printf>
 800aec6:	4816      	ldr	r0, [pc, #88]	; (800af20 <sleepMCU+0x7c>)
 800aec8:	f00a fbf4 	bl	80156b4 <__wrap_printf>
 800aecc:	2296      	movs	r2, #150	; 0x96
 800aece:	4d15      	ldr	r5, [pc, #84]	; (800af24 <sleepMCU+0x80>)
 800aed0:	4c15      	ldr	r4, [pc, #84]	; (800af28 <sleepMCU+0x84>)
 800aed2:	0052      	lsls	r2, r2, #1
 800aed4:	0029      	movs	r1, r5
 800aed6:	0020      	movs	r0, r4
 800aed8:	f00a fbec 	bl	80156b4 <__wrap_printf>
        HAL_SuspendTick();
 800aedc:	f002 fa20 	bl	800d320 <HAL_SuspendTick>
        HAL_PWR_DisableSleepOnExit();
 800aee0:	f002 fa8c 	bl	800d3fc <HAL_PWR_DisableSleepOnExit>
        HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 800aee4:	2080      	movs	r0, #128	; 0x80
 800aee6:	2102      	movs	r1, #2
 800aee8:	01c0      	lsls	r0, r0, #7
 800aeea:	f002 fa8f 	bl	800d40c <HAL_PWR_EnterSTOPMode>
        SystemClock_Config();
 800aeee:	f7f9 fd79 	bl	80049e4 <SystemClock_Config>
        HAL_ResumeTick();
 800aef2:	f002 fa0d 	bl	800d310 <HAL_ResumeTick>
        uint32_t baudrate = RegInt_getreg(0x07);
 800aef6:	2007      	movs	r0, #7
 800aef8:	f7f6 fece 	bl	8001c98 <RegInt_getreg>
        changeUART1baud(baudrate);
 800aefc:	f7f9 fcba 	bl	8004874 <changeUART1baud>
        INF_PRINTLN("STM32 Wake");
 800af00:	0030      	movs	r0, r6
 800af02:	f00a fbd7 	bl	80156b4 <__wrap_printf>
 800af06:	4809      	ldr	r0, [pc, #36]	; (800af2c <sleepMCU+0x88>)
 800af08:	f00a fbd4 	bl	80156b4 <__wrap_printf>
 800af0c:	2238      	movs	r2, #56	; 0x38
 800af0e:	32ff      	adds	r2, #255	; 0xff
 800af10:	0029      	movs	r1, r5
 800af12:	0020      	movs	r0, r4
 800af14:	f00a fbce 	bl	80156b4 <__wrap_printf>
 800af18:	e7c9      	b.n	800aeae <sleepMCU+0xa>
 800af1a:	46c0      	nop			; (mov r8, r8)
 800af1c:	0801dd78 	.word	0x0801dd78
 800af20:	0801e2ac 	.word	0x0801e2ac
 800af24:	0801dd88 	.word	0x0801dd88
 800af28:	0801dd48 	.word	0x0801dd48
 800af2c:	0801e2b8 	.word	0x0801e2b8

0800af30 <acc_service_activate>:
 800af30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af32:	46c6      	mov	lr, r8
 800af34:	b500      	push	{lr}
 800af36:	0004      	movs	r4, r0
 800af38:	f7ff fca2 	bl	800a880 <acc_service_handle_valid>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d10a      	bne.n	800af56 <acc_service_activate+0x26>
 800af40:	4b34      	ldr	r3, [pc, #208]	; (800b014 <acc_service_activate+0xe4>)
 800af42:	4a35      	ldr	r2, [pc, #212]	; (800b018 <acc_service_activate+0xe8>)
 800af44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af46:	4935      	ldr	r1, [pc, #212]	; (800b01c <acc_service_activate+0xec>)
 800af48:	2000      	movs	r0, #0
 800af4a:	4798      	blx	r3
 800af4c:	2600      	movs	r6, #0
 800af4e:	0030      	movs	r0, r6
 800af50:	bc04      	pop	{r2}
 800af52:	4690      	mov	r8, r2
 800af54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af56:	4b32      	ldr	r3, [pc, #200]	; (800b020 <acc_service_activate+0xf0>)
 800af58:	3371      	adds	r3, #113	; 0x71
 800af5a:	781e      	ldrb	r6, [r3, #0]
 800af5c:	2e00      	cmp	r6, #0
 800af5e:	d0ef      	beq.n	800af40 <acc_service_activate+0x10>
 800af60:	7a63      	ldrb	r3, [r4, #9]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d0f3      	beq.n	800af4e <acc_service_activate+0x1e>
 800af66:	6863      	ldr	r3, [r4, #4]
 800af68:	2b2a      	cmp	r3, #42	; 0x2a
 800af6a:	d8e9      	bhi.n	800af40 <acc_service_activate+0x10>
 800af6c:	4d2d      	ldr	r5, [pc, #180]	; (800b024 <acc_service_activate+0xf4>)
 800af6e:	0059      	lsls	r1, r3, #1
 800af70:	002a      	movs	r2, r5
 800af72:	3234      	adds	r2, #52	; 0x34
 800af74:	5c8f      	ldrb	r7, [r1, r2]
 800af76:	2f00      	cmp	r7, #0
 800af78:	d1e2      	bne.n	800af40 <acc_service_activate+0x10>
 800af7a:	2001      	movs	r0, #1
 800af7c:	5488      	strb	r0, [r1, r2]
 800af7e:	1852      	adds	r2, r2, r1
 800af80:	7852      	ldrb	r2, [r2, #1]
 800af82:	2a00      	cmp	r2, #0
 800af84:	d13c      	bne.n	800b000 <acc_service_activate+0xd0>
 800af86:	7e22      	ldrb	r2, [r4, #24]
 800af88:	2a02      	cmp	r2, #2
 800af8a:	d021      	beq.n	800afd0 <acc_service_activate+0xa0>
 800af8c:	2318      	movs	r3, #24
 800af8e:	4698      	mov	r8, r3
 800af90:	44a0      	add	r8, r4
 800af92:	4640      	mov	r0, r8
 800af94:	f7f5 fd72 	bl	8000a7c <acc_sensor_manager_power_on_and_start_sensor>
 800af98:	2800      	cmp	r0, #0
 800af9a:	d031      	beq.n	800b000 <acc_service_activate+0xd0>
 800af9c:	7ea3      	ldrb	r3, [r4, #26]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d020      	beq.n	800afe4 <acc_service_activate+0xb4>
 800afa2:	7e23      	ldrb	r3, [r4, #24]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d110      	bne.n	800afca <acc_service_activate+0x9a>
 800afa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800afaa:	2200      	movs	r2, #0
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	69e1      	ldr	r1, [r4, #28]
 800afb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800afb2:	4798      	blx	r3
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d023      	beq.n	800b000 <acc_service_activate+0xd0>
 800afb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800afba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	4798      	blx	r3
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d01d      	beq.n	800b000 <acc_service_activate+0xd0>
 800afc4:	4640      	mov	r0, r8
 800afc6:	f7f5 fce7 	bl	8000998 <acc_sensor_manager_hibernate_enter>
 800afca:	6863      	ldr	r3, [r4, #4]
 800afcc:	2b2a      	cmp	r3, #42	; 0x2a
 800afce:	d805      	bhi.n	800afdc <acc_service_activate+0xac>
 800afd0:	002a      	movs	r2, r5
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	3234      	adds	r2, #52	; 0x34
 800afd6:	18d3      	adds	r3, r2, r3
 800afd8:	2201      	movs	r2, #1
 800afda:	705a      	strb	r2, [r3, #1]
 800afdc:	2300      	movs	r3, #0
 800afde:	0037      	movs	r7, r6
 800afe0:	7263      	strb	r3, [r4, #9]
 800afe2:	e00d      	b.n	800b000 <acc_service_activate+0xd0>
 800afe4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800afe6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800afe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afea:	4798      	blx	r3
 800afec:	2800      	cmp	r0, #0
 800afee:	d007      	beq.n	800b000 <acc_service_activate+0xd0>
 800aff0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800aff2:	2200      	movs	r2, #0
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	69e1      	ldr	r1, [r4, #28]
 800aff8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800affa:	4798      	blx	r3
 800affc:	2800      	cmp	r0, #0
 800affe:	d1d0      	bne.n	800afa2 <acc_service_activate+0x72>
 800b000:	6863      	ldr	r3, [r4, #4]
 800b002:	2b2a      	cmp	r3, #42	; 0x2a
 800b004:	d803      	bhi.n	800b00e <acc_service_activate+0xde>
 800b006:	2200      	movs	r2, #0
 800b008:	3534      	adds	r5, #52	; 0x34
 800b00a:	005b      	lsls	r3, r3, #1
 800b00c:	555a      	strb	r2, [r3, r5]
 800b00e:	2f00      	cmp	r7, #0
 800b010:	d096      	beq.n	800af40 <acc_service_activate+0x10>
 800b012:	e79c      	b.n	800af4e <acc_service_activate+0x1e>
 800b014:	200004a8 	.word	0x200004a8
 800b018:	0801dcf5 	.word	0x0801dcf5
 800b01c:	0801d3b8 	.word	0x0801d3b8
 800b020:	2000020c 	.word	0x2000020c
 800b024:	2000028c 	.word	0x2000028c

0800b028 <sparseMeasure>:
void sparseMeasure(void){
 800b028:	b570      	push	{r4, r5, r6, lr}
	INF_PRINTLN("Start Sparse measurement");
 800b02a:	4846      	ldr	r0, [pc, #280]	; (800b144 <sparseMeasure+0x11c>)
 800b02c:	f00a fb42 	bl	80156b4 <__wrap_printf>
 800b030:	4845      	ldr	r0, [pc, #276]	; (800b148 <sparseMeasure+0x120>)
 800b032:	f00a fb3f 	bl	80156b4 <__wrap_printf>
 800b036:	22b4      	movs	r2, #180	; 0xb4
 800b038:	4e44      	ldr	r6, [pc, #272]	; (800b14c <sparseMeasure+0x124>)
 800b03a:	4d45      	ldr	r5, [pc, #276]	; (800b150 <sparseMeasure+0x128>)
 800b03c:	0092      	lsls	r2, r2, #2
 800b03e:	0031      	movs	r1, r6
 800b040:	0028      	movs	r0, r5
 800b042:	f00a fb37 	bl	80156b4 <__wrap_printf>
	acc_service_sparse_get_next_by_reference(sparse_handle, &sparse_data, &sparse_result_info);
 800b046:	4b43      	ldr	r3, [pc, #268]	; (800b154 <sparseMeasure+0x12c>)
 800b048:	001a      	movs	r2, r3
 800b04a:	3214      	adds	r2, #20
 800b04c:	4c42      	ldr	r4, [pc, #264]	; (800b158 <sparseMeasure+0x130>)
 800b04e:	0021      	movs	r1, r4
 800b050:	3110      	adds	r1, #16
 800b052:	68d8      	ldr	r0, [r3, #12]
 800b054:	f7f7 ffe2 	bl	800301c <acc_service_sparse_get_next_by_reference>
	filldata_sparse(0);
 800b058:	2000      	movs	r0, #0
 800b05a:	f7f6 ffa7 	bl	8001fac <filldata_sparse>
	DBG_PRINTLN("Sparse measurement complete");
 800b05e:	483f      	ldr	r0, [pc, #252]	; (800b15c <sparseMeasure+0x134>)
 800b060:	f00a fb28 	bl	80156b4 <__wrap_printf>
 800b064:	483e      	ldr	r0, [pc, #248]	; (800b160 <sparseMeasure+0x138>)
 800b066:	f00a fb25 	bl	80156b4 <__wrap_printf>
 800b06a:	22b5      	movs	r2, #181	; 0xb5
 800b06c:	0092      	lsls	r2, r2, #2
 800b06e:	0031      	movs	r1, r6
 800b070:	0028      	movs	r0, r5
 800b072:	f00a fb1f 	bl	80156b4 <__wrap_printf>
	if(far_active){
 800b076:	2350      	movs	r3, #80	; 0x50
 800b078:	5ce3      	ldrb	r3, [r4, r3]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d100      	bne.n	800b080 <sparseMeasure+0x58>
}
 800b07e:	bd70      	pop	{r4, r5, r6, pc}
		if(!acc_service_deactivate(sparse_handle)){
 800b080:	4b34      	ldr	r3, [pc, #208]	; (800b154 <sparseMeasure+0x12c>)
 800b082:	68d8      	ldr	r0, [r3, #12]
 800b084:	f7ff fc14 	bl	800a8b0 <acc_service_deactivate>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d028      	beq.n	800b0de <sparseMeasure+0xb6>
		if (!acc_service_activate(sparse_handle_far)){
 800b08c:	4b31      	ldr	r3, [pc, #196]	; (800b154 <sparseMeasure+0x12c>)
 800b08e:	6918      	ldr	r0, [r3, #16]
 800b090:	f7ff ff4e 	bl	800af30 <acc_service_activate>
 800b094:	2800      	cmp	r0, #0
 800b096:	d02f      	beq.n	800b0f8 <sparseMeasure+0xd0>
		acc_service_sparse_get_next_by_reference(sparse_handle_far, &sparse_data_far, &sparse_result_info_far);
 800b098:	4c2e      	ldr	r4, [pc, #184]	; (800b154 <sparseMeasure+0x12c>)
 800b09a:	0022      	movs	r2, r4
 800b09c:	3218      	adds	r2, #24
 800b09e:	492e      	ldr	r1, [pc, #184]	; (800b158 <sparseMeasure+0x130>)
 800b0a0:	3128      	adds	r1, #40	; 0x28
 800b0a2:	6920      	ldr	r0, [r4, #16]
 800b0a4:	f7f7 ffba 	bl	800301c <acc_service_sparse_get_next_by_reference>
		filldata_sparse(1);
 800b0a8:	2001      	movs	r0, #1
 800b0aa:	f7f6 ff7f 	bl	8001fac <filldata_sparse>
		if(!acc_service_deactivate(sparse_handle_far)){
 800b0ae:	6920      	ldr	r0, [r4, #16]
 800b0b0:	f7ff fbfe 	bl	800a8b0 <acc_service_deactivate>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d02c      	beq.n	800b112 <sparseMeasure+0xea>
		if (!acc_service_activate(sparse_handle)){
 800b0b8:	4b26      	ldr	r3, [pc, #152]	; (800b154 <sparseMeasure+0x12c>)
 800b0ba:	68d8      	ldr	r0, [r3, #12]
 800b0bc:	f7ff ff38 	bl	800af30 <acc_service_activate>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d032      	beq.n	800b12a <sparseMeasure+0x102>
		DBG_PRINTLN("Sparse Far measurement end");
 800b0c4:	4825      	ldr	r0, [pc, #148]	; (800b15c <sparseMeasure+0x134>)
 800b0c6:	f00a faf5 	bl	80156b4 <__wrap_printf>
 800b0ca:	4826      	ldr	r0, [pc, #152]	; (800b164 <sparseMeasure+0x13c>)
 800b0cc:	f00a faf2 	bl	80156b4 <__wrap_printf>
 800b0d0:	22bb      	movs	r2, #187	; 0xbb
 800b0d2:	0092      	lsls	r2, r2, #2
 800b0d4:	491d      	ldr	r1, [pc, #116]	; (800b14c <sparseMeasure+0x124>)
 800b0d6:	481e      	ldr	r0, [pc, #120]	; (800b150 <sparseMeasure+0x128>)
 800b0d8:	f00a faec 	bl	80156b4 <__wrap_printf>
 800b0dc:	e7cf      	b.n	800b07e <sparseMeasure+0x56>
			ERR_PRINTLN("acc_service_deactivate() for sparse failed");
 800b0de:	4822      	ldr	r0, [pc, #136]	; (800b168 <sparseMeasure+0x140>)
 800b0e0:	f00a fae8 	bl	80156b4 <__wrap_printf>
 800b0e4:	4821      	ldr	r0, [pc, #132]	; (800b16c <sparseMeasure+0x144>)
 800b0e6:	f00a fae5 	bl	80156b4 <__wrap_printf>
 800b0ea:	22b6      	movs	r2, #182	; 0xb6
 800b0ec:	0092      	lsls	r2, r2, #2
 800b0ee:	4917      	ldr	r1, [pc, #92]	; (800b14c <sparseMeasure+0x124>)
 800b0f0:	4817      	ldr	r0, [pc, #92]	; (800b150 <sparseMeasure+0x128>)
 800b0f2:	f00a fadf 	bl	80156b4 <__wrap_printf>
 800b0f6:	e7c9      	b.n	800b08c <sparseMeasure+0x64>
			ERR_PRINTLN("acc_service_activate() for sparse far failed");
 800b0f8:	481b      	ldr	r0, [pc, #108]	; (800b168 <sparseMeasure+0x140>)
 800b0fa:	f00a fadb 	bl	80156b4 <__wrap_printf>
 800b0fe:	481c      	ldr	r0, [pc, #112]	; (800b170 <sparseMeasure+0x148>)
 800b100:	f00a fad8 	bl	80156b4 <__wrap_printf>
 800b104:	22b7      	movs	r2, #183	; 0xb7
 800b106:	0092      	lsls	r2, r2, #2
 800b108:	4910      	ldr	r1, [pc, #64]	; (800b14c <sparseMeasure+0x124>)
 800b10a:	4811      	ldr	r0, [pc, #68]	; (800b150 <sparseMeasure+0x128>)
 800b10c:	f00a fad2 	bl	80156b4 <__wrap_printf>
 800b110:	e7c2      	b.n	800b098 <sparseMeasure+0x70>
			ERR_PRINTLN("acc_service_deactivate() for sparse far failed");
 800b112:	4815      	ldr	r0, [pc, #84]	; (800b168 <sparseMeasure+0x140>)
 800b114:	f00a face 	bl	80156b4 <__wrap_printf>
 800b118:	4816      	ldr	r0, [pc, #88]	; (800b174 <sparseMeasure+0x14c>)
 800b11a:	f00a facb 	bl	80156b4 <__wrap_printf>
 800b11e:	4a16      	ldr	r2, [pc, #88]	; (800b178 <sparseMeasure+0x150>)
 800b120:	490a      	ldr	r1, [pc, #40]	; (800b14c <sparseMeasure+0x124>)
 800b122:	480b      	ldr	r0, [pc, #44]	; (800b150 <sparseMeasure+0x128>)
 800b124:	f00a fac6 	bl	80156b4 <__wrap_printf>
 800b128:	e7c6      	b.n	800b0b8 <sparseMeasure+0x90>
			ERR_PRINTLN("acc_service_activate() for sparse failed");
 800b12a:	480f      	ldr	r0, [pc, #60]	; (800b168 <sparseMeasure+0x140>)
 800b12c:	f00a fac2 	bl	80156b4 <__wrap_printf>
 800b130:	4812      	ldr	r0, [pc, #72]	; (800b17c <sparseMeasure+0x154>)
 800b132:	f00a fabf 	bl	80156b4 <__wrap_printf>
 800b136:	22ba      	movs	r2, #186	; 0xba
 800b138:	0092      	lsls	r2, r2, #2
 800b13a:	4904      	ldr	r1, [pc, #16]	; (800b14c <sparseMeasure+0x124>)
 800b13c:	4804      	ldr	r0, [pc, #16]	; (800b150 <sparseMeasure+0x128>)
 800b13e:	f00a fab9 	bl	80156b4 <__wrap_printf>
 800b142:	e7bf      	b.n	800b0c4 <sparseMeasure+0x9c>
 800b144:	0801dd78 	.word	0x0801dd78
 800b148:	0801e2c4 	.word	0x0801e2c4
 800b14c:	0801dd88 	.word	0x0801dd88
 800b150:	0801dd48 	.word	0x0801dd48
 800b154:	2000030c 	.word	0x2000030c
 800b158:	2000018c 	.word	0x2000018c
 800b15c:	0801dec0 	.word	0x0801dec0
 800b160:	0801e2e0 	.word	0x0801e2e0
 800b164:	0801e3b4 	.word	0x0801e3b4
 800b168:	0801dd10 	.word	0x0801dd10
 800b16c:	0801e2fc 	.word	0x0801e2fc
 800b170:	0801e328 	.word	0x0801e328
 800b174:	0801e358 	.word	0x0801e358
 800b178:	000002e5 	.word	0x000002e5
 800b17c:	0801e388 	.word	0x0801e388

0800b180 <measure>:
void measure(void){
 800b180:	b510      	push	{r4, lr}
    uint32_t service_type = RegInt_getreg(0x02);
 800b182:	2002      	movs	r0, #2
 800b184:	f7f6 fd88 	bl	8001c98 <RegInt_getreg>
    if(service_type == 0x02){envelopeMeasure();}
 800b188:	2802      	cmp	r0, #2
 800b18a:	d002      	beq.n	800b192 <measure+0x12>
    else if(service_type == 0x04){sparseMeasure();}
 800b18c:	2804      	cmp	r0, #4
 800b18e:	d003      	beq.n	800b198 <measure+0x18>
}
 800b190:	bd10      	pop	{r4, pc}
    if(service_type == 0x02){envelopeMeasure();}
 800b192:	f7f8 f9b9 	bl	8003508 <envelopeMeasure>
 800b196:	e7fb      	b.n	800b190 <measure+0x10>
    else if(service_type == 0x04){sparseMeasure();}
 800b198:	f7ff ff46 	bl	800b028 <sparseMeasure>
 800b19c:	e7f8      	b.n	800b190 <measure+0x10>

0800b19e <activateService_handle>:
int8_t activateService_handle(acc_service_handle_t handle){
 800b19e:	b500      	push	{lr}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	9001      	str	r0, [sp, #4]
	if (!acc_service_activate(handle))
 800b1a4:	f7ff fec4 	bl	800af30 <acc_service_activate>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d11d      	bne.n	800b1e8 <activateService_handle+0x4a>
		ERR_PRINTLN("acc_service_activate() failed");
 800b1ac:	4815      	ldr	r0, [pc, #84]	; (800b204 <activateService_handle+0x66>)
 800b1ae:	f00a fa81 	bl	80156b4 <__wrap_printf>
 800b1b2:	4815      	ldr	r0, [pc, #84]	; (800b208 <activateService_handle+0x6a>)
 800b1b4:	f00a fa7e 	bl	80156b4 <__wrap_printf>
 800b1b8:	22a4      	movs	r2, #164	; 0xa4
 800b1ba:	0092      	lsls	r2, r2, #2
 800b1bc:	4913      	ldr	r1, [pc, #76]	; (800b20c <activateService_handle+0x6e>)
 800b1be:	4814      	ldr	r0, [pc, #80]	; (800b210 <activateService_handle+0x72>)
 800b1c0:	f00a fa78 	bl	80156b4 <__wrap_printf>
		acc_service_destroy(&handle);
 800b1c4:	a801      	add	r0, sp, #4
 800b1c6:	f7ff fbb9 	bl	800a93c <acc_service_destroy>
		data_free();
 800b1ca:	f7f6 fddf 	bl	8001d8c <data_free>
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 800b1ce:	4a11      	ldr	r2, [pc, #68]	; (800b214 <activateService_handle+0x76>)
 800b1d0:	2350      	movs	r3, #80	; 0x50
 800b1d2:	5cd3      	ldrb	r3, [r2, r3]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d101      	bne.n	800b1dc <activateService_handle+0x3e>
		return 0;
 800b1d8:	2000      	movs	r0, #0
 800b1da:	e011      	b.n	800b200 <activateService_handle+0x62>
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 800b1dc:	480e      	ldr	r0, [pc, #56]	; (800b218 <activateService_handle+0x7a>)
 800b1de:	3010      	adds	r0, #16
 800b1e0:	f7ff fbac 	bl	800a93c <acc_service_destroy>
		return 0;
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	e00b      	b.n	800b200 <activateService_handle+0x62>
		DBG_PRINTLN("service handle activated");
 800b1e8:	480c      	ldr	r0, [pc, #48]	; (800b21c <activateService_handle+0x7e>)
 800b1ea:	f00a fa63 	bl	80156b4 <__wrap_printf>
 800b1ee:	480c      	ldr	r0, [pc, #48]	; (800b220 <activateService_handle+0x82>)
 800b1f0:	f00a fa60 	bl	80156b4 <__wrap_printf>
 800b1f4:	4a0b      	ldr	r2, [pc, #44]	; (800b224 <activateService_handle+0x86>)
 800b1f6:	4905      	ldr	r1, [pc, #20]	; (800b20c <activateService_handle+0x6e>)
 800b1f8:	4805      	ldr	r0, [pc, #20]	; (800b210 <activateService_handle+0x72>)
 800b1fa:	f00a fa5b 	bl	80156b4 <__wrap_printf>
        return 1;
 800b1fe:	2001      	movs	r0, #1
}
 800b200:	b003      	add	sp, #12
 800b202:	bd00      	pop	{pc}
 800b204:	0801dd10 	.word	0x0801dd10
 800b208:	0801e3d0 	.word	0x0801e3d0
 800b20c:	0801dd88 	.word	0x0801dd88
 800b210:	0801dd48 	.word	0x0801dd48
 800b214:	2000018c 	.word	0x2000018c
 800b218:	2000030c 	.word	0x2000030c
 800b21c:	0801dec0 	.word	0x0801dec0
 800b220:	0801e3f0 	.word	0x0801e3f0
 800b224:	0000029a 	.word	0x0000029a

0800b228 <activateService>:
int8_t activateService(void){
 800b228:	b510      	push	{r4, lr}
    DBG_PRINTLN("activating service");
 800b22a:	4819      	ldr	r0, [pc, #100]	; (800b290 <activateService+0x68>)
 800b22c:	f00a fa42 	bl	80156b4 <__wrap_printf>
 800b230:	4818      	ldr	r0, [pc, #96]	; (800b294 <activateService+0x6c>)
 800b232:	f00a fa3f 	bl	80156b4 <__wrap_printf>
 800b236:	4a18      	ldr	r2, [pc, #96]	; (800b298 <activateService+0x70>)
 800b238:	4918      	ldr	r1, [pc, #96]	; (800b29c <activateService+0x74>)
 800b23a:	4819      	ldr	r0, [pc, #100]	; (800b2a0 <activateService+0x78>)
 800b23c:	f00a fa3a 	bl	80156b4 <__wrap_printf>
    uint32_t service_type = RegInt_getreg(0x02);
 800b240:	2002      	movs	r0, #2
 800b242:	f7f6 fd29 	bl	8001c98 <RegInt_getreg>
    if(service_type == 0x02){success = activateService_handle(envelope_handle);}
 800b246:	2802      	cmp	r0, #2
 800b248:	d009      	beq.n	800b25e <activateService+0x36>
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 800b24a:	2804      	cmp	r0, #4
 800b24c:	d00d      	beq.n	800b26a <activateService+0x42>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 800b24e:	2180      	movs	r1, #128	; 0x80
 800b250:	02c9      	lsls	r1, r1, #11
 800b252:	2006      	movs	r0, #6
 800b254:	f7f8 fc42 	bl	8003adc <Reg_regor>
 800b258:	2400      	movs	r4, #0
}
 800b25a:	0020      	movs	r0, r4
 800b25c:	bd10      	pop	{r4, pc}
    if(service_type == 0x02){success = activateService_handle(envelope_handle);}
 800b25e:	4b11      	ldr	r3, [pc, #68]	; (800b2a4 <activateService+0x7c>)
 800b260:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b262:	f7ff ff9c 	bl	800b19e <activateService_handle>
 800b266:	0004      	movs	r4, r0
 800b268:	e004      	b.n	800b274 <activateService+0x4c>
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 800b26a:	4b0f      	ldr	r3, [pc, #60]	; (800b2a8 <activateService+0x80>)
 800b26c:	68d8      	ldr	r0, [r3, #12]
 800b26e:	f7ff ff96 	bl	800b19e <activateService_handle>
 800b272:	0004      	movs	r4, r0
    if(success){
 800b274:	2c00      	cmp	r4, #0
 800b276:	d105      	bne.n	800b284 <activateService+0x5c>
        Reg_regor(0x06, 0x00100000);
 800b278:	2180      	movs	r1, #128	; 0x80
 800b27a:	0349      	lsls	r1, r1, #13
 800b27c:	2006      	movs	r0, #6
 800b27e:	f7f8 fc2d 	bl	8003adc <Reg_regor>
 800b282:	e7ea      	b.n	800b25a <activateService+0x32>
        Reg_regor(0x06, 0x00000002);
 800b284:	2102      	movs	r1, #2
 800b286:	2006      	movs	r0, #6
 800b288:	f7f8 fc28 	bl	8003adc <Reg_regor>
 800b28c:	e7e5      	b.n	800b25a <activateService+0x32>
 800b28e:	46c0      	nop			; (mov r8, r8)
 800b290:	0801dec0 	.word	0x0801dec0
 800b294:	0801e40c 	.word	0x0801e40c
 800b298:	0000027d 	.word	0x0000027d
 800b29c:	0801dd88 	.word	0x0801dd88
 800b2a0:	0801dd48 	.word	0x0801dd48
 800b2a4:	2000018c 	.word	0x2000018c
 800b2a8:	2000030c 	.word	0x2000030c

0800b2ac <rss_control>:
void rss_control(uint32_t val){
 800b2ac:	b510      	push	{r4, lr}
 800b2ae:	1e04      	subs	r4, r0, #0
	if (val == 0x00){stopService();}
 800b2b0:	d00c      	beq.n	800b2cc <rss_control+0x20>
	if (val == 0x01){createService();}
 800b2b2:	2c01      	cmp	r4, #1
 800b2b4:	d00d      	beq.n	800b2d2 <rss_control+0x26>
	if (val == 0x02){activateService();}
 800b2b6:	2c02      	cmp	r4, #2
 800b2b8:	d00e      	beq.n	800b2d8 <rss_control+0x2c>
	if (val == 0x03){
 800b2ba:	2c03      	cmp	r4, #3
 800b2bc:	d00f      	beq.n	800b2de <rss_control+0x32>
	if (val == 0x04){Reg_regand(0x06,0x000000FF);}//clear error bits
 800b2be:	2c04      	cmp	r4, #4
 800b2c0:	d014      	beq.n	800b2ec <rss_control+0x40>
	if (val == 0x05){measure();}
 800b2c2:	2c05      	cmp	r4, #5
 800b2c4:	d017      	beq.n	800b2f6 <rss_control+0x4a>
	if (val == 0x06){evalData();}
 800b2c6:	2c06      	cmp	r4, #6
 800b2c8:	d018      	beq.n	800b2fc <rss_control+0x50>
}
 800b2ca:	bd10      	pop	{r4, pc}
	if (val == 0x00){stopService();}
 800b2cc:	f7ff fb66 	bl	800a99c <stopService>
 800b2d0:	e7ef      	b.n	800b2b2 <rss_control+0x6>
	if (val == 0x01){createService();}
 800b2d2:	f7ff fdad 	bl	800ae30 <createService>
 800b2d6:	e7ee      	b.n	800b2b6 <rss_control+0xa>
	if (val == 0x02){activateService();}
 800b2d8:	f7ff ffa6 	bl	800b228 <activateService>
 800b2dc:	e7ed      	b.n	800b2ba <rss_control+0xe>
		if(createService()){activateService();}
 800b2de:	f7ff fda7 	bl	800ae30 <createService>
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	d0eb      	beq.n	800b2be <rss_control+0x12>
 800b2e6:	f7ff ff9f 	bl	800b228 <activateService>
 800b2ea:	e7e8      	b.n	800b2be <rss_control+0x12>
	if (val == 0x04){Reg_regand(0x06,0x000000FF);}//clear error bits
 800b2ec:	21ff      	movs	r1, #255	; 0xff
 800b2ee:	2006      	movs	r0, #6
 800b2f0:	f7f8 fc00 	bl	8003af4 <Reg_regand>
 800b2f4:	e7e5      	b.n	800b2c2 <rss_control+0x16>
	if (val == 0x05){measure();}
 800b2f6:	f7ff ff43 	bl	800b180 <measure>
 800b2fa:	e7e4      	b.n	800b2c6 <rss_control+0x1a>
	if (val == 0x06){evalData();}
 800b2fc:	f7f9 f922 	bl	8004544 <evalData>
 800b300:	e7e3      	b.n	800b2ca <rss_control+0x1e>

0800b302 <RegInt_regaction>:
void RegInt_regaction(uint8_t reg, uint32_t val){
 800b302:	b570      	push	{r4, r5, r6, lr}
 800b304:	0004      	movs	r4, r0
 800b306:	000d      	movs	r5, r1
	if(reg == 0x03){
 800b308:	2803      	cmp	r0, #3
 800b30a:	d004      	beq.n	800b316 <RegInt_regaction+0x14>
	if(reg == 0x07){
 800b30c:	2c07      	cmp	r4, #7
 800b30e:	d006      	beq.n	800b31e <RegInt_regaction+0x1c>
    if(reg == 0x0A){
 800b310:	2c0a      	cmp	r4, #10
 800b312:	d008      	beq.n	800b326 <RegInt_regaction+0x24>
}
 800b314:	bd70      	pop	{r4, r5, r6, pc}
		rss_control(val);
 800b316:	0008      	movs	r0, r1
 800b318:	f7ff ffc8 	bl	800b2ac <rss_control>
 800b31c:	e7f6      	b.n	800b30c <RegInt_regaction+0xa>
		changeUART1baud(val);
 800b31e:	0028      	movs	r0, r5
 800b320:	f7f9 faa8 	bl	8004874 <changeUART1baud>
 800b324:	e7f4      	b.n	800b310 <RegInt_regaction+0xe>
		sleepMCU(val);
 800b326:	0028      	movs	r0, r5
 800b328:	f7ff fdbc 	bl	800aea4 <sleepMCU>
 800b32c:	e7f2      	b.n	800b314 <RegInt_regaction+0x12>

0800b32e <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800b32e:	b510      	push	{r4, lr}
 800b330:	0004      	movs	r4, r0
	if (uart_state == 0){
 800b332:	4a21      	ldr	r2, [pc, #132]	; (800b3b8 <HAL_UART_RxCpltCallback+0x8a>)
 800b334:	2361      	movs	r3, #97	; 0x61
 800b336:	5cd3      	ldrb	r3, [r2, r3]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d115      	bne.n	800b368 <HAL_UART_RxCpltCallback+0x3a>
		if (uart_rx_buff[0] == 0xCC){
 800b33c:	3364      	adds	r3, #100	; 0x64
 800b33e:	5cd3      	ldrb	r3, [r2, r3]
 800b340:	2bcc      	cmp	r3, #204	; 0xcc
 800b342:	d005      	beq.n	800b350 <HAL_UART_RxCpltCallback+0x22>
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 800b344:	491c      	ldr	r1, [pc, #112]	; (800b3b8 <HAL_UART_RxCpltCallback+0x8a>)
 800b346:	2201      	movs	r2, #1
 800b348:	3164      	adds	r1, #100	; 0x64
 800b34a:	f001 faff 	bl	800c94c <HAL_UART_Receive_IT>
}
 800b34e:	bd10      	pop	{r4, pc}
			uart_state = 1;
 800b350:	0011      	movs	r1, r2
 800b352:	3b6b      	subs	r3, #107	; 0x6b
 800b354:	2201      	movs	r2, #1
 800b356:	54ca      	strb	r2, [r1, r3]
			cmd_length = 0;
 800b358:	4b18      	ldr	r3, [pc, #96]	; (800b3bc <HAL_UART_RxCpltCallback+0x8e>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	76da      	strb	r2, [r3, #27]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 2);
 800b35e:	3164      	adds	r1, #100	; 0x64
 800b360:	3202      	adds	r2, #2
 800b362:	f001 faf3 	bl	800c94c <HAL_UART_Receive_IT>
 800b366:	e7f2      	b.n	800b34e <HAL_UART_RxCpltCallback+0x20>
	}else if (uart_state == 1){
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d006      	beq.n	800b37a <HAL_UART_RxCpltCallback+0x4c>
	}else if (uart_state == 3){
 800b36c:	2b03      	cmp	r3, #3
 800b36e:	d1ee      	bne.n	800b34e <HAL_UART_RxCpltCallback+0x20>
		uart_state = 4;
 800b370:	4a11      	ldr	r2, [pc, #68]	; (800b3b8 <HAL_UART_RxCpltCallback+0x8a>)
 800b372:	335e      	adds	r3, #94	; 0x5e
 800b374:	2104      	movs	r1, #4
 800b376:	54d1      	strb	r1, [r2, r3]
 800b378:	e7e9      	b.n	800b34e <HAL_UART_RxCpltCallback+0x20>
		cmd_length = (uart_rx_buff[0]) | (uart_rx_buff[1] << 8);
 800b37a:	4a0f      	ldr	r2, [pc, #60]	; (800b3b8 <HAL_UART_RxCpltCallback+0x8a>)
 800b37c:	3363      	adds	r3, #99	; 0x63
 800b37e:	5cd3      	ldrb	r3, [r2, r3]
 800b380:	490e      	ldr	r1, [pc, #56]	; (800b3bc <HAL_UART_RxCpltCallback+0x8e>)
 800b382:	76cb      	strb	r3, [r1, #27]
		uart_state = 3;
 800b384:	2161      	movs	r1, #97	; 0x61
 800b386:	2003      	movs	r0, #3
 800b388:	5450      	strb	r0, [r2, r1]
		if (cmd_length +2 > UART_BUFF){
 800b38a:	3302      	adds	r3, #2
 800b38c:	2b40      	cmp	r3, #64	; 0x40
 800b38e:	dc08      	bgt.n	800b3a2 <HAL_UART_RxCpltCallback+0x74>
		HAL_UART_Receive_IT(huart, uart_rx_buff, 2 + cmd_length);
 800b390:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <HAL_UART_RxCpltCallback+0x8e>)
 800b392:	7eda      	ldrb	r2, [r3, #27]
 800b394:	3202      	adds	r2, #2
 800b396:	4908      	ldr	r1, [pc, #32]	; (800b3b8 <HAL_UART_RxCpltCallback+0x8a>)
 800b398:	3164      	adds	r1, #100	; 0x64
 800b39a:	0020      	movs	r0, r4
 800b39c:	f001 fad6 	bl	800c94c <HAL_UART_Receive_IT>
 800b3a0:	e7d5      	b.n	800b34e <HAL_UART_RxCpltCallback+0x20>
			uart_state = 0;
 800b3a2:	0011      	movs	r1, r2
 800b3a4:	2361      	movs	r3, #97	; 0x61
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	54ca      	strb	r2, [r1, r3]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 800b3aa:	3164      	adds	r1, #100	; 0x64
 800b3ac:	3201      	adds	r2, #1
 800b3ae:	0020      	movs	r0, r4
 800b3b0:	f001 facc 	bl	800c94c <HAL_UART_Receive_IT>
 800b3b4:	e7ec      	b.n	800b390 <HAL_UART_RxCpltCallback+0x62>
 800b3b6:	46c0      	nop			; (mov r8, r8)
 800b3b8:	2000018c 	.word	0x2000018c
 800b3bc:	2000030c 	.word	0x2000030c

0800b3c0 <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 800b3c0:	4770      	bx	lr

0800b3c2 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b3c2:	2280      	movs	r2, #128	; 0x80
 800b3c4:	4b01      	ldr	r3, [pc, #4]	; (800b3cc <SystemInit+0xa>)
 800b3c6:	0512      	lsls	r2, r2, #20
 800b3c8:	609a      	str	r2, [r3, #8]
#endif
}
 800b3ca:	4770      	bx	lr
 800b3cc:	e000ed00 	.word	0xe000ed00

0800b3d0 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void)
{
 800b3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3d2:	46c6      	mov	lr, r8
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3d4:	4c5d      	ldr	r4, [pc, #372]	; (800b54c <USART1_IRQHandler+0x17c>)
 800b3d6:	b500      	push	{lr}
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3dc:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3de:	6898      	ldr	r0, [r3, #8]
  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == 0U)
 800b3e0:	0715      	lsls	r5, r2, #28
 800b3e2:	d10e      	bne.n	800b402 <USART1_IRQHandler+0x32>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3e4:	2520      	movs	r5, #32
 800b3e6:	422a      	tst	r2, r5
 800b3e8:	d100      	bne.n	800b3ec <USART1_IRQHandler+0x1c>
 800b3ea:	e08a      	b.n	800b502 <USART1_IRQHandler+0x132>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3ec:	4229      	tst	r1, r5
 800b3ee:	d102      	bne.n	800b3f6 <USART1_IRQHandler+0x26>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3f0:	00c5      	lsls	r5, r0, #3
 800b3f2:	d400      	bmi.n	800b3f6 <USART1_IRQHandler+0x26>
 800b3f4:	e085      	b.n	800b502 <USART1_IRQHandler+0x132>
    {
      if (huart->RxISR != NULL)
 800b3f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d07d      	beq.n	800b4f8 <USART1_IRQHandler+0x128>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
  {
    if (huart->TxISR != NULL)
    {
      huart->TxISR(huart);
 800b3fc:	0020      	movs	r0, r4
 800b3fe:	4798      	blx	r3
 800b400:	e07a      	b.n	800b4f8 <USART1_IRQHandler+0x128>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b402:	4e53      	ldr	r6, [pc, #332]	; (800b550 <USART1_IRQHandler+0x180>)
 800b404:	4006      	ands	r6, r0
 800b406:	46b0      	mov	r8, r6
 800b408:	1e35      	subs	r5, r6, #0
 800b40a:	d104      	bne.n	800b416 <USART1_IRQHandler+0x46>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800b40c:	3521      	adds	r5, #33	; 0x21
 800b40e:	35ff      	adds	r5, #255	; 0xff
 800b410:	4229      	tst	r1, r5
 800b412:	d100      	bne.n	800b416 <USART1_IRQHandler+0x46>
 800b414:	e075      	b.n	800b502 <USART1_IRQHandler+0x132>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b416:	2501      	movs	r5, #1
 800b418:	422a      	tst	r2, r5
 800b41a:	d007      	beq.n	800b42c <USART1_IRQHandler+0x5c>
 800b41c:	05ce      	lsls	r6, r1, #23
 800b41e:	d505      	bpl.n	800b42c <USART1_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b420:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b422:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b424:	3788      	adds	r7, #136	; 0x88
 800b426:	683e      	ldr	r6, [r7, #0]
 800b428:	4335      	orrs	r5, r6
 800b42a:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b42c:	2502      	movs	r5, #2
 800b42e:	422a      	tst	r2, r5
 800b430:	d00a      	beq.n	800b448 <USART1_IRQHandler+0x78>
 800b432:	07c6      	lsls	r6, r0, #31
 800b434:	d508      	bpl.n	800b448 <USART1_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b436:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b438:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b43a:	3788      	adds	r7, #136	; 0x88
 800b43c:	683d      	ldr	r5, [r7, #0]
 800b43e:	46ac      	mov	ip, r5
 800b440:	2504      	movs	r5, #4
 800b442:	4666      	mov	r6, ip
 800b444:	4335      	orrs	r5, r6
 800b446:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b448:	2504      	movs	r5, #4
 800b44a:	422a      	tst	r2, r5
 800b44c:	d00a      	beq.n	800b464 <USART1_IRQHandler+0x94>
 800b44e:	07c6      	lsls	r6, r0, #31
 800b450:	d508      	bpl.n	800b464 <USART1_IRQHandler+0x94>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b452:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b454:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b456:	3788      	adds	r7, #136	; 0x88
 800b458:	683d      	ldr	r5, [r7, #0]
 800b45a:	46ac      	mov	ip, r5
 800b45c:	2502      	movs	r5, #2
 800b45e:	4666      	mov	r6, ip
 800b460:	4335      	orrs	r5, r6
 800b462:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b464:	0715      	lsls	r5, r2, #28
 800b466:	d50b      	bpl.n	800b480 <USART1_IRQHandler+0xb0>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b468:	068d      	lsls	r5, r1, #26
 800b46a:	d402      	bmi.n	800b472 <USART1_IRQHandler+0xa2>
 800b46c:	4645      	mov	r5, r8
 800b46e:	2d00      	cmp	r5, #0
 800b470:	d006      	beq.n	800b480 <USART1_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b472:	2508      	movs	r5, #8
 800b474:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b476:	0023      	movs	r3, r4
 800b478:	3388      	adds	r3, #136	; 0x88
 800b47a:	681e      	ldr	r6, [r3, #0]
 800b47c:	4335      	orrs	r5, r6
 800b47e:	601d      	str	r5, [r3, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b480:	0023      	movs	r3, r4
 800b482:	3388      	adds	r3, #136	; 0x88
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d036      	beq.n	800b4f8 <USART1_IRQHandler+0x128>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b48a:	2320      	movs	r3, #32
 800b48c:	421a      	tst	r2, r3
 800b48e:	d008      	beq.n	800b4a2 <USART1_IRQHandler+0xd2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b490:	4219      	tst	r1, r3
 800b492:	d101      	bne.n	800b498 <USART1_IRQHandler+0xc8>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b494:	00c3      	lsls	r3, r0, #3
 800b496:	d504      	bpl.n	800b4a2 <USART1_IRQHandler+0xd2>
        if (huart->RxISR != NULL)
 800b498:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <USART1_IRQHandler+0xd2>
          huart->RxISR(huart);
 800b49e:	0020      	movs	r0, r4
 800b4a0:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800b4a2:	0021      	movs	r1, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4a4:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800b4a6:	3188      	adds	r1, #136	; 0x88
 800b4a8:	680a      	ldr	r2, [r1, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4aa:	6898      	ldr	r0, [r3, #8]
 800b4ac:	0640      	lsls	r0, r0, #25
 800b4ae:	d402      	bmi.n	800b4b6 <USART1_IRQHandler+0xe6>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800b4b0:	2008      	movs	r0, #8
 800b4b2:	4002      	ands	r2, r0
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4b4:	d023      	beq.n	800b4fe <USART1_IRQHandler+0x12e>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	4926      	ldr	r1, [pc, #152]	; (800b554 <USART1_IRQHandler+0x184>)
 800b4ba:	400a      	ands	r2, r1
 800b4bc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4be:	689a      	ldr	r2, [r3, #8]
 800b4c0:	4925      	ldr	r1, [pc, #148]	; (800b558 <USART1_IRQHandler+0x188>)
 800b4c2:	400a      	ands	r2, r1
 800b4c4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4c6:	0022      	movs	r2, r4
 800b4c8:	2120      	movs	r1, #32
 800b4ca:	3208      	adds	r2, #8
 800b4cc:	67d1      	str	r1, [r2, #124]	; 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	1849      	adds	r1, r1, r1
 800b4d6:	420a      	tst	r2, r1
 800b4d8:	d00e      	beq.n	800b4f8 <USART1_IRQHandler+0x128>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4da:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800b4dc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4de:	438a      	bics	r2, r1
 800b4e0:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d008      	beq.n	800b4f8 <USART1_IRQHandler+0x128>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b4e6:	4b1d      	ldr	r3, [pc, #116]	; (800b55c <USART1_IRQHandler+0x18c>)
 800b4e8:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b4ea:	f002 f845 	bl	800d578 <HAL_DMA_Abort_IT>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d002      	beq.n	800b4f8 <USART1_IRQHandler+0x128>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b4f2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b4f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b4f6:	4798      	blx	r3
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 800b4f8:	bc04      	pop	{r2}
 800b4fa:	4690      	mov	r8, r2
 800b4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4fe:	600a      	str	r2, [r1, #0]
 800b500:	e7fa      	b.n	800b4f8 <USART1_IRQHandler+0x128>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b502:	2580      	movs	r5, #128	; 0x80
 800b504:	036d      	lsls	r5, r5, #13
 800b506:	422a      	tst	r2, r5
 800b508:	d003      	beq.n	800b512 <USART1_IRQHandler+0x142>
 800b50a:	0246      	lsls	r6, r0, #9
 800b50c:	d501      	bpl.n	800b512 <USART1_IRQHandler+0x142>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b50e:	621d      	str	r5, [r3, #32]
 800b510:	e7f2      	b.n	800b4f8 <USART1_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b512:	2580      	movs	r5, #128	; 0x80
 800b514:	422a      	tst	r2, r5
 800b516:	d008      	beq.n	800b52a <USART1_IRQHandler+0x15a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b518:	4229      	tst	r1, r5
 800b51a:	d101      	bne.n	800b520 <USART1_IRQHandler+0x150>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b51c:	0200      	lsls	r0, r0, #8
 800b51e:	d504      	bpl.n	800b52a <USART1_IRQHandler+0x15a>
    if (huart->TxISR != NULL)
 800b520:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b522:	2b00      	cmp	r3, #0
 800b524:	d000      	beq.n	800b528 <USART1_IRQHandler+0x158>
 800b526:	e769      	b.n	800b3fc <USART1_IRQHandler+0x2c>
 800b528:	e7e6      	b.n	800b4f8 <USART1_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b52a:	2040      	movs	r0, #64	; 0x40
 800b52c:	4202      	tst	r2, r0
 800b52e:	d0e3      	beq.n	800b4f8 <USART1_IRQHandler+0x128>
 800b530:	4201      	tst	r1, r0
 800b532:	d0e1      	beq.n	800b4f8 <USART1_IRQHandler+0x128>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	4382      	bics	r2, r0
 800b538:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b53a:	2220      	movs	r2, #32
 800b53c:	1d23      	adds	r3, r4, #4
 800b53e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b540:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b542:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800b544:	6723      	str	r3, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 800b546:	f7f9 f877 	bl	8004638 <HAL_UART_TxCpltCallback>
 800b54a:	e7d5      	b.n	800b4f8 <USART1_IRQHandler+0x128>
 800b54c:	20000400 	.word	0x20000400
 800b550:	10000001 	.word	0x10000001
 800b554:	fffffedf 	.word	0xfffffedf
 800b558:	effffffe 	.word	0xeffffffe
 800b55c:	0800bd8d 	.word	0x0800bd8d

0800b560 <I2C1_IRQHandler>:
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800b560:	22e0      	movs	r2, #224	; 0xe0
 800b562:	481f      	ldr	r0, [pc, #124]	; (800b5e0 <I2C1_IRQHandler+0x80>)
 800b564:	00d2      	lsls	r2, r2, #3
 800b566:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800b568:	b570      	push	{r4, r5, r6, lr}
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800b56a:	6999      	ldr	r1, [r3, #24]
 800b56c:	4211      	tst	r1, r2
 800b56e:	d02f      	beq.n	800b5d0 <I2C1_IRQHandler+0x70>
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b570:	699c      	ldr	r4, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b572:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b574:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b576:	05e5      	lsls	r5, r4, #23
 800b578:	d508      	bpl.n	800b58c <I2C1_IRQHandler+0x2c>
 800b57a:	09d5      	lsrs	r5, r2, #7
 800b57c:	420d      	tst	r5, r1
 800b57e:	d005      	beq.n	800b58c <I2C1_IRQHandler+0x2c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b580:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800b582:	4329      	orrs	r1, r5
 800b584:	6681      	str	r1, [r0, #104]	; 0x68

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b586:	2180      	movs	r1, #128	; 0x80
 800b588:	0049      	lsls	r1, r1, #1
 800b58a:	61d9      	str	r1, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b58c:	2101      	movs	r1, #1
 800b58e:	0565      	lsls	r5, r4, #21
 800b590:	d509      	bpl.n	800b5a6 <I2C1_IRQHandler+0x46>
 800b592:	09d5      	lsrs	r5, r2, #7
 800b594:	420d      	tst	r5, r1
 800b596:	d006      	beq.n	800b5a6 <I2C1_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b598:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800b59a:	3107      	adds	r1, #7
 800b59c:	4329      	orrs	r1, r5
 800b59e:	6681      	str	r1, [r0, #104]	; 0x68

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b5a0:	2180      	movs	r1, #128	; 0x80
 800b5a2:	00c9      	lsls	r1, r1, #3
 800b5a4:	61d9      	str	r1, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	05a4      	lsls	r4, r4, #22
 800b5aa:	d509      	bpl.n	800b5c0 <I2C1_IRQHandler+0x60>
 800b5ac:	09d2      	lsrs	r2, r2, #7
 800b5ae:	420a      	tst	r2, r1
 800b5b0:	d006      	beq.n	800b5c0 <I2C1_IRQHandler+0x60>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800b5b6:	430a      	orrs	r2, r1
 800b5b8:	6682      	str	r2, [r0, #104]	; 0x68

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b5ba:	2280      	movs	r2, #128	; 0x80
 800b5bc:	0092      	lsls	r2, r2, #2
 800b5be:	61da      	str	r2, [r3, #28]

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b5c0:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 800b5c2:	6e81      	ldr	r1, [r0, #104]	; 0x68
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b5c4:	4219      	tst	r1, r3
 800b5c6:	d002      	beq.n	800b5ce <I2C1_IRQHandler+0x6e>
  {
    I2C_ITError(hi2c, tmperror);
 800b5c8:	3024      	adds	r0, #36	; 0x24
 800b5ca:	f002 f813 	bl	800d5f4 <I2C_ITError.lto_priv.571>
}
 800b5ce:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b5d0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b5d2:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800b5d4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d0f9      	beq.n	800b5ce <I2C1_IRQHandler+0x6e>
    hi2c->XferISR(hi2c, itflags, itsources);
 800b5da:	3024      	adds	r0, #36	; 0x24
 800b5dc:	4798      	blx	r3
 800b5de:	e7f6      	b.n	800b5ce <I2C1_IRQHandler+0x6e>
 800b5e0:	2000020c 	.word	0x2000020c

0800b5e4 <DMA1_Channel2_3_IRQHandler>:
{
 800b5e4:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800b5e6:	4802      	ldr	r0, [pc, #8]	; (800b5f0 <DMA1_Channel2_3_IRQHandler+0xc>)
 800b5e8:	f001 ff70 	bl	800d4cc <HAL_DMA_IRQHandler>
}
 800b5ec:	bd10      	pop	{r4, pc}
 800b5ee:	46c0      	nop			; (mov r8, r8)
 800b5f0:	200005d0 	.word	0x200005d0

0800b5f4 <DMA1_Channel1_IRQHandler>:
{
 800b5f4:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800b5f6:	4802      	ldr	r0, [pc, #8]	; (800b600 <DMA1_Channel1_IRQHandler+0xc>)
 800b5f8:	f001 ff68 	bl	800d4cc <HAL_DMA_IRQHandler>
}
 800b5fc:	bd10      	pop	{r4, pc}
 800b5fe:	46c0      	nop			; (mov r8, r8)
 800b600:	20000574 	.word	0x20000574

0800b604 <EXTI4_15_IRQHandler>:
{
 800b604:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800b606:	2020      	movs	r0, #32
 800b608:	f002 fea8 	bl	800e35c <HAL_GPIO_EXTI_IRQHandler>
}
 800b60c:	bd10      	pop	{r4, pc}

0800b60e <EXTI2_3_IRQHandler>:
{
 800b60e:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800b610:	2008      	movs	r0, #8
 800b612:	f002 fea3 	bl	800e35c <HAL_GPIO_EXTI_IRQHandler>
}
 800b616:	bd10      	pop	{r4, pc}

0800b618 <RTC_TAMP_IRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800b618:	4a14      	ldr	r2, [pc, #80]	; (800b66c <RTC_TAMP_IRQHandler+0x54>)
{
 800b61a:	b510      	push	{r4, lr}
 800b61c:	6813      	ldr	r3, [r2, #0]
 800b61e:	6999      	ldr	r1, [r3, #24]
 800b620:	04c9      	lsls	r1, r1, #19
 800b622:	d508      	bpl.n	800b636 <RTC_TAMP_IRQHandler+0x1e>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800b624:	2101      	movs	r1, #1
 800b626:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b628:	4208      	tst	r0, r1
 800b62a:	d004      	beq.n	800b636 <RTC_TAMP_IRQHandler+0x1e>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b62c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800b62e:	4308      	orrs	r0, r1
 800b630:	65d8      	str	r0, [r3, #92]	; 0x5c
	rtc_alarm_triggered = true;
 800b632:	480f      	ldr	r0, [pc, #60]	; (800b670 <RTC_TAMP_IRQHandler+0x58>)
 800b634:	7701      	strb	r1, [r0, #28]
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800b636:	6999      	ldr	r1, [r3, #24]
 800b638:	0489      	lsls	r1, r1, #18
 800b63a:	d506      	bpl.n	800b64a <RTC_TAMP_IRQHandler+0x32>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800b63c:	2102      	movs	r1, #2
 800b63e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b640:	4208      	tst	r0, r1
 800b642:	d002      	beq.n	800b64a <RTC_TAMP_IRQHandler+0x32>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800b644:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800b646:	4301      	orrs	r1, r0
 800b648:	65d9      	str	r1, [r3, #92]	; 0x5c
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b64a:	0011      	movs	r1, r2
 800b64c:	2001      	movs	r0, #1
 800b64e:	3129      	adds	r1, #41	; 0x29
 800b650:	7008      	strb	r0, [r1, #0]
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800b652:	2104      	movs	r1, #4
 800b654:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800b656:	420c      	tst	r4, r1
 800b658:	d004      	beq.n	800b664 <RTC_TAMP_IRQHandler+0x4c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800b65a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800b65c:	4321      	orrs	r1, r4
 800b65e:	65d9      	str	r1, [r3, #92]	; 0x5c
	rtc_wakeup_triggered = true;
 800b660:	4b04      	ldr	r3, [pc, #16]	; (800b674 <RTC_TAMP_IRQHandler+0x5c>)
 800b662:	7018      	strb	r0, [r3, #0]
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b664:	2301      	movs	r3, #1
 800b666:	3229      	adds	r2, #41	; 0x29
 800b668:	7013      	strb	r3, [r2, #0]
}
 800b66a:	bd10      	pop	{r4, pc}
 800b66c:	20000548 	.word	0x20000548
 800b670:	2000030c 	.word	0x2000030c
 800b674:	20000544 	.word	0x20000544

0800b678 <SysTick_Handler>:
  uwTick += uwTickFreq;
 800b678:	4a02      	ldr	r2, [pc, #8]	; (800b684 <SysTick_Handler+0xc>)
 800b67a:	6813      	ldr	r3, [r2, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	6013      	str	r3, [r2, #0]
}
 800b680:	4770      	bx	lr
 800b682:	46c0      	nop			; (mov r8, r8)
 800b684:	2000048c 	.word	0x2000048c

0800b688 <PendSV_Handler>:
 800b688:	4770      	bx	lr

0800b68a <NMI_Handler>:
}
 800b68a:	4770      	bx	lr

0800b68c <SVC_Handler>:
 800b68c:	4770      	bx	lr

0800b68e <HardFault_Handler>:
{
 800b68e:	e7fe      	b.n	800b68e <HardFault_Handler>

0800b690 <RegInt_parsecmd>:
void RegInt_parsecmd(void){
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	46ce      	mov	lr, r9
 800b694:	4647      	mov	r7, r8
 800b696:	b580      	push	{r7, lr}
	if (uart_state != 4){return;}
 800b698:	4aa9      	ldr	r2, [pc, #676]	; (800b940 <RegInt_parsecmd+0x2b0>)
 800b69a:	2361      	movs	r3, #97	; 0x61
 800b69c:	5cd3      	ldrb	r3, [r2, r3]
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d003      	beq.n	800b6aa <RegInt_parsecmd+0x1a>
}
 800b6a2:	bc0c      	pop	{r2, r3}
 800b6a4:	4690      	mov	r8, r2
 800b6a6:	4699      	mov	r9, r3
 800b6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 800b6aa:	3360      	adds	r3, #96	; 0x60
 800b6ac:	5cd3      	ldrb	r3, [r2, r3]
 800b6ae:	2bf8      	cmp	r3, #248	; 0xf8
 800b6b0:	d00e      	beq.n	800b6d0 <RegInt_parsecmd+0x40>
	}else if (uart_rx_buff[0] == 0xF9 && cmd_length == 5){
 800b6b2:	2bf9      	cmp	r3, #249	; 0xf9
 800b6b4:	d03f      	beq.n	800b736 <RegInt_parsecmd+0xa6>
	}else if (uart_rx_buff[0] == 0xFA && ((uart_rx_buff[1] == 0xE8) || (uart_rx_buff[1] == 0xE9)) && cmd_length == 3){
 800b6b6:	2bfa      	cmp	r3, #250	; 0xfa
 800b6b8:	d100      	bne.n	800b6bc <RegInt_parsecmd+0x2c>
 800b6ba:	e08b      	b.n	800b7d4 <RegInt_parsecmd+0x144>
	uart_state = 0;
 800b6bc:	49a0      	ldr	r1, [pc, #640]	; (800b940 <RegInt_parsecmd+0x2b0>)
 800b6be:	2361      	movs	r3, #97	; 0x61
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	54ca      	strb	r2, [r1, r3]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 800b6c4:	3164      	adds	r1, #100	; 0x64
 800b6c6:	3201      	adds	r2, #1
 800b6c8:	489e      	ldr	r0, [pc, #632]	; (800b944 <RegInt_parsecmd+0x2b4>)
 800b6ca:	f001 f93f 	bl	800c94c <HAL_UART_Receive_IT>
 800b6ce:	e7e8      	b.n	800b6a2 <RegInt_parsecmd+0x12>
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 800b6d0:	4a9d      	ldr	r2, [pc, #628]	; (800b948 <RegInt_parsecmd+0x2b8>)
 800b6d2:	7ed2      	ldrb	r2, [r2, #27]
 800b6d4:	2a01      	cmp	r2, #1
 800b6d6:	d1ec      	bne.n	800b6b2 <RegInt_parsecmd+0x22>
		uint8_t reg = uart_rx_buff[1];
 800b6d8:	4b99      	ldr	r3, [pc, #612]	; (800b940 <RegInt_parsecmd+0x2b0>)
 800b6da:	3364      	adds	r3, #100	; 0x64
 800b6dc:	785f      	ldrb	r7, [r3, #1]
		uint32_t val = RegInt_getreg(reg);
 800b6de:	0038      	movs	r0, r7
 800b6e0:	f7f6 fada 	bl	8001c98 <RegInt_getreg>
 800b6e4:	0006      	movs	r6, r0
		uart_tx_buff[0] = 0xCC;
 800b6e6:	4d98      	ldr	r5, [pc, #608]	; (800b948 <RegInt_parsecmd+0x2b8>)
 800b6e8:	2320      	movs	r3, #32
 800b6ea:	22cc      	movs	r2, #204	; 0xcc
 800b6ec:	54ea      	strb	r2, [r5, r3]
		uart_tx_buff[1] = 0x05;
 800b6ee:	002c      	movs	r4, r5
 800b6f0:	3420      	adds	r4, #32
 800b6f2:	3b1b      	subs	r3, #27
 800b6f4:	7063      	strb	r3, [r4, #1]
		uart_tx_buff[2] = 0x00;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	70a3      	strb	r3, [r4, #2]
		uart_tx_buff[3] = 0xF6;
 800b6fa:	33f6      	adds	r3, #246	; 0xf6
 800b6fc:	70e3      	strb	r3, [r4, #3]
		uart_tx_buff[4] = reg;
 800b6fe:	7127      	strb	r7, [r4, #4]
		uart_tx_buff[5] = get_byte(val,0);
 800b700:	2100      	movs	r1, #0
 800b702:	f7f6 fa49 	bl	8001b98 <get_byte>
 800b706:	7160      	strb	r0, [r4, #5]
		uart_tx_buff[6] = get_byte(val,1);
 800b708:	2101      	movs	r1, #1
 800b70a:	0030      	movs	r0, r6
 800b70c:	f7f6 fa44 	bl	8001b98 <get_byte>
 800b710:	71a0      	strb	r0, [r4, #6]
		uart_tx_buff[7] = get_byte(val,2);
 800b712:	2102      	movs	r1, #2
 800b714:	0030      	movs	r0, r6
 800b716:	f7f6 fa3f 	bl	8001b98 <get_byte>
 800b71a:	71e0      	strb	r0, [r4, #7]
		uart_tx_buff[8] = get_byte(val,3);
 800b71c:	2103      	movs	r1, #3
 800b71e:	0030      	movs	r0, r6
 800b720:	f7f6 fa3a 	bl	8001b98 <get_byte>
 800b724:	7220      	strb	r0, [r4, #8]
		uart_tx_buff[9] = 0xCD;
 800b726:	23cd      	movs	r3, #205	; 0xcd
 800b728:	7263      	strb	r3, [r4, #9]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 800b72a:	0021      	movs	r1, r4
 800b72c:	220a      	movs	r2, #10
 800b72e:	4885      	ldr	r0, [pc, #532]	; (800b944 <RegInt_parsecmd+0x2b4>)
 800b730:	f001 f99a 	bl	800ca68 <HAL_UART_Transmit_IT>
 800b734:	e7c2      	b.n	800b6bc <RegInt_parsecmd+0x2c>
	}else if (uart_rx_buff[0] == 0xF9 && cmd_length == 5){
 800b736:	4a84      	ldr	r2, [pc, #528]	; (800b948 <RegInt_parsecmd+0x2b8>)
 800b738:	7ed2      	ldrb	r2, [r2, #27]
 800b73a:	2a05      	cmp	r2, #5
 800b73c:	d1bb      	bne.n	800b6b6 <RegInt_parsecmd+0x26>
		uint8_t reg = uart_rx_buff[1];
 800b73e:	4b80      	ldr	r3, [pc, #512]	; (800b940 <RegInt_parsecmd+0x2b0>)
 800b740:	3364      	adds	r3, #100	; 0x64
 800b742:	785d      	ldrb	r5, [r3, #1]
		for(uint8_t i = 0; i < 4; i++){
 800b744:	2300      	movs	r3, #0
		uint32_t val = 0;
 800b746:	2400      	movs	r4, #0
 800b748:	e00b      	b.n	800b762 <RegInt_parsecmd+0xd2>
			val |= uart_rx_buff[2+i] << (i%4)*8;
 800b74a:	1c99      	adds	r1, r3, #2
 800b74c:	4a7c      	ldr	r2, [pc, #496]	; (800b940 <RegInt_parsecmd+0x2b0>)
 800b74e:	1852      	adds	r2, r2, r1
 800b750:	2164      	movs	r1, #100	; 0x64
 800b752:	5c51      	ldrb	r1, [r2, r1]
 800b754:	2203      	movs	r2, #3
 800b756:	401a      	ands	r2, r3
 800b758:	00d2      	lsls	r2, r2, #3
 800b75a:	4091      	lsls	r1, r2
 800b75c:	430c      	orrs	r4, r1
		for(uint8_t i = 0; i < 4; i++){
 800b75e:	3301      	adds	r3, #1
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b03      	cmp	r3, #3
 800b764:	d9f1      	bls.n	800b74a <RegInt_parsecmd+0xba>
		if(RegInt_setreg(reg, val)){RegInt_regaction(reg, val);}
 800b766:	0021      	movs	r1, r4
 800b768:	0028      	movs	r0, r5
 800b76a:	f7f8 f9cf 	bl	8003b0c <RegInt_setreg>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d12b      	bne.n	800b7ca <RegInt_parsecmd+0x13a>
		val = RegInt_getreg(reg);
 800b772:	0028      	movs	r0, r5
 800b774:	f7f6 fa90 	bl	8001c98 <RegInt_getreg>
 800b778:	0007      	movs	r7, r0
		uart_tx_buff[0] = 0xCC;
 800b77a:	4e73      	ldr	r6, [pc, #460]	; (800b948 <RegInt_parsecmd+0x2b8>)
 800b77c:	2320      	movs	r3, #32
 800b77e:	22cc      	movs	r2, #204	; 0xcc
 800b780:	54f2      	strb	r2, [r6, r3]
		uart_tx_buff[1] = 0x05;
 800b782:	0034      	movs	r4, r6
 800b784:	3420      	adds	r4, #32
 800b786:	3b1b      	subs	r3, #27
 800b788:	7063      	strb	r3, [r4, #1]
		uart_tx_buff[2] = 0x00;
 800b78a:	2300      	movs	r3, #0
 800b78c:	70a3      	strb	r3, [r4, #2]
		uart_tx_buff[3] = 0xF5;
 800b78e:	33f5      	adds	r3, #245	; 0xf5
 800b790:	70e3      	strb	r3, [r4, #3]
		uart_tx_buff[4] = reg;
 800b792:	7125      	strb	r5, [r4, #4]
		uart_tx_buff[5] = get_byte(val,0);
 800b794:	2100      	movs	r1, #0
 800b796:	f7f6 f9ff 	bl	8001b98 <get_byte>
 800b79a:	7160      	strb	r0, [r4, #5]
		uart_tx_buff[6] = get_byte(val,1);
 800b79c:	2101      	movs	r1, #1
 800b79e:	0038      	movs	r0, r7
 800b7a0:	f7f6 f9fa 	bl	8001b98 <get_byte>
 800b7a4:	71a0      	strb	r0, [r4, #6]
		uart_tx_buff[7] = get_byte(val,2);
 800b7a6:	2102      	movs	r1, #2
 800b7a8:	0038      	movs	r0, r7
 800b7aa:	f7f6 f9f5 	bl	8001b98 <get_byte>
 800b7ae:	71e0      	strb	r0, [r4, #7]
		uart_tx_buff[8] = get_byte(val,3);
 800b7b0:	2103      	movs	r1, #3
 800b7b2:	0038      	movs	r0, r7
 800b7b4:	f7f6 f9f0 	bl	8001b98 <get_byte>
 800b7b8:	7220      	strb	r0, [r4, #8]
		uart_tx_buff[9] = 0xCD;
 800b7ba:	23cd      	movs	r3, #205	; 0xcd
 800b7bc:	7263      	strb	r3, [r4, #9]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 800b7be:	0021      	movs	r1, r4
 800b7c0:	220a      	movs	r2, #10
 800b7c2:	4860      	ldr	r0, [pc, #384]	; (800b944 <RegInt_parsecmd+0x2b4>)
 800b7c4:	f001 f950 	bl	800ca68 <HAL_UART_Transmit_IT>
 800b7c8:	e778      	b.n	800b6bc <RegInt_parsecmd+0x2c>
		if(RegInt_setreg(reg, val)){RegInt_regaction(reg, val);}
 800b7ca:	0021      	movs	r1, r4
 800b7cc:	0028      	movs	r0, r5
 800b7ce:	f7ff fd98 	bl	800b302 <RegInt_regaction>
 800b7d2:	e7ce      	b.n	800b772 <RegInt_parsecmd+0xe2>
	}else if (uart_rx_buff[0] == 0xFA && ((uart_rx_buff[1] == 0xE8) || (uart_rx_buff[1] == 0xE9)) && cmd_length == 3){
 800b7d4:	4b5a      	ldr	r3, [pc, #360]	; (800b940 <RegInt_parsecmd+0x2b0>)
 800b7d6:	3364      	adds	r3, #100	; 0x64
 800b7d8:	785a      	ldrb	r2, [r3, #1]
 800b7da:	0013      	movs	r3, r2
 800b7dc:	3318      	adds	r3, #24
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d900      	bls.n	800b7e6 <RegInt_parsecmd+0x156>
 800b7e4:	e76a      	b.n	800b6bc <RegInt_parsecmd+0x2c>
 800b7e6:	4b58      	ldr	r3, [pc, #352]	; (800b948 <RegInt_parsecmd+0x2b8>)
 800b7e8:	7edb      	ldrb	r3, [r3, #27]
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d000      	beq.n	800b7f0 <RegInt_parsecmd+0x160>
 800b7ee:	e765      	b.n	800b6bc <RegInt_parsecmd+0x2c>
		offst_l = uart_rx_buff[2];
 800b7f0:	4853      	ldr	r0, [pc, #332]	; (800b940 <RegInt_parsecmd+0x2b0>)
 800b7f2:	0003      	movs	r3, r0
 800b7f4:	3364      	adds	r3, #100	; 0x64
 800b7f6:	789c      	ldrb	r4, [r3, #2]
		offst_h = uart_rx_buff[3];
 800b7f8:	78d9      	ldrb	r1, [r3, #3]
		uint16_t offst = (offst_h << 8) | offst_l;
 800b7fa:	0209      	lsls	r1, r1, #8
 800b7fc:	4321      	orrs	r1, r4
 800b7fe:	4689      	mov	r9, r1
		bufflen = (sparse_metadata.data_length)*sizeof(uint16_t);
 800b800:	4b52      	ldr	r3, [pc, #328]	; (800b94c <RegInt_parsecmd+0x2bc>)
 800b802:	337c      	adds	r3, #124	; 0x7c
 800b804:	891b      	ldrh	r3, [r3, #8]
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	494f      	ldr	r1, [pc, #316]	; (800b948 <RegInt_parsecmd+0x2b8>)
 800b80a:	660b      	str	r3, [r1, #96]	; 0x60
		bufflen_far = (sparse_metadata_far.data_length)*sizeof(uint16_t);
 800b80c:	8b83      	ldrh	r3, [r0, #28]
 800b80e:	005b      	lsls	r3, r3, #1
 800b810:	664b      	str	r3, [r1, #100]	; 0x64
		if(uart_rx_buff[1] == 0xE8){
 800b812:	2ae8      	cmp	r2, #232	; 0xe8
 800b814:	d06f      	beq.n	800b8f6 <RegInt_parsecmd+0x266>
		datalen = 128*sizeof(uint16_t);
 800b816:	2780      	movs	r7, #128	; 0x80
 800b818:	007f      	lsls	r7, r7, #1
		uart_tx_buff[0] = 0xCC;
 800b81a:	4e4b      	ldr	r6, [pc, #300]	; (800b948 <RegInt_parsecmd+0x2b8>)
 800b81c:	2320      	movs	r3, #32
 800b81e:	22cc      	movs	r2, #204	; 0xcc
 800b820:	54f2      	strb	r2, [r6, r3]
		uart_tx_buff[1] = get_byte(datalen+1,0);
 800b822:	1c7c      	adds	r4, r7, #1
 800b824:	2100      	movs	r1, #0
 800b826:	0020      	movs	r0, r4
 800b828:	f7f6 f9b6 	bl	8001b98 <get_byte>
 800b82c:	0035      	movs	r5, r6
 800b82e:	3520      	adds	r5, #32
 800b830:	7068      	strb	r0, [r5, #1]
		uart_tx_buff[2] = get_byte(datalen+1,1);
 800b832:	2101      	movs	r1, #1
 800b834:	0020      	movs	r0, r4
 800b836:	f7f6 f9af 	bl	8001b98 <get_byte>
 800b83a:	70a8      	strb	r0, [r5, #2]
		uart_tx_buff[3] = 0xF7;
 800b83c:	23f7      	movs	r3, #247	; 0xf7
 800b83e:	70eb      	strb	r3, [r5, #3]
		uart_tx_buff[4] = uart_rx_buff[1];
 800b840:	4c3f      	ldr	r4, [pc, #252]	; (800b940 <RegInt_parsecmd+0x2b0>)
 800b842:	0023      	movs	r3, r4
 800b844:	3364      	adds	r3, #100	; 0x64
 800b846:	785b      	ldrb	r3, [r3, #1]
 800b848:	712b      	strb	r3, [r5, #4]
		DBG_PRINTLN("buffer transmitt");
 800b84a:	4841      	ldr	r0, [pc, #260]	; (800b950 <RegInt_parsecmd+0x2c0>)
 800b84c:	f009 ff32 	bl	80156b4 <__wrap_printf>
 800b850:	4840      	ldr	r0, [pc, #256]	; (800b954 <RegInt_parsecmd+0x2c4>)
 800b852:	f009 ff2f 	bl	80156b4 <__wrap_printf>
 800b856:	4d40      	ldr	r5, [pc, #256]	; (800b958 <RegInt_parsecmd+0x2c8>)
 800b858:	22c9      	movs	r2, #201	; 0xc9
 800b85a:	0029      	movs	r1, r5
 800b85c:	483f      	ldr	r0, [pc, #252]	; (800b95c <RegInt_parsecmd+0x2cc>)
 800b85e:	f009 ff29 	bl	80156b4 <__wrap_printf>
		DBG_PRINTINT(datalen);
 800b862:	483b      	ldr	r0, [pc, #236]	; (800b950 <RegInt_parsecmd+0x2c0>)
 800b864:	f009 ff26 	bl	80156b4 <__wrap_printf>
 800b868:	003a      	movs	r2, r7
 800b86a:	493d      	ldr	r1, [pc, #244]	; (800b960 <RegInt_parsecmd+0x2d0>)
 800b86c:	483d      	ldr	r0, [pc, #244]	; (800b964 <RegInt_parsecmd+0x2d4>)
 800b86e:	f009 ff21 	bl	80156b4 <__wrap_printf>
 800b872:	22ca      	movs	r2, #202	; 0xca
 800b874:	0029      	movs	r1, r5
 800b876:	4839      	ldr	r0, [pc, #228]	; (800b95c <RegInt_parsecmd+0x2cc>)
 800b878:	f009 ff1c 	bl	80156b4 <__wrap_printf>
		DBG_PRINTINT(bufflen);
 800b87c:	4834      	ldr	r0, [pc, #208]	; (800b950 <RegInt_parsecmd+0x2c0>)
 800b87e:	f009 ff19 	bl	80156b4 <__wrap_printf>
 800b882:	6e32      	ldr	r2, [r6, #96]	; 0x60
 800b884:	4938      	ldr	r1, [pc, #224]	; (800b968 <RegInt_parsecmd+0x2d8>)
 800b886:	4837      	ldr	r0, [pc, #220]	; (800b964 <RegInt_parsecmd+0x2d4>)
 800b888:	f009 ff14 	bl	80156b4 <__wrap_printf>
 800b88c:	22cb      	movs	r2, #203	; 0xcb
 800b88e:	0029      	movs	r1, r5
 800b890:	4832      	ldr	r0, [pc, #200]	; (800b95c <RegInt_parsecmd+0x2cc>)
 800b892:	f009 ff0f 	bl	80156b4 <__wrap_printf>
		DBG_PRINTINT(bufflen_far);
 800b896:	482e      	ldr	r0, [pc, #184]	; (800b950 <RegInt_parsecmd+0x2c0>)
 800b898:	f009 ff0c 	bl	80156b4 <__wrap_printf>
 800b89c:	6e72      	ldr	r2, [r6, #100]	; 0x64
 800b89e:	4933      	ldr	r1, [pc, #204]	; (800b96c <RegInt_parsecmd+0x2dc>)
 800b8a0:	4830      	ldr	r0, [pc, #192]	; (800b964 <RegInt_parsecmd+0x2d4>)
 800b8a2:	f009 ff07 	bl	80156b4 <__wrap_printf>
 800b8a6:	22cc      	movs	r2, #204	; 0xcc
 800b8a8:	0029      	movs	r1, r5
 800b8aa:	482c      	ldr	r0, [pc, #176]	; (800b95c <RegInt_parsecmd+0x2cc>)
 800b8ac:	f009 ff02 	bl	80156b4 <__wrap_printf>
		HAL_UART_Transmit(&huart1, uart_tx_buff, 5, 10);
 800b8b0:	0031      	movs	r1, r6
 800b8b2:	3120      	adds	r1, #32
 800b8b4:	230a      	movs	r3, #10
 800b8b6:	2205      	movs	r2, #5
 800b8b8:	4822      	ldr	r0, [pc, #136]	; (800b944 <RegInt_parsecmd+0x2b4>)
 800b8ba:	f001 f92f 	bl	800cb1c <HAL_UART_Transmit>
		queue_cmd_end = 1;
 800b8be:	2360      	movs	r3, #96	; 0x60
 800b8c0:	4698      	mov	r8, r3
 800b8c2:	3b5f      	subs	r3, #95	; 0x5f
 800b8c4:	4642      	mov	r2, r8
 800b8c6:	54a3      	strb	r3, [r4, r2]
		DBG_PRINTINT(queue_cmd_end);
 800b8c8:	4821      	ldr	r0, [pc, #132]	; (800b950 <RegInt_parsecmd+0x2c0>)
 800b8ca:	f009 fef3 	bl	80156b4 <__wrap_printf>
 800b8ce:	4643      	mov	r3, r8
 800b8d0:	5ce2      	ldrb	r2, [r4, r3]
 800b8d2:	4927      	ldr	r1, [pc, #156]	; (800b970 <RegInt_parsecmd+0x2e0>)
 800b8d4:	4823      	ldr	r0, [pc, #140]	; (800b964 <RegInt_parsecmd+0x2d4>)
 800b8d6:	f009 feed 	bl	80156b4 <__wrap_printf>
 800b8da:	22d0      	movs	r2, #208	; 0xd0
 800b8dc:	0029      	movs	r1, r5
 800b8de:	481f      	ldr	r0, [pc, #124]	; (800b95c <RegInt_parsecmd+0x2cc>)
 800b8e0:	f009 fee8 	bl	80156b4 <__wrap_printf>
		HAL_UART_Transmit_IT(&huart1, ((uint8_t*) *data + offst), datalen);
 800b8e4:	4b19      	ldr	r3, [pc, #100]	; (800b94c <RegInt_parsecmd+0x2bc>)
 800b8e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8e8:	6819      	ldr	r1, [r3, #0]
 800b8ea:	b2ba      	uxth	r2, r7
 800b8ec:	4449      	add	r1, r9
 800b8ee:	4815      	ldr	r0, [pc, #84]	; (800b944 <RegInt_parsecmd+0x2b4>)
 800b8f0:	f001 f8ba 	bl	800ca68 <HAL_UART_Transmit_IT>
 800b8f4:	e6e2      	b.n	800b6bc <RegInt_parsecmd+0x2c>
        DBG_PRINTINT(bins);
 800b8f6:	4f16      	ldr	r7, [pc, #88]	; (800b950 <RegInt_parsecmd+0x2c0>)
 800b8f8:	0038      	movs	r0, r7
 800b8fa:	f009 fedb 	bl	80156b4 <__wrap_printf>
 800b8fe:	4d13      	ldr	r5, [pc, #76]	; (800b94c <RegInt_parsecmd+0x2bc>)
 800b900:	2466      	movs	r4, #102	; 0x66
 800b902:	5b2a      	ldrh	r2, [r5, r4]
 800b904:	4e17      	ldr	r6, [pc, #92]	; (800b964 <RegInt_parsecmd+0x2d4>)
 800b906:	491b      	ldr	r1, [pc, #108]	; (800b974 <RegInt_parsecmd+0x2e4>)
 800b908:	0030      	movs	r0, r6
 800b90a:	f009 fed3 	bl	80156b4 <__wrap_printf>
 800b90e:	22bc      	movs	r2, #188	; 0xbc
 800b910:	4911      	ldr	r1, [pc, #68]	; (800b958 <RegInt_parsecmd+0x2c8>)
 800b912:	4812      	ldr	r0, [pc, #72]	; (800b95c <RegInt_parsecmd+0x2cc>)
 800b914:	f009 fece 	bl	80156b4 <__wrap_printf>
        DBG_PRINTINT(sweeps);
 800b918:	0038      	movs	r0, r7
 800b91a:	f009 fecb 	bl	80156b4 <__wrap_printf>
 800b91e:	2764      	movs	r7, #100	; 0x64
 800b920:	5bea      	ldrh	r2, [r5, r7]
 800b922:	4915      	ldr	r1, [pc, #84]	; (800b978 <RegInt_parsecmd+0x2e8>)
 800b924:	0030      	movs	r0, r6
 800b926:	f009 fec5 	bl	80156b4 <__wrap_printf>
 800b92a:	22bd      	movs	r2, #189	; 0xbd
 800b92c:	490a      	ldr	r1, [pc, #40]	; (800b958 <RegInt_parsecmd+0x2c8>)
 800b92e:	480b      	ldr	r0, [pc, #44]	; (800b95c <RegInt_parsecmd+0x2cc>)
 800b930:	f009 fec0 	bl	80156b4 <__wrap_printf>
		datalen = sweeps*bins*sizeof(uint16_t);
 800b934:	5bea      	ldrh	r2, [r5, r7]
 800b936:	5b2b      	ldrh	r3, [r5, r4]
 800b938:	4353      	muls	r3, r2
 800b93a:	005f      	lsls	r7, r3, #1
 800b93c:	e76d      	b.n	800b81a <RegInt_parsecmd+0x18a>
 800b93e:	46c0      	nop			; (mov r8, r8)
 800b940:	2000018c 	.word	0x2000018c
 800b944:	20000400 	.word	0x20000400
 800b948:	2000030c 	.word	0x2000030c
 800b94c:	2000010c 	.word	0x2000010c
 800b950:	0801dec0 	.word	0x0801dec0
 800b954:	0801e430 	.word	0x0801e430
 800b958:	0801dd88 	.word	0x0801dd88
 800b95c:	0801dd48 	.word	0x0801dd48
 800b960:	0801e444 	.word	0x0801e444
 800b964:	0801dfec 	.word	0x0801dfec
 800b968:	0801e44c 	.word	0x0801e44c
 800b96c:	0801e454 	.word	0x0801e454
 800b970:	0801e460 	.word	0x0801e460
 800b974:	0801e420 	.word	0x0801e420
 800b978:	0801e428 	.word	0x0801e428

0800b97c <main>:
{
 800b97c:	b510      	push	{r4, lr}
  HAL_Init();
 800b97e:	f001 fce5 	bl	800d34c <HAL_Init>
  SystemClock_Config();
 800b982:	f7f9 f82f 	bl	80049e4 <SystemClock_Config>
  MX_GPIO_Init();
 800b986:	f7f8 fe93 	bl	80046b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800b98a:	f7f8 fe73 	bl	8004674 <MX_DMA_Init>
  MX_I2C1_Init();
 800b98e:	f7f9 f805 	bl	800499c <MX_I2C1_Init>
  MX_RTC_Init();
 800b992:	f7f8 ffa5 	bl	80048e0 <MX_RTC_Init>
  MX_SPI1_Init();
 800b996:	f7f8 ff81 	bl	800489c <MX_SPI1_Init>
  MX_USART1_UART_Init(115200);
 800b99a:	20e1      	movs	r0, #225	; 0xe1
 800b99c:	0240      	lsls	r0, r0, #9
 800b99e:	f7f8 ff43 	bl	8004828 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b9a2:	f7f8 ff1b 	bl	80047dc <MX_USART2_UART_Init>
    EnableBootLoader();
 800b9a6:	f7f9 f865 	bl	8004a74 <EnableBootLoader>
    HAL_Delay(10);
 800b9aa:	200a      	movs	r0, #10
 800b9ac:	f001 fcc0 	bl	800d330 <HAL_Delay>
    RegInt_Init();
 800b9b0:	f7f8 fdd7 	bl	8004562 <RegInt_Init>
    initRSS();
 800b9b4:	f7fa fcb8 	bl	8006328 <initRSS>
        RegInt_parsecmd();
 800b9b8:	f7ff fe6a 	bl	800b690 <RegInt_parsecmd>
        HAL_SuspendTick(); //1.23947
 800b9bc:	f001 fcb0 	bl	800d320 <HAL_SuspendTick>
        HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 800b9c0:	2102      	movs	r1, #2
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	f001 fd46 	bl	800d454 <HAL_PWR_EnterSLEEPMode>
        HAL_ResumeTick();
 800b9c8:	f001 fca2 	bl	800d310 <HAL_ResumeTick>
 800b9cc:	e7f4      	b.n	800b9b8 <main+0x3c>
 800b9ce:	46c0      	nop			; (mov r8, r8)

0800b9d0 <HAL_GPIO_DeInit.constprop.88>:
        EXTI->IMR1 &= ~(iocurrent);
 800b9d0:	4937      	ldr	r1, [pc, #220]	; (800bab0 <HAL_GPIO_DeInit.constprop.88+0xe0>)
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800b9d2:	b5f0      	push	{r4, r5, r6, r7, lr}
        EXTI->IMR1 &= ~(iocurrent);
 800b9d4:	468c      	mov	ip, r1
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800b9d6:	4645      	mov	r5, r8
 800b9d8:	46de      	mov	lr, fp
 800b9da:	4657      	mov	r7, sl
 800b9dc:	464e      	mov	r6, r9
        EXTI->EMR1 &= ~(iocurrent);
 800b9de:	4935      	ldr	r1, [pc, #212]	; (800bab4 <HAL_GPIO_DeInit.constprop.88+0xe4>)
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b9e0:	22a0      	movs	r2, #160	; 0xa0
  uint32_t position = 0x00u;
 800b9e2:	2300      	movs	r3, #0
        EXTI->EMR1 &= ~(iocurrent);
 800b9e4:	4688      	mov	r8, r1
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800b9e6:	b5e0      	push	{r5, r6, r7, lr}
        EXTI->IMR1 &= ~(iocurrent);
 800b9e8:	4d33      	ldr	r5, [pc, #204]	; (800bab8 <HAL_GPIO_DeInit.constprop.88+0xe8>)
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b9ea:	05d2      	lsls	r2, r2, #23
  while ((GPIO_Pin >> position) != 0x00u)
 800b9ec:	0001      	movs	r1, r0
 800b9ee:	40d9      	lsrs	r1, r3
 800b9f0:	d105      	bne.n	800b9fe <HAL_GPIO_DeInit.constprop.88+0x2e>
}
 800b9f2:	bc3c      	pop	{r2, r3, r4, r5}
 800b9f4:	4690      	mov	r8, r2
 800b9f6:	4699      	mov	r9, r3
 800b9f8:	46a2      	mov	sl, r4
 800b9fa:	46ab      	mov	fp, r5
 800b9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800b9fe:	2101      	movs	r1, #1
 800ba00:	4099      	lsls	r1, r3
 800ba02:	000c      	movs	r4, r1
 800ba04:	4689      	mov	r9, r1
 800ba06:	4004      	ands	r4, r0
    if (iocurrent != 0x00u)
 800ba08:	d04f      	beq.n	800baaa <HAL_GPIO_DeInit.constprop.88+0xda>
 800ba0a:	4f2b      	ldr	r7, [pc, #172]	; (800bab8 <HAL_GPIO_DeInit.constprop.88+0xe8>)
      tmp = EXTI->EXTICR[position >> 2u];
 800ba0c:	0899      	lsrs	r1, r3, #2
 800ba0e:	46ba      	mov	sl, r7
 800ba10:	0089      	lsls	r1, r1, #2
 800ba12:	4451      	add	r1, sl
 800ba14:	6e0f      	ldr	r7, [r1, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800ba16:	2603      	movs	r6, #3
      tmp = EXTI->EXTICR[position >> 2u];
 800ba18:	46ba      	mov	sl, r7
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800ba1a:	001f      	movs	r7, r3
 800ba1c:	4037      	ands	r7, r6
 800ba1e:	40b7      	lsls	r7, r6
 800ba20:	46bb      	mov	fp, r7
 800ba22:	270f      	movs	r7, #15
 800ba24:	465e      	mov	r6, fp
 800ba26:	40b7      	lsls	r7, r6
 800ba28:	46bb      	mov	fp, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800ba2a:	003e      	movs	r6, r7
 800ba2c:	4657      	mov	r7, sl
 800ba2e:	423e      	tst	r6, r7
 800ba30:	d117      	bne.n	800ba62 <HAL_GPIO_DeInit.constprop.88+0x92>
        EXTI->IMR1 &= ~(iocurrent);
 800ba32:	4666      	mov	r6, ip
 800ba34:	6ff6      	ldr	r6, [r6, #124]	; 0x7c
 800ba36:	43e4      	mvns	r4, r4
 800ba38:	0037      	movs	r7, r6
 800ba3a:	4666      	mov	r6, ip
 800ba3c:	4027      	ands	r7, r4
 800ba3e:	67f7      	str	r7, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 800ba40:	4646      	mov	r6, r8
 800ba42:	6ff6      	ldr	r6, [r6, #124]	; 0x7c
 800ba44:	0037      	movs	r7, r6
 800ba46:	4646      	mov	r6, r8
 800ba48:	4027      	ands	r7, r4
 800ba4a:	67f7      	str	r7, [r6, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 800ba4c:	682e      	ldr	r6, [r5, #0]
 800ba4e:	0037      	movs	r7, r6
 800ba50:	4027      	ands	r7, r4
 800ba52:	602f      	str	r7, [r5, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800ba54:	686e      	ldr	r6, [r5, #4]
 800ba56:	4034      	ands	r4, r6
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800ba58:	465e      	mov	r6, fp
        EXTI->FTSR1 &= ~(iocurrent);
 800ba5a:	606c      	str	r4, [r5, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800ba5c:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 800ba5e:	43b4      	bics	r4, r6
 800ba60:	660c      	str	r4, [r1, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800ba62:	2703      	movs	r7, #3
 800ba64:	26a0      	movs	r6, #160	; 0xa0
 800ba66:	005c      	lsls	r4, r3, #1
 800ba68:	40a7      	lsls	r7, r4
 800ba6a:	05f6      	lsls	r6, r6, #23
 800ba6c:	6811      	ldr	r1, [r2, #0]
 800ba6e:	46b2      	mov	sl, r6
 800ba70:	4339      	orrs	r1, r7
 800ba72:	003c      	movs	r4, r7
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800ba74:	2707      	movs	r7, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800ba76:	6011      	str	r1, [r2, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800ba78:	08d9      	lsrs	r1, r3, #3
 800ba7a:	0089      	lsls	r1, r1, #2
 800ba7c:	4451      	add	r1, sl
 800ba7e:	6a0e      	ldr	r6, [r1, #32]
 800ba80:	401f      	ands	r7, r3
 800ba82:	46b2      	mov	sl, r6
 800ba84:	00be      	lsls	r6, r7, #2
 800ba86:	270f      	movs	r7, #15
 800ba88:	40b7      	lsls	r7, r6
 800ba8a:	46bb      	mov	fp, r7
 800ba8c:	4657      	mov	r7, sl
 800ba8e:	465e      	mov	r6, fp
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ba90:	43e4      	mvns	r4, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800ba92:	43b7      	bics	r7, r6
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ba94:	464e      	mov	r6, r9
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800ba96:	620f      	str	r7, [r1, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ba98:	6891      	ldr	r1, [r2, #8]
 800ba9a:	4021      	ands	r1, r4
 800ba9c:	6091      	str	r1, [r2, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ba9e:	6851      	ldr	r1, [r2, #4]
 800baa0:	43b1      	bics	r1, r6
 800baa2:	6051      	str	r1, [r2, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800baa4:	68d1      	ldr	r1, [r2, #12]
 800baa6:	400c      	ands	r4, r1
 800baa8:	60d4      	str	r4, [r2, #12]
    position++;
 800baaa:	3301      	adds	r3, #1
 800baac:	e79e      	b.n	800b9ec <HAL_GPIO_DeInit.constprop.88+0x1c>
 800baae:	46c0      	nop			; (mov r8, r8)
 800bab0:	40021804 	.word	0x40021804
 800bab4:	40021808 	.word	0x40021808
 800bab8:	40021800 	.word	0x40021800

0800babc <UART_WaitOnFlagUntilTimeout.constprop.69>:
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800babc:	b570      	push	{r4, r5, r6, lr}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800babe:	6804      	ldr	r4, [r0, #0]
  return uwTick;
 800bac0:	4e11      	ldr	r6, [pc, #68]	; (800bb08 <UART_WaitOnFlagUntilTimeout.constprop.69+0x4c>)
 800bac2:	69e5      	ldr	r5, [r4, #28]
 800bac4:	400d      	ands	r5, r1
 800bac6:	42a9      	cmp	r1, r5
 800bac8:	d101      	bne.n	800bace <UART_WaitOnFlagUntilTimeout.constprop.69+0x12>
  return HAL_OK;
 800baca:	2000      	movs	r0, #0
 800bacc:	e017      	b.n	800bafe <UART_WaitOnFlagUntilTimeout.constprop.69+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800bace:	1c5d      	adds	r5, r3, #1
 800bad0:	d0f7      	beq.n	800bac2 <UART_WaitOnFlagUntilTimeout.constprop.69+0x6>
 800bad2:	6835      	ldr	r5, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bad4:	1aad      	subs	r5, r5, r2
 800bad6:	42ab      	cmp	r3, r5
 800bad8:	d212      	bcs.n	800bb00 <UART_WaitOnFlagUntilTimeout.constprop.69+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	4a0b      	ldr	r2, [pc, #44]	; (800bb0c <UART_WaitOnFlagUntilTimeout.constprop.69+0x50>)
 800bade:	4013      	ands	r3, r2
 800bae0:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bae2:	68a3      	ldr	r3, [r4, #8]
 800bae4:	32a3      	adds	r2, #163	; 0xa3
 800bae6:	32ff      	adds	r2, #255	; 0xff
 800bae8:	4393      	bics	r3, r2
 800baea:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 800baec:	2320      	movs	r3, #32
 800baee:	1d02      	adds	r2, r0, #4
 800baf0:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800baf2:	3204      	adds	r2, #4
 800baf4:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800baf6:	2300      	movs	r3, #0
 800baf8:	307c      	adds	r0, #124	; 0x7c
 800bafa:	7003      	strb	r3, [r0, #0]
 800bafc:	2003      	movs	r0, #3
}
 800bafe:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1de      	bne.n	800bac2 <UART_WaitOnFlagUntilTimeout.constprop.69+0x6>
 800bb04:	e7e9      	b.n	800bada <UART_WaitOnFlagUntilTimeout.constprop.69+0x1e>
 800bb06:	46c0      	nop			; (mov r8, r8)
 800bb08:	2000048c 	.word	0x2000048c
 800bb0c:	fffffe5f 	.word	0xfffffe5f

0800bb10 <FLASH_WaitForLastOperation.constprop.67>:
  uint32_t error;
  uint32_t eccerr;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800bb10:	23fa      	movs	r3, #250	; 0xfa
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	469c      	mov	ip, r3

  /* Wait if any operation is ongoing */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800bb16:	4b18      	ldr	r3, [pc, #96]	; (800bb78 <FLASH_WaitForLastOperation.constprop.67+0x68>)
 800bb18:	2080      	movs	r0, #128	; 0x80
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 800bb1a:	b530      	push	{r4, r5, lr}
 800bb1c:	001c      	movs	r4, r3
 800bb1e:	4917      	ldr	r1, [pc, #92]	; (800bb7c <FLASH_WaitForLastOperation.constprop.67+0x6c>)
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800bb20:	0240      	lsls	r0, r0, #9
 800bb22:	680a      	ldr	r2, [r1, #0]
  uint32_t timeout = HAL_GetTick() + Timeout;
 800bb24:	4462      	add	r2, ip
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800bb26:	691d      	ldr	r5, [r3, #16]
 800bb28:	4205      	tst	r5, r0
 800bb2a:	d110      	bne.n	800bb4e <FLASH_WaitForLastOperation.constprop.67+0x3e>

  /* Clear SR register */
  FLASH->SR = FLASH_FLAG_SR_CLEAR;

  /* Update error with ECC error value */
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800bb2c:	2580      	movs	r5, #128	; 0x80
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 800bb2e:	691a      	ldr	r2, [r3, #16]
 800bb30:	4813      	ldr	r0, [pc, #76]	; (800bb80 <FLASH_WaitForLastOperation.constprop.67+0x70>)
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800bb32:	05ed      	lsls	r5, r5, #23
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 800bb34:	4002      	ands	r2, r0
  FLASH->SR = FLASH_FLAG_SR_CLEAR;
 800bb36:	4813      	ldr	r0, [pc, #76]	; (800bb84 <FLASH_WaitForLastOperation.constprop.67+0x74>)
 800bb38:	6118      	str	r0, [r3, #16]
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800bb3a:	6998      	ldr	r0, [r3, #24]
 800bb3c:	4028      	ands	r0, r5

  if(eccerr != 0x00u)
 800bb3e:	d00b      	beq.n	800bb58 <FLASH_WaitForLastOperation.constprop.67+0x48>
  {
    FLASH->ECCR |= eccerr;
 800bb40:	699c      	ldr	r4, [r3, #24]
    error |= eccerr;
 800bb42:	4302      	orrs	r2, r0
    FLASH->ECCR |= eccerr;
 800bb44:	4304      	orrs	r4, r0
 800bb46:	619c      	str	r4, [r3, #24]
  }

  if (error != 0x00U)
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800bb48:	608a      	str	r2, [r1, #8]

    return HAL_ERROR;
 800bb4a:	2001      	movs	r0, #1
 800bb4c:	e003      	b.n	800bb56 <FLASH_WaitForLastOperation.constprop.67+0x46>
 800bb4e:	680d      	ldr	r5, [r1, #0]
    if (HAL_GetTick() >= timeout)
 800bb50:	42aa      	cmp	r2, r5
 800bb52:	d8e8      	bhi.n	800bb26 <FLASH_WaitForLastOperation.constprop.67+0x16>
      return HAL_TIMEOUT;
 800bb54:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 800bb56:	bd30      	pop	{r4, r5, pc}
  if (error != 0x00U)
 800bb58:	2a00      	cmp	r2, #0
 800bb5a:	d1f5      	bne.n	800bb48 <FLASH_WaitForLastOperation.constprop.67+0x38>
  timeout = HAL_GetTick() + Timeout;
 800bb5c:	22fa      	movs	r2, #250	; 0xfa
 800bb5e:	0092      	lsls	r2, r2, #2
 800bb60:	4694      	mov	ip, r2
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800bb62:	2280      	movs	r2, #128	; 0x80
 800bb64:	680b      	ldr	r3, [r1, #0]
 800bb66:	02d2      	lsls	r2, r2, #11
  timeout = HAL_GetTick() + Timeout;
 800bb68:	4463      	add	r3, ip
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800bb6a:	6920      	ldr	r0, [r4, #16]
 800bb6c:	4010      	ands	r0, r2
 800bb6e:	d0f2      	beq.n	800bb56 <FLASH_WaitForLastOperation.constprop.67+0x46>
 800bb70:	6808      	ldr	r0, [r1, #0]
    if (HAL_GetTick() >= timeout)
 800bb72:	4283      	cmp	r3, r0
 800bb74:	d8f9      	bhi.n	800bb6a <FLASH_WaitForLastOperation.constprop.67+0x5a>
 800bb76:	e7ed      	b.n	800bb54 <FLASH_WaitForLastOperation.constprop.67+0x44>
 800bb78:	40022000 	.word	0x40022000
 800bb7c:	2000048c 	.word	0x2000048c
 800bb80:	0000c3fa 	.word	0x0000c3fa
 800bb84:	0000c3fb 	.word	0x0000c3fb

0800bb88 <acc_utils_transfer_buffer_to_uint32.constprop.24>:
 800bb88:	8803      	ldrh	r3, [r0, #0]
 800bb8a:	8842      	ldrh	r2, [r0, #2]
 800bb8c:	041b      	lsls	r3, r3, #16
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	600b      	str	r3, [r1, #0]
 800bb92:	4770      	bx	lr

0800bb94 <acc_confprogram_modify_runif_sensor.constprop.19>:
 800bb94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb96:	0015      	movs	r5, r2
 800bb98:	aa08      	add	r2, sp, #32
 800bb9a:	0006      	movs	r6, r0
 800bb9c:	7810      	ldrb	r0, [r2, #0]
 800bb9e:	00aa      	lsls	r2, r5, #2
 800bba0:	5854      	ldr	r4, [r2, r1]
 800bba2:	220f      	movs	r2, #15
 800bba4:	4394      	bics	r4, r2
 800bba6:	4a0f      	ldr	r2, [pc, #60]	; (800bbe4 <acc_confprogram_modify_runif_sensor.constprop.19+0x50>)
 800bba8:	0011      	movs	r1, r2
 800bbaa:	314c      	adds	r1, #76	; 0x4c
 800bbac:	7809      	ldrb	r1, [r1, #0]
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d00f      	beq.n	800bbd2 <acc_confprogram_modify_runif_sensor.constprop.19+0x3e>
 800bbb2:	431c      	orrs	r4, r3
 800bbb4:	2903      	cmp	r1, #3
 800bbb6:	d906      	bls.n	800bbc6 <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	6d17      	ldr	r7, [r2, #80]	; 0x50
 800bbbc:	002b      	movs	r3, r5
 800bbbe:	4a0a      	ldr	r2, [pc, #40]	; (800bbe8 <acc_confprogram_modify_runif_sensor.constprop.19+0x54>)
 800bbc0:	490a      	ldr	r1, [pc, #40]	; (800bbec <acc_confprogram_modify_runif_sensor.constprop.19+0x58>)
 800bbc2:	2004      	movs	r0, #4
 800bbc4:	47b8      	blx	r7
 800bbc6:	0029      	movs	r1, r5
 800bbc8:	0030      	movs	r0, r6
 800bbca:	0022      	movs	r2, r4
 800bbcc:	f7fa fc8e 	bl	80064ec <acc_sensor_r2_conf_write_instr>
 800bbd0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bbd2:	2903      	cmp	r1, #3
 800bbd4:	d9f7      	bls.n	800bbc6 <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 800bbd6:	6d17      	ldr	r7, [r2, #80]	; 0x50
 800bbd8:	002b      	movs	r3, r5
 800bbda:	4a05      	ldr	r2, [pc, #20]	; (800bbf0 <acc_confprogram_modify_runif_sensor.constprop.19+0x5c>)
 800bbdc:	4903      	ldr	r1, [pc, #12]	; (800bbec <acc_confprogram_modify_runif_sensor.constprop.19+0x58>)
 800bbde:	2004      	movs	r0, #4
 800bbe0:	47b8      	blx	r7
 800bbe2:	e7f0      	b.n	800bbc6 <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 800bbe4:	2000048c 	.word	0x2000048c
 800bbe8:	0801e496 	.word	0x0801e496
 800bbec:	0801d637 	.word	0x0801d637
 800bbf0:	0801e4cc 	.word	0x0801e4cc

0800bbf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bbf6:	4b16      	ldr	r3, [pc, #88]	; (800bc50 <UARTEx_SetNbDataToProcess+0x5c>)
{
 800bbf8:	b085      	sub	sp, #20
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bbfa:	9302      	str	r3, [sp, #8]
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	33ff      	adds	r3, #255	; 0xff
 800bc00:	9303      	str	r3, [sp, #12]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bc02:	4b14      	ldr	r3, [pc, #80]	; (800bc54 <UARTEx_SetNbDataToProcess+0x60>)
{
 800bc04:	0004      	movs	r4, r0
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	4b13      	ldr	r3, [pc, #76]	; (800bc58 <UARTEx_SetNbDataToProcess+0x64>)
 800bc0a:	9301      	str	r3, [sp, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc0c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d01b      	beq.n	800bc4a <UARTEx_SetNbDataToProcess+0x56>
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bc12:	466a      	mov	r2, sp
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc14:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bc16:	ae02      	add	r6, sp, #8
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc18:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bc1e:	5cf0      	ldrb	r0, [r6, r3]
 800bc20:	5cd1      	ldrb	r1, [r2, r3]
 800bc22:	00c0      	lsls	r0, r0, #3
 800bc24:	f004 ffec 	bl	8010c00 <__divsi3>
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bc28:	466a      	mov	r2, sp
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc2a:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bc2c:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bc2e:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bc30:	5cf0      	ldrb	r0, [r6, r3]
 800bc32:	5cd1      	ldrb	r1, [r2, r3]
 800bc34:	00c0      	lsls	r0, r0, #3
 800bc36:	f004 ffe3 	bl	8010c00 <__divsi3>
 800bc3a:	b280      	uxth	r0, r0
 800bc3c:	0023      	movs	r3, r4
 800bc3e:	346a      	adds	r4, #106	; 0x6a
 800bc40:	3368      	adds	r3, #104	; 0x68
 800bc42:	8018      	strh	r0, [r3, #0]
 800bc44:	8027      	strh	r7, [r4, #0]
  }
}
 800bc46:	b005      	add	sp, #20
 800bc48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 800bc4a:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 800bc4c:	0007      	movs	r7, r0
 800bc4e:	e7f5      	b.n	800bc3c <UARTEx_SetNbDataToProcess+0x48>
 800bc50:	03010101 	.word	0x03010101
 800bc54:	04020408 	.word	0x04020408
 800bc58:	01010108 	.word	0x01010108

0800bc5c <UART_TxISR_16BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc5c:	1d03      	adds	r3, r0, #4
 800bc5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800bc60:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc62:	2b21      	cmp	r3, #33	; 0x21
 800bc64:	d113      	bne.n	800bc8e <UART_TxISR_16BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bc66:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 800bc68:	0005      	movs	r5, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bc6a:	2680      	movs	r6, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bc6c:	336a      	adds	r3, #106	; 0x6a
 800bc6e:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 800bc70:	3556      	adds	r5, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bc72:	2a00      	cmp	r2, #0
 800bc74:	d00b      	beq.n	800bc8e <UART_TxISR_16BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 800bc76:	8829      	ldrh	r1, [r5, #0]
 800bc78:	6803      	ldr	r3, [r0, #0]
 800bc7a:	2900      	cmp	r1, #0
 800bc7c:	d108      	bne.n	800bc90 <UART_TxISR_16BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bc7e:	689a      	ldr	r2, [r3, #8]
 800bc80:	490c      	ldr	r1, [pc, #48]	; (800bcb4 <UART_TxISR_16BIT_FIFOEN+0x58>)
 800bc82:	400a      	ands	r2, r1
 800bc84:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc86:	2240      	movs	r2, #64	; 0x40
 800bc88:	6819      	ldr	r1, [r3, #0]
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	601a      	str	r2, [r3, #0]
}
 800bc8e:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bc90:	69d9      	ldr	r1, [r3, #28]
 800bc92:	4231      	tst	r1, r6
 800bc94:	d00a      	beq.n	800bcac <UART_TxISR_16BIT_FIFOEN+0x50>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800bc96:	6d04      	ldr	r4, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bc98:	8821      	ldrh	r1, [r4, #0]
        huart->pTxBuffPtr += 2U;
 800bc9a:	3402      	adds	r4, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bc9c:	05c9      	lsls	r1, r1, #23
 800bc9e:	0dc9      	lsrs	r1, r1, #23
 800bca0:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bca2:	6504      	str	r4, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800bca4:	882b      	ldrh	r3, [r5, #0]
 800bca6:	3b01      	subs	r3, #1
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	802b      	strh	r3, [r5, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bcac:	3a01      	subs	r2, #1
 800bcae:	b292      	uxth	r2, r2
 800bcb0:	e7df      	b.n	800bc72 <UART_TxISR_16BIT_FIFOEN+0x16>
 800bcb2:	46c0      	nop			; (mov r8, r8)
 800bcb4:	ff7fffff 	.word	0xff7fffff

0800bcb8 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bcb8:	1d03      	adds	r3, r0, #4
 800bcba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800bcbc:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bcbe:	2b21      	cmp	r3, #33	; 0x21
 800bcc0:	d113      	bne.n	800bcea <UART_TxISR_8BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bcc2:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 800bcc4:	0004      	movs	r4, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bcc6:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bcc8:	336a      	adds	r3, #106	; 0x6a
 800bcca:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 800bccc:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bcce:	2a00      	cmp	r2, #0
 800bcd0:	d00b      	beq.n	800bcea <UART_TxISR_8BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 800bcd2:	8821      	ldrh	r1, [r4, #0]
 800bcd4:	6803      	ldr	r3, [r0, #0]
 800bcd6:	2900      	cmp	r1, #0
 800bcd8:	d108      	bne.n	800bcec <UART_TxISR_8BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bcda:	689a      	ldr	r2, [r3, #8]
 800bcdc:	490b      	ldr	r1, [pc, #44]	; (800bd0c <UART_TxISR_8BIT_FIFOEN+0x54>)
 800bcde:	400a      	ands	r2, r1
 800bce0:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bce2:	2240      	movs	r2, #64	; 0x40
 800bce4:	6819      	ldr	r1, [r3, #0]
 800bce6:	430a      	orrs	r2, r1
 800bce8:	601a      	str	r2, [r3, #0]
}
 800bcea:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bcec:	69d9      	ldr	r1, [r3, #28]
 800bcee:	4229      	tst	r1, r5
 800bcf0:	d008      	beq.n	800bd04 <UART_TxISR_8BIT_FIFOEN+0x4c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bcf2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800bcf4:	780e      	ldrb	r6, [r1, #0]
        huart->pTxBuffPtr++;
 800bcf6:	3101      	adds	r1, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bcf8:	629e      	str	r6, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800bcfa:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800bcfc:	8823      	ldrh	r3, [r4, #0]
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bd04:	3a01      	subs	r2, #1
 800bd06:	b292      	uxth	r2, r2
 800bd08:	e7e1      	b.n	800bcce <UART_TxISR_8BIT_FIFOEN+0x16>
 800bd0a:	46c0      	nop			; (mov r8, r8)
 800bd0c:	ff7fffff 	.word	0xff7fffff

0800bd10 <UART_TxISR_16BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd10:	1d03      	adds	r3, r0, #4
 800bd12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800bd14:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd16:	2b21      	cmp	r3, #33	; 0x21
 800bd18:	d10d      	bne.n	800bd36 <UART_TxISR_16BIT+0x26>
    if (huart->TxXferCount == 0U)
 800bd1a:	0004      	movs	r4, r0
 800bd1c:	3456      	adds	r4, #86	; 0x56
 800bd1e:	8822      	ldrh	r2, [r4, #0]
 800bd20:	6803      	ldr	r3, [r0, #0]
 800bd22:	2a00      	cmp	r2, #0
 800bd24:	d108      	bne.n	800bd38 <UART_TxISR_16BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bd26:	2180      	movs	r1, #128	; 0x80
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	438a      	bics	r2, r1
 800bd2c:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd2e:	2240      	movs	r2, #64	; 0x40
 800bd30:	6819      	ldr	r1, [r3, #0]
 800bd32:	430a      	orrs	r2, r1
 800bd34:	601a      	str	r2, [r3, #0]
}
 800bd36:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bd38:	6d01      	ldr	r1, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bd3a:	880a      	ldrh	r2, [r1, #0]
      huart->pTxBuffPtr += 2U;
 800bd3c:	3102      	adds	r1, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bd3e:	05d2      	lsls	r2, r2, #23
 800bd40:	0dd2      	lsrs	r2, r2, #23
 800bd42:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bd44:	6501      	str	r1, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800bd46:	8823      	ldrh	r3, [r4, #0]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	8023      	strh	r3, [r4, #0]
 800bd4e:	e7f2      	b.n	800bd36 <UART_TxISR_16BIT+0x26>

0800bd50 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd50:	1d03      	adds	r3, r0, #4
 800bd52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800bd54:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd56:	2b21      	cmp	r3, #33	; 0x21
 800bd58:	d10d      	bne.n	800bd76 <UART_TxISR_8BIT+0x26>
    if (huart->TxXferCount == 0U)
 800bd5a:	0001      	movs	r1, r0
 800bd5c:	3156      	adds	r1, #86	; 0x56
 800bd5e:	880a      	ldrh	r2, [r1, #0]
 800bd60:	6803      	ldr	r3, [r0, #0]
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	d108      	bne.n	800bd78 <UART_TxISR_8BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bd66:	2180      	movs	r1, #128	; 0x80
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	438a      	bics	r2, r1
 800bd6c:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd6e:	2240      	movs	r2, #64	; 0x40
 800bd70:	6819      	ldr	r1, [r3, #0]
 800bd72:	430a      	orrs	r2, r1
 800bd74:	601a      	str	r2, [r3, #0]
}
 800bd76:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bd78:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800bd7a:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 800bd7c:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bd7e:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bd80:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800bd82:	880b      	ldrh	r3, [r1, #0]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	800b      	strh	r3, [r1, #0]
 800bd8a:	e7f4      	b.n	800bd76 <UART_TxISR_8BIT+0x26>

0800bd8c <UART_DMAAbortOnError.lto_priv.201>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800bd8e:	2200      	movs	r2, #0
 800bd90:	0019      	movs	r1, r3
  huart->TxXferCount = 0U;
 800bd92:	3356      	adds	r3, #86	; 0x56
  huart->RxXferCount = 0U;
 800bd94:	315e      	adds	r1, #94	; 0x5e
 800bd96:	800a      	strh	r2, [r1, #0]
  huart->TxXferCount = 0U;
 800bd98:	801a      	strh	r2, [r3, #0]
}
 800bd9a:	4770      	bx	lr

0800bd9c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800bd9c:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while(Param >= 10U)
 800bd9e:	2809      	cmp	r0, #9
 800bda0:	d803      	bhi.n	800bdaa <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800bda2:	011b      	lsls	r3, r3, #4
 800bda4:	4318      	orrs	r0, r3
 800bda6:	b2c0      	uxtb	r0, r0
}
 800bda8:	4770      	bx	lr
    Param -= 10U;
 800bdaa:	380a      	subs	r0, #10
    bcdhigh++;
 800bdac:	3301      	adds	r3, #1
    Param -= 10U;
 800bdae:	b2c0      	uxtb	r0, r0
 800bdb0:	e7f5      	b.n	800bd9e <RTC_ByteToBcd2+0x2>

0800bdb2 <RTC_EnterInitMode>:
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800bdb2:	2240      	movs	r2, #64	; 0x40
 800bdb4:	6803      	ldr	r3, [r0, #0]
{
 800bdb6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800bdb8:	68d9      	ldr	r1, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 800bdba:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800bdbc:	4211      	tst	r1, r2
 800bdbe:	d110      	bne.n	800bde2 <RTC_EnterInitMode+0x30>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800bdc0:	2180      	movs	r1, #128	; 0x80
 800bdc2:	68dd      	ldr	r5, [r3, #12]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bdc4:	2603      	movs	r6, #3
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800bdc6:	4329      	orrs	r1, r5
 800bdc8:	60d9      	str	r1, [r3, #12]
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800bdca:	21fa      	movs	r1, #250	; 0xfa
 800bdcc:	0089      	lsls	r1, r1, #2
 800bdce:	468c      	mov	ip, r1
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bdd0:	0001      	movs	r1, r0
 800bdd2:	4d08      	ldr	r5, [pc, #32]	; (800bdf4 <RTC_EnterInitMode+0x42>)
 800bdd4:	3129      	adds	r1, #41	; 0x29
 800bdd6:	682f      	ldr	r7, [r5, #0]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bdd8:	68d8      	ldr	r0, [r3, #12]
 800bdda:	4210      	tst	r0, r2
 800bddc:	d101      	bne.n	800bde2 <RTC_EnterInitMode+0x30>
 800bdde:	2c03      	cmp	r4, #3
 800bde0:	d101      	bne.n	800bde6 <RTC_EnterInitMode+0x34>
}
 800bde2:	0020      	movs	r0, r4
 800bde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde6:	6828      	ldr	r0, [r5, #0]
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800bde8:	1bc0      	subs	r0, r0, r7
 800bdea:	4560      	cmp	r0, ip
 800bdec:	d9f4      	bls.n	800bdd8 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bdee:	700e      	strb	r6, [r1, #0]
        status = HAL_TIMEOUT;
 800bdf0:	0034      	movs	r4, r6
 800bdf2:	e7f1      	b.n	800bdd8 <RTC_EnterInitMode+0x26>
 800bdf4:	2000048c 	.word	0x2000048c

0800bdf8 <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800bdf8:	21a0      	movs	r1, #160	; 0xa0
{
 800bdfa:	b530      	push	{r4, r5, lr}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bdfc:	25fa      	movs	r5, #250	; 0xfa
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800bdfe:	6803      	ldr	r3, [r0, #0]
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800be00:	2020      	movs	r0, #32
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800be02:	68da      	ldr	r2, [r3, #12]
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800be04:	00ad      	lsls	r5, r5, #2
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800be06:	438a      	bics	r2, r1
 800be08:	4906      	ldr	r1, [pc, #24]	; (800be24 <HAL_RTC_WaitForSynchro+0x2c>)
 800be0a:	60da      	str	r2, [r3, #12]
 800be0c:	680c      	ldr	r4, [r1, #0]
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800be0e:	68da      	ldr	r2, [r3, #12]
 800be10:	4202      	tst	r2, r0
 800be12:	d001      	beq.n	800be18 <HAL_RTC_WaitForSynchro+0x20>
  return HAL_OK;
 800be14:	2000      	movs	r0, #0
}
 800be16:	bd30      	pop	{r4, r5, pc}
 800be18:	680a      	ldr	r2, [r1, #0]
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800be1a:	1b12      	subs	r2, r2, r4
 800be1c:	42aa      	cmp	r2, r5
 800be1e:	d9f6      	bls.n	800be0e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800be20:	2003      	movs	r0, #3
 800be22:	e7f8      	b.n	800be16 <HAL_RTC_WaitForSynchro+0x1e>
 800be24:	2000048c 	.word	0x2000048c

0800be28 <RTC_ExitInitMode>:
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800be28:	2280      	movs	r2, #128	; 0x80
{
 800be2a:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800be2c:	4c0f      	ldr	r4, [pc, #60]	; (800be6c <RTC_ExitInitMode+0x44>)
{
 800be2e:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800be30:	68e3      	ldr	r3, [r4, #12]
 800be32:	4393      	bics	r3, r2
 800be34:	60e3      	str	r3, [r4, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800be36:	69a3      	ldr	r3, [r4, #24]
 800be38:	3a60      	subs	r2, #96	; 0x60
 800be3a:	4213      	tst	r3, r2
 800be3c:	d107      	bne.n	800be4e <RTC_ExitInitMode+0x26>
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800be3e:	f7ff ffdb 	bl	800bdf8 <HAL_RTC_WaitForSynchro>
 800be42:	2800      	cmp	r0, #0
 800be44:	d002      	beq.n	800be4c <RTC_ExitInitMode+0x24>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800be46:	2003      	movs	r0, #3
 800be48:	3529      	adds	r5, #41	; 0x29
 800be4a:	7028      	strb	r0, [r5, #0]
}
 800be4c:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800be4e:	69a3      	ldr	r3, [r4, #24]
 800be50:	4393      	bics	r3, r2
 800be52:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800be54:	f7ff ffd0 	bl	800bdf8 <HAL_RTC_WaitForSynchro>
 800be58:	2800      	cmp	r0, #0
 800be5a:	d002      	beq.n	800be62 <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800be5c:	2003      	movs	r0, #3
 800be5e:	3529      	adds	r5, #41	; 0x29
 800be60:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800be62:	2320      	movs	r3, #32
 800be64:	69a2      	ldr	r2, [r4, #24]
 800be66:	4313      	orrs	r3, r2
 800be68:	61a3      	str	r3, [r4, #24]
 800be6a:	e7ef      	b.n	800be4c <RTC_ExitInitMode+0x24>
 800be6c:	40002800 	.word	0x40002800

0800be70 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800be70:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 800be72:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800be74:	07ca      	lsls	r2, r1, #31
 800be76:	d508      	bpl.n	800be8a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800be78:	0003      	movs	r3, r0
 800be7a:	3341      	adds	r3, #65	; 0x41
 800be7c:	781a      	ldrb	r2, [r3, #0]
 800be7e:	2328      	movs	r3, #40	; 0x28
 800be80:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800be82:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800be84:	2a28      	cmp	r2, #40	; 0x28
 800be86:	d000      	beq.n	800be8a <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800be88:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800be8a:	078a      	lsls	r2, r1, #30
 800be8c:	d508      	bpl.n	800bea0 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800be8e:	0002      	movs	r2, r0
 800be90:	2428      	movs	r4, #40	; 0x28
 800be92:	3241      	adds	r2, #65	; 0x41
 800be94:	7812      	ldrb	r2, [r2, #0]
 800be96:	4022      	ands	r2, r4
 800be98:	42a2      	cmp	r2, r4
 800be9a:	d10a      	bne.n	800beb2 <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800be9c:	2244      	movs	r2, #68	; 0x44
 800be9e:	4313      	orrs	r3, r2
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bea0:	074a      	lsls	r2, r1, #29
 800bea2:	d501      	bpl.n	800bea8 <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bea4:	22b8      	movs	r2, #184	; 0xb8
 800bea6:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bea8:	6801      	ldr	r1, [r0, #0]
 800beaa:	680a      	ldr	r2, [r1, #0]
 800beac:	439a      	bics	r2, r3
 800beae:	600a      	str	r2, [r1, #0]
}
 800beb0:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800beb2:	22f4      	movs	r2, #244	; 0xf4
 800beb4:	4313      	orrs	r3, r2
 800beb6:	e7f3      	b.n	800bea0 <I2C_Disable_IRQ+0x30>

0800beb8 <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 800beb8:	2200      	movs	r2, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800beba:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 800bebc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800bebe:	638a      	str	r2, [r1, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800bec0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bec2:	3341      	adds	r3, #65	; 0x41
  hi2c->hdmarx->XferAbortCallback = NULL;
 800bec4:	638a      	str	r2, [r1, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bec6:	781a      	ldrb	r2, [r3, #0]
 800bec8:	2a60      	cmp	r2, #96	; 0x60
 800beca:	d101      	bne.n	800bed0 <I2C_DMAAbort+0x18>
    hi2c->State = HAL_I2C_STATE_READY;
 800becc:	3a40      	subs	r2, #64	; 0x40
 800bece:	701a      	strb	r2, [r3, #0]
}
 800bed0:	4770      	bx	lr

0800bed2 <I2C_Flush_TXDR>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bed2:	6803      	ldr	r3, [r0, #0]
 800bed4:	699a      	ldr	r2, [r3, #24]
 800bed6:	0792      	lsls	r2, r2, #30
 800bed8:	d501      	bpl.n	800bede <I2C_Flush_TXDR+0xc>
    hi2c->Instance->TXDR = 0x00U;
 800beda:	2200      	movs	r2, #0
 800bedc:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bede:	2201      	movs	r2, #1
 800bee0:	6999      	ldr	r1, [r3, #24]
 800bee2:	4211      	tst	r1, r2
 800bee4:	d102      	bne.n	800beec <I2C_Flush_TXDR+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bee6:	6999      	ldr	r1, [r3, #24]
 800bee8:	430a      	orrs	r2, r1
 800beea:	619a      	str	r2, [r3, #24]
}
 800beec:	4770      	bx	lr

0800beee <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800beee:	4b16      	ldr	r3, [pc, #88]	; (800bf48 <I2C_ITListenCplt+0x5a>)
{
 800bef0:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bef2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800bef4:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800bef6:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 800bef8:	6303      	str	r3, [r0, #48]	; 0x30
{
 800befa:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 800befc:	2020      	movs	r0, #32
 800befe:	3241      	adds	r2, #65	; 0x41
 800bf00:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf02:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 800bf04:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800bf06:	074b      	lsls	r3, r1, #29
 800bf08:	d513      	bpl.n	800bf32 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf10:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800bf12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf14:	3301      	adds	r3, #1
 800bf16:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800bf18:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d009      	beq.n	800bf32 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800bf22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bf24:	3b01      	subs	r3, #1
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf2a:	2304      	movs	r3, #4
 800bf2c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bf32:	0020      	movs	r0, r4
 800bf34:	2107      	movs	r1, #7
 800bf36:	f7ff ff9b 	bl	800be70 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf3a:	2210      	movs	r2, #16
 800bf3c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hi2c);
 800bf3e:	3440      	adds	r4, #64	; 0x40
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf40:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800bf42:	2300      	movs	r3, #0
 800bf44:	7023      	strb	r3, [r4, #0]
}
 800bf46:	bd10      	pop	{r4, pc}
 800bf48:	ffff0000 	.word	0xffff0000

0800bf4c <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf4c:	0003      	movs	r3, r0
{
 800bf4e:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf50:	2500      	movs	r5, #0
 800bf52:	3342      	adds	r3, #66	; 0x42
 800bf54:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bf56:	3b01      	subs	r3, #1
 800bf58:	781a      	ldrb	r2, [r3, #0]
{
 800bf5a:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bf5c:	2a29      	cmp	r2, #41	; 0x29
 800bf5e:	d109      	bne.n	800bf74 <I2C_ITSlaveSeqCplt+0x28>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bf60:	3a01      	subs	r2, #1
 800bf62:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bf64:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bf66:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bf68:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800bf6a:	3440      	adds	r4, #64	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bf6c:	f7ff ff80 	bl	800be70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bf70:	7025      	strb	r5, [r4, #0]
}
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bf74:	781a      	ldrb	r2, [r3, #0]
 800bf76:	2a2a      	cmp	r2, #42	; 0x2a
 800bf78:	d1fb      	bne.n	800bf72 <I2C_ITSlaveSeqCplt+0x26>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bf7a:	3a02      	subs	r2, #2
 800bf7c:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bf7e:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bf80:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bf82:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800bf84:	3440      	adds	r4, #64	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bf86:	f7ff ff73 	bl	800be70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bf8a:	7025      	strb	r5, [r4, #0]
 800bf8c:	e7f1      	b.n	800bf72 <I2C_ITSlaveSeqCplt+0x26>

0800bf8e <HAL_InitTick>:
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800bf8e:	21fa      	movs	r1, #250	; 0xfa
{
 800bf90:	b570      	push	{r4, r5, r6, lr}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800bf92:	4d12      	ldr	r5, [pc, #72]	; (800bfdc <HAL_InitTick+0x4e>)
{
 800bf94:	0004      	movs	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800bf96:	0089      	lsls	r1, r1, #2
 800bf98:	6828      	ldr	r0, [r5, #0]
 800bf9a:	f004 fda7 	bl	8010aec <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bf9e:	4b10      	ldr	r3, [pc, #64]	; (800bfe0 <HAL_InitTick+0x52>)
 800bfa0:	3801      	subs	r0, #1
 800bfa2:	4298      	cmp	r0, r3
 800bfa4:	d901      	bls.n	800bfaa <HAL_InitTick+0x1c>
      status = HAL_ERROR;
 800bfa6:	2001      	movs	r0, #1
}
 800bfa8:	bd70      	pop	{r4, r5, r6, pc}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bfaa:	490e      	ldr	r1, [pc, #56]	; (800bfe4 <HAL_InitTick+0x56>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bfac:	4a0e      	ldr	r2, [pc, #56]	; (800bfe8 <HAL_InitTick+0x5a>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bfae:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bfb0:	20c0      	movs	r0, #192	; 0xc0
 800bfb2:	6a13      	ldr	r3, [r2, #32]
 800bfb4:	0600      	lsls	r0, r0, #24
 800bfb6:	021b      	lsls	r3, r3, #8
 800bfb8:	0a1b      	lsrs	r3, r3, #8
 800bfba:	4303      	orrs	r3, r0
 800bfbc:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bfbe:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bfc0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bfc2:	6088      	str	r0, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bfc4:	600b      	str	r3, [r1, #0]
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bfc6:	2c03      	cmp	r4, #3
 800bfc8:	d8ed      	bhi.n	800bfa6 <HAL_InitTick+0x18>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bfca:	6a13      	ldr	r3, [r2, #32]
 800bfcc:	07a1      	lsls	r1, r4, #30
 800bfce:	021b      	lsls	r3, r3, #8
 800bfd0:	0a1b      	lsrs	r3, r3, #8
 800bfd2:	430b      	orrs	r3, r1
 800bfd4:	6213      	str	r3, [r2, #32]
        uwTickPrio = TickPriority;
 800bfd6:	606c      	str	r4, [r5, #4]
 800bfd8:	e7e6      	b.n	800bfa8 <HAL_InitTick+0x1a>
 800bfda:	46c0      	nop			; (mov r8, r8)
 800bfdc:	20000000 	.word	0x20000000
 800bfe0:	00ffffff 	.word	0x00ffffff
 800bfe4:	e000e010 	.word	0xe000e010
 800bfe8:	e000ed00 	.word	0xe000ed00

0800bfec <DMA_CalcDMAMUXChannelBaseAndMask>:
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bfec:	6803      	ldr	r3, [r0, #0]
{
 800bfee:	b510      	push	{r4, lr}
 800bff0:	0004      	movs	r4, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bff2:	b2d8      	uxtb	r0, r3
 800bff4:	2114      	movs	r1, #20
 800bff6:	3808      	subs	r0, #8
 800bff8:	f004 fd78 	bl	8010aec <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800bffc:	4a07      	ldr	r2, [pc, #28]	; (800c01c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 800bffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c000:	4694      	mov	ip, r2
 800c002:	089b      	lsrs	r3, r3, #2
 800c004:	4463      	add	r3, ip
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c00a:	4b05      	ldr	r3, [pc, #20]	; (800c020 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 800c00c:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800c00e:	231c      	movs	r3, #28
 800c010:	4018      	ands	r0, r3
 800c012:	3b1b      	subs	r3, #27
 800c014:	4083      	lsls	r3, r0
 800c016:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800c018:	bd10      	pop	{r4, pc}
 800c01a:	46c0      	nop			; (mov r8, r8)
 800c01c:	10008200 	.word	0x10008200
 800c020:	40020880 	.word	0x40020880

0800c024 <HAL_DMA_Init.part.0.constprop.85>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 800c024:	b570      	push	{r4, r5, r6, lr}
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c026:	4b23      	ldr	r3, [pc, #140]	; (800c0b4 <HAL_DMA_Init.part.0.constprop.85+0x90>)
 800c028:	6805      	ldr	r5, [r0, #0]
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 800c02a:	0004      	movs	r4, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c02c:	2114      	movs	r1, #20
 800c02e:	18e8      	adds	r0, r5, r3
 800c030:	f004 fd5c 	bl	8010aec <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 800c034:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c036:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 800c038:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c03a:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800c03c:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800c03e:	682b      	ldr	r3, [r5, #0]
 800c040:	4a1d      	ldr	r2, [pc, #116]	; (800c0b8 <HAL_DMA_Init.part.0.constprop.85+0x94>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800c042:	68a1      	ldr	r1, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800c044:	4013      	ands	r3, r2
 800c046:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800c048:	2380      	movs	r3, #128	; 0x80
 800c04a:	682a      	ldr	r2, [r5, #0]
 800c04c:	430b      	orrs	r3, r1
 800c04e:	4313      	orrs	r3, r2
 800c050:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c052:	0020      	movs	r0, r4
 800c054:	f7ff ffca 	bl	800bfec <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c058:	2380      	movs	r3, #128	; 0x80
 800c05a:	68a2      	ldr	r2, [r4, #8]
 800c05c:	01db      	lsls	r3, r3, #7
 800c05e:	429a      	cmp	r2, r3
 800c060:	d101      	bne.n	800c066 <HAL_DMA_Init.part.0.constprop.85+0x42>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c062:	2300      	movs	r3, #0
 800c064:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c066:	6862      	ldr	r2, [r4, #4]
 800c068:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c06a:	b2d3      	uxtb	r3, r2
 800c06c:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c06e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c070:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c072:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c074:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c076:	2a03      	cmp	r2, #3
 800c078:	d816      	bhi.n	800c0a8 <HAL_DMA_Init.part.0.constprop.85+0x84>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c07a:	4a10      	ldr	r2, [pc, #64]	; (800c0bc <HAL_DMA_Init.part.0.constprop.85+0x98>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c07c:	4810      	ldr	r0, [pc, #64]	; (800c0c0 <HAL_DMA_Init.part.0.constprop.85+0x9c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c07e:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800c080:	2203      	movs	r2, #3
 800c082:	3b01      	subs	r3, #1
 800c084:	4013      	ands	r3, r2
 800c086:	3a02      	subs	r2, #2
 800c088:	409a      	lsls	r2, r3
 800c08a:	65a2      	str	r2, [r4, #88]	; 0x58
 800c08c:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c08e:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c090:	0089      	lsls	r1, r1, #2
 800c092:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c094:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c096:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c098:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c09a:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800c09c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c09e:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 800c0a0:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800c0a2:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 800c0a4:	77e0      	strb	r0, [r4, #31]
}
 800c0a6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800c0ac:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c0ae:	65a3      	str	r3, [r4, #88]	; 0x58
 800c0b0:	e7f3      	b.n	800c09a <HAL_DMA_Init.part.0.constprop.85+0x76>
 800c0b2:	46c0      	nop			; (mov r8, r8)
 800c0b4:	bffdfff8 	.word	0xbffdfff8
 800c0b8:	ffff800f 	.word	0xffff800f
 800c0bc:	1000823f 	.word	0x1000823f
 800c0c0:	40020940 	.word	0x40020940

0800c0c4 <HAL_DMA_DeInit.part.1>:
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
 800c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800c0c6:	2501      	movs	r5, #1
 800c0c8:	6807      	ldr	r7, [r0, #0]
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
 800c0ca:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800c0cc:	683b      	ldr	r3, [r7, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c0ce:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 800c0d0:	43ab      	bics	r3, r5
 800c0d2:	603b      	str	r3, [r7, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c0d4:	4b18      	ldr	r3, [pc, #96]	; (800c138 <HAL_DMA_DeInit.part.1+0x74>)
  hdma->Instance->CCR  = 0U;
 800c0d6:	2600      	movs	r6, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c0d8:	18f8      	adds	r0, r7, r3
 800c0da:	f004 fd07 	bl	8010aec <__udivsi3>
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800c0de:	231c      	movs	r3, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c0e0:	0080      	lsls	r0, r0, #2
 800c0e2:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800c0e4:	4018      	ands	r0, r3
 800c0e6:	002b      	movs	r3, r5
 800c0e8:	4083      	lsls	r3, r0
 800c0ea:	4a14      	ldr	r2, [pc, #80]	; (800c13c <HAL_DMA_DeInit.part.1+0x78>)
  hdma->Instance->CCR  = 0U;
 800c0ec:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800c0ee:	6851      	ldr	r1, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c0f0:	0020      	movs	r0, r4
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800c0f2:	430b      	orrs	r3, r1
 800c0f4:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c0f6:	f7ff ff79 	bl	800bfec <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800c0fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c0fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  hdma->DMAmuxChannel->CCR = 0U;
 800c0fe:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c100:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c102:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c104:	6863      	ldr	r3, [r4, #4]
 800c106:	1e5a      	subs	r2, r3, #1
 800c108:	2a03      	cmp	r2, #3
 800c10a:	d807      	bhi.n	800c11c <HAL_DMA_DeInit.part.1+0x58>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c10c:	490c      	ldr	r1, [pc, #48]	; (800c140 <HAL_DMA_DeInit.part.1+0x7c>)
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800c10e:	4095      	lsls	r5, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c110:	468c      	mov	ip, r1
 800c112:	4463      	add	r3, ip
 800c114:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c116:	601e      	str	r6, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c118:	4b0a      	ldr	r3, [pc, #40]	; (800c144 <HAL_DMA_DeInit.part.1+0x80>)
 800c11a:	605d      	str	r5, [r3, #4]
  hdma->XferCpltCallback = NULL;
 800c11c:	2000      	movs	r0, #0
 800c11e:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800c120:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800c122:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800c124:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->DMAmuxRequestGen = 0U;
 800c126:	6520      	str	r0, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 800c128:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800c12a:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c12c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800c12e:	1da3      	adds	r3, r4, #6
  __HAL_UNLOCK(hdma);
 800c130:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 800c132:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 800c134:	77e0      	strb	r0, [r4, #31]
}
 800c136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c138:	bffdfff8 	.word	0xbffdfff8
 800c13c:	40020000 	.word	0x40020000
 800c140:	1000823f 	.word	0x1000823f
 800c144:	40020940 	.word	0x40020940

0800c148 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c148:	4b06      	ldr	r3, [pc, #24]	; (800c164 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c14a:	4a07      	ldr	r2, [pc, #28]	; (800c168 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	045b      	lsls	r3, r3, #17
 800c150:	0f5b      	lsrs	r3, r3, #29
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	589b      	ldr	r3, [r3, r2]
 800c156:	221f      	movs	r2, #31
 800c158:	4013      	ands	r3, r2
 800c15a:	4a04      	ldr	r2, [pc, #16]	; (800c16c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c15c:	6810      	ldr	r0, [r2, #0]
 800c15e:	40d8      	lsrs	r0, r3
}
 800c160:	4770      	bx	lr
 800c162:	46c0      	nop			; (mov r8, r8)
 800c164:	40021000 	.word	0x40021000
 800c168:	0801bd9c 	.word	0x0801bd9c
 800c16c:	20000000 	.word	0x20000000

0800c170 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c170:	2338      	movs	r3, #56	; 0x38
 800c172:	4a21      	ldr	r2, [pc, #132]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x88>)
{
 800c174:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c176:	6891      	ldr	r1, [r2, #8]
 800c178:	0014      	movs	r4, r2
 800c17a:	4219      	tst	r1, r3
 800c17c:	d108      	bne.n	800c190 <HAL_RCC_GetSysClockFreq+0x20>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c17e:	2101      	movs	r1, #1
 800c180:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 800c182:	481e      	ldr	r0, [pc, #120]	; (800c1fc <HAL_RCC_GetSysClockFreq+0x8c>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c184:	049b      	lsls	r3, r3, #18
 800c186:	0f5b      	lsrs	r3, r3, #29
 800c188:	4099      	lsls	r1, r3
    sysclockfreq = (HSI_VALUE / hsidiv);
 800c18a:	f004 fcaf 	bl	8010aec <__udivsi3>
}
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c190:	6891      	ldr	r1, [r2, #8]
 800c192:	4019      	ands	r1, r3
 800c194:	2908      	cmp	r1, #8
 800c196:	d02a      	beq.n	800c1ee <HAL_RCC_GetSysClockFreq+0x7e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c198:	6891      	ldr	r1, [r2, #8]
 800c19a:	4019      	ands	r1, r3
 800c19c:	2910      	cmp	r1, #16
 800c19e:	d11a      	bne.n	800c1d6 <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800c1a0:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c1a2:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800c1a4:	43db      	mvns	r3, r3
 800c1a6:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c1a8:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c1aa:	0649      	lsls	r1, r1, #25
 800c1ac:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c1ae:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c1b0:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c1b2:	4015      	ands	r5, r2
    switch (pllsource)
 800c1b4:	079b      	lsls	r3, r3, #30
 800c1b6:	d109      	bne.n	800c1cc <HAL_RCC_GetSysClockFreq+0x5c>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c1b8:	4811      	ldr	r0, [pc, #68]	; (800c200 <HAL_RCC_GetSysClockFreq+0x90>)
 800c1ba:	f004 fc97 	bl	8010aec <__udivsi3>
 800c1be:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800c1c0:	68e1      	ldr	r1, [r4, #12]
 800c1c2:	0f49      	lsrs	r1, r1, #29
 800c1c4:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800c1c6:	f004 fc91 	bl	8010aec <__udivsi3>
 800c1ca:	e7e0      	b.n	800c18e <HAL_RCC_GetSysClockFreq+0x1e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800c1cc:	480b      	ldr	r0, [pc, #44]	; (800c1fc <HAL_RCC_GetSysClockFreq+0x8c>)
 800c1ce:	f004 fc8d 	bl	8010aec <__udivsi3>
 800c1d2:	4368      	muls	r0, r5
 800c1d4:	e7f4      	b.n	800c1c0 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800c1d6:	6891      	ldr	r1, [r2, #8]
 800c1d8:	4019      	ands	r1, r3
 800c1da:	2920      	cmp	r1, #32
 800c1dc:	d009      	beq.n	800c1f2 <HAL_RCC_GetSysClockFreq+0x82>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800c1de:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 800c1e0:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800c1e2:	4013      	ands	r3, r2
 800c1e4:	2b18      	cmp	r3, #24
 800c1e6:	d1d2      	bne.n	800c18e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 800c1e8:	20fa      	movs	r0, #250	; 0xfa
 800c1ea:	01c0      	lsls	r0, r0, #7
 800c1ec:	e7cf      	b.n	800c18e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 800c1ee:	4804      	ldr	r0, [pc, #16]	; (800c200 <HAL_RCC_GetSysClockFreq+0x90>)
 800c1f0:	e7cd      	b.n	800c18e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 800c1f2:	2080      	movs	r0, #128	; 0x80
 800c1f4:	0200      	lsls	r0, r0, #8
 800c1f6:	e7ca      	b.n	800c18e <HAL_RCC_GetSysClockFreq+0x1e>
 800c1f8:	40021000 	.word	0x40021000
 800c1fc:	00f42400 	.word	0x00f42400
 800c200:	007a1200 	.word	0x007a1200

0800c204 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c206:	2308      	movs	r3, #8
{
 800c208:	4645      	mov	r5, r8
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c20a:	4698      	mov	r8, r3
 800c20c:	4480      	add	r8, r0
 800c20e:	4643      	mov	r3, r8
{
 800c210:	46de      	mov	lr, fp
 800c212:	4657      	mov	r7, sl
 800c214:	464e      	mov	r6, r9
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800c218:	b5e0      	push	{r5, r6, r7, lr}
 800c21a:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c21c:	2b22      	cmp	r3, #34	; 0x22
 800c21e:	d149      	bne.n	800c2b4 <UART_RxISR_16BIT_FIFOEN+0xb0>
  uint16_t  uhMask = huart->Mask;
 800c220:	0003      	movs	r3, r0
 800c222:	3360      	adds	r3, #96	; 0x60
 800c224:	881b      	ldrh	r3, [r3, #0]
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c226:	0007      	movs	r7, r0
  uint16_t  uhMask = huart->Mask;
 800c228:	4699      	mov	r9, r3
      huart->RxXferCount--;

      if (huart->RxXferCount == 0U)
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c22a:	4b25      	ldr	r3, [pc, #148]	; (800c2c0 <UART_RxISR_16BIT_FIFOEN+0xbc>)
 800c22c:	0006      	movs	r6, r0
 800c22e:	469a      	mov	sl, r3

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c230:	3322      	adds	r3, #34	; 0x22
 800c232:	33ff      	adds	r3, #255	; 0xff
 800c234:	469b      	mov	fp, r3
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c236:	3768      	adds	r7, #104	; 0x68
 800c238:	883d      	ldrh	r5, [r7, #0]
 800c23a:	365e      	adds	r6, #94	; 0x5e
 800c23c:	2d00      	cmp	r5, #0
 800c23e:	d117      	bne.n	800c270 <UART_RxISR_16BIT_FIFOEN+0x6c>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c240:	8833      	ldrh	r3, [r6, #0]
 800c242:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c244:	2b00      	cmp	r3, #0
 800c246:	d00d      	beq.n	800c264 <UART_RxISR_16BIT_FIFOEN+0x60>
 800c248:	883a      	ldrh	r2, [r7, #0]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d90a      	bls.n	800c264 <UART_RxISR_16BIT_FIFOEN+0x60>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c24e:	6823      	ldr	r3, [r4, #0]
 800c250:	491c      	ldr	r1, [pc, #112]	; (800c2c4 <UART_RxISR_16BIT_FIFOEN+0xc0>)
 800c252:	689a      	ldr	r2, [r3, #8]
 800c254:	400a      	ands	r2, r1
 800c256:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c258:	4a1b      	ldr	r2, [pc, #108]	; (800c2c8 <UART_RxISR_16BIT_FIFOEN+0xc4>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c25a:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 800c25c:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c25e:	2220      	movs	r2, #32
 800c260:	430a      	orrs	r2, r1
 800c262:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c264:	bc3c      	pop	{r2, r3, r4, r5}
 800c266:	4690      	mov	r8, r2
 800c268:	4699      	mov	r9, r3
 800c26a:	46a2      	mov	sl, r4
 800c26c:	46ab      	mov	fp, r5
 800c26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *tmp = (uint16_t)(uhdata & uhMask);
 800c270:	4648      	mov	r0, r9
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c272:	6823      	ldr	r3, [r4, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c274:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c276:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800c278:	4001      	ands	r1, r0
 800c27a:	8011      	strh	r1, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800c27c:	3202      	adds	r2, #2
 800c27e:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800c280:	8832      	ldrh	r2, [r6, #0]
 800c282:	3a01      	subs	r2, #1
 800c284:	b292      	uxth	r2, r2
 800c286:	8032      	strh	r2, [r6, #0]
      if (huart->RxXferCount == 0U)
 800c288:	8832      	ldrh	r2, [r6, #0]
 800c28a:	b292      	uxth	r2, r2
 800c28c:	2a00      	cmp	r2, #0
 800c28e:	d10e      	bne.n	800c2ae <UART_RxISR_16BIT_FIFOEN+0xaa>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c290:	4650      	mov	r0, sl
 800c292:	6819      	ldr	r1, [r3, #0]
 800c294:	4001      	ands	r1, r0
 800c296:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c298:	6899      	ldr	r1, [r3, #8]
 800c29a:	480c      	ldr	r0, [pc, #48]	; (800c2cc <UART_RxISR_16BIT_FIFOEN+0xc8>)
 800c29c:	4001      	ands	r1, r0
 800c29e:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800c2a0:	4643      	mov	r3, r8
 800c2a2:	4659      	mov	r1, fp
        HAL_UART_RxCpltCallback(huart);
 800c2a4:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800c2a6:	67d9      	str	r1, [r3, #124]	; 0x7c
        huart->RxISR = NULL;
 800c2a8:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800c2aa:	f7ff f840 	bl	800b32e <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c2ae:	3d01      	subs	r5, #1
 800c2b0:	b2ad      	uxth	r5, r5
 800c2b2:	e7c3      	b.n	800c23c <UART_RxISR_16BIT_FIFOEN+0x38>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2b4:	2308      	movs	r3, #8
 800c2b6:	6802      	ldr	r2, [r0, #0]
 800c2b8:	6991      	ldr	r1, [r2, #24]
 800c2ba:	430b      	orrs	r3, r1
 800c2bc:	6193      	str	r3, [r2, #24]
 800c2be:	e7d1      	b.n	800c264 <UART_RxISR_16BIT_FIFOEN+0x60>
 800c2c0:	fffffeff 	.word	0xfffffeff
 800c2c4:	efffffff 	.word	0xefffffff
 800c2c8:	0800c2d1 	.word	0x0800c2d1
 800c2cc:	effffffe 	.word	0xeffffffe

0800c2d0 <UART_RxISR_16BIT>:
{
 800c2d0:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2d2:	0004      	movs	r4, r0
 800c2d4:	3408      	adds	r4, #8
 800c2d6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800c2d8:	6803      	ldr	r3, [r0, #0]
 800c2da:	2a22      	cmp	r2, #34	; 0x22
 800c2dc:	d121      	bne.n	800c322 <UART_RxISR_16BIT+0x52>
  uint16_t uhMask = huart->Mask;
 800c2de:	0005      	movs	r5, r0
 800c2e0:	3560      	adds	r5, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800c2e4:	882d      	ldrh	r5, [r5, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c2e6:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800c2e8:	4029      	ands	r1, r5
 800c2ea:	8011      	strh	r1, [r2, #0]
    huart->RxXferCount--;
 800c2ec:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 800c2ee:	3202      	adds	r2, #2
 800c2f0:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800c2f2:	315e      	adds	r1, #94	; 0x5e
 800c2f4:	880a      	ldrh	r2, [r1, #0]
 800c2f6:	3a01      	subs	r2, #1
 800c2f8:	b292      	uxth	r2, r2
 800c2fa:	800a      	strh	r2, [r1, #0]
    if (huart->RxXferCount == 0U)
 800c2fc:	880a      	ldrh	r2, [r1, #0]
 800c2fe:	b292      	uxth	r2, r2
 800c300:	2a00      	cmp	r2, #0
 800c302:	d10d      	bne.n	800c320 <UART_RxISR_16BIT+0x50>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c304:	6819      	ldr	r1, [r3, #0]
 800c306:	4d09      	ldr	r5, [pc, #36]	; (800c32c <UART_RxISR_16BIT+0x5c>)
 800c308:	4029      	ands	r1, r5
 800c30a:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c30c:	6899      	ldr	r1, [r3, #8]
 800c30e:	3523      	adds	r5, #35	; 0x23
 800c310:	35ff      	adds	r5, #255	; 0xff
 800c312:	43a9      	bics	r1, r5
 800c314:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800c316:	2320      	movs	r3, #32
 800c318:	67e3      	str	r3, [r4, #124]	; 0x7c
      huart->RxISR = NULL;
 800c31a:	66c2      	str	r2, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800c31c:	f7ff f807 	bl	800b32e <HAL_UART_RxCpltCallback>
}
 800c320:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c322:	2208      	movs	r2, #8
 800c324:	6999      	ldr	r1, [r3, #24]
 800c326:	430a      	orrs	r2, r1
 800c328:	619a      	str	r2, [r3, #24]
 800c32a:	e7f9      	b.n	800c320 <UART_RxISR_16BIT+0x50>
 800c32c:	fffffedf 	.word	0xfffffedf

0800c330 <UART_RxISR_8BIT_FIFOEN>:
{
 800c330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c332:	2308      	movs	r3, #8
{
 800c334:	4645      	mov	r5, r8
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c336:	4698      	mov	r8, r3
 800c338:	4480      	add	r8, r0
 800c33a:	4643      	mov	r3, r8
{
 800c33c:	46de      	mov	lr, fp
 800c33e:	4657      	mov	r7, sl
 800c340:	464e      	mov	r6, r9
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800c344:	b5e0      	push	{r5, r6, r7, lr}
 800c346:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c348:	2b22      	cmp	r3, #34	; 0x22
 800c34a:	d14b      	bne.n	800c3e4 <UART_RxISR_8BIT_FIFOEN+0xb4>
  uint16_t  uhMask = huart->Mask;
 800c34c:	0003      	movs	r3, r0
 800c34e:	3360      	adds	r3, #96	; 0x60
 800c350:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c352:	0007      	movs	r7, r0
  uint16_t  uhMask = huart->Mask;
 800c354:	4699      	mov	r9, r3
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c356:	4b26      	ldr	r3, [pc, #152]	; (800c3f0 <UART_RxISR_8BIT_FIFOEN+0xc0>)
 800c358:	0006      	movs	r6, r0
 800c35a:	469a      	mov	sl, r3
        huart->RxState = HAL_UART_STATE_READY;
 800c35c:	3322      	adds	r3, #34	; 0x22
 800c35e:	33ff      	adds	r3, #255	; 0xff
 800c360:	469b      	mov	fp, r3
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c362:	3768      	adds	r7, #104	; 0x68
 800c364:	883d      	ldrh	r5, [r7, #0]
 800c366:	365e      	adds	r6, #94	; 0x5e
 800c368:	2d00      	cmp	r5, #0
 800c36a:	d117      	bne.n	800c39c <UART_RxISR_8BIT_FIFOEN+0x6c>
    rxdatacount = huart->RxXferCount;
 800c36c:	8833      	ldrh	r3, [r6, #0]
 800c36e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00d      	beq.n	800c390 <UART_RxISR_8BIT_FIFOEN+0x60>
 800c374:	883a      	ldrh	r2, [r7, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d90a      	bls.n	800c390 <UART_RxISR_8BIT_FIFOEN+0x60>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	491d      	ldr	r1, [pc, #116]	; (800c3f4 <UART_RxISR_8BIT_FIFOEN+0xc4>)
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	400a      	ands	r2, r1
 800c382:	609a      	str	r2, [r3, #8]
      huart->RxISR = UART_RxISR_8BIT;
 800c384:	4a1c      	ldr	r2, [pc, #112]	; (800c3f8 <UART_RxISR_8BIT_FIFOEN+0xc8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c386:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800c388:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c38a:	2220      	movs	r2, #32
 800c38c:	430a      	orrs	r2, r1
 800c38e:	601a      	str	r2, [r3, #0]
}
 800c390:	bc3c      	pop	{r2, r3, r4, r5}
 800c392:	4690      	mov	r8, r2
 800c394:	4699      	mov	r9, r3
 800c396:	46a2      	mov	sl, r4
 800c398:	46ab      	mov	fp, r5
 800c39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c39c:	464a      	mov	r2, r9
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c39e:	6823      	ldr	r3, [r4, #0]
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c3a2:	4013      	ands	r3, r2
 800c3a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800c3a6:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800c3a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800c3ae:	8833      	ldrh	r3, [r6, #0]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	8033      	strh	r3, [r6, #0]
      if (huart->RxXferCount == 0U)
 800c3b6:	8833      	ldrh	r3, [r6, #0]
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10f      	bne.n	800c3de <UART_RxISR_8BIT_FIFOEN+0xae>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3be:	4650      	mov	r0, sl
 800c3c0:	6822      	ldr	r2, [r4, #0]
 800c3c2:	6811      	ldr	r1, [r2, #0]
 800c3c4:	4001      	ands	r1, r0
 800c3c6:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3c8:	6891      	ldr	r1, [r2, #8]
 800c3ca:	480c      	ldr	r0, [pc, #48]	; (800c3fc <UART_RxISR_8BIT_FIFOEN+0xcc>)
 800c3cc:	4001      	ands	r1, r0
 800c3ce:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800c3d0:	4642      	mov	r2, r8
 800c3d2:	4659      	mov	r1, fp
        HAL_UART_RxCpltCallback(huart);
 800c3d4:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800c3d6:	67d1      	str	r1, [r2, #124]	; 0x7c
        huart->RxISR = NULL;
 800c3d8:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800c3da:	f7fe ffa8 	bl	800b32e <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c3de:	3d01      	subs	r5, #1
 800c3e0:	b2ad      	uxth	r5, r5
 800c3e2:	e7c1      	b.n	800c368 <UART_RxISR_8BIT_FIFOEN+0x38>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3e4:	2308      	movs	r3, #8
 800c3e6:	6802      	ldr	r2, [r0, #0]
 800c3e8:	6991      	ldr	r1, [r2, #24]
 800c3ea:	430b      	orrs	r3, r1
 800c3ec:	6193      	str	r3, [r2, #24]
 800c3ee:	e7cf      	b.n	800c390 <UART_RxISR_8BIT_FIFOEN+0x60>
 800c3f0:	fffffeff 	.word	0xfffffeff
 800c3f4:	efffffff 	.word	0xefffffff
 800c3f8:	0800c401 	.word	0x0800c401
 800c3fc:	effffffe 	.word	0xeffffffe

0800c400 <UART_RxISR_8BIT>:
{
 800c400:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c402:	0004      	movs	r4, r0
 800c404:	3408      	adds	r4, #8
 800c406:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800c408:	6803      	ldr	r3, [r0, #0]
 800c40a:	2a22      	cmp	r2, #34	; 0x22
 800c40c:	d123      	bne.n	800c456 <UART_RxISR_8BIT+0x56>
  uint16_t uhMask = huart->Mask;
 800c40e:	0002      	movs	r2, r0
 800c410:	3260      	adds	r2, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c414:	8812      	ldrh	r2, [r2, #0]
 800c416:	4013      	ands	r3, r2
 800c418:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800c41a:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800c41c:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800c41e:	6d83      	ldr	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800c420:	325e      	adds	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 800c422:	3301      	adds	r3, #1
 800c424:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800c426:	8813      	ldrh	r3, [r2, #0]
 800c428:	3b01      	subs	r3, #1
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	8013      	strh	r3, [r2, #0]
    if (huart->RxXferCount == 0U)
 800c42e:	8813      	ldrh	r3, [r2, #0]
 800c430:	b29b      	uxth	r3, r3
 800c432:	2b00      	cmp	r3, #0
 800c434:	d10e      	bne.n	800c454 <UART_RxISR_8BIT+0x54>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c436:	6802      	ldr	r2, [r0, #0]
 800c438:	4d09      	ldr	r5, [pc, #36]	; (800c460 <UART_RxISR_8BIT+0x60>)
 800c43a:	6811      	ldr	r1, [r2, #0]
 800c43c:	4029      	ands	r1, r5
 800c43e:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c440:	6891      	ldr	r1, [r2, #8]
 800c442:	3523      	adds	r5, #35	; 0x23
 800c444:	35ff      	adds	r5, #255	; 0xff
 800c446:	43a9      	bics	r1, r5
 800c448:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800c44a:	2220      	movs	r2, #32
 800c44c:	67e2      	str	r2, [r4, #124]	; 0x7c
      huart->RxISR = NULL;
 800c44e:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800c450:	f7fe ff6d 	bl	800b32e <HAL_UART_RxCpltCallback>
}
 800c454:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c456:	2208      	movs	r2, #8
 800c458:	6999      	ldr	r1, [r3, #24]
 800c45a:	430a      	orrs	r2, r1
 800c45c:	619a      	str	r2, [r3, #24]
 800c45e:	e7f9      	b.n	800c454 <UART_RxISR_8BIT+0x54>
 800c460:	fffffedf 	.word	0xfffffedf

0800c464 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.100>:
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c464:	20e0      	movs	r0, #224	; 0xe0
 800c466:	4b16      	ldr	r3, [pc, #88]	; (800c4c0 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.100+0x5c>)
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800c468:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c46a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c46c:	6851      	ldr	r1, [r2, #4]
 800c46e:	4381      	bics	r1, r0
 800c470:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c472:	2182      	movs	r1, #130	; 0x82
 800c474:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c476:	0049      	lsls	r1, r1, #1
 800c478:	4288      	cmp	r0, r1
 800c47a:	d10c      	bne.n	800c496 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.100+0x32>
 800c47c:	2080      	movs	r0, #128	; 0x80
 800c47e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c480:	0200      	lsls	r0, r0, #8
 800c482:	4281      	cmp	r1, r0
 800c484:	d003      	beq.n	800c48e <SPI_WaitFlagStateUntilTimeout.part.0.constprop.100+0x2a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c486:	2080      	movs	r0, #128	; 0x80
 800c488:	00c0      	lsls	r0, r0, #3
 800c48a:	4281      	cmp	r1, r0
 800c48c:	d103      	bne.n	800c496 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.100+0x32>
          __HAL_SPI_DISABLE(hspi);
 800c48e:	2040      	movs	r0, #64	; 0x40
 800c490:	6811      	ldr	r1, [r2, #0]
 800c492:	4381      	bics	r1, r0
 800c494:	6011      	str	r1, [r2, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c496:	2080      	movs	r0, #128	; 0x80
 800c498:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800c49a:	0180      	lsls	r0, r0, #6
 800c49c:	4281      	cmp	r1, r0
 800c49e:	d106      	bne.n	800c4ae <SPI_WaitFlagStateUntilTimeout.part.0.constprop.100+0x4a>
          SPI_RESET_CRC(hspi);
 800c4a0:	6810      	ldr	r0, [r2, #0]
 800c4a2:	4c08      	ldr	r4, [pc, #32]	; (800c4c4 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.100+0x60>)
 800c4a4:	4020      	ands	r0, r4
 800c4a6:	6010      	str	r0, [r2, #0]
 800c4a8:	6810      	ldr	r0, [r2, #0]
 800c4aa:	4301      	orrs	r1, r0
 800c4ac:	6011      	str	r1, [r2, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800c4ae:	001a      	movs	r2, r3
 800c4b0:	2101      	movs	r1, #1
 800c4b2:	32b1      	adds	r2, #177	; 0xb1
 800c4b4:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hspi);
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	33b0      	adds	r3, #176	; 0xb0
}
 800c4ba:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800c4bc:	701a      	strb	r2, [r3, #0]
}
 800c4be:	bd10      	pop	{r4, pc}
 800c4c0:	2000048c 	.word	0x2000048c
 800c4c4:	ffffdfff 	.word	0xffffdfff

0800c4c8 <HAL_NVIC_SetPriority.constprop.89>:
  * @param SubPriority the subpriority level for the IRQ channel.
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 800c4c8:	b530      	push	{r4, r5, lr}
 800c4ca:	25ff      	movs	r5, #255	; 0xff
 800c4cc:	2403      	movs	r4, #3
 800c4ce:	002a      	movs	r2, r5
 800c4d0:	b2c3      	uxtb	r3, r0
 800c4d2:	401c      	ands	r4, r3
 800c4d4:	00e4      	lsls	r4, r4, #3
 800c4d6:	40a2      	lsls	r2, r4
 800c4d8:	0189      	lsls	r1, r1, #6
 800c4da:	4029      	ands	r1, r5
 800c4dc:	43d2      	mvns	r2, r2
 800c4de:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	db0b      	blt.n	800c4fc <HAL_NVIC_SetPriority.constprop.89+0x34>
 800c4e4:	4b0c      	ldr	r3, [pc, #48]	; (800c518 <HAL_NVIC_SetPriority.constprop.89+0x50>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c4e6:	24c0      	movs	r4, #192	; 0xc0
 800c4e8:	469c      	mov	ip, r3
 800c4ea:	0880      	lsrs	r0, r0, #2
 800c4ec:	0080      	lsls	r0, r0, #2
 800c4ee:	4460      	add	r0, ip
 800c4f0:	00a4      	lsls	r4, r4, #2
 800c4f2:	5903      	ldr	r3, [r0, r4]
 800c4f4:	401a      	ands	r2, r3
 800c4f6:	430a      	orrs	r2, r1
 800c4f8:	5102      	str	r2, [r0, r4]
{
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800c4fa:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c4fc:	200f      	movs	r0, #15
 800c4fe:	4003      	ands	r3, r0
 800c500:	4806      	ldr	r0, [pc, #24]	; (800c51c <HAL_NVIC_SetPriority.constprop.89+0x54>)
 800c502:	3b08      	subs	r3, #8
 800c504:	4684      	mov	ip, r0
 800c506:	089b      	lsrs	r3, r3, #2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4463      	add	r3, ip
 800c50c:	69d8      	ldr	r0, [r3, #28]
 800c50e:	4002      	ands	r2, r0
 800c510:	430a      	orrs	r2, r1
 800c512:	61da      	str	r2, [r3, #28]
 800c514:	e7f1      	b.n	800c4fa <HAL_NVIC_SetPriority.constprop.89+0x32>
 800c516:	46c0      	nop			; (mov r8, r8)
 800c518:	e000e100 	.word	0xe000e100
 800c51c:	e000ed00 	.word	0xe000ed00

0800c520 <acc_service_get_next.constprop.66>:
 800c520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c522:	46c6      	mov	lr, r8
 800c524:	000e      	movs	r6, r1
 800c526:	b500      	push	{lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	0005      	movs	r5, r0
 800c52c:	f7fe f9a8 	bl	800a880 <acc_service_handle_valid>
 800c530:	7eb4      	ldrb	r4, [r6, #26]
 800c532:	2c00      	cmp	r4, #0
 800c534:	d011      	beq.n	800c55a <acc_service_get_next.constprop.66+0x3a>
 800c536:	6873      	ldr	r3, [r6, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d002      	beq.n	800c542 <acc_service_get_next.constprop.66+0x22>
 800c53c:	68f3      	ldr	r3, [r6, #12]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d115      	bne.n	800c56e <acc_service_get_next.constprop.66+0x4e>
 800c542:	4b24      	ldr	r3, [pc, #144]	; (800c5d4 <acc_service_get_next.constprop.66+0xb4>)
 800c544:	4a24      	ldr	r2, [pc, #144]	; (800c5d8 <acc_service_get_next.constprop.66+0xb8>)
 800c546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c548:	4924      	ldr	r1, [pc, #144]	; (800c5dc <acc_service_get_next.constprop.66+0xbc>)
 800c54a:	2000      	movs	r0, #0
 800c54c:	4798      	blx	r3
 800c54e:	2400      	movs	r4, #0
 800c550:	0020      	movs	r0, r4
 800c552:	b002      	add	sp, #8
 800c554:	bc04      	pop	{r2}
 800c556:	4690      	mov	r8, r2
 800c558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c55a:	68b3      	ldr	r3, [r6, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d106      	bne.n	800c56e <acc_service_get_next.constprop.66+0x4e>
 800c560:	4b1c      	ldr	r3, [pc, #112]	; (800c5d4 <acc_service_get_next.constprop.66+0xb4>)
 800c562:	4a1f      	ldr	r2, [pc, #124]	; (800c5e0 <acc_service_get_next.constprop.66+0xc0>)
 800c564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c566:	491d      	ldr	r1, [pc, #116]	; (800c5dc <acc_service_get_next.constprop.66+0xbc>)
 800c568:	0020      	movs	r0, r4
 800c56a:	4798      	blx	r3
 800c56c:	e7f0      	b.n	800c550 <acc_service_get_next.constprop.66+0x30>
 800c56e:	2800      	cmp	r0, #0
 800c570:	d101      	bne.n	800c576 <acc_service_get_next.constprop.66+0x56>
 800c572:	2400      	movs	r4, #0
 800c574:	e7ec      	b.n	800c550 <acc_service_get_next.constprop.66+0x30>
 800c576:	7a2b      	ldrb	r3, [r5, #8]
 800c578:	7832      	ldrb	r2, [r6, #0]
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d007      	beq.n	800c58e <acc_service_get_next.constprop.66+0x6e>
 800c57e:	9200      	str	r2, [sp, #0]
 800c580:	4a14      	ldr	r2, [pc, #80]	; (800c5d4 <acc_service_get_next.constprop.66+0xb4>)
 800c582:	4916      	ldr	r1, [pc, #88]	; (800c5dc <acc_service_get_next.constprop.66+0xbc>)
 800c584:	6d14      	ldr	r4, [r2, #80]	; 0x50
 800c586:	2000      	movs	r0, #0
 800c588:	4a16      	ldr	r2, [pc, #88]	; (800c5e4 <acc_service_get_next.constprop.66+0xc4>)
 800c58a:	47a0      	blx	r4
 800c58c:	e7f1      	b.n	800c572 <acc_service_get_next.constprop.66+0x52>
 800c58e:	7e37      	ldrb	r7, [r6, #24]
 800c590:	2f00      	cmp	r7, #0
 800c592:	d004      	beq.n	800c59e <acc_service_get_next.constprop.66+0x7e>
 800c594:	0028      	movs	r0, r5
 800c596:	f7fe fccb 	bl	800af30 <acc_service_activate>
 800c59a:	1e07      	subs	r7, r0, #0
 800c59c:	d0e9      	beq.n	800c572 <acc_service_get_next.constprop.66+0x52>
 800c59e:	7a6b      	ldrb	r3, [r5, #9]
 800c5a0:	4698      	mov	r8, r3
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00c      	beq.n	800c5c0 <acc_service_get_next.constprop.66+0xa0>
 800c5a6:	4b0b      	ldr	r3, [pc, #44]	; (800c5d4 <acc_service_get_next.constprop.66+0xb4>)
 800c5a8:	4a0f      	ldr	r2, [pc, #60]	; (800c5e8 <acc_service_get_next.constprop.66+0xc8>)
 800c5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ac:	490b      	ldr	r1, [pc, #44]	; (800c5dc <acc_service_get_next.constprop.66+0xbc>)
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	4798      	blx	r3
 800c5b2:	2400      	movs	r4, #0
 800c5b4:	2f00      	cmp	r7, #0
 800c5b6:	d0cb      	beq.n	800c550 <acc_service_get_next.constprop.66+0x30>
 800c5b8:	0028      	movs	r0, r5
 800c5ba:	f7fe f979 	bl	800a8b0 <acc_service_deactivate>
 800c5be:	e7c7      	b.n	800c550 <acc_service_get_next.constprop.66+0x30>
 800c5c0:	2401      	movs	r4, #1
 800c5c2:	692b      	ldr	r3, [r5, #16]
 800c5c4:	616e      	str	r6, [r5, #20]
 800c5c6:	cb05      	ldmia	r3!, {r0, r2}
 800c5c8:	4790      	blx	r2
 800c5ca:	7e73      	ldrb	r3, [r6, #25]
 800c5cc:	405c      	eors	r4, r3
 800c5ce:	4643      	mov	r3, r8
 800c5d0:	616b      	str	r3, [r5, #20]
 800c5d2:	e7ef      	b.n	800c5b4 <acc_service_get_next.constprop.66+0x94>
 800c5d4:	2000048c 	.word	0x2000048c
 800c5d8:	0801e4fb 	.word	0x0801e4fb
 800c5dc:	0801d3b8 	.word	0x0801d3b8
 800c5e0:	0801e518 	.word	0x0801e518
 800c5e4:	0801e52d 	.word	0x0801e52d
 800c5e8:	0801e549 	.word	0x0801e549

0800c5ec <acc_rss_integration_mem_calloc_debug.constprop.65>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	0005      	movs	r5, r0
 800c5f0:	f7f8 ff88 	bl	8005504 <acc_rss_integration_mem_alloc_debug>
 800c5f4:	1e04      	subs	r4, r0, #0
 800c5f6:	d003      	beq.n	800c600 <acc_rss_integration_mem_calloc_debug.constprop.65+0x14>
 800c5f8:	002a      	movs	r2, r5
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	f007 f806 	bl	801360c <memset>
 800c600:	0020      	movs	r0, r4
 800c602:	bd70      	pop	{r4, r5, r6, pc}

0800c604 <internal_buffer_processed_read.constprop.30>:
 800c604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c606:	46de      	mov	lr, fp
 800c608:	464e      	mov	r6, r9
 800c60a:	4645      	mov	r5, r8
 800c60c:	4657      	mov	r7, sl
 800c60e:	b5e0      	push	{r5, r6, r7, lr}
 800c610:	4b24      	ldr	r3, [pc, #144]	; (800c6a4 <internal_buffer_processed_read.constprop.30+0xa0>)
 800c612:	b085      	sub	sp, #20
 800c614:	9001      	str	r0, [sp, #4]
 800c616:	4688      	mov	r8, r1
 800c618:	0017      	movs	r7, r2
 800c61a:	2100      	movs	r1, #0
 800c61c:	2206      	movs	r2, #6
 800c61e:	a802      	add	r0, sp, #8
 800c620:	6a1e      	ldr	r6, [r3, #32]
 800c622:	f006 fff3 	bl	801360c <memset>
 800c626:	2300      	movs	r3, #0
 800c628:	4699      	mov	r9, r3
 800c62a:	3301      	adds	r3, #1
 800c62c:	4645      	mov	r5, r8
 800c62e:	469b      	mov	fp, r3
 800c630:	0876      	lsrs	r6, r6, #1
 800c632:	3e03      	subs	r6, #3
 800c634:	2f00      	cmp	r7, #0
 800c636:	d108      	bne.n	800c64a <internal_buffer_processed_read.constprop.30+0x46>
 800c638:	4640      	mov	r0, r8
 800c63a:	3006      	adds	r0, #6
 800c63c:	b005      	add	sp, #20
 800c63e:	bc3c      	pop	{r2, r3, r4, r5}
 800c640:	4690      	mov	r8, r2
 800c642:	4699      	mov	r9, r3
 800c644:	46a2      	mov	sl, r4
 800c646:	46ab      	mov	fp, r5
 800c648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c64a:	0034      	movs	r4, r6
 800c64c:	42be      	cmp	r6, r7
 800c64e:	d900      	bls.n	800c652 <internal_buffer_processed_read.constprop.30+0x4e>
 800c650:	003c      	movs	r4, r7
 800c652:	42be      	cmp	r6, r7
 800c654:	d202      	bcs.n	800c65c <internal_buffer_processed_read.constprop.30+0x58>
 800c656:	465b      	mov	r3, fp
 800c658:	421c      	tst	r4, r3
 800c65a:	d121      	bne.n	800c6a0 <internal_buffer_processed_read.constprop.30+0x9c>
 800c65c:	464a      	mov	r2, r9
 800c65e:	4b12      	ldr	r3, [pc, #72]	; (800c6a8 <internal_buffer_processed_read.constprop.30+0xa4>)
 800c660:	0029      	movs	r1, r5
 800c662:	4313      	orrs	r3, r2
 800c664:	802b      	strh	r3, [r5, #0]
 800c666:	b2a3      	uxth	r3, r4
 800c668:	469a      	mov	sl, r3
 800c66a:	3b01      	subs	r3, #1
 800c66c:	806b      	strh	r3, [r5, #2]
 800c66e:	2300      	movs	r3, #0
 800c670:	1ce2      	adds	r2, r4, #3
 800c672:	80ab      	strh	r3, [r5, #4]
 800c674:	9801      	ldr	r0, [sp, #4]
 800c676:	465b      	mov	r3, fp
 800c678:	f7f9 ff1a 	bl	80064b0 <acc_rss_integration_sensor_device_transfer>
 800c67c:	a902      	add	r1, sp, #8
 800c67e:	2206      	movs	r2, #6
 800c680:	0028      	movs	r0, r5
 800c682:	f009 fbe7 	bl	8015e54 <memcpy>
 800c686:	464b      	mov	r3, r9
 800c688:	1b3f      	subs	r7, r7, r4
 800c68a:	0064      	lsls	r4, r4, #1
 800c68c:	4453      	add	r3, sl
 800c68e:	192d      	adds	r5, r5, r4
 800c690:	b29b      	uxth	r3, r3
 800c692:	2206      	movs	r2, #6
 800c694:	0029      	movs	r1, r5
 800c696:	a802      	add	r0, sp, #8
 800c698:	4699      	mov	r9, r3
 800c69a:	f009 fbdb 	bl	8015e54 <memcpy>
 800c69e:	e7c9      	b.n	800c634 <internal_buffer_processed_read.constprop.30+0x30>
 800c6a0:	3c01      	subs	r4, #1
 800c6a2:	e7d8      	b.n	800c656 <internal_buffer_processed_read.constprop.30+0x52>
 800c6a4:	2000048c 	.word	0x2000048c
 800c6a8:	ffff8000 	.word	0xffff8000

0800c6ac <acc_sensor_reg_write>:
 800c6ac:	2380      	movs	r3, #128	; 0x80
 800c6ae:	b513      	push	{r0, r1, r4, lr}
 800c6b0:	015b      	lsls	r3, r3, #5
 800c6b2:	ac01      	add	r4, sp, #4
 800c6b4:	4319      	orrs	r1, r3
 800c6b6:	8021      	strh	r1, [r4, #0]
 800c6b8:	8062      	strh	r2, [r4, #2]
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	2202      	movs	r2, #2
 800c6be:	0021      	movs	r1, r4
 800c6c0:	f7f9 fef6 	bl	80064b0 <acc_rss_integration_sensor_device_transfer>
 800c6c4:	bd13      	pop	{r0, r1, r4, pc}

0800c6c6 <acc_diagnostic_log_data_i16.constprop.20>:
 800c6c6:	4770      	bx	lr

0800c6c8 <acc_confprogram_live_patch.constprop.16>:
 800c6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ca:	4645      	mov	r5, r8
 800c6cc:	46de      	mov	lr, fp
 800c6ce:	464e      	mov	r6, r9
 800c6d0:	4657      	mov	r7, sl
 800c6d2:	b5e0      	push	{r5, r6, r7, lr}
 800c6d4:	001d      	movs	r5, r3
 800c6d6:	4b4c      	ldr	r3, [pc, #304]	; (800c808 <acc_confprogram_live_patch.constprop.16+0x140>)
 800c6d8:	0016      	movs	r6, r2
 800c6da:	001a      	movs	r2, r3
 800c6dc:	324c      	adds	r2, #76	; 0x4c
 800c6de:	7812      	ldrb	r2, [r2, #0]
 800c6e0:	b08b      	sub	sp, #44	; 0x2c
 800c6e2:	4680      	mov	r8, r0
 800c6e4:	468b      	mov	fp, r1
 800c6e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800c6e8:	2a03      	cmp	r2, #3
 800c6ea:	d906      	bls.n	800c6fa <acc_confprogram_live_patch.constprop.16+0x32>
 800c6ec:	9400      	str	r4, [sp, #0]
 800c6ee:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 800c6f0:	4a46      	ldr	r2, [pc, #280]	; (800c80c <acc_confprogram_live_patch.constprop.16+0x144>)
 800c6f2:	002b      	movs	r3, r5
 800c6f4:	4946      	ldr	r1, [pc, #280]	; (800c810 <acc_confprogram_live_patch.constprop.16+0x148>)
 800c6f6:	2004      	movs	r0, #4
 800c6f8:	47b8      	blx	r7
 800c6fa:	0023      	movs	r3, r4
 800c6fc:	1e5a      	subs	r2, r3, #1
 800c6fe:	4193      	sbcs	r3, r2
 800c700:	00ed      	lsls	r5, r5, #3
 800c702:	1976      	adds	r6, r6, r5
 800c704:	2500      	movs	r5, #0
 800c706:	b2db      	uxtb	r3, r3
 800c708:	9305      	str	r3, [sp, #20]
 800c70a:	8873      	ldrh	r3, [r6, #2]
 800c70c:	429d      	cmp	r5, r3
 800c70e:	d306      	bcc.n	800c71e <acc_confprogram_live_patch.constprop.16+0x56>
 800c710:	b00b      	add	sp, #44	; 0x2c
 800c712:	bc3c      	pop	{r2, r3, r4, r5}
 800c714:	4690      	mov	r8, r2
 800c716:	4699      	mov	r9, r3
 800c718:	46a2      	mov	sl, r4
 800c71a:	46ab      	mov	fp, r5
 800c71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c71e:	2206      	movs	r2, #6
 800c720:	6873      	ldr	r3, [r6, #4]
 800c722:	436a      	muls	r2, r5
 800c724:	469c      	mov	ip, r3
 800c726:	4462      	add	r2, ip
 800c728:	7810      	ldrb	r0, [r2, #0]
 800c72a:	2801      	cmp	r0, #1
 800c72c:	d059      	beq.n	800c7e2 <acc_confprogram_live_patch.constprop.16+0x11a>
 800c72e:	2800      	cmp	r0, #0
 800c730:	d00b      	beq.n	800c74a <acc_confprogram_live_patch.constprop.16+0x82>
 800c732:	2802      	cmp	r0, #2
 800c734:	d05e      	beq.n	800c7f4 <acc_confprogram_live_patch.constprop.16+0x12c>
 800c736:	4b34      	ldr	r3, [pc, #208]	; (800c808 <acc_confprogram_live_patch.constprop.16+0x140>)
 800c738:	4935      	ldr	r1, [pc, #212]	; (800c810 <acc_confprogram_live_patch.constprop.16+0x148>)
 800c73a:	2000      	movs	r0, #0
 800c73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c73e:	4a35      	ldr	r2, [pc, #212]	; (800c814 <acc_confprogram_live_patch.constprop.16+0x14c>)
 800c740:	4798      	blx	r3
 800c742:	21e7      	movs	r1, #231	; 0xe7
 800c744:	4834      	ldr	r0, [pc, #208]	; (800c818 <acc_confprogram_live_patch.constprop.16+0x150>)
 800c746:	f7f8 fc1b 	bl	8004f80 <acc_assert_fail>
 800c74a:	8853      	ldrh	r3, [r2, #2]
 800c74c:	4699      	mov	r9, r3
 800c74e:	7913      	ldrb	r3, [r2, #4]
 800c750:	9303      	str	r3, [sp, #12]
 800c752:	7953      	ldrb	r3, [r2, #5]
 800c754:	9304      	str	r3, [sp, #16]
 800c756:	2301      	movs	r3, #1
 800c758:	9a04      	ldr	r2, [sp, #16]
 800c75a:	469a      	mov	sl, r3
 800c75c:	4093      	lsls	r3, r2
 800c75e:	429c      	cmp	r4, r3
 800c760:	d30c      	bcc.n	800c77c <acc_confprogram_live_patch.constprop.16+0xb4>
 800c762:	3b01      	subs	r3, #1
 800c764:	9301      	str	r3, [sp, #4]
 800c766:	4b28      	ldr	r3, [pc, #160]	; (800c808 <acc_confprogram_live_patch.constprop.16+0x140>)
 800c768:	9400      	str	r4, [sp, #0]
 800c76a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800c76c:	4928      	ldr	r1, [pc, #160]	; (800c810 <acc_confprogram_live_patch.constprop.16+0x148>)
 800c76e:	464b      	mov	r3, r9
 800c770:	4a2a      	ldr	r2, [pc, #168]	; (800c81c <acc_confprogram_live_patch.constprop.16+0x154>)
 800c772:	47a0      	blx	r4
 800c774:	2129      	movs	r1, #41	; 0x29
 800c776:	4828      	ldr	r0, [pc, #160]	; (800c818 <acc_confprogram_live_patch.constprop.16+0x150>)
 800c778:	f7f8 fc02 	bl	8004f80 <acc_assert_fail>
 800c77c:	464a      	mov	r2, r9
 800c77e:	4b28      	ldr	r3, [pc, #160]	; (800c820 <acc_confprogram_live_patch.constprop.16+0x158>)
 800c780:	af07      	add	r7, sp, #28
 800c782:	4313      	orrs	r3, r2
 800c784:	803b      	strh	r3, [r7, #0]
 800c786:	4653      	mov	r3, sl
 800c788:	0001      	movs	r1, r0
 800c78a:	80b8      	strh	r0, [r7, #4]
 800c78c:	a804      	add	r0, sp, #16
 800c78e:	4684      	mov	ip, r0
 800c790:	807b      	strh	r3, [r7, #2]
 800c792:	2312      	movs	r3, #18
 800c794:	4463      	add	r3, ip
 800c796:	2204      	movs	r2, #4
 800c798:	0018      	movs	r0, r3
 800c79a:	f006 ff37 	bl	801360c <memset>
 800c79e:	4653      	mov	r3, sl
 800c7a0:	2205      	movs	r2, #5
 800c7a2:	0039      	movs	r1, r7
 800c7a4:	4640      	mov	r0, r8
 800c7a6:	f7f9 fe83 	bl	80064b0 <acc_rss_integration_sensor_device_transfer>
 800c7aa:	aa04      	add	r2, sp, #16
 800c7ac:	4694      	mov	ip, r2
 800c7ae:	2312      	movs	r3, #18
 800c7b0:	4463      	add	r3, ip
 800c7b2:	0018      	movs	r0, r3
 800c7b4:	a906      	add	r1, sp, #24
 800c7b6:	f7ff f9e7 	bl	800bb88 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800c7ba:	2220      	movs	r2, #32
 800c7bc:	9b04      	ldr	r3, [sp, #16]
 800c7be:	9903      	ldr	r1, [sp, #12]
 800c7c0:	1ad2      	subs	r2, r2, r3
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	40d3      	lsrs	r3, r2
 800c7c8:	9a03      	ldr	r2, [sp, #12]
 800c7ca:	4640      	mov	r0, r8
 800c7cc:	4093      	lsls	r3, r2
 800c7ce:	9a06      	ldr	r2, [sp, #24]
 800c7d0:	439a      	bics	r2, r3
 800c7d2:	0023      	movs	r3, r4
 800c7d4:	408b      	lsls	r3, r1
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	f7f9 fe87 	bl	80064ec <acc_sensor_r2_conf_write_instr>
 800c7de:	3501      	adds	r5, #1
 800c7e0:	e793      	b.n	800c70a <acc_confprogram_live_patch.constprop.16+0x42>
 800c7e2:	9905      	ldr	r1, [sp, #20]
 800c7e4:	8853      	ldrh	r3, [r2, #2]
 800c7e6:	4640      	mov	r0, r8
 800c7e8:	8892      	ldrh	r2, [r2, #4]
 800c7ea:	9100      	str	r1, [sp, #0]
 800c7ec:	4659      	mov	r1, fp
 800c7ee:	f7ff f9d1 	bl	800bb94 <acc_confprogram_modify_runif_sensor.constprop.19>
 800c7f2:	e7f4      	b.n	800c7de <acc_confprogram_live_patch.constprop.16+0x116>
 800c7f4:	4261      	negs	r1, r4
 800c7f6:	4161      	adcs	r1, r4
 800c7f8:	8853      	ldrh	r3, [r2, #2]
 800c7fa:	4640      	mov	r0, r8
 800c7fc:	8892      	ldrh	r2, [r2, #4]
 800c7fe:	9100      	str	r1, [sp, #0]
 800c800:	4659      	mov	r1, fp
 800c802:	f7ff f9c7 	bl	800bb94 <acc_confprogram_modify_runif_sensor.constprop.19>
 800c806:	e7ea      	b.n	800c7de <acc_confprogram_live_patch.constprop.16+0x116>
 800c808:	2000048c 	.word	0x2000048c
 800c80c:	0801e55f 	.word	0x0801e55f
 800c810:	0801d637 	.word	0x0801d637
 800c814:	0801e5ea 	.word	0x0801e5ea
 800c818:	0801e5b9 	.word	0x0801e5b9
 800c81c:	0801e581 	.word	0x0801e581
 800c820:	ffffa000 	.word	0xffffa000

0800c824 <get_dt.constprop.10>:
 800c824:	b510      	push	{r4, lr}
 800c826:	f7fb fa39 	bl	8007c9c <acc_rss_integration_get_sensor_reference_frequency>
 800c82a:	1c01      	adds	r1, r0, #0
 800c82c:	1c04      	adds	r4, r0, #0
 800c82e:	4809      	ldr	r0, [pc, #36]	; (800c854 <get_dt.constprop.10+0x30>)
 800c830:	f003 fd18 	bl	8010264 <__aeabi_fdiv>
 800c834:	f007 f8dc 	bl	80139f0 <roundf>
 800c838:	1c01      	adds	r1, r0, #0
 800c83a:	1c20      	adds	r0, r4, #0
 800c83c:	f003 fe24 	bl	8010488 <__aeabi_fmul>
 800c840:	1c01      	adds	r1, r0, #0
 800c842:	20fe      	movs	r0, #254	; 0xfe
 800c844:	0580      	lsls	r0, r0, #22
 800c846:	f003 fd0d 	bl	8010264 <__aeabi_fdiv>
 800c84a:	4903      	ldr	r1, [pc, #12]	; (800c858 <get_dt.constprop.10+0x34>)
 800c84c:	f003 fd0a 	bl	8010264 <__aeabi_fdiv>
 800c850:	bd10      	pop	{r4, pc}
 800c852:	46c0      	nop			; (mov r8, r8)
 800c854:	4f1502f9 	.word	0x4f1502f9
 800c858:	42f80000 	.word	0x42f80000

0800c85c <points_to_meter.constprop.9>:
 800c85c:	b570      	push	{r4, r5, r6, lr}
 800c85e:	0005      	movs	r5, r0
 800c860:	f7ff ffe0 	bl	800c824 <get_dt.constprop.10>
 800c864:	1c04      	adds	r4, r0, #0
 800c866:	0028      	movs	r0, r5
 800c868:	f004 fd42 	bl	80112f0 <__aeabi_i2f>
 800c86c:	1c21      	adds	r1, r4, #0
 800c86e:	f003 fe0b 	bl	8010488 <__aeabi_fmul>
 800c872:	4904      	ldr	r1, [pc, #16]	; (800c884 <points_to_meter.constprop.9+0x28>)
 800c874:	f003 fe08 	bl	8010488 <__aeabi_fmul>
 800c878:	21fc      	movs	r1, #252	; 0xfc
 800c87a:	0589      	lsls	r1, r1, #22
 800c87c:	f003 fe04 	bl	8010488 <__aeabi_fmul>
 800c880:	bd70      	pop	{r4, r5, r6, pc}
 800c882:	46c0      	nop			; (mov r8, r8)
 800c884:	4d8ef3c2 	.word	0x4d8ef3c2

0800c888 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800c88a:	0005      	movs	r5, r0
 800c88c:	357c      	adds	r5, #124	; 0x7c
 800c88e:	782b      	ldrb	r3, [r5, #0]
{
 800c890:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 800c892:	2002      	movs	r0, #2
 800c894:	2b01      	cmp	r3, #1
 800c896:	d017      	beq.n	800c8c8 <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 800c898:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800c89a:	3801      	subs	r0, #1
 800c89c:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c89e:	1d26      	adds	r6, r4, #4
 800c8a0:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	4382      	bics	r2, r0
 800c8aa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c8ac:	689a      	ldr	r2, [r3, #8]
 800c8ae:	4807      	ldr	r0, [pc, #28]	; (800c8cc <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 800c8b0:	4002      	ands	r2, r0
 800c8b2:	4311      	orrs	r1, r2
 800c8b4:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c8b6:	0020      	movs	r0, r4
 800c8b8:	f7ff f99c 	bl	800bbf4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8bc:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800c8be:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8c0:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c8c2:	2320      	movs	r3, #32
 800c8c4:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800c8c6:	7028      	strb	r0, [r5, #0]
}
 800c8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8ca:	46c0      	nop			; (mov r8, r8)
 800c8cc:	f1ffffff 	.word	0xf1ffffff

0800c8d0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800c8d2:	0005      	movs	r5, r0
 800c8d4:	357c      	adds	r5, #124	; 0x7c
 800c8d6:	782b      	ldrb	r3, [r5, #0]
{
 800c8d8:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 800c8da:	2002      	movs	r0, #2
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d017      	beq.n	800c910 <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 800c8e0:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800c8e2:	3801      	subs	r0, #1
 800c8e4:	7028      	strb	r0, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8e6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c8e8:	1d26      	adds	r6, r4, #4
 800c8ea:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8ec:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c8ee:	6813      	ldr	r3, [r2, #0]
 800c8f0:	4383      	bics	r3, r0
 800c8f2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c8f4:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c8f6:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c8f8:	00db      	lsls	r3, r3, #3
 800c8fa:	08db      	lsrs	r3, r3, #3
 800c8fc:	4319      	orrs	r1, r3
 800c8fe:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c900:	f7ff f978 	bl	800bbf4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c904:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800c906:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c908:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c90a:	2320      	movs	r3, #32
 800c90c:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800c90e:	7028      	strb	r0, [r5, #0]
}
 800c910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c912 <HAL_UARTEx_DisableFifoMode>:
{
 800c912:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800c914:	0004      	movs	r4, r0
 800c916:	347c      	adds	r4, #124	; 0x7c
 800c918:	7822      	ldrb	r2, [r4, #0]
 800c91a:	2302      	movs	r3, #2
 800c91c:	2a01      	cmp	r2, #1
 800c91e:	d010      	beq.n	800c942 <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 800c920:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c922:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c924:	1d05      	adds	r5, r0, #4
 800c926:	3322      	adds	r3, #34	; 0x22
 800c928:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c92a:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c92c:	6813      	ldr	r3, [r2, #0]
 800c92e:	43b3      	bics	r3, r6
 800c930:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c932:	4b05      	ldr	r3, [pc, #20]	; (800c948 <HAL_UARTEx_DisableFifoMode+0x36>)
 800c934:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c936:	2300      	movs	r3, #0
 800c938:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c93a:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c93c:	2220      	movs	r2, #32
 800c93e:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800c940:	7023      	strb	r3, [r4, #0]
}
 800c942:	0018      	movs	r0, r3
 800c944:	bd70      	pop	{r4, r5, r6, pc}
 800c946:	46c0      	nop			; (mov r8, r8)
 800c948:	dfffffff 	.word	0xdfffffff

0800c94c <HAL_UART_Receive_IT>:
{
 800c94c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800c94e:	0006      	movs	r6, r0
 800c950:	3608      	adds	r6, #8
 800c952:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
{
 800c954:	0003      	movs	r3, r0
    return HAL_BUSY;
 800c956:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800c958:	2c20      	cmp	r4, #32
 800c95a:	d152      	bne.n	800ca02 <HAL_UART_Receive_IT+0xb6>
      return HAL_ERROR;
 800c95c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800c95e:	2900      	cmp	r1, #0
 800c960:	d04f      	beq.n	800ca02 <HAL_UART_Receive_IT+0xb6>
 800c962:	2a00      	cmp	r2, #0
 800c964:	d04d      	beq.n	800ca02 <HAL_UART_Receive_IT+0xb6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c966:	2580      	movs	r5, #128	; 0x80
 800c968:	689c      	ldr	r4, [r3, #8]
 800c96a:	016d      	lsls	r5, r5, #5
 800c96c:	42ac      	cmp	r4, r5
 800c96e:	d104      	bne.n	800c97a <HAL_UART_Receive_IT+0x2e>
 800c970:	691d      	ldr	r5, [r3, #16]
 800c972:	2d00      	cmp	r5, #0
 800c974:	d101      	bne.n	800c97a <HAL_UART_Receive_IT+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800c976:	4201      	tst	r1, r0
 800c978:	d143      	bne.n	800ca02 <HAL_UART_Receive_IT+0xb6>
    __HAL_LOCK(huart);
 800c97a:	001d      	movs	r5, r3
 800c97c:	357c      	adds	r5, #124	; 0x7c
 800c97e:	782f      	ldrb	r7, [r5, #0]
    return HAL_BUSY;
 800c980:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800c982:	2f01      	cmp	r7, #1
 800c984:	d03d      	beq.n	800ca02 <HAL_UART_Receive_IT+0xb6>
 800c986:	3801      	subs	r0, #1
 800c988:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 800c98a:	6599      	str	r1, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800c98c:	0019      	movs	r1, r3
    huart->RxISR       = NULL;
 800c98e:	2000      	movs	r0, #0
    UART_MASK_COMPUTATION(huart);
 800c990:	2780      	movs	r7, #128	; 0x80
    huart->RxXferSize  = Size;
 800c992:	315c      	adds	r1, #92	; 0x5c
 800c994:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 800c996:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 800c998:	017f      	lsls	r7, r7, #5
    huart->RxISR       = NULL;
 800c99a:	66d8      	str	r0, [r3, #108]	; 0x6c
 800c99c:	3104      	adds	r1, #4
    UART_MASK_COMPUTATION(huart);
 800c99e:	42bc      	cmp	r4, r7
 800c9a0:	d133      	bne.n	800ca0a <HAL_UART_Receive_IT+0xbe>
 800c9a2:	6918      	ldr	r0, [r3, #16]
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d12d      	bne.n	800ca04 <HAL_UART_Receive_IT+0xb8>
 800c9a8:	482a      	ldr	r0, [pc, #168]	; (800ca54 <HAL_UART_Receive_IT+0x108>)
 800c9aa:	8008      	strh	r0, [r1, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9ac:	0019      	movs	r1, r3
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	3188      	adds	r1, #136	; 0x88
 800c9b2:	6008      	str	r0, [r1, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c9b4:	2122      	movs	r1, #34	; 0x22
 800c9b6:	67f1      	str	r1, [r6, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9b8:	6819      	ldr	r1, [r3, #0]
 800c9ba:	3001      	adds	r0, #1
 800c9bc:	688e      	ldr	r6, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c9be:	6e5f      	ldr	r7, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9c0:	4330      	orrs	r0, r6
 800c9c2:	6088      	str	r0, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c9c4:	2680      	movs	r6, #128	; 0x80
 800c9c6:	2080      	movs	r0, #128	; 0x80
 800c9c8:	05b6      	lsls	r6, r6, #22
 800c9ca:	0140      	lsls	r0, r0, #5
 800c9cc:	42b7      	cmp	r7, r6
 800c9ce:	d130      	bne.n	800ca32 <HAL_UART_Receive_IT+0xe6>
 800c9d0:	001e      	movs	r6, r3
 800c9d2:	3668      	adds	r6, #104	; 0x68
 800c9d4:	8836      	ldrh	r6, [r6, #0]
 800c9d6:	4296      	cmp	r6, r2
 800c9d8:	d82b      	bhi.n	800ca32 <HAL_UART_Receive_IT+0xe6>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c9da:	4a1f      	ldr	r2, [pc, #124]	; (800ca58 <HAL_UART_Receive_IT+0x10c>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9dc:	4284      	cmp	r4, r0
 800c9de:	d103      	bne.n	800c9e8 <HAL_UART_Receive_IT+0x9c>
 800c9e0:	6918      	ldr	r0, [r3, #16]
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d100      	bne.n	800c9e8 <HAL_UART_Receive_IT+0x9c>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c9e6:	4a1d      	ldr	r2, [pc, #116]	; (800ca5c <HAL_UART_Receive_IT+0x110>)
      __HAL_UNLOCK(huart);
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	66da      	str	r2, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9ec:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 800c9ee:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9f0:	680a      	ldr	r2, [r1, #0]
 800c9f2:	005b      	lsls	r3, r3, #1
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	600b      	str	r3, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c9f8:	2380      	movs	r3, #128	; 0x80
 800c9fa:	688a      	ldr	r2, [r1, #8]
 800c9fc:	055b      	lsls	r3, r3, #21
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	608b      	str	r3, [r1, #8]
}
 800ca02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 800ca04:	20ff      	movs	r0, #255	; 0xff
 800ca06:	8008      	strh	r0, [r1, #0]
 800ca08:	e7d0      	b.n	800c9ac <HAL_UART_Receive_IT+0x60>
 800ca0a:	2c00      	cmp	r4, #0
 800ca0c:	d105      	bne.n	800ca1a <HAL_UART_Receive_IT+0xce>
 800ca0e:	6918      	ldr	r0, [r3, #16]
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d0f7      	beq.n	800ca04 <HAL_UART_Receive_IT+0xb8>
 800ca14:	207f      	movs	r0, #127	; 0x7f
 800ca16:	8008      	strh	r0, [r1, #0]
 800ca18:	e7c8      	b.n	800c9ac <HAL_UART_Receive_IT+0x60>
 800ca1a:	2780      	movs	r7, #128	; 0x80
 800ca1c:	057f      	lsls	r7, r7, #21
 800ca1e:	42bc      	cmp	r4, r7
 800ca20:	d105      	bne.n	800ca2e <HAL_UART_Receive_IT+0xe2>
 800ca22:	6918      	ldr	r0, [r3, #16]
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d0f5      	beq.n	800ca14 <HAL_UART_Receive_IT+0xc8>
 800ca28:	203f      	movs	r0, #63	; 0x3f
 800ca2a:	8008      	strh	r0, [r1, #0]
 800ca2c:	e7be      	b.n	800c9ac <HAL_UART_Receive_IT+0x60>
 800ca2e:	8008      	strh	r0, [r1, #0]
 800ca30:	e7bc      	b.n	800c9ac <HAL_UART_Receive_IT+0x60>
        huart->RxISR = UART_RxISR_8BIT;
 800ca32:	4a0b      	ldr	r2, [pc, #44]	; (800ca60 <HAL_UART_Receive_IT+0x114>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca34:	4284      	cmp	r4, r0
 800ca36:	d103      	bne.n	800ca40 <HAL_UART_Receive_IT+0xf4>
 800ca38:	6918      	ldr	r0, [r3, #16]
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d100      	bne.n	800ca40 <HAL_UART_Receive_IT+0xf4>
        huart->RxISR = UART_RxISR_16BIT;
 800ca3e:	4a09      	ldr	r2, [pc, #36]	; (800ca64 <HAL_UART_Receive_IT+0x118>)
      __HAL_UNLOCK(huart);
 800ca40:	2000      	movs	r0, #0
 800ca42:	66da      	str	r2, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ca44:	2390      	movs	r3, #144	; 0x90
      __HAL_UNLOCK(huart);
 800ca46:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ca48:	680a      	ldr	r2, [r1, #0]
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	600b      	str	r3, [r1, #0]
 800ca50:	e7d7      	b.n	800ca02 <HAL_UART_Receive_IT+0xb6>
 800ca52:	46c0      	nop			; (mov r8, r8)
 800ca54:	000001ff 	.word	0x000001ff
 800ca58:	0800c331 	.word	0x0800c331
 800ca5c:	0800c205 	.word	0x0800c205
 800ca60:	0800c401 	.word	0x0800c401
 800ca64:	0800c2d1 	.word	0x0800c2d1

0800ca68 <HAL_UART_Transmit_IT>:
{
 800ca68:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800ca6a:	1d06      	adds	r6, r0, #4
 800ca6c:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
{
 800ca6e:	0003      	movs	r3, r0
    return HAL_BUSY;
 800ca70:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800ca72:	2c20      	cmp	r4, #32
 800ca74:	d138      	bne.n	800cae8 <HAL_UART_Transmit_IT+0x80>
      return HAL_ERROR;
 800ca76:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800ca78:	2900      	cmp	r1, #0
 800ca7a:	d035      	beq.n	800cae8 <HAL_UART_Transmit_IT+0x80>
 800ca7c:	2a00      	cmp	r2, #0
 800ca7e:	d033      	beq.n	800cae8 <HAL_UART_Transmit_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca80:	2480      	movs	r4, #128	; 0x80
 800ca82:	689d      	ldr	r5, [r3, #8]
 800ca84:	0164      	lsls	r4, r4, #5
 800ca86:	42a5      	cmp	r5, r4
 800ca88:	d104      	bne.n	800ca94 <HAL_UART_Transmit_IT+0x2c>
 800ca8a:	691c      	ldr	r4, [r3, #16]
 800ca8c:	2c00      	cmp	r4, #0
 800ca8e:	d101      	bne.n	800ca94 <HAL_UART_Transmit_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800ca90:	4201      	tst	r1, r0
 800ca92:	d129      	bne.n	800cae8 <HAL_UART_Transmit_IT+0x80>
    __HAL_LOCK(huart);
 800ca94:	001c      	movs	r4, r3
 800ca96:	347c      	adds	r4, #124	; 0x7c
 800ca98:	7827      	ldrb	r7, [r4, #0]
    return HAL_BUSY;
 800ca9a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800ca9c:	2f01      	cmp	r7, #1
 800ca9e:	d023      	beq.n	800cae8 <HAL_UART_Transmit_IT+0x80>
 800caa0:	3801      	subs	r0, #1
 800caa2:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 800caa4:	6519      	str	r1, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800caa6:	0019      	movs	r1, r3
 800caa8:	3154      	adds	r1, #84	; 0x54
 800caaa:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 800caac:	804a      	strh	r2, [r1, #2]
    huart->TxISR       = NULL;
 800caae:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cab0:	3134      	adds	r1, #52	; 0x34
    huart->TxISR       = NULL;
 800cab2:	671a      	str	r2, [r3, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cab4:	600a      	str	r2, [r1, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cab6:	3221      	adds	r2, #33	; 0x21
 800cab8:	67f2      	str	r2, [r6, #124]	; 0x7c
 800caba:	2180      	movs	r1, #128	; 0x80
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800cabc:	2280      	movs	r2, #128	; 0x80
 800cabe:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800cac0:	0592      	lsls	r2, r2, #22
 800cac2:	0149      	lsls	r1, r1, #5
 800cac4:	4290      	cmp	r0, r2
 800cac6:	d110      	bne.n	800caea <HAL_UART_Transmit_IT+0x82>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800cac8:	4a10      	ldr	r2, [pc, #64]	; (800cb0c <HAL_UART_Transmit_IT+0xa4>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caca:	428d      	cmp	r5, r1
 800cacc:	d103      	bne.n	800cad6 <HAL_UART_Transmit_IT+0x6e>
 800cace:	6919      	ldr	r1, [r3, #16]
 800cad0:	2900      	cmp	r1, #0
 800cad2:	d100      	bne.n	800cad6 <HAL_UART_Transmit_IT+0x6e>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800cad4:	4a0e      	ldr	r2, [pc, #56]	; (800cb10 <HAL_UART_Transmit_IT+0xa8>)
      __HAL_UNLOCK(huart);
 800cad6:	2000      	movs	r0, #0
 800cad8:	671a      	str	r2, [r3, #112]	; 0x70
 800cada:	7020      	strb	r0, [r4, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	2380      	movs	r3, #128	; 0x80
 800cae0:	6891      	ldr	r1, [r2, #8]
 800cae2:	041b      	lsls	r3, r3, #16
 800cae4:	430b      	orrs	r3, r1
 800cae6:	6093      	str	r3, [r2, #8]
}
 800cae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->TxISR = UART_TxISR_8BIT;
 800caea:	4a0a      	ldr	r2, [pc, #40]	; (800cb14 <HAL_UART_Transmit_IT+0xac>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caec:	428d      	cmp	r5, r1
 800caee:	d103      	bne.n	800caf8 <HAL_UART_Transmit_IT+0x90>
 800caf0:	6919      	ldr	r1, [r3, #16]
 800caf2:	2900      	cmp	r1, #0
 800caf4:	d100      	bne.n	800caf8 <HAL_UART_Transmit_IT+0x90>
        huart->TxISR = UART_TxISR_16BIT;
 800caf6:	4a08      	ldr	r2, [pc, #32]	; (800cb18 <HAL_UART_Transmit_IT+0xb0>)
      __HAL_UNLOCK(huart);
 800caf8:	2000      	movs	r0, #0
 800cafa:	671a      	str	r2, [r3, #112]	; 0x70
 800cafc:	7020      	strb	r0, [r4, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	2380      	movs	r3, #128	; 0x80
 800cb02:	6811      	ldr	r1, [r2, #0]
 800cb04:	430b      	orrs	r3, r1
 800cb06:	6013      	str	r3, [r2, #0]
 800cb08:	e7ee      	b.n	800cae8 <HAL_UART_Transmit_IT+0x80>
 800cb0a:	46c0      	nop			; (mov r8, r8)
 800cb0c:	0800bcb9 	.word	0x0800bcb9
 800cb10:	0800bc5d 	.word	0x0800bc5d
 800cb14:	0800bd51 	.word	0x0800bd51
 800cb18:	0800bd11 	.word	0x0800bd11

0800cb1c <HAL_UART_Transmit>:
{
 800cb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1e:	46de      	mov	lr, fp
 800cb20:	464e      	mov	r6, r9
 800cb22:	4645      	mov	r5, r8
 800cb24:	4657      	mov	r7, sl
 800cb26:	469b      	mov	fp, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800cb28:	1d03      	adds	r3, r0, #4
 800cb2a:	4699      	mov	r9, r3
 800cb2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800cb2e:	b5e0      	push	{r5, r6, r7, lr}
 800cb30:	0004      	movs	r4, r0
 800cb32:	000d      	movs	r5, r1
    return HAL_BUSY;
 800cb34:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800cb36:	2b20      	cmp	r3, #32
 800cb38:	d14c      	bne.n	800cbd4 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 800cb3a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800cb3c:	2900      	cmp	r1, #0
 800cb3e:	d049      	beq.n	800cbd4 <HAL_UART_Transmit+0xb8>
 800cb40:	2a00      	cmp	r2, #0
 800cb42:	d047      	beq.n	800cbd4 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb44:	2380      	movs	r3, #128	; 0x80
 800cb46:	68a1      	ldr	r1, [r4, #8]
 800cb48:	015b      	lsls	r3, r3, #5
 800cb4a:	4299      	cmp	r1, r3
 800cb4c:	d104      	bne.n	800cb58 <HAL_UART_Transmit+0x3c>
 800cb4e:	6923      	ldr	r3, [r4, #16]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d101      	bne.n	800cb58 <HAL_UART_Transmit+0x3c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800cb54:	4205      	tst	r5, r0
 800cb56:	d13d      	bne.n	800cbd4 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 800cb58:	237c      	movs	r3, #124	; 0x7c
 800cb5a:	4698      	mov	r8, r3
 800cb5c:	44a0      	add	r8, r4
 800cb5e:	4643      	mov	r3, r8
 800cb60:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800cb62:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d035      	beq.n	800cbd4 <HAL_UART_Transmit+0xb8>
 800cb68:	2301      	movs	r3, #1
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	7003      	strb	r3, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb6e:	0023      	movs	r3, r4
 800cb70:	2600      	movs	r6, #0
 800cb72:	3388      	adds	r3, #136	; 0x88
 800cb74:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb76:	4648      	mov	r0, r9
 800cb78:	2321      	movs	r3, #33	; 0x21
 800cb7a:	67c3      	str	r3, [r0, #124]	; 0x7c
  return uwTick;
 800cb7c:	4b21      	ldr	r3, [pc, #132]	; (800cc04 <HAL_UART_Transmit+0xe8>)
    huart->TxXferCount = Size;
 800cb7e:	0027      	movs	r7, r4
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	3756      	adds	r7, #86	; 0x56
 800cb84:	469a      	mov	sl, r3
    huart->TxXferSize  = Size;
 800cb86:	0023      	movs	r3, r4
 800cb88:	3354      	adds	r3, #84	; 0x54
 800cb8a:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb8c:	2380      	movs	r3, #128	; 0x80
    huart->TxXferCount = Size;
 800cb8e:	803a      	strh	r2, [r7, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb90:	015b      	lsls	r3, r3, #5
 800cb92:	4299      	cmp	r1, r3
 800cb94:	d104      	bne.n	800cba0 <HAL_UART_Transmit+0x84>
 800cb96:	6923      	ldr	r3, [r4, #16]
 800cb98:	42b3      	cmp	r3, r6
 800cb9a:	d101      	bne.n	800cba0 <HAL_UART_Transmit+0x84>
 800cb9c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800cb9e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800cba0:	883b      	ldrh	r3, [r7, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d10d      	bne.n	800cbc2 <HAL_UART_Transmit+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cba6:	465b      	mov	r3, fp
 800cba8:	4652      	mov	r2, sl
 800cbaa:	2140      	movs	r1, #64	; 0x40
 800cbac:	0020      	movs	r0, r4
 800cbae:	f7fe ff85 	bl	800babc <UART_WaitOnFlagUntilTimeout.constprop.69>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d10d      	bne.n	800cbd2 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800cbb6:	2320      	movs	r3, #32
 800cbb8:	464a      	mov	r2, r9
 800cbba:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 800cbbc:	4643      	mov	r3, r8
 800cbbe:	7018      	strb	r0, [r3, #0]
 800cbc0:	e008      	b.n	800cbd4 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbc2:	465b      	mov	r3, fp
 800cbc4:	4652      	mov	r2, sl
 800cbc6:	2180      	movs	r1, #128	; 0x80
 800cbc8:	0020      	movs	r0, r4
 800cbca:	f7fe ff77 	bl	800babc <UART_WaitOnFlagUntilTimeout.constprop.69>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d006      	beq.n	800cbe0 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 800cbd2:	2003      	movs	r0, #3
}
 800cbd4:	bc3c      	pop	{r2, r3, r4, r5}
 800cbd6:	4690      	mov	r8, r2
 800cbd8:	4699      	mov	r9, r3
 800cbda:	46a2      	mov	sl, r4
 800cbdc:	46ab      	mov	fp, r5
 800cbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe0:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800cbe2:	2d00      	cmp	r5, #0
 800cbe4:	d109      	bne.n	800cbfa <HAL_UART_Transmit+0xde>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cbe6:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800cbe8:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cbea:	05db      	lsls	r3, r3, #23
 800cbec:	0ddb      	lsrs	r3, r3, #23
 800cbee:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800cbf0:	883b      	ldrh	r3, [r7, #0]
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	803b      	strh	r3, [r7, #0]
 800cbf8:	e7d2      	b.n	800cba0 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cbfa:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800cbfc:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cbfe:	6293      	str	r3, [r2, #40]	; 0x28
 800cc00:	e7f6      	b.n	800cbf0 <HAL_UART_Transmit+0xd4>
 800cc02:	46c0      	nop			; (mov r8, r8)
 800cc04:	2000048c 	.word	0x2000048c

0800cc08 <HAL_UART_DeInit>:
{
 800cc08:	b570      	push	{r4, r5, r6, lr}
 800cc0a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800cc0c:	2001      	movs	r0, #1
  if (huart == NULL)
 800cc0e:	2c00      	cmp	r4, #0
 800cc10:	d032      	beq.n	800cc78 <HAL_UART_DeInit+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 800cc12:	2324      	movs	r3, #36	; 0x24
 800cc14:	1d25      	adds	r5, r4, #4
 800cc16:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	4382      	bics	r2, r0
 800cc1e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 800cc20:	2200      	movs	r2, #0
 800cc22:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800cc24:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800cc26:	609a      	str	r2, [r3, #8]
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 800cc28:	4a1a      	ldr	r2, [pc, #104]	; (800cc94 <HAL_UART_DeInit+0x8c>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d125      	bne.n	800cc7a <HAL_UART_DeInit+0x72>
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11 [PA9]     ------> USART1_CTS
    PA12 [PA10]     ------> USART1_RTS 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800cc2e:	20f0      	movs	r0, #240	; 0xf0
    __HAL_RCC_USART1_CLK_DISABLE();
 800cc30:	4a19      	ldr	r2, [pc, #100]	; (800cc98 <HAL_UART_DeInit+0x90>)
 800cc32:	491a      	ldr	r1, [pc, #104]	; (800cc9c <HAL_UART_DeInit+0x94>)
 800cc34:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800cc36:	0140      	lsls	r0, r0, #5
    __HAL_RCC_USART1_CLK_DISABLE();
 800cc38:	400b      	ands	r3, r1
 800cc3a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800cc3c:	f7fe fec8 	bl	800b9d0 <HAL_GPIO_DeInit.constprop.88>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800cc40:	6f60      	ldr	r0, [r4, #116]	; 0x74
  if (NULL == hdma)
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d001      	beq.n	800cc4a <HAL_UART_DeInit+0x42>
 800cc46:	f7ff fa3d 	bl	800c0c4 <HAL_DMA_DeInit.part.1>
    HAL_DMA_DeInit(huart->hdmarx);
 800cc4a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	d001      	beq.n	800cc54 <HAL_UART_DeInit+0x4c>
 800cc50:	f7ff fa38 	bl	800c0c4 <HAL_DMA_DeInit.part.1>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cc54:	2280      	movs	r2, #128	; 0x80
 800cc56:	4b12      	ldr	r3, [pc, #72]	; (800cca0 <HAL_UART_DeInit+0x98>)
 800cc58:	0512      	lsls	r2, r2, #20
 800cc5a:	67da      	str	r2, [r3, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cc5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cc60:	f3bf 8f6f 	isb	sy
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc64:	0023      	movs	r3, r4
 800cc66:	0022      	movs	r2, r4
 800cc68:	2000      	movs	r0, #0
 800cc6a:	3308      	adds	r3, #8
 800cc6c:	3288      	adds	r2, #136	; 0x88
  __HAL_UNLOCK(huart);
 800cc6e:	347c      	adds	r4, #124	; 0x7c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc70:	6010      	str	r0, [r2, #0]
  huart->gState = HAL_UART_STATE_RESET;
 800cc72:	67e8      	str	r0, [r5, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800cc74:	67d8      	str	r0, [r3, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800cc76:	7020      	strb	r0, [r4, #0]
}
 800cc78:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 800cc7a:	4a0a      	ldr	r2, [pc, #40]	; (800cca4 <HAL_UART_DeInit+0x9c>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d1f1      	bne.n	800cc64 <HAL_UART_DeInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800cc80:	4a05      	ldr	r2, [pc, #20]	; (800cc98 <HAL_UART_DeInit+0x90>)
 800cc82:	4909      	ldr	r1, [pc, #36]	; (800cca8 <HAL_UART_DeInit+0xa0>)
 800cc84:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800cc86:	200c      	movs	r0, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 800cc88:	400b      	ands	r3, r1
 800cc8a:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800cc8c:	f7fe fea0 	bl	800b9d0 <HAL_GPIO_DeInit.constprop.88>
 800cc90:	e7e8      	b.n	800cc64 <HAL_UART_DeInit+0x5c>
 800cc92:	46c0      	nop			; (mov r8, r8)
 800cc94:	40013800 	.word	0x40013800
 800cc98:	40021000 	.word	0x40021000
 800cc9c:	ffffbfff 	.word	0xffffbfff
 800cca0:	e000e104 	.word	0xe000e104
 800cca4:	40004400 	.word	0x40004400
 800cca8:	fffdffff 	.word	0xfffdffff

0800ccac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ccac:	2800      	cmp	r0, #0
 800ccae:	db05      	blt.n	800ccbc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ccb0:	231f      	movs	r3, #31
 800ccb2:	4018      	ands	r0, r3
 800ccb4:	3b1e      	subs	r3, #30
 800ccb6:	4083      	lsls	r3, r0
 800ccb8:	4a01      	ldr	r2, [pc, #4]	; (800ccc0 <HAL_NVIC_EnableIRQ+0x14>)
 800ccba:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ccbc:	4770      	bx	lr
 800ccbe:	46c0      	nop			; (mov r8, r8)
 800ccc0:	e000e100 	.word	0xe000e100

0800ccc4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  __HAL_LOCK(hrtc);
 800ccc4:	0002      	movs	r2, r0
 800ccc6:	2102      	movs	r1, #2
{
 800ccc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800ccca:	3228      	adds	r2, #40	; 0x28
 800cccc:	7814      	ldrb	r4, [r2, #0]
{
 800ccce:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 800ccd0:	0008      	movs	r0, r1
 800ccd2:	2c01      	cmp	r4, #1
 800ccd4:	d02a      	beq.n	800cd2c <HAL_RTCEx_DeactivateWakeUpTimer+0x68>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ccd6:	001c      	movs	r4, r3
  __HAL_LOCK(hrtc);
 800ccd8:	3801      	subs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ccda:	3429      	adds	r4, #41	; 0x29
  __HAL_LOCK(hrtc);
 800ccdc:	7010      	strb	r0, [r2, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ccde:	7021      	strb	r1, [r4, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	31c8      	adds	r1, #200	; 0xc8
 800cce4:	6259      	str	r1, [r3, #36]	; 0x24
 800cce6:	3977      	subs	r1, #119	; 0x77
 800cce8:	6259      	str	r1, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ccea:	6999      	ldr	r1, [r3, #24]
 800ccec:	4810      	ldr	r0, [pc, #64]	; (800cd30 <HAL_RTCEx_DeactivateWakeUpTimer+0x6c>)
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ccee:	2604      	movs	r6, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ccf0:	4001      	ands	r1, r0
 800ccf2:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800ccf4:	6999      	ldr	r1, [r3, #24]
 800ccf6:	480f      	ldr	r0, [pc, #60]	; (800cd34 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>)
 800ccf8:	4d0f      	ldr	r5, [pc, #60]	; (800cd38 <HAL_RTCEx_DeactivateWakeUpTimer+0x74>)
 800ccfa:	4001      	ands	r1, r0
 800ccfc:	6199      	str	r1, [r3, #24]
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ccfe:	21fa      	movs	r1, #250	; 0xfa
 800cd00:	0089      	lsls	r1, r1, #2
 800cd02:	468c      	mov	ip, r1
 800cd04:	682f      	ldr	r7, [r5, #0]
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800cd06:	68d9      	ldr	r1, [r3, #12]
 800cd08:	4031      	ands	r1, r6
 800cd0a:	d006      	beq.n	800cd1a <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd0c:	21ff      	movs	r1, #255	; 0xff
  __HAL_UNLOCK(hrtc);
 800cd0e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd10:	6259      	str	r1, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800cd12:	2301      	movs	r3, #1
 800cd14:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hrtc);
 800cd16:	7010      	strb	r0, [r2, #0]
 800cd18:	e008      	b.n	800cd2c <HAL_RTCEx_DeactivateWakeUpTimer+0x68>
 800cd1a:	6828      	ldr	r0, [r5, #0]
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cd1c:	1bc0      	subs	r0, r0, r7
 800cd1e:	4560      	cmp	r0, ip
 800cd20:	d9f1      	bls.n	800cd06 <HAL_RTCEx_DeactivateWakeUpTimer+0x42>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd22:	20ff      	movs	r0, #255	; 0xff
 800cd24:	6258      	str	r0, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd26:	38fc      	subs	r0, #252	; 0xfc
 800cd28:	7020      	strb	r0, [r4, #0]
      __HAL_UNLOCK(hrtc);
 800cd2a:	7011      	strb	r1, [r2, #0]
}
 800cd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd2e:	46c0      	nop			; (mov r8, r8)
 800cd30:	fffffbff 	.word	0xfffffbff
 800cd34:	ffffbfff 	.word	0xffffbfff
 800cd38:	2000048c 	.word	0x2000048c

0800cd3c <HAL_RTCEx_SetWakeUpTimer_IT>:
{
 800cd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd3e:	4646      	mov	r6, r8
 800cd40:	46d6      	mov	lr, sl
 800cd42:	464f      	mov	r7, r9
  __HAL_LOCK(hrtc);
 800cd44:	0004      	movs	r4, r0
 800cd46:	2502      	movs	r5, #2
{
 800cd48:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(hrtc);
 800cd4a:	3428      	adds	r4, #40	; 0x28
 800cd4c:	7826      	ldrb	r6, [r4, #0]
{
 800cd4e:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 800cd50:	0028      	movs	r0, r5
 800cd52:	2e01      	cmp	r6, #1
 800cd54:	d04b      	beq.n	800cdee <HAL_RTCEx_SetWakeUpTimer_IT+0xb2>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd56:	001e      	movs	r6, r3
  __HAL_LOCK(hrtc);
 800cd58:	3801      	subs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd5a:	3629      	adds	r6, #41	; 0x29
  __HAL_LOCK(hrtc);
 800cd5c:	7020      	strb	r0, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd5e:	7035      	strb	r5, [r6, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	30c9      	adds	r0, #201	; 0xc9
 800cd64:	6258      	str	r0, [r3, #36]	; 0x24
 800cd66:	3877      	subs	r0, #119	; 0x77
 800cd68:	6258      	str	r0, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800cd6a:	6998      	ldr	r0, [r3, #24]
 800cd6c:	4d22      	ldr	r5, [pc, #136]	; (800cdf8 <HAL_RTCEx_SetWakeUpTimer_IT+0xbc>)
 800cd6e:	4028      	ands	r0, r5
 800cd70:	6198      	str	r0, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800cd72:	2004      	movs	r0, #4
 800cd74:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 800cd76:	4305      	orrs	r5, r0
 800cd78:	65dd      	str	r5, [r3, #92]	; 0x5c
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cd7a:	4d20      	ldr	r5, [pc, #128]	; (800cdfc <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>)
 800cd7c:	68ed      	ldr	r5, [r5, #12]
 800cd7e:	066d      	lsls	r5, r5, #25
 800cd80:	d40b      	bmi.n	800cd9a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
 800cd82:	4d1f      	ldr	r5, [pc, #124]	; (800ce00 <HAL_RTCEx_SetWakeUpTimer_IT+0xc4>)
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800cd84:	4682      	mov	sl, r0
 800cd86:	46ac      	mov	ip, r5
 800cd88:	682d      	ldr	r5, [r5, #0]
 800cd8a:	46a8      	mov	r8, r5
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cd8c:	25fa      	movs	r5, #250	; 0xfa
 800cd8e:	00ad      	lsls	r5, r5, #2
 800cd90:	46a9      	mov	r9, r5
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800cd92:	4650      	mov	r0, sl
 800cd94:	68dd      	ldr	r5, [r3, #12]
 800cd96:	4005      	ands	r5, r0
 800cd98:	d01e      	beq.n	800cdd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800cd9a:	2007      	movs	r0, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800cd9c:	6159      	str	r1, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800cd9e:	6999      	ldr	r1, [r3, #24]
 800cda0:	4381      	bics	r1, r0
 800cda2:	6199      	str	r1, [r3, #24]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800cda4:	6999      	ldr	r1, [r3, #24]
 800cda6:	430a      	orrs	r2, r1
 800cda8:	619a      	str	r2, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800cdaa:	2280      	movs	r2, #128	; 0x80
 800cdac:	4915      	ldr	r1, [pc, #84]	; (800ce04 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>)
 800cdae:	0312      	lsls	r2, r2, #12
 800cdb0:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
 800cdb2:	4302      	orrs	r2, r0
 800cdb4:	67ca      	str	r2, [r1, #124]	; 0x7c
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800cdb6:	2280      	movs	r2, #128	; 0x80
 800cdb8:	6999      	ldr	r1, [r3, #24]
 800cdba:	01d2      	lsls	r2, r2, #7
 800cdbc:	430a      	orrs	r2, r1
 800cdbe:	619a      	str	r2, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800cdc0:	2280      	movs	r2, #128	; 0x80
 800cdc2:	6999      	ldr	r1, [r3, #24]
 800cdc4:	00d2      	lsls	r2, r2, #3
 800cdc6:	430a      	orrs	r2, r1
 800cdc8:	619a      	str	r2, [r3, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdca:	22ff      	movs	r2, #255	; 0xff
  __HAL_UNLOCK(hrtc);
 800cdcc:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdce:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(hrtc);
 800cdd4:	7020      	strb	r0, [r4, #0]
 800cdd6:	e00a      	b.n	800cdee <HAL_RTCEx_SetWakeUpTimer_IT+0xb2>
 800cdd8:	4667      	mov	r7, ip
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cdda:	4640      	mov	r0, r8
 800cddc:	683f      	ldr	r7, [r7, #0]
 800cdde:	1a3f      	subs	r7, r7, r0
 800cde0:	454f      	cmp	r7, r9
 800cde2:	d9d6      	bls.n	800cd92 <HAL_RTCEx_SetWakeUpTimer_IT+0x56>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cde4:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cde6:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cde8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cdea:	7030      	strb	r0, [r6, #0]
        __HAL_UNLOCK(hrtc);
 800cdec:	7025      	strb	r5, [r4, #0]
}
 800cdee:	bc1c      	pop	{r2, r3, r4}
 800cdf0:	4690      	mov	r8, r2
 800cdf2:	4699      	mov	r9, r3
 800cdf4:	46a2      	mov	sl, r4
 800cdf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdf8:	fffffbff 	.word	0xfffffbff
 800cdfc:	40002800 	.word	0x40002800
 800ce00:	2000048c 	.word	0x2000048c
 800ce04:	40021804 	.word	0x40021804

0800ce08 <acc_integration_sleep_us.constprop.91>:
void acc_integration_sleep_us(uint32_t time_usec)
 800ce08:	b570      	push	{r4, r5, r6, lr}
	rtc_wakeup_triggered = false;
 800ce0a:	4d12      	ldr	r5, [pc, #72]	; (800ce54 <acc_integration_sleep_us.constprop.91+0x4c>)
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	002c      	movs	r4, r5
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800ce10:	0028      	movs	r0, r5
	rtc_wakeup_triggered = false;
 800ce12:	3438      	adds	r4, #56	; 0x38
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800ce14:	303c      	adds	r0, #60	; 0x3c
 800ce16:	2203      	movs	r2, #3
 800ce18:	211f      	movs	r1, #31
	rtc_wakeup_triggered = false;
 800ce1a:	7023      	strb	r3, [r4, #0]
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800ce1c:	f7ff ff8e 	bl	800cd3c <HAL_RTCEx_SetWakeUpTimer_IT>
	while (!rtc_wakeup_triggered)
 800ce20:	7822      	ldrb	r2, [r4, #0]
 800ce22:	2a00      	cmp	r2, #0
 800ce24:	d006      	beq.n	800ce34 <acc_integration_sleep_us.constprop.91+0x2c>
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 800ce26:	0028      	movs	r0, r5
	rtc_wakeup_triggered = false;
 800ce28:	2200      	movs	r2, #0
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 800ce2a:	303c      	adds	r0, #60	; 0x3c
	rtc_wakeup_triggered = false;
 800ce2c:	7022      	strb	r2, [r4, #0]
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 800ce2e:	f7ff ff49 	bl	800ccc4 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 800ce32:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800ce34:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 800ce36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ce3a:	f3bf 8f6f 	isb	sy
		if (!rtc_wakeup_triggered)
 800ce3e:	7822      	ldrb	r2, [r4, #0]
 800ce40:	2a00      	cmp	r2, #0
 800ce42:	d100      	bne.n	800ce46 <acc_integration_sleep_us.constprop.91+0x3e>
			__WFI();
 800ce44:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 800ce46:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 800ce48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	e7e6      	b.n	800ce20 <acc_integration_sleep_us.constprop.91+0x18>
 800ce52:	46c0      	nop			; (mov r8, r8)
 800ce54:	2000050c 	.word	0x2000050c

0800ce58 <HAL_RTC_SetAlarm_IT>:
{
 800ce58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5a:	4657      	mov	r7, sl
 800ce5c:	4645      	mov	r5, r8
 800ce5e:	46de      	mov	lr, fp
 800ce60:	464e      	mov	r6, r9
 800ce62:	b5e0      	push	{r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800ce64:	0005      	movs	r5, r0
{
 800ce66:	000f      	movs	r7, r1
 800ce68:	2102      	movs	r1, #2
  __HAL_LOCK(hrtc);
 800ce6a:	3528      	adds	r5, #40	; 0x28
 800ce6c:	782c      	ldrb	r4, [r5, #0]
{
 800ce6e:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 800ce70:	0008      	movs	r0, r1
 800ce72:	2c01      	cmp	r4, #1
 800ce74:	d100      	bne.n	800ce78 <HAL_RTC_SetAlarm_IT+0x20>
 800ce76:	e089      	b.n	800cf8c <HAL_RTC_SetAlarm_IT+0x134>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ce78:	001e      	movs	r6, r3
  __HAL_LOCK(hrtc);
 800ce7a:	3801      	subs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ce7c:	3629      	adds	r6, #41	; 0x29
  __HAL_LOCK(hrtc);
 800ce7e:	7028      	strb	r0, [r5, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ce80:	7031      	strb	r1, [r6, #0]
 800ce82:	681c      	ldr	r4, [r3, #0]
 800ce84:	787b      	ldrb	r3, [r7, #1]
 800ce86:	313e      	adds	r1, #62	; 0x3e
 800ce88:	4698      	mov	r8, r3
 800ce8a:	78bb      	ldrb	r3, [r7, #2]
 800ce8c:	7838      	ldrb	r0, [r7, #0]
 800ce8e:	4699      	mov	r9, r3
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ce90:	69a3      	ldr	r3, [r4, #24]
 800ce92:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 800ce94:	2a00      	cmp	r2, #0
 800ce96:	d15a      	bne.n	800cf4e <HAL_RTC_SetAlarm_IT+0xf6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d100      	bne.n	800ce9e <HAL_RTC_SetAlarm_IT+0x46>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ce9c:	70fb      	strb	r3, [r7, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800ce9e:	f7fe ff7d 	bl	800bd9c <RTC_ByteToBcd2>
 800cea2:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800cea4:	4640      	mov	r0, r8
 800cea6:	f7fe ff79 	bl	800bd9c <RTC_ByteToBcd2>
 800ceaa:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800ceac:	4648      	mov	r0, r9
 800ceae:	f7fe ff75 	bl	800bd9c <RTC_ByteToBcd2>
 800ceb2:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800ceb4:	1c7b      	adds	r3, r7, #1
 800ceb6:	7fd8      	ldrb	r0, [r3, #31]
 800ceb8:	f7fe ff70 	bl	800bd9c <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cebc:	697a      	ldr	r2, [r7, #20]
 800cebe:	69fb      	ldr	r3, [r7, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800cec0:	0600      	lsls	r0, r0, #24
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cec2:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800cec4:	78fa      	ldrb	r2, [r7, #3]
 800cec6:	0592      	lsls	r2, r2, #22
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cec8:	4313      	orrs	r3, r2
 800ceca:	464a      	mov	r2, r9
 800cecc:	4313      	orrs	r3, r2
 800cece:	4652      	mov	r2, sl
 800ced0:	0412      	lsls	r2, r2, #16
 800ced2:	4313      	orrs	r3, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ced4:	4642      	mov	r2, r8
 800ced6:	0212      	lsls	r2, r2, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800ced8:	4313      	orrs	r3, r2
 800ceda:	4318      	orrs	r0, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cedc:	69ba      	ldr	r2, [r7, #24]
 800cede:	687b      	ldr	r3, [r7, #4]
  if(sAlarm->Alarm == RTC_ALARM_A)
 800cee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cee2:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cee4:	22ca      	movs	r2, #202	; 0xca
 800cee6:	6262      	str	r2, [r4, #36]	; 0x24
 800cee8:	3a77      	subs	r2, #119	; 0x77
 800ceea:	6262      	str	r2, [r4, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 800ceec:	32ad      	adds	r2, #173	; 0xad
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ceee:	469a      	mov	sl, r3
 800cef0:	4f3c      	ldr	r7, [pc, #240]	; (800cfe4 <HAL_RTC_SetAlarm_IT+0x18c>)
  if(sAlarm->Alarm == RTC_ALARM_A)
 800cef2:	4291      	cmp	r1, r2
 800cef4:	d150      	bne.n	800cf98 <HAL_RTC_SetAlarm_IT+0x140>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cef6:	69a2      	ldr	r2, [r4, #24]
 800cef8:	493b      	ldr	r1, [pc, #236]	; (800cfe8 <HAL_RTC_SetAlarm_IT+0x190>)
 800cefa:	400a      	ands	r2, r1
 800cefc:	61a2      	str	r2, [r4, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800cefe:	2201      	movs	r2, #1
 800cf00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800cf02:	4693      	mov	fp, r2
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800cf04:	4311      	orrs	r1, r2
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cf06:	22fa      	movs	r2, #250	; 0xfa
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800cf08:	65e1      	str	r1, [r4, #92]	; 0x5c
 800cf0a:	6839      	ldr	r1, [r7, #0]
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cf0c:	0092      	lsls	r2, r2, #2
 800cf0e:	4688      	mov	r8, r1
 800cf10:	4691      	mov	r9, r2
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800cf12:	465b      	mov	r3, fp
 800cf14:	68e2      	ldr	r2, [r4, #12]
 800cf16:	401a      	ands	r2, r3
 800cf18:	d02e      	beq.n	800cf78 <HAL_RTC_SetAlarm_IT+0x120>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cf1a:	4653      	mov	r3, sl
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800cf1c:	6420      	str	r0, [r4, #64]	; 0x40
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cf1e:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800cf20:	2380      	movs	r3, #128	; 0x80
 800cf22:	69a2      	ldr	r2, [r4, #24]
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	4313      	orrs	r3, r2
 800cf28:	61a3      	str	r3, [r4, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800cf2a:	2380      	movs	r3, #128	; 0x80
 800cf2c:	69a2      	ldr	r2, [r4, #24]
 800cf2e:	015b      	lsls	r3, r3, #5
 800cf30:	4313      	orrs	r3, r2
 800cf32:	61a3      	str	r3, [r4, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800cf34:	2380      	movs	r3, #128	; 0x80
 800cf36:	4a2d      	ldr	r2, [pc, #180]	; (800cfec <HAL_RTC_SetAlarm_IT+0x194>)
 800cf38:	031b      	lsls	r3, r3, #12
 800cf3a:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  __HAL_UNLOCK(hrtc);
 800cf3c:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800cf3e:	430b      	orrs	r3, r1
 800cf40:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf42:	23ff      	movs	r3, #255	; 0xff
 800cf44:	6263      	str	r3, [r4, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800cf46:	3bfe      	subs	r3, #254	; 0xfe
 800cf48:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(hrtc);
 800cf4a:	7028      	strb	r0, [r5, #0]
 800cf4c:	e01e      	b.n	800cf8c <HAL_RTC_SetAlarm_IT+0x134>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d100      	bne.n	800cf54 <HAL_RTC_SetAlarm_IT+0xfc>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cf52:	70fb      	strb	r3, [r7, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cf54:	697a      	ldr	r2, [r7, #20]
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	0400      	lsls	r0, r0, #16
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	464a      	mov	r2, r9
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	4318      	orrs	r0, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800cf62:	4643      	mov	r3, r8
 800cf64:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cf66:	4318      	orrs	r0, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cf6c:	4318      	orrs	r0, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800cf6e:	1c7b      	adds	r3, r7, #1
 800cf70:	7fdb      	ldrb	r3, [r3, #31]
 800cf72:	061b      	lsls	r3, r3, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800cf74:	4318      	orrs	r0, r3
 800cf76:	e7b1      	b.n	800cedc <HAL_RTC_SetAlarm_IT+0x84>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cf78:	4641      	mov	r1, r8
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	1a5b      	subs	r3, r3, r1
 800cf7e:	454b      	cmp	r3, r9
 800cf80:	d9c7      	bls.n	800cf12 <HAL_RTC_SetAlarm_IT+0xba>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf82:	23ff      	movs	r3, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf84:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf86:	6263      	str	r3, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf88:	7030      	strb	r0, [r6, #0]
        __HAL_UNLOCK(hrtc);
 800cf8a:	702a      	strb	r2, [r5, #0]
}
 800cf8c:	bc3c      	pop	{r2, r3, r4, r5}
 800cf8e:	4690      	mov	r8, r2
 800cf90:	4699      	mov	r9, r3
 800cf92:	46a2      	mov	sl, r4
 800cf94:	46ab      	mov	fp, r5
 800cf96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800cf98:	69a2      	ldr	r2, [r4, #24]
 800cf9a:	4915      	ldr	r1, [pc, #84]	; (800cff0 <HAL_RTC_SetAlarm_IT+0x198>)
 800cf9c:	400a      	ands	r2, r1
 800cf9e:	61a2      	str	r2, [r4, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800cfa0:	2202      	movs	r2, #2
 800cfa2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800cfa4:	4693      	mov	fp, r2
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800cfa6:	4311      	orrs	r1, r2
 800cfa8:	65e1      	str	r1, [r4, #92]	; 0x5c
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cfae:	23fa      	movs	r3, #250	; 0xfa
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4699      	mov	r9, r3
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800cfb4:	465b      	mov	r3, fp
 800cfb6:	68e2      	ldr	r2, [r4, #12]
 800cfb8:	401a      	ands	r2, r3
 800cfba:	d00d      	beq.n	800cfd8 <HAL_RTC_SetAlarm_IT+0x180>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800cfbc:	4653      	mov	r3, sl
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800cfbe:	64a0      	str	r0, [r4, #72]	; 0x48
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800cfc0:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cfc2:	2380      	movs	r3, #128	; 0x80
 800cfc4:	69a2      	ldr	r2, [r4, #24]
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	61a3      	str	r3, [r4, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800cfcc:	2380      	movs	r3, #128	; 0x80
 800cfce:	69a2      	ldr	r2, [r4, #24]
 800cfd0:	019b      	lsls	r3, r3, #6
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	61a3      	str	r3, [r4, #24]
 800cfd6:	e7ad      	b.n	800cf34 <HAL_RTC_SetAlarm_IT+0xdc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cfd8:	4641      	mov	r1, r8
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	1a5b      	subs	r3, r3, r1
 800cfde:	454b      	cmp	r3, r9
 800cfe0:	d9e8      	bls.n	800cfb4 <HAL_RTC_SetAlarm_IT+0x15c>
 800cfe2:	e7ce      	b.n	800cf82 <HAL_RTC_SetAlarm_IT+0x12a>
 800cfe4:	2000048c 	.word	0x2000048c
 800cfe8:	fffffeff 	.word	0xfffffeff
 800cfec:	40021804 	.word	0x40021804
 800cff0:	fffffdff 	.word	0xfffffdff

0800cff4 <HAL_RTC_SetDate>:
 __HAL_LOCK(hrtc);
 800cff4:	2328      	movs	r3, #40	; 0x28
{
 800cff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cff8:	4646      	mov	r6, r8
 __HAL_LOCK(hrtc);
 800cffa:	4698      	mov	r8, r3
{
 800cffc:	46d6      	mov	lr, sl
 800cffe:	464f      	mov	r7, r9
 __HAL_LOCK(hrtc);
 800d000:	4480      	add	r8, r0
 800d002:	4643      	mov	r3, r8
{
 800d004:	b5c0      	push	{r6, r7, lr}
 800d006:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 800d008:	7819      	ldrb	r1, [r3, #0]
 800d00a:	2302      	movs	r3, #2
{
 800d00c:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 800d00e:	0018      	movs	r0, r3
 800d010:	2901      	cmp	r1, #1
 800d012:	d040      	beq.n	800d096 <HAL_RTC_SetDate+0xa2>
 800d014:	2101      	movs	r1, #1
 800d016:	4640      	mov	r0, r8
 800d018:	7001      	strb	r1, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d01a:	3128      	adds	r1, #40	; 0x28
 800d01c:	4689      	mov	r9, r1
 800d01e:	44a9      	add	r9, r5
 800d020:	4649      	mov	r1, r9
 800d022:	700b      	strb	r3, [r1, #0]
 800d024:	7837      	ldrb	r7, [r6, #0]
 800d026:	78f0      	ldrb	r0, [r6, #3]
 800d028:	7873      	ldrb	r3, [r6, #1]
 800d02a:	78b4      	ldrb	r4, [r6, #2]
 800d02c:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d02e:	2a00      	cmp	r2, #0
 800d030:	d136      	bne.n	800d0a0 <HAL_RTC_SetDate+0xac>
 800d032:	3210      	adds	r2, #16
 800d034:	4213      	tst	r3, r2
 800d036:	d002      	beq.n	800d03e <HAL_RTC_SetDate+0x4a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d038:	4393      	bics	r3, r2
 800d03a:	330a      	adds	r3, #10
 800d03c:	7073      	strb	r3, [r6, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d03e:	f7fe fead 	bl	800bd9c <RTC_ByteToBcd2>
 800d042:	4682      	mov	sl, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d044:	7870      	ldrb	r0, [r6, #1]
 800d046:	f7fe fea9 	bl	800bd9c <RTC_ByteToBcd2>
 800d04a:	0006      	movs	r6, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d04c:	0020      	movs	r0, r4
 800d04e:	f7fe fea5 	bl	800bd9c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d052:	4653      	mov	r3, sl
 800d054:	4307      	orrs	r7, r0
 800d056:	041c      	lsls	r4, r3, #16
 800d058:	433c      	orrs	r4, r7
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d05a:	0236      	lsls	r6, r6, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d05c:	4334      	orrs	r4, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d05e:	22ca      	movs	r2, #202	; 0xca
 800d060:	682b      	ldr	r3, [r5, #0]
  status = RTC_EnterInitMode(hrtc);
 800d062:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d064:	625a      	str	r2, [r3, #36]	; 0x24
 800d066:	3a77      	subs	r2, #119	; 0x77
 800d068:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800d06a:	f7fe fea2 	bl	800bdb2 <RTC_EnterInitMode>
  if(status == HAL_OK)
 800d06e:	2800      	cmp	r0, #0
 800d070:	d106      	bne.n	800d080 <HAL_RTC_SetDate+0x8c>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d072:	480e      	ldr	r0, [pc, #56]	; (800d0ac <HAL_RTC_SetDate+0xb8>)
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	4004      	ands	r4, r0
 800d078:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 800d07a:	0028      	movs	r0, r5
 800d07c:	f7fe fed4 	bl	800be28 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d080:	22ff      	movs	r2, #255	; 0xff
 800d082:	682b      	ldr	r3, [r5, #0]
 800d084:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800d086:	2800      	cmp	r0, #0
 800d088:	d102      	bne.n	800d090 <HAL_RTC_SetDate+0x9c>
    hrtc->State = HAL_RTC_STATE_READY;
 800d08a:	2301      	movs	r3, #1
 800d08c:	464a      	mov	r2, r9
 800d08e:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hrtc);
 800d090:	2300      	movs	r3, #0
 800d092:	4642      	mov	r2, r8
 800d094:	7013      	strb	r3, [r2, #0]
}
 800d096:	bc1c      	pop	{r2, r3, r4}
 800d098:	4690      	mov	r8, r2
 800d09a:	4699      	mov	r9, r3
 800d09c:	46a2      	mov	sl, r4
 800d09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d0a0:	0400      	lsls	r0, r0, #16
 800d0a2:	4307      	orrs	r7, r0
 800d0a4:	433c      	orrs	r4, r7
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d0a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d0a8:	431c      	orrs	r4, r3
 800d0aa:	e7d8      	b.n	800d05e <HAL_RTC_SetDate+0x6a>
 800d0ac:	00ffff3f 	.word	0x00ffff3f

0800d0b0 <HAL_RTC_SetTime>:
{
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800d0b2:	2328      	movs	r3, #40	; 0x28
{
 800d0b4:	4645      	mov	r5, r8
  __HAL_LOCK(hrtc);
 800d0b6:	4698      	mov	r8, r3
{
 800d0b8:	46de      	mov	lr, fp
 800d0ba:	4657      	mov	r7, sl
 800d0bc:	464e      	mov	r6, r9
  __HAL_LOCK(hrtc);
 800d0be:	4480      	add	r8, r0
 800d0c0:	4643      	mov	r3, r8
{
 800d0c2:	b5e0      	push	{r5, r6, r7, lr}
 800d0c4:	4693      	mov	fp, r2
  __HAL_LOCK(hrtc);
 800d0c6:	781a      	ldrb	r2, [r3, #0]
 800d0c8:	2302      	movs	r3, #2
{
 800d0ca:	0005      	movs	r5, r0
 800d0cc:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 800d0ce:	0018      	movs	r0, r3
 800d0d0:	2a01      	cmp	r2, #1
 800d0d2:	d04c      	beq.n	800d16e <HAL_RTC_SetTime+0xbe>
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	4641      	mov	r1, r8
 800d0d8:	700a      	strb	r2, [r1, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d0da:	3228      	adds	r2, #40	; 0x28
 800d0dc:	4691      	mov	r9, r2
 800d0de:	44a9      	add	r9, r5
 800d0e0:	464a      	mov	r2, r9
 800d0e2:	7013      	strb	r3, [r2, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d0e4:	22ca      	movs	r2, #202	; 0xca
 800d0e6:	682b      	ldr	r3, [r5, #0]
  status = RTC_EnterInitMode(hrtc);
 800d0e8:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d0ea:	625a      	str	r2, [r3, #36]	; 0x24
 800d0ec:	3a77      	subs	r2, #119	; 0x77
 800d0ee:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800d0f0:	f7fe fe5f 	bl	800bdb2 <RTC_EnterInitMode>
  if(status == HAL_OK)
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d12f      	bne.n	800d158 <HAL_RTC_SetTime+0xa8>
 800d0f8:	78a3      	ldrb	r3, [r4, #2]
 800d0fa:	682e      	ldr	r6, [r5, #0]
 800d0fc:	469a      	mov	sl, r3
    if(Format == RTC_FORMAT_BIN)
 800d0fe:	465b      	mov	r3, fp
 800d100:	2240      	movs	r2, #64	; 0x40
 800d102:	7820      	ldrb	r0, [r4, #0]
 800d104:	7867      	ldrb	r7, [r4, #1]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d137      	bne.n	800d17a <HAL_RTC_SetTime+0xca>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d10a:	69b3      	ldr	r3, [r6, #24]
 800d10c:	4013      	ands	r3, r2
 800d10e:	d100      	bne.n	800d112 <HAL_RTC_SetTime+0x62>
        sTime->TimeFormat = 0x00U;
 800d110:	70e3      	strb	r3, [r4, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d112:	f7fe fe43 	bl	800bd9c <RTC_ByteToBcd2>
 800d116:	4683      	mov	fp, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d118:	0038      	movs	r0, r7
 800d11a:	f7fe fe3f 	bl	800bd9c <RTC_ByteToBcd2>
 800d11e:	0007      	movs	r7, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d120:	4650      	mov	r0, sl
 800d122:	f7fe fe3b 	bl	800bd9c <RTC_ByteToBcd2>
 800d126:	0003      	movs	r3, r0
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d128:	78e0      	ldrb	r0, [r4, #3]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d12a:	023f      	lsls	r7, r7, #8
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d12c:	0580      	lsls	r0, r0, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d12e:	4318      	orrs	r0, r3
 800d130:	465b      	mov	r3, fp
 800d132:	041b      	lsls	r3, r3, #16
 800d134:	4318      	orrs	r0, r3
 800d136:	4338      	orrs	r0, r7
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d138:	4b16      	ldr	r3, [pc, #88]	; (800d194 <HAL_RTC_SetTime+0xe4>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d13a:	4a17      	ldr	r2, [pc, #92]	; (800d198 <HAL_RTC_SetTime+0xe8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d13c:	4018      	ands	r0, r3
 800d13e:	6030      	str	r0, [r6, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d140:	69b3      	ldr	r3, [r6, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d142:	6921      	ldr	r1, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d144:	4013      	ands	r3, r2
 800d146:	61b3      	str	r3, [r6, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d148:	68e3      	ldr	r3, [r4, #12]
 800d14a:	69b2      	ldr	r2, [r6, #24]
 800d14c:	430b      	orrs	r3, r1
 800d14e:	4313      	orrs	r3, r2
 800d150:	61b3      	str	r3, [r6, #24]
    status = RTC_ExitInitMode(hrtc);
 800d152:	0028      	movs	r0, r5
 800d154:	f7fe fe68 	bl	800be28 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d158:	22ff      	movs	r2, #255	; 0xff
 800d15a:	682b      	ldr	r3, [r5, #0]
 800d15c:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800d15e:	2800      	cmp	r0, #0
 800d160:	d102      	bne.n	800d168 <HAL_RTC_SetTime+0xb8>
   hrtc->State = HAL_RTC_STATE_READY;
 800d162:	2301      	movs	r3, #1
 800d164:	464a      	mov	r2, r9
 800d166:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hrtc);
 800d168:	2300      	movs	r3, #0
 800d16a:	4642      	mov	r2, r8
 800d16c:	7013      	strb	r3, [r2, #0]
}
 800d16e:	bc3c      	pop	{r2, r3, r4, r5}
 800d170:	4690      	mov	r8, r2
 800d172:	4699      	mov	r9, r3
 800d174:	46a2      	mov	sl, r4
 800d176:	46ab      	mov	fp, r5
 800d178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d17a:	69b3      	ldr	r3, [r6, #24]
 800d17c:	4013      	ands	r3, r2
 800d17e:	d100      	bne.n	800d182 <HAL_RTC_SetTime+0xd2>
        sTime->TimeFormat = 0x00U;
 800d180:	70e3      	strb	r3, [r4, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d182:	4653      	mov	r3, sl
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d184:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d186:	023f      	lsls	r7, r7, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d188:	4338      	orrs	r0, r7
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d18a:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d18c:	78e3      	ldrb	r3, [r4, #3]
 800d18e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d190:	4318      	orrs	r0, r3
 800d192:	e7d1      	b.n	800d138 <HAL_RTC_SetTime+0x88>
 800d194:	007f7f7f 	.word	0x007f7f7f
 800d198:	fffbffff 	.word	0xfffbffff

0800d19c <HAL_RTC_Init>:
{
 800d19c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d19e:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 800d1a0:	2001      	movs	r0, #1
  if(hrtc != NULL)
 800d1a2:	2c00      	cmp	r4, #0
 800d1a4:	d05f      	beq.n	800d266 <HAL_RTC_Init+0xca>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d1a6:	0025      	movs	r5, r4
 800d1a8:	3529      	adds	r5, #41	; 0x29
 800d1aa:	782b      	ldrb	r3, [r5, #0]
 800d1ac:	6822      	ldr	r2, [r4, #0]
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d120      	bne.n	800d1f6 <HAL_RTC_Init+0x5a>
    hrtc->Lock = HAL_UNLOCKED;
 800d1b4:	0021      	movs	r1, r4
 800d1b6:	3128      	adds	r1, #40	; 0x28
 800d1b8:	700b      	strb	r3, [r1, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800d1ba:	2388      	movs	r3, #136	; 0x88
 800d1bc:	021b      	lsls	r3, r3, #8
 800d1be:	6063      	str	r3, [r4, #4]
  if(hrtc->Instance==RTC)
 800d1c0:	4b29      	ldr	r3, [pc, #164]	; (800d268 <HAL_RTC_Init+0xcc>)
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d117      	bne.n	800d1f6 <HAL_RTC_Init+0x5a>
    __HAL_RCC_RTC_ENABLE();
 800d1c6:	2180      	movs	r1, #128	; 0x80
 800d1c8:	4b28      	ldr	r3, [pc, #160]	; (800d26c <HAL_RTC_Init+0xd0>)
 800d1ca:	0209      	lsls	r1, r1, #8
 800d1cc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d1ce:	4e28      	ldr	r6, [pc, #160]	; (800d270 <HAL_RTC_Init+0xd4>)
 800d1d0:	4301      	orrs	r1, r0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800d1d2:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 800d1d4:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800d1d6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d1d8:	00c0      	lsls	r0, r0, #3
 800d1da:	4301      	orrs	r1, r0
 800d1dc:	63d9      	str	r1, [r3, #60]	; 0x3c
 800d1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e0:	4003      	ands	r3, r0
 800d1e2:	9301      	str	r3, [sp, #4]
 800d1e4:	9b01      	ldr	r3, [sp, #4]
 800d1e6:	3801      	subs	r0, #1
 800d1e8:	4b22      	ldr	r3, [pc, #136]	; (800d274 <HAL_RTC_Init+0xd8>)
 800d1ea:	38ff      	subs	r0, #255	; 0xff
 800d1ec:	5819      	ldr	r1, [r3, r0]
 800d1ee:	4031      	ands	r1, r6
 800d1f0:	5019      	str	r1, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d1f2:	2104      	movs	r1, #4
 800d1f4:	6019      	str	r1, [r3, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d1f6:	2302      	movs	r3, #2
 800d1f8:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d1fa:	33c8      	adds	r3, #200	; 0xc8
 800d1fc:	6253      	str	r3, [r2, #36]	; 0x24
 800d1fe:	3b77      	subs	r3, #119	; 0x77
 800d200:	6253      	str	r3, [r2, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800d202:	0020      	movs	r0, r4
 800d204:	f7fe fdd5 	bl	800bdb2 <RTC_EnterInitMode>
    if(status == HAL_OK)
 800d208:	2800      	cmp	r0, #0
 800d20a:	d125      	bne.n	800d258 <HAL_RTC_Init+0xbc>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	491a      	ldr	r1, [pc, #104]	; (800d278 <HAL_RTC_Init+0xdc>)
 800d210:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d212:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d214:	400a      	ands	r2, r1
 800d216:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d218:	68a2      	ldr	r2, [r4, #8]
 800d21a:	6999      	ldr	r1, [r3, #24]
 800d21c:	4302      	orrs	r2, r0
 800d21e:	69e0      	ldr	r0, [r4, #28]
 800d220:	4302      	orrs	r2, r0
 800d222:	430a      	orrs	r2, r1
 800d224:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d226:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 800d228:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d22a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d22c:	68e2      	ldr	r2, [r4, #12]
 800d22e:	6919      	ldr	r1, [r3, #16]
 800d230:	0412      	lsls	r2, r2, #16
 800d232:	430a      	orrs	r2, r1
 800d234:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800d236:	f7fe fdf7 	bl	800be28 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d10c      	bne.n	800d258 <HAL_RTC_Init+0xbc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d23e:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d240:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d242:	6993      	ldr	r3, [r2, #24]
 800d244:	00db      	lsls	r3, r3, #3
 800d246:	08db      	lsrs	r3, r3, #3
 800d248:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d24a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d24c:	6991      	ldr	r1, [r2, #24]
 800d24e:	4333      	orrs	r3, r6
 800d250:	69a6      	ldr	r6, [r4, #24]
 800d252:	4333      	orrs	r3, r6
 800d254:	430b      	orrs	r3, r1
 800d256:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d258:	22ff      	movs	r2, #255	; 0xff
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800d25e:	2800      	cmp	r0, #0
 800d260:	d101      	bne.n	800d266 <HAL_RTC_Init+0xca>
      hrtc->State = HAL_RTC_STATE_READY;
 800d262:	2301      	movs	r3, #1
 800d264:	702b      	strb	r3, [r5, #0]
}
 800d266:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800d268:	40002800 	.word	0x40002800
 800d26c:	40021000 	.word	0x40021000
 800d270:	ff00ffff 	.word	0xff00ffff
 800d274:	e000e100 	.word	0xe000e100
 800d278:	fb8fffbf 	.word	0xfb8fffbf

0800d27c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d27c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d27e:	0004      	movs	r4, r0
 800d280:	3441      	adds	r4, #65	; 0x41
 800d282:	7822      	ldrb	r2, [r4, #0]
{
 800d284:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d286:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800d288:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d28a:	2a20      	cmp	r2, #32
 800d28c:	d117      	bne.n	800d2be <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800d28e:	001e      	movs	r6, r3
 800d290:	3640      	adds	r6, #64	; 0x40
 800d292:	7835      	ldrb	r5, [r6, #0]
 800d294:	2d01      	cmp	r5, #1
 800d296:	d012      	beq.n	800d2be <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d298:	3022      	adds	r0, #34	; 0x22
 800d29a:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	3823      	subs	r0, #35	; 0x23
 800d2a0:	681d      	ldr	r5, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800d2a2:	4f07      	ldr	r7, [pc, #28]	; (800d2c0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 800d2a4:	4385      	bics	r5, r0
 800d2a6:	601d      	str	r5, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800d2a8:	681d      	ldr	r5, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 800d2aa:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800d2ac:	403d      	ands	r5, r7
    tmpreg |= DigitalFilter << 8U;
 800d2ae:	4329      	orrs	r1, r5
    hi2c->Instance->CR1 = tmpreg;
 800d2b0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800d2b2:	6819      	ldr	r1, [r3, #0]
 800d2b4:	4308      	orrs	r0, r1
 800d2b6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800d2b8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800d2ba:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800d2bc:	7030      	strb	r0, [r6, #0]
  }
}
 800d2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2c0:	fffff0ff 	.word	0xfffff0ff

0800d2c4 <HAL_I2CEx_ConfigAnalogFilter>:
{
 800d2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d2c6:	0004      	movs	r4, r0
 800d2c8:	3441      	adds	r4, #65	; 0x41
 800d2ca:	7822      	ldrb	r2, [r4, #0]
{
 800d2cc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d2ce:	b2d2      	uxtb	r2, r2
    return HAL_BUSY;
 800d2d0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d2d2:	2a20      	cmp	r2, #32
 800d2d4:	d118      	bne.n	800d308 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800d2d6:	001e      	movs	r6, r3
 800d2d8:	3640      	adds	r6, #64	; 0x40
 800d2da:	7835      	ldrb	r5, [r6, #0]
 800d2dc:	2d01      	cmp	r5, #1
 800d2de:	d013      	beq.n	800d308 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d2e0:	3022      	adds	r0, #34	; 0x22
 800d2e2:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	3823      	subs	r0, #35	; 0x23
 800d2e8:	681d      	ldr	r5, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d2ea:	4f08      	ldr	r7, [pc, #32]	; (800d30c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800d2ec:	4385      	bics	r5, r0
 800d2ee:	601d      	str	r5, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d2f0:	681d      	ldr	r5, [r3, #0]
 800d2f2:	403d      	ands	r5, r7
 800d2f4:	601d      	str	r5, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800d2f6:	681d      	ldr	r5, [r3, #0]
 800d2f8:	4329      	orrs	r1, r5
 800d2fa:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800d2fc:	6819      	ldr	r1, [r3, #0]
 800d2fe:	4308      	orrs	r0, r1
 800d300:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800d302:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800d304:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800d306:	7030      	strb	r0, [r6, #0]
}
 800d308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d30a:	46c0      	nop			; (mov r8, r8)
 800d30c:	ffffefff 	.word	0xffffefff

0800d310 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800d310:	2302      	movs	r3, #2
 800d312:	4a02      	ldr	r2, [pc, #8]	; (800d31c <HAL_ResumeTick+0xc>)
 800d314:	6811      	ldr	r1, [r2, #0]
 800d316:	430b      	orrs	r3, r1
 800d318:	6013      	str	r3, [r2, #0]
}
 800d31a:	4770      	bx	lr
 800d31c:	e000e010 	.word	0xe000e010

0800d320 <HAL_SuspendTick>:
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800d320:	2102      	movs	r1, #2
 800d322:	4a02      	ldr	r2, [pc, #8]	; (800d32c <HAL_SuspendTick+0xc>)
 800d324:	6813      	ldr	r3, [r2, #0]
 800d326:	438b      	bics	r3, r1
 800d328:	6013      	str	r3, [r2, #0]
}
 800d32a:	4770      	bx	lr
 800d32c:	e000e010 	.word	0xe000e010

0800d330 <HAL_Delay>:
    wait += (uint32_t)(uwTickFreq);
 800d330:	1c43      	adds	r3, r0, #1
{
 800d332:	b510      	push	{r4, lr}
    wait += (uint32_t)(uwTickFreq);
 800d334:	1e5c      	subs	r4, r3, #1
 800d336:	41a3      	sbcs	r3, r4
  return uwTick;
 800d338:	4a03      	ldr	r2, [pc, #12]	; (800d348 <HAL_Delay+0x18>)
    wait += (uint32_t)(uwTickFreq);
 800d33a:	18c0      	adds	r0, r0, r3
  return uwTick;
 800d33c:	6811      	ldr	r1, [r2, #0]
 800d33e:	6813      	ldr	r3, [r2, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 800d340:	1a5b      	subs	r3, r3, r1
 800d342:	4283      	cmp	r3, r0
 800d344:	d3fb      	bcc.n	800d33e <HAL_Delay+0xe>
}
 800d346:	bd10      	pop	{r4, pc}
 800d348:	2000048c 	.word	0x2000048c

0800d34c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d34c:	2380      	movs	r3, #128	; 0x80
{
 800d34e:	b507      	push	{r0, r1, r2, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d350:	4a12      	ldr	r2, [pc, #72]	; (800d39c <HAL_Init+0x50>)
 800d352:	005b      	lsls	r3, r3, #1
 800d354:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d356:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d358:	430b      	orrs	r3, r1
 800d35a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d35c:	f7fe fe17 	bl	800bf8e <HAL_InitTick>
 800d360:	2201      	movs	r2, #1
 800d362:	2800      	cmp	r0, #0
 800d364:	d117      	bne.n	800d396 <HAL_Init+0x4a>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d366:	4b0e      	ldr	r3, [pc, #56]	; (800d3a0 <HAL_Init+0x54>)
 800d368:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d36a:	4311      	orrs	r1, r2
 800d36c:	6419      	str	r1, [r3, #64]	; 0x40
 800d36e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d370:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800d372:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d374:	9201      	str	r2, [sp, #4]
 800d376:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d37a:	0549      	lsls	r1, r1, #21
 800d37c:	430a      	orrs	r2, r1
 800d37e:	63da      	str	r2, [r3, #60]	; 0x3c
 800d380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 800d382:	4a08      	ldr	r2, [pc, #32]	; (800d3a4 <HAL_Init+0x58>)
 800d384:	400b      	ands	r3, r1
 800d386:	9300      	str	r3, [sp, #0]
 800d388:	9b00      	ldr	r3, [sp, #0]
 800d38a:	23c0      	movs	r3, #192	; 0xc0
 800d38c:	6811      	ldr	r1, [r2, #0]
 800d38e:	00db      	lsls	r3, r3, #3
 800d390:	430b      	orrs	r3, r1
 800d392:	6013      	str	r3, [r2, #0]
}
 800d394:	bd0e      	pop	{r1, r2, r3, pc}
    status = HAL_ERROR;
 800d396:	0010      	movs	r0, r2
 800d398:	e7fc      	b.n	800d394 <HAL_Init+0x48>
 800d39a:	46c0      	nop			; (mov r8, r8)
 800d39c:	40022000 	.word	0x40022000
 800d3a0:	40021000 	.word	0x40021000
 800d3a4:	40010000 	.word	0x40010000

0800d3a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d3a8:	0001      	movs	r1, r0
 800d3aa:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800d3ac:	4c0f      	ldr	r4, [pc, #60]	; (800d3ec <HAL_PWREx_ControlVoltageScaling+0x44>)
 800d3ae:	4810      	ldr	r0, [pc, #64]	; (800d3f0 <HAL_PWREx_ControlVoltageScaling+0x48>)
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	4003      	ands	r3, r0
 800d3b4:	430b      	orrs	r3, r1
 800d3b6:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d3b8:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800d3ba:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	4299      	cmp	r1, r3
 800d3c0:	d10c      	bne.n	800d3dc <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800d3c2:	4b0c      	ldr	r3, [pc, #48]	; (800d3f4 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800d3c4:	490c      	ldr	r1, [pc, #48]	; (800d3f8 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800d3c6:	6818      	ldr	r0, [r3, #0]
 800d3c8:	2306      	movs	r3, #6
 800d3ca:	4358      	muls	r0, r3
 800d3cc:	f003 fb8e 	bl	8010aec <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d3d0:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800d3d2:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d3d4:	00d2      	lsls	r2, r2, #3
 800d3d6:	6960      	ldr	r0, [r4, #20]
 800d3d8:	4010      	ands	r0, r2
 800d3da:	d100      	bne.n	800d3de <HAL_PWREx_ControlVoltageScaling+0x36>
}
 800d3dc:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d001      	beq.n	800d3e6 <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	e7f7      	b.n	800d3d6 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 800d3e6:	2003      	movs	r0, #3
 800d3e8:	e7f8      	b.n	800d3dc <HAL_PWREx_ControlVoltageScaling+0x34>
 800d3ea:	46c0      	nop			; (mov r8, r8)
 800d3ec:	40007000 	.word	0x40007000
 800d3f0:	fffff9ff 	.word	0xfffff9ff
 800d3f4:	20000000 	.word	0x20000000
 800d3f8:	000f4240 	.word	0x000f4240

0800d3fc <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800d3fc:	2102      	movs	r1, #2
 800d3fe:	4a02      	ldr	r2, [pc, #8]	; (800d408 <HAL_PWR_DisableSleepOnExit+0xc>)
 800d400:	6913      	ldr	r3, [r2, #16]
 800d402:	438b      	bics	r3, r1
 800d404:	6113      	str	r3, [r2, #16]
}
 800d406:	4770      	bx	lr
 800d408:	e000ed00 	.word	0xe000ed00

0800d40c <HAL_PWR_EnterSTOPMode>:
{
 800d40c:	b510      	push	{r4, lr}
 800d40e:	4b0f      	ldr	r3, [pc, #60]	; (800d44c <HAL_PWR_EnterSTOPMode+0x40>)
 800d410:	2407      	movs	r4, #7
  if (Regulator != PWR_MAINREGULATOR_ON)
 800d412:	2800      	cmp	r0, #0
 800d414:	d011      	beq.n	800d43a <HAL_PWR_EnterSTOPMode+0x2e>
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800d416:	2201      	movs	r2, #1
 800d418:	6818      	ldr	r0, [r3, #0]
 800d41a:	43a0      	bics	r0, r4
 800d41c:	4302      	orrs	r2, r0
 800d41e:	601a      	str	r2, [r3, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800d420:	2204      	movs	r2, #4
 800d422:	4b0b      	ldr	r3, [pc, #44]	; (800d450 <HAL_PWR_EnterSTOPMode+0x44>)
 800d424:	6918      	ldr	r0, [r3, #16]
 800d426:	4302      	orrs	r2, r0
 800d428:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800d42a:	2901      	cmp	r1, #1
 800d42c:	d109      	bne.n	800d442 <HAL_PWR_EnterSTOPMode+0x36>
    __WFI();
 800d42e:	bf30      	wfi
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800d430:	2104      	movs	r1, #4
 800d432:	691a      	ldr	r2, [r3, #16]
 800d434:	438a      	bics	r2, r1
 800d436:	611a      	str	r2, [r3, #16]
}
 800d438:	bd10      	pop	{r4, pc}
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	43a2      	bics	r2, r4
 800d43e:	601a      	str	r2, [r3, #0]
 800d440:	e7ee      	b.n	800d420 <HAL_PWR_EnterSTOPMode+0x14>
    __SEV();
 800d442:	bf40      	sev
    __WFE();
 800d444:	bf20      	wfe
    __WFE();
 800d446:	bf20      	wfe
 800d448:	e7f2      	b.n	800d430 <HAL_PWR_EnterSTOPMode+0x24>
 800d44a:	46c0      	nop			; (mov r8, r8)
 800d44c:	40007000 	.word	0x40007000
 800d450:	e000ed00 	.word	0xe000ed00

0800d454 <HAL_PWR_EnterSLEEPMode>:
{
 800d454:	b570      	push	{r4, r5, r6, lr}
 800d456:	2580      	movs	r5, #128	; 0x80
 800d458:	4c17      	ldr	r4, [pc, #92]	; (800d4b8 <HAL_PWR_EnterSLEEPMode+0x64>)
 800d45a:	000e      	movs	r6, r1
 800d45c:	00ad      	lsls	r5, r5, #2
    if((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 800d45e:	6963      	ldr	r3, [r4, #20]
  if(Regulator != PWR_MAINREGULATOR_ON)
 800d460:	2800      	cmp	r0, #0
 800d462:	d00f      	beq.n	800d484 <HAL_PWR_EnterSLEEPMode+0x30>
    if((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 800d464:	422b      	tst	r3, r5
 800d466:	d104      	bne.n	800d472 <HAL_PWR_EnterSLEEPMode+0x1e>
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800d468:	2380      	movs	r3, #128	; 0x80
 800d46a:	6822      	ldr	r2, [r4, #0]
 800d46c:	01db      	lsls	r3, r3, #7
 800d46e:	4313      	orrs	r3, r2
 800d470:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800d472:	2104      	movs	r1, #4
 800d474:	4a11      	ldr	r2, [pc, #68]	; (800d4bc <HAL_PWR_EnterSLEEPMode+0x68>)
 800d476:	6913      	ldr	r3, [r2, #16]
 800d478:	438b      	bics	r3, r1
 800d47a:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800d47c:	2e01      	cmp	r6, #1
 800d47e:	d116      	bne.n	800d4ae <HAL_PWR_EnterSLEEPMode+0x5a>
    __WFI();
 800d480:	bf30      	wfi
}
 800d482:	bd70      	pop	{r4, r5, r6, pc}
    if((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 800d484:	422b      	tst	r3, r5
 800d486:	d0f4      	beq.n	800d472 <HAL_PWR_EnterSLEEPMode+0x1e>
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800d488:	4b0d      	ldr	r3, [pc, #52]	; (800d4c0 <HAL_PWR_EnterSLEEPMode+0x6c>)
 800d48a:	490e      	ldr	r1, [pc, #56]	; (800d4c4 <HAL_PWR_EnterSLEEPMode+0x70>)
 800d48c:	6818      	ldr	r0, [r3, #0]
 800d48e:	2306      	movs	r3, #6
 800d490:	4358      	muls	r0, r3
 800d492:	f003 fb2b 	bl	8010aec <__udivsi3>

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	4a0b      	ldr	r2, [pc, #44]	; (800d4c8 <HAL_PWR_EnterSLEEPMode+0x74>)
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800d49a:	3001      	adds	r0, #1
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800d49c:	4013      	ands	r3, r2
 800d49e:	6023      	str	r3, [r4, #0]

  /* Wait until REGLPF is reset */
  while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800d4a0:	6963      	ldr	r3, [r4, #20]
 800d4a2:	422b      	tst	r3, r5
 800d4a4:	d0e5      	beq.n	800d472 <HAL_PWR_EnterSLEEPMode+0x1e>
  {
    if(wait_loop_index != 0U)
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d0eb      	beq.n	800d482 <HAL_PWR_EnterSLEEPMode+0x2e>
    {
      wait_loop_index--;
 800d4aa:	3801      	subs	r0, #1
 800d4ac:	e7f8      	b.n	800d4a0 <HAL_PWR_EnterSLEEPMode+0x4c>
    __SEV();
 800d4ae:	bf40      	sev
    __WFE();
 800d4b0:	bf20      	wfe
    __WFE();
 800d4b2:	bf20      	wfe
 800d4b4:	e7e5      	b.n	800d482 <HAL_PWR_EnterSLEEPMode+0x2e>
 800d4b6:	46c0      	nop			; (mov r8, r8)
 800d4b8:	40007000 	.word	0x40007000
 800d4bc:	e000ed00 	.word	0xe000ed00
 800d4c0:	20000000 	.word	0x20000000
 800d4c4:	000f4240 	.word	0x000f4240
 800d4c8:	ffffbfff 	.word	0xffffbfff

0800d4cc <HAL_DMA_IRQHandler>:
{
 800d4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800d4ce:	211c      	movs	r1, #28
 800d4d0:	2704      	movs	r7, #4
 800d4d2:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 800d4d4:	4b27      	ldr	r3, [pc, #156]	; (800d574 <HAL_DMA_IRQHandler+0xa8>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800d4d6:	4021      	ands	r1, r4
 800d4d8:	003c      	movs	r4, r7
 800d4da:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 800d4dc:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800d4de:	6802      	ldr	r2, [r0, #0]
 800d4e0:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800d4e2:	4226      	tst	r6, r4
 800d4e4:	d00f      	beq.n	800d506 <HAL_DMA_IRQHandler+0x3a>
 800d4e6:	423d      	tst	r5, r7
 800d4e8:	d00d      	beq.n	800d506 <HAL_DMA_IRQHandler+0x3a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d4ea:	6811      	ldr	r1, [r2, #0]
 800d4ec:	0689      	lsls	r1, r1, #26
 800d4ee:	d402      	bmi.n	800d4f6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d4f0:	6811      	ldr	r1, [r2, #0]
 800d4f2:	43b9      	bics	r1, r7
 800d4f4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800d4f6:	685a      	ldr	r2, [r3, #4]
 800d4f8:	4314      	orrs	r4, r2
 800d4fa:	605c      	str	r4, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800d4fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d01b      	beq.n	800d53a <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800d502:	4798      	blx	r3
 800d504:	e019      	b.n	800d53a <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800d506:	2702      	movs	r7, #2
 800d508:	003c      	movs	r4, r7
 800d50a:	408c      	lsls	r4, r1
 800d50c:	4226      	tst	r6, r4
 800d50e:	d015      	beq.n	800d53c <HAL_DMA_IRQHandler+0x70>
 800d510:	423d      	tst	r5, r7
 800d512:	d013      	beq.n	800d53c <HAL_DMA_IRQHandler+0x70>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d514:	6811      	ldr	r1, [r2, #0]
 800d516:	0689      	lsls	r1, r1, #26
 800d518:	d406      	bmi.n	800d528 <HAL_DMA_IRQHandler+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d51a:	250a      	movs	r5, #10
 800d51c:	6811      	ldr	r1, [r2, #0]
 800d51e:	43a9      	bics	r1, r5
 800d520:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800d522:	2101      	movs	r1, #1
 800d524:	1d82      	adds	r2, r0, #6
 800d526:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	4314      	orrs	r4, r2
    __HAL_UNLOCK(hdma);
 800d52c:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800d52e:	605c      	str	r4, [r3, #4]
    __HAL_UNLOCK(hdma);
 800d530:	1d43      	adds	r3, r0, #5
 800d532:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 800d534:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d536:	4293      	cmp	r3, r2
 800d538:	d1e3      	bne.n	800d502 <HAL_DMA_IRQHandler+0x36>
}
 800d53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800d53c:	2408      	movs	r4, #8
 800d53e:	0027      	movs	r7, r4
 800d540:	408f      	lsls	r7, r1
 800d542:	423e      	tst	r6, r7
 800d544:	d0f9      	beq.n	800d53a <HAL_DMA_IRQHandler+0x6e>
 800d546:	4225      	tst	r5, r4
 800d548:	d0f7      	beq.n	800d53a <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d54a:	250e      	movs	r5, #14
 800d54c:	6814      	ldr	r4, [r2, #0]
 800d54e:	43ac      	bics	r4, r5
 800d550:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 800d552:	2201      	movs	r2, #1
 800d554:	0015      	movs	r5, r2
 800d556:	408d      	lsls	r5, r1
 800d558:	0029      	movs	r1, r5
 800d55a:	685c      	ldr	r4, [r3, #4]
 800d55c:	4321      	orrs	r1, r4
 800d55e:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800d560:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d562:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800d564:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800d566:	2200      	movs	r2, #0
 800d568:	1d43      	adds	r3, r0, #5
 800d56a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800d56c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d56e:	4293      	cmp	r3, r2
 800d570:	d1c7      	bne.n	800d502 <HAL_DMA_IRQHandler+0x36>
 800d572:	e7e2      	b.n	800d53a <HAL_DMA_IRQHandler+0x6e>
 800d574:	40020000 	.word	0x40020000

0800d578 <HAL_DMA_Abort_IT>:
{
 800d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800d57a:	2301      	movs	r3, #1
 800d57c:	1d44      	adds	r4, r0, #5
 800d57e:	77e3      	strb	r3, [r4, #31]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800d580:	1d85      	adds	r5, r0, #6
 800d582:	7fea      	ldrb	r2, [r5, #31]
 800d584:	2a02      	cmp	r2, #2
 800d586:	d003      	beq.n	800d590 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d588:	2204      	movs	r2, #4
 800d58a:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 800d58c:	0018      	movs	r0, r3
 800d58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d590:	260e      	movs	r6, #14
 800d592:	6802      	ldr	r2, [r0, #0]
 800d594:	6811      	ldr	r1, [r2, #0]
 800d596:	43b1      	bics	r1, r6
 800d598:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800d59a:	6811      	ldr	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d59c:	4e13      	ldr	r6, [pc, #76]	; (800d5ec <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE(hdma);
 800d59e:	4399      	bics	r1, r3
 800d5a0:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d5a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5a4:	6811      	ldr	r1, [r2, #0]
 800d5a6:	4031      	ands	r1, r6
 800d5a8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800d5aa:	4a11      	ldr	r2, [pc, #68]	; (800d5f0 <HAL_DMA_Abort_IT+0x78>)
 800d5ac:	211c      	movs	r1, #28
 800d5ae:	4694      	mov	ip, r2
 800d5b0:	6857      	ldr	r7, [r2, #4]
 800d5b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800d5b4:	4011      	ands	r1, r2
 800d5b6:	408b      	lsls	r3, r1
 800d5b8:	4662      	mov	r2, ip
 800d5ba:	433b      	orrs	r3, r7
 800d5bc:	6053      	str	r3, [r2, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d5be:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d5c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800d5c2:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800d5c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d005      	beq.n	800d5d6 <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	4032      	ands	r2, r6
 800d5ce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d5d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800d5d2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800d5d4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	77eb      	strb	r3, [r5, #31]
    __HAL_UNLOCK(hdma);
 800d5da:	2500      	movs	r5, #0
 800d5dc:	77e5      	strb	r5, [r4, #31]
    if (hdma->XferAbortCallback != NULL)
 800d5de:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800d5e0:	0013      	movs	r3, r2
 800d5e2:	42aa      	cmp	r2, r5
 800d5e4:	d0d2      	beq.n	800d58c <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 800d5e6:	4790      	blx	r2
 800d5e8:	002b      	movs	r3, r5
 800d5ea:	e7cf      	b.n	800d58c <HAL_DMA_Abort_IT+0x14>
 800d5ec:	fffffeff 	.word	0xfffffeff
 800d5f0:	40020000 	.word	0x40020000

0800d5f4 <I2C_ITError.lto_priv.571>:
{
 800d5f4:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d5f6:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d5f8:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d5fa:	2600      	movs	r6, #0
 800d5fc:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d5fe:	3541      	adds	r5, #65	; 0x41
 800d600:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d602:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d604:	4a2d      	ldr	r2, [pc, #180]	; (800d6bc <I2C_ITError.lto_priv.571+0xc8>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d606:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d608:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d60a:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800d60c:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 800d60e:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 800d610:	4311      	orrs	r1, r2
 800d612:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d614:	2b02      	cmp	r3, #2
 800d616:	d822      	bhi.n	800d65e <I2C_ITError.lto_priv.571+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d618:	2103      	movs	r1, #3
 800d61a:	f7fe fc29 	bl	800be70 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d61e:	2328      	movs	r3, #40	; 0x28
 800d620:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d622:	4b27      	ldr	r3, [pc, #156]	; (800d6c0 <I2C_ITError.lto_priv.571+0xcc>)
    hi2c->PreviousState = I2C_STATE_NONE;
 800d624:	6326      	str	r6, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d626:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d628:	2280      	movs	r2, #128	; 0x80
 800d62a:	6823      	ldr	r3, [r4, #0]
 800d62c:	01d2      	lsls	r2, r2, #7
 800d62e:	6819      	ldr	r1, [r3, #0]
 800d630:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d632:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d634:	d01f      	beq.n	800d676 <I2C_ITError.lto_priv.571+0x82>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d636:	4923      	ldr	r1, [pc, #140]	; (800d6c4 <I2C_ITError.lto_priv.571+0xd0>)
    if (hi2c->hdmatx != NULL)
 800d638:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d63a:	400a      	ands	r2, r1
 800d63c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800d63e:	2800      	cmp	r0, #0
 800d640:	d00c      	beq.n	800d65c <I2C_ITError.lto_priv.571+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d642:	4b21      	ldr	r3, [pc, #132]	; (800d6c8 <I2C_ITError.lto_priv.571+0xd4>)
      __HAL_UNLOCK(hi2c);
 800d644:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d646:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800d648:	0023      	movs	r3, r4
 800d64a:	3340      	adds	r3, #64	; 0x40
 800d64c:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d64e:	f7ff ff93 	bl	800d578 <HAL_DMA_Abort_IT>
 800d652:	2800      	cmp	r0, #0
 800d654:	d002      	beq.n	800d65c <I2C_ITError.lto_priv.571+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d656:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800d658:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d65a:	4798      	blx	r3
}
 800d65c:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d65e:	2107      	movs	r1, #7
 800d660:	f7fe fc06 	bl	800be70 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d664:	782b      	ldrb	r3, [r5, #0]
 800d666:	2b60      	cmp	r3, #96	; 0x60
 800d668:	d001      	beq.n	800d66e <I2C_ITError.lto_priv.571+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 800d66a:	2320      	movs	r3, #32
 800d66c:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d66e:	2300      	movs	r3, #0
 800d670:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800d672:	6363      	str	r3, [r4, #52]	; 0x34
 800d674:	e7d8      	b.n	800d628 <I2C_ITError.lto_priv.571+0x34>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d676:	2080      	movs	r0, #128	; 0x80
 800d678:	0200      	lsls	r0, r0, #8
 800d67a:	4002      	ands	r2, r0
 800d67c:	d013      	beq.n	800d6a6 <I2C_ITError.lto_priv.571+0xb2>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	4812      	ldr	r0, [pc, #72]	; (800d6cc <I2C_ITError.lto_priv.571+0xd8>)
 800d682:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 800d684:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d686:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800d688:	2800      	cmp	r0, #0
 800d68a:	d0e7      	beq.n	800d65c <I2C_ITError.lto_priv.571+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d68c:	4b0e      	ldr	r3, [pc, #56]	; (800d6c8 <I2C_ITError.lto_priv.571+0xd4>)
 800d68e:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800d690:	0023      	movs	r3, r4
 800d692:	3340      	adds	r3, #64	; 0x40
 800d694:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d696:	f7ff ff6f 	bl	800d578 <HAL_DMA_Abort_IT>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d0de      	beq.n	800d65c <I2C_ITError.lto_priv.571+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d69e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d6a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d6a2:	4798      	blx	r3
 800d6a4:	e7da      	b.n	800d65c <I2C_ITError.lto_priv.571+0x68>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d6a6:	782b      	ldrb	r3, [r5, #0]
 800d6a8:	3440      	adds	r4, #64	; 0x40
 800d6aa:	2b60      	cmp	r3, #96	; 0x60
 800d6ac:	d103      	bne.n	800d6b6 <I2C_ITError.lto_priv.571+0xc2>
    hi2c->State = HAL_I2C_STATE_READY;
 800d6ae:	3b40      	subs	r3, #64	; 0x40
 800d6b0:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800d6b2:	7022      	strb	r2, [r4, #0]
 800d6b4:	e7d2      	b.n	800d65c <I2C_ITError.lto_priv.571+0x68>
    __HAL_UNLOCK(hi2c);
 800d6b6:	7022      	strb	r2, [r4, #0]
 800d6b8:	e7d0      	b.n	800d65c <I2C_ITError.lto_priv.571+0x68>
 800d6ba:	46c0      	nop			; (mov r8, r8)
 800d6bc:	ffff0000 	.word	0xffff0000
 800d6c0:	0800d6d1 	.word	0x0800d6d1
 800d6c4:	ffffbfff 	.word	0xffffbfff
 800d6c8:	0800beb9 	.word	0x0800beb9
 800d6cc:	ffff7fff 	.word	0xffff7fff

0800d6d0 <I2C_Slave_ISR_IT>:
{
 800d6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6d2:	46c6      	mov	lr, r8
  __HAL_LOCK(hi2c);
 800d6d4:	0007      	movs	r7, r0
{
 800d6d6:	b500      	push	{lr}
  __HAL_LOCK(hi2c);
 800d6d8:	3740      	adds	r7, #64	; 0x40
{
 800d6da:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 800d6dc:	783a      	ldrb	r2, [r7, #0]
{
 800d6de:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 800d6e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800d6e2:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 800d6e4:	2002      	movs	r0, #2
 800d6e6:	2a01      	cmp	r2, #1
 800d6e8:	d100      	bne.n	800d6ec <I2C_Slave_ISR_IT+0x1c>
 800d6ea:	e114      	b.n	800d916 <I2C_Slave_ISR_IT+0x246>
 800d6ec:	2201      	movs	r2, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d6ee:	0909      	lsrs	r1, r1, #4
  __HAL_LOCK(hi2c);
 800d6f0:	703a      	strb	r2, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d6f2:	4211      	tst	r1, r2
 800d6f4:	d05e      	beq.n	800d7b4 <I2C_Slave_ISR_IT+0xe4>
 800d6f6:	0931      	lsrs	r1, r6, #4
 800d6f8:	4211      	tst	r1, r2
 800d6fa:	d05b      	beq.n	800d7b4 <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount == 0U)
 800d6fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d6fe:	2a00      	cmp	r2, #0
 800d700:	d149      	bne.n	800d796 <I2C_Slave_ISR_IT+0xc6>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800d702:	0022      	movs	r2, r4
 800d704:	3241      	adds	r2, #65	; 0x41
 800d706:	7811      	ldrb	r1, [r2, #0]
 800d708:	2928      	cmp	r1, #40	; 0x28
 800d70a:	d134      	bne.n	800d776 <I2C_Slave_ISR_IT+0xa6>
 800d70c:	2180      	movs	r1, #128	; 0x80
 800d70e:	0489      	lsls	r1, r1, #18
 800d710:	428b      	cmp	r3, r1
 800d712:	d130      	bne.n	800d776 <I2C_Slave_ISR_IT+0xa6>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d714:	0029      	movs	r1, r5
 800d716:	0020      	movs	r0, r4
 800d718:	f7fe fbe9 	bl	800beee <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d71c:	2301      	movs	r3, #1
 800d71e:	4698      	mov	r8, r3
 800d720:	06ab      	lsls	r3, r5, #26
 800d722:	d400      	bmi.n	800d726 <I2C_Slave_ISR_IT+0x56>
 800d724:	e0f5      	b.n	800d912 <I2C_Slave_ISR_IT+0x242>
 800d726:	4643      	mov	r3, r8
 800d728:	0976      	lsrs	r6, r6, #5
 800d72a:	421e      	tst	r6, r3
 800d72c:	d100      	bne.n	800d730 <I2C_Slave_ISR_IT+0x60>
 800d72e:	e0f0      	b.n	800d912 <I2C_Slave_ISR_IT+0x242>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d730:	2220      	movs	r2, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d732:	6823      	ldr	r3, [r4, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800d734:	2107      	movs	r1, #7
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d736:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800d738:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d73a:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800d73c:	f7fe fb98 	bl	800be70 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d740:	2280      	movs	r2, #128	; 0x80
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	0212      	lsls	r2, r2, #8
 800d746:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800d748:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d74a:	430a      	orrs	r2, r1
 800d74c:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800d74e:	685a      	ldr	r2, [r3, #4]
 800d750:	497a      	ldr	r1, [pc, #488]	; (800d93c <I2C_Slave_ISR_IT+0x26c>)
 800d752:	400a      	ands	r2, r1
 800d754:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800d756:	f7fe fbbc 	bl	800bed2 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d75a:	4642      	mov	r2, r8
 800d75c:	0bb3      	lsrs	r3, r6, #14
 800d75e:	4213      	tst	r3, r2
 800d760:	d100      	bne.n	800d764 <I2C_Slave_ISR_IT+0x94>
 800d762:	e09e      	b.n	800d8a2 <I2C_Slave_ISR_IT+0x1d2>
    if (hi2c->hdmatx != NULL)
 800d764:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d766:	2b00      	cmp	r3, #0
 800d768:	d100      	bne.n	800d76c <I2C_Slave_ISR_IT+0x9c>
 800d76a:	e0a1      	b.n	800d8b0 <I2C_Slave_ISR_IT+0x1e0>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	b29b      	uxth	r3, r3
 800d772:	8563      	strh	r3, [r4, #42]	; 0x2a
 800d774:	e09c      	b.n	800d8b0 <I2C_Slave_ISR_IT+0x1e0>
 800d776:	2110      	movs	r1, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d778:	7810      	ldrb	r0, [r2, #0]
 800d77a:	6822      	ldr	r2, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d77c:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d77e:	2829      	cmp	r0, #41	; 0x29
 800d780:	d1cc      	bne.n	800d71c <I2C_Slave_ISR_IT+0x4c>
 800d782:	486f      	ldr	r0, [pc, #444]	; (800d940 <I2C_Slave_ISR_IT+0x270>)
 800d784:	4283      	cmp	r3, r0
 800d786:	d0c9      	beq.n	800d71c <I2C_Slave_ISR_IT+0x4c>
        I2C_Flush_TXDR(hi2c);
 800d788:	0020      	movs	r0, r4
 800d78a:	f7fe fba2 	bl	800bed2 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800d78e:	0020      	movs	r0, r4
 800d790:	f7fe fbdc 	bl	800bf4c <I2C_ITSlaveSeqCplt>
 800d794:	e7c2      	b.n	800d71c <I2C_Slave_ISR_IT+0x4c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d796:	2110      	movs	r1, #16
 800d798:	6822      	ldr	r2, [r4, #0]
 800d79a:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d79c:	2204      	movs	r2, #4
 800d79e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d7a0:	430a      	orrs	r2, r1
 800d7a2:	6462      	str	r2, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d7a4:	4a67      	ldr	r2, [pc, #412]	; (800d944 <I2C_Slave_ISR_IT+0x274>)
 800d7a6:	4213      	tst	r3, r2
 800d7a8:	d1b8      	bne.n	800d71c <I2C_Slave_ISR_IT+0x4c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d7aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d7ac:	0020      	movs	r0, r4
 800d7ae:	f7ff ff21 	bl	800d5f4 <I2C_ITError.lto_priv.571>
 800d7b2:	e7b3      	b.n	800d71c <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	0769      	lsls	r1, r5, #29
 800d7b8:	d51f      	bpl.n	800d7fa <I2C_Slave_ISR_IT+0x12a>
 800d7ba:	08b1      	lsrs	r1, r6, #2
 800d7bc:	4211      	tst	r1, r2
 800d7be:	d01c      	beq.n	800d7fa <I2C_Slave_ISR_IT+0x12a>
    if (hi2c->XferCount > 0U)
 800d7c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d7c2:	2a00      	cmp	r2, #0
 800d7c4:	d00f      	beq.n	800d7e6 <I2C_Slave_ISR_IT+0x116>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800d7c6:	2204      	movs	r2, #4
 800d7c8:	4395      	bics	r5, r2
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d7ca:	6822      	ldr	r2, [r4, #0]
 800d7cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d7ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d7d0:	700a      	strb	r2, [r1, #0]
      hi2c->pBuffPtr++;
 800d7d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d7d4:	3201      	adds	r2, #1
 800d7d6:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800d7d8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d7da:	3a01      	subs	r2, #1
 800d7dc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d7de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d7e0:	3a01      	subs	r2, #1
 800d7e2:	b292      	uxth	r2, r2
 800d7e4:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800d7e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d7e8:	2a00      	cmp	r2, #0
 800d7ea:	d197      	bne.n	800d71c <I2C_Slave_ISR_IT+0x4c>
 800d7ec:	4a54      	ldr	r2, [pc, #336]	; (800d940 <I2C_Slave_ISR_IT+0x270>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d094      	beq.n	800d71c <I2C_Slave_ISR_IT+0x4c>
        I2C_ITSlaveSeqCplt(hi2c);
 800d7f2:	0020      	movs	r0, r4
 800d7f4:	f7fe fbaa 	bl	800bf4c <I2C_ITSlaveSeqCplt>
 800d7f8:	e790      	b.n	800d71c <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	0729      	lsls	r1, r5, #28
 800d7fe:	d532      	bpl.n	800d866 <I2C_Slave_ISR_IT+0x196>
 800d800:	08f1      	lsrs	r1, r6, #3
 800d802:	4211      	tst	r1, r2
 800d804:	d02f      	beq.n	800d866 <I2C_Slave_ISR_IT+0x196>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d806:	0023      	movs	r3, r4
 800d808:	2128      	movs	r1, #40	; 0x28
 800d80a:	3341      	adds	r3, #65	; 0x41
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	6822      	ldr	r2, [r4, #0]
 800d810:	400b      	ands	r3, r1
 800d812:	428b      	cmp	r3, r1
 800d814:	d122      	bne.n	800d85c <I2C_Slave_ISR_IT+0x18c>
    transferdirection = I2C_GET_DIR(hi2c);
 800d816:	6993      	ldr	r3, [r2, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800d818:	6993      	ldr	r3, [r2, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800d81a:	6891      	ldr	r1, [r2, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800d81c:	68d0      	ldr	r0, [r2, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d81e:	68e0      	ldr	r0, [r4, #12]
 800d820:	2802      	cmp	r0, #2
 800d822:	d114      	bne.n	800d84e <I2C_Slave_ISR_IT+0x17e>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800d824:	0c1b      	lsrs	r3, r3, #16
 800d826:	30fc      	adds	r0, #252	; 0xfc
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800d828:	0589      	lsls	r1, r1, #22
 800d82a:	0f49      	lsrs	r1, r1, #29
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800d82c:	4003      	ands	r3, r0
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800d82e:	404b      	eors	r3, r1
 800d830:	2106      	movs	r1, #6
 800d832:	400b      	ands	r3, r1
 800d834:	d10b      	bne.n	800d84e <I2C_Slave_ISR_IT+0x17e>
        hi2c->AddrEventCount++;
 800d836:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d838:	3101      	adds	r1, #1
 800d83a:	64a1      	str	r1, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800d83c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d83e:	2902      	cmp	r1, #2
 800d840:	d000      	beq.n	800d844 <I2C_Slave_ISR_IT+0x174>
 800d842:	e76b      	b.n	800d71c <I2C_Slave_ISR_IT+0x4c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d844:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 800d846:	64a3      	str	r3, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d848:	61d1      	str	r1, [r2, #28]
          __HAL_UNLOCK(hi2c);
 800d84a:	703b      	strb	r3, [r7, #0]
 800d84c:	e766      	b.n	800d71c <I2C_Slave_ISR_IT+0x4c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d84e:	2104      	movs	r1, #4
 800d850:	0020      	movs	r0, r4
 800d852:	f7fe fb0d 	bl	800be70 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800d856:	2300      	movs	r3, #0
 800d858:	703b      	strb	r3, [r7, #0]
 800d85a:	e75f      	b.n	800d71c <I2C_Slave_ISR_IT+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d85c:	2308      	movs	r3, #8
 800d85e:	61d3      	str	r3, [r2, #28]
    __HAL_UNLOCK(hi2c);
 800d860:	2300      	movs	r3, #0
 800d862:	703b      	strb	r3, [r7, #0]
 800d864:	e75a      	b.n	800d71c <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d866:	2201      	movs	r2, #1
 800d868:	07a9      	lsls	r1, r5, #30
 800d86a:	d400      	bmi.n	800d86e <I2C_Slave_ISR_IT+0x19e>
 800d86c:	e756      	b.n	800d71c <I2C_Slave_ISR_IT+0x4c>
 800d86e:	0871      	lsrs	r1, r6, #1
 800d870:	4211      	tst	r1, r2
 800d872:	d100      	bne.n	800d876 <I2C_Slave_ISR_IT+0x1a6>
 800d874:	e752      	b.n	800d71c <I2C_Slave_ISR_IT+0x4c>
    if (hi2c->XferCount > 0U)
 800d876:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d878:	2a00      	cmp	r2, #0
 800d87a:	d00d      	beq.n	800d898 <I2C_Slave_ISR_IT+0x1c8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d87c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d87e:	6822      	ldr	r2, [r4, #0]
 800d880:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800d882:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d884:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800d886:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d888:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d88a:	3b01      	subs	r3, #1
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d890:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800d892:	3b01      	subs	r3, #1
 800d894:	8523      	strh	r3, [r4, #40]	; 0x28
 800d896:	e741      	b.n	800d71c <I2C_Slave_ISR_IT+0x4c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d898:	4a2a      	ldr	r2, [pc, #168]	; (800d944 <I2C_Slave_ISR_IT+0x274>)
 800d89a:	4213      	tst	r3, r2
 800d89c:	d000      	beq.n	800d8a0 <I2C_Slave_ISR_IT+0x1d0>
 800d89e:	e73d      	b.n	800d71c <I2C_Slave_ISR_IT+0x4c>
 800d8a0:	e7a7      	b.n	800d7f2 <I2C_Slave_ISR_IT+0x122>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d8a2:	0bf6      	lsrs	r6, r6, #15
 800d8a4:	4216      	tst	r6, r2
 800d8a6:	d003      	beq.n	800d8b0 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->hdmarx != NULL)
 800d8a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d000      	beq.n	800d8b0 <I2C_Slave_ISR_IT+0x1e0>
 800d8ae:	e75d      	b.n	800d76c <I2C_Slave_ISR_IT+0x9c>
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d8b0:	076b      	lsls	r3, r5, #29
 800d8b2:	d511      	bpl.n	800d8d8 <I2C_Slave_ISR_IT+0x208>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d8b4:	2304      	movs	r3, #4
 800d8b6:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d8b8:	6823      	ldr	r3, [r4, #0]
 800d8ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8be:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800d8c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800d8c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d005      	beq.n	800d8d8 <I2C_Slave_ISR_IT+0x208>
      hi2c->XferSize--;
 800d8cc:	3b01      	subs	r3, #1
 800d8ce:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d8d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800d8d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d003      	beq.n	800d8e6 <I2C_Slave_ISR_IT+0x216>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d8de:	2304      	movs	r3, #4
 800d8e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8e6:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	0026      	movs	r6, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8ec:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 800d8ee:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8f0:	7013      	strb	r3, [r2, #0]
  hi2c->XferISR = NULL;
 800d8f2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d8f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d8f6:	3641      	adds	r6, #65	; 0x41
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00f      	beq.n	800d91c <I2C_Slave_ISR_IT+0x24c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d8fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d8fe:	0020      	movs	r0, r4
 800d900:	f7ff fe78 	bl	800d5f4 <I2C_ITError.lto_priv.571>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d904:	7833      	ldrb	r3, [r6, #0]
 800d906:	2b28      	cmp	r3, #40	; 0x28
 800d908:	d103      	bne.n	800d912 <I2C_Slave_ISR_IT+0x242>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d90a:	0029      	movs	r1, r5
 800d90c:	0020      	movs	r0, r4
 800d90e:	f7fe faee 	bl	800beee <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800d912:	2000      	movs	r0, #0
 800d914:	7038      	strb	r0, [r7, #0]
}
 800d916:	bc04      	pop	{r2}
 800d918:	4690      	mov	r8, r2
 800d91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d91c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d91e:	4d08      	ldr	r5, [pc, #32]	; (800d940 <I2C_Slave_ISR_IT+0x270>)
 800d920:	42ab      	cmp	r3, r5
 800d922:	d006      	beq.n	800d932 <I2C_Slave_ISR_IT+0x262>
    I2C_ITSlaveSeqCplt(hi2c);
 800d924:	0020      	movs	r0, r4
 800d926:	f7fe fb11 	bl	800bf4c <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800d92a:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d92c:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d92e:	7033      	strb	r3, [r6, #0]
 800d930:	e7ef      	b.n	800d912 <I2C_Slave_ISR_IT+0x242>
 800d932:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d934:	7832      	ldrb	r2, [r6, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800d936:	7033      	strb	r3, [r6, #0]
 800d938:	e7eb      	b.n	800d912 <I2C_Slave_ISR_IT+0x242>
 800d93a:	46c0      	nop			; (mov r8, r8)
 800d93c:	fe00e800 	.word	0xfe00e800
 800d940:	ffff0000 	.word	0xffff0000
 800d944:	feffffff 	.word	0xfeffffff

0800d948 <HAL_FLASHEx_OBGetConfig>:
  *                  for the WRP and PCROP.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
  pOBInit->OptionType = OPTIONBYTE_ALL;
 800d948:	231f      	movs	r3, #31
{
  /* Check the parameters */
  assert_param(IS_OB_WRPAREA(WRPArea));

  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 800d94a:	6842      	ldr	r2, [r0, #4]
  pOBInit->OptionType = OPTIONBYTE_ALL;
 800d94c:	6003      	str	r3, [r0, #0]
{
 800d94e:	b530      	push	{r4, r5, lr}
 800d950:	4b29      	ldr	r3, [pc, #164]	; (800d9f8 <HAL_FLASHEx_OBGetConfig+0xb0>)
 800d952:	213f      	movs	r1, #63	; 0x3f
  if (WRPArea == OB_WRPAREA_ZONE_A)
 800d954:	2a01      	cmp	r2, #1
 800d956:	d147      	bne.n	800d9e8 <HAL_FLASHEx_OBGetConfig+0xa0>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800d958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d95a:	400a      	ands	r2, r1
 800d95c:	6082      	str	r2, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 800d95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d960:	0c12      	lsrs	r2, r2, #16
 800d962:	400a      	ands	r2, r1
 800d964:	60c2      	str	r2, [r0, #12]
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800d966:	6a1a      	ldr	r2, [r3, #32]
 800d968:	b2d2      	uxtb	r2, r2

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 800d96a:	2aaa      	cmp	r2, #170	; 0xaa
 800d96c:	d002      	beq.n	800d974 <HAL_FLASHEx_OBGetConfig+0x2c>
 800d96e:	2acc      	cmp	r2, #204	; 0xcc
 800d970:	d000      	beq.n	800d974 <HAL_FLASHEx_OBGetConfig+0x2c>
  {
    return (OB_RDP_LEVEL_1);
 800d972:	22bb      	movs	r2, #187	; 0xbb
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800d974:	6102      	str	r2, [r0, #16]
  *         @ref FLASH_OB_USER_INPUT_RESET_HOLDER(*)
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 800d976:	6a1a      	ldr	r2, [r3, #32]
 800d978:	4920      	ldr	r1, [pc, #128]	; (800d9fc <HAL_FLASHEx_OBGetConfig+0xb4>)
static void FLASH_OB_GetPCROP1A(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr)
{
  uint32_t pcrop;

  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800d97a:	24ff      	movs	r4, #255	; 0xff
  pOBInit->USERType = OB_USER_ALL;
 800d97c:	6141      	str	r1, [r0, #20]
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 800d97e:	400a      	ands	r2, r1
  *PCROP1AStartAddr += FLASH_BASE;
 800d980:	2180      	movs	r1, #128	; 0x80
 800d982:	0509      	lsls	r1, r1, #20
 800d984:	468c      	mov	ip, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800d986:	6182      	str	r2, [r0, #24]
  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 800d988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800d98a:	0264      	lsls	r4, r4, #9

  pcrop = FLASH->PCROP1AER;
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1AEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 800d98c:	4d1c      	ldr	r5, [pc, #112]	; (800da00 <HAL_FLASHEx_OBGetConfig+0xb8>)
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800d98e:	0252      	lsls	r2, r2, #9
 800d990:	4022      	ands	r2, r4
  *PCROP1AStartAddr += FLASH_BASE;
 800d992:	4462      	add	r2, ip
  *PCROP1AEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 800d994:	46ac      	mov	ip, r5
{
  uint32_t pcrop;

  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1BStartAddr += FLASH_BASE;
 800d996:	2580      	movs	r5, #128	; 0x80
  *PCROP1AStartAddr += FLASH_BASE;
 800d998:	6202      	str	r2, [r0, #32]
  pcrop = FLASH->PCROP1AER;
 800d99a:	6a99      	ldr	r1, [r3, #40]	; 0x28
  *PCROP1BStartAddr += FLASH_BASE;
 800d99c:	052d      	lsls	r5, r5, #20
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
 800d99e:	024a      	lsls	r2, r1, #9
 800d9a0:	4022      	ands	r2, r4
  *PCROP1AEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 800d9a2:	4462      	add	r2, ip
  *PCROP1BStartAddr += FLASH_BASE;
 800d9a4:	46ac      	mov	ip, r5
  *PCROP1AEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 800d9a6:	6242      	str	r2, [r0, #36]	; 0x24
  *PCROPConfig &= ~OB_PCROP_RDP_ERASE;
 800d9a8:	69c2      	ldr	r2, [r0, #28]
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 800d9aa:	0fc9      	lsrs	r1, r1, #31
  *PCROPConfig &= ~OB_PCROP_RDP_ERASE;
 800d9ac:	0052      	lsls	r2, r2, #1
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 800d9ae:	07c9      	lsls	r1, r1, #31
  *PCROPConfig &= ~OB_PCROP_RDP_ERASE;
 800d9b0:	0852      	lsrs	r2, r2, #1
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 800d9b2:	430a      	orrs	r2, r1
 800d9b4:	61c2      	str	r2, [r0, #28]
  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 800d9b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800d9b8:	0249      	lsls	r1, r1, #9
 800d9ba:	4021      	ands	r1, r4
  *PCROP1BStartAddr += FLASH_BASE;
 800d9bc:	4461      	add	r1, ip
 800d9be:	6281      	str	r1, [r0, #40]	; 0x28

  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1BEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 800d9c0:	490f      	ldr	r1, [pc, #60]	; (800da00 <HAL_FLASHEx_OBGetConfig+0xb8>)
  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 800d9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  *PCROP1BEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 800d9c4:	468c      	mov	ip, r1
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800d9c6:	025b      	lsls	r3, r3, #9
 800d9c8:	4023      	ands	r3, r4
  *PCROP1BEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 800d9ca:	4463      	add	r3, ip
 800d9cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 800d9ce:	2303      	movs	r3, #3
 800d9d0:	431a      	orrs	r2, r3
 800d9d2:	61c2      	str	r2, [r0, #28]
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize)
{
  uint32_t secmem = FLASH->SECR;

  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 800d9d4:	2280      	movs	r2, #128	; 0x80
  uint32_t secmem = FLASH->SECR;
 800d9d6:	4b0b      	ldr	r3, [pc, #44]	; (800da04 <HAL_FLASHEx_OBGetConfig+0xbc>)
  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 800d9d8:	0252      	lsls	r2, r2, #9
  uint32_t secmem = FLASH->SECR;
 800d9da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 800d9dc:	401a      	ands	r2, r3
 800d9de:	6302      	str	r2, [r0, #48]	; 0x30
  *SecSize = (secmem & FLASH_SECR_SEC_SIZE);
 800d9e0:	227f      	movs	r2, #127	; 0x7f
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	6343      	str	r3, [r0, #52]	; 0x34
}
 800d9e6:	bd30      	pop	{r4, r5, pc}
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800d9e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9ea:	400a      	ands	r2, r1
 800d9ec:	6082      	str	r2, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 800d9ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9f0:	0c12      	lsrs	r2, r2, #16
 800d9f2:	400a      	ands	r2, r1
 800d9f4:	60c2      	str	r2, [r0, #12]
 800d9f6:	e7b6      	b.n	800d966 <HAL_FLASHEx_OBGetConfig+0x1e>
 800d9f8:	40022000 	.word	0x40022000
 800d9fc:	3f4fff00 	.word	0x3f4fff00
 800da00:	080001ff 	.word	0x080001ff
 800da04:	40022004 	.word	0x40022004

0800da08 <HAL_FLASHEx_OBProgram>:
{
 800da08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da0a:	46c6      	mov	lr, r8
  __HAL_LOCK(&pFlash);
 800da0c:	4c4c      	ldr	r4, [pc, #304]	; (800db40 <HAL_FLASHEx_OBProgram+0x138>)
{
 800da0e:	0003      	movs	r3, r0
  __HAL_LOCK(&pFlash);
 800da10:	7922      	ldrb	r2, [r4, #4]
{
 800da12:	b500      	push	{lr}
  __HAL_LOCK(&pFlash);
 800da14:	2002      	movs	r0, #2
 800da16:	2a01      	cmp	r2, #1
 800da18:	d069      	beq.n	800daee <HAL_FLASHEx_OBProgram+0xe6>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800da1a:	2100      	movs	r1, #0
  __HAL_LOCK(&pFlash);
 800da1c:	2201      	movs	r2, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800da1e:	60a1      	str	r1, [r4, #8]
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0x00U)
 800da20:	6819      	ldr	r1, [r3, #0]
  __HAL_LOCK(&pFlash);
 800da22:	7122      	strb	r2, [r4, #4]
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0x00U)
 800da24:	4211      	tst	r1, r2
 800da26:	d008      	beq.n	800da3a <HAL_FLASHEx_OBProgram+0x32>
 800da28:	68da      	ldr	r2, [r3, #12]
 800da2a:	6898      	ldr	r0, [r3, #8]
  if (WRPArea != OB_WRPAREA_ZONE_A)
 800da2c:	685d      	ldr	r5, [r3, #4]
 800da2e:	0412      	lsls	r2, r2, #16
 800da30:	4302      	orrs	r2, r0
 800da32:	4844      	ldr	r0, [pc, #272]	; (800db44 <HAL_FLASHEx_OBProgram+0x13c>)
 800da34:	2d01      	cmp	r5, #1
 800da36:	d05d      	beq.n	800daf4 <HAL_FLASHEx_OBProgram+0xec>
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 800da38:	6302      	str	r2, [r0, #48]	; 0x30
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 800da3a:	2206      	movs	r2, #6
 800da3c:	400a      	ands	r2, r1
 800da3e:	2a06      	cmp	r2, #6
 800da40:	d15a      	bne.n	800daf8 <HAL_FLASHEx_OBProgram+0xf0>
  optr &= ~(UserType | FLASH_OPTR_RDP);
 800da42:	20ff      	movs	r0, #255	; 0xff
  optr = FLASH->OPTR;
 800da44:	4d3f      	ldr	r5, [pc, #252]	; (800db44 <HAL_FLASHEx_OBProgram+0x13c>)
  optr &= ~(UserType | FLASH_OPTR_RDP);
 800da46:	695e      	ldr	r6, [r3, #20]
  optr = FLASH->OPTR;
 800da48:	6a2a      	ldr	r2, [r5, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 800da4a:	4330      	orrs	r0, r6
 800da4c:	4382      	bics	r2, r0
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 800da4e:	691e      	ldr	r6, [r3, #16]
 800da50:	6998      	ldr	r0, [r3, #24]
 800da52:	4330      	orrs	r0, r6
 800da54:	4302      	orrs	r2, r0
 800da56:	622a      	str	r2, [r5, #32]
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0x00U)
 800da58:	070a      	lsls	r2, r1, #28
 800da5a:	d52b      	bpl.n	800dab4 <HAL_FLASHEx_OBProgram+0xac>
    if ((pOBInit->PCROPConfig & (OB_PCROP_ZONE_A | OB_PCROP_RDP_ERASE)) != 0x00U)
 800da5c:	69df      	ldr	r7, [r3, #28]
 800da5e:	4a3a      	ldr	r2, [pc, #232]	; (800db48 <HAL_FLASHEx_OBProgram+0x140>)
 800da60:	4217      	tst	r7, r2
 800da62:	d019      	beq.n	800da98 <HAL_FLASHEx_OBProgram+0x90>
  pcrop1aend = FLASH->PCROP1AER;
 800da64:	4837      	ldr	r0, [pc, #220]	; (800db44 <HAL_FLASHEx_OBProgram+0x13c>)
 800da66:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0x00U)
 800da68:	07fd      	lsls	r5, r7, #31
 800da6a:	d50f      	bpl.n	800da8c <HAL_FLASHEx_OBProgram+0x84>
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800da6c:	6a1d      	ldr	r5, [r3, #32]
 800da6e:	002e      	movs	r6, r5
 800da70:	25f8      	movs	r5, #248	; 0xf8
 800da72:	062d      	lsls	r5, r5, #24
 800da74:	46ac      	mov	ip, r5
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800da76:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800da78:	4466      	add	r6, ip
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800da7a:	46a8      	mov	r8, r5
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800da7c:	0a76      	lsrs	r6, r6, #9
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800da7e:	44e0      	add	r8, ip
 800da80:	4645      	mov	r5, r8
    FLASH->PCROP1ASR = startoffset;
 800da82:	6246      	str	r6, [r0, #36]	; 0x24
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 800da84:	26ff      	movs	r6, #255	; 0xff
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800da86:	0a6d      	lsrs	r5, r5, #9
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 800da88:	43b2      	bics	r2, r6
    pcrop1aend |= endoffset;
 800da8a:	432a      	orrs	r2, r5
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0x00U)
 800da8c:	2f00      	cmp	r7, #0
 800da8e:	da02      	bge.n	800da96 <HAL_FLASHEx_OBProgram+0x8e>
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 800da90:	2580      	movs	r5, #128	; 0x80
 800da92:	062d      	lsls	r5, r5, #24
 800da94:	432a      	orrs	r2, r5
  FLASH->PCROP1AER = pcrop1aend;
 800da96:	6282      	str	r2, [r0, #40]	; 0x28
    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE_B) != 0x00U)
 800da98:	07ba      	lsls	r2, r7, #30
 800da9a:	d50b      	bpl.n	800dab4 <HAL_FLASHEx_OBProgram+0xac>
  startoffset = ((PCROP1BStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800da9c:	25f8      	movs	r5, #248	; 0xf8
 800da9e:	062d      	lsls	r5, r5, #24
 800daa0:	46ac      	mov	ip, r5
 800daa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FLASH->PCROP1BSR = startoffset;
 800daa4:	4d27      	ldr	r5, [pc, #156]	; (800db44 <HAL_FLASHEx_OBProgram+0x13c>)
  startoffset = ((PCROP1BStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800daa6:	4462      	add	r2, ip
 800daa8:	0a50      	lsrs	r0, r2, #9
  endoffset = ((PCROP1BEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800daaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  FLASH->PCROP1BSR = startoffset;
 800daac:	6368      	str	r0, [r5, #52]	; 0x34
  endoffset = ((PCROP1BEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800daae:	4462      	add	r2, ip
 800dab0:	0a52      	lsrs	r2, r2, #9
  FLASH->PCROP1BER = endoffset;
 800dab2:	63aa      	str	r2, [r5, #56]	; 0x38
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0x00U)
 800dab4:	06ca      	lsls	r2, r1, #27
 800dab6:	d508      	bpl.n	800daca <HAL_FLASHEx_OBProgram+0xc2>
  FLASH->SECR = (secmem | BootEntry | SecSize);
 800dab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  secmem = (FLASH->SECR & ~(FLASH_SECR_BOOT_LOCK | FLASH_SECR_SEC_SIZE));
 800daba:	4824      	ldr	r0, [pc, #144]	; (800db4c <HAL_FLASHEx_OBProgram+0x144>)
  FLASH->SECR = (secmem | BootEntry | SecSize);
 800dabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  secmem = (FLASH->SECR & ~(FLASH_SECR_BOOT_LOCK | FLASH_SECR_SEC_SIZE));
 800dabe:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
  FLASH->SECR = (secmem | BootEntry | SecSize);
 800dac0:	4313      	orrs	r3, r2
  secmem = (FLASH->SECR & ~(FLASH_SECR_BOOT_LOCK | FLASH_SECR_SEC_SIZE));
 800dac2:	4a23      	ldr	r2, [pc, #140]	; (800db50 <HAL_FLASHEx_OBProgram+0x148>)
 800dac4:	400a      	ands	r2, r1
  FLASH->SECR = (secmem | BootEntry | SecSize);
 800dac6:	4313      	orrs	r3, r2
 800dac8:	67c3      	str	r3, [r0, #124]	; 0x7c
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800daca:	f7fe f821 	bl	800bb10 <FLASH_WaitForLastOperation.constprop.67>
  if (status == HAL_OK)
 800dace:	2800      	cmp	r0, #0
 800dad0:	d10b      	bne.n	800daea <HAL_FLASHEx_OBProgram+0xe2>
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dad2:	2380      	movs	r3, #128	; 0x80
 800dad4:	4d1b      	ldr	r5, [pc, #108]	; (800db44 <HAL_FLASHEx_OBProgram+0x13c>)
 800dad6:	029b      	lsls	r3, r3, #10
 800dad8:	696a      	ldr	r2, [r5, #20]
 800dada:	4313      	orrs	r3, r2
 800dadc:	616b      	str	r3, [r5, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dade:	f7fe f817 	bl	800bb10 <FLASH_WaitForLastOperation.constprop.67>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800dae2:	696b      	ldr	r3, [r5, #20]
 800dae4:	4a1b      	ldr	r2, [pc, #108]	; (800db54 <HAL_FLASHEx_OBProgram+0x14c>)
 800dae6:	4013      	ands	r3, r2
 800dae8:	616b      	str	r3, [r5, #20]
  __HAL_UNLOCK(&pFlash);
 800daea:	2300      	movs	r3, #0
 800daec:	7123      	strb	r3, [r4, #4]
}
 800daee:	bc04      	pop	{r2}
 800daf0:	4690      	mov	r8, r2
 800daf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 800daf4:	62c2      	str	r2, [r0, #44]	; 0x2c
 800daf6:	e7a0      	b.n	800da3a <HAL_FLASHEx_OBProgram+0x32>
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0x00U)
 800daf8:	078a      	lsls	r2, r1, #30
 800dafa:	d50c      	bpl.n	800db16 <HAL_FLASHEx_OBProgram+0x10e>
  optr &= ~(UserType | FLASH_OPTR_RDP);
 800dafc:	26ff      	movs	r6, #255	; 0xff
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 800dafe:	4d11      	ldr	r5, [pc, #68]	; (800db44 <HAL_FLASHEx_OBProgram+0x13c>)
 800db00:	4815      	ldr	r0, [pc, #84]	; (800db58 <HAL_FLASHEx_OBProgram+0x150>)
 800db02:	6a2a      	ldr	r2, [r5, #32]
 800db04:	4010      	ands	r0, r2
  optr = FLASH->OPTR;
 800db06:	6a2a      	ldr	r2, [r5, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 800db08:	4306      	orrs	r6, r0
 800db0a:	43b2      	bics	r2, r6
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 800db0c:	691e      	ldr	r6, [r3, #16]
 800db0e:	4332      	orrs	r2, r6
 800db10:	4302      	orrs	r2, r0
 800db12:	622a      	str	r2, [r5, #32]
 800db14:	e7a0      	b.n	800da58 <HAL_FLASHEx_OBProgram+0x50>
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0x00U)
 800db16:	074a      	lsls	r2, r1, #29
 800db18:	d59e      	bpl.n	800da58 <HAL_FLASHEx_OBProgram+0x50>
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800db1a:	4d0a      	ldr	r5, [pc, #40]	; (800db44 <HAL_FLASHEx_OBProgram+0x13c>)
 800db1c:	6a28      	ldr	r0, [r5, #32]
 800db1e:	b2c0      	uxtb	r0, r0
  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 800db20:	28aa      	cmp	r0, #170	; 0xaa
 800db22:	d002      	beq.n	800db2a <HAL_FLASHEx_OBProgram+0x122>
 800db24:	28cc      	cmp	r0, #204	; 0xcc
 800db26:	d000      	beq.n	800db2a <HAL_FLASHEx_OBProgram+0x122>
    return (OB_RDP_LEVEL_1);
 800db28:	20bb      	movs	r0, #187	; 0xbb
  optr &= ~(UserType | FLASH_OPTR_RDP);
 800db2a:	26ff      	movs	r6, #255	; 0xff
 800db2c:	695f      	ldr	r7, [r3, #20]
  optr = FLASH->OPTR;
 800db2e:	6a2a      	ldr	r2, [r5, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 800db30:	433e      	orrs	r6, r7
 800db32:	43b2      	bics	r2, r6
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 800db34:	699e      	ldr	r6, [r3, #24]
 800db36:	4332      	orrs	r2, r6
 800db38:	4302      	orrs	r2, r0
 800db3a:	622a      	str	r2, [r5, #32]
 800db3c:	e78c      	b.n	800da58 <HAL_FLASHEx_OBProgram+0x50>
 800db3e:	46c0      	nop			; (mov r8, r8)
 800db40:	2000048c 	.word	0x2000048c
 800db44:	40022000 	.word	0x40022000
 800db48:	80000001 	.word	0x80000001
 800db4c:	40022004 	.word	0x40022004
 800db50:	fffeff80 	.word	0xfffeff80
 800db54:	fffdffff 	.word	0xfffdffff
 800db58:	3f4fff00 	.word	0x3f4fff00

0800db5c <HAL_FLASH_OB_Launch>:
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800db5c:	2380      	movs	r3, #128	; 0x80
 800db5e:	4a03      	ldr	r2, [pc, #12]	; (800db6c <HAL_FLASH_OB_Launch+0x10>)
 800db60:	051b      	lsls	r3, r3, #20
 800db62:	6951      	ldr	r1, [r2, #20]
}
 800db64:	2001      	movs	r0, #1
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800db66:	430b      	orrs	r3, r1
 800db68:	6153      	str	r3, [r2, #20]
}
 800db6a:	4770      	bx	lr
 800db6c:	40022000 	.word	0x40022000

0800db70 <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800db70:	2280      	movs	r2, #128	; 0x80
  return status;
 800db72:	2001      	movs	r0, #1
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800db74:	4b04      	ldr	r3, [pc, #16]	; (800db88 <HAL_FLASH_OB_Lock+0x18>)
 800db76:	05d2      	lsls	r2, r2, #23
 800db78:	6959      	ldr	r1, [r3, #20]
 800db7a:	430a      	orrs	r2, r1
 800db7c:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 800db7e:	695b      	ldr	r3, [r3, #20]
 800db80:	0f9b      	lsrs	r3, r3, #30
  return status;
 800db82:	4398      	bics	r0, r3
}
 800db84:	4770      	bx	lr
 800db86:	46c0      	nop			; (mov r8, r8)
 800db88:	40022000 	.word	0x40022000

0800db8c <HAL_FLASH_OB_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 800db8c:	4b06      	ldr	r3, [pc, #24]	; (800dba8 <HAL_FLASH_OB_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_ERROR;
 800db8e:	2001      	movs	r0, #1
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 800db90:	695a      	ldr	r2, [r3, #20]
 800db92:	0052      	lsls	r2, r2, #1
 800db94:	d506      	bpl.n	800dba4 <HAL_FLASH_OB_Unlock+0x18>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800db96:	4a05      	ldr	r2, [pc, #20]	; (800dbac <HAL_FLASH_OB_Unlock+0x20>)
 800db98:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800db9a:	4a05      	ldr	r2, [pc, #20]	; (800dbb0 <HAL_FLASH_OB_Unlock+0x24>)
 800db9c:	60da      	str	r2, [r3, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 800db9e:	695b      	ldr	r3, [r3, #20]
 800dba0:	0f9b      	lsrs	r3, r3, #30
  HAL_StatusTypeDef status = HAL_ERROR;
 800dba2:	4018      	ands	r0, r3
}
 800dba4:	4770      	bx	lr
 800dba6:	46c0      	nop			; (mov r8, r8)
 800dba8:	40022000 	.word	0x40022000
 800dbac:	08192a3b 	.word	0x08192a3b
 800dbb0:	4c5d6e7f 	.word	0x4c5d6e7f

0800dbb4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800dbb4:	2280      	movs	r2, #128	; 0x80
 800dbb6:	4b04      	ldr	r3, [pc, #16]	; (800dbc8 <HAL_FLASH_Lock+0x14>)
 800dbb8:	0612      	lsls	r2, r2, #24
 800dbba:	6959      	ldr	r1, [r3, #20]
 800dbbc:	430a      	orrs	r2, r1
 800dbbe:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800dbc0:	6958      	ldr	r0, [r3, #20]
 800dbc2:	43c0      	mvns	r0, r0
  return status;
 800dbc4:	0fc0      	lsrs	r0, r0, #31
}
 800dbc6:	4770      	bx	lr
 800dbc8:	40022000 	.word	0x40022000

0800dbcc <HAL_FLASH_Unlock>:
  HAL_StatusTypeDef status = HAL_OK;
 800dbcc:	2000      	movs	r0, #0
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800dbce:	4b05      	ldr	r3, [pc, #20]	; (800dbe4 <HAL_FLASH_Unlock+0x18>)
 800dbd0:	695a      	ldr	r2, [r3, #20]
 800dbd2:	4282      	cmp	r2, r0
 800dbd4:	da05      	bge.n	800dbe2 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800dbd6:	4a04      	ldr	r2, [pc, #16]	; (800dbe8 <HAL_FLASH_Unlock+0x1c>)
 800dbd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800dbda:	4a04      	ldr	r2, [pc, #16]	; (800dbec <HAL_FLASH_Unlock+0x20>)
 800dbdc:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800dbde:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800dbe0:	0fc0      	lsrs	r0, r0, #31
}
 800dbe2:	4770      	bx	lr
 800dbe4:	40022000 	.word	0x40022000
 800dbe8:	45670123 	.word	0x45670123
 800dbec:	cdef89ab 	.word	0xcdef89ab

0800dbf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbf2:	46c6      	mov	lr, r8
 800dbf4:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dbf6:	6801      	ldr	r1, [r0, #0]
{
 800dbf8:	0002      	movs	r2, r0
 800dbfa:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dbfc:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dbfe:	038b      	lsls	r3, r1, #14
 800dc00:	d54f      	bpl.n	800dca2 <HAL_RCCEx_PeriphCLKConfig+0xb2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dc02:	2580      	movs	r5, #128	; 0x80
 800dc04:	4b6e      	ldr	r3, [pc, #440]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dc06:	056d      	lsls	r5, r5, #21
 800dc08:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800dc0a:	0004      	movs	r4, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dc0c:	422e      	tst	r6, r5
 800dc0e:	d107      	bne.n	800dc20 <HAL_RCCEx_PeriphCLKConfig+0x30>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dc10:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      pwrclkchanged = SET;
 800dc12:	3401      	adds	r4, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800dc14:	4328      	orrs	r0, r5
 800dc16:	63d8      	str	r0, [r3, #60]	; 0x3c
 800dc18:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dc1a:	4028      	ands	r0, r5
 800dc1c:	9001      	str	r0, [sp, #4]
 800dc1e:	9801      	ldr	r0, [sp, #4]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dc20:	2680      	movs	r6, #128	; 0x80
 800dc22:	4868      	ldr	r0, [pc, #416]	; (800ddc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800dc24:	0076      	lsls	r6, r6, #1
 800dc26:	6805      	ldr	r5, [r0, #0]
 800dc28:	4680      	mov	r8, r0
 800dc2a:	4335      	orrs	r5, r6
 800dc2c:	6005      	str	r5, [r0, #0]
  return uwTick;
 800dc2e:	4d66      	ldr	r5, [pc, #408]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800dc30:	682f      	ldr	r7, [r5, #0]
 800dc32:	46bc      	mov	ip, r7

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dc34:	4640      	mov	r0, r8
 800dc36:	6807      	ldr	r7, [r0, #0]
 800dc38:	4237      	tst	r7, r6
 800dc3a:	d026      	beq.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800dc3c:	26c0      	movs	r6, #192	; 0xc0
 800dc3e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800dc40:	00b6      	lsls	r6, r6, #2
 800dc42:	4030      	ands	r0, r6

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800dc44:	d00f      	beq.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800dc46:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800dc48:	4286      	cmp	r6, r0
 800dc4a:	d00c      	beq.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800dc4c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800dc4e:	4e5f      	ldr	r6, [pc, #380]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dc50:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800dc52:	4030      	ands	r0, r6
        __HAL_RCC_BACKUPRESET_FORCE();
 800dc54:	2680      	movs	r6, #128	; 0x80
 800dc56:	0276      	lsls	r6, r6, #9
 800dc58:	433e      	orrs	r6, r7
 800dc5a:	65de      	str	r6, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dc5c:	6dde      	ldr	r6, [r3, #92]	; 0x5c
 800dc5e:	4f5c      	ldr	r7, [pc, #368]	; (800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800dc60:	403e      	ands	r6, r7
 800dc62:	65de      	str	r6, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800dc64:	65d8      	str	r0, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800dc66:	07c0      	lsls	r0, r0, #31
 800dc68:	d507      	bpl.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc6a:	485a      	ldr	r0, [pc, #360]	; (800ddd4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dc6c:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc6e:	4684      	mov	ip, r0
 800dc70:	682f      	ldr	r7, [r5, #0]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dc72:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800dc74:	4230      	tst	r0, r6
 800dc76:	d100      	bne.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800dc78:	e09c      	b.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dc7a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800dc7c:	4d53      	ldr	r5, [pc, #332]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800dc7e:	4028      	ands	r0, r5
 800dc80:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800dc82:	4328      	orrs	r0, r5
 800dc84:	65d8      	str	r0, [r3, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dc86:	2000      	movs	r0, #0
 800dc88:	e005      	b.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dc8a:	4660      	mov	r0, ip
 800dc8c:	682f      	ldr	r7, [r5, #0]
 800dc8e:	1a3f      	subs	r7, r7, r0
 800dc90:	2f02      	cmp	r7, #2
 800dc92:	d9cf      	bls.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x44>
        ret = HAL_TIMEOUT;
 800dc94:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dc96:	2c01      	cmp	r4, #1
 800dc98:	d103      	bne.n	800dca2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc9a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800dc9c:	4d4e      	ldr	r5, [pc, #312]	; (800ddd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800dc9e:	402c      	ands	r4, r5
 800dca0:	63dc      	str	r4, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dca2:	07cb      	lsls	r3, r1, #31
 800dca4:	d506      	bpl.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dca6:	2503      	movs	r5, #3
 800dca8:	4c45      	ldr	r4, [pc, #276]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dcaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dcac:	43ab      	bics	r3, r5
 800dcae:	6855      	ldr	r5, [r2, #4]
 800dcb0:	432b      	orrs	r3, r5
 800dcb2:	6563      	str	r3, [r4, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dcb4:	078b      	lsls	r3, r1, #30
 800dcb6:	d506      	bpl.n	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dcb8:	250c      	movs	r5, #12
 800dcba:	4c41      	ldr	r4, [pc, #260]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dcbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dcbe:	43ab      	bics	r3, r5
 800dcc0:	6895      	ldr	r5, [r2, #8]
 800dcc2:	432b      	orrs	r3, r5
 800dcc4:	6563      	str	r3, [r4, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dcc6:	068b      	lsls	r3, r1, #26
 800dcc8:	d506      	bpl.n	800dcd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dcca:	4c3d      	ldr	r4, [pc, #244]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dccc:	4d43      	ldr	r5, [pc, #268]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800dcce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dcd0:	402b      	ands	r3, r5
 800dcd2:	68d5      	ldr	r5, [r2, #12]
 800dcd4:	432b      	orrs	r3, r5
 800dcd6:	6563      	str	r3, [r4, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800dcd8:	058b      	lsls	r3, r1, #22
 800dcda:	d506      	bpl.n	800dcea <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dcdc:	4c38      	ldr	r4, [pc, #224]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dcde:	4d40      	ldr	r5, [pc, #256]	; (800dde0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800dce0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dce2:	402b      	ands	r3, r5
 800dce4:	6995      	ldr	r5, [r2, #24]
 800dce6:	432b      	orrs	r3, r5
 800dce8:	6563      	str	r3, [r4, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800dcea:	054b      	lsls	r3, r1, #21
 800dcec:	d506      	bpl.n	800dcfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800dcee:	4c34      	ldr	r4, [pc, #208]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dcf0:	4d3c      	ldr	r5, [pc, #240]	; (800dde4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800dcf2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dcf4:	402b      	ands	r3, r5
 800dcf6:	69d5      	ldr	r5, [r2, #28]
 800dcf8:	432b      	orrs	r3, r5
 800dcfa:	6563      	str	r3, [r4, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dcfc:	064b      	lsls	r3, r1, #25
 800dcfe:	d506      	bpl.n	800dd0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dd00:	4c2f      	ldr	r4, [pc, #188]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd02:	4d39      	ldr	r5, [pc, #228]	; (800dde8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800dd04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dd06:	402b      	ands	r3, r5
 800dd08:	6915      	ldr	r5, [r2, #16]
 800dd0a:	432b      	orrs	r3, r5
 800dd0c:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dd0e:	044b      	lsls	r3, r1, #17
 800dd10:	d50f      	bpl.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800dd12:	4c2b      	ldr	r4, [pc, #172]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd14:	6a15      	ldr	r5, [r2, #32]
 800dd16:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	089b      	lsrs	r3, r3, #2
 800dd1c:	432b      	orrs	r3, r5
 800dd1e:	6563      	str	r3, [r4, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800dd20:	2380      	movs	r3, #128	; 0x80
 800dd22:	05db      	lsls	r3, r3, #23
 800dd24:	429d      	cmp	r5, r3
 800dd26:	d104      	bne.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x142>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800dd28:	2380      	movs	r3, #128	; 0x80
 800dd2a:	68e5      	ldr	r5, [r4, #12]
 800dd2c:	025b      	lsls	r3, r3, #9
 800dd2e:	432b      	orrs	r3, r5
 800dd30:	60e3      	str	r3, [r4, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dd32:	030b      	lsls	r3, r1, #12
 800dd34:	d506      	bpl.n	800dd44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dd36:	2540      	movs	r5, #64	; 0x40
 800dd38:	4c21      	ldr	r4, [pc, #132]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dd3c:	43ab      	bics	r3, r5
 800dd3e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800dd40:	432b      	orrs	r3, r5
 800dd42:	6563      	str	r3, [r4, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800dd44:	028b      	lsls	r3, r1, #10
 800dd46:	d50f      	bpl.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800dd48:	4c1d      	ldr	r4, [pc, #116]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd4a:	4e28      	ldr	r6, [pc, #160]	; (800ddec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800dd4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dd4e:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800dd50:	4033      	ands	r3, r6
 800dd52:	432b      	orrs	r3, r5
 800dd54:	6563      	str	r3, [r4, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800dd56:	2380      	movs	r3, #128	; 0x80
 800dd58:	03db      	lsls	r3, r3, #15
 800dd5a:	429d      	cmp	r5, r3
 800dd5c:	d104      	bne.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x178>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800dd5e:	2380      	movs	r3, #128	; 0x80
 800dd60:	68e5      	ldr	r5, [r4, #12]
 800dd62:	045b      	lsls	r3, r3, #17
 800dd64:	432b      	orrs	r3, r5
 800dd66:	60e3      	str	r3, [r4, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800dd68:	024b      	lsls	r3, r1, #9
 800dd6a:	d50d      	bpl.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800dd6c:	4d14      	ldr	r5, [pc, #80]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd6e:	4e20      	ldr	r6, [pc, #128]	; (800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800dd70:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 800dd72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800dd74:	4034      	ands	r4, r6
 800dd76:	431c      	orrs	r4, r3
 800dd78:	656c      	str	r4, [r5, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800dd7a:	2480      	movs	r4, #128	; 0x80
 800dd7c:	0464      	lsls	r4, r4, #17
 800dd7e:	42a3      	cmp	r3, r4
 800dd80:	d102      	bne.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800dd82:	68ec      	ldr	r4, [r5, #12]
 800dd84:	4323      	orrs	r3, r4
 800dd86:	60eb      	str	r3, [r5, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800dd88:	050b      	lsls	r3, r1, #20
 800dd8a:	d50f      	bpl.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800dd8c:	490c      	ldr	r1, [pc, #48]	; (800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd8e:	4c19      	ldr	r4, [pc, #100]	; (800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800dd90:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800dd92:	6952      	ldr	r2, [r2, #20]
 800dd94:	4023      	ands	r3, r4
 800dd96:	4313      	orrs	r3, r2
 800dd98:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800dd9a:	2380      	movs	r3, #128	; 0x80
 800dd9c:	01db      	lsls	r3, r3, #7
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d104      	bne.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800dda2:	2380      	movs	r3, #128	; 0x80
 800dda4:	68ca      	ldr	r2, [r1, #12]
 800dda6:	025b      	lsls	r3, r3, #9
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 800ddac:	b002      	add	sp, #8
 800ddae:	bc04      	pop	{r2}
 800ddb0:	4690      	mov	r8, r2
 800ddb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddb4:	6828      	ldr	r0, [r5, #0]
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddb6:	1bc0      	subs	r0, r0, r7
 800ddb8:	4560      	cmp	r0, ip
 800ddba:	d800      	bhi.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ddbc:	e759      	b.n	800dc72 <HAL_RCCEx_PeriphCLKConfig+0x82>
 800ddbe:	e769      	b.n	800dc94 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800ddc0:	40021000 	.word	0x40021000
 800ddc4:	40007000 	.word	0x40007000
 800ddc8:	2000048c 	.word	0x2000048c
 800ddcc:	fffffcff 	.word	0xfffffcff
 800ddd0:	fffeffff 	.word	0xfffeffff
 800ddd4:	00001388 	.word	0x00001388
 800ddd8:	efffffff 	.word	0xefffffff
 800dddc:	fffff3ff 	.word	0xfffff3ff
 800dde0:	fff3ffff 	.word	0xfff3ffff
 800dde4:	ffcfffff 	.word	0xffcfffff
 800dde8:	ffffcfff 	.word	0xffffcfff
 800ddec:	ffbfffff 	.word	0xffbfffff
 800ddf0:	feffffff 	.word	0xfeffffff
 800ddf4:	ffff3fff 	.word	0xffff3fff

0800ddf8 <HAL_RCC_ClockConfig>:
{
 800ddf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddfa:	46d6      	mov	lr, sl
 800ddfc:	464f      	mov	r7, r9
 800ddfe:	4646      	mov	r6, r8
 800de00:	b5c0      	push	{r6, r7, lr}
  if (RCC_ClkInitStruct == NULL)
 800de02:	2800      	cmp	r0, #0
 800de04:	d105      	bne.n	800de12 <HAL_RCC_ClockConfig+0x1a>
    return HAL_ERROR;
 800de06:	2001      	movs	r0, #1
}
 800de08:	bc1c      	pop	{r2, r3, r4}
 800de0a:	4690      	mov	r8, r2
 800de0c:	4699      	mov	r9, r3
 800de0e:	46a2      	mov	sl, r4
 800de10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800de12:	2207      	movs	r2, #7
 800de14:	4b49      	ldr	r3, [pc, #292]	; (800df3c <HAL_RCC_ClockConfig+0x144>)
 800de16:	681c      	ldr	r4, [r3, #0]
 800de18:	4014      	ands	r4, r2
 800de1a:	428c      	cmp	r4, r1
 800de1c:	d32a      	bcc.n	800de74 <HAL_RCC_ClockConfig+0x7c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de1e:	6806      	ldr	r6, [r0, #0]
 800de20:	07b2      	lsls	r2, r6, #30
 800de22:	d438      	bmi.n	800de96 <HAL_RCC_ClockConfig+0x9e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800de24:	07f2      	lsls	r2, r6, #31
 800de26:	d445      	bmi.n	800deb4 <HAL_RCC_ClockConfig+0xbc>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800de28:	2207      	movs	r2, #7
 800de2a:	681c      	ldr	r4, [r3, #0]
 800de2c:	4014      	ands	r4, r2
 800de2e:	42a1      	cmp	r1, r4
 800de30:	d20b      	bcs.n	800de4a <HAL_RCC_ClockConfig+0x52>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de32:	681c      	ldr	r4, [r3, #0]
 800de34:	4d42      	ldr	r5, [pc, #264]	; (800df40 <HAL_RCC_ClockConfig+0x148>)
 800de36:	4394      	bics	r4, r2
 800de38:	430c      	orrs	r4, r1
 800de3a:	601c      	str	r4, [r3, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de3c:	4c41      	ldr	r4, [pc, #260]	; (800df44 <HAL_RCC_ClockConfig+0x14c>)
 800de3e:	682f      	ldr	r7, [r5, #0]
 800de40:	46a4      	mov	ip, r4
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800de42:	681c      	ldr	r4, [r3, #0]
 800de44:	4014      	ands	r4, r2
 800de46:	42a1      	cmp	r1, r4
 800de48:	d16b      	bne.n	800df22 <HAL_RCC_ClockConfig+0x12a>
 800de4a:	4c3f      	ldr	r4, [pc, #252]	; (800df48 <HAL_RCC_ClockConfig+0x150>)
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de4c:	0773      	lsls	r3, r6, #29
 800de4e:	d46d      	bmi.n	800df2c <HAL_RCC_ClockConfig+0x134>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800de50:	f7fe f98e 	bl	800c170 <HAL_RCC_GetSysClockFreq>
 800de54:	68a3      	ldr	r3, [r4, #8]
 800de56:	4a3d      	ldr	r2, [pc, #244]	; (800df4c <HAL_RCC_ClockConfig+0x154>)
 800de58:	051b      	lsls	r3, r3, #20
 800de5a:	0f1b      	lsrs	r3, r3, #28
 800de5c:	009b      	lsls	r3, r3, #2
 800de5e:	18d3      	adds	r3, r2, r3
 800de60:	221f      	movs	r2, #31
 800de62:	6a1b      	ldr	r3, [r3, #32]
 800de64:	493a      	ldr	r1, [pc, #232]	; (800df50 <HAL_RCC_ClockConfig+0x158>)
 800de66:	4013      	ands	r3, r2
 800de68:	40d8      	lsrs	r0, r3
 800de6a:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800de6c:	6848      	ldr	r0, [r1, #4]
 800de6e:	f7fe f88e 	bl	800bf8e <HAL_InitTick>
 800de72:	e7c9      	b.n	800de08 <HAL_RCC_ClockConfig+0x10>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de74:	681c      	ldr	r4, [r3, #0]
 800de76:	4d32      	ldr	r5, [pc, #200]	; (800df40 <HAL_RCC_ClockConfig+0x148>)
 800de78:	4394      	bics	r4, r2
 800de7a:	430c      	orrs	r4, r1
 800de7c:	601c      	str	r4, [r3, #0]
 800de7e:	682e      	ldr	r6, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de80:	4f30      	ldr	r7, [pc, #192]	; (800df44 <HAL_RCC_ClockConfig+0x14c>)
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800de82:	681c      	ldr	r4, [r3, #0]
 800de84:	4014      	ands	r4, r2
 800de86:	428c      	cmp	r4, r1
 800de88:	d0c9      	beq.n	800de1e <HAL_RCC_ClockConfig+0x26>
 800de8a:	682c      	ldr	r4, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de8c:	1ba4      	subs	r4, r4, r6
 800de8e:	42bc      	cmp	r4, r7
 800de90:	d9f7      	bls.n	800de82 <HAL_RCC_ClockConfig+0x8a>
        return HAL_TIMEOUT;
 800de92:	2003      	movs	r0, #3
 800de94:	e7b8      	b.n	800de08 <HAL_RCC_ClockConfig+0x10>
 800de96:	4c2c      	ldr	r4, [pc, #176]	; (800df48 <HAL_RCC_ClockConfig+0x150>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de98:	0772      	lsls	r2, r6, #29
 800de9a:	d504      	bpl.n	800dea6 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800de9c:	22e0      	movs	r2, #224	; 0xe0
 800de9e:	68a5      	ldr	r5, [r4, #8]
 800dea0:	01d2      	lsls	r2, r2, #7
 800dea2:	432a      	orrs	r2, r5
 800dea4:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dea6:	68a2      	ldr	r2, [r4, #8]
 800dea8:	4d2a      	ldr	r5, [pc, #168]	; (800df54 <HAL_RCC_ClockConfig+0x15c>)
 800deaa:	402a      	ands	r2, r5
 800deac:	6885      	ldr	r5, [r0, #8]
 800deae:	432a      	orrs	r2, r5
 800deb0:	60a2      	str	r2, [r4, #8]
 800deb2:	e7b7      	b.n	800de24 <HAL_RCC_ClockConfig+0x2c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800deb4:	6842      	ldr	r2, [r0, #4]
 800deb6:	4c24      	ldr	r4, [pc, #144]	; (800df48 <HAL_RCC_ClockConfig+0x150>)
 800deb8:	2a01      	cmp	r2, #1
 800deba:	d11b      	bne.n	800def4 <HAL_RCC_ClockConfig+0xfc>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800debc:	6825      	ldr	r5, [r4, #0]
 800debe:	03ad      	lsls	r5, r5, #14
 800dec0:	d5a1      	bpl.n	800de06 <HAL_RCC_ClockConfig+0xe>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dec2:	2707      	movs	r7, #7
 800dec4:	68a5      	ldr	r5, [r4, #8]
 800dec6:	43bd      	bics	r5, r7
 800dec8:	4315      	orrs	r5, r2
 800deca:	4f1d      	ldr	r7, [pc, #116]	; (800df40 <HAL_RCC_ClockConfig+0x148>)
 800decc:	60a5      	str	r5, [r4, #8]
 800dece:	683d      	ldr	r5, [r7, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ded0:	00d2      	lsls	r2, r2, #3
 800ded2:	46a8      	mov	r8, r5
 800ded4:	2538      	movs	r5, #56	; 0x38
 800ded6:	46ac      	mov	ip, r5
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ded8:	4d1a      	ldr	r5, [pc, #104]	; (800df44 <HAL_RCC_ClockConfig+0x14c>)
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800deda:	4692      	mov	sl, r2
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dedc:	46a9      	mov	r9, r5
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dede:	4662      	mov	r2, ip
 800dee0:	68a5      	ldr	r5, [r4, #8]
 800dee2:	4015      	ands	r5, r2
 800dee4:	4555      	cmp	r5, sl
 800dee6:	d09f      	beq.n	800de28 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dee8:	4642      	mov	r2, r8
 800deea:	683d      	ldr	r5, [r7, #0]
 800deec:	1aad      	subs	r5, r5, r2
 800deee:	454d      	cmp	r5, r9
 800def0:	d9f5      	bls.n	800dede <HAL_RCC_ClockConfig+0xe6>
 800def2:	e7ce      	b.n	800de92 <HAL_RCC_ClockConfig+0x9a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800def4:	2a02      	cmp	r2, #2
 800def6:	d103      	bne.n	800df00 <HAL_RCC_ClockConfig+0x108>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800def8:	6825      	ldr	r5, [r4, #0]
 800defa:	01ad      	lsls	r5, r5, #6
 800defc:	d4e1      	bmi.n	800dec2 <HAL_RCC_ClockConfig+0xca>
 800defe:	e782      	b.n	800de06 <HAL_RCC_ClockConfig+0xe>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800df00:	2a00      	cmp	r2, #0
 800df02:	d103      	bne.n	800df0c <HAL_RCC_ClockConfig+0x114>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800df04:	6825      	ldr	r5, [r4, #0]
 800df06:	056d      	lsls	r5, r5, #21
 800df08:	d4db      	bmi.n	800dec2 <HAL_RCC_ClockConfig+0xca>
 800df0a:	e77c      	b.n	800de06 <HAL_RCC_ClockConfig+0xe>
 800df0c:	2502      	movs	r5, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800df0e:	2a03      	cmp	r2, #3
 800df10:	d103      	bne.n	800df1a <HAL_RCC_ClockConfig+0x122>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800df12:	6e27      	ldr	r7, [r4, #96]	; 0x60
 800df14:	422f      	tst	r7, r5
 800df16:	d1d4      	bne.n	800dec2 <HAL_RCC_ClockConfig+0xca>
 800df18:	e775      	b.n	800de06 <HAL_RCC_ClockConfig+0xe>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800df1a:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800df1c:	422f      	tst	r7, r5
 800df1e:	d1d0      	bne.n	800dec2 <HAL_RCC_ClockConfig+0xca>
 800df20:	e771      	b.n	800de06 <HAL_RCC_ClockConfig+0xe>
 800df22:	682c      	ldr	r4, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800df24:	1be4      	subs	r4, r4, r7
 800df26:	4564      	cmp	r4, ip
 800df28:	d98b      	bls.n	800de42 <HAL_RCC_ClockConfig+0x4a>
 800df2a:	e7b2      	b.n	800de92 <HAL_RCC_ClockConfig+0x9a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800df2c:	68a3      	ldr	r3, [r4, #8]
 800df2e:	4a0a      	ldr	r2, [pc, #40]	; (800df58 <HAL_RCC_ClockConfig+0x160>)
 800df30:	4013      	ands	r3, r2
 800df32:	68c2      	ldr	r2, [r0, #12]
 800df34:	4313      	orrs	r3, r2
 800df36:	60a3      	str	r3, [r4, #8]
 800df38:	e78a      	b.n	800de50 <HAL_RCC_ClockConfig+0x58>
 800df3a:	46c0      	nop			; (mov r8, r8)
 800df3c:	40022000 	.word	0x40022000
 800df40:	2000048c 	.word	0x2000048c
 800df44:	00001388 	.word	0x00001388
 800df48:	40021000 	.word	0x40021000
 800df4c:	0801bd9c 	.word	0x0801bd9c
 800df50:	20000000 	.word	0x20000000
 800df54:	fffff0ff 	.word	0xfffff0ff
 800df58:	ffff8fff 	.word	0xffff8fff

0800df5c <HAL_RCC_OscConfig>:
{
 800df5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df5e:	1e04      	subs	r4, r0, #0
  if (RCC_OscInitStruct == NULL)
 800df60:	d101      	bne.n	800df66 <HAL_RCC_OscConfig+0xa>
    return HAL_ERROR;
 800df62:	2001      	movs	r0, #1
}
 800df64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800df66:	6803      	ldr	r3, [r0, #0]
 800df68:	07db      	lsls	r3, r3, #31
 800df6a:	d40f      	bmi.n	800df8c <HAL_RCC_OscConfig+0x30>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800df6c:	6823      	ldr	r3, [r4, #0]
 800df6e:	079b      	lsls	r3, r3, #30
 800df70:	d456      	bmi.n	800e020 <HAL_RCC_OscConfig+0xc4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800df72:	6825      	ldr	r5, [r4, #0]
 800df74:	072b      	lsls	r3, r5, #28
 800df76:	d500      	bpl.n	800df7a <HAL_RCC_OscConfig+0x1e>
 800df78:	e0b5      	b.n	800e0e6 <HAL_RCC_OscConfig+0x18a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800df7a:	076b      	lsls	r3, r5, #29
 800df7c:	d500      	bpl.n	800df80 <HAL_RCC_OscConfig+0x24>
 800df7e:	e0e3      	b.n	800e148 <HAL_RCC_OscConfig+0x1ec>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800df80:	69e0      	ldr	r0, [r4, #28]
 800df82:	2800      	cmp	r0, #0
 800df84:	d000      	beq.n	800df88 <HAL_RCC_OscConfig+0x2c>
 800df86:	e148      	b.n	800e21a <HAL_RCC_OscConfig+0x2be>
  return HAL_OK;
 800df88:	2000      	movs	r0, #0
 800df8a:	e7eb      	b.n	800df64 <HAL_RCC_OscConfig+0x8>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800df8c:	2138      	movs	r1, #56	; 0x38
 800df8e:	4bc3      	ldr	r3, [pc, #780]	; (800e29c <HAL_RCC_OscConfig+0x340>)
 800df90:	689a      	ldr	r2, [r3, #8]
 800df92:	400a      	ands	r2, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800df94:	68d9      	ldr	r1, [r3, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800df96:	2a10      	cmp	r2, #16
 800df98:	d109      	bne.n	800dfae <HAL_RCC_OscConfig+0x52>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800df9a:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800df9c:	078a      	lsls	r2, r1, #30
 800df9e:	d108      	bne.n	800dfb2 <HAL_RCC_OscConfig+0x56>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	039b      	lsls	r3, r3, #14
 800dfa4:	d5e2      	bpl.n	800df6c <HAL_RCC_OscConfig+0x10>
 800dfa6:	6863      	ldr	r3, [r4, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d1df      	bne.n	800df6c <HAL_RCC_OscConfig+0x10>
 800dfac:	e7d9      	b.n	800df62 <HAL_RCC_OscConfig+0x6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800dfae:	2a08      	cmp	r2, #8
 800dfb0:	d0f6      	beq.n	800dfa0 <HAL_RCC_OscConfig+0x44>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dfb2:	2080      	movs	r0, #128	; 0x80
 800dfb4:	6862      	ldr	r2, [r4, #4]
 800dfb6:	0240      	lsls	r0, r0, #9
 800dfb8:	49b9      	ldr	r1, [pc, #740]	; (800e2a0 <HAL_RCC_OscConfig+0x344>)
 800dfba:	4282      	cmp	r2, r0
 800dfbc:	d10e      	bne.n	800dfdc <HAL_RCC_OscConfig+0x80>
 800dfbe:	6818      	ldr	r0, [r3, #0]
 800dfc0:	4302      	orrs	r2, r0
 800dfc2:	601a      	str	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dfc4:	2080      	movs	r0, #128	; 0x80
 800dfc6:	680d      	ldr	r5, [r1, #0]
 800dfc8:	0280      	lsls	r0, r0, #10
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	4202      	tst	r2, r0
 800dfce:	d1cd      	bne.n	800df6c <HAL_RCC_OscConfig+0x10>
 800dfd0:	680a      	ldr	r2, [r1, #0]
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dfd2:	1b52      	subs	r2, r2, r5
 800dfd4:	2a64      	cmp	r2, #100	; 0x64
 800dfd6:	d9f8      	bls.n	800dfca <HAL_RCC_OscConfig+0x6e>
            return HAL_TIMEOUT;
 800dfd8:	2003      	movs	r0, #3
 800dfda:	e7c3      	b.n	800df64 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dfdc:	25a0      	movs	r5, #160	; 0xa0
 800dfde:	02ed      	lsls	r5, r5, #11
 800dfe0:	42aa      	cmp	r2, r5
 800dfe2:	d108      	bne.n	800dff6 <HAL_RCC_OscConfig+0x9a>
 800dfe4:	2280      	movs	r2, #128	; 0x80
 800dfe6:	681d      	ldr	r5, [r3, #0]
 800dfe8:	02d2      	lsls	r2, r2, #11
 800dfea:	432a      	orrs	r2, r5
 800dfec:	601a      	str	r2, [r3, #0]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	4310      	orrs	r0, r2
 800dff2:	6018      	str	r0, [r3, #0]
 800dff4:	e7e6      	b.n	800dfc4 <HAL_RCC_OscConfig+0x68>
 800dff6:	6818      	ldr	r0, [r3, #0]
 800dff8:	4daa      	ldr	r5, [pc, #680]	; (800e2a4 <HAL_RCC_OscConfig+0x348>)
 800dffa:	4028      	ands	r0, r5
 800dffc:	6018      	str	r0, [r3, #0]
 800dffe:	6818      	ldr	r0, [r3, #0]
 800e000:	4da9      	ldr	r5, [pc, #676]	; (800e2a8 <HAL_RCC_OscConfig+0x34c>)
 800e002:	4028      	ands	r0, r5
 800e004:	6018      	str	r0, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e006:	2a00      	cmp	r2, #0
 800e008:	d1dc      	bne.n	800dfc4 <HAL_RCC_OscConfig+0x68>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e00a:	2080      	movs	r0, #128	; 0x80
 800e00c:	680d      	ldr	r5, [r1, #0]
 800e00e:	0280      	lsls	r0, r0, #10
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	4202      	tst	r2, r0
 800e014:	d0aa      	beq.n	800df6c <HAL_RCC_OscConfig+0x10>
 800e016:	680a      	ldr	r2, [r1, #0]
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e018:	1b52      	subs	r2, r2, r5
 800e01a:	2a64      	cmp	r2, #100	; 0x64
 800e01c:	d9f8      	bls.n	800e010 <HAL_RCC_OscConfig+0xb4>
 800e01e:	e7db      	b.n	800dfd8 <HAL_RCC_OscConfig+0x7c>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e020:	2238      	movs	r2, #56	; 0x38
 800e022:	4b9e      	ldr	r3, [pc, #632]	; (800e29c <HAL_RCC_OscConfig+0x340>)
 800e024:	6899      	ldr	r1, [r3, #8]
 800e026:	400a      	ands	r2, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e028:	68d9      	ldr	r1, [r3, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800e02a:	2a10      	cmp	r2, #16
 800e02c:	d127      	bne.n	800e07e <HAL_RCC_OscConfig+0x122>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e02e:	2003      	movs	r0, #3
 800e030:	4001      	ands	r1, r0
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800e032:	2902      	cmp	r1, #2
 800e034:	d125      	bne.n	800e082 <HAL_RCC_OscConfig+0x126>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e036:	6819      	ldr	r1, [r3, #0]
 800e038:	0549      	lsls	r1, r1, #21
 800e03a:	d503      	bpl.n	800e044 <HAL_RCC_OscConfig+0xe8>
 800e03c:	68e1      	ldr	r1, [r4, #12]
 800e03e:	2900      	cmp	r1, #0
 800e040:	d100      	bne.n	800e044 <HAL_RCC_OscConfig+0xe8>
 800e042:	e78e      	b.n	800df62 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e044:	6858      	ldr	r0, [r3, #4]
 800e046:	6961      	ldr	r1, [r4, #20]
 800e048:	4d98      	ldr	r5, [pc, #608]	; (800e2ac <HAL_RCC_OscConfig+0x350>)
 800e04a:	0209      	lsls	r1, r1, #8
 800e04c:	4028      	ands	r0, r5
 800e04e:	4301      	orrs	r1, r0
 800e050:	6059      	str	r1, [r3, #4]
 800e052:	4997      	ldr	r1, [pc, #604]	; (800e2b0 <HAL_RCC_OscConfig+0x354>)
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800e054:	2a00      	cmp	r2, #0
 800e056:	d10b      	bne.n	800e070 <HAL_RCC_OscConfig+0x114>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	4896      	ldr	r0, [pc, #600]	; (800e2b4 <HAL_RCC_OscConfig+0x358>)
 800e05c:	4002      	ands	r2, r0
 800e05e:	6920      	ldr	r0, [r4, #16]
 800e060:	4302      	orrs	r2, r0
 800e062:	601a      	str	r2, [r3, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4a94      	ldr	r2, [pc, #592]	; (800e2b8 <HAL_RCC_OscConfig+0x35c>)
 800e068:	049b      	lsls	r3, r3, #18
 800e06a:	0f5b      	lsrs	r3, r3, #29
 800e06c:	40da      	lsrs	r2, r3
 800e06e:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e070:	6848      	ldr	r0, [r1, #4]
 800e072:	f7fd ff8c 	bl	800bf8e <HAL_InitTick>
 800e076:	2800      	cmp	r0, #0
 800e078:	d100      	bne.n	800e07c <HAL_RCC_OscConfig+0x120>
 800e07a:	e77a      	b.n	800df72 <HAL_RCC_OscConfig+0x16>
 800e07c:	e771      	b.n	800df62 <HAL_RCC_OscConfig+0x6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800e07e:	2a00      	cmp	r2, #0
 800e080:	d0d9      	beq.n	800e036 <HAL_RCC_OscConfig+0xda>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e082:	68e2      	ldr	r2, [r4, #12]
 800e084:	4986      	ldr	r1, [pc, #536]	; (800e2a0 <HAL_RCC_OscConfig+0x344>)
 800e086:	2a00      	cmp	r2, #0
 800e088:	d01d      	beq.n	800e0c6 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	4889      	ldr	r0, [pc, #548]	; (800e2b4 <HAL_RCC_OscConfig+0x358>)
 800e08e:	4002      	ands	r2, r0
 800e090:	6920      	ldr	r0, [r4, #16]
 800e092:	4302      	orrs	r2, r0
 800e094:	601a      	str	r2, [r3, #0]
        __HAL_RCC_HSI_ENABLE();
 800e096:	2280      	movs	r2, #128	; 0x80
 800e098:	6818      	ldr	r0, [r3, #0]
 800e09a:	0052      	lsls	r2, r2, #1
 800e09c:	4302      	orrs	r2, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e09e:	2080      	movs	r0, #128	; 0x80
        __HAL_RCC_HSI_ENABLE();
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	680d      	ldr	r5, [r1, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e0a4:	00c0      	lsls	r0, r0, #3
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	4202      	tst	r2, r0
 800e0aa:	d007      	beq.n	800e0bc <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e0ac:	6859      	ldr	r1, [r3, #4]
 800e0ae:	6962      	ldr	r2, [r4, #20]
 800e0b0:	487e      	ldr	r0, [pc, #504]	; (800e2ac <HAL_RCC_OscConfig+0x350>)
 800e0b2:	0212      	lsls	r2, r2, #8
 800e0b4:	4001      	ands	r1, r0
 800e0b6:	430a      	orrs	r2, r1
 800e0b8:	605a      	str	r2, [r3, #4]
 800e0ba:	e75a      	b.n	800df72 <HAL_RCC_OscConfig+0x16>
 800e0bc:	680a      	ldr	r2, [r1, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e0be:	1b52      	subs	r2, r2, r5
 800e0c0:	2a02      	cmp	r2, #2
 800e0c2:	d9f0      	bls.n	800e0a6 <HAL_RCC_OscConfig+0x14a>
 800e0c4:	e788      	b.n	800dfd8 <HAL_RCC_OscConfig+0x7c>
        __HAL_RCC_HSI_DISABLE();
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	487c      	ldr	r0, [pc, #496]	; (800e2bc <HAL_RCC_OscConfig+0x360>)
 800e0ca:	4002      	ands	r2, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e0cc:	2080      	movs	r0, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 800e0ce:	601a      	str	r2, [r3, #0]
 800e0d0:	680d      	ldr	r5, [r1, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e0d2:	00c0      	lsls	r0, r0, #3
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	4202      	tst	r2, r0
 800e0d8:	d100      	bne.n	800e0dc <HAL_RCC_OscConfig+0x180>
 800e0da:	e74a      	b.n	800df72 <HAL_RCC_OscConfig+0x16>
 800e0dc:	680a      	ldr	r2, [r1, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e0de:	1b52      	subs	r2, r2, r5
 800e0e0:	2a02      	cmp	r2, #2
 800e0e2:	d9f7      	bls.n	800e0d4 <HAL_RCC_OscConfig+0x178>
 800e0e4:	e778      	b.n	800dfd8 <HAL_RCC_OscConfig+0x7c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800e0e6:	2338      	movs	r3, #56	; 0x38
 800e0e8:	4a6c      	ldr	r2, [pc, #432]	; (800e29c <HAL_RCC_OscConfig+0x340>)
 800e0ea:	6891      	ldr	r1, [r2, #8]
 800e0ec:	4019      	ands	r1, r3
 800e0ee:	0013      	movs	r3, r2
 800e0f0:	2918      	cmp	r1, #24
 800e0f2:	d108      	bne.n	800e106 <HAL_RCC_OscConfig+0x1aa>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800e0f4:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800e0f6:	079b      	lsls	r3, r3, #30
 800e0f8:	d400      	bmi.n	800e0fc <HAL_RCC_OscConfig+0x1a0>
 800e0fa:	e73e      	b.n	800df7a <HAL_RCC_OscConfig+0x1e>
 800e0fc:	69a3      	ldr	r3, [r4, #24]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d000      	beq.n	800e104 <HAL_RCC_OscConfig+0x1a8>
 800e102:	e73a      	b.n	800df7a <HAL_RCC_OscConfig+0x1e>
 800e104:	e72d      	b.n	800df62 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e106:	69a0      	ldr	r0, [r4, #24]
 800e108:	2101      	movs	r1, #1
 800e10a:	4a65      	ldr	r2, [pc, #404]	; (800e2a0 <HAL_RCC_OscConfig+0x344>)
 800e10c:	2800      	cmp	r0, #0
 800e10e:	d00d      	beq.n	800e12c <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_LSI_ENABLE();
 800e110:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800e112:	4301      	orrs	r1, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e114:	2002      	movs	r0, #2
        __HAL_RCC_LSI_ENABLE();
 800e116:	6619      	str	r1, [r3, #96]	; 0x60
 800e118:	6816      	ldr	r6, [r2, #0]
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e11a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800e11c:	4201      	tst	r1, r0
 800e11e:	d000      	beq.n	800e122 <HAL_RCC_OscConfig+0x1c6>
 800e120:	e72b      	b.n	800df7a <HAL_RCC_OscConfig+0x1e>
 800e122:	6811      	ldr	r1, [r2, #0]
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e124:	1b89      	subs	r1, r1, r6
 800e126:	2902      	cmp	r1, #2
 800e128:	d9f7      	bls.n	800e11a <HAL_RCC_OscConfig+0x1be>
 800e12a:	e755      	b.n	800dfd8 <HAL_RCC_OscConfig+0x7c>
        __HAL_RCC_LSI_DISABLE();
 800e12c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800e12e:	4388      	bics	r0, r1
 800e130:	6618      	str	r0, [r3, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e132:	2002      	movs	r0, #2
 800e134:	6816      	ldr	r6, [r2, #0]
 800e136:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800e138:	4201      	tst	r1, r0
 800e13a:	d100      	bne.n	800e13e <HAL_RCC_OscConfig+0x1e2>
 800e13c:	e71d      	b.n	800df7a <HAL_RCC_OscConfig+0x1e>
 800e13e:	6811      	ldr	r1, [r2, #0]
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e140:	1b89      	subs	r1, r1, r6
 800e142:	2902      	cmp	r1, #2
 800e144:	d9f7      	bls.n	800e136 <HAL_RCC_OscConfig+0x1da>
 800e146:	e747      	b.n	800dfd8 <HAL_RCC_OscConfig+0x7c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800e148:	2338      	movs	r3, #56	; 0x38
 800e14a:	4a54      	ldr	r2, [pc, #336]	; (800e29c <HAL_RCC_OscConfig+0x340>)
 800e14c:	6891      	ldr	r1, [r2, #8]
 800e14e:	4019      	ands	r1, r3
 800e150:	0013      	movs	r3, r2
 800e152:	2920      	cmp	r1, #32
 800e154:	d108      	bne.n	800e168 <HAL_RCC_OscConfig+0x20c>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800e156:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800e158:	079b      	lsls	r3, r3, #30
 800e15a:	d400      	bmi.n	800e15e <HAL_RCC_OscConfig+0x202>
 800e15c:	e710      	b.n	800df80 <HAL_RCC_OscConfig+0x24>
 800e15e:	68a3      	ldr	r3, [r4, #8]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d000      	beq.n	800e166 <HAL_RCC_OscConfig+0x20a>
 800e164:	e70c      	b.n	800df80 <HAL_RCC_OscConfig+0x24>
 800e166:	e6fc      	b.n	800df62 <HAL_RCC_OscConfig+0x6>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800e168:	2180      	movs	r1, #128	; 0x80
 800e16a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e16c:	0549      	lsls	r1, r1, #21
    FlagStatus       pwrclkchanged = RESET;
 800e16e:	2500      	movs	r5, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800e170:	420a      	tst	r2, r1
 800e172:	d107      	bne.n	800e184 <HAL_RCC_OscConfig+0x228>
        __HAL_RCC_PWR_CLK_ENABLE();
 800e174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        pwrclkchanged = SET;
 800e176:	3501      	adds	r5, #1
        __HAL_RCC_PWR_CLK_ENABLE();
 800e178:	430a      	orrs	r2, r1
 800e17a:	63da      	str	r2, [r3, #60]	; 0x3c
 800e17c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e17e:	400a      	ands	r2, r1
 800e180:	9201      	str	r2, [sp, #4]
 800e182:	9a01      	ldr	r2, [sp, #4]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e184:	2080      	movs	r0, #128	; 0x80
 800e186:	494e      	ldr	r1, [pc, #312]	; (800e2c0 <HAL_RCC_OscConfig+0x364>)
 800e188:	0040      	lsls	r0, r0, #1
 800e18a:	680e      	ldr	r6, [r1, #0]
 800e18c:	4a44      	ldr	r2, [pc, #272]	; (800e2a0 <HAL_RCC_OscConfig+0x344>)
 800e18e:	4206      	tst	r6, r0
 800e190:	d013      	beq.n	800e1ba <HAL_RCC_OscConfig+0x25e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e192:	68a1      	ldr	r1, [r4, #8]
 800e194:	2901      	cmp	r1, #1
 800e196:	d11c      	bne.n	800e1d2 <HAL_RCC_OscConfig+0x276>
 800e198:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800e19a:	4301      	orrs	r1, r0
 800e19c:	65d9      	str	r1, [r3, #92]	; 0x5c
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e19e:	2002      	movs	r0, #2
 800e1a0:	6816      	ldr	r6, [r2, #0]
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1a2:	4f48      	ldr	r7, [pc, #288]	; (800e2c4 <HAL_RCC_OscConfig+0x368>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1a4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e1a6:	4201      	tst	r1, r0
 800e1a8:	d032      	beq.n	800e210 <HAL_RCC_OscConfig+0x2b4>
      if (pwrclkchanged == SET)
 800e1aa:	2d01      	cmp	r5, #1
 800e1ac:	d000      	beq.n	800e1b0 <HAL_RCC_OscConfig+0x254>
 800e1ae:	e6e7      	b.n	800df80 <HAL_RCC_OscConfig+0x24>
        __HAL_RCC_PWR_CLK_DISABLE();
 800e1b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1b2:	4945      	ldr	r1, [pc, #276]	; (800e2c8 <HAL_RCC_OscConfig+0x36c>)
 800e1b4:	400a      	ands	r2, r1
 800e1b6:	63da      	str	r2, [r3, #60]	; 0x3c
 800e1b8:	e6e2      	b.n	800df80 <HAL_RCC_OscConfig+0x24>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e1ba:	680e      	ldr	r6, [r1, #0]
 800e1bc:	4306      	orrs	r6, r0
 800e1be:	600e      	str	r6, [r1, #0]
 800e1c0:	6817      	ldr	r7, [r2, #0]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e1c2:	680e      	ldr	r6, [r1, #0]
 800e1c4:	4206      	tst	r6, r0
 800e1c6:	d1e4      	bne.n	800e192 <HAL_RCC_OscConfig+0x236>
 800e1c8:	6816      	ldr	r6, [r2, #0]
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e1ca:	1bf6      	subs	r6, r6, r7
 800e1cc:	2e02      	cmp	r6, #2
 800e1ce:	d9f8      	bls.n	800e1c2 <HAL_RCC_OscConfig+0x266>
 800e1d0:	e702      	b.n	800dfd8 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e1d2:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800e1d4:	2905      	cmp	r1, #5
 800e1d6:	d107      	bne.n	800e1e8 <HAL_RCC_OscConfig+0x28c>
 800e1d8:	3901      	subs	r1, #1
 800e1da:	4301      	orrs	r1, r0
 800e1dc:	65d9      	str	r1, [r3, #92]	; 0x5c
 800e1de:	2101      	movs	r1, #1
 800e1e0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800e1e2:	4301      	orrs	r1, r0
 800e1e4:	65d9      	str	r1, [r3, #92]	; 0x5c
 800e1e6:	e7da      	b.n	800e19e <HAL_RCC_OscConfig+0x242>
 800e1e8:	2601      	movs	r6, #1
 800e1ea:	43b0      	bics	r0, r6
 800e1ec:	65d8      	str	r0, [r3, #92]	; 0x5c
 800e1ee:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800e1f0:	3603      	adds	r6, #3
 800e1f2:	43b0      	bics	r0, r6
 800e1f4:	65d8      	str	r0, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e1f6:	2900      	cmp	r1, #0
 800e1f8:	d1d1      	bne.n	800e19e <HAL_RCC_OscConfig+0x242>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e1fa:	2002      	movs	r0, #2
 800e1fc:	6816      	ldr	r6, [r2, #0]
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1fe:	4f31      	ldr	r7, [pc, #196]	; (800e2c4 <HAL_RCC_OscConfig+0x368>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e200:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e202:	4201      	tst	r1, r0
 800e204:	d0d1      	beq.n	800e1aa <HAL_RCC_OscConfig+0x24e>
 800e206:	6811      	ldr	r1, [r2, #0]
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e208:	1b89      	subs	r1, r1, r6
 800e20a:	42b9      	cmp	r1, r7
 800e20c:	d9f8      	bls.n	800e200 <HAL_RCC_OscConfig+0x2a4>
 800e20e:	e6e3      	b.n	800dfd8 <HAL_RCC_OscConfig+0x7c>
 800e210:	6811      	ldr	r1, [r2, #0]
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e212:	1b89      	subs	r1, r1, r6
 800e214:	42b9      	cmp	r1, r7
 800e216:	d9c5      	bls.n	800e1a4 <HAL_RCC_OscConfig+0x248>
 800e218:	e6de      	b.n	800dfd8 <HAL_RCC_OscConfig+0x7c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e21a:	2338      	movs	r3, #56	; 0x38
 800e21c:	4a1f      	ldr	r2, [pc, #124]	; (800e29c <HAL_RCC_OscConfig+0x340>)
 800e21e:	6891      	ldr	r1, [r2, #8]
 800e220:	4019      	ands	r1, r3
 800e222:	0013      	movs	r3, r2
 800e224:	2910      	cmp	r1, #16
 800e226:	d069      	beq.n	800e2fc <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_DISABLE();
 800e228:	6812      	ldr	r2, [r2, #0]
 800e22a:	4d28      	ldr	r5, [pc, #160]	; (800e2cc <HAL_RCC_OscConfig+0x370>)
 800e22c:	491c      	ldr	r1, [pc, #112]	; (800e2a0 <HAL_RCC_OscConfig+0x344>)
 800e22e:	402a      	ands	r2, r5
 800e230:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e232:	2802      	cmp	r0, #2
 800e234:	d14e      	bne.n	800e2d4 <HAL_RCC_OscConfig+0x378>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e236:	2080      	movs	r0, #128	; 0x80
 800e238:	680d      	ldr	r5, [r1, #0]
 800e23a:	0480      	lsls	r0, r0, #18
 800e23c:	681a      	ldr	r2, [r3, #0]
 800e23e:	4202      	tst	r2, r0
 800e240:	d126      	bne.n	800e290 <HAL_RCC_OscConfig+0x334>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e242:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e244:	6a22      	ldr	r2, [r4, #32]
 800e246:	68d8      	ldr	r0, [r3, #12]
 800e248:	432a      	orrs	r2, r5
 800e24a:	4d21      	ldr	r5, [pc, #132]	; (800e2d0 <HAL_RCC_OscConfig+0x374>)
 800e24c:	4028      	ands	r0, r5
 800e24e:	4302      	orrs	r2, r0
 800e250:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e252:	4302      	orrs	r2, r0
 800e254:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e256:	4302      	orrs	r2, r0
 800e258:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e25a:	4302      	orrs	r2, r0
 800e25c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e25e:	0200      	lsls	r0, r0, #8
 800e260:	4302      	orrs	r2, r0
 800e262:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLL_ENABLE();
 800e264:	2280      	movs	r2, #128	; 0x80
 800e266:	6818      	ldr	r0, [r3, #0]
 800e268:	0452      	lsls	r2, r2, #17
 800e26a:	4302      	orrs	r2, r0
 800e26c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800e26e:	2280      	movs	r2, #128	; 0x80
 800e270:	68d8      	ldr	r0, [r3, #12]
 800e272:	0552      	lsls	r2, r2, #21
 800e274:	4302      	orrs	r2, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e276:	2080      	movs	r0, #128	; 0x80
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800e278:	60da      	str	r2, [r3, #12]
 800e27a:	680c      	ldr	r4, [r1, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e27c:	0480      	lsls	r0, r0, #18
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	4202      	tst	r2, r0
 800e282:	d000      	beq.n	800e286 <HAL_RCC_OscConfig+0x32a>
 800e284:	e680      	b.n	800df88 <HAL_RCC_OscConfig+0x2c>
 800e286:	680a      	ldr	r2, [r1, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e288:	1b12      	subs	r2, r2, r4
 800e28a:	2a02      	cmp	r2, #2
 800e28c:	d9f7      	bls.n	800e27e <HAL_RCC_OscConfig+0x322>
 800e28e:	e6a3      	b.n	800dfd8 <HAL_RCC_OscConfig+0x7c>
 800e290:	680a      	ldr	r2, [r1, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e292:	1b52      	subs	r2, r2, r5
 800e294:	2a02      	cmp	r2, #2
 800e296:	d9d1      	bls.n	800e23c <HAL_RCC_OscConfig+0x2e0>
 800e298:	e69e      	b.n	800dfd8 <HAL_RCC_OscConfig+0x7c>
 800e29a:	46c0      	nop			; (mov r8, r8)
 800e29c:	40021000 	.word	0x40021000
 800e2a0:	2000048c 	.word	0x2000048c
 800e2a4:	fffeffff 	.word	0xfffeffff
 800e2a8:	fffbffff 	.word	0xfffbffff
 800e2ac:	ffff80ff 	.word	0xffff80ff
 800e2b0:	20000000 	.word	0x20000000
 800e2b4:	ffffc7ff 	.word	0xffffc7ff
 800e2b8:	00f42400 	.word	0x00f42400
 800e2bc:	fffffeff 	.word	0xfffffeff
 800e2c0:	40007000 	.word	0x40007000
 800e2c4:	00001388 	.word	0x00001388
 800e2c8:	efffffff 	.word	0xefffffff
 800e2cc:	feffffff 	.word	0xfeffffff
 800e2d0:	11c1808c 	.word	0x11c1808c
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800e2d4:	2003      	movs	r0, #3
 800e2d6:	68da      	ldr	r2, [r3, #12]
 800e2d8:	4382      	bics	r2, r0
 800e2da:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800e2dc:	68da      	ldr	r2, [r3, #12]
 800e2de:	481e      	ldr	r0, [pc, #120]	; (800e358 <HAL_RCC_OscConfig+0x3fc>)
 800e2e0:	4002      	ands	r2, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e2e2:	2080      	movs	r0, #128	; 0x80
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800e2e4:	60da      	str	r2, [r3, #12]
 800e2e6:	680c      	ldr	r4, [r1, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e2e8:	0480      	lsls	r0, r0, #18
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	4202      	tst	r2, r0
 800e2ee:	d100      	bne.n	800e2f2 <HAL_RCC_OscConfig+0x396>
 800e2f0:	e64a      	b.n	800df88 <HAL_RCC_OscConfig+0x2c>
 800e2f2:	680a      	ldr	r2, [r1, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e2f4:	1b12      	subs	r2, r2, r4
 800e2f6:	2a02      	cmp	r2, #2
 800e2f8:	d9f7      	bls.n	800e2ea <HAL_RCC_OscConfig+0x38e>
 800e2fa:	e66d      	b.n	800dfd8 <HAL_RCC_OscConfig+0x7c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e2fc:	2801      	cmp	r0, #1
 800e2fe:	d100      	bne.n	800e302 <HAL_RCC_OscConfig+0x3a6>
 800e300:	e62f      	b.n	800df62 <HAL_RCC_OscConfig+0x6>
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e302:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 800e304:	68d0      	ldr	r0, [r2, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e306:	6a22      	ldr	r2, [r4, #32]
 800e308:	4003      	ands	r3, r0
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d000      	beq.n	800e310 <HAL_RCC_OscConfig+0x3b4>
 800e30e:	e628      	b.n	800df62 <HAL_RCC_OscConfig+0x6>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e310:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e312:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e314:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e316:	4293      	cmp	r3, r2
 800e318:	d000      	beq.n	800e31c <HAL_RCC_OscConfig+0x3c0>
 800e31a:	e622      	b.n	800df62 <HAL_RCC_OscConfig+0x6>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e31c:	22fe      	movs	r2, #254	; 0xfe
 800e31e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e320:	01d2      	lsls	r2, r2, #7
 800e322:	4002      	ands	r2, r0
 800e324:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e326:	429a      	cmp	r2, r3
 800e328:	d000      	beq.n	800e32c <HAL_RCC_OscConfig+0x3d0>
 800e32a:	e61a      	b.n	800df62 <HAL_RCC_OscConfig+0x6>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e32c:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e32e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e330:	039b      	lsls	r3, r3, #14
 800e332:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e334:	4293      	cmp	r3, r2
 800e336:	d000      	beq.n	800e33a <HAL_RCC_OscConfig+0x3de>
 800e338:	e613      	b.n	800df62 <HAL_RCC_OscConfig+0x6>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e33a:	23e0      	movs	r3, #224	; 0xe0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e33c:	6b22      	ldr	r2, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e33e:	051b      	lsls	r3, r3, #20
 800e340:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e342:	4293      	cmp	r3, r2
 800e344:	d000      	beq.n	800e348 <HAL_RCC_OscConfig+0x3ec>
 800e346:	e60c      	b.n	800df62 <HAL_RCC_OscConfig+0x6>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e348:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800e34a:	0f40      	lsrs	r0, r0, #29
 800e34c:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e34e:	1ac0      	subs	r0, r0, r3
 800e350:	1e43      	subs	r3, r0, #1
 800e352:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800e354:	b2c0      	uxtb	r0, r0
 800e356:	e605      	b.n	800df64 <HAL_RCC_OscConfig+0x8>
 800e358:	eefeffff 	.word	0xeefeffff

0800e35c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800e35c:	4b04      	ldr	r3, [pc, #16]	; (800e370 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800e35e:	68da      	ldr	r2, [r3, #12]
 800e360:	4210      	tst	r0, r2
 800e362:	d000      	beq.n	800e366 <HAL_GPIO_EXTI_IRQHandler+0xa>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800e364:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800e366:	691a      	ldr	r2, [r3, #16]
 800e368:	4202      	tst	r2, r0
 800e36a:	d000      	beq.n	800e36e <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800e36c:	6118      	str	r0, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 800e36e:	4770      	bx	lr
 800e370:	40021800 	.word	0x40021800

0800e374 <HAL_GPIO_WritePin>:
  if (PinState != GPIO_PIN_RESET)
 800e374:	2a00      	cmp	r2, #0
 800e376:	d001      	beq.n	800e37c <HAL_GPIO_WritePin+0x8>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e378:	6181      	str	r1, [r0, #24]
}
 800e37a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e37c:	6281      	str	r1, [r0, #40]	; 0x28
 800e37e:	e7fc      	b.n	800e37a <HAL_GPIO_WritePin+0x6>

0800e380 <HAL_GPIO_Init>:
{
 800e380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e382:	4645      	mov	r5, r8
 800e384:	46de      	mov	lr, fp
 800e386:	4657      	mov	r7, sl
 800e388:	464e      	mov	r6, r9
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e38a:	2201      	movs	r2, #1
{
 800e38c:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e38e:	680b      	ldr	r3, [r1, #0]
{
 800e390:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e392:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e394:	4690      	mov	r8, r2
  uint32_t position = 0x00u;
 800e396:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e398:	9a00      	ldr	r2, [sp, #0]
 800e39a:	40da      	lsrs	r2, r3
 800e39c:	d106      	bne.n	800e3ac <HAL_GPIO_Init+0x2c>
}
 800e39e:	b003      	add	sp, #12
 800e3a0:	bc3c      	pop	{r2, r3, r4, r5}
 800e3a2:	4690      	mov	r8, r2
 800e3a4:	4699      	mov	r9, r3
 800e3a6:	46a2      	mov	sl, r4
 800e3a8:	46ab      	mov	fp, r5
 800e3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e3ac:	4642      	mov	r2, r8
 800e3ae:	409a      	lsls	r2, r3
 800e3b0:	4691      	mov	r9, r2
 800e3b2:	464c      	mov	r4, r9
 800e3b4:	9a00      	ldr	r2, [sp, #0]
 800e3b6:	4022      	ands	r2, r4
    if (iocurrent != 0x00u)
 800e3b8:	d100      	bne.n	800e3bc <HAL_GPIO_Init+0x3c>
 800e3ba:	e0b4      	b.n	800e526 <HAL_GPIO_Init+0x1a6>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e3bc:	684c      	ldr	r4, [r1, #4]
 800e3be:	2610      	movs	r6, #16
 800e3c0:	0025      	movs	r5, r4
 800e3c2:	43b5      	bics	r5, r6
 800e3c4:	46ac      	mov	ip, r5
 800e3c6:	2d02      	cmp	r5, #2
 800e3c8:	d116      	bne.n	800e3f8 <HAL_GPIO_Init+0x78>
        temp = GPIOx->AFR[position >> 3u];
 800e3ca:	08dd      	lsrs	r5, r3, #3
 800e3cc:	00ad      	lsls	r5, r5, #2
 800e3ce:	1945      	adds	r5, r0, r5
 800e3d0:	6a2e      	ldr	r6, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e3d2:	270f      	movs	r7, #15
        temp = GPIOx->AFR[position >> 3u];
 800e3d4:	46b2      	mov	sl, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e3d6:	2607      	movs	r6, #7
 800e3d8:	401e      	ands	r6, r3
 800e3da:	00b6      	lsls	r6, r6, #2
 800e3dc:	40b7      	lsls	r7, r6
 800e3de:	46bb      	mov	fp, r7
 800e3e0:	9501      	str	r5, [sp, #4]
 800e3e2:	4657      	mov	r7, sl
 800e3e4:	465d      	mov	r5, fp
 800e3e6:	43af      	bics	r7, r5
 800e3e8:	46ba      	mov	sl, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e3ea:	690f      	ldr	r7, [r1, #16]
 800e3ec:	4655      	mov	r5, sl
 800e3ee:	40b7      	lsls	r7, r6
 800e3f0:	003e      	movs	r6, r7
 800e3f2:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3u] = temp;
 800e3f4:	9d01      	ldr	r5, [sp, #4]
 800e3f6:	622e      	str	r6, [r5, #32]
 800e3f8:	005d      	lsls	r5, r3, #1
 800e3fa:	46aa      	mov	sl, r5
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e3fc:	2503      	movs	r5, #3
 800e3fe:	4657      	mov	r7, sl
 800e400:	40bd      	lsls	r5, r7
 800e402:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800e404:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e406:	2703      	movs	r7, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e408:	402e      	ands	r6, r5
 800e40a:	46b3      	mov	fp, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e40c:	0026      	movs	r6, r4
 800e40e:	403e      	ands	r6, r7
 800e410:	4657      	mov	r7, sl
 800e412:	40be      	lsls	r6, r7
 800e414:	465f      	mov	r7, fp
 800e416:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800e418:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e41a:	4666      	mov	r6, ip
 800e41c:	3e01      	subs	r6, #1
 800e41e:	2e01      	cmp	r6, #1
 800e420:	d813      	bhi.n	800e44a <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR;
 800e422:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e424:	4657      	mov	r7, sl
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e426:	402e      	ands	r6, r5
 800e428:	46b4      	mov	ip, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e42a:	68ce      	ldr	r6, [r1, #12]
 800e42c:	40be      	lsls	r6, r7
 800e42e:	4667      	mov	r7, ip
 800e430:	433e      	orrs	r6, r7
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e432:	464f      	mov	r7, r9
        GPIOx->OSPEEDR = temp;
 800e434:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800e436:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e438:	43be      	bics	r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800e43a:	4647      	mov	r7, r8
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e43c:	46b4      	mov	ip, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800e43e:	0926      	lsrs	r6, r4, #4
 800e440:	403e      	ands	r6, r7
 800e442:	409e      	lsls	r6, r3
 800e444:	4667      	mov	r7, ip
 800e446:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800e448:	6046      	str	r6, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800e44a:	4657      	mov	r7, sl
      temp = GPIOx->PUPDR;
 800e44c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800e44e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800e450:	688e      	ldr	r6, [r1, #8]
 800e452:	40be      	lsls	r6, r7
 800e454:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800e456:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800e458:	2580      	movs	r5, #128	; 0x80
 800e45a:	056d      	lsls	r5, r5, #21
 800e45c:	422c      	tst	r4, r5
 800e45e:	d062      	beq.n	800e526 <HAL_GPIO_Init+0x1a6>
 800e460:	4d32      	ldr	r5, [pc, #200]	; (800e52c <HAL_GPIO_Init+0x1ac>)
        temp = EXTI->EXTICR[position >> 2u];
 800e462:	089e      	lsrs	r6, r3, #2
 800e464:	46ac      	mov	ip, r5
 800e466:	00b6      	lsls	r6, r6, #2
 800e468:	4466      	add	r6, ip
 800e46a:	6e35      	ldr	r5, [r6, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800e46c:	001f      	movs	r7, r3
        temp = EXTI->EXTICR[position >> 2u];
 800e46e:	46aa      	mov	sl, r5
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800e470:	2503      	movs	r5, #3
 800e472:	402f      	ands	r7, r5
 800e474:	40af      	lsls	r7, r5
 800e476:	46bc      	mov	ip, r7
 800e478:	270f      	movs	r7, #15
 800e47a:	4665      	mov	r5, ip
 800e47c:	40af      	lsls	r7, r5
 800e47e:	4655      	mov	r5, sl
 800e480:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800e482:	27a0      	movs	r7, #160	; 0xa0
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800e484:	46a9      	mov	r9, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800e486:	05ff      	lsls	r7, r7, #23
 800e488:	2500      	movs	r5, #0
 800e48a:	42b8      	cmp	r0, r7
 800e48c:	d00f      	beq.n	800e4ae <HAL_GPIO_Init+0x12e>
 800e48e:	4d28      	ldr	r5, [pc, #160]	; (800e530 <HAL_GPIO_Init+0x1b0>)
 800e490:	46aa      	mov	sl, r5
 800e492:	4645      	mov	r5, r8
 800e494:	4550      	cmp	r0, sl
 800e496:	d00a      	beq.n	800e4ae <HAL_GPIO_Init+0x12e>
 800e498:	4d26      	ldr	r5, [pc, #152]	; (800e534 <HAL_GPIO_Init+0x1b4>)
 800e49a:	46aa      	mov	sl, r5
 800e49c:	2502      	movs	r5, #2
 800e49e:	4550      	cmp	r0, sl
 800e4a0:	d005      	beq.n	800e4ae <HAL_GPIO_Init+0x12e>
 800e4a2:	4d25      	ldr	r5, [pc, #148]	; (800e538 <HAL_GPIO_Init+0x1b8>)
 800e4a4:	46aa      	mov	sl, r5
 800e4a6:	2505      	movs	r5, #5
 800e4a8:	4550      	cmp	r0, sl
 800e4aa:	d100      	bne.n	800e4ae <HAL_GPIO_Init+0x12e>
 800e4ac:	3d02      	subs	r5, #2
 800e4ae:	4667      	mov	r7, ip
 800e4b0:	40bd      	lsls	r5, r7
 800e4b2:	464f      	mov	r7, r9
 800e4b4:	433d      	orrs	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;
 800e4b6:	6635      	str	r5, [r6, #96]	; 0x60
        temp = EXTI->IMR1;
 800e4b8:	4d20      	ldr	r5, [pc, #128]	; (800e53c <HAL_GPIO_Init+0x1bc>)
 800e4ba:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800e4bc:	46b1      	mov	r9, r6
          temp |= iocurrent;
 800e4be:	464f      	mov	r7, r9
 800e4c0:	4317      	orrs	r7, r2
 800e4c2:	46bc      	mov	ip, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800e4c4:	2780      	movs	r7, #128	; 0x80
 800e4c6:	027f      	lsls	r7, r7, #9
        temp &= ~(iocurrent);
 800e4c8:	43d6      	mvns	r6, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800e4ca:	423c      	tst	r4, r7
 800e4cc:	d102      	bne.n	800e4d4 <HAL_GPIO_Init+0x154>
        temp &= ~(iocurrent);
 800e4ce:	464f      	mov	r7, r9
 800e4d0:	4037      	ands	r7, r6
 800e4d2:	46bc      	mov	ip, r7
        EXTI->IMR1 = temp;
 800e4d4:	4667      	mov	r7, ip
 800e4d6:	67ef      	str	r7, [r5, #124]	; 0x7c
          temp |= iocurrent;
 800e4d8:	0017      	movs	r7, r2
        temp = EXTI->EMR1;
 800e4da:	4d19      	ldr	r5, [pc, #100]	; (800e540 <HAL_GPIO_Init+0x1c0>)
 800e4dc:	46ac      	mov	ip, r5
 800e4de:	6fed      	ldr	r5, [r5, #124]	; 0x7c
          temp |= iocurrent;
 800e4e0:	432f      	orrs	r7, r5
 800e4e2:	46b9      	mov	r9, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800e4e4:	2780      	movs	r7, #128	; 0x80
 800e4e6:	02bf      	lsls	r7, r7, #10
 800e4e8:	423c      	tst	r4, r7
 800e4ea:	d101      	bne.n	800e4f0 <HAL_GPIO_Init+0x170>
        temp &= ~(iocurrent);
 800e4ec:	4035      	ands	r5, r6
 800e4ee:	46a9      	mov	r9, r5
        EXTI->EMR1 = temp;
 800e4f0:	4d0e      	ldr	r5, [pc, #56]	; (800e52c <HAL_GPIO_Init+0x1ac>)
 800e4f2:	4667      	mov	r7, ip
 800e4f4:	46aa      	mov	sl, r5
 800e4f6:	464d      	mov	r5, r9
 800e4f8:	67fd      	str	r5, [r7, #124]	; 0x7c
        temp = EXTI->RTSR1;
 800e4fa:	4655      	mov	r5, sl
 800e4fc:	682d      	ldr	r5, [r5, #0]
          temp |= iocurrent;
 800e4fe:	002f      	movs	r7, r5
 800e500:	4317      	orrs	r7, r2
        temp = EXTI->RTSR1;
 800e502:	46a9      	mov	r9, r5
          temp |= iocurrent;
 800e504:	46bc      	mov	ip, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800e506:	02e5      	lsls	r5, r4, #11
 800e508:	d402      	bmi.n	800e510 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 800e50a:	464f      	mov	r7, r9
 800e50c:	4037      	ands	r7, r6
 800e50e:	46bc      	mov	ip, r7
        EXTI->RTSR1 = temp;
 800e510:	4665      	mov	r5, ip
 800e512:	4657      	mov	r7, sl
 800e514:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 800e516:	687d      	ldr	r5, [r7, #4]
          temp |= iocurrent;
 800e518:	432a      	orrs	r2, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800e51a:	02a4      	lsls	r4, r4, #10
 800e51c:	d401      	bmi.n	800e522 <HAL_GPIO_Init+0x1a2>
        temp &= ~(iocurrent);
 800e51e:	002a      	movs	r2, r5
 800e520:	4032      	ands	r2, r6
        EXTI->FTSR1 = temp;
 800e522:	4654      	mov	r4, sl
 800e524:	6062      	str	r2, [r4, #4]
    position++;
 800e526:	3301      	adds	r3, #1
 800e528:	e736      	b.n	800e398 <HAL_GPIO_Init+0x18>
 800e52a:	46c0      	nop			; (mov r8, r8)
 800e52c:	40021800 	.word	0x40021800
 800e530:	50000400 	.word	0x50000400
 800e534:	50000800 	.word	0x50000800
 800e538:	50000c00 	.word	0x50000c00
 800e53c:	40021804 	.word	0x40021804
 800e540:	40021808 	.word	0x40021808

0800e544 <HAL_UART_Init>:
{
 800e544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e546:	46d6      	mov	lr, sl
 800e548:	464f      	mov	r7, r9
 800e54a:	4646      	mov	r6, r8
 800e54c:	b5c0      	push	{r6, r7, lr}
 800e54e:	0004      	movs	r4, r0
 800e550:	b08a      	sub	sp, #40	; 0x28
  if (huart == NULL)
 800e552:	2800      	cmp	r0, #0
 800e554:	d107      	bne.n	800e566 <HAL_UART_Init+0x22>
    return HAL_ERROR;
 800e556:	2601      	movs	r6, #1
}
 800e558:	0030      	movs	r0, r6
 800e55a:	b00a      	add	sp, #40	; 0x28
 800e55c:	bc1c      	pop	{r2, r3, r4}
 800e55e:	4690      	mov	r8, r2
 800e560:	4699      	mov	r9, r3
 800e562:	46a2      	mov	sl, r4
 800e564:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800e566:	1d05      	adds	r5, r0, #4
 800e568:	4bd6      	ldr	r3, [pc, #856]	; (800e8c4 <HAL_UART_Init+0x380>)
 800e56a:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800e56c:	4698      	mov	r8, r3
 800e56e:	2e00      	cmp	r6, #0
 800e570:	d164      	bne.n	800e63c <HAL_UART_Init+0xf8>
    huart->Lock = HAL_UNLOCKED;
 800e572:	0003      	movs	r3, r0
 800e574:	6807      	ldr	r7, [r0, #0]
 800e576:	337c      	adds	r3, #124	; 0x7c
 800e578:	701e      	strb	r6, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e57a:	2214      	movs	r2, #20
 800e57c:	0031      	movs	r1, r6
 800e57e:	a805      	add	r0, sp, #20
 800e580:	f005 f844 	bl	801360c <memset>
  if(huart->Instance==USART1)
 800e584:	4547      	cmp	r7, r8
 800e586:	d000      	beq.n	800e58a <HAL_UART_Init+0x46>
 800e588:	e0a0      	b.n	800e6cc <HAL_UART_Init+0x188>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e58a:	2080      	movs	r0, #128	; 0x80
 800e58c:	4bce      	ldr	r3, [pc, #824]	; (800e8c8 <HAL_UART_Init+0x384>)
 800e58e:	01c0      	lsls	r0, r0, #7
 800e590:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e592:	4301      	orrs	r1, r0
 800e594:	6419      	str	r1, [r3, #64]	; 0x40
 800e596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e598:	4002      	ands	r2, r0
 800e59a:	9204      	str	r2, [sp, #16]
 800e59c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e59e:	2201      	movs	r2, #1
 800e5a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5a2:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5a4:	4311      	orrs	r1, r2
 800e5a6:	6359      	str	r1, [r3, #52]	; 0x34
 800e5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5aa:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5ac:	4013      	ands	r3, r2
 800e5ae:	9303      	str	r3, [sp, #12]
 800e5b0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800e5b2:	23f0      	movs	r3, #240	; 0xf0
 800e5b4:	015b      	lsls	r3, r3, #5
 800e5b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5b8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5ba:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800e5bc:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5be:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5c0:	f7ff fede 	bl	800e380 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800e5c4:	4fc1      	ldr	r7, [pc, #772]	; (800e8cc <HAL_UART_Init+0x388>)
 800e5c6:	4bc2      	ldr	r3, [pc, #776]	; (800e8d0 <HAL_UART_Init+0x38c>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e5c8:	677e      	str	r6, [r7, #116]	; 0x74
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800e5ca:	66bb      	str	r3, [r7, #104]	; 0x68
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800e5cc:	2333      	movs	r3, #51	; 0x33
 800e5ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e5d0:	3b23      	subs	r3, #35	; 0x23
 800e5d2:	673b      	str	r3, [r7, #112]	; 0x70
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e5d4:	3370      	adds	r3, #112	; 0x70
 800e5d6:	67bb      	str	r3, [r7, #120]	; 0x78
 800e5d8:	4699      	mov	r9, r3
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e5da:	1d3b      	adds	r3, r7, #4
 800e5dc:	67de      	str	r6, [r3, #124]	; 0x7c
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800e5de:	003b      	movs	r3, r7
 800e5e0:	3308      	adds	r3, #8
 800e5e2:	67de      	str	r6, [r3, #124]	; 0x7c
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e5e4:	003b      	movs	r3, r7
 800e5e6:	3388      	adds	r3, #136	; 0x88
 800e5e8:	601e      	str	r6, [r3, #0]
 800e5ea:	2368      	movs	r3, #104	; 0x68
 800e5ec:	469a      	mov	sl, r3
 800e5ee:	44ba      	add	sl, r7
 800e5f0:	4650      	mov	r0, sl
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e5f2:	67fe      	str	r6, [r7, #124]	; 0x7c
 800e5f4:	f7fd fd16 	bl	800c024 <HAL_DMA_Init.part.0.constprop.85>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800e5f8:	4653      	mov	r3, sl
 800e5fa:	3790      	adds	r7, #144	; 0x90
 800e5fc:	6763      	str	r3, [r4, #116]	; 0x74
 800e5fe:	603c      	str	r4, [r7, #0]
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800e600:	4bb4      	ldr	r3, [pc, #720]	; (800e8d4 <HAL_UART_Init+0x390>)
 800e602:	4fb5      	ldr	r7, [pc, #724]	; (800e8d8 <HAL_UART_Init+0x394>)
 800e604:	647b      	str	r3, [r7, #68]	; 0x44
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800e606:	2332      	movs	r3, #50	; 0x32
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e608:	64fe      	str	r6, [r7, #76]	; 0x4c
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e60a:	653e      	str	r6, [r7, #80]	; 0x50
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e60c:	65be      	str	r6, [r7, #88]	; 0x58
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e60e:	65fe      	str	r6, [r7, #92]	; 0x5c
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800e610:	663e      	str	r6, [r7, #96]	; 0x60
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e612:	667e      	str	r6, [r7, #100]	; 0x64
 800e614:	003e      	movs	r6, r7
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800e616:	64bb      	str	r3, [r7, #72]	; 0x48
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e618:	464b      	mov	r3, r9
 800e61a:	3644      	adds	r6, #68	; 0x44
 800e61c:	0030      	movs	r0, r6
 800e61e:	657b      	str	r3, [r7, #84]	; 0x54
 800e620:	f7fd fd00 	bl	800c024 <HAL_DMA_Init.part.0.constprop.85>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e624:	21c6      	movs	r1, #198	; 0xc6
 800e626:	4aad      	ldr	r2, [pc, #692]	; (800e8dc <HAL_UART_Init+0x398>)
 800e628:	0089      	lsls	r1, r1, #2
 800e62a:	5853      	ldr	r3, [r2, r1]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800e62c:	67a6      	str	r6, [r4, #120]	; 0x78
 800e62e:	021b      	lsls	r3, r3, #8
 800e630:	0a1b      	lsrs	r3, r3, #8
 800e632:	66fc      	str	r4, [r7, #108]	; 0x6c
 800e634:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e636:	2380      	movs	r3, #128	; 0x80
 800e638:	051b      	lsls	r3, r3, #20
 800e63a:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e63c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800e63e:	2101      	movs	r1, #1
 800e640:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e642:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800e644:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e646:	69e6      	ldr	r6, [r4, #28]
  __HAL_UART_DISABLE(huart);
 800e648:	438b      	bics	r3, r1
 800e64a:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e64c:	6921      	ldr	r1, [r4, #16]
 800e64e:	68a3      	ldr	r3, [r4, #8]
  tmpreg |= (uint32_t)huart->FifoMode;
 800e650:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e652:	430b      	orrs	r3, r1
 800e654:	6961      	ldr	r1, [r4, #20]
 800e656:	430b      	orrs	r3, r1
 800e658:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e65a:	6811      	ldr	r1, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 800e65c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e65e:	48a0      	ldr	r0, [pc, #640]	; (800e8e0 <HAL_UART_Init+0x39c>)
 800e660:	4001      	ands	r1, r0
 800e662:	430b      	orrs	r3, r1
 800e664:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e666:	6853      	ldr	r3, [r2, #4]
 800e668:	499e      	ldr	r1, [pc, #632]	; (800e8e4 <HAL_UART_Init+0x3a0>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e66a:	489f      	ldr	r0, [pc, #636]	; (800e8e8 <HAL_UART_Init+0x3a4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e66c:	400b      	ands	r3, r1
 800e66e:	68e1      	ldr	r1, [r4, #12]
 800e670:	430b      	orrs	r3, r1
 800e672:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e674:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e676:	4282      	cmp	r2, r0
 800e678:	d001      	beq.n	800e67e <HAL_UART_Init+0x13a>
    tmpreg |= huart->Init.OneBitSampling;
 800e67a:	6a23      	ldr	r3, [r4, #32]
 800e67c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e67e:	6893      	ldr	r3, [r2, #8]
 800e680:	4f9a      	ldr	r7, [pc, #616]	; (800e8ec <HAL_UART_Init+0x3a8>)
 800e682:	403b      	ands	r3, r7
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e684:	270f      	movs	r7, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e686:	430b      	orrs	r3, r1
 800e688:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e68a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800e68c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e68e:	43b9      	bics	r1, r7
 800e690:	4319      	orrs	r1, r3
 800e692:	62d1      	str	r1, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e694:	4542      	cmp	r2, r8
 800e696:	d139      	bne.n	800e70c <HAL_UART_Init+0x1c8>
 800e698:	2003      	movs	r0, #3
 800e69a:	4a8b      	ldr	r2, [pc, #556]	; (800e8c8 <HAL_UART_Init+0x384>)
 800e69c:	4994      	ldr	r1, [pc, #592]	; (800e8f0 <HAL_UART_Init+0x3ac>)
 800e69e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e6a0:	3160      	adds	r1, #96	; 0x60
 800e6a2:	4002      	ands	r2, r0
 800e6a4:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e6a6:	2280      	movs	r2, #128	; 0x80
 800e6a8:	0212      	lsls	r2, r2, #8
 800e6aa:	4296      	cmp	r6, r2
 800e6ac:	d000      	beq.n	800e6b0 <HAL_UART_Init+0x16c>
 800e6ae:	e3d9      	b.n	800ee64 <HAL_UART_Init+0x920>
    switch (clocksource)
 800e6b0:	2808      	cmp	r0, #8
 800e6b2:	d900      	bls.n	800e6b6 <HAL_UART_Init+0x172>
 800e6b4:	e3d3      	b.n	800ee5e <HAL_UART_Init+0x91a>
 800e6b6:	f002 fa0f 	bl	8010ad8 <__gnu_thumb1_case_uhi>
 800e6ba:	04dc      	.short	0x04dc
 800e6bc:	033b03d2 	.word	0x033b03d2
 800e6c0:	037a03d2 	.word	0x037a03d2
 800e6c4:	03d203d2 	.word	0x03d203d2
 800e6c8:	039b03d2 	.word	0x039b03d2
  else if(huart->Instance==USART2)
 800e6cc:	4b89      	ldr	r3, [pc, #548]	; (800e8f4 <HAL_UART_Init+0x3b0>)
 800e6ce:	429f      	cmp	r7, r3
 800e6d0:	d1b4      	bne.n	800e63c <HAL_UART_Init+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e6d2:	2080      	movs	r0, #128	; 0x80
 800e6d4:	4b7c      	ldr	r3, [pc, #496]	; (800e8c8 <HAL_UART_Init+0x384>)
 800e6d6:	0280      	lsls	r0, r0, #10
 800e6d8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e6da:	4301      	orrs	r1, r0
 800e6dc:	63d9      	str	r1, [r3, #60]	; 0x3c
 800e6de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6e0:	4002      	ands	r2, r0
 800e6e2:	9202      	str	r2, [sp, #8]
 800e6e4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6ea:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6ec:	4311      	orrs	r1, r2
 800e6ee:	6359      	str	r1, [r3, #52]	; 0x34
 800e6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6f2:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6f4:	4013      	ands	r3, r2
 800e6f6:	9301      	str	r3, [sp, #4]
 800e6f8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800e6fa:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6fc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800e6fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e700:	3b0a      	subs	r3, #10
 800e702:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800e704:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e706:	f7ff fe3b 	bl	800e380 <HAL_GPIO_Init>
 800e70a:	e797      	b.n	800e63c <HAL_UART_Init+0xf8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e70c:	4979      	ldr	r1, [pc, #484]	; (800e8f4 <HAL_UART_Init+0x3b0>)
 800e70e:	428a      	cmp	r2, r1
 800e710:	d107      	bne.n	800e722 <HAL_UART_Init+0x1de>
 800e712:	200c      	movs	r0, #12
 800e714:	4a6c      	ldr	r2, [pc, #432]	; (800e8c8 <HAL_UART_Init+0x384>)
 800e716:	4976      	ldr	r1, [pc, #472]	; (800e8f0 <HAL_UART_Init+0x3ac>)
 800e718:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e71a:	3164      	adds	r1, #100	; 0x64
 800e71c:	4002      	ands	r2, r0
 800e71e:	5c88      	ldrb	r0, [r1, r2]
 800e720:	e7c1      	b.n	800e6a6 <HAL_UART_Init+0x162>
 800e722:	4975      	ldr	r1, [pc, #468]	; (800e8f8 <HAL_UART_Init+0x3b4>)
 800e724:	428a      	cmp	r2, r1
 800e726:	d101      	bne.n	800e72c <HAL_UART_Init+0x1e8>
 800e728:	f000 fc9e 	bl	800f068 <HAL_UART_Init+0xb24>
 800e72c:	4973      	ldr	r1, [pc, #460]	; (800e8fc <HAL_UART_Init+0x3b8>)
 800e72e:	428a      	cmp	r2, r1
 800e730:	d101      	bne.n	800e736 <HAL_UART_Init+0x1f2>
 800e732:	f000 fc99 	bl	800f068 <HAL_UART_Init+0xb24>
 800e736:	4282      	cmp	r2, r0
 800e738:	d001      	beq.n	800e73e <HAL_UART_Init+0x1fa>
 800e73a:	f000 fccf 	bl	800f0dc <HAL_UART_Init+0xb98>
 800e73e:	21c0      	movs	r1, #192	; 0xc0
 800e740:	2080      	movs	r0, #128	; 0x80
 800e742:	4a61      	ldr	r2, [pc, #388]	; (800e8c8 <HAL_UART_Init+0x384>)
 800e744:	0109      	lsls	r1, r1, #4
 800e746:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e748:	00c0      	lsls	r0, r0, #3
 800e74a:	400a      	ands	r2, r1
 800e74c:	4282      	cmp	r2, r0
 800e74e:	d100      	bne.n	800e752 <HAL_UART_Init+0x20e>
 800e750:	e153      	b.n	800e9fa <HAL_UART_Init+0x4b6>
 800e752:	d900      	bls.n	800e756 <HAL_UART_Init+0x212>
 800e754:	e086      	b.n	800e864 <HAL_UART_Init+0x320>
 800e756:	2a00      	cmp	r2, #0
 800e758:	d100      	bne.n	800e75c <HAL_UART_Init+0x218>
 800e75a:	e0eb      	b.n	800e934 <HAL_UART_Init+0x3f0>
        ret = HAL_ERROR;
 800e75c:	2601      	movs	r6, #1
  huart->NbRxDataToProcess = 1;
 800e75e:	4b68      	ldr	r3, [pc, #416]	; (800e900 <HAL_UART_Init+0x3bc>)
 800e760:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->NbTxDataToProcess = 1;
 800e762:	2300      	movs	r3, #0
 800e764:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxISR = NULL;
 800e766:	6723      	str	r3, [r4, #112]	; 0x70
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e768:	2e01      	cmp	r6, #1
 800e76a:	d100      	bne.n	800e76e <HAL_UART_Init+0x22a>
 800e76c:	e6f3      	b.n	800e556 <HAL_UART_Init+0x12>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e76e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e770:	6823      	ldr	r3, [r4, #0]
 800e772:	2a00      	cmp	r2, #0
 800e774:	d049      	beq.n	800e80a <HAL_UART_Init+0x2c6>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e776:	07d1      	lsls	r1, r2, #31
 800e778:	d505      	bpl.n	800e786 <HAL_UART_Init+0x242>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e77a:	6859      	ldr	r1, [r3, #4]
 800e77c:	4861      	ldr	r0, [pc, #388]	; (800e904 <HAL_UART_Init+0x3c0>)
 800e77e:	4001      	ands	r1, r0
 800e780:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e782:	4301      	orrs	r1, r0
 800e784:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e786:	0791      	lsls	r1, r2, #30
 800e788:	d505      	bpl.n	800e796 <HAL_UART_Init+0x252>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e78a:	6859      	ldr	r1, [r3, #4]
 800e78c:	485e      	ldr	r0, [pc, #376]	; (800e908 <HAL_UART_Init+0x3c4>)
 800e78e:	4001      	ands	r1, r0
 800e790:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e792:	4301      	orrs	r1, r0
 800e794:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e796:	0751      	lsls	r1, r2, #29
 800e798:	d505      	bpl.n	800e7a6 <HAL_UART_Init+0x262>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e79a:	6859      	ldr	r1, [r3, #4]
 800e79c:	485b      	ldr	r0, [pc, #364]	; (800e90c <HAL_UART_Init+0x3c8>)
 800e79e:	4001      	ands	r1, r0
 800e7a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e7a2:	4301      	orrs	r1, r0
 800e7a4:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e7a6:	0711      	lsls	r1, r2, #28
 800e7a8:	d505      	bpl.n	800e7b6 <HAL_UART_Init+0x272>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e7aa:	6859      	ldr	r1, [r3, #4]
 800e7ac:	4858      	ldr	r0, [pc, #352]	; (800e910 <HAL_UART_Init+0x3cc>)
 800e7ae:	4001      	ands	r1, r0
 800e7b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e7b2:	4301      	orrs	r1, r0
 800e7b4:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e7b6:	06d1      	lsls	r1, r2, #27
 800e7b8:	d505      	bpl.n	800e7c6 <HAL_UART_Init+0x282>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e7ba:	6899      	ldr	r1, [r3, #8]
 800e7bc:	4855      	ldr	r0, [pc, #340]	; (800e914 <HAL_UART_Init+0x3d0>)
 800e7be:	4001      	ands	r1, r0
 800e7c0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e7c2:	4301      	orrs	r1, r0
 800e7c4:	6099      	str	r1, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e7c6:	0691      	lsls	r1, r2, #26
 800e7c8:	d505      	bpl.n	800e7d6 <HAL_UART_Init+0x292>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e7ca:	6899      	ldr	r1, [r3, #8]
 800e7cc:	4852      	ldr	r0, [pc, #328]	; (800e918 <HAL_UART_Init+0x3d4>)
 800e7ce:	4001      	ands	r1, r0
 800e7d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e7d2:	4301      	orrs	r1, r0
 800e7d4:	6099      	str	r1, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e7d6:	0651      	lsls	r1, r2, #25
 800e7d8:	d50f      	bpl.n	800e7fa <HAL_UART_Init+0x2b6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e7da:	6859      	ldr	r1, [r3, #4]
 800e7dc:	4f4f      	ldr	r7, [pc, #316]	; (800e91c <HAL_UART_Init+0x3d8>)
 800e7de:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e7e0:	4039      	ands	r1, r7
 800e7e2:	4301      	orrs	r1, r0
 800e7e4:	6059      	str	r1, [r3, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e7e6:	2180      	movs	r1, #128	; 0x80
 800e7e8:	0349      	lsls	r1, r1, #13
 800e7ea:	4288      	cmp	r0, r1
 800e7ec:	d105      	bne.n	800e7fa <HAL_UART_Init+0x2b6>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e7ee:	6859      	ldr	r1, [r3, #4]
 800e7f0:	484b      	ldr	r0, [pc, #300]	; (800e920 <HAL_UART_Init+0x3dc>)
 800e7f2:	4001      	ands	r1, r0
 800e7f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e7f6:	4301      	orrs	r1, r0
 800e7f8:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e7fa:	0612      	lsls	r2, r2, #24
 800e7fc:	d505      	bpl.n	800e80a <HAL_UART_Init+0x2c6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7fe:	685a      	ldr	r2, [r3, #4]
 800e800:	4948      	ldr	r1, [pc, #288]	; (800e924 <HAL_UART_Init+0x3e0>)
 800e802:	400a      	ands	r2, r1
 800e804:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e806:	430a      	orrs	r2, r1
 800e808:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e80a:	685a      	ldr	r2, [r3, #4]
 800e80c:	4946      	ldr	r1, [pc, #280]	; (800e928 <HAL_UART_Init+0x3e4>)
 800e80e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e810:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e814:	689a      	ldr	r2, [r3, #8]
 800e816:	438a      	bics	r2, r1
 800e818:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800e81a:	2201      	movs	r2, #1
 800e81c:	6819      	ldr	r1, [r3, #0]
 800e81e:	430a      	orrs	r2, r1
 800e820:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e822:	0022      	movs	r2, r4
 800e824:	2100      	movs	r1, #0
 800e826:	3288      	adds	r2, #136	; 0x88
 800e828:	6011      	str	r1, [r2, #0]
 800e82a:	4a40      	ldr	r2, [pc, #256]	; (800e92c <HAL_UART_Init+0x3e8>)
 800e82c:	6817      	ldr	r7, [r2, #0]
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	071b      	lsls	r3, r3, #28
 800e832:	d500      	bpl.n	800e836 <HAL_UART_Init+0x2f2>
 800e834:	e3d9      	b.n	800efea <HAL_UART_Init+0xaa6>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e836:	6823      	ldr	r3, [r4, #0]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	075b      	lsls	r3, r3, #29
 800e83c:	d509      	bpl.n	800e852 <HAL_UART_Init+0x30e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e83e:	2180      	movs	r1, #128	; 0x80
 800e840:	4b3b      	ldr	r3, [pc, #236]	; (800e930 <HAL_UART_Init+0x3ec>)
 800e842:	003a      	movs	r2, r7
 800e844:	03c9      	lsls	r1, r1, #15
 800e846:	0020      	movs	r0, r4
 800e848:	f7fd f938 	bl	800babc <UART_WaitOnFlagUntilTimeout.constprop.69>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d000      	beq.n	800e852 <HAL_UART_Init+0x30e>
 800e850:	e3d5      	b.n	800effe <HAL_UART_Init+0xaba>
  huart->RxState = HAL_UART_STATE_READY;
 800e852:	0022      	movs	r2, r4
  huart->gState = HAL_UART_STATE_READY;
 800e854:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 800e856:	3208      	adds	r2, #8
  huart->gState = HAL_UART_STATE_READY;
 800e858:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e85a:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800e85c:	2300      	movs	r3, #0
 800e85e:	347c      	adds	r4, #124	; 0x7c
 800e860:	7023      	strb	r3, [r4, #0]
 800e862:	e679      	b.n	800e558 <HAL_UART_Init+0x14>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e864:	2080      	movs	r0, #128	; 0x80
 800e866:	0100      	lsls	r0, r0, #4
 800e868:	4282      	cmp	r2, r0
 800e86a:	d100      	bne.n	800e86e <HAL_UART_Init+0x32a>
 800e86c:	e0aa      	b.n	800e9c4 <HAL_UART_Init+0x480>
 800e86e:	428a      	cmp	r2, r1
 800e870:	d000      	beq.n	800e874 <HAL_UART_Init+0x330>
 800e872:	e773      	b.n	800e75c <HAL_UART_Init+0x218>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e874:	2b00      	cmp	r3, #0
 800e876:	d020      	beq.n	800e8ba <HAL_UART_Init+0x376>
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d100      	bne.n	800e87e <HAL_UART_Init+0x33a>
 800e87c:	e109      	b.n	800ea92 <HAL_UART_Init+0x54e>
 800e87e:	2b02      	cmp	r3, #2
 800e880:	d100      	bne.n	800e884 <HAL_UART_Init+0x340>
 800e882:	e10a      	b.n	800ea9a <HAL_UART_Init+0x556>
 800e884:	2b03      	cmp	r3, #3
 800e886:	d100      	bne.n	800e88a <HAL_UART_Init+0x346>
 800e888:	e10b      	b.n	800eaa2 <HAL_UART_Init+0x55e>
 800e88a:	2b04      	cmp	r3, #4
 800e88c:	d100      	bne.n	800e890 <HAL_UART_Init+0x34c>
 800e88e:	e10b      	b.n	800eaa8 <HAL_UART_Init+0x564>
 800e890:	2b05      	cmp	r3, #5
 800e892:	d100      	bne.n	800e896 <HAL_UART_Init+0x352>
 800e894:	e10c      	b.n	800eab0 <HAL_UART_Init+0x56c>
 800e896:	2b06      	cmp	r3, #6
 800e898:	d100      	bne.n	800e89c <HAL_UART_Init+0x358>
 800e89a:	e10c      	b.n	800eab6 <HAL_UART_Init+0x572>
 800e89c:	2b07      	cmp	r3, #7
 800e89e:	d100      	bne.n	800e8a2 <HAL_UART_Init+0x35e>
 800e8a0:	e10c      	b.n	800eabc <HAL_UART_Init+0x578>
 800e8a2:	2b08      	cmp	r3, #8
 800e8a4:	d100      	bne.n	800e8a8 <HAL_UART_Init+0x364>
 800e8a6:	e10d      	b.n	800eac4 <HAL_UART_Init+0x580>
 800e8a8:	2b09      	cmp	r3, #9
 800e8aa:	d100      	bne.n	800e8ae <HAL_UART_Init+0x36a>
 800e8ac:	e10d      	b.n	800eaca <HAL_UART_Init+0x586>
 800e8ae:	2b0a      	cmp	r3, #10
 800e8b0:	d100      	bne.n	800e8b4 <HAL_UART_Init+0x370>
 800e8b2:	e10e      	b.n	800ead2 <HAL_UART_Init+0x58e>
 800e8b4:	2b0b      	cmp	r3, #11
 800e8b6:	d100      	bne.n	800e8ba <HAL_UART_Init+0x376>
 800e8b8:	e10f      	b.n	800eada <HAL_UART_Init+0x596>
 800e8ba:	2080      	movs	r0, #128	; 0x80
 800e8bc:	2308      	movs	r3, #8
 800e8be:	0200      	lsls	r0, r0, #8
 800e8c0:	e067      	b.n	800e992 <HAL_UART_Init+0x44e>
 800e8c2:	46c0      	nop			; (mov r8, r8)
 800e8c4:	40013800 	.word	0x40013800
 800e8c8:	40021000 	.word	0x40021000
 800e8cc:	2000050c 	.word	0x2000050c
 800e8d0:	40020008 	.word	0x40020008
 800e8d4:	4002001c 	.word	0x4002001c
 800e8d8:	2000058c 	.word	0x2000058c
 800e8dc:	e000e100 	.word	0xe000e100
 800e8e0:	cfff69f3 	.word	0xcfff69f3
 800e8e4:	ffffcfff 	.word	0xffffcfff
 800e8e8:	40008000 	.word	0x40008000
 800e8ec:	11fff4ff 	.word	0x11fff4ff
 800e8f0:	0801bd9c 	.word	0x0801bd9c
 800e8f4:	40004400 	.word	0x40004400
 800e8f8:	40004800 	.word	0x40004800
 800e8fc:	40004c00 	.word	0x40004c00
 800e900:	00010001 	.word	0x00010001
 800e904:	fffdffff 	.word	0xfffdffff
 800e908:	fffeffff 	.word	0xfffeffff
 800e90c:	fffbffff 	.word	0xfffbffff
 800e910:	ffff7fff 	.word	0xffff7fff
 800e914:	ffffefff 	.word	0xffffefff
 800e918:	ffffdfff 	.word	0xffffdfff
 800e91c:	ffefffff 	.word	0xffefffff
 800e920:	ff9fffff 	.word	0xff9fffff
 800e924:	fff7ffff 	.word	0xfff7ffff
 800e928:	ffffb7ff 	.word	0xffffb7ff
 800e92c:	2000048c 	.word	0x2000048c
 800e930:	01ffffff 	.word	0x01ffffff
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e934:	f7fd fc08 	bl	800c148 <HAL_RCC_GetPCLK1Freq>
 800e938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e93a:	2101      	movs	r1, #1
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d021      	beq.n	800e984 <HAL_UART_Init+0x440>
 800e940:	1849      	adds	r1, r1, r1
 800e942:	2b01      	cmp	r3, #1
 800e944:	d01e      	beq.n	800e984 <HAL_UART_Init+0x440>
 800e946:	3102      	adds	r1, #2
 800e948:	2b02      	cmp	r3, #2
 800e94a:	d01b      	beq.n	800e984 <HAL_UART_Init+0x440>
 800e94c:	3102      	adds	r1, #2
 800e94e:	2b03      	cmp	r3, #3
 800e950:	d018      	beq.n	800e984 <HAL_UART_Init+0x440>
 800e952:	3102      	adds	r1, #2
 800e954:	2b04      	cmp	r3, #4
 800e956:	d015      	beq.n	800e984 <HAL_UART_Init+0x440>
 800e958:	3102      	adds	r1, #2
 800e95a:	2b05      	cmp	r3, #5
 800e95c:	d012      	beq.n	800e984 <HAL_UART_Init+0x440>
 800e95e:	3102      	adds	r1, #2
 800e960:	2b06      	cmp	r3, #6
 800e962:	d00f      	beq.n	800e984 <HAL_UART_Init+0x440>
 800e964:	3104      	adds	r1, #4
 800e966:	2b07      	cmp	r3, #7
 800e968:	d00c      	beq.n	800e984 <HAL_UART_Init+0x440>
 800e96a:	3110      	adds	r1, #16
 800e96c:	2b08      	cmp	r3, #8
 800e96e:	d009      	beq.n	800e984 <HAL_UART_Init+0x440>
 800e970:	3120      	adds	r1, #32
 800e972:	2b09      	cmp	r3, #9
 800e974:	d006      	beq.n	800e984 <HAL_UART_Init+0x440>
 800e976:	3140      	adds	r1, #64	; 0x40
 800e978:	2b0a      	cmp	r3, #10
 800e97a:	d003      	beq.n	800e984 <HAL_UART_Init+0x440>
 800e97c:	397f      	subs	r1, #127	; 0x7f
 800e97e:	2b0b      	cmp	r3, #11
 800e980:	d100      	bne.n	800e984 <HAL_UART_Init+0x440>
 800e982:	31ff      	adds	r1, #255	; 0xff
 800e984:	f002 f8b2 	bl	8010aec <__udivsi3>
 800e988:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800e98a:	2600      	movs	r6, #0
 800e98c:	42b0      	cmp	r0, r6
 800e98e:	d100      	bne.n	800e992 <HAL_UART_Init+0x44e>
 800e990:	e6e5      	b.n	800e75e <HAL_UART_Init+0x21a>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e992:	2103      	movs	r1, #3
 800e994:	6862      	ldr	r2, [r4, #4]
 800e996:	4351      	muls	r1, r2
 800e998:	4281      	cmp	r1, r0
 800e99a:	d900      	bls.n	800e99e <HAL_UART_Init+0x45a>
 800e99c:	e6de      	b.n	800e75c <HAL_UART_Init+0x218>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e99e:	0311      	lsls	r1, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e9a0:	4281      	cmp	r1, r0
 800e9a2:	d200      	bcs.n	800e9a6 <HAL_UART_Init+0x462>
 800e9a4:	e6da      	b.n	800e75c <HAL_UART_Init+0x218>
        switch (clocksource)
 800e9a6:	2b08      	cmp	r3, #8
 800e9a8:	d900      	bls.n	800e9ac <HAL_UART_Init+0x468>
 800e9aa:	e17f      	b.n	800ecac <HAL_UART_Init+0x768>
 800e9ac:	0018      	movs	r0, r3
 800e9ae:	f002 f893 	bl	8010ad8 <__gnu_thumb1_case_uhi>
 800e9b2:	0097      	.short	0x0097
 800e9b4:	00ce017d 	.word	0x00ce017d
 800e9b8:	0113017d 	.word	0x0113017d
 800e9bc:	017d017d 	.word	0x017d017d
 800e9c0:	0138017d 	.word	0x0138017d
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d015      	beq.n	800e9f4 <HAL_UART_Init+0x4b0>
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d042      	beq.n	800ea52 <HAL_UART_Init+0x50e>
 800e9cc:	2b02      	cmp	r3, #2
 800e9ce:	d043      	beq.n	800ea58 <HAL_UART_Init+0x514>
 800e9d0:	2b03      	cmp	r3, #3
 800e9d2:	d043      	beq.n	800ea5c <HAL_UART_Init+0x518>
 800e9d4:	2b04      	cmp	r3, #4
 800e9d6:	d044      	beq.n	800ea62 <HAL_UART_Init+0x51e>
 800e9d8:	2b05      	cmp	r3, #5
 800e9da:	d045      	beq.n	800ea68 <HAL_UART_Init+0x524>
 800e9dc:	2b06      	cmp	r3, #6
 800e9de:	d046      	beq.n	800ea6e <HAL_UART_Init+0x52a>
 800e9e0:	2b07      	cmp	r3, #7
 800e9e2:	d047      	beq.n	800ea74 <HAL_UART_Init+0x530>
 800e9e4:	2b08      	cmp	r3, #8
 800e9e6:	d048      	beq.n	800ea7a <HAL_UART_Init+0x536>
 800e9e8:	2b09      	cmp	r3, #9
 800e9ea:	d049      	beq.n	800ea80 <HAL_UART_Init+0x53c>
 800e9ec:	2b0a      	cmp	r3, #10
 800e9ee:	d04a      	beq.n	800ea86 <HAL_UART_Init+0x542>
 800e9f0:	2b0b      	cmp	r3, #11
 800e9f2:	d04b      	beq.n	800ea8c <HAL_UART_Init+0x548>
 800e9f4:	2302      	movs	r3, #2
 800e9f6:	48af      	ldr	r0, [pc, #700]	; (800ecb4 <HAL_UART_Init+0x770>)
 800e9f8:	e7cb      	b.n	800e992 <HAL_UART_Init+0x44e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e9fa:	f7fd fbb9 	bl	800c170 <HAL_RCC_GetSysClockFreq>
 800e9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea00:	2101      	movs	r1, #1
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d021      	beq.n	800ea4a <HAL_UART_Init+0x506>
 800ea06:	1849      	adds	r1, r1, r1
 800ea08:	2b01      	cmp	r3, #1
 800ea0a:	d01e      	beq.n	800ea4a <HAL_UART_Init+0x506>
 800ea0c:	3102      	adds	r1, #2
 800ea0e:	2b02      	cmp	r3, #2
 800ea10:	d01b      	beq.n	800ea4a <HAL_UART_Init+0x506>
 800ea12:	3102      	adds	r1, #2
 800ea14:	2b03      	cmp	r3, #3
 800ea16:	d018      	beq.n	800ea4a <HAL_UART_Init+0x506>
 800ea18:	3102      	adds	r1, #2
 800ea1a:	2b04      	cmp	r3, #4
 800ea1c:	d015      	beq.n	800ea4a <HAL_UART_Init+0x506>
 800ea1e:	3102      	adds	r1, #2
 800ea20:	2b05      	cmp	r3, #5
 800ea22:	d012      	beq.n	800ea4a <HAL_UART_Init+0x506>
 800ea24:	3102      	adds	r1, #2
 800ea26:	2b06      	cmp	r3, #6
 800ea28:	d00f      	beq.n	800ea4a <HAL_UART_Init+0x506>
 800ea2a:	3104      	adds	r1, #4
 800ea2c:	2b07      	cmp	r3, #7
 800ea2e:	d00c      	beq.n	800ea4a <HAL_UART_Init+0x506>
 800ea30:	3110      	adds	r1, #16
 800ea32:	2b08      	cmp	r3, #8
 800ea34:	d009      	beq.n	800ea4a <HAL_UART_Init+0x506>
 800ea36:	3120      	adds	r1, #32
 800ea38:	2b09      	cmp	r3, #9
 800ea3a:	d006      	beq.n	800ea4a <HAL_UART_Init+0x506>
 800ea3c:	3140      	adds	r1, #64	; 0x40
 800ea3e:	2b0a      	cmp	r3, #10
 800ea40:	d003      	beq.n	800ea4a <HAL_UART_Init+0x506>
 800ea42:	397f      	subs	r1, #127	; 0x7f
 800ea44:	2b0b      	cmp	r3, #11
 800ea46:	d100      	bne.n	800ea4a <HAL_UART_Init+0x506>
 800ea48:	31ff      	adds	r1, #255	; 0xff
 800ea4a:	f002 f84f 	bl	8010aec <__udivsi3>
 800ea4e:	2304      	movs	r3, #4
 800ea50:	e79b      	b.n	800e98a <HAL_UART_Init+0x446>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ea52:	2302      	movs	r3, #2
 800ea54:	4898      	ldr	r0, [pc, #608]	; (800ecb8 <HAL_UART_Init+0x774>)
 800ea56:	e79c      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ea58:	4898      	ldr	r0, [pc, #608]	; (800ecbc <HAL_UART_Init+0x778>)
 800ea5a:	e79a      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	4898      	ldr	r0, [pc, #608]	; (800ecc0 <HAL_UART_Init+0x77c>)
 800ea60:	e797      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ea62:	2302      	movs	r3, #2
 800ea64:	4897      	ldr	r0, [pc, #604]	; (800ecc4 <HAL_UART_Init+0x780>)
 800ea66:	e794      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ea68:	2302      	movs	r3, #2
 800ea6a:	4897      	ldr	r0, [pc, #604]	; (800ecc8 <HAL_UART_Init+0x784>)
 800ea6c:	e791      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ea6e:	2302      	movs	r3, #2
 800ea70:	4896      	ldr	r0, [pc, #600]	; (800eccc <HAL_UART_Init+0x788>)
 800ea72:	e78e      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ea74:	2302      	movs	r3, #2
 800ea76:	4896      	ldr	r0, [pc, #600]	; (800ecd0 <HAL_UART_Init+0x78c>)
 800ea78:	e78b      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ea7a:	2302      	movs	r3, #2
 800ea7c:	4895      	ldr	r0, [pc, #596]	; (800ecd4 <HAL_UART_Init+0x790>)
 800ea7e:	e788      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ea80:	2302      	movs	r3, #2
 800ea82:	4895      	ldr	r0, [pc, #596]	; (800ecd8 <HAL_UART_Init+0x794>)
 800ea84:	e785      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ea86:	2302      	movs	r3, #2
 800ea88:	4894      	ldr	r0, [pc, #592]	; (800ecdc <HAL_UART_Init+0x798>)
 800ea8a:	e782      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ea8c:	2302      	movs	r3, #2
 800ea8e:	4894      	ldr	r0, [pc, #592]	; (800ece0 <HAL_UART_Init+0x79c>)
 800ea90:	e77f      	b.n	800e992 <HAL_UART_Init+0x44e>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ea92:	2080      	movs	r0, #128	; 0x80
 800ea94:	2308      	movs	r3, #8
 800ea96:	01c0      	lsls	r0, r0, #7
 800ea98:	e77b      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ea9a:	2080      	movs	r0, #128	; 0x80
 800ea9c:	2308      	movs	r3, #8
 800ea9e:	0180      	lsls	r0, r0, #6
 800eaa0:	e777      	b.n	800e992 <HAL_UART_Init+0x44e>
 800eaa2:	2308      	movs	r3, #8
 800eaa4:	488f      	ldr	r0, [pc, #572]	; (800ece4 <HAL_UART_Init+0x7a0>)
 800eaa6:	e774      	b.n	800e992 <HAL_UART_Init+0x44e>
 800eaa8:	2080      	movs	r0, #128	; 0x80
 800eaaa:	2308      	movs	r3, #8
 800eaac:	0140      	lsls	r0, r0, #5
 800eaae:	e770      	b.n	800e992 <HAL_UART_Init+0x44e>
 800eab0:	2308      	movs	r3, #8
 800eab2:	488d      	ldr	r0, [pc, #564]	; (800ece8 <HAL_UART_Init+0x7a4>)
 800eab4:	e76d      	b.n	800e992 <HAL_UART_Init+0x44e>
 800eab6:	2308      	movs	r3, #8
 800eab8:	488c      	ldr	r0, [pc, #560]	; (800ecec <HAL_UART_Init+0x7a8>)
 800eaba:	e76a      	b.n	800e992 <HAL_UART_Init+0x44e>
 800eabc:	2080      	movs	r0, #128	; 0x80
 800eabe:	2308      	movs	r3, #8
 800eac0:	0100      	lsls	r0, r0, #4
 800eac2:	e766      	b.n	800e992 <HAL_UART_Init+0x44e>
 800eac4:	2080      	movs	r0, #128	; 0x80
 800eac6:	00c0      	lsls	r0, r0, #3
 800eac8:	e763      	b.n	800e992 <HAL_UART_Init+0x44e>
 800eaca:	2080      	movs	r0, #128	; 0x80
 800eacc:	2308      	movs	r3, #8
 800eace:	0080      	lsls	r0, r0, #2
 800ead0:	e75f      	b.n	800e992 <HAL_UART_Init+0x44e>
 800ead2:	2080      	movs	r0, #128	; 0x80
 800ead4:	2308      	movs	r3, #8
 800ead6:	0040      	lsls	r0, r0, #1
 800ead8:	e75b      	b.n	800e992 <HAL_UART_Init+0x44e>
 800eada:	2308      	movs	r3, #8
 800eadc:	2080      	movs	r0, #128	; 0x80
 800eade:	e758      	b.n	800e992 <HAL_UART_Init+0x44e>
            pclk = HAL_RCC_GetPCLK1Freq();
 800eae0:	f7fd fb32 	bl	800c148 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eae4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eae6:	2201      	movs	r2, #1
 800eae8:	2300      	movs	r3, #0
 800eaea:	2900      	cmp	r1, #0
 800eaec:	d07b      	beq.n	800ebe6 <HAL_UART_Init+0x6a2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eaee:	2202      	movs	r2, #2
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	2901      	cmp	r1, #1
 800eaf4:	d077      	beq.n	800ebe6 <HAL_UART_Init+0x6a2>
 800eaf6:	2204      	movs	r2, #4
 800eaf8:	2300      	movs	r3, #0
 800eafa:	2902      	cmp	r1, #2
 800eafc:	d073      	beq.n	800ebe6 <HAL_UART_Init+0x6a2>
 800eafe:	2206      	movs	r2, #6
 800eb00:	2300      	movs	r3, #0
 800eb02:	2903      	cmp	r1, #3
 800eb04:	d06f      	beq.n	800ebe6 <HAL_UART_Init+0x6a2>
 800eb06:	2208      	movs	r2, #8
 800eb08:	2300      	movs	r3, #0
 800eb0a:	2904      	cmp	r1, #4
 800eb0c:	d06b      	beq.n	800ebe6 <HAL_UART_Init+0x6a2>
 800eb0e:	220a      	movs	r2, #10
 800eb10:	2300      	movs	r3, #0
 800eb12:	2905      	cmp	r1, #5
 800eb14:	d067      	beq.n	800ebe6 <HAL_UART_Init+0x6a2>
 800eb16:	220c      	movs	r2, #12
 800eb18:	2300      	movs	r3, #0
 800eb1a:	2906      	cmp	r1, #6
 800eb1c:	d063      	beq.n	800ebe6 <HAL_UART_Init+0x6a2>
 800eb1e:	2210      	movs	r2, #16
 800eb20:	2300      	movs	r3, #0
 800eb22:	2907      	cmp	r1, #7
 800eb24:	d05f      	beq.n	800ebe6 <HAL_UART_Init+0x6a2>
 800eb26:	2220      	movs	r2, #32
 800eb28:	2300      	movs	r3, #0
 800eb2a:	2908      	cmp	r1, #8
 800eb2c:	d05b      	beq.n	800ebe6 <HAL_UART_Init+0x6a2>
 800eb2e:	2240      	movs	r2, #64	; 0x40
 800eb30:	2300      	movs	r3, #0
 800eb32:	2909      	cmp	r1, #9
 800eb34:	d057      	beq.n	800ebe6 <HAL_UART_Init+0x6a2>
 800eb36:	2280      	movs	r2, #128	; 0x80
 800eb38:	2300      	movs	r3, #0
 800eb3a:	290a      	cmp	r1, #10
 800eb3c:	d053      	beq.n	800ebe6 <HAL_UART_Init+0x6a2>
 800eb3e:	2201      	movs	r2, #1
 800eb40:	2300      	movs	r3, #0
 800eb42:	290b      	cmp	r1, #11
 800eb44:	d14f      	bne.n	800ebe6 <HAL_UART_Init+0x6a2>
 800eb46:	2280      	movs	r2, #128	; 0x80
 800eb48:	2300      	movs	r3, #0
 800eb4a:	0052      	lsls	r2, r2, #1
 800eb4c:	e04b      	b.n	800ebe6 <HAL_UART_Init+0x6a2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d03e      	beq.n	800ebd2 <HAL_UART_Init+0x68e>
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d01e      	beq.n	800eb96 <HAL_UART_Init+0x652>
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d01f      	beq.n	800eb9c <HAL_UART_Init+0x658>
 800eb5c:	2b03      	cmp	r3, #3
 800eb5e:	d020      	beq.n	800eba2 <HAL_UART_Init+0x65e>
 800eb60:	2b04      	cmp	r3, #4
 800eb62:	d021      	beq.n	800eba8 <HAL_UART_Init+0x664>
 800eb64:	2b05      	cmp	r3, #5
 800eb66:	d022      	beq.n	800ebae <HAL_UART_Init+0x66a>
 800eb68:	2b06      	cmp	r3, #6
 800eb6a:	d023      	beq.n	800ebb4 <HAL_UART_Init+0x670>
 800eb6c:	2b07      	cmp	r3, #7
 800eb6e:	d024      	beq.n	800ebba <HAL_UART_Init+0x676>
 800eb70:	2b08      	cmp	r3, #8
 800eb72:	d025      	beq.n	800ebc0 <HAL_UART_Init+0x67c>
 800eb74:	2b09      	cmp	r3, #9
 800eb76:	d026      	beq.n	800ebc6 <HAL_UART_Init+0x682>
 800eb78:	2b0a      	cmp	r3, #10
 800eb7a:	d027      	beq.n	800ebcc <HAL_UART_Init+0x688>
 800eb7c:	2b0b      	cmp	r3, #11
 800eb7e:	d128      	bne.n	800ebd2 <HAL_UART_Init+0x68e>
 800eb80:	2100      	movs	r1, #0
 800eb82:	484c      	ldr	r0, [pc, #304]	; (800ecb4 <HAL_UART_Init+0x770>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb84:	2700      	movs	r7, #0
 800eb86:	0856      	lsrs	r6, r2, #1
 800eb88:	1980      	adds	r0, r0, r6
 800eb8a:	4179      	adcs	r1, r7
 800eb8c:	003b      	movs	r3, r7
 800eb8e:	f002 f99b 	bl	8010ec8 <__aeabi_uldivmod>
 800eb92:	003e      	movs	r6, r7
 800eb94:	e03c      	b.n	800ec10 <HAL_UART_Init+0x6cc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb96:	4856      	ldr	r0, [pc, #344]	; (800ecf0 <HAL_UART_Init+0x7ac>)
 800eb98:	2100      	movs	r1, #0
 800eb9a:	e7f3      	b.n	800eb84 <HAL_UART_Init+0x640>
 800eb9c:	4855      	ldr	r0, [pc, #340]	; (800ecf4 <HAL_UART_Init+0x7b0>)
 800eb9e:	2100      	movs	r1, #0
 800eba0:	e7f0      	b.n	800eb84 <HAL_UART_Init+0x640>
 800eba2:	4855      	ldr	r0, [pc, #340]	; (800ecf8 <HAL_UART_Init+0x7b4>)
 800eba4:	2100      	movs	r1, #0
 800eba6:	e7ed      	b.n	800eb84 <HAL_UART_Init+0x640>
 800eba8:	4854      	ldr	r0, [pc, #336]	; (800ecfc <HAL_UART_Init+0x7b8>)
 800ebaa:	2100      	movs	r1, #0
 800ebac:	e7ea      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ebae:	4854      	ldr	r0, [pc, #336]	; (800ed00 <HAL_UART_Init+0x7bc>)
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	e7e7      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ebb4:	4853      	ldr	r0, [pc, #332]	; (800ed04 <HAL_UART_Init+0x7c0>)
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	e7e4      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ebba:	4853      	ldr	r0, [pc, #332]	; (800ed08 <HAL_UART_Init+0x7c4>)
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	e7e1      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ebc0:	4852      	ldr	r0, [pc, #328]	; (800ed0c <HAL_UART_Init+0x7c8>)
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	e7de      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ebc6:	4852      	ldr	r0, [pc, #328]	; (800ed10 <HAL_UART_Init+0x7cc>)
 800ebc8:	2100      	movs	r1, #0
 800ebca:	e7db      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ebcc:	4851      	ldr	r0, [pc, #324]	; (800ed14 <HAL_UART_Init+0x7d0>)
 800ebce:	2100      	movs	r1, #0
 800ebd0:	e7d8      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ebd2:	4851      	ldr	r0, [pc, #324]	; (800ed18 <HAL_UART_Init+0x7d4>)
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	e7d5      	b.n	800eb84 <HAL_UART_Init+0x640>
            pclk = HAL_RCC_GetSysClockFreq();
 800ebd8:	f7fd faca 	bl	800c170 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ebde:	2201      	movs	r2, #1
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	2900      	cmp	r1, #0
 800ebe4:	d183      	bne.n	800eaee <HAL_UART_Init+0x5aa>
 800ebe6:	6861      	ldr	r1, [r4, #4]
 800ebe8:	2700      	movs	r7, #0
 800ebea:	4688      	mov	r8, r1
 800ebec:	2100      	movs	r1, #0
 800ebee:	f002 f96b 	bl	8010ec8 <__aeabi_uldivmod>
 800ebf2:	020b      	lsls	r3, r1, #8
 800ebf4:	4641      	mov	r1, r8
 800ebf6:	0e06      	lsrs	r6, r0, #24
 800ebf8:	4333      	orrs	r3, r6
 800ebfa:	0202      	lsls	r2, r0, #8
 800ebfc:	084e      	lsrs	r6, r1, #1
 800ebfe:	1992      	adds	r2, r2, r6
 800ec00:	417b      	adcs	r3, r7
 800ec02:	0010      	movs	r0, r2
 800ec04:	0019      	movs	r1, r3
 800ec06:	4642      	mov	r2, r8
 800ec08:	003b      	movs	r3, r7
 800ec0a:	f002 f95d 	bl	8010ec8 <__aeabi_uldivmod>
 800ec0e:	003e      	movs	r6, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ec10:	4b42      	ldr	r3, [pc, #264]	; (800ed1c <HAL_UART_Init+0x7d8>)
 800ec12:	4a43      	ldr	r2, [pc, #268]	; (800ed20 <HAL_UART_Init+0x7dc>)
 800ec14:	18c3      	adds	r3, r0, r3
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d900      	bls.n	800ec1c <HAL_UART_Init+0x6d8>
 800ec1a:	e59f      	b.n	800e75c <HAL_UART_Init+0x218>
      huart->Instance->BRR = usartdiv;
 800ec1c:	6823      	ldr	r3, [r4, #0]
 800ec1e:	60d8      	str	r0, [r3, #12]
 800ec20:	e59d      	b.n	800e75e <HAL_UART_Init+0x21a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d019      	beq.n	800ec5c <HAL_UART_Init+0x718>
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d01b      	beq.n	800ec64 <HAL_UART_Init+0x720>
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d01d      	beq.n	800ec6c <HAL_UART_Init+0x728>
 800ec30:	2b03      	cmp	r3, #3
 800ec32:	d01f      	beq.n	800ec74 <HAL_UART_Init+0x730>
 800ec34:	2b04      	cmp	r3, #4
 800ec36:	d020      	beq.n	800ec7a <HAL_UART_Init+0x736>
 800ec38:	2b05      	cmp	r3, #5
 800ec3a:	d022      	beq.n	800ec82 <HAL_UART_Init+0x73e>
 800ec3c:	2b06      	cmp	r3, #6
 800ec3e:	d023      	beq.n	800ec88 <HAL_UART_Init+0x744>
 800ec40:	2080      	movs	r0, #128	; 0x80
 800ec42:	2b07      	cmp	r3, #7
 800ec44:	d023      	beq.n	800ec8e <HAL_UART_Init+0x74a>
 800ec46:	2b08      	cmp	r3, #8
 800ec48:	d024      	beq.n	800ec94 <HAL_UART_Init+0x750>
 800ec4a:	2b09      	cmp	r3, #9
 800ec4c:	d025      	beq.n	800ec9a <HAL_UART_Init+0x756>
 800ec4e:	2b0a      	cmp	r3, #10
 800ec50:	d026      	beq.n	800eca0 <HAL_UART_Init+0x75c>
 800ec52:	2b0b      	cmp	r3, #11
 800ec54:	d127      	bne.n	800eca6 <HAL_UART_Init+0x762>
 800ec56:	0200      	lsls	r0, r0, #8
 800ec58:	2100      	movs	r1, #0
 800ec5a:	e793      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ec5c:	2080      	movs	r0, #128	; 0x80
 800ec5e:	2100      	movs	r1, #0
 800ec60:	0400      	lsls	r0, r0, #16
 800ec62:	e78f      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ec64:	2080      	movs	r0, #128	; 0x80
 800ec66:	2100      	movs	r1, #0
 800ec68:	03c0      	lsls	r0, r0, #15
 800ec6a:	e78b      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ec6c:	2080      	movs	r0, #128	; 0x80
 800ec6e:	2100      	movs	r1, #0
 800ec70:	0380      	lsls	r0, r0, #14
 800ec72:	e787      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ec74:	482b      	ldr	r0, [pc, #172]	; (800ed24 <HAL_UART_Init+0x7e0>)
 800ec76:	2100      	movs	r1, #0
 800ec78:	e784      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ec7a:	2080      	movs	r0, #128	; 0x80
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	0340      	lsls	r0, r0, #13
 800ec80:	e780      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ec82:	4829      	ldr	r0, [pc, #164]	; (800ed28 <HAL_UART_Init+0x7e4>)
 800ec84:	2100      	movs	r1, #0
 800ec86:	e77d      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ec88:	4828      	ldr	r0, [pc, #160]	; (800ed2c <HAL_UART_Init+0x7e8>)
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	e77a      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ec8e:	0300      	lsls	r0, r0, #12
 800ec90:	2100      	movs	r1, #0
 800ec92:	e777      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ec94:	02c0      	lsls	r0, r0, #11
 800ec96:	2100      	movs	r1, #0
 800ec98:	e774      	b.n	800eb84 <HAL_UART_Init+0x640>
 800ec9a:	0280      	lsls	r0, r0, #10
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	e771      	b.n	800eb84 <HAL_UART_Init+0x640>
 800eca0:	0240      	lsls	r0, r0, #9
 800eca2:	2100      	movs	r1, #0
 800eca4:	e76e      	b.n	800eb84 <HAL_UART_Init+0x640>
 800eca6:	0400      	lsls	r0, r0, #16
 800eca8:	2100      	movs	r1, #0
 800ecaa:	e76b      	b.n	800eb84 <HAL_UART_Init+0x640>
            ret = HAL_ERROR;
 800ecac:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800ecae:	2000      	movs	r0, #0
 800ecb0:	e7ae      	b.n	800ec10 <HAL_UART_Init+0x6cc>
 800ecb2:	46c0      	nop			; (mov r8, r8)
 800ecb4:	00f42400 	.word	0x00f42400
 800ecb8:	007a1200 	.word	0x007a1200
 800ecbc:	003d0900 	.word	0x003d0900
 800ecc0:	0028b0aa 	.word	0x0028b0aa
 800ecc4:	001e8480 	.word	0x001e8480
 800ecc8:	00186a00 	.word	0x00186a00
 800eccc:	00145855 	.word	0x00145855
 800ecd0:	000f4240 	.word	0x000f4240
 800ecd4:	0007a120 	.word	0x0007a120
 800ecd8:	0003d090 	.word	0x0003d090
 800ecdc:	0001e848 	.word	0x0001e848
 800ece0:	0000f424 	.word	0x0000f424
 800ece4:	00001555 	.word	0x00001555
 800ece8:	00000ccc 	.word	0x00000ccc
 800ecec:	00000aaa 	.word	0x00000aaa
 800ecf0:	7a120000 	.word	0x7a120000
 800ecf4:	3d090000 	.word	0x3d090000
 800ecf8:	28b0aa00 	.word	0x28b0aa00
 800ecfc:	1e848000 	.word	0x1e848000
 800ed00:	186a0000 	.word	0x186a0000
 800ed04:	14585500 	.word	0x14585500
 800ed08:	0f424000 	.word	0x0f424000
 800ed0c:	07a12000 	.word	0x07a12000
 800ed10:	03d09000 	.word	0x03d09000
 800ed14:	01e84800 	.word	0x01e84800
 800ed18:	f4240000 	.word	0xf4240000
 800ed1c:	fffffd00 	.word	0xfffffd00
 800ed20:	000ffcff 	.word	0x000ffcff
 800ed24:	00155500 	.word	0x00155500
 800ed28:	000ccc00 	.word	0x000ccc00
 800ed2c:	000aaa00 	.word	0x000aaa00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d026      	beq.n	800ed82 <HAL_UART_Init+0x83e>
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d026      	beq.n	800ed86 <HAL_UART_Init+0x842>
 800ed38:	2b02      	cmp	r3, #2
 800ed3a:	d026      	beq.n	800ed8a <HAL_UART_Init+0x846>
 800ed3c:	2b03      	cmp	r3, #3
 800ed3e:	d026      	beq.n	800ed8e <HAL_UART_Init+0x84a>
 800ed40:	2b04      	cmp	r3, #4
 800ed42:	d026      	beq.n	800ed92 <HAL_UART_Init+0x84e>
 800ed44:	2b05      	cmp	r3, #5
 800ed46:	d026      	beq.n	800ed96 <HAL_UART_Init+0x852>
 800ed48:	2b06      	cmp	r3, #6
 800ed4a:	d026      	beq.n	800ed9a <HAL_UART_Init+0x856>
 800ed4c:	2b07      	cmp	r3, #7
 800ed4e:	d026      	beq.n	800ed9e <HAL_UART_Init+0x85a>
 800ed50:	2b08      	cmp	r3, #8
 800ed52:	d026      	beq.n	800eda2 <HAL_UART_Init+0x85e>
 800ed54:	2b09      	cmp	r3, #9
 800ed56:	d026      	beq.n	800eda6 <HAL_UART_Init+0x862>
 800ed58:	2b0a      	cmp	r3, #10
 800ed5a:	d026      	beq.n	800edaa <HAL_UART_Init+0x866>
 800ed5c:	3b0b      	subs	r3, #11
 800ed5e:	0018      	movs	r0, r3
 800ed60:	1e43      	subs	r3, r0, #1
 800ed62:	4198      	sbcs	r0, r3
 800ed64:	4ba7      	ldr	r3, [pc, #668]	; (800f004 <HAL_UART_Init+0xac0>)
 800ed66:	4240      	negs	r0, r0
 800ed68:	4018      	ands	r0, r3
 800ed6a:	4ba7      	ldr	r3, [pc, #668]	; (800f008 <HAL_UART_Init+0xac4>)
 800ed6c:	469c      	mov	ip, r3
 800ed6e:	4460      	add	r0, ip
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed70:	6863      	ldr	r3, [r4, #4]
 800ed72:	6861      	ldr	r1, [r4, #4]
 800ed74:	085b      	lsrs	r3, r3, #1
 800ed76:	1818      	adds	r0, r3, r0
 800ed78:	f001 feb8 	bl	8010aec <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed7c:	2600      	movs	r6, #0
 800ed7e:	b280      	uxth	r0, r0
 800ed80:	e027      	b.n	800edd2 <HAL_UART_Init+0x88e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed82:	48a2      	ldr	r0, [pc, #648]	; (800f00c <HAL_UART_Init+0xac8>)
 800ed84:	e7f4      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ed86:	48a2      	ldr	r0, [pc, #648]	; (800f010 <HAL_UART_Init+0xacc>)
 800ed88:	e7f2      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ed8a:	48a2      	ldr	r0, [pc, #648]	; (800f014 <HAL_UART_Init+0xad0>)
 800ed8c:	e7f0      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ed8e:	48a2      	ldr	r0, [pc, #648]	; (800f018 <HAL_UART_Init+0xad4>)
 800ed90:	e7ee      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ed92:	48a2      	ldr	r0, [pc, #648]	; (800f01c <HAL_UART_Init+0xad8>)
 800ed94:	e7ec      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ed96:	48a2      	ldr	r0, [pc, #648]	; (800f020 <HAL_UART_Init+0xadc>)
 800ed98:	e7ea      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ed9a:	48a2      	ldr	r0, [pc, #648]	; (800f024 <HAL_UART_Init+0xae0>)
 800ed9c:	e7e8      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ed9e:	48a2      	ldr	r0, [pc, #648]	; (800f028 <HAL_UART_Init+0xae4>)
 800eda0:	e7e6      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800eda2:	48a2      	ldr	r0, [pc, #648]	; (800f02c <HAL_UART_Init+0xae8>)
 800eda4:	e7e4      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800eda6:	48a2      	ldr	r0, [pc, #648]	; (800f030 <HAL_UART_Init+0xaec>)
 800eda8:	e7e2      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800edaa:	48a2      	ldr	r0, [pc, #648]	; (800f034 <HAL_UART_Init+0xaf0>)
 800edac:	e7e0      	b.n	800ed70 <HAL_UART_Init+0x82c>
        pclk = HAL_RCC_GetSysClockFreq();
 800edae:	f7fd f9df 	bl	800c170 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800edb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edb4:	2101      	movs	r1, #1
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d000      	beq.n	800edbc <HAL_UART_Init+0x878>
 800edba:	e161      	b.n	800f080 <HAL_UART_Init+0xb3c>
 800edbc:	f001 fe96 	bl	8010aec <__udivsi3>
 800edc0:	6866      	ldr	r6, [r4, #4]
 800edc2:	0040      	lsls	r0, r0, #1
 800edc4:	0873      	lsrs	r3, r6, #1
 800edc6:	0031      	movs	r1, r6
 800edc8:	18c0      	adds	r0, r0, r3
 800edca:	f001 fe8f 	bl	8010aec <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800edce:	2600      	movs	r6, #0
 800edd0:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800edd2:	0003      	movs	r3, r0
 800edd4:	4a98      	ldr	r2, [pc, #608]	; (800f038 <HAL_UART_Init+0xaf4>)
 800edd6:	3b10      	subs	r3, #16
 800edd8:	4293      	cmp	r3, r2
 800edda:	d900      	bls.n	800edde <HAL_UART_Init+0x89a>
 800eddc:	e4be      	b.n	800e75c <HAL_UART_Init+0x218>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800edde:	230f      	movs	r3, #15
 800ede0:	0002      	movs	r2, r0
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ede2:	0700      	lsls	r0, r0, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ede4:	439a      	bics	r2, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ede6:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 800ede8:	6823      	ldr	r3, [r4, #0]
 800edea:	4310      	orrs	r0, r2
 800edec:	60d8      	str	r0, [r3, #12]
 800edee:	e4b6      	b.n	800e75e <HAL_UART_Init+0x21a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d018      	beq.n	800ee26 <HAL_UART_Init+0x8e2>
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d019      	beq.n	800ee2c <HAL_UART_Init+0x8e8>
 800edf8:	2b02      	cmp	r3, #2
 800edfa:	d01a      	beq.n	800ee32 <HAL_UART_Init+0x8ee>
 800edfc:	2b03      	cmp	r3, #3
 800edfe:	d01b      	beq.n	800ee38 <HAL_UART_Init+0x8f4>
 800ee00:	2b04      	cmp	r3, #4
 800ee02:	d01b      	beq.n	800ee3c <HAL_UART_Init+0x8f8>
 800ee04:	2b05      	cmp	r3, #5
 800ee06:	d01c      	beq.n	800ee42 <HAL_UART_Init+0x8fe>
 800ee08:	2b06      	cmp	r3, #6
 800ee0a:	d01c      	beq.n	800ee46 <HAL_UART_Init+0x902>
 800ee0c:	2080      	movs	r0, #128	; 0x80
 800ee0e:	2b07      	cmp	r3, #7
 800ee10:	d01b      	beq.n	800ee4a <HAL_UART_Init+0x906>
 800ee12:	2b08      	cmp	r3, #8
 800ee14:	d01b      	beq.n	800ee4e <HAL_UART_Init+0x90a>
 800ee16:	2b09      	cmp	r3, #9
 800ee18:	d01b      	beq.n	800ee52 <HAL_UART_Init+0x90e>
 800ee1a:	2b0a      	cmp	r3, #10
 800ee1c:	d01b      	beq.n	800ee56 <HAL_UART_Init+0x912>
 800ee1e:	2b0b      	cmp	r3, #11
 800ee20:	d11b      	bne.n	800ee5a <HAL_UART_Init+0x916>
 800ee22:	0040      	lsls	r0, r0, #1
 800ee24:	e7a4      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee26:	2080      	movs	r0, #128	; 0x80
 800ee28:	0240      	lsls	r0, r0, #9
 800ee2a:	e7a1      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee2c:	2080      	movs	r0, #128	; 0x80
 800ee2e:	0200      	lsls	r0, r0, #8
 800ee30:	e79e      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee32:	2080      	movs	r0, #128	; 0x80
 800ee34:	01c0      	lsls	r0, r0, #7
 800ee36:	e79b      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee38:	4880      	ldr	r0, [pc, #512]	; (800f03c <HAL_UART_Init+0xaf8>)
 800ee3a:	e799      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee3c:	2080      	movs	r0, #128	; 0x80
 800ee3e:	0180      	lsls	r0, r0, #6
 800ee40:	e796      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee42:	487f      	ldr	r0, [pc, #508]	; (800f040 <HAL_UART_Init+0xafc>)
 800ee44:	e794      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee46:	487f      	ldr	r0, [pc, #508]	; (800f044 <HAL_UART_Init+0xb00>)
 800ee48:	e792      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee4a:	0140      	lsls	r0, r0, #5
 800ee4c:	e790      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee4e:	0100      	lsls	r0, r0, #4
 800ee50:	e78e      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee52:	00c0      	lsls	r0, r0, #3
 800ee54:	e78c      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee56:	0080      	lsls	r0, r0, #2
 800ee58:	e78a      	b.n	800ed70 <HAL_UART_Init+0x82c>
 800ee5a:	0240      	lsls	r0, r0, #9
 800ee5c:	e788      	b.n	800ed70 <HAL_UART_Init+0x82c>
        ret = HAL_ERROR;
 800ee5e:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800ee60:	2000      	movs	r0, #0
 800ee62:	e7b6      	b.n	800edd2 <HAL_UART_Init+0x88e>
    switch (clocksource)
 800ee64:	2808      	cmp	r0, #8
 800ee66:	d900      	bls.n	800ee6a <HAL_UART_Init+0x926>
 800ee68:	e13d      	b.n	800f0e6 <HAL_UART_Init+0xba2>
 800ee6a:	f001 fe35 	bl	8010ad8 <__gnu_thumb1_case_uhi>
 800ee6e:	0009      	.short	0x0009
 800ee70:	0032013c 	.word	0x0032013c
 800ee74:	0071013c 	.word	0x0071013c
 800ee78:	013c013c 	.word	0x013c013c
 800ee7c:	0089013c 	.word	0x0089013c
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee80:	f7fd f962 	bl	800c148 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee86:	2101      	movs	r1, #1
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d067      	beq.n	800ef5c <HAL_UART_Init+0xa18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee8c:	1849      	adds	r1, r1, r1
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d064      	beq.n	800ef5c <HAL_UART_Init+0xa18>
 800ee92:	3102      	adds	r1, #2
 800ee94:	2b02      	cmp	r3, #2
 800ee96:	d061      	beq.n	800ef5c <HAL_UART_Init+0xa18>
 800ee98:	3102      	adds	r1, #2
 800ee9a:	2b03      	cmp	r3, #3
 800ee9c:	d05e      	beq.n	800ef5c <HAL_UART_Init+0xa18>
 800ee9e:	3102      	adds	r1, #2
 800eea0:	2b04      	cmp	r3, #4
 800eea2:	d05b      	beq.n	800ef5c <HAL_UART_Init+0xa18>
 800eea4:	3102      	adds	r1, #2
 800eea6:	2b05      	cmp	r3, #5
 800eea8:	d058      	beq.n	800ef5c <HAL_UART_Init+0xa18>
 800eeaa:	3102      	adds	r1, #2
 800eeac:	2b06      	cmp	r3, #6
 800eeae:	d055      	beq.n	800ef5c <HAL_UART_Init+0xa18>
 800eeb0:	3104      	adds	r1, #4
 800eeb2:	2b07      	cmp	r3, #7
 800eeb4:	d052      	beq.n	800ef5c <HAL_UART_Init+0xa18>
 800eeb6:	3110      	adds	r1, #16
 800eeb8:	2b08      	cmp	r3, #8
 800eeba:	d04f      	beq.n	800ef5c <HAL_UART_Init+0xa18>
 800eebc:	3120      	adds	r1, #32
 800eebe:	2b09      	cmp	r3, #9
 800eec0:	d04c      	beq.n	800ef5c <HAL_UART_Init+0xa18>
 800eec2:	3140      	adds	r1, #64	; 0x40
 800eec4:	2b0a      	cmp	r3, #10
 800eec6:	d049      	beq.n	800ef5c <HAL_UART_Init+0xa18>
 800eec8:	397f      	subs	r1, #127	; 0x7f
 800eeca:	2b0b      	cmp	r3, #11
 800eecc:	d146      	bne.n	800ef5c <HAL_UART_Init+0xa18>
 800eece:	31ff      	adds	r1, #255	; 0xff
 800eed0:	e044      	b.n	800ef5c <HAL_UART_Init+0xa18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d026      	beq.n	800ef24 <HAL_UART_Init+0x9e0>
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d026      	beq.n	800ef28 <HAL_UART_Init+0x9e4>
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d026      	beq.n	800ef2c <HAL_UART_Init+0x9e8>
 800eede:	2b03      	cmp	r3, #3
 800eee0:	d026      	beq.n	800ef30 <HAL_UART_Init+0x9ec>
 800eee2:	2b04      	cmp	r3, #4
 800eee4:	d026      	beq.n	800ef34 <HAL_UART_Init+0x9f0>
 800eee6:	2b05      	cmp	r3, #5
 800eee8:	d026      	beq.n	800ef38 <HAL_UART_Init+0x9f4>
 800eeea:	2b06      	cmp	r3, #6
 800eeec:	d026      	beq.n	800ef3c <HAL_UART_Init+0x9f8>
 800eeee:	2b07      	cmp	r3, #7
 800eef0:	d026      	beq.n	800ef40 <HAL_UART_Init+0x9fc>
 800eef2:	2b08      	cmp	r3, #8
 800eef4:	d026      	beq.n	800ef44 <HAL_UART_Init+0xa00>
 800eef6:	2b09      	cmp	r3, #9
 800eef8:	d026      	beq.n	800ef48 <HAL_UART_Init+0xa04>
 800eefa:	2b0a      	cmp	r3, #10
 800eefc:	d026      	beq.n	800ef4c <HAL_UART_Init+0xa08>
 800eefe:	3b0b      	subs	r3, #11
 800ef00:	0018      	movs	r0, r3
 800ef02:	1e43      	subs	r3, r0, #1
 800ef04:	4198      	sbcs	r0, r3
 800ef06:	4b50      	ldr	r3, [pc, #320]	; (800f048 <HAL_UART_Init+0xb04>)
 800ef08:	4240      	negs	r0, r0
 800ef0a:	4018      	ands	r0, r3
 800ef0c:	4b4f      	ldr	r3, [pc, #316]	; (800f04c <HAL_UART_Init+0xb08>)
 800ef0e:	469c      	mov	ip, r3
 800ef10:	4460      	add	r0, ip
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef12:	6863      	ldr	r3, [r4, #4]
 800ef14:	6861      	ldr	r1, [r4, #4]
 800ef16:	085b      	lsrs	r3, r3, #1
 800ef18:	1818      	adds	r0, r3, r0
 800ef1a:	f001 fde7 	bl	8010aec <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800ef1e:	2600      	movs	r6, #0
 800ef20:	b280      	uxth	r0, r0
 800ef22:	e025      	b.n	800ef70 <HAL_UART_Init+0xa2c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef24:	483a      	ldr	r0, [pc, #232]	; (800f010 <HAL_UART_Init+0xacc>)
 800ef26:	e7f4      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800ef28:	483a      	ldr	r0, [pc, #232]	; (800f014 <HAL_UART_Init+0xad0>)
 800ef2a:	e7f2      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800ef2c:	483b      	ldr	r0, [pc, #236]	; (800f01c <HAL_UART_Init+0xad8>)
 800ef2e:	e7f0      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800ef30:	483c      	ldr	r0, [pc, #240]	; (800f024 <HAL_UART_Init+0xae0>)
 800ef32:	e7ee      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800ef34:	483c      	ldr	r0, [pc, #240]	; (800f028 <HAL_UART_Init+0xae4>)
 800ef36:	e7ec      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800ef38:	4845      	ldr	r0, [pc, #276]	; (800f050 <HAL_UART_Init+0xb0c>)
 800ef3a:	e7ea      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800ef3c:	4845      	ldr	r0, [pc, #276]	; (800f054 <HAL_UART_Init+0xb10>)
 800ef3e:	e7e8      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800ef40:	483a      	ldr	r0, [pc, #232]	; (800f02c <HAL_UART_Init+0xae8>)
 800ef42:	e7e6      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800ef44:	483a      	ldr	r0, [pc, #232]	; (800f030 <HAL_UART_Init+0xaec>)
 800ef46:	e7e4      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800ef48:	483a      	ldr	r0, [pc, #232]	; (800f034 <HAL_UART_Init+0xaf0>)
 800ef4a:	e7e2      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800ef4c:	482e      	ldr	r0, [pc, #184]	; (800f008 <HAL_UART_Init+0xac4>)
 800ef4e:	e7e0      	b.n	800ef12 <HAL_UART_Init+0x9ce>
        pclk = HAL_RCC_GetSysClockFreq();
 800ef50:	f7fd f90e 	bl	800c170 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef56:	2101      	movs	r1, #1
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d197      	bne.n	800ee8c <HAL_UART_Init+0x948>
 800ef5c:	f001 fdc6 	bl	8010aec <__udivsi3>
 800ef60:	6866      	ldr	r6, [r4, #4]
 800ef62:	0873      	lsrs	r3, r6, #1
 800ef64:	0031      	movs	r1, r6
 800ef66:	18c0      	adds	r0, r0, r3
 800ef68:	f001 fdc0 	bl	8010aec <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800ef6c:	2600      	movs	r6, #0
 800ef6e:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef70:	0003      	movs	r3, r0
 800ef72:	4a31      	ldr	r2, [pc, #196]	; (800f038 <HAL_UART_Init+0xaf4>)
 800ef74:	3b10      	subs	r3, #16
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d800      	bhi.n	800ef7c <HAL_UART_Init+0xa38>
 800ef7a:	e64f      	b.n	800ec1c <HAL_UART_Init+0x6d8>
 800ef7c:	f7ff fbee 	bl	800e75c <HAL_UART_Init+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d018      	beq.n	800efb6 <HAL_UART_Init+0xa72>
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d019      	beq.n	800efbc <HAL_UART_Init+0xa78>
 800ef88:	2b02      	cmp	r3, #2
 800ef8a:	d01a      	beq.n	800efc2 <HAL_UART_Init+0xa7e>
 800ef8c:	2b03      	cmp	r3, #3
 800ef8e:	d01b      	beq.n	800efc8 <HAL_UART_Init+0xa84>
 800ef90:	2b04      	cmp	r3, #4
 800ef92:	d01b      	beq.n	800efcc <HAL_UART_Init+0xa88>
 800ef94:	2b05      	cmp	r3, #5
 800ef96:	d01c      	beq.n	800efd2 <HAL_UART_Init+0xa8e>
 800ef98:	2b06      	cmp	r3, #6
 800ef9a:	d01c      	beq.n	800efd6 <HAL_UART_Init+0xa92>
 800ef9c:	2080      	movs	r0, #128	; 0x80
 800ef9e:	2b07      	cmp	r3, #7
 800efa0:	d01b      	beq.n	800efda <HAL_UART_Init+0xa96>
 800efa2:	2b08      	cmp	r3, #8
 800efa4:	d01b      	beq.n	800efde <HAL_UART_Init+0xa9a>
 800efa6:	2b09      	cmp	r3, #9
 800efa8:	d01b      	beq.n	800efe2 <HAL_UART_Init+0xa9e>
 800efaa:	2b0a      	cmp	r3, #10
 800efac:	d01b      	beq.n	800efe6 <HAL_UART_Init+0xaa2>
 800efae:	2b0b      	cmp	r3, #11
 800efb0:	d0af      	beq.n	800ef12 <HAL_UART_Init+0x9ce>
 800efb2:	0200      	lsls	r0, r0, #8
 800efb4:	e7ad      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800efb6:	2080      	movs	r0, #128	; 0x80
 800efb8:	0200      	lsls	r0, r0, #8
 800efba:	e7aa      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800efbc:	2080      	movs	r0, #128	; 0x80
 800efbe:	01c0      	lsls	r0, r0, #7
 800efc0:	e7a7      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800efc2:	2080      	movs	r0, #128	; 0x80
 800efc4:	0180      	lsls	r0, r0, #6
 800efc6:	e7a4      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800efc8:	4823      	ldr	r0, [pc, #140]	; (800f058 <HAL_UART_Init+0xb14>)
 800efca:	e7a2      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800efcc:	2080      	movs	r0, #128	; 0x80
 800efce:	0140      	lsls	r0, r0, #5
 800efd0:	e79f      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800efd2:	4822      	ldr	r0, [pc, #136]	; (800f05c <HAL_UART_Init+0xb18>)
 800efd4:	e79d      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800efd6:	4822      	ldr	r0, [pc, #136]	; (800f060 <HAL_UART_Init+0xb1c>)
 800efd8:	e79b      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800efda:	0100      	lsls	r0, r0, #4
 800efdc:	e799      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800efde:	00c0      	lsls	r0, r0, #3
 800efe0:	e797      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800efe2:	0080      	lsls	r0, r0, #2
 800efe4:	e795      	b.n	800ef12 <HAL_UART_Init+0x9ce>
 800efe6:	0040      	lsls	r0, r0, #1
 800efe8:	e793      	b.n	800ef12 <HAL_UART_Init+0x9ce>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efea:	2180      	movs	r1, #128	; 0x80
 800efec:	4b1d      	ldr	r3, [pc, #116]	; (800f064 <HAL_UART_Init+0xb20>)
 800efee:	003a      	movs	r2, r7
 800eff0:	0389      	lsls	r1, r1, #14
 800eff2:	0020      	movs	r0, r4
 800eff4:	f7fc fd62 	bl	800babc <UART_WaitOnFlagUntilTimeout.constprop.69>
 800eff8:	2800      	cmp	r0, #0
 800effa:	d100      	bne.n	800effe <HAL_UART_Init+0xaba>
 800effc:	e41b      	b.n	800e836 <HAL_UART_Init+0x2f2>
      return HAL_TIMEOUT;
 800effe:	2603      	movs	r6, #3
 800f000:	f7ff faaa 	bl	800e558 <HAL_UART_Init+0x14>
 800f004:	01e65fb8 	.word	0x01e65fb8
 800f008:	0001e848 	.word	0x0001e848
 800f00c:	01e84800 	.word	0x01e84800
 800f010:	00f42400 	.word	0x00f42400
 800f014:	007a1200 	.word	0x007a1200
 800f018:	00516154 	.word	0x00516154
 800f01c:	003d0900 	.word	0x003d0900
 800f020:	0030d400 	.word	0x0030d400
 800f024:	0028b0aa 	.word	0x0028b0aa
 800f028:	001e8480 	.word	0x001e8480
 800f02c:	000f4240 	.word	0x000f4240
 800f030:	0007a120 	.word	0x0007a120
 800f034:	0003d090 	.word	0x0003d090
 800f038:	0000ffef 	.word	0x0000ffef
 800f03c:	00002aaa 	.word	0x00002aaa
 800f040:	00001998 	.word	0x00001998
 800f044:	00001554 	.word	0x00001554
 800f048:	00f32fdc 	.word	0x00f32fdc
 800f04c:	0000f424 	.word	0x0000f424
 800f050:	00186a00 	.word	0x00186a00
 800f054:	00145855 	.word	0x00145855
 800f058:	00001555 	.word	0x00001555
 800f05c:	00000ccc 	.word	0x00000ccc
 800f060:	00000aaa 	.word	0x00000aaa
 800f064:	01ffffff 	.word	0x01ffffff
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f068:	2380      	movs	r3, #128	; 0x80
 800f06a:	021b      	lsls	r3, r3, #8
 800f06c:	429e      	cmp	r6, r3
 800f06e:	d000      	beq.n	800f072 <HAL_UART_Init+0xb2e>
 800f070:	e706      	b.n	800ee80 <HAL_UART_Init+0x93c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800f072:	f7fd f869 	bl	800c148 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f078:	2101      	movs	r1, #1
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d100      	bne.n	800f080 <HAL_UART_Init+0xb3c>
 800f07e:	e69d      	b.n	800edbc <HAL_UART_Init+0x878>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f080:	1849      	adds	r1, r1, r1
 800f082:	2b01      	cmp	r3, #1
 800f084:	d100      	bne.n	800f088 <HAL_UART_Init+0xb44>
 800f086:	e699      	b.n	800edbc <HAL_UART_Init+0x878>
 800f088:	3102      	adds	r1, #2
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	d100      	bne.n	800f090 <HAL_UART_Init+0xb4c>
 800f08e:	e695      	b.n	800edbc <HAL_UART_Init+0x878>
 800f090:	3102      	adds	r1, #2
 800f092:	2b03      	cmp	r3, #3
 800f094:	d100      	bne.n	800f098 <HAL_UART_Init+0xb54>
 800f096:	e691      	b.n	800edbc <HAL_UART_Init+0x878>
 800f098:	3102      	adds	r1, #2
 800f09a:	2b04      	cmp	r3, #4
 800f09c:	d100      	bne.n	800f0a0 <HAL_UART_Init+0xb5c>
 800f09e:	e68d      	b.n	800edbc <HAL_UART_Init+0x878>
 800f0a0:	3102      	adds	r1, #2
 800f0a2:	2b05      	cmp	r3, #5
 800f0a4:	d100      	bne.n	800f0a8 <HAL_UART_Init+0xb64>
 800f0a6:	e689      	b.n	800edbc <HAL_UART_Init+0x878>
 800f0a8:	3102      	adds	r1, #2
 800f0aa:	2b06      	cmp	r3, #6
 800f0ac:	d100      	bne.n	800f0b0 <HAL_UART_Init+0xb6c>
 800f0ae:	e685      	b.n	800edbc <HAL_UART_Init+0x878>
 800f0b0:	3104      	adds	r1, #4
 800f0b2:	2b07      	cmp	r3, #7
 800f0b4:	d100      	bne.n	800f0b8 <HAL_UART_Init+0xb74>
 800f0b6:	e681      	b.n	800edbc <HAL_UART_Init+0x878>
 800f0b8:	3110      	adds	r1, #16
 800f0ba:	2b08      	cmp	r3, #8
 800f0bc:	d100      	bne.n	800f0c0 <HAL_UART_Init+0xb7c>
 800f0be:	e67d      	b.n	800edbc <HAL_UART_Init+0x878>
 800f0c0:	3120      	adds	r1, #32
 800f0c2:	2b09      	cmp	r3, #9
 800f0c4:	d100      	bne.n	800f0c8 <HAL_UART_Init+0xb84>
 800f0c6:	e679      	b.n	800edbc <HAL_UART_Init+0x878>
 800f0c8:	3140      	adds	r1, #64	; 0x40
 800f0ca:	2b0a      	cmp	r3, #10
 800f0cc:	d100      	bne.n	800f0d0 <HAL_UART_Init+0xb8c>
 800f0ce:	e675      	b.n	800edbc <HAL_UART_Init+0x878>
 800f0d0:	397f      	subs	r1, #127	; 0x7f
 800f0d2:	2b0b      	cmp	r3, #11
 800f0d4:	d000      	beq.n	800f0d8 <HAL_UART_Init+0xb94>
 800f0d6:	e671      	b.n	800edbc <HAL_UART_Init+0x878>
 800f0d8:	31ff      	adds	r1, #255	; 0xff
 800f0da:	e66f      	b.n	800edbc <HAL_UART_Init+0x878>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f0dc:	2380      	movs	r3, #128	; 0x80
 800f0de:	021b      	lsls	r3, r3, #8
 800f0e0:	429e      	cmp	r6, r3
 800f0e2:	d100      	bne.n	800f0e6 <HAL_UART_Init+0xba2>
 800f0e4:	e6bb      	b.n	800ee5e <HAL_UART_Init+0x91a>
        ret = HAL_ERROR;
 800f0e6:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	e741      	b.n	800ef70 <HAL_UART_Init+0xa2c>

0800f0ec <HAL_SPI_Init>:
{
 800f0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0ee:	0004      	movs	r4, r0
 800f0f0:	b089      	sub	sp, #36	; 0x24
    return HAL_ERROR;
 800f0f2:	2001      	movs	r0, #1
  if (hspi == NULL)
 800f0f4:	2c00      	cmp	r4, #0
 800f0f6:	d06f      	beq.n	800f1d8 <HAL_SPI_Init+0xec>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f0f8:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800f0fa:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f0fc:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800f0fe:	355d      	adds	r5, #93	; 0x5d
 800f100:	7829      	ldrb	r1, [r5, #0]
 800f102:	b2c9      	uxtb	r1, r1
 800f104:	4299      	cmp	r1, r3
 800f106:	d127      	bne.n	800f158 <HAL_SPI_Init+0x6c>
    hspi->Lock = HAL_UNLOCKED;
 800f108:	0023      	movs	r3, r4
 800f10a:	335c      	adds	r3, #92	; 0x5c
 800f10c:	6826      	ldr	r6, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f10e:	2214      	movs	r2, #20
 800f110:	7019      	strb	r1, [r3, #0]
 800f112:	a803      	add	r0, sp, #12
 800f114:	f004 fa7a 	bl	801360c <memset>
  if(hspi->Instance==SPI1)
 800f118:	4b35      	ldr	r3, [pc, #212]	; (800f1f0 <HAL_SPI_Init+0x104>)
 800f11a:	429e      	cmp	r6, r3
 800f11c:	d11c      	bne.n	800f158 <HAL_SPI_Init+0x6c>
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f11e:	2080      	movs	r0, #128	; 0x80
 800f120:	4b34      	ldr	r3, [pc, #208]	; (800f1f4 <HAL_SPI_Init+0x108>)
 800f122:	0140      	lsls	r0, r0, #5
 800f124:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f126:	4301      	orrs	r1, r0
 800f128:	6419      	str	r1, [r3, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f12a:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f12c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f12e:	4002      	ands	r2, r0
 800f130:	9202      	str	r2, [sp, #8]
 800f132:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f136:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f138:	430a      	orrs	r2, r1
 800f13a:	635a      	str	r2, [r3, #52]	; 0x34
 800f13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f13e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f140:	400b      	ands	r3, r1
 800f142:	9301      	str	r3, [sp, #4]
 800f144:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 800f146:	23e0      	movs	r3, #224	; 0xe0
 800f148:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f14a:	3bde      	subs	r3, #222	; 0xde
 800f14c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f14e:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f150:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f152:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f154:	f7ff f914 	bl	800e380 <HAL_GPIO_Init>
  hspi->State = HAL_SPI_STATE_BUSY;
 800f158:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800f15a:	2140      	movs	r1, #64	; 0x40
 800f15c:	20e0      	movs	r0, #224	; 0xe0
  hspi->State = HAL_SPI_STATE_BUSY;
 800f15e:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800f160:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f162:	68e6      	ldr	r6, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800f164:	6813      	ldr	r3, [r2, #0]
 800f166:	00c0      	lsls	r0, r0, #3
 800f168:	438b      	bics	r3, r1
 800f16a:	6013      	str	r3, [r2, #0]
 800f16c:	2300      	movs	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f16e:	4286      	cmp	r6, r0
 800f170:	d837      	bhi.n	800f1e2 <HAL_SPI_Init+0xf6>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f172:	2180      	movs	r1, #128	; 0x80
 800f174:	0149      	lsls	r1, r1, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f176:	4286      	cmp	r6, r0
 800f178:	d101      	bne.n	800f17e <HAL_SPI_Init+0x92>
 800f17a:	e001      	b.n	800f180 <HAL_SPI_Init+0x94>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f17c:	0019      	movs	r1, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f17e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800f180:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f182:	2b00      	cmp	r3, #0
 800f184:	d103      	bne.n	800f18e <HAL_SPI_Init+0xa2>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f186:	4286      	cmp	r6, r0
 800f188:	d928      	bls.n	800f1dc <HAL_SPI_Init+0xf0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800f18a:	3302      	adds	r3, #2
 800f18c:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800f18e:	68a7      	ldr	r7, [r4, #8]
 800f190:	6863      	ldr	r3, [r4, #4]
 800f192:	69a0      	ldr	r0, [r4, #24]
 800f194:	433b      	orrs	r3, r7
 800f196:	6927      	ldr	r7, [r4, #16]
 800f198:	433b      	orrs	r3, r7
 800f19a:	6967      	ldr	r7, [r4, #20]
 800f19c:	433b      	orrs	r3, r7
 800f19e:	69e7      	ldr	r7, [r4, #28]
 800f1a0:	433b      	orrs	r3, r7
 800f1a2:	6a27      	ldr	r7, [r4, #32]
 800f1a4:	433b      	orrs	r3, r7
 800f1a6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f1a8:	433b      	orrs	r3, r7
 800f1aa:	2780      	movs	r7, #128	; 0x80
 800f1ac:	00bf      	lsls	r7, r7, #2
 800f1ae:	4007      	ands	r7, r0
 800f1b0:	433b      	orrs	r3, r7
 800f1b2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800f1b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1b6:	0c00      	lsrs	r0, r0, #16
 800f1b8:	4333      	orrs	r3, r6
 800f1ba:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800f1bc:	4333      	orrs	r3, r6
 800f1be:	2604      	movs	r6, #4
 800f1c0:	4030      	ands	r0, r6
 800f1c2:	4303      	orrs	r3, r0
 800f1c4:	430b      	orrs	r3, r1
 800f1c6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f1c8:	69d3      	ldr	r3, [r2, #28]
 800f1ca:	490b      	ldr	r1, [pc, #44]	; (800f1f8 <HAL_SPI_Init+0x10c>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f1cc:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f1ce:	400b      	ands	r3, r1
 800f1d0:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800f1d2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f1d4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f1d6:	702b      	strb	r3, [r5, #0]
}
 800f1d8:	b009      	add	sp, #36	; 0x24
 800f1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	6323      	str	r3, [r4, #48]	; 0x30
 800f1e0:	e7d5      	b.n	800f18e <HAL_SPI_Init+0xa2>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f1e2:	21f0      	movs	r1, #240	; 0xf0
 800f1e4:	0109      	lsls	r1, r1, #4
 800f1e6:	428e      	cmp	r6, r1
 800f1e8:	d1c8      	bne.n	800f17c <HAL_SPI_Init+0x90>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f1ea:	0019      	movs	r1, r3
 800f1ec:	e7c8      	b.n	800f180 <HAL_SPI_Init+0x94>
 800f1ee:	46c0      	nop			; (mov r8, r8)
 800f1f0:	40013000 	.word	0x40013000
 800f1f4:	40021000 	.word	0x40021000
 800f1f8:	fffff7ff 	.word	0xfffff7ff

0800f1fc <HAL_I2C_Init>:
{
 800f1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1fe:	0004      	movs	r4, r0
 800f200:	b089      	sub	sp, #36	; 0x24
    return HAL_ERROR;
 800f202:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800f204:	2c00      	cmp	r4, #0
 800f206:	d06c      	beq.n	800f2e2 <HAL_I2C_Init+0xe6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f208:	0026      	movs	r6, r4
 800f20a:	3641      	adds	r6, #65	; 0x41
 800f20c:	7831      	ldrb	r1, [r6, #0]
 800f20e:	b2c9      	uxtb	r1, r1
 800f210:	2900      	cmp	r1, #0
 800f212:	d132      	bne.n	800f27a <HAL_I2C_Init+0x7e>
    hi2c->Lock = HAL_UNLOCKED;
 800f214:	0023      	movs	r3, r4
 800f216:	3340      	adds	r3, #64	; 0x40
 800f218:	6825      	ldr	r5, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f21a:	2214      	movs	r2, #20
 800f21c:	7019      	strb	r1, [r3, #0]
 800f21e:	a803      	add	r0, sp, #12
 800f220:	f004 f9f4 	bl	801360c <memset>
  if(hi2c->Instance==I2C1)
 800f224:	4b35      	ldr	r3, [pc, #212]	; (800f2fc <HAL_I2C_Init+0x100>)
 800f226:	429d      	cmp	r5, r3
 800f228:	d127      	bne.n	800f27a <HAL_I2C_Init+0x7e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f22a:	2102      	movs	r1, #2
 800f22c:	4d34      	ldr	r5, [pc, #208]	; (800f300 <HAL_I2C_Init+0x104>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f22e:	4835      	ldr	r0, [pc, #212]	; (800f304 <HAL_I2C_Init+0x108>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f230:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800f232:	430a      	orrs	r2, r1
 800f234:	636a      	str	r2, [r5, #52]	; 0x34
 800f236:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f238:	400b      	ands	r3, r1
 800f23a:	9302      	str	r3, [sp, #8]
 800f23c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f23e:	23c0      	movs	r3, #192	; 0xc0
 800f240:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f242:	3bae      	subs	r3, #174	; 0xae
 800f244:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f246:	3b11      	subs	r3, #17
 800f248:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f24a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800f24c:	3305      	adds	r3, #5
 800f24e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f250:	f7ff f896 	bl	800e380 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800f254:	2180      	movs	r1, #128	; 0x80
 800f256:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800f258:	0389      	lsls	r1, r1, #14
 800f25a:	430a      	orrs	r2, r1
 800f25c:	63ea      	str	r2, [r5, #60]	; 0x3c
 800f25e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f260:	4a29      	ldr	r2, [pc, #164]	; (800f308 <HAL_I2C_Init+0x10c>)
 800f262:	400b      	ands	r3, r1
 800f264:	21c5      	movs	r1, #197	; 0xc5
 800f266:	9301      	str	r3, [sp, #4]
 800f268:	0089      	lsls	r1, r1, #2
 800f26a:	9b01      	ldr	r3, [sp, #4]
 800f26c:	5853      	ldr	r3, [r2, r1]
 800f26e:	021b      	lsls	r3, r3, #8
 800f270:	0a1b      	lsrs	r3, r3, #8
 800f272:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f274:	2380      	movs	r3, #128	; 0x80
 800f276:	041b      	lsls	r3, r3, #16
 800f278:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800f27a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800f27c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800f27e:	7033      	strb	r3, [r6, #0]
  __HAL_I2C_DISABLE(hi2c);
 800f280:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f282:	4f22      	ldr	r7, [pc, #136]	; (800f30c <HAL_I2C_Init+0x110>)
  __HAL_I2C_DISABLE(hi2c);
 800f284:	681a      	ldr	r2, [r3, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f286:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800f288:	438a      	bics	r2, r1
 800f28a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f28c:	6861      	ldr	r1, [r4, #4]
 800f28e:	4a20      	ldr	r2, [pc, #128]	; (800f310 <HAL_I2C_Init+0x114>)
 800f290:	68a5      	ldr	r5, [r4, #8]
 800f292:	400a      	ands	r2, r1
 800f294:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f296:	6899      	ldr	r1, [r3, #8]
 800f298:	4039      	ands	r1, r7
 800f29a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f29c:	2801      	cmp	r0, #1
 800f29e:	d122      	bne.n	800f2e6 <HAL_I2C_Init+0xea>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f2a0:	2180      	movs	r1, #128	; 0x80
 800f2a2:	0209      	lsls	r1, r1, #8
 800f2a4:	4329      	orrs	r1, r5
 800f2a6:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f2a8:	685a      	ldr	r2, [r3, #4]
 800f2aa:	491a      	ldr	r1, [pc, #104]	; (800f314 <HAL_I2C_Init+0x118>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f2ac:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f2ae:	4311      	orrs	r1, r2
 800f2b0:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f2b2:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800f2b4:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f2b6:	403a      	ands	r2, r7
 800f2b8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800f2ba:	6922      	ldr	r2, [r4, #16]
 800f2bc:	430a      	orrs	r2, r1
 800f2be:	69a1      	ldr	r1, [r4, #24]
 800f2c0:	0209      	lsls	r1, r1, #8
 800f2c2:	430a      	orrs	r2, r1
 800f2c4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f2c6:	6a21      	ldr	r1, [r4, #32]
 800f2c8:	69e2      	ldr	r2, [r4, #28]
 800f2ca:	430a      	orrs	r2, r1
 800f2cc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	6819      	ldr	r1, [r3, #0]
 800f2d2:	430a      	orrs	r2, r1
 800f2d4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800f2d6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f2d8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f2da:	7033      	strb	r3, [r6, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800f2dc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f2de:	3442      	adds	r4, #66	; 0x42
 800f2e0:	7020      	strb	r0, [r4, #0]
}
 800f2e2:	b009      	add	sp, #36	; 0x24
 800f2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f2e6:	2184      	movs	r1, #132	; 0x84
 800f2e8:	0209      	lsls	r1, r1, #8
 800f2ea:	4329      	orrs	r1, r5
 800f2ec:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f2ee:	2802      	cmp	r0, #2
 800f2f0:	d1da      	bne.n	800f2a8 <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f2f2:	2280      	movs	r2, #128	; 0x80
 800f2f4:	0112      	lsls	r2, r2, #4
 800f2f6:	605a      	str	r2, [r3, #4]
 800f2f8:	e7d6      	b.n	800f2a8 <HAL_I2C_Init+0xac>
 800f2fa:	46c0      	nop			; (mov r8, r8)
 800f2fc:	40005400 	.word	0x40005400
 800f300:	40021000 	.word	0x40021000
 800f304:	50000400 	.word	0x50000400
 800f308:	e000e100 	.word	0xe000e100
 800f30c:	ffff7fff 	.word	0xffff7fff
 800f310:	f0ffffff 	.word	0xf0ffffff
 800f314:	02008000 	.word	0x02008000

0800f318 <biquad_q3_12_complex_direct_form_1.lto_priv.568>:
 800f318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f31a:	4645      	mov	r5, r8
 800f31c:	4657      	mov	r7, sl
 800f31e:	464e      	mov	r6, r9
 800f320:	46de      	mov	lr, fp
 800f322:	b5e0      	push	{r5, r6, r7, lr}
 800f324:	b08d      	sub	sp, #52	; 0x34
 800f326:	ac16      	add	r4, sp, #88	; 0x58
 800f328:	4688      	mov	r8, r1
 800f32a:	2100      	movs	r1, #0
 800f32c:	5e65      	ldrsh	r5, [r4, r1]
 800f32e:	2102      	movs	r1, #2
 800f330:	5e66      	ldrsh	r6, [r4, r1]
 800f332:	2400      	movs	r4, #0
 800f334:	5f01      	ldrsh	r1, [r0, r4]
 800f336:	9102      	str	r1, [sp, #8]
 800f338:	2402      	movs	r4, #2
 800f33a:	5f01      	ldrsh	r1, [r0, r4]
 800f33c:	9103      	str	r1, [sp, #12]
 800f33e:	2404      	movs	r4, #4
 800f340:	5f01      	ldrsh	r1, [r0, r4]
 800f342:	4c36      	ldr	r4, [pc, #216]	; (800f41c <biquad_q3_12_complex_direct_form_1.lto_priv.568+0x104>)
 800f344:	9104      	str	r1, [sp, #16]
 800f346:	88c7      	ldrh	r7, [r0, #6]
 800f348:	1be4      	subs	r4, r4, r7
 800f34a:	b221      	sxth	r1, r4
 800f34c:	9105      	str	r1, [sp, #20]
 800f34e:	2108      	movs	r1, #8
 800f350:	5e41      	ldrsh	r1, [r0, r1]
 800f352:	0334      	lsls	r4, r6, #12
 800f354:	9106      	str	r1, [sp, #24]
 800f356:	0328      	lsls	r0, r5, #12
 800f358:	0097      	lsls	r7, r2, #2
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d001      	beq.n	800f362 <biquad_q3_12_complex_direct_form_1.lto_priv.568+0x4a>
 800f35e:	2704      	movs	r7, #4
 800f360:	427f      	negs	r7, r7
 800f362:	4259      	negs	r1, r3
 800f364:	4351      	muls	r1, r2
 800f366:	009a      	lsls	r2, r3, #2
 800f368:	920b      	str	r2, [sp, #44]	; 0x2c
 800f36a:	008a      	lsls	r2, r1, #2
 800f36c:	19d2      	adds	r2, r2, r7
 800f36e:	4442      	add	r2, r8
 800f370:	468c      	mov	ip, r1
 800f372:	46a8      	mov	r8, r5
 800f374:	0011      	movs	r1, r2
 800f376:	46b2      	mov	sl, r6
 800f378:	46a9      	mov	r9, r5
 800f37a:	9608      	str	r6, [sp, #32]
 800f37c:	9507      	str	r5, [sp, #28]
 800f37e:	9601      	str	r6, [sp, #4]
 800f380:	4662      	mov	r2, ip
 800f382:	2a00      	cmp	r2, #0
 800f384:	d106      	bne.n	800f394 <biquad_q3_12_complex_direct_form_1.lto_priv.568+0x7c>
 800f386:	b00d      	add	sp, #52	; 0x34
 800f388:	bc3c      	pop	{r2, r3, r4, r5}
 800f38a:	4690      	mov	r8, r2
 800f38c:	4699      	mov	r9, r3
 800f38e:	46a2      	mov	sl, r4
 800f390:	46ab      	mov	fp, r5
 800f392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f394:	2700      	movs	r7, #0
 800f396:	5fca      	ldrsh	r2, [r1, r7]
 800f398:	449c      	add	ip, r3
 800f39a:	9209      	str	r2, [sp, #36]	; 0x24
 800f39c:	2702      	movs	r7, #2
 800f39e:	5fca      	ldrsh	r2, [r1, r7]
 800f3a0:	464f      	mov	r7, r9
 800f3a2:	920a      	str	r2, [sp, #40]	; 0x28
 800f3a4:	9a03      	ldr	r2, [sp, #12]
 800f3a6:	437a      	muls	r2, r7
 800f3a8:	4647      	mov	r7, r8
 800f3aa:	4693      	mov	fp, r2
 800f3ac:	9a05      	ldr	r2, [sp, #20]
 800f3ae:	437a      	muls	r2, r7
 800f3b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f3b2:	4493      	add	fp, r2
 800f3b4:	9a02      	ldr	r2, [sp, #8]
 800f3b6:	437a      	muls	r2, r7
 800f3b8:	1810      	adds	r0, r2, r0
 800f3ba:	9a04      	ldr	r2, [sp, #16]
 800f3bc:	9f07      	ldr	r7, [sp, #28]
 800f3be:	4355      	muls	r5, r2
 800f3c0:	9a06      	ldr	r2, [sp, #24]
 800f3c2:	4458      	add	r0, fp
 800f3c4:	4357      	muls	r7, r2
 800f3c6:	1bed      	subs	r5, r5, r7
 800f3c8:	1940      	adds	r0, r0, r5
 800f3ca:	4655      	mov	r5, sl
 800f3cc:	9a03      	ldr	r2, [sp, #12]
 800f3ce:	9f01      	ldr	r7, [sp, #4]
 800f3d0:	436a      	muls	r2, r5
 800f3d2:	9d05      	ldr	r5, [sp, #20]
 800f3d4:	437d      	muls	r5, r7
 800f3d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f3d8:	1955      	adds	r5, r2, r5
 800f3da:	9a02      	ldr	r2, [sp, #8]
 800f3dc:	437a      	muls	r2, r7
 800f3de:	1914      	adds	r4, r2, r4
 800f3e0:	9a04      	ldr	r2, [sp, #16]
 800f3e2:	192c      	adds	r4, r5, r4
 800f3e4:	4356      	muls	r6, r2
 800f3e6:	9d06      	ldr	r5, [sp, #24]
 800f3e8:	9a08      	ldr	r2, [sp, #32]
 800f3ea:	436a      	muls	r2, r5
 800f3ec:	1ab6      	subs	r6, r6, r2
 800f3ee:	19a4      	adds	r4, r4, r6
 800f3f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f3f2:	1302      	asrs	r2, r0, #12
 800f3f4:	46b3      	mov	fp, r6
 800f3f6:	9e01      	ldr	r6, [sp, #4]
 800f3f8:	b212      	sxth	r2, r2
 800f3fa:	9608      	str	r6, [sp, #32]
 800f3fc:	4646      	mov	r6, r8
 800f3fe:	800a      	strh	r2, [r1, #0]
 800f400:	1325      	asrs	r5, r4, #12
 800f402:	4690      	mov	r8, r2
 800f404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f406:	b22d      	sxth	r5, r5
 800f408:	804d      	strh	r5, [r1, #2]
 800f40a:	9607      	str	r6, [sp, #28]
 800f40c:	9501      	str	r5, [sp, #4]
 800f40e:	4656      	mov	r6, sl
 800f410:	464d      	mov	r5, r9
 800f412:	4459      	add	r1, fp
 800f414:	46ba      	mov	sl, r7
 800f416:	4691      	mov	r9, r2
 800f418:	e7b2      	b.n	800f380 <biquad_q3_12_complex_direct_form_1.lto_priv.568+0x68>
 800f41a:	46c0      	nop			; (mov r8, r8)
 800f41c:	fffff000 	.word	0xfffff000

0800f420 <acc_confprogram_copy>:
 800f420:	2300      	movs	r3, #0
 800f422:	b530      	push	{r4, r5, lr}
 800f424:	0092      	lsls	r2, r2, #2
 800f426:	4293      	cmp	r3, r2
 800f428:	d100      	bne.n	800f42c <acc_confprogram_copy+0xc>
 800f42a:	bd30      	pop	{r4, r5, pc}
 800f42c:	58c4      	ldr	r4, [r0, r3]
 800f42e:	0c25      	lsrs	r5, r4, #16
 800f430:	52cd      	strh	r5, [r1, r3]
 800f432:	18cd      	adds	r5, r1, r3
 800f434:	806c      	strh	r4, [r5, #2]
 800f436:	3304      	adds	r3, #4
 800f438:	e7f5      	b.n	800f426 <acc_confprogram_copy+0x6>

0800f43a <acc_confprogram_modify_runif>:
 800f43a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f43c:	0055      	lsls	r5, r2, #1
 800f43e:	b085      	sub	sp, #20
 800f440:	1945      	adds	r5, r0, r5
 800f442:	000e      	movs	r6, r1
 800f444:	0028      	movs	r0, r5
 800f446:	a903      	add	r1, sp, #12
 800f448:	0014      	movs	r4, r2
 800f44a:	001f      	movs	r7, r3
 800f44c:	f7fc fb9c 	bl	800bb88 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800f450:	230f      	movs	r3, #15
 800f452:	9a03      	ldr	r2, [sp, #12]
 800f454:	439a      	bics	r2, r3
 800f456:	9202      	str	r2, [sp, #8]
 800f458:	0013      	movs	r3, r2
 800f45a:	4a11      	ldr	r2, [pc, #68]	; (800f4a0 <acc_confprogram_modify_runif+0x66>)
 800f45c:	0011      	movs	r1, r2
 800f45e:	314c      	adds	r1, #76	; 0x4c
 800f460:	7809      	ldrb	r1, [r1, #0]
 800f462:	2f00      	cmp	r7, #0
 800f464:	d011      	beq.n	800f48a <acc_confprogram_modify_runif+0x50>
 800f466:	4333      	orrs	r3, r6
 800f468:	9302      	str	r3, [sp, #8]
 800f46a:	2903      	cmp	r1, #3
 800f46c:	d906      	bls.n	800f47c <acc_confprogram_modify_runif+0x42>
 800f46e:	9600      	str	r6, [sp, #0]
 800f470:	6d16      	ldr	r6, [r2, #80]	; 0x50
 800f472:	0863      	lsrs	r3, r4, #1
 800f474:	4a0b      	ldr	r2, [pc, #44]	; (800f4a4 <acc_confprogram_modify_runif+0x6a>)
 800f476:	490c      	ldr	r1, [pc, #48]	; (800f4a8 <acc_confprogram_modify_runif+0x6e>)
 800f478:	2004      	movs	r0, #4
 800f47a:	47b0      	blx	r6
 800f47c:	2201      	movs	r2, #1
 800f47e:	0029      	movs	r1, r5
 800f480:	a802      	add	r0, sp, #8
 800f482:	f7ff ffcd 	bl	800f420 <acc_confprogram_copy>
 800f486:	b005      	add	sp, #20
 800f488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f48a:	2903      	cmp	r1, #3
 800f48c:	d9f6      	bls.n	800f47c <acc_confprogram_modify_runif+0x42>
 800f48e:	9600      	str	r6, [sp, #0]
 800f490:	0863      	lsrs	r3, r4, #1
 800f492:	4905      	ldr	r1, [pc, #20]	; (800f4a8 <acc_confprogram_modify_runif+0x6e>)
 800f494:	6d14      	ldr	r4, [r2, #80]	; 0x50
 800f496:	2004      	movs	r0, #4
 800f498:	4a04      	ldr	r2, [pc, #16]	; (800f4ac <acc_confprogram_modify_runif+0x72>)
 800f49a:	47a0      	blx	r4
 800f49c:	e7ee      	b.n	800f47c <acc_confprogram_modify_runif+0x42>
 800f49e:	46c0      	nop			; (mov r8, r8)
 800f4a0:	2000048c 	.word	0x2000048c
 800f4a4:	0801e496 	.word	0x0801e496
 800f4a8:	0801d637 	.word	0x0801d637
 800f4ac:	0801e61c 	.word	0x0801e61c

0800f4b0 <acc_confprogram_patch_offset>:
 800f4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4b2:	464e      	mov	r6, r9
 800f4b4:	4645      	mov	r5, r8
 800f4b6:	4657      	mov	r7, sl
 800f4b8:	46de      	mov	lr, fp
 800f4ba:	b5e0      	push	{r5, r6, r7, lr}
 800f4bc:	b089      	sub	sp, #36	; 0x24
 800f4be:	4698      	mov	r8, r3
 800f4c0:	ab12      	add	r3, sp, #72	; 0x48
 800f4c2:	881c      	ldrh	r4, [r3, #0]
 800f4c4:	4b48      	ldr	r3, [pc, #288]	; (800f5e8 <acc_confprogram_patch_offset+0x138>)
 800f4c6:	9204      	str	r2, [sp, #16]
 800f4c8:	4699      	mov	r9, r3
 800f4ca:	334c      	adds	r3, #76	; 0x4c
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	4682      	mov	sl, r0
 800f4d0:	000e      	movs	r6, r1
 800f4d2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800f4d4:	2b03      	cmp	r3, #3
 800f4d6:	d907      	bls.n	800f4e8 <acc_confprogram_patch_offset+0x38>
 800f4d8:	464f      	mov	r7, r9
 800f4da:	9500      	str	r5, [sp, #0]
 800f4dc:	0023      	movs	r3, r4
 800f4de:	4a43      	ldr	r2, [pc, #268]	; (800f5ec <acc_confprogram_patch_offset+0x13c>)
 800f4e0:	4943      	ldr	r1, [pc, #268]	; (800f5f0 <acc_confprogram_patch_offset+0x140>)
 800f4e2:	2004      	movs	r0, #4
 800f4e4:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 800f4e6:	47b8      	blx	r7
 800f4e8:	002b      	movs	r3, r5
 800f4ea:	1e5a      	subs	r2, r3, #1
 800f4ec:	4193      	sbcs	r3, r2
 800f4ee:	2700      	movs	r7, #0
 800f4f0:	00e4      	lsls	r4, r4, #3
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	44a0      	add	r8, r4
 800f4f6:	9305      	str	r3, [sp, #20]
 800f4f8:	4643      	mov	r3, r8
 800f4fa:	885b      	ldrh	r3, [r3, #2]
 800f4fc:	42bb      	cmp	r3, r7
 800f4fe:	d806      	bhi.n	800f50e <acc_confprogram_patch_offset+0x5e>
 800f500:	b009      	add	sp, #36	; 0x24
 800f502:	bc3c      	pop	{r2, r3, r4, r5}
 800f504:	4690      	mov	r8, r2
 800f506:	4699      	mov	r9, r3
 800f508:	46a2      	mov	sl, r4
 800f50a:	46ab      	mov	fp, r5
 800f50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f50e:	4643      	mov	r3, r8
 800f510:	2106      	movs	r1, #6
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	4379      	muls	r1, r7
 800f516:	469c      	mov	ip, r3
 800f518:	4461      	add	r1, ip
 800f51a:	7808      	ldrb	r0, [r1, #0]
 800f51c:	2800      	cmp	r0, #0
 800f51e:	d003      	beq.n	800f528 <acc_confprogram_patch_offset+0x78>
 800f520:	2802      	cmp	r0, #2
 800f522:	d81d      	bhi.n	800f560 <acc_confprogram_patch_offset+0xb0>
 800f524:	888a      	ldrh	r2, [r1, #4]
 800f526:	e000      	b.n	800f52a <acc_confprogram_patch_offset+0x7a>
 800f528:	884a      	ldrh	r2, [r1, #2]
 800f52a:	4b32      	ldr	r3, [pc, #200]	; (800f5f4 <acc_confprogram_patch_offset+0x144>)
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d01d      	beq.n	800f56c <acc_confprogram_patch_offset+0xbc>
 800f530:	0052      	lsls	r2, r2, #1
 800f532:	b292      	uxth	r2, r2
 800f534:	42b2      	cmp	r2, r6
 800f536:	d319      	bcc.n	800f56c <acc_confprogram_patch_offset+0xbc>
 800f538:	9b04      	ldr	r3, [sp, #16]
 800f53a:	18f3      	adds	r3, r6, r3
 800f53c:	429a      	cmp	r2, r3
 800f53e:	da15      	bge.n	800f56c <acc_confprogram_patch_offset+0xbc>
 800f540:	2801      	cmp	r0, #1
 800f542:	d049      	beq.n	800f5d8 <acc_confprogram_patch_offset+0x128>
 800f544:	2800      	cmp	r0, #0
 800f546:	d013      	beq.n	800f570 <acc_confprogram_patch_offset+0xc0>
 800f548:	2802      	cmp	r0, #2
 800f54a:	d10f      	bne.n	800f56c <acc_confprogram_patch_offset+0xbc>
 800f54c:	426b      	negs	r3, r5
 800f54e:	416b      	adcs	r3, r5
 800f550:	1b92      	subs	r2, r2, r6
 800f552:	b2db      	uxtb	r3, r3
 800f554:	b292      	uxth	r2, r2
 800f556:	8849      	ldrh	r1, [r1, #2]
 800f558:	4650      	mov	r0, sl
 800f55a:	f7ff ff6e 	bl	800f43a <acc_confprogram_modify_runif>
 800f55e:	e005      	b.n	800f56c <acc_confprogram_patch_offset+0xbc>
 800f560:	464b      	mov	r3, r9
 800f562:	4a25      	ldr	r2, [pc, #148]	; (800f5f8 <acc_confprogram_patch_offset+0x148>)
 800f564:	4922      	ldr	r1, [pc, #136]	; (800f5f0 <acc_confprogram_patch_offset+0x140>)
 800f566:	2000      	movs	r0, #0
 800f568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f56a:	4798      	blx	r3
 800f56c:	3701      	adds	r7, #1
 800f56e:	e7c3      	b.n	800f4f8 <acc_confprogram_patch_offset+0x48>
 800f570:	1b92      	subs	r2, r2, r6
 800f572:	b293      	uxth	r3, r2
 800f574:	790a      	ldrb	r2, [r1, #4]
 800f576:	9203      	str	r2, [sp, #12]
 800f578:	794a      	ldrb	r2, [r1, #5]
 800f57a:	4693      	mov	fp, r2
 800f57c:	2201      	movs	r2, #1
 800f57e:	4659      	mov	r1, fp
 800f580:	408a      	lsls	r2, r1
 800f582:	4295      	cmp	r5, r2
 800f584:	d30b      	bcc.n	800f59e <acc_confprogram_patch_offset+0xee>
 800f586:	3a01      	subs	r2, #1
 800f588:	9201      	str	r2, [sp, #4]
 800f58a:	464a      	mov	r2, r9
 800f58c:	9500      	str	r5, [sp, #0]
 800f58e:	6d14      	ldr	r4, [r2, #80]	; 0x50
 800f590:	4917      	ldr	r1, [pc, #92]	; (800f5f0 <acc_confprogram_patch_offset+0x140>)
 800f592:	4a1a      	ldr	r2, [pc, #104]	; (800f5fc <acc_confprogram_patch_offset+0x14c>)
 800f594:	47a0      	blx	r4
 800f596:	2139      	movs	r1, #57	; 0x39
 800f598:	4819      	ldr	r0, [pc, #100]	; (800f600 <acc_confprogram_patch_offset+0x150>)
 800f59a:	f7f5 fcf1 	bl	8004f80 <acc_assert_fail>
 800f59e:	005b      	lsls	r3, r3, #1
 800f5a0:	4453      	add	r3, sl
 800f5a2:	a906      	add	r1, sp, #24
 800f5a4:	0018      	movs	r0, r3
 800f5a6:	001c      	movs	r4, r3
 800f5a8:	f7fc faee 	bl	800bb88 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800f5ac:	465b      	mov	r3, fp
 800f5ae:	2220      	movs	r2, #32
 800f5b0:	1ad2      	subs	r2, r2, r3
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	425b      	negs	r3, r3
 800f5b6:	40d3      	lsrs	r3, r2
 800f5b8:	9a03      	ldr	r2, [sp, #12]
 800f5ba:	9903      	ldr	r1, [sp, #12]
 800f5bc:	4093      	lsls	r3, r2
 800f5be:	9a06      	ldr	r2, [sp, #24]
 800f5c0:	a807      	add	r0, sp, #28
 800f5c2:	439a      	bics	r2, r3
 800f5c4:	0013      	movs	r3, r2
 800f5c6:	002a      	movs	r2, r5
 800f5c8:	408a      	lsls	r2, r1
 800f5ca:	0021      	movs	r1, r4
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	9307      	str	r3, [sp, #28]
 800f5d2:	f7ff ff25 	bl	800f420 <acc_confprogram_copy>
 800f5d6:	e7c9      	b.n	800f56c <acc_confprogram_patch_offset+0xbc>
 800f5d8:	1b92      	subs	r2, r2, r6
 800f5da:	b292      	uxth	r2, r2
 800f5dc:	8849      	ldrh	r1, [r1, #2]
 800f5de:	9b05      	ldr	r3, [sp, #20]
 800f5e0:	4650      	mov	r0, sl
 800f5e2:	f7ff ff2a 	bl	800f43a <acc_confprogram_modify_runif>
 800f5e6:	e7c1      	b.n	800f56c <acc_confprogram_patch_offset+0xbc>
 800f5e8:	2000048c 	.word	0x2000048c
 800f5ec:	0801e563 	.word	0x0801e563
 800f5f0:	0801d637 	.word	0x0801d637
 800f5f4:	0000ffff 	.word	0x0000ffff
 800f5f8:	0801e64e 	.word	0x0801e64e
 800f5fc:	0801e67b 	.word	0x0801e67b
 800f600:	0801e5b9 	.word	0x0801e5b9

0800f604 <acc_diagnostic_log_data_u16>:
 800f604:	4770      	bx	lr

0800f606 <acc_diagnostic_log_scalar>:
 800f606:	4770      	bx	lr

0800f608 <acc_diagnostic_log_array>:
 800f608:	4770      	bx	lr

0800f60a <acc_diagnostic_log_set_parameter>:
 800f60a:	4770      	bx	lr

0800f60c <acc_diagnostic_log_declare_parameter>:
 800f60c:	4770      	bx	lr

0800f60e <acc_diagnostic_log_set_scope>:
 800f60e:	4770      	bx	lr

0800f610 <accumulator_mod.lto_priv.567>:
 800f610:	b510      	push	{r4, lr}
 800f612:	1c04      	adds	r4, r0, #0
 800f614:	f001 fe4c 	bl	80112b0 <__aeabi_f2iz>
 800f618:	f001 fe6a 	bl	80112f0 <__aeabi_i2f>
 800f61c:	1c01      	adds	r1, r0, #0
 800f61e:	1c20      	adds	r0, r4, #0
 800f620:	f001 f864 	bl	80106ec <__aeabi_fsub>
 800f624:	2100      	movs	r1, #0
 800f626:	1c04      	adds	r4, r0, #0
 800f628:	f001 fc44 	bl	8010eb4 <__aeabi_fcmpge>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	d10b      	bne.n	800f648 <accumulator_mod.lto_priv.567+0x38>
 800f630:	20fe      	movs	r0, #254	; 0xfe
 800f632:	0580      	lsls	r0, r0, #22
 800f634:	1c21      	adds	r1, r4, #0
 800f636:	f000 fc7b 	bl	800ff30 <__aeabi_fadd>
 800f63a:	219f      	movs	r1, #159	; 0x9f
 800f63c:	05c9      	lsls	r1, r1, #23
 800f63e:	f000 ff23 	bl	8010488 <__aeabi_fmul>
 800f642:	f001 fc61 	bl	8010f08 <__aeabi_f2uiz>
 800f646:	bd10      	pop	{r4, pc}
 800f648:	2000      	movs	r0, #0
 800f64a:	e7f3      	b.n	800f634 <accumulator_mod.lto_priv.567+0x24>

0800f64c <acc_alg_basic_saturation_check_u16>:
 800f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64e:	0005      	movs	r5, r0
 800f650:	000c      	movs	r4, r1
 800f652:	1c10      	adds	r0, r2, #0
 800f654:	4912      	ldr	r1, [pc, #72]	; (800f6a0 <acc_alg_basic_saturation_check_u16+0x54>)
 800f656:	1c17      	adds	r7, r2, #0
 800f658:	f000 fe04 	bl	8010264 <__aeabi_fdiv>
 800f65c:	4911      	ldr	r1, [pc, #68]	; (800f6a4 <acc_alg_basic_saturation_check_u16+0x58>)
 800f65e:	f000 ff13 	bl	8010488 <__aeabi_fmul>
 800f662:	f001 fc51 	bl	8010f08 <__aeabi_f2uiz>
 800f666:	1c39      	adds	r1, r7, #0
 800f668:	b286      	uxth	r6, r0
 800f66a:	480d      	ldr	r0, [pc, #52]	; (800f6a0 <acc_alg_basic_saturation_check_u16+0x54>)
 800f66c:	f001 f83e 	bl	80106ec <__aeabi_fsub>
 800f670:	490b      	ldr	r1, [pc, #44]	; (800f6a0 <acc_alg_basic_saturation_check_u16+0x54>)
 800f672:	f000 fdf7 	bl	8010264 <__aeabi_fdiv>
 800f676:	490b      	ldr	r1, [pc, #44]	; (800f6a4 <acc_alg_basic_saturation_check_u16+0x58>)
 800f678:	f000 ff06 	bl	8010488 <__aeabi_fmul>
 800f67c:	f001 fc44 	bl	8010f08 <__aeabi_f2uiz>
 800f680:	0864      	lsrs	r4, r4, #1
 800f682:	0064      	lsls	r4, r4, #1
 800f684:	b280      	uxth	r0, r0
 800f686:	192c      	adds	r4, r5, r4
 800f688:	42a5      	cmp	r5, r4
 800f68a:	d101      	bne.n	800f690 <acc_alg_basic_saturation_check_u16+0x44>
 800f68c:	2000      	movs	r0, #0
 800f68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f690:	882a      	ldrh	r2, [r5, #0]
 800f692:	4282      	cmp	r2, r0
 800f694:	d202      	bcs.n	800f69c <acc_alg_basic_saturation_check_u16+0x50>
 800f696:	3502      	adds	r5, #2
 800f698:	42b2      	cmp	r2, r6
 800f69a:	d8f5      	bhi.n	800f688 <acc_alg_basic_saturation_check_u16+0x3c>
 800f69c:	2001      	movs	r0, #1
 800f69e:	e7f6      	b.n	800f68e <acc_alg_basic_saturation_check_u16+0x42>
 800f6a0:	42c80000 	.word	0x42c80000
 800f6a4:	477fff00 	.word	0x477fff00

0800f6a8 <eval_even_poly_f32.lto_priv.570>:
 800f6a8:	b570      	push	{r4, r5, r6, lr}
 800f6aa:	0005      	movs	r5, r0
 800f6ac:	000c      	movs	r4, r1
 800f6ae:	1c10      	adds	r0, r2, #0
 800f6b0:	1c11      	adds	r1, r2, #0
 800f6b2:	f000 fee9 	bl	8010488 <__aeabi_fmul>
 800f6b6:	1c06      	adds	r6, r0, #0
 800f6b8:	2000      	movs	r0, #0
 800f6ba:	3c01      	subs	r4, #1
 800f6bc:	b2a4      	uxth	r4, r4
 800f6be:	00a4      	lsls	r4, r4, #2
 800f6c0:	192c      	adds	r4, r5, r4
 800f6c2:	6821      	ldr	r1, [r4, #0]
 800f6c4:	f000 fc34 	bl	800ff30 <__aeabi_fadd>
 800f6c8:	42a5      	cmp	r5, r4
 800f6ca:	d005      	beq.n	800f6d8 <eval_even_poly_f32.lto_priv.570+0x30>
 800f6cc:	1c01      	adds	r1, r0, #0
 800f6ce:	1c30      	adds	r0, r6, #0
 800f6d0:	f000 feda 	bl	8010488 <__aeabi_fmul>
 800f6d4:	3c04      	subs	r4, #4
 800f6d6:	e7f4      	b.n	800f6c2 <eval_even_poly_f32.lto_priv.570+0x1a>
 800f6d8:	bd70      	pop	{r4, r5, r6, pc}

0800f6da <quarter_pi_cos_sin_f32.lto_priv.569>:
 800f6da:	b570      	push	{r4, r5, r6, lr}
 800f6dc:	000d      	movs	r5, r1
 800f6de:	490d      	ldr	r1, [pc, #52]	; (800f714 <quarter_pi_cos_sin_f32.lto_priv.569+0x3a>)
 800f6e0:	1c04      	adds	r4, r0, #0
 800f6e2:	f001 fbc9 	bl	8010e78 <__aeabi_fcmplt>
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d112      	bne.n	800f710 <quarter_pi_cos_sin_f32.lto_priv.569+0x36>
 800f6ea:	2d00      	cmp	r5, #0
 800f6ec:	d006      	beq.n	800f6fc <quarter_pi_cos_sin_f32.lto_priv.569+0x22>
 800f6ee:	480a      	ldr	r0, [pc, #40]	; (800f718 <quarter_pi_cos_sin_f32.lto_priv.569+0x3e>)
 800f6f0:	1c22      	adds	r2, r4, #0
 800f6f2:	2105      	movs	r1, #5
 800f6f4:	3074      	adds	r0, #116	; 0x74
 800f6f6:	f7ff ffd7 	bl	800f6a8 <eval_even_poly_f32.lto_priv.570>
 800f6fa:	bd70      	pop	{r4, r5, r6, pc}
 800f6fc:	4807      	ldr	r0, [pc, #28]	; (800f71c <quarter_pi_cos_sin_f32.lto_priv.569+0x42>)
 800f6fe:	1c22      	adds	r2, r4, #0
 800f700:	2104      	movs	r1, #4
 800f702:	3008      	adds	r0, #8
 800f704:	f7ff ffd0 	bl	800f6a8 <eval_even_poly_f32.lto_priv.570>
 800f708:	1c21      	adds	r1, r4, #0
 800f70a:	f000 febd 	bl	8010488 <__aeabi_fmul>
 800f70e:	e7f4      	b.n	800f6fa <quarter_pi_cos_sin_f32.lto_priv.569+0x20>
 800f710:	4803      	ldr	r0, [pc, #12]	; (800f720 <quarter_pi_cos_sin_f32.lto_priv.569+0x46>)
 800f712:	e7f2      	b.n	800f6fa <quarter_pi_cos_sin_f32.lto_priv.569+0x20>
 800f714:	bf490fdb 	.word	0xbf490fdb
 800f718:	0801bd9c 	.word	0x0801bd9c
 800f71c:	0801be1c 	.word	0x0801be1c
 800f720:	7fc00000 	.word	0x7fc00000

0800f724 <acc_alg_basic_math_q3_12_sin>:
 800f724:	0002      	movs	r2, r0
 800f726:	0003      	movs	r3, r0
 800f728:	0041      	lsls	r1, r0, #1
 800f72a:	d500      	bpl.n	800f72e <acc_alg_basic_math_q3_12_sin+0xa>
 800f72c:	43c3      	mvns	r3, r0
 800f72e:	2180      	movs	r1, #128	; 0x80
 800f730:	0389      	lsls	r1, r1, #14
 800f732:	468c      	mov	ip, r1
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	089b      	lsrs	r3, r3, #2
 800f738:	4463      	add	r3, ip
 800f73a:	0d9b      	lsrs	r3, r3, #22
 800f73c:	4903      	ldr	r1, [pc, #12]	; (800f74c <acc_alg_basic_math_q3_12_sin+0x28>)
 800f73e:	005b      	lsls	r3, r3, #1
 800f740:	5e58      	ldrsh	r0, [r3, r1]
 800f742:	2a00      	cmp	r2, #0
 800f744:	da01      	bge.n	800f74a <acc_alg_basic_math_q3_12_sin+0x26>
 800f746:	4240      	negs	r0, r0
 800f748:	b200      	sxth	r0, r0
 800f74a:	4770      	bx	lr
 800f74c:	0801be7c 	.word	0x0801be7c

0800f750 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800f750:	b203      	sxth	r3, r0
 800f752:	17da      	asrs	r2, r3, #31
 800f754:	189b      	adds	r3, r3, r2
 800f756:	1400      	asrs	r0, r0, #16
 800f758:	4053      	eors	r3, r2
 800f75a:	17c2      	asrs	r2, r0, #31
 800f75c:	1880      	adds	r0, r0, r2
 800f75e:	4050      	eors	r0, r2
 800f760:	b21b      	sxth	r3, r3
 800f762:	b202      	sxth	r2, r0
 800f764:	b082      	sub	sp, #8
 800f766:	4293      	cmp	r3, r2
 800f768:	db02      	blt.n	800f770 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x20>
 800f76a:	0011      	movs	r1, r2
 800f76c:	001a      	movs	r2, r3
 800f76e:	000b      	movs	r3, r1
 800f770:	480c      	ldr	r0, [pc, #48]	; (800f7a4 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x54>)
 800f772:	4350      	muls	r0, r2
 800f774:	17c1      	asrs	r1, r0, #31
 800f776:	0509      	lsls	r1, r1, #20
 800f778:	0d09      	lsrs	r1, r1, #20
 800f77a:	1809      	adds	r1, r1, r0
 800f77c:	1309      	asrs	r1, r1, #12
 800f77e:	b209      	sxth	r1, r1
 800f780:	428b      	cmp	r3, r1
 800f782:	da08      	bge.n	800f796 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x46>
 800f784:	4808      	ldr	r0, [pc, #32]	; (800f7a8 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x58>)
 800f786:	4350      	muls	r0, r2
 800f788:	4a08      	ldr	r2, [pc, #32]	; (800f7ac <acc_alg_basic_math_q3_12_complex_scalar_abs+0x5c>)
 800f78a:	4353      	muls	r3, r2
 800f78c:	18c0      	adds	r0, r0, r3
 800f78e:	1300      	asrs	r0, r0, #12
 800f790:	b200      	sxth	r0, r0
 800f792:	b002      	add	sp, #8
 800f794:	4770      	bx	lr
 800f796:	4806      	ldr	r0, [pc, #24]	; (800f7b0 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x60>)
 800f798:	4350      	muls	r0, r2
 800f79a:	4a06      	ldr	r2, [pc, #24]	; (800f7b4 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x64>)
 800f79c:	4353      	muls	r3, r2
 800f79e:	18c0      	adds	r0, r0, r3
 800f7a0:	e7f5      	b.n	800f78e <acc_alg_basic_math_q3_12_complex_scalar_abs+0x3e>
 800f7a2:	46c0      	nop			; (mov r8, r8)
 800f7a4:	000006a1 	.word	0x000006a1
 800f7a8:	00000fd7 	.word	0x00000fd7
 800f7ac:	00000327 	.word	0x00000327
 800f7b0:	00000d71 	.word	0x00000d71
 800f7b4:	000008fa 	.word	0x000008fa

0800f7b8 <internal_reg_read.lto_priv.566>:
 800f7b8:	23c0      	movs	r3, #192	; 0xc0
 800f7ba:	b513      	push	{r0, r1, r4, lr}
 800f7bc:	019b      	lsls	r3, r3, #6
 800f7be:	4319      	orrs	r1, r3
 800f7c0:	466b      	mov	r3, sp
 800f7c2:	0014      	movs	r4, r2
 800f7c4:	8019      	strh	r1, [r3, #0]
 800f7c6:	466a      	mov	r2, sp
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	4669      	mov	r1, sp
 800f7cc:	8053      	strh	r3, [r2, #2]
 800f7ce:	8093      	strh	r3, [r2, #4]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	2203      	movs	r2, #3
 800f7d4:	f7f6 fe6c 	bl	80064b0 <acc_rss_integration_sensor_device_transfer>
 800f7d8:	466b      	mov	r3, sp
 800f7da:	889b      	ldrh	r3, [r3, #4]
 800f7dc:	8023      	strh	r3, [r4, #0]
 800f7de:	bd13      	pop	{r0, r1, r4, pc}

0800f7e0 <read_reg_array>:
 800f7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e2:	0007      	movs	r7, r0
 800f7e4:	000d      	movs	r5, r1
 800f7e6:	001e      	movs	r6, r3
 800f7e8:	3a01      	subs	r2, #1
 800f7ea:	b294      	uxth	r4, r2
 800f7ec:	0064      	lsls	r4, r4, #1
 800f7ee:	1c8a      	adds	r2, r1, #2
 800f7f0:	18a4      	adds	r4, r4, r2
 800f7f2:	8829      	ldrh	r1, [r5, #0]
 800f7f4:	0032      	movs	r2, r6
 800f7f6:	0038      	movs	r0, r7
 800f7f8:	3502      	adds	r5, #2
 800f7fa:	f7ff ffdd 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800f7fe:	3602      	adds	r6, #2
 800f800:	42a5      	cmp	r5, r4
 800f802:	d1f6      	bne.n	800f7f2 <read_reg_array+0x12>
 800f804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f806 <acc_sensor_diagnostics_r2_sensor_status>:
 800f806:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f808:	4657      	mov	r7, sl
 800f80a:	464e      	mov	r6, r9
 800f80c:	46de      	mov	lr, fp
 800f80e:	4645      	mov	r5, r8
 800f810:	b5e0      	push	{r5, r6, r7, lr}
 800f812:	4f1c      	ldr	r7, [pc, #112]	; (800f884 <acc_sensor_diagnostics_r2_sensor_status+0x7e>)
 800f814:	b097      	sub	sp, #92	; 0x5c
 800f816:	003b      	movs	r3, r7
 800f818:	334c      	adds	r3, #76	; 0x4c
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	4681      	mov	r9, r0
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d904      	bls.n	800f82c <acc_sensor_diagnostics_r2_sensor_status+0x26>
 800f822:	4a19      	ldr	r2, [pc, #100]	; (800f888 <acc_sensor_diagnostics_r2_sensor_status+0x82>)
 800f824:	4919      	ldr	r1, [pc, #100]	; (800f88c <acc_sensor_diagnostics_r2_sensor_status+0x86>)
 800f826:	2002      	movs	r0, #2
 800f828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f82a:	4798      	blx	r3
 800f82c:	2201      	movs	r2, #1
 800f82e:	21b2      	movs	r1, #178	; 0xb2
 800f830:	4648      	mov	r0, r9
 800f832:	f7fc ff3b 	bl	800c6ac <acc_sensor_reg_write>
 800f836:	2300      	movs	r3, #0
 800f838:	ac0e      	add	r4, sp, #56	; 0x38
 800f83a:	8023      	strh	r3, [r4, #0]
 800f83c:	3311      	adds	r3, #17
 800f83e:	4698      	mov	r8, r3
 800f840:	2380      	movs	r3, #128	; 0x80
 800f842:	00db      	lsls	r3, r3, #3
 800f844:	469b      	mov	fp, r3
 800f846:	234c      	movs	r3, #76	; 0x4c
 800f848:	469a      	mov	sl, r3
 800f84a:	2564      	movs	r5, #100	; 0x64
 800f84c:	44ba      	add	sl, r7
 800f84e:	0022      	movs	r2, r4
 800f850:	4641      	mov	r1, r8
 800f852:	4648      	mov	r0, r9
 800f854:	f7ff ffb0 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800f858:	465a      	mov	r2, fp
 800f85a:	8823      	ldrh	r3, [r4, #0]
 800f85c:	4213      	tst	r3, r2
 800f85e:	d019      	beq.n	800f894 <acc_sensor_diagnostics_r2_sensor_status+0x8e>
 800f860:	4652      	mov	r2, sl
 800f862:	7812      	ldrb	r2, [r2, #0]
 800f864:	2a01      	cmp	r2, #1
 800f866:	d908      	bls.n	800f87a <acc_sensor_diagnostics_r2_sensor_status+0x74>
 800f868:	059b      	lsls	r3, r3, #22
 800f86a:	0d9b      	lsrs	r3, r3, #22
 800f86c:	9300      	str	r3, [sp, #0]
 800f86e:	4a08      	ldr	r2, [pc, #32]	; (800f890 <acc_sensor_diagnostics_r2_sensor_status+0x8a>)
 800f870:	464b      	mov	r3, r9
 800f872:	4906      	ldr	r1, [pc, #24]	; (800f88c <acc_sensor_diagnostics_r2_sensor_status+0x86>)
 800f874:	2002      	movs	r0, #2
 800f876:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800f878:	47b0      	blx	r6
 800f87a:	3d01      	subs	r5, #1
 800f87c:	b2ad      	uxth	r5, r5
 800f87e:	2d00      	cmp	r5, #0
 800f880:	d1e5      	bne.n	800f84e <acc_sensor_diagnostics_r2_sensor_status+0x48>
 800f882:	e015      	b.n	800f8b0 <acc_sensor_diagnostics_r2_sensor_status+0xaa>
 800f884:	2000048c 	.word	0x2000048c
 800f888:	0801e6b2 	.word	0x0801e6b2
 800f88c:	0801e6f2 	.word	0x0801e6f2
 800f890:	0801e705 	.word	0x0801e705
 800f894:	003a      	movs	r2, r7
 800f896:	324c      	adds	r2, #76	; 0x4c
 800f898:	7812      	ldrb	r2, [r2, #0]
 800f89a:	2a01      	cmp	r2, #1
 800f89c:	d908      	bls.n	800f8b0 <acc_sensor_diagnostics_r2_sensor_status+0xaa>
 800f89e:	059b      	lsls	r3, r3, #22
 800f8a0:	0d9b      	lsrs	r3, r3, #22
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	4ac9      	ldr	r2, [pc, #804]	; (800fbcc <acc_sensor_diagnostics_r2_sensor_status+0x3c6>)
 800f8a6:	464b      	mov	r3, r9
 800f8a8:	49c9      	ldr	r1, [pc, #804]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800f8aa:	2002      	movs	r0, #2
 800f8ac:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800f8ae:	47a8      	blx	r5
 800f8b0:	2500      	movs	r5, #0
 800f8b2:	ab02      	add	r3, sp, #8
 800f8b4:	0029      	movs	r1, r5
 800f8b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800f8b8:	4648      	mov	r0, r9
 800f8ba:	849d      	strh	r5, [r3, #36]	; 0x24
 800f8bc:	f7ff ff7c 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800f8c0:	ab02      	add	r3, sp, #8
 800f8c2:	aa02      	add	r2, sp, #8
 800f8c4:	4694      	mov	ip, r2
 800f8c6:	84dd      	strh	r5, [r3, #38]	; 0x26
 800f8c8:	2326      	movs	r3, #38	; 0x26
 800f8ca:	4463      	add	r3, ip
 800f8cc:	001a      	movs	r2, r3
 800f8ce:	212a      	movs	r1, #42	; 0x2a
 800f8d0:	4648      	mov	r0, r9
 800f8d2:	f7ff ff71 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800f8d6:	ab02      	add	r3, sp, #8
 800f8d8:	aa0c      	add	r2, sp, #48	; 0x30
 800f8da:	2128      	movs	r1, #40	; 0x28
 800f8dc:	4648      	mov	r0, r9
 800f8de:	851d      	strh	r5, [r3, #40]	; 0x28
 800f8e0:	f7ff ff6a 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800f8e4:	4dbb      	ldr	r5, [pc, #748]	; (800fbd4 <acc_sensor_diagnostics_r2_sensor_status+0x3ce>)
 800f8e6:	0023      	movs	r3, r4
 800f8e8:	0029      	movs	r1, r5
 800f8ea:	2210      	movs	r2, #16
 800f8ec:	3118      	adds	r1, #24
 800f8ee:	4648      	mov	r0, r9
 800f8f0:	f7ff ff76 	bl	800f7e0 <read_reg_array>
 800f8f4:	003b      	movs	r3, r7
 800f8f6:	334c      	adds	r3, #76	; 0x4c
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d915      	bls.n	800f92a <acc_sensor_diagnostics_r2_sensor_status+0x124>
 800f8fe:	89e3      	ldrh	r3, [r4, #14]
 800f900:	4ab5      	ldr	r2, [pc, #724]	; (800fbd8 <acc_sensor_diagnostics_r2_sensor_status+0x3d2>)
 800f902:	9307      	str	r3, [sp, #28]
 800f904:	89a3      	ldrh	r3, [r4, #12]
 800f906:	49b2      	ldr	r1, [pc, #712]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800f908:	9306      	str	r3, [sp, #24]
 800f90a:	8963      	ldrh	r3, [r4, #10]
 800f90c:	2002      	movs	r0, #2
 800f90e:	9305      	str	r3, [sp, #20]
 800f910:	8923      	ldrh	r3, [r4, #8]
 800f912:	9304      	str	r3, [sp, #16]
 800f914:	88e3      	ldrh	r3, [r4, #6]
 800f916:	9303      	str	r3, [sp, #12]
 800f918:	88a3      	ldrh	r3, [r4, #4]
 800f91a:	9302      	str	r3, [sp, #8]
 800f91c:	8863      	ldrh	r3, [r4, #2]
 800f91e:	9301      	str	r3, [sp, #4]
 800f920:	8823      	ldrh	r3, [r4, #0]
 800f922:	9300      	str	r3, [sp, #0]
 800f924:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800f926:	464b      	mov	r3, r9
 800f928:	47b0      	blx	r6
 800f92a:	003b      	movs	r3, r7
 800f92c:	334c      	adds	r3, #76	; 0x4c
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	2b01      	cmp	r3, #1
 800f932:	d915      	bls.n	800f960 <acc_sensor_diagnostics_r2_sensor_status+0x15a>
 800f934:	8be3      	ldrh	r3, [r4, #30]
 800f936:	4aa9      	ldr	r2, [pc, #676]	; (800fbdc <acc_sensor_diagnostics_r2_sensor_status+0x3d6>)
 800f938:	9307      	str	r3, [sp, #28]
 800f93a:	8ba3      	ldrh	r3, [r4, #28]
 800f93c:	49a4      	ldr	r1, [pc, #656]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800f93e:	9306      	str	r3, [sp, #24]
 800f940:	8b63      	ldrh	r3, [r4, #26]
 800f942:	2002      	movs	r0, #2
 800f944:	9305      	str	r3, [sp, #20]
 800f946:	8b23      	ldrh	r3, [r4, #24]
 800f948:	9304      	str	r3, [sp, #16]
 800f94a:	8ae3      	ldrh	r3, [r4, #22]
 800f94c:	9303      	str	r3, [sp, #12]
 800f94e:	8aa3      	ldrh	r3, [r4, #20]
 800f950:	9302      	str	r3, [sp, #8]
 800f952:	8a63      	ldrh	r3, [r4, #18]
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	8a23      	ldrh	r3, [r4, #16]
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800f95c:	464b      	mov	r3, r9
 800f95e:	47b0      	blx	r6
 800f960:	0029      	movs	r1, r5
 800f962:	0023      	movs	r3, r4
 800f964:	3138      	adds	r1, #56	; 0x38
 800f966:	2204      	movs	r2, #4
 800f968:	4648      	mov	r0, r9
 800f96a:	f7ff ff39 	bl	800f7e0 <read_reg_array>
 800f96e:	003b      	movs	r3, r7
 800f970:	334c      	adds	r3, #76	; 0x4c
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	2b01      	cmp	r3, #1
 800f976:	d90d      	bls.n	800f994 <acc_sensor_diagnostics_r2_sensor_status+0x18e>
 800f978:	88e3      	ldrh	r3, [r4, #6]
 800f97a:	4a99      	ldr	r2, [pc, #612]	; (800fbe0 <acc_sensor_diagnostics_r2_sensor_status+0x3da>)
 800f97c:	9303      	str	r3, [sp, #12]
 800f97e:	88a3      	ldrh	r3, [r4, #4]
 800f980:	4993      	ldr	r1, [pc, #588]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800f982:	9302      	str	r3, [sp, #8]
 800f984:	8863      	ldrh	r3, [r4, #2]
 800f986:	2002      	movs	r0, #2
 800f988:	9301      	str	r3, [sp, #4]
 800f98a:	8823      	ldrh	r3, [r4, #0]
 800f98c:	9300      	str	r3, [sp, #0]
 800f98e:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800f990:	464b      	mov	r3, r9
 800f992:	47b0      	blx	r6
 800f994:	ab02      	add	r3, sp, #8
 800f996:	469c      	mov	ip, r3
 800f998:	222a      	movs	r2, #42	; 0x2a
 800f99a:	2600      	movs	r6, #0
 800f99c:	4462      	add	r2, ip
 800f99e:	2153      	movs	r1, #83	; 0x53
 800f9a0:	4648      	mov	r0, r9
 800f9a2:	8016      	strh	r6, [r2, #0]
 800f9a4:	f7ff ff08 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800f9a8:	0022      	movs	r2, r4
 800f9aa:	2140      	movs	r1, #64	; 0x40
 800f9ac:	4648      	mov	r0, r9
 800f9ae:	8026      	strh	r6, [r4, #0]
 800f9b0:	f7ff ff02 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800f9b4:	003b      	movs	r3, r7
 800f9b6:	334c      	adds	r3, #76	; 0x4c
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	d907      	bls.n	800f9ce <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800f9be:	8823      	ldrh	r3, [r4, #0]
 800f9c0:	4a88      	ldr	r2, [pc, #544]	; (800fbe4 <acc_sensor_diagnostics_r2_sensor_status+0x3de>)
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	4982      	ldr	r1, [pc, #520]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800f9c6:	464b      	mov	r3, r9
 800f9c8:	2002      	movs	r0, #2
 800f9ca:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800f9cc:	47b0      	blx	r6
 800f9ce:	003b      	movs	r3, r7
 800f9d0:	334c      	adds	r3, #76	; 0x4c
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d90c      	bls.n	800f9f2 <acc_sensor_diagnostics_r2_sensor_status+0x1ec>
 800f9d8:	2240      	movs	r2, #64	; 0x40
 800f9da:	8823      	ldrh	r3, [r4, #0]
 800f9dc:	497c      	ldr	r1, [pc, #496]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800f9de:	401a      	ands	r2, r3
 800f9e0:	9201      	str	r2, [sp, #4]
 800f9e2:	2280      	movs	r2, #128	; 0x80
 800f9e4:	4013      	ands	r3, r2
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	4a7f      	ldr	r2, [pc, #508]	; (800fbe8 <acc_sensor_diagnostics_r2_sensor_status+0x3e2>)
 800f9ea:	464b      	mov	r3, r9
 800f9ec:	2002      	movs	r0, #2
 800f9ee:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800f9f0:	47b0      	blx	r6
 800f9f2:	003b      	movs	r3, r7
 800f9f4:	334c      	adds	r3, #76	; 0x4c
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d90c      	bls.n	800fa16 <acc_sensor_diagnostics_r2_sensor_status+0x210>
 800f9fc:	2210      	movs	r2, #16
 800f9fe:	8823      	ldrh	r3, [r4, #0]
 800fa00:	4973      	ldr	r1, [pc, #460]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fa02:	401a      	ands	r2, r3
 800fa04:	9201      	str	r2, [sp, #4]
 800fa06:	2220      	movs	r2, #32
 800fa08:	4013      	ands	r3, r2
 800fa0a:	9300      	str	r3, [sp, #0]
 800fa0c:	4a77      	ldr	r2, [pc, #476]	; (800fbec <acc_sensor_diagnostics_r2_sensor_status+0x3e6>)
 800fa0e:	464b      	mov	r3, r9
 800fa10:	2002      	movs	r0, #2
 800fa12:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800fa14:	47b0      	blx	r6
 800fa16:	003b      	movs	r3, r7
 800fa18:	334c      	adds	r3, #76	; 0x4c
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d90c      	bls.n	800fa3a <acc_sensor_diagnostics_r2_sensor_status+0x234>
 800fa20:	2204      	movs	r2, #4
 800fa22:	8823      	ldrh	r3, [r4, #0]
 800fa24:	496a      	ldr	r1, [pc, #424]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fa26:	401a      	ands	r2, r3
 800fa28:	9201      	str	r2, [sp, #4]
 800fa2a:	2208      	movs	r2, #8
 800fa2c:	4013      	ands	r3, r2
 800fa2e:	9300      	str	r3, [sp, #0]
 800fa30:	4a6f      	ldr	r2, [pc, #444]	; (800fbf0 <acc_sensor_diagnostics_r2_sensor_status+0x3ea>)
 800fa32:	464b      	mov	r3, r9
 800fa34:	2002      	movs	r0, #2
 800fa36:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800fa38:	47b0      	blx	r6
 800fa3a:	0029      	movs	r1, r5
 800fa3c:	0023      	movs	r3, r4
 800fa3e:	3140      	adds	r1, #64	; 0x40
 800fa40:	2210      	movs	r2, #16
 800fa42:	4648      	mov	r0, r9
 800fa44:	f7ff fecc 	bl	800f7e0 <read_reg_array>
 800fa48:	003b      	movs	r3, r7
 800fa4a:	334c      	adds	r3, #76	; 0x4c
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	2500      	movs	r5, #0
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d908      	bls.n	800fa66 <acc_sensor_diagnostics_r2_sensor_status+0x260>
 800fa54:	8823      	ldrh	r3, [r4, #0]
 800fa56:	4a67      	ldr	r2, [pc, #412]	; (800fbf4 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800fa58:	9300      	str	r3, [sp, #0]
 800fa5a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800fa5c:	464b      	mov	r3, r9
 800fa5e:	495c      	ldr	r1, [pc, #368]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fa60:	2002      	movs	r0, #2
 800fa62:	47a8      	blx	r5
 800fa64:	2501      	movs	r5, #1
 800fa66:	003b      	movs	r3, r7
 800fa68:	334c      	adds	r3, #76	; 0x4c
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	d90b      	bls.n	800fa88 <acc_sensor_diagnostics_r2_sensor_status+0x282>
 800fa70:	1c6e      	adds	r6, r5, #1
 800fa72:	006d      	lsls	r5, r5, #1
 800fa74:	5b63      	ldrh	r3, [r4, r5]
 800fa76:	b2f6      	uxtb	r6, r6
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800fa7c:	464b      	mov	r3, r9
 800fa7e:	4a5e      	ldr	r2, [pc, #376]	; (800fbf8 <acc_sensor_diagnostics_r2_sensor_status+0x3f2>)
 800fa80:	4953      	ldr	r1, [pc, #332]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fa82:	2002      	movs	r0, #2
 800fa84:	47a8      	blx	r5
 800fa86:	0035      	movs	r5, r6
 800fa88:	2301      	movs	r3, #1
 800fa8a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa8c:	334b      	adds	r3, #75	; 0x4b
 800fa8e:	4698      	mov	r8, r3
 800fa90:	4b5a      	ldr	r3, [pc, #360]	; (800fbfc <acc_sensor_diagnostics_r2_sensor_status+0x3f6>)
 800fa92:	44b8      	add	r8, r7
 800fa94:	469b      	mov	fp, r3
 800fa96:	4b4e      	ldr	r3, [pc, #312]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fa98:	469a      	mov	sl, r3
 800fa9a:	4643      	mov	r3, r8
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d90e      	bls.n	800fac0 <acc_sensor_diagnostics_r2_sensor_status+0x2ba>
 800faa2:	1c6b      	adds	r3, r5, #1
 800faa4:	005b      	lsls	r3, r3, #1
 800faa6:	5ae3      	ldrh	r3, [r4, r3]
 800faa8:	465a      	mov	r2, fp
 800faaa:	9302      	str	r3, [sp, #8]
 800faac:	006b      	lsls	r3, r5, #1
 800faae:	5ae3      	ldrh	r3, [r4, r3]
 800fab0:	4651      	mov	r1, sl
 800fab2:	9301      	str	r3, [sp, #4]
 800fab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fab6:	2002      	movs	r0, #2
 800fab8:	9300      	str	r3, [sp, #0]
 800faba:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800fabc:	464b      	mov	r3, r9
 800fabe:	47b0      	blx	r6
 800fac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fac2:	3502      	adds	r5, #2
 800fac4:	3301      	adds	r3, #1
 800fac6:	b2ed      	uxtb	r5, r5
 800fac8:	9309      	str	r3, [sp, #36]	; 0x24
 800faca:	2b08      	cmp	r3, #8
 800facc:	d1e5      	bne.n	800fa9a <acc_sensor_diagnostics_r2_sensor_status+0x294>
 800face:	2300      	movs	r3, #0
 800fad0:	469a      	mov	sl, r3
 800fad2:	ae0d      	add	r6, sp, #52	; 0x34
 800fad4:	0032      	movs	r2, r6
 800fad6:	219d      	movs	r1, #157	; 0x9d
 800fad8:	4648      	mov	r0, r9
 800fada:	8033      	strh	r3, [r6, #0]
 800fadc:	f7ff fe6c 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800fae0:	ab02      	add	r3, sp, #8
 800fae2:	469c      	mov	ip, r3
 800fae4:	252e      	movs	r5, #46	; 0x2e
 800fae6:	4653      	mov	r3, sl
 800fae8:	4465      	add	r5, ip
 800faea:	002a      	movs	r2, r5
 800faec:	2199      	movs	r1, #153	; 0x99
 800faee:	4648      	mov	r0, r9
 800faf0:	802b      	strh	r3, [r5, #0]
 800faf2:	9509      	str	r5, [sp, #36]	; 0x24
 800faf4:	f7ff fe60 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800faf8:	4653      	mov	r3, sl
 800fafa:	0022      	movs	r2, r4
 800fafc:	2196      	movs	r1, #150	; 0x96
 800fafe:	4648      	mov	r0, r9
 800fb00:	8023      	strh	r3, [r4, #0]
 800fb02:	f7ff fe59 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800fb06:	4652      	mov	r2, sl
 800fb08:	21b2      	movs	r1, #178	; 0xb2
 800fb0a:	4648      	mov	r0, r9
 800fb0c:	f7fc fdce 	bl	800c6ac <acc_sensor_reg_write>
 800fb10:	003b      	movs	r3, r7
 800fb12:	334c      	adds	r3, #76	; 0x4c
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d90e      	bls.n	800fb38 <acc_sensor_diagnostics_r2_sensor_status+0x332>
 800fb1a:	ab02      	add	r3, sp, #8
 800fb1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb1e:	4a38      	ldr	r2, [pc, #224]	; (800fc00 <acc_sensor_diagnostics_r2_sensor_status+0x3fa>)
 800fb20:	9302      	str	r3, [sp, #8]
 800fb22:	ab02      	add	r3, sp, #8
 800fb24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fb26:	492a      	ldr	r1, [pc, #168]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fb28:	9301      	str	r3, [sp, #4]
 800fb2a:	ab02      	add	r3, sp, #8
 800fb2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fb2e:	2002      	movs	r0, #2
 800fb30:	9300      	str	r3, [sp, #0]
 800fb32:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800fb34:	464b      	mov	r3, r9
 800fb36:	47a8      	blx	r5
 800fb38:	003b      	movs	r3, r7
 800fb3a:	334c      	adds	r3, #76	; 0x4c
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d90b      	bls.n	800fb5a <acc_sensor_diagnostics_r2_sensor_status+0x354>
 800fb42:	aa02      	add	r2, sp, #8
 800fb44:	4694      	mov	ip, r2
 800fb46:	232a      	movs	r3, #42	; 0x2a
 800fb48:	4463      	add	r3, ip
 800fb4a:	881b      	ldrh	r3, [r3, #0]
 800fb4c:	4a2d      	ldr	r2, [pc, #180]	; (800fc04 <acc_sensor_diagnostics_r2_sensor_status+0x3fe>)
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	491f      	ldr	r1, [pc, #124]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fb52:	464b      	mov	r3, r9
 800fb54:	2002      	movs	r0, #2
 800fb56:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800fb58:	47a8      	blx	r5
 800fb5a:	003b      	movs	r3, r7
 800fb5c:	334c      	adds	r3, #76	; 0x4c
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d907      	bls.n	800fb74 <acc_sensor_diagnostics_r2_sensor_status+0x36e>
 800fb64:	8833      	ldrh	r3, [r6, #0]
 800fb66:	4a28      	ldr	r2, [pc, #160]	; (800fc08 <acc_sensor_diagnostics_r2_sensor_status+0x402>)
 800fb68:	9300      	str	r3, [sp, #0]
 800fb6a:	4919      	ldr	r1, [pc, #100]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fb6c:	464b      	mov	r3, r9
 800fb6e:	2002      	movs	r0, #2
 800fb70:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800fb72:	47a8      	blx	r5
 800fb74:	003b      	movs	r3, r7
 800fb76:	334c      	adds	r3, #76	; 0x4c
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	2b01      	cmp	r3, #1
 800fb7c:	d908      	bls.n	800fb90 <acc_sensor_diagnostics_r2_sensor_status+0x38a>
 800fb7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb80:	4a22      	ldr	r2, [pc, #136]	; (800fc0c <acc_sensor_diagnostics_r2_sensor_status+0x406>)
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	4912      	ldr	r1, [pc, #72]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	2002      	movs	r0, #2
 800fb8a:	464b      	mov	r3, r9
 800fb8c:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800fb8e:	47a8      	blx	r5
 800fb90:	003b      	movs	r3, r7
 800fb92:	334c      	adds	r3, #76	; 0x4c
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	d907      	bls.n	800fbaa <acc_sensor_diagnostics_r2_sensor_status+0x3a4>
 800fb9a:	8823      	ldrh	r3, [r4, #0]
 800fb9c:	4a1c      	ldr	r2, [pc, #112]	; (800fc10 <acc_sensor_diagnostics_r2_sensor_status+0x40a>)
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	490b      	ldr	r1, [pc, #44]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fba2:	464b      	mov	r3, r9
 800fba4:	2002      	movs	r0, #2
 800fba6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800fba8:	47a0      	blx	r4
 800fbaa:	003b      	movs	r3, r7
 800fbac:	334c      	adds	r3, #76	; 0x4c
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d904      	bls.n	800fbbe <acc_sensor_diagnostics_r2_sensor_status+0x3b8>
 800fbb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbb6:	4a17      	ldr	r2, [pc, #92]	; (800fc14 <acc_sensor_diagnostics_r2_sensor_status+0x40e>)
 800fbb8:	4905      	ldr	r1, [pc, #20]	; (800fbd0 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fbba:	2002      	movs	r0, #2
 800fbbc:	4798      	blx	r3
 800fbbe:	b017      	add	sp, #92	; 0x5c
 800fbc0:	bc3c      	pop	{r2, r3, r4, r5}
 800fbc2:	4690      	mov	r8, r2
 800fbc4:	4699      	mov	r9, r3
 800fbc6:	46a2      	mov	sl, r4
 800fbc8:	46ab      	mov	fp, r5
 800fbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbcc:	0801e722 	.word	0x0801e722
 800fbd0:	0801e6f2 	.word	0x0801e6f2
 800fbd4:	0801be1c 	.word	0x0801be1c
 800fbd8:	0801e73f 	.word	0x0801e73f
 800fbdc:	0801e786 	.word	0x0801e786
 800fbe0:	0801e7cf 	.word	0x0801e7cf
 800fbe4:	0801e800 	.word	0x0801e800
 800fbe8:	0801e81d 	.word	0x0801e81d
 800fbec:	0801e849 	.word	0x0801e849
 800fbf0:	0801e87a 	.word	0x0801e87a
 800fbf4:	0801e8aa 	.word	0x0801e8aa
 800fbf8:	0801e8d1 	.word	0x0801e8d1
 800fbfc:	0801e8ef 	.word	0x0801e8ef
 800fc00:	0801e917 	.word	0x0801e917
 800fc04:	0801e968 	.word	0x0801e968
 800fc08:	0801e98b 	.word	0x0801e98b
 800fc0c:	0801e9a7 	.word	0x0801e9a7
 800fc10:	0801e9bd 	.word	0x0801e9bd
 800fc14:	0801e9d7 	.word	0x0801e9d7

0800fc18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>:
 800fc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc1a:	464e      	mov	r6, r9
 800fc1c:	46de      	mov	lr, fp
 800fc1e:	4645      	mov	r5, r8
 800fc20:	4657      	mov	r7, sl
 800fc22:	0004      	movs	r4, r0
 800fc24:	b5e0      	push	{r5, r6, r7, lr}
 800fc26:	468b      	mov	fp, r1
 800fc28:	4691      	mov	r9, r2
 800fc2a:	2665      	movs	r6, #101	; 0x65
 800fc2c:	4d47      	ldr	r5, [pc, #284]	; (800fd4c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x134>)
 800fc2e:	b085      	sub	sp, #20
 800fc30:	4659      	mov	r1, fp
 800fc32:	0020      	movs	r0, r4
 800fc34:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800fc36:	4798      	blx	r3
 800fc38:	4680      	mov	r8, r0
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	d10f      	bne.n	800fc5e <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x46>
 800fc3e:	6d2d      	ldr	r5, [r5, #80]	; 0x50
 800fc40:	0023      	movs	r3, r4
 800fc42:	4a43      	ldr	r2, [pc, #268]	; (800fd50 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x138>)
 800fc44:	4943      	ldr	r1, [pc, #268]	; (800fd54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800fc46:	47a8      	blx	r5
 800fc48:	0020      	movs	r0, r4
 800fc4a:	f7ff fddc 	bl	800f806 <acc_sensor_diagnostics_r2_sensor_status>
 800fc4e:	4640      	mov	r0, r8
 800fc50:	b005      	add	sp, #20
 800fc52:	bc3c      	pop	{r2, r3, r4, r5}
 800fc54:	4690      	mov	r8, r2
 800fc56:	4699      	mov	r9, r3
 800fc58:	46a2      	mov	sl, r4
 800fc5a:	46ab      	mov	fp, r5
 800fc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc5e:	270e      	movs	r7, #14
 800fc60:	2300      	movs	r3, #0
 800fc62:	446f      	add	r7, sp
 800fc64:	003a      	movs	r2, r7
 800fc66:	212a      	movs	r1, #42	; 0x2a
 800fc68:	0020      	movs	r0, r4
 800fc6a:	469a      	mov	sl, r3
 800fc6c:	803b      	strh	r3, [r7, #0]
 800fc6e:	f7ff fda3 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800fc72:	2240      	movs	r2, #64	; 0x40
 800fc74:	883b      	ldrh	r3, [r7, #0]
 800fc76:	4213      	tst	r3, r2
 800fc78:	d04f      	beq.n	800fd1a <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x102>
 800fc7a:	003a      	movs	r2, r7
 800fc7c:	2128      	movs	r1, #40	; 0x28
 800fc7e:	0020      	movs	r0, r4
 800fc80:	f7ff fd9a 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800fc84:	4649      	mov	r1, r9
 800fc86:	883a      	ldrh	r2, [r7, #0]
 800fc88:	b2d3      	uxtb	r3, r2
 800fc8a:	700b      	strb	r3, [r1, #0]
 800fc8c:	804a      	strh	r2, [r1, #2]
 800fc8e:	2b0b      	cmp	r3, #11
 800fc90:	d839      	bhi.n	800fd06 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xee>
 800fc92:	0018      	movs	r0, r3
 800fc94:	f000 ff0c 	bl	8010ab0 <__gnu_thumb1_case_sqi>
 800fc98:	dbdb1806 	.word	0xdbdb1806
 800fc9c:	dbdbdbdb 	.word	0xdbdbdbdb
 800fca0:	dbdbdbdb 	.word	0xdbdbdbdb
 800fca4:	0023      	movs	r3, r4
 800fca6:	4a2c      	ldr	r2, [pc, #176]	; (800fd58 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x140>)
 800fca8:	492a      	ldr	r1, [pc, #168]	; (800fd54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800fcaa:	2000      	movs	r0, #0
 800fcac:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 800fcae:	47b0      	blx	r6
 800fcb0:	0020      	movs	r0, r4
 800fcb2:	f7ff fda8 	bl	800f806 <acc_sensor_diagnostics_r2_sensor_status>
 800fcb6:	0023      	movs	r3, r4
 800fcb8:	6d2d      	ldr	r5, [r5, #80]	; 0x50
 800fcba:	4a28      	ldr	r2, [pc, #160]	; (800fd5c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x144>)
 800fcbc:	4925      	ldr	r1, [pc, #148]	; (800fd54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800fcbe:	2000      	movs	r0, #0
 800fcc0:	47a8      	blx	r5
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	4698      	mov	r8, r3
 800fcc6:	e7c2      	b.n	800fc4e <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x36>
 800fcc8:	0a11      	lsrs	r1, r2, #8
 800fcca:	2910      	cmp	r1, #16
 800fccc:	d804      	bhi.n	800fcd8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xc0>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	408b      	lsls	r3, r1
 800fcd2:	4923      	ldr	r1, [pc, #140]	; (800fd60 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x148>)
 800fcd4:	420b      	tst	r3, r1
 800fcd6:	d105      	bne.n	800fce4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xcc>
 800fcd8:	2384      	movs	r3, #132	; 0x84
 800fcda:	b2d2      	uxtb	r2, r2
 800fcdc:	019b      	lsls	r3, r3, #6
 800fcde:	431a      	orrs	r2, r3
 800fce0:	464b      	mov	r3, r9
 800fce2:	805a      	strh	r2, [r3, #2]
 800fce4:	464b      	mov	r3, r9
 800fce6:	885a      	ldrh	r2, [r3, #2]
 800fce8:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 800fcea:	0a12      	lsrs	r2, r2, #8
 800fcec:	3a01      	subs	r2, #1
 800fcee:	b2d2      	uxtb	r2, r2
 800fcf0:	4b1c      	ldr	r3, [pc, #112]	; (800fd64 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x14c>)
 800fcf2:	2a20      	cmp	r2, #32
 800fcf4:	d802      	bhi.n	800fcfc <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xe4>
 800fcf6:	4b1c      	ldr	r3, [pc, #112]	; (800fd68 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x150>)
 800fcf8:	0092      	lsls	r2, r2, #2
 800fcfa:	58d3      	ldr	r3, [r2, r3]
 800fcfc:	4a1b      	ldr	r2, [pc, #108]	; (800fd6c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x154>)
 800fcfe:	4915      	ldr	r1, [pc, #84]	; (800fd54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800fd00:	2000      	movs	r0, #0
 800fd02:	47b0      	blx	r6
 800fd04:	e7d4      	b.n	800fcb0 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x98>
 800fd06:	9400      	str	r4, [sp, #0]
 800fd08:	4a19      	ldr	r2, [pc, #100]	; (800fd70 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x158>)
 800fd0a:	4912      	ldr	r1, [pc, #72]	; (800fd54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800fd0c:	4650      	mov	r0, sl
 800fd0e:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 800fd10:	47b0      	blx	r6
 800fd12:	464b      	mov	r3, r9
 800fd14:	2200      	movs	r2, #0
 800fd16:	701a      	strb	r2, [r3, #0]
 800fd18:	e7ca      	b.n	800fcb0 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x98>
 800fd1a:	002b      	movs	r3, r5
 800fd1c:	334c      	adds	r3, #76	; 0x4c
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d005      	beq.n	800fd30 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x118>
 800fd24:	0023      	movs	r3, r4
 800fd26:	4a13      	ldr	r2, [pc, #76]	; (800fd74 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x15c>)
 800fd28:	490a      	ldr	r1, [pc, #40]	; (800fd54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800fd2a:	2001      	movs	r0, #1
 800fd2c:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800fd2e:	47b8      	blx	r7
 800fd30:	3e01      	subs	r6, #1
 800fd32:	b2b6      	uxth	r6, r6
 800fd34:	2e00      	cmp	r6, #0
 800fd36:	d000      	beq.n	800fd3a <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x122>
 800fd38:	e77a      	b.n	800fc30 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x18>
 800fd3a:	9400      	str	r4, [sp, #0]
 800fd3c:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800fd3e:	2364      	movs	r3, #100	; 0x64
 800fd40:	4a0d      	ldr	r2, [pc, #52]	; (800fd78 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x160>)
 800fd42:	4904      	ldr	r1, [pc, #16]	; (800fd54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800fd44:	0030      	movs	r0, r6
 800fd46:	47a0      	blx	r4
 800fd48:	46b0      	mov	r8, r6
 800fd4a:	e780      	b.n	800fc4e <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x36>
 800fd4c:	2000048c 	.word	0x2000048c
 800fd50:	0801ea25 	.word	0x0801ea25
 800fd54:	0801c85a 	.word	0x0801c85a
 800fd58:	0801ea4d 	.word	0x0801ea4d
 800fd5c:	0801eabf 	.word	0x0801eabf
 800fd60:	00010016 	.word	0x00010016
 800fd64:	0801ea17 	.word	0x0801ea17
 800fd68:	0801c088 	.word	0x0801c088
 800fd6c:	0801ea70 	.word	0x0801ea70
 800fd70:	0801ea90 	.word	0x0801ea90
 800fd74:	0801eae7 	.word	0x0801eae7
 800fd78:	0801eb08 	.word	0x0801eb08

0800fd7c <acc_sensor_protocol_r2_stop.constprop.25>:
 800fd7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd7e:	0005      	movs	r5, r0
 800fd80:	f7f5 fb7e 	bl	8005480 <acc_sensor_protocol_r2_is_sensor_running>
 800fd84:	1e04      	subs	r4, r0, #0
 800fd86:	d109      	bne.n	800fd9c <acc_sensor_protocol_r2_stop.constprop.25+0x20>
 800fd88:	4b1a      	ldr	r3, [pc, #104]	; (800fdf4 <acc_sensor_protocol_r2_stop.constprop.25+0x78>)
 800fd8a:	4a1b      	ldr	r2, [pc, #108]	; (800fdf8 <acc_sensor_protocol_r2_stop.constprop.25+0x7c>)
 800fd8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd8e:	491b      	ldr	r1, [pc, #108]	; (800fdfc <acc_sensor_protocol_r2_stop.constprop.25+0x80>)
 800fd90:	4798      	blx	r3
 800fd92:	0028      	movs	r0, r5
 800fd94:	f7ff fd37 	bl	800f806 <acc_sensor_diagnostics_r2_sensor_status>
 800fd98:	0020      	movs	r0, r4
 800fd9a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800fd9c:	4b18      	ldr	r3, [pc, #96]	; (800fe00 <acc_sensor_protocol_r2_stop.constprop.25+0x84>)
 800fd9e:	ae01      	add	r6, sp, #4
 800fda0:	9301      	str	r3, [sp, #4]
 800fda2:	2202      	movs	r2, #2
 800fda4:	2300      	movs	r3, #0
 800fda6:	0031      	movs	r1, r6
 800fda8:	0028      	movs	r0, r5
 800fdaa:	f7f6 fb81 	bl	80064b0 <acc_rss_integration_sensor_device_transfer>
 800fdae:	0028      	movs	r0, r5
 800fdb0:	f7f2 fc7e 	bl	80026b0 <acc_sensor_protocol_r2_ack_event>
 800fdb4:	1e04      	subs	r4, r0, #0
 800fdb6:	d0ef      	beq.n	800fd98 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800fdb8:	21fa      	movs	r1, #250	; 0xfa
 800fdba:	0032      	movs	r2, r6
 800fdbc:	00c9      	lsls	r1, r1, #3
 800fdbe:	0028      	movs	r0, r5
 800fdc0:	f7ff ff2a 	bl	800fc18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	d101      	bne.n	800fdcc <acc_sensor_protocol_r2_stop.constprop.25+0x50>
 800fdc8:	2400      	movs	r4, #0
 800fdca:	e7e5      	b.n	800fd98 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800fdcc:	0028      	movs	r0, r5
 800fdce:	f7f2 fc6f 	bl	80026b0 <acc_sensor_protocol_r2_ack_event>
 800fdd2:	1e04      	subs	r4, r0, #0
 800fdd4:	d0f8      	beq.n	800fdc8 <acc_sensor_protocol_r2_stop.constprop.25+0x4c>
 800fdd6:	7833      	ldrb	r3, [r6, #0]
 800fdd8:	2b02      	cmp	r3, #2
 800fdda:	d0dd      	beq.n	800fd98 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800fddc:	4a05      	ldr	r2, [pc, #20]	; (800fdf4 <acc_sensor_protocol_r2_stop.constprop.25+0x78>)
 800fdde:	8873      	ldrh	r3, [r6, #2]
 800fde0:	6d14      	ldr	r4, [r2, #80]	; 0x50
 800fde2:	4906      	ldr	r1, [pc, #24]	; (800fdfc <acc_sensor_protocol_r2_stop.constprop.25+0x80>)
 800fde4:	4a07      	ldr	r2, [pc, #28]	; (800fe04 <acc_sensor_protocol_r2_stop.constprop.25+0x88>)
 800fde6:	2000      	movs	r0, #0
 800fde8:	47a0      	blx	r4
 800fdea:	0028      	movs	r0, r5
 800fdec:	f7ff fd0b 	bl	800f806 <acc_sensor_diagnostics_r2_sensor_status>
 800fdf0:	e7ea      	b.n	800fdc8 <acc_sensor_protocol_r2_stop.constprop.25+0x4c>
 800fdf2:	46c0      	nop			; (mov r8, r8)
 800fdf4:	2000048c 	.word	0x2000048c
 800fdf8:	0801eb41 	.word	0x0801eb41
 800fdfc:	0801c85a 	.word	0x0801c85a
 800fe00:	00011074 	.word	0x00011074
 800fe04:	0801eb73 	.word	0x0801eb73

0800fe08 <acc_sensor_protocol_r2_prepare_load.constprop.21>:
 800fe08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe0a:	46ce      	mov	lr, r9
 800fe0c:	4647      	mov	r7, r8
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b083      	sub	sp, #12
 800fe12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fe14:	0852      	lsrs	r2, r2, #1
 800fe16:	4e37      	ldr	r6, [pc, #220]	; (800fef4 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xec>)
 800fe18:	602a      	str	r2, [r5, #0]
 800fe1a:	0004      	movs	r4, r0
 800fe1c:	6a30      	ldr	r0, [r6, #32]
 800fe1e:	0840      	lsrs	r0, r0, #1
 800fe20:	4290      	cmp	r0, r2
 800fe22:	d900      	bls.n	800fe26 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x1e>
 800fe24:	0010      	movs	r0, r2
 800fe26:	2701      	movs	r7, #1
 800fe28:	3102      	adds	r1, #2
 800fe2a:	6019      	str	r1, [r3, #0]
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	3801      	subs	r0, #1
 800fe30:	43b8      	bics	r0, r7
 800fe32:	6028      	str	r0, [r5, #0]
 800fe34:	ad01      	add	r5, sp, #4
 800fe36:	002a      	movs	r2, r5
 800fe38:	212a      	movs	r1, #42	; 0x2a
 800fe3a:	0020      	movs	r0, r4
 800fe3c:	802b      	strh	r3, [r5, #0]
 800fe3e:	f7ff fcbb 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800fe42:	882b      	ldrh	r3, [r5, #0]
 800fe44:	065b      	lsls	r3, r3, #25
 800fe46:	d50d      	bpl.n	800fe64 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x5c>
 800fe48:	0033      	movs	r3, r6
 800fe4a:	334c      	adds	r3, #76	; 0x4c
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d005      	beq.n	800fe5e <acc_sensor_protocol_r2_prepare_load.constprop.21+0x56>
 800fe52:	0038      	movs	r0, r7
 800fe54:	0023      	movs	r3, r4
 800fe56:	4a28      	ldr	r2, [pc, #160]	; (800fef8 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf0>)
 800fe58:	4928      	ldr	r1, [pc, #160]	; (800fefc <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf4>)
 800fe5a:	6d37      	ldr	r7, [r6, #80]	; 0x50
 800fe5c:	47b8      	blx	r7
 800fe5e:	0020      	movs	r0, r4
 800fe60:	f7ff fcd1 	bl	800f806 <acc_sensor_diagnostics_r2_sensor_status>
 800fe64:	0020      	movs	r0, r4
 800fe66:	f7f5 fb0b 	bl	8005480 <acc_sensor_protocol_r2_is_sensor_running>
 800fe6a:	4680      	mov	r8, r0
 800fe6c:	2800      	cmp	r0, #0
 800fe6e:	d00e      	beq.n	800fe8e <acc_sensor_protocol_r2_prepare_load.constprop.21+0x86>
 800fe70:	0023      	movs	r3, r4
 800fe72:	4a23      	ldr	r2, [pc, #140]	; (800ff00 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf8>)
 800fe74:	4921      	ldr	r1, [pc, #132]	; (800fefc <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf4>)
 800fe76:	2000      	movs	r0, #0
 800fe78:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800fe7a:	47a8      	blx	r5
 800fe7c:	0020      	movs	r0, r4
 800fe7e:	f7ff fcc2 	bl	800f806 <acc_sensor_diagnostics_r2_sensor_status>
 800fe82:	2000      	movs	r0, #0
 800fe84:	b003      	add	sp, #12
 800fe86:	bc0c      	pop	{r2, r3}
 800fe88:	4690      	mov	r8, r2
 800fe8a:	4699      	mov	r9, r3
 800fe8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe8e:	466b      	mov	r3, sp
 800fe90:	1c9e      	adds	r6, r3, #2
 800fe92:	2702      	movs	r7, #2
 800fe94:	0032      	movs	r2, r6
 800fe96:	2180      	movs	r1, #128	; 0x80
 800fe98:	0020      	movs	r0, r4
 800fe9a:	f7ff fc8d 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800fe9e:	2284      	movs	r2, #132	; 0x84
 800fea0:	8833      	ldrh	r3, [r6, #0]
 800fea2:	0152      	lsls	r2, r2, #5
 800fea4:	43bb      	bics	r3, r7
 800fea6:	433b      	orrs	r3, r7
 800fea8:	4691      	mov	r9, r2
 800feaa:	802a      	strh	r2, [r5, #0]
 800feac:	806b      	strh	r3, [r5, #2]
 800feae:	003a      	movs	r2, r7
 800feb0:	4643      	mov	r3, r8
 800feb2:	0029      	movs	r1, r5
 800feb4:	0020      	movs	r0, r4
 800feb6:	f7f6 fafb 	bl	80064b0 <acc_rss_integration_sensor_device_transfer>
 800feba:	0032      	movs	r2, r6
 800febc:	2180      	movs	r1, #128	; 0x80
 800febe:	0020      	movs	r0, r4
 800fec0:	f7ff fc7a 	bl	800f7b8 <internal_reg_read.lto_priv.566>
 800fec4:	2280      	movs	r2, #128	; 0x80
 800fec6:	8833      	ldrh	r3, [r6, #0]
 800fec8:	0029      	movs	r1, r5
 800feca:	4393      	bics	r3, r2
 800fecc:	464a      	mov	r2, r9
 800fece:	806b      	strh	r3, [r5, #2]
 800fed0:	802a      	strh	r2, [r5, #0]
 800fed2:	4643      	mov	r3, r8
 800fed4:	003a      	movs	r2, r7
 800fed6:	0020      	movs	r0, r4
 800fed8:	f7f6 faea 	bl	80064b0 <acc_rss_integration_sensor_device_transfer>
 800fedc:	2201      	movs	r2, #1
 800fede:	2105      	movs	r1, #5
 800fee0:	0020      	movs	r0, r4
 800fee2:	f7fc fbe3 	bl	800c6ac <acc_sensor_reg_write>
 800fee6:	0020      	movs	r0, r4
 800fee8:	2203      	movs	r2, #3
 800feea:	217a      	movs	r1, #122	; 0x7a
 800feec:	f7fc fbde 	bl	800c6ac <acc_sensor_reg_write>
 800fef0:	2001      	movs	r0, #1
 800fef2:	e7c7      	b.n	800fe84 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x7c>
 800fef4:	2000048c 	.word	0x2000048c
 800fef8:	0801eb93 	.word	0x0801eb93
 800fefc:	0801c85a 	.word	0x0801c85a
 800ff00:	0801ebbf 	.word	0x0801ebbf

0800ff04 <acc_cpd_linear_sweep_get_info>:
 800ff04:	30ad      	adds	r0, #173	; 0xad
 800ff06:	7803      	ldrb	r3, [r0, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d00a      	beq.n	800ff22 <acc_cpd_linear_sweep_get_info+0x1e>
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	2303      	movs	r3, #3
 800ff10:	604a      	str	r2, [r1, #4]
 800ff12:	608a      	str	r2, [r1, #8]
 800ff14:	3201      	adds	r2, #1
 800ff16:	60ca      	str	r2, [r1, #12]
 800ff18:	3201      	adds	r2, #1
 800ff1a:	600b      	str	r3, [r1, #0]
 800ff1c:	610a      	str	r2, [r1, #16]
 800ff1e:	614b      	str	r3, [r1, #20]
 800ff20:	4770      	bx	lr
 800ff22:	600b      	str	r3, [r1, #0]
 800ff24:	604b      	str	r3, [r1, #4]
 800ff26:	608b      	str	r3, [r1, #8]
 800ff28:	60cb      	str	r3, [r1, #12]
 800ff2a:	610b      	str	r3, [r1, #16]
 800ff2c:	614b      	str	r3, [r1, #20]
 800ff2e:	e7f7      	b.n	800ff20 <acc_cpd_linear_sweep_get_info+0x1c>

0800ff30 <__aeabi_fadd>:
 800ff30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff32:	4647      	mov	r7, r8
 800ff34:	46ce      	mov	lr, r9
 800ff36:	0243      	lsls	r3, r0, #9
 800ff38:	0a5b      	lsrs	r3, r3, #9
 800ff3a:	0044      	lsls	r4, r0, #1
 800ff3c:	0fc2      	lsrs	r2, r0, #31
 800ff3e:	469c      	mov	ip, r3
 800ff40:	0048      	lsls	r0, r1, #1
 800ff42:	00dd      	lsls	r5, r3, #3
 800ff44:	024b      	lsls	r3, r1, #9
 800ff46:	0e24      	lsrs	r4, r4, #24
 800ff48:	0a5b      	lsrs	r3, r3, #9
 800ff4a:	0e00      	lsrs	r0, r0, #24
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	4698      	mov	r8, r3
 800ff50:	0026      	movs	r6, r4
 800ff52:	4691      	mov	r9, r2
 800ff54:	0fc9      	lsrs	r1, r1, #31
 800ff56:	00db      	lsls	r3, r3, #3
 800ff58:	1a27      	subs	r7, r4, r0
 800ff5a:	428a      	cmp	r2, r1
 800ff5c:	d029      	beq.n	800ffb2 <__aeabi_fadd+0x82>
 800ff5e:	2f00      	cmp	r7, #0
 800ff60:	dd15      	ble.n	800ff8e <__aeabi_fadd+0x5e>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	d14a      	bne.n	800fffc <__aeabi_fadd+0xcc>
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d000      	beq.n	800ff6c <__aeabi_fadd+0x3c>
 800ff6a:	e095      	b.n	8010098 <__aeabi_fadd+0x168>
 800ff6c:	08ed      	lsrs	r5, r5, #3
 800ff6e:	2cff      	cmp	r4, #255	; 0xff
 800ff70:	d100      	bne.n	800ff74 <__aeabi_fadd+0x44>
 800ff72:	e088      	b.n	8010086 <__aeabi_fadd+0x156>
 800ff74:	026b      	lsls	r3, r5, #9
 800ff76:	0a5b      	lsrs	r3, r3, #9
 800ff78:	b2e6      	uxtb	r6, r4
 800ff7a:	025b      	lsls	r3, r3, #9
 800ff7c:	05f6      	lsls	r6, r6, #23
 800ff7e:	0a58      	lsrs	r0, r3, #9
 800ff80:	4330      	orrs	r0, r6
 800ff82:	07d2      	lsls	r2, r2, #31
 800ff84:	4310      	orrs	r0, r2
 800ff86:	bc0c      	pop	{r2, r3}
 800ff88:	4690      	mov	r8, r2
 800ff8a:	4699      	mov	r9, r3
 800ff8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff8e:	2f00      	cmp	r7, #0
 800ff90:	d000      	beq.n	800ff94 <__aeabi_fadd+0x64>
 800ff92:	e087      	b.n	80100a4 <__aeabi_fadd+0x174>
 800ff94:	1c60      	adds	r0, r4, #1
 800ff96:	b2c0      	uxtb	r0, r0
 800ff98:	2801      	cmp	r0, #1
 800ff9a:	dc00      	bgt.n	800ff9e <__aeabi_fadd+0x6e>
 800ff9c:	e0b6      	b.n	801010c <__aeabi_fadd+0x1dc>
 800ff9e:	1aee      	subs	r6, r5, r3
 800ffa0:	0172      	lsls	r2, r6, #5
 800ffa2:	d500      	bpl.n	800ffa6 <__aeabi_fadd+0x76>
 800ffa4:	e0c5      	b.n	8010132 <__aeabi_fadd+0x202>
 800ffa6:	2e00      	cmp	r6, #0
 800ffa8:	d13d      	bne.n	8010026 <__aeabi_fadd+0xf6>
 800ffaa:	2200      	movs	r2, #0
 800ffac:	2600      	movs	r6, #0
 800ffae:	2300      	movs	r3, #0
 800ffb0:	e7e3      	b.n	800ff7a <__aeabi_fadd+0x4a>
 800ffb2:	2f00      	cmp	r7, #0
 800ffb4:	dc00      	bgt.n	800ffb8 <__aeabi_fadd+0x88>
 800ffb6:	e096      	b.n	80100e6 <__aeabi_fadd+0x1b6>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	d05d      	beq.n	8010078 <__aeabi_fadd+0x148>
 800ffbc:	2cff      	cmp	r4, #255	; 0xff
 800ffbe:	d060      	beq.n	8010082 <__aeabi_fadd+0x152>
 800ffc0:	2280      	movs	r2, #128	; 0x80
 800ffc2:	04d2      	lsls	r2, r2, #19
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	2f1b      	cmp	r7, #27
 800ffc8:	dd00      	ble.n	800ffcc <__aeabi_fadd+0x9c>
 800ffca:	e0ec      	b.n	80101a6 <__aeabi_fadd+0x276>
 800ffcc:	2220      	movs	r2, #32
 800ffce:	1bd2      	subs	r2, r2, r7
 800ffd0:	0018      	movs	r0, r3
 800ffd2:	4093      	lsls	r3, r2
 800ffd4:	40f8      	lsrs	r0, r7
 800ffd6:	1e5a      	subs	r2, r3, #1
 800ffd8:	4193      	sbcs	r3, r2
 800ffda:	4303      	orrs	r3, r0
 800ffdc:	18ed      	adds	r5, r5, r3
 800ffde:	016b      	lsls	r3, r5, #5
 800ffe0:	d57b      	bpl.n	80100da <__aeabi_fadd+0x1aa>
 800ffe2:	3401      	adds	r4, #1
 800ffe4:	2cff      	cmp	r4, #255	; 0xff
 800ffe6:	d100      	bne.n	800ffea <__aeabi_fadd+0xba>
 800ffe8:	e0b7      	b.n	801015a <__aeabi_fadd+0x22a>
 800ffea:	2201      	movs	r2, #1
 800ffec:	2607      	movs	r6, #7
 800ffee:	402a      	ands	r2, r5
 800fff0:	086b      	lsrs	r3, r5, #1
 800fff2:	4d9a      	ldr	r5, [pc, #616]	; (801025c <__aeabi_fadd+0x32c>)
 800fff4:	401d      	ands	r5, r3
 800fff6:	4315      	orrs	r5, r2
 800fff8:	402e      	ands	r6, r5
 800fffa:	e029      	b.n	8010050 <__aeabi_fadd+0x120>
 800fffc:	2cff      	cmp	r4, #255	; 0xff
 800fffe:	d0b5      	beq.n	800ff6c <__aeabi_fadd+0x3c>
 8010000:	2280      	movs	r2, #128	; 0x80
 8010002:	04d2      	lsls	r2, r2, #19
 8010004:	4313      	orrs	r3, r2
 8010006:	2f1b      	cmp	r7, #27
 8010008:	dd00      	ble.n	801000c <__aeabi_fadd+0xdc>
 801000a:	e0b2      	b.n	8010172 <__aeabi_fadd+0x242>
 801000c:	2220      	movs	r2, #32
 801000e:	1bd2      	subs	r2, r2, r7
 8010010:	0019      	movs	r1, r3
 8010012:	4093      	lsls	r3, r2
 8010014:	40f9      	lsrs	r1, r7
 8010016:	1e5a      	subs	r2, r3, #1
 8010018:	4193      	sbcs	r3, r2
 801001a:	430b      	orrs	r3, r1
 801001c:	1aed      	subs	r5, r5, r3
 801001e:	016b      	lsls	r3, r5, #5
 8010020:	d55b      	bpl.n	80100da <__aeabi_fadd+0x1aa>
 8010022:	01ad      	lsls	r5, r5, #6
 8010024:	09ae      	lsrs	r6, r5, #6
 8010026:	0030      	movs	r0, r6
 8010028:	f000 fd24 	bl	8010a74 <__clzsi2>
 801002c:	3805      	subs	r0, #5
 801002e:	4086      	lsls	r6, r0
 8010030:	4284      	cmp	r4, r0
 8010032:	dc65      	bgt.n	8010100 <__aeabi_fadd+0x1d0>
 8010034:	1b04      	subs	r4, r0, r4
 8010036:	0033      	movs	r3, r6
 8010038:	2020      	movs	r0, #32
 801003a:	3401      	adds	r4, #1
 801003c:	40e3      	lsrs	r3, r4
 801003e:	1b04      	subs	r4, r0, r4
 8010040:	40a6      	lsls	r6, r4
 8010042:	1e75      	subs	r5, r6, #1
 8010044:	41ae      	sbcs	r6, r5
 8010046:	4333      	orrs	r3, r6
 8010048:	2607      	movs	r6, #7
 801004a:	001d      	movs	r5, r3
 801004c:	2400      	movs	r4, #0
 801004e:	401e      	ands	r6, r3
 8010050:	2201      	movs	r2, #1
 8010052:	464b      	mov	r3, r9
 8010054:	401a      	ands	r2, r3
 8010056:	2e00      	cmp	r6, #0
 8010058:	d004      	beq.n	8010064 <__aeabi_fadd+0x134>
 801005a:	230f      	movs	r3, #15
 801005c:	402b      	ands	r3, r5
 801005e:	2b04      	cmp	r3, #4
 8010060:	d000      	beq.n	8010064 <__aeabi_fadd+0x134>
 8010062:	3504      	adds	r5, #4
 8010064:	016b      	lsls	r3, r5, #5
 8010066:	d400      	bmi.n	801006a <__aeabi_fadd+0x13a>
 8010068:	e780      	b.n	800ff6c <__aeabi_fadd+0x3c>
 801006a:	3401      	adds	r4, #1
 801006c:	b2e6      	uxtb	r6, r4
 801006e:	2cff      	cmp	r4, #255	; 0xff
 8010070:	d12f      	bne.n	80100d2 <__aeabi_fadd+0x1a2>
 8010072:	26ff      	movs	r6, #255	; 0xff
 8010074:	2300      	movs	r3, #0
 8010076:	e780      	b.n	800ff7a <__aeabi_fadd+0x4a>
 8010078:	2b00      	cmp	r3, #0
 801007a:	d152      	bne.n	8010122 <__aeabi_fadd+0x1f2>
 801007c:	2cff      	cmp	r4, #255	; 0xff
 801007e:	d000      	beq.n	8010082 <__aeabi_fadd+0x152>
 8010080:	e774      	b.n	800ff6c <__aeabi_fadd+0x3c>
 8010082:	000a      	movs	r2, r1
 8010084:	08ed      	lsrs	r5, r5, #3
 8010086:	2d00      	cmp	r5, #0
 8010088:	d0f3      	beq.n	8010072 <__aeabi_fadd+0x142>
 801008a:	2380      	movs	r3, #128	; 0x80
 801008c:	03db      	lsls	r3, r3, #15
 801008e:	432b      	orrs	r3, r5
 8010090:	025b      	lsls	r3, r3, #9
 8010092:	0a5b      	lsrs	r3, r3, #9
 8010094:	26ff      	movs	r6, #255	; 0xff
 8010096:	e770      	b.n	800ff7a <__aeabi_fadd+0x4a>
 8010098:	3f01      	subs	r7, #1
 801009a:	2f00      	cmp	r7, #0
 801009c:	d0be      	beq.n	801001c <__aeabi_fadd+0xec>
 801009e:	2cff      	cmp	r4, #255	; 0xff
 80100a0:	d1b1      	bne.n	8010006 <__aeabi_fadd+0xd6>
 80100a2:	e763      	b.n	800ff6c <__aeabi_fadd+0x3c>
 80100a4:	2c00      	cmp	r4, #0
 80100a6:	d047      	beq.n	8010138 <__aeabi_fadd+0x208>
 80100a8:	28ff      	cmp	r0, #255	; 0xff
 80100aa:	d069      	beq.n	8010180 <__aeabi_fadd+0x250>
 80100ac:	2480      	movs	r4, #128	; 0x80
 80100ae:	04e4      	lsls	r4, r4, #19
 80100b0:	427a      	negs	r2, r7
 80100b2:	4325      	orrs	r5, r4
 80100b4:	2a1b      	cmp	r2, #27
 80100b6:	dd00      	ble.n	80100ba <__aeabi_fadd+0x18a>
 80100b8:	e0c5      	b.n	8010246 <__aeabi_fadd+0x316>
 80100ba:	002c      	movs	r4, r5
 80100bc:	2620      	movs	r6, #32
 80100be:	40d4      	lsrs	r4, r2
 80100c0:	1ab2      	subs	r2, r6, r2
 80100c2:	4095      	lsls	r5, r2
 80100c4:	1e6a      	subs	r2, r5, #1
 80100c6:	4195      	sbcs	r5, r2
 80100c8:	4325      	orrs	r5, r4
 80100ca:	1b5d      	subs	r5, r3, r5
 80100cc:	0004      	movs	r4, r0
 80100ce:	4689      	mov	r9, r1
 80100d0:	e7a5      	b.n	801001e <__aeabi_fadd+0xee>
 80100d2:	01ab      	lsls	r3, r5, #6
 80100d4:	0a5b      	lsrs	r3, r3, #9
 80100d6:	e750      	b.n	800ff7a <__aeabi_fadd+0x4a>
 80100d8:	2400      	movs	r4, #0
 80100da:	2201      	movs	r2, #1
 80100dc:	464b      	mov	r3, r9
 80100de:	401a      	ands	r2, r3
 80100e0:	076b      	lsls	r3, r5, #29
 80100e2:	d1ba      	bne.n	801005a <__aeabi_fadd+0x12a>
 80100e4:	e742      	b.n	800ff6c <__aeabi_fadd+0x3c>
 80100e6:	2f00      	cmp	r7, #0
 80100e8:	d13b      	bne.n	8010162 <__aeabi_fadd+0x232>
 80100ea:	3401      	adds	r4, #1
 80100ec:	b2e0      	uxtb	r0, r4
 80100ee:	2801      	cmp	r0, #1
 80100f0:	dd4a      	ble.n	8010188 <__aeabi_fadd+0x258>
 80100f2:	2cff      	cmp	r4, #255	; 0xff
 80100f4:	d0bd      	beq.n	8010072 <__aeabi_fadd+0x142>
 80100f6:	2607      	movs	r6, #7
 80100f8:	18ed      	adds	r5, r5, r3
 80100fa:	086d      	lsrs	r5, r5, #1
 80100fc:	402e      	ands	r6, r5
 80100fe:	e7a7      	b.n	8010050 <__aeabi_fadd+0x120>
 8010100:	2307      	movs	r3, #7
 8010102:	4d57      	ldr	r5, [pc, #348]	; (8010260 <__aeabi_fadd+0x330>)
 8010104:	1a24      	subs	r4, r4, r0
 8010106:	4035      	ands	r5, r6
 8010108:	401e      	ands	r6, r3
 801010a:	e7a1      	b.n	8010050 <__aeabi_fadd+0x120>
 801010c:	2c00      	cmp	r4, #0
 801010e:	d11b      	bne.n	8010148 <__aeabi_fadd+0x218>
 8010110:	2d00      	cmp	r5, #0
 8010112:	d16e      	bne.n	80101f2 <__aeabi_fadd+0x2c2>
 8010114:	2b00      	cmp	r3, #0
 8010116:	d100      	bne.n	801011a <__aeabi_fadd+0x1ea>
 8010118:	e09a      	b.n	8010250 <__aeabi_fadd+0x320>
 801011a:	000a      	movs	r2, r1
 801011c:	001d      	movs	r5, r3
 801011e:	003c      	movs	r4, r7
 8010120:	e724      	b.n	800ff6c <__aeabi_fadd+0x3c>
 8010122:	3f01      	subs	r7, #1
 8010124:	2f00      	cmp	r7, #0
 8010126:	d100      	bne.n	801012a <__aeabi_fadd+0x1fa>
 8010128:	e758      	b.n	800ffdc <__aeabi_fadd+0xac>
 801012a:	2cff      	cmp	r4, #255	; 0xff
 801012c:	d000      	beq.n	8010130 <__aeabi_fadd+0x200>
 801012e:	e74a      	b.n	800ffc6 <__aeabi_fadd+0x96>
 8010130:	e7a7      	b.n	8010082 <__aeabi_fadd+0x152>
 8010132:	1b5e      	subs	r6, r3, r5
 8010134:	4689      	mov	r9, r1
 8010136:	e776      	b.n	8010026 <__aeabi_fadd+0xf6>
 8010138:	2d00      	cmp	r5, #0
 801013a:	d11c      	bne.n	8010176 <__aeabi_fadd+0x246>
 801013c:	000a      	movs	r2, r1
 801013e:	28ff      	cmp	r0, #255	; 0xff
 8010140:	d01f      	beq.n	8010182 <__aeabi_fadd+0x252>
 8010142:	0004      	movs	r4, r0
 8010144:	001d      	movs	r5, r3
 8010146:	e711      	b.n	800ff6c <__aeabi_fadd+0x3c>
 8010148:	2d00      	cmp	r5, #0
 801014a:	d15d      	bne.n	8010208 <__aeabi_fadd+0x2d8>
 801014c:	2b00      	cmp	r3, #0
 801014e:	d117      	bne.n	8010180 <__aeabi_fadd+0x250>
 8010150:	2380      	movs	r3, #128	; 0x80
 8010152:	2200      	movs	r2, #0
 8010154:	03db      	lsls	r3, r3, #15
 8010156:	26ff      	movs	r6, #255	; 0xff
 8010158:	e70f      	b.n	800ff7a <__aeabi_fadd+0x4a>
 801015a:	000a      	movs	r2, r1
 801015c:	26ff      	movs	r6, #255	; 0xff
 801015e:	2300      	movs	r3, #0
 8010160:	e70b      	b.n	800ff7a <__aeabi_fadd+0x4a>
 8010162:	2c00      	cmp	r4, #0
 8010164:	d121      	bne.n	80101aa <__aeabi_fadd+0x27a>
 8010166:	2d00      	cmp	r5, #0
 8010168:	d166      	bne.n	8010238 <__aeabi_fadd+0x308>
 801016a:	28ff      	cmp	r0, #255	; 0xff
 801016c:	d1e9      	bne.n	8010142 <__aeabi_fadd+0x212>
 801016e:	001d      	movs	r5, r3
 8010170:	e787      	b.n	8010082 <__aeabi_fadd+0x152>
 8010172:	2301      	movs	r3, #1
 8010174:	e752      	b.n	801001c <__aeabi_fadd+0xec>
 8010176:	1c7a      	adds	r2, r7, #1
 8010178:	d0a7      	beq.n	80100ca <__aeabi_fadd+0x19a>
 801017a:	43fa      	mvns	r2, r7
 801017c:	28ff      	cmp	r0, #255	; 0xff
 801017e:	d199      	bne.n	80100b4 <__aeabi_fadd+0x184>
 8010180:	000a      	movs	r2, r1
 8010182:	001d      	movs	r5, r3
 8010184:	24ff      	movs	r4, #255	; 0xff
 8010186:	e6f1      	b.n	800ff6c <__aeabi_fadd+0x3c>
 8010188:	2e00      	cmp	r6, #0
 801018a:	d121      	bne.n	80101d0 <__aeabi_fadd+0x2a0>
 801018c:	2d00      	cmp	r5, #0
 801018e:	d04f      	beq.n	8010230 <__aeabi_fadd+0x300>
 8010190:	2b00      	cmp	r3, #0
 8010192:	d04c      	beq.n	801022e <__aeabi_fadd+0x2fe>
 8010194:	18ed      	adds	r5, r5, r3
 8010196:	016b      	lsls	r3, r5, #5
 8010198:	d59e      	bpl.n	80100d8 <__aeabi_fadd+0x1a8>
 801019a:	4b31      	ldr	r3, [pc, #196]	; (8010260 <__aeabi_fadd+0x330>)
 801019c:	3607      	adds	r6, #7
 801019e:	402e      	ands	r6, r5
 80101a0:	2401      	movs	r4, #1
 80101a2:	401d      	ands	r5, r3
 80101a4:	e754      	b.n	8010050 <__aeabi_fadd+0x120>
 80101a6:	2301      	movs	r3, #1
 80101a8:	e718      	b.n	800ffdc <__aeabi_fadd+0xac>
 80101aa:	28ff      	cmp	r0, #255	; 0xff
 80101ac:	d0df      	beq.n	801016e <__aeabi_fadd+0x23e>
 80101ae:	2480      	movs	r4, #128	; 0x80
 80101b0:	04e4      	lsls	r4, r4, #19
 80101b2:	427f      	negs	r7, r7
 80101b4:	4325      	orrs	r5, r4
 80101b6:	2f1b      	cmp	r7, #27
 80101b8:	dc4d      	bgt.n	8010256 <__aeabi_fadd+0x326>
 80101ba:	2620      	movs	r6, #32
 80101bc:	1bf6      	subs	r6, r6, r7
 80101be:	002c      	movs	r4, r5
 80101c0:	40b5      	lsls	r5, r6
 80101c2:	40fc      	lsrs	r4, r7
 80101c4:	1e6a      	subs	r2, r5, #1
 80101c6:	4195      	sbcs	r5, r2
 80101c8:	4325      	orrs	r5, r4
 80101ca:	18ed      	adds	r5, r5, r3
 80101cc:	0004      	movs	r4, r0
 80101ce:	e706      	b.n	800ffde <__aeabi_fadd+0xae>
 80101d0:	2d00      	cmp	r5, #0
 80101d2:	d0cc      	beq.n	801016e <__aeabi_fadd+0x23e>
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d100      	bne.n	80101da <__aeabi_fadd+0x2aa>
 80101d8:	e753      	b.n	8010082 <__aeabi_fadd+0x152>
 80101da:	2180      	movs	r1, #128	; 0x80
 80101dc:	4660      	mov	r0, ip
 80101de:	03c9      	lsls	r1, r1, #15
 80101e0:	4208      	tst	r0, r1
 80101e2:	d003      	beq.n	80101ec <__aeabi_fadd+0x2bc>
 80101e4:	4640      	mov	r0, r8
 80101e6:	4208      	tst	r0, r1
 80101e8:	d100      	bne.n	80101ec <__aeabi_fadd+0x2bc>
 80101ea:	001d      	movs	r5, r3
 80101ec:	2101      	movs	r1, #1
 80101ee:	4011      	ands	r1, r2
 80101f0:	e747      	b.n	8010082 <__aeabi_fadd+0x152>
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d100      	bne.n	80101f8 <__aeabi_fadd+0x2c8>
 80101f6:	e6b9      	b.n	800ff6c <__aeabi_fadd+0x3c>
 80101f8:	1aea      	subs	r2, r5, r3
 80101fa:	0150      	lsls	r0, r2, #5
 80101fc:	d525      	bpl.n	801024a <__aeabi_fadd+0x31a>
 80101fe:	2607      	movs	r6, #7
 8010200:	1b5d      	subs	r5, r3, r5
 8010202:	402e      	ands	r6, r5
 8010204:	4689      	mov	r9, r1
 8010206:	e723      	b.n	8010050 <__aeabi_fadd+0x120>
 8010208:	24ff      	movs	r4, #255	; 0xff
 801020a:	2b00      	cmp	r3, #0
 801020c:	d100      	bne.n	8010210 <__aeabi_fadd+0x2e0>
 801020e:	e6ad      	b.n	800ff6c <__aeabi_fadd+0x3c>
 8010210:	2280      	movs	r2, #128	; 0x80
 8010212:	4660      	mov	r0, ip
 8010214:	03d2      	lsls	r2, r2, #15
 8010216:	4210      	tst	r0, r2
 8010218:	d004      	beq.n	8010224 <__aeabi_fadd+0x2f4>
 801021a:	4640      	mov	r0, r8
 801021c:	4210      	tst	r0, r2
 801021e:	d101      	bne.n	8010224 <__aeabi_fadd+0x2f4>
 8010220:	001d      	movs	r5, r3
 8010222:	4689      	mov	r9, r1
 8010224:	2201      	movs	r2, #1
 8010226:	464b      	mov	r3, r9
 8010228:	24ff      	movs	r4, #255	; 0xff
 801022a:	401a      	ands	r2, r3
 801022c:	e69e      	b.n	800ff6c <__aeabi_fadd+0x3c>
 801022e:	002b      	movs	r3, r5
 8010230:	08dd      	lsrs	r5, r3, #3
 8010232:	000a      	movs	r2, r1
 8010234:	2400      	movs	r4, #0
 8010236:	e69d      	b.n	800ff74 <__aeabi_fadd+0x44>
 8010238:	1c7a      	adds	r2, r7, #1
 801023a:	d0c6      	beq.n	80101ca <__aeabi_fadd+0x29a>
 801023c:	43ff      	mvns	r7, r7
 801023e:	28ff      	cmp	r0, #255	; 0xff
 8010240:	d1b9      	bne.n	80101b6 <__aeabi_fadd+0x286>
 8010242:	001d      	movs	r5, r3
 8010244:	e71d      	b.n	8010082 <__aeabi_fadd+0x152>
 8010246:	2501      	movs	r5, #1
 8010248:	e73f      	b.n	80100ca <__aeabi_fadd+0x19a>
 801024a:	1e15      	subs	r5, r2, #0
 801024c:	d000      	beq.n	8010250 <__aeabi_fadd+0x320>
 801024e:	e744      	b.n	80100da <__aeabi_fadd+0x1aa>
 8010250:	2200      	movs	r2, #0
 8010252:	2300      	movs	r3, #0
 8010254:	e691      	b.n	800ff7a <__aeabi_fadd+0x4a>
 8010256:	2501      	movs	r5, #1
 8010258:	e7b7      	b.n	80101ca <__aeabi_fadd+0x29a>
 801025a:	46c0      	nop			; (mov r8, r8)
 801025c:	7dffffff 	.word	0x7dffffff
 8010260:	fbffffff 	.word	0xfbffffff

08010264 <__aeabi_fdiv>:
 8010264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010266:	4657      	mov	r7, sl
 8010268:	464e      	mov	r6, r9
 801026a:	4645      	mov	r5, r8
 801026c:	46de      	mov	lr, fp
 801026e:	0244      	lsls	r4, r0, #9
 8010270:	b5e0      	push	{r5, r6, r7, lr}
 8010272:	0046      	lsls	r6, r0, #1
 8010274:	4688      	mov	r8, r1
 8010276:	0a64      	lsrs	r4, r4, #9
 8010278:	0e36      	lsrs	r6, r6, #24
 801027a:	0fc7      	lsrs	r7, r0, #31
 801027c:	2e00      	cmp	r6, #0
 801027e:	d063      	beq.n	8010348 <__aeabi_fdiv+0xe4>
 8010280:	2eff      	cmp	r6, #255	; 0xff
 8010282:	d024      	beq.n	80102ce <__aeabi_fdiv+0x6a>
 8010284:	2380      	movs	r3, #128	; 0x80
 8010286:	00e4      	lsls	r4, r4, #3
 8010288:	04db      	lsls	r3, r3, #19
 801028a:	431c      	orrs	r4, r3
 801028c:	2300      	movs	r3, #0
 801028e:	4699      	mov	r9, r3
 8010290:	469b      	mov	fp, r3
 8010292:	3e7f      	subs	r6, #127	; 0x7f
 8010294:	4643      	mov	r3, r8
 8010296:	4642      	mov	r2, r8
 8010298:	025d      	lsls	r5, r3, #9
 801029a:	0fd2      	lsrs	r2, r2, #31
 801029c:	005b      	lsls	r3, r3, #1
 801029e:	0a6d      	lsrs	r5, r5, #9
 80102a0:	0e1b      	lsrs	r3, r3, #24
 80102a2:	4690      	mov	r8, r2
 80102a4:	4692      	mov	sl, r2
 80102a6:	d065      	beq.n	8010374 <__aeabi_fdiv+0x110>
 80102a8:	2bff      	cmp	r3, #255	; 0xff
 80102aa:	d055      	beq.n	8010358 <__aeabi_fdiv+0xf4>
 80102ac:	2280      	movs	r2, #128	; 0x80
 80102ae:	2100      	movs	r1, #0
 80102b0:	00ed      	lsls	r5, r5, #3
 80102b2:	04d2      	lsls	r2, r2, #19
 80102b4:	3b7f      	subs	r3, #127	; 0x7f
 80102b6:	4315      	orrs	r5, r2
 80102b8:	1af6      	subs	r6, r6, r3
 80102ba:	4643      	mov	r3, r8
 80102bc:	464a      	mov	r2, r9
 80102be:	407b      	eors	r3, r7
 80102c0:	2a0f      	cmp	r2, #15
 80102c2:	d900      	bls.n	80102c6 <__aeabi_fdiv+0x62>
 80102c4:	e08d      	b.n	80103e2 <__aeabi_fdiv+0x17e>
 80102c6:	486d      	ldr	r0, [pc, #436]	; (801047c <__aeabi_fdiv+0x218>)
 80102c8:	0092      	lsls	r2, r2, #2
 80102ca:	5882      	ldr	r2, [r0, r2]
 80102cc:	4697      	mov	pc, r2
 80102ce:	2c00      	cmp	r4, #0
 80102d0:	d154      	bne.n	801037c <__aeabi_fdiv+0x118>
 80102d2:	2308      	movs	r3, #8
 80102d4:	4699      	mov	r9, r3
 80102d6:	3b06      	subs	r3, #6
 80102d8:	26ff      	movs	r6, #255	; 0xff
 80102da:	469b      	mov	fp, r3
 80102dc:	e7da      	b.n	8010294 <__aeabi_fdiv+0x30>
 80102de:	2500      	movs	r5, #0
 80102e0:	4653      	mov	r3, sl
 80102e2:	2902      	cmp	r1, #2
 80102e4:	d01b      	beq.n	801031e <__aeabi_fdiv+0xba>
 80102e6:	2903      	cmp	r1, #3
 80102e8:	d100      	bne.n	80102ec <__aeabi_fdiv+0x88>
 80102ea:	e0bf      	b.n	801046c <__aeabi_fdiv+0x208>
 80102ec:	2901      	cmp	r1, #1
 80102ee:	d028      	beq.n	8010342 <__aeabi_fdiv+0xde>
 80102f0:	0030      	movs	r0, r6
 80102f2:	307f      	adds	r0, #127	; 0x7f
 80102f4:	2800      	cmp	r0, #0
 80102f6:	dd20      	ble.n	801033a <__aeabi_fdiv+0xd6>
 80102f8:	076a      	lsls	r2, r5, #29
 80102fa:	d004      	beq.n	8010306 <__aeabi_fdiv+0xa2>
 80102fc:	220f      	movs	r2, #15
 80102fe:	402a      	ands	r2, r5
 8010300:	2a04      	cmp	r2, #4
 8010302:	d000      	beq.n	8010306 <__aeabi_fdiv+0xa2>
 8010304:	3504      	adds	r5, #4
 8010306:	012a      	lsls	r2, r5, #4
 8010308:	d503      	bpl.n	8010312 <__aeabi_fdiv+0xae>
 801030a:	0030      	movs	r0, r6
 801030c:	4a5c      	ldr	r2, [pc, #368]	; (8010480 <__aeabi_fdiv+0x21c>)
 801030e:	3080      	adds	r0, #128	; 0x80
 8010310:	4015      	ands	r5, r2
 8010312:	28fe      	cmp	r0, #254	; 0xfe
 8010314:	dc03      	bgt.n	801031e <__aeabi_fdiv+0xba>
 8010316:	01ac      	lsls	r4, r5, #6
 8010318:	0a64      	lsrs	r4, r4, #9
 801031a:	b2c2      	uxtb	r2, r0
 801031c:	e001      	b.n	8010322 <__aeabi_fdiv+0xbe>
 801031e:	22ff      	movs	r2, #255	; 0xff
 8010320:	2400      	movs	r4, #0
 8010322:	0264      	lsls	r4, r4, #9
 8010324:	05d2      	lsls	r2, r2, #23
 8010326:	0a60      	lsrs	r0, r4, #9
 8010328:	07db      	lsls	r3, r3, #31
 801032a:	4310      	orrs	r0, r2
 801032c:	4318      	orrs	r0, r3
 801032e:	bc3c      	pop	{r2, r3, r4, r5}
 8010330:	4690      	mov	r8, r2
 8010332:	4699      	mov	r9, r3
 8010334:	46a2      	mov	sl, r4
 8010336:	46ab      	mov	fp, r5
 8010338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801033a:	2201      	movs	r2, #1
 801033c:	1a10      	subs	r0, r2, r0
 801033e:	281b      	cmp	r0, #27
 8010340:	dd7c      	ble.n	801043c <__aeabi_fdiv+0x1d8>
 8010342:	2200      	movs	r2, #0
 8010344:	2400      	movs	r4, #0
 8010346:	e7ec      	b.n	8010322 <__aeabi_fdiv+0xbe>
 8010348:	2c00      	cmp	r4, #0
 801034a:	d11d      	bne.n	8010388 <__aeabi_fdiv+0x124>
 801034c:	2304      	movs	r3, #4
 801034e:	4699      	mov	r9, r3
 8010350:	3b03      	subs	r3, #3
 8010352:	2600      	movs	r6, #0
 8010354:	469b      	mov	fp, r3
 8010356:	e79d      	b.n	8010294 <__aeabi_fdiv+0x30>
 8010358:	3eff      	subs	r6, #255	; 0xff
 801035a:	2d00      	cmp	r5, #0
 801035c:	d120      	bne.n	80103a0 <__aeabi_fdiv+0x13c>
 801035e:	2102      	movs	r1, #2
 8010360:	4643      	mov	r3, r8
 8010362:	464a      	mov	r2, r9
 8010364:	407b      	eors	r3, r7
 8010366:	430a      	orrs	r2, r1
 8010368:	2a0f      	cmp	r2, #15
 801036a:	d8d8      	bhi.n	801031e <__aeabi_fdiv+0xba>
 801036c:	4845      	ldr	r0, [pc, #276]	; (8010484 <__aeabi_fdiv+0x220>)
 801036e:	0092      	lsls	r2, r2, #2
 8010370:	5882      	ldr	r2, [r0, r2]
 8010372:	4697      	mov	pc, r2
 8010374:	2d00      	cmp	r5, #0
 8010376:	d119      	bne.n	80103ac <__aeabi_fdiv+0x148>
 8010378:	2101      	movs	r1, #1
 801037a:	e7f1      	b.n	8010360 <__aeabi_fdiv+0xfc>
 801037c:	230c      	movs	r3, #12
 801037e:	4699      	mov	r9, r3
 8010380:	3b09      	subs	r3, #9
 8010382:	26ff      	movs	r6, #255	; 0xff
 8010384:	469b      	mov	fp, r3
 8010386:	e785      	b.n	8010294 <__aeabi_fdiv+0x30>
 8010388:	0020      	movs	r0, r4
 801038a:	f000 fb73 	bl	8010a74 <__clzsi2>
 801038e:	2676      	movs	r6, #118	; 0x76
 8010390:	1f43      	subs	r3, r0, #5
 8010392:	409c      	lsls	r4, r3
 8010394:	2300      	movs	r3, #0
 8010396:	4276      	negs	r6, r6
 8010398:	1a36      	subs	r6, r6, r0
 801039a:	4699      	mov	r9, r3
 801039c:	469b      	mov	fp, r3
 801039e:	e779      	b.n	8010294 <__aeabi_fdiv+0x30>
 80103a0:	464a      	mov	r2, r9
 80103a2:	2303      	movs	r3, #3
 80103a4:	431a      	orrs	r2, r3
 80103a6:	4691      	mov	r9, r2
 80103a8:	2103      	movs	r1, #3
 80103aa:	e786      	b.n	80102ba <__aeabi_fdiv+0x56>
 80103ac:	0028      	movs	r0, r5
 80103ae:	f000 fb61 	bl	8010a74 <__clzsi2>
 80103b2:	1f43      	subs	r3, r0, #5
 80103b4:	1836      	adds	r6, r6, r0
 80103b6:	409d      	lsls	r5, r3
 80103b8:	3676      	adds	r6, #118	; 0x76
 80103ba:	2100      	movs	r1, #0
 80103bc:	e77d      	b.n	80102ba <__aeabi_fdiv+0x56>
 80103be:	2480      	movs	r4, #128	; 0x80
 80103c0:	2300      	movs	r3, #0
 80103c2:	03e4      	lsls	r4, r4, #15
 80103c4:	22ff      	movs	r2, #255	; 0xff
 80103c6:	e7ac      	b.n	8010322 <__aeabi_fdiv+0xbe>
 80103c8:	2500      	movs	r5, #0
 80103ca:	2380      	movs	r3, #128	; 0x80
 80103cc:	03db      	lsls	r3, r3, #15
 80103ce:	421c      	tst	r4, r3
 80103d0:	d028      	beq.n	8010424 <__aeabi_fdiv+0x1c0>
 80103d2:	421d      	tst	r5, r3
 80103d4:	d126      	bne.n	8010424 <__aeabi_fdiv+0x1c0>
 80103d6:	432b      	orrs	r3, r5
 80103d8:	025c      	lsls	r4, r3, #9
 80103da:	0a64      	lsrs	r4, r4, #9
 80103dc:	4643      	mov	r3, r8
 80103de:	22ff      	movs	r2, #255	; 0xff
 80103e0:	e79f      	b.n	8010322 <__aeabi_fdiv+0xbe>
 80103e2:	0162      	lsls	r2, r4, #5
 80103e4:	016c      	lsls	r4, r5, #5
 80103e6:	42a2      	cmp	r2, r4
 80103e8:	d224      	bcs.n	8010434 <__aeabi_fdiv+0x1d0>
 80103ea:	211b      	movs	r1, #27
 80103ec:	2500      	movs	r5, #0
 80103ee:	3e01      	subs	r6, #1
 80103f0:	2701      	movs	r7, #1
 80103f2:	0010      	movs	r0, r2
 80103f4:	006d      	lsls	r5, r5, #1
 80103f6:	0052      	lsls	r2, r2, #1
 80103f8:	2800      	cmp	r0, #0
 80103fa:	db01      	blt.n	8010400 <__aeabi_fdiv+0x19c>
 80103fc:	4294      	cmp	r4, r2
 80103fe:	d801      	bhi.n	8010404 <__aeabi_fdiv+0x1a0>
 8010400:	1b12      	subs	r2, r2, r4
 8010402:	433d      	orrs	r5, r7
 8010404:	3901      	subs	r1, #1
 8010406:	2900      	cmp	r1, #0
 8010408:	d1f3      	bne.n	80103f2 <__aeabi_fdiv+0x18e>
 801040a:	0014      	movs	r4, r2
 801040c:	1e62      	subs	r2, r4, #1
 801040e:	4194      	sbcs	r4, r2
 8010410:	4325      	orrs	r5, r4
 8010412:	e76d      	b.n	80102f0 <__aeabi_fdiv+0x8c>
 8010414:	46ba      	mov	sl, r7
 8010416:	4659      	mov	r1, fp
 8010418:	0025      	movs	r5, r4
 801041a:	4653      	mov	r3, sl
 801041c:	2902      	cmp	r1, #2
 801041e:	d000      	beq.n	8010422 <__aeabi_fdiv+0x1be>
 8010420:	e761      	b.n	80102e6 <__aeabi_fdiv+0x82>
 8010422:	e77c      	b.n	801031e <__aeabi_fdiv+0xba>
 8010424:	2380      	movs	r3, #128	; 0x80
 8010426:	03db      	lsls	r3, r3, #15
 8010428:	431c      	orrs	r4, r3
 801042a:	0264      	lsls	r4, r4, #9
 801042c:	0a64      	lsrs	r4, r4, #9
 801042e:	003b      	movs	r3, r7
 8010430:	22ff      	movs	r2, #255	; 0xff
 8010432:	e776      	b.n	8010322 <__aeabi_fdiv+0xbe>
 8010434:	1b12      	subs	r2, r2, r4
 8010436:	211a      	movs	r1, #26
 8010438:	2501      	movs	r5, #1
 801043a:	e7d9      	b.n	80103f0 <__aeabi_fdiv+0x18c>
 801043c:	369e      	adds	r6, #158	; 0x9e
 801043e:	002a      	movs	r2, r5
 8010440:	40b5      	lsls	r5, r6
 8010442:	002c      	movs	r4, r5
 8010444:	40c2      	lsrs	r2, r0
 8010446:	1e65      	subs	r5, r4, #1
 8010448:	41ac      	sbcs	r4, r5
 801044a:	4314      	orrs	r4, r2
 801044c:	0762      	lsls	r2, r4, #29
 801044e:	d004      	beq.n	801045a <__aeabi_fdiv+0x1f6>
 8010450:	220f      	movs	r2, #15
 8010452:	4022      	ands	r2, r4
 8010454:	2a04      	cmp	r2, #4
 8010456:	d000      	beq.n	801045a <__aeabi_fdiv+0x1f6>
 8010458:	3404      	adds	r4, #4
 801045a:	0162      	lsls	r2, r4, #5
 801045c:	d403      	bmi.n	8010466 <__aeabi_fdiv+0x202>
 801045e:	01a4      	lsls	r4, r4, #6
 8010460:	0a64      	lsrs	r4, r4, #9
 8010462:	2200      	movs	r2, #0
 8010464:	e75d      	b.n	8010322 <__aeabi_fdiv+0xbe>
 8010466:	2201      	movs	r2, #1
 8010468:	2400      	movs	r4, #0
 801046a:	e75a      	b.n	8010322 <__aeabi_fdiv+0xbe>
 801046c:	2480      	movs	r4, #128	; 0x80
 801046e:	03e4      	lsls	r4, r4, #15
 8010470:	432c      	orrs	r4, r5
 8010472:	0264      	lsls	r4, r4, #9
 8010474:	0a64      	lsrs	r4, r4, #9
 8010476:	22ff      	movs	r2, #255	; 0xff
 8010478:	e753      	b.n	8010322 <__aeabi_fdiv+0xbe>
 801047a:	46c0      	nop			; (mov r8, r8)
 801047c:	0801c10c 	.word	0x0801c10c
 8010480:	f7ffffff 	.word	0xf7ffffff
 8010484:	0801c14c 	.word	0x0801c14c

08010488 <__aeabi_fmul>:
 8010488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801048a:	464e      	mov	r6, r9
 801048c:	4657      	mov	r7, sl
 801048e:	4645      	mov	r5, r8
 8010490:	46de      	mov	lr, fp
 8010492:	b5e0      	push	{r5, r6, r7, lr}
 8010494:	0243      	lsls	r3, r0, #9
 8010496:	0a5b      	lsrs	r3, r3, #9
 8010498:	0045      	lsls	r5, r0, #1
 801049a:	b083      	sub	sp, #12
 801049c:	1c0f      	adds	r7, r1, #0
 801049e:	4699      	mov	r9, r3
 80104a0:	0e2d      	lsrs	r5, r5, #24
 80104a2:	0fc6      	lsrs	r6, r0, #31
 80104a4:	2d00      	cmp	r5, #0
 80104a6:	d057      	beq.n	8010558 <__aeabi_fmul+0xd0>
 80104a8:	2dff      	cmp	r5, #255	; 0xff
 80104aa:	d024      	beq.n	80104f6 <__aeabi_fmul+0x6e>
 80104ac:	2080      	movs	r0, #128	; 0x80
 80104ae:	00db      	lsls	r3, r3, #3
 80104b0:	04c0      	lsls	r0, r0, #19
 80104b2:	4318      	orrs	r0, r3
 80104b4:	2300      	movs	r3, #0
 80104b6:	4681      	mov	r9, r0
 80104b8:	469a      	mov	sl, r3
 80104ba:	469b      	mov	fp, r3
 80104bc:	3d7f      	subs	r5, #127	; 0x7f
 80104be:	027c      	lsls	r4, r7, #9
 80104c0:	007a      	lsls	r2, r7, #1
 80104c2:	0ffb      	lsrs	r3, r7, #31
 80104c4:	0a64      	lsrs	r4, r4, #9
 80104c6:	0e12      	lsrs	r2, r2, #24
 80104c8:	4698      	mov	r8, r3
 80104ca:	d023      	beq.n	8010514 <__aeabi_fmul+0x8c>
 80104cc:	2aff      	cmp	r2, #255	; 0xff
 80104ce:	d04b      	beq.n	8010568 <__aeabi_fmul+0xe0>
 80104d0:	00e3      	lsls	r3, r4, #3
 80104d2:	2480      	movs	r4, #128	; 0x80
 80104d4:	2000      	movs	r0, #0
 80104d6:	04e4      	lsls	r4, r4, #19
 80104d8:	3a7f      	subs	r2, #127	; 0x7f
 80104da:	431c      	orrs	r4, r3
 80104dc:	18ad      	adds	r5, r5, r2
 80104de:	1c6b      	adds	r3, r5, #1
 80104e0:	4647      	mov	r7, r8
 80104e2:	9301      	str	r3, [sp, #4]
 80104e4:	4653      	mov	r3, sl
 80104e6:	4077      	eors	r7, r6
 80104e8:	003a      	movs	r2, r7
 80104ea:	2b0f      	cmp	r3, #15
 80104ec:	d848      	bhi.n	8010580 <__aeabi_fmul+0xf8>
 80104ee:	497d      	ldr	r1, [pc, #500]	; (80106e4 <__aeabi_fmul+0x25c>)
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	58cb      	ldr	r3, [r1, r3]
 80104f4:	469f      	mov	pc, r3
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d000      	beq.n	80104fc <__aeabi_fmul+0x74>
 80104fa:	e085      	b.n	8010608 <__aeabi_fmul+0x180>
 80104fc:	3308      	adds	r3, #8
 80104fe:	469a      	mov	sl, r3
 8010500:	3b06      	subs	r3, #6
 8010502:	469b      	mov	fp, r3
 8010504:	027c      	lsls	r4, r7, #9
 8010506:	007a      	lsls	r2, r7, #1
 8010508:	0ffb      	lsrs	r3, r7, #31
 801050a:	25ff      	movs	r5, #255	; 0xff
 801050c:	0a64      	lsrs	r4, r4, #9
 801050e:	0e12      	lsrs	r2, r2, #24
 8010510:	4698      	mov	r8, r3
 8010512:	d1db      	bne.n	80104cc <__aeabi_fmul+0x44>
 8010514:	2c00      	cmp	r4, #0
 8010516:	d000      	beq.n	801051a <__aeabi_fmul+0x92>
 8010518:	e090      	b.n	801063c <__aeabi_fmul+0x1b4>
 801051a:	4652      	mov	r2, sl
 801051c:	2301      	movs	r3, #1
 801051e:	431a      	orrs	r2, r3
 8010520:	4692      	mov	sl, r2
 8010522:	2001      	movs	r0, #1
 8010524:	e7db      	b.n	80104de <__aeabi_fmul+0x56>
 8010526:	464c      	mov	r4, r9
 8010528:	4658      	mov	r0, fp
 801052a:	0017      	movs	r7, r2
 801052c:	2802      	cmp	r0, #2
 801052e:	d024      	beq.n	801057a <__aeabi_fmul+0xf2>
 8010530:	2803      	cmp	r0, #3
 8010532:	d100      	bne.n	8010536 <__aeabi_fmul+0xae>
 8010534:	e0cf      	b.n	80106d6 <__aeabi_fmul+0x24e>
 8010536:	2200      	movs	r2, #0
 8010538:	2300      	movs	r3, #0
 801053a:	2801      	cmp	r0, #1
 801053c:	d14d      	bne.n	80105da <__aeabi_fmul+0x152>
 801053e:	0258      	lsls	r0, r3, #9
 8010540:	05d2      	lsls	r2, r2, #23
 8010542:	0a40      	lsrs	r0, r0, #9
 8010544:	07ff      	lsls	r7, r7, #31
 8010546:	4310      	orrs	r0, r2
 8010548:	4338      	orrs	r0, r7
 801054a:	b003      	add	sp, #12
 801054c:	bc3c      	pop	{r2, r3, r4, r5}
 801054e:	4690      	mov	r8, r2
 8010550:	4699      	mov	r9, r3
 8010552:	46a2      	mov	sl, r4
 8010554:	46ab      	mov	fp, r5
 8010556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010558:	2b00      	cmp	r3, #0
 801055a:	d15b      	bne.n	8010614 <__aeabi_fmul+0x18c>
 801055c:	2304      	movs	r3, #4
 801055e:	469a      	mov	sl, r3
 8010560:	3b03      	subs	r3, #3
 8010562:	2500      	movs	r5, #0
 8010564:	469b      	mov	fp, r3
 8010566:	e7aa      	b.n	80104be <__aeabi_fmul+0x36>
 8010568:	35ff      	adds	r5, #255	; 0xff
 801056a:	2c00      	cmp	r4, #0
 801056c:	d160      	bne.n	8010630 <__aeabi_fmul+0x1a8>
 801056e:	4652      	mov	r2, sl
 8010570:	2302      	movs	r3, #2
 8010572:	431a      	orrs	r2, r3
 8010574:	4692      	mov	sl, r2
 8010576:	2002      	movs	r0, #2
 8010578:	e7b1      	b.n	80104de <__aeabi_fmul+0x56>
 801057a:	22ff      	movs	r2, #255	; 0xff
 801057c:	2300      	movs	r3, #0
 801057e:	e7de      	b.n	801053e <__aeabi_fmul+0xb6>
 8010580:	464b      	mov	r3, r9
 8010582:	0c1b      	lsrs	r3, r3, #16
 8010584:	469c      	mov	ip, r3
 8010586:	464b      	mov	r3, r9
 8010588:	0426      	lsls	r6, r4, #16
 801058a:	0c36      	lsrs	r6, r6, #16
 801058c:	0418      	lsls	r0, r3, #16
 801058e:	4661      	mov	r1, ip
 8010590:	0033      	movs	r3, r6
 8010592:	0c22      	lsrs	r2, r4, #16
 8010594:	4664      	mov	r4, ip
 8010596:	0c00      	lsrs	r0, r0, #16
 8010598:	4343      	muls	r3, r0
 801059a:	434e      	muls	r6, r1
 801059c:	4350      	muls	r0, r2
 801059e:	4354      	muls	r4, r2
 80105a0:	1980      	adds	r0, r0, r6
 80105a2:	0c1a      	lsrs	r2, r3, #16
 80105a4:	1812      	adds	r2, r2, r0
 80105a6:	4296      	cmp	r6, r2
 80105a8:	d903      	bls.n	80105b2 <__aeabi_fmul+0x12a>
 80105aa:	2180      	movs	r1, #128	; 0x80
 80105ac:	0249      	lsls	r1, r1, #9
 80105ae:	468c      	mov	ip, r1
 80105b0:	4464      	add	r4, ip
 80105b2:	041b      	lsls	r3, r3, #16
 80105b4:	0c1b      	lsrs	r3, r3, #16
 80105b6:	0410      	lsls	r0, r2, #16
 80105b8:	18c0      	adds	r0, r0, r3
 80105ba:	0183      	lsls	r3, r0, #6
 80105bc:	1e5e      	subs	r6, r3, #1
 80105be:	41b3      	sbcs	r3, r6
 80105c0:	0e80      	lsrs	r0, r0, #26
 80105c2:	4318      	orrs	r0, r3
 80105c4:	0c13      	lsrs	r3, r2, #16
 80105c6:	191b      	adds	r3, r3, r4
 80105c8:	019b      	lsls	r3, r3, #6
 80105ca:	4303      	orrs	r3, r0
 80105cc:	001c      	movs	r4, r3
 80105ce:	0123      	lsls	r3, r4, #4
 80105d0:	d579      	bpl.n	80106c6 <__aeabi_fmul+0x23e>
 80105d2:	2301      	movs	r3, #1
 80105d4:	0862      	lsrs	r2, r4, #1
 80105d6:	401c      	ands	r4, r3
 80105d8:	4314      	orrs	r4, r2
 80105da:	9a01      	ldr	r2, [sp, #4]
 80105dc:	327f      	adds	r2, #127	; 0x7f
 80105de:	2a00      	cmp	r2, #0
 80105e0:	dd4d      	ble.n	801067e <__aeabi_fmul+0x1f6>
 80105e2:	0763      	lsls	r3, r4, #29
 80105e4:	d004      	beq.n	80105f0 <__aeabi_fmul+0x168>
 80105e6:	230f      	movs	r3, #15
 80105e8:	4023      	ands	r3, r4
 80105ea:	2b04      	cmp	r3, #4
 80105ec:	d000      	beq.n	80105f0 <__aeabi_fmul+0x168>
 80105ee:	3404      	adds	r4, #4
 80105f0:	0123      	lsls	r3, r4, #4
 80105f2:	d503      	bpl.n	80105fc <__aeabi_fmul+0x174>
 80105f4:	4b3c      	ldr	r3, [pc, #240]	; (80106e8 <__aeabi_fmul+0x260>)
 80105f6:	9a01      	ldr	r2, [sp, #4]
 80105f8:	401c      	ands	r4, r3
 80105fa:	3280      	adds	r2, #128	; 0x80
 80105fc:	2afe      	cmp	r2, #254	; 0xfe
 80105fe:	dcbc      	bgt.n	801057a <__aeabi_fmul+0xf2>
 8010600:	01a3      	lsls	r3, r4, #6
 8010602:	0a5b      	lsrs	r3, r3, #9
 8010604:	b2d2      	uxtb	r2, r2
 8010606:	e79a      	b.n	801053e <__aeabi_fmul+0xb6>
 8010608:	230c      	movs	r3, #12
 801060a:	469a      	mov	sl, r3
 801060c:	3b09      	subs	r3, #9
 801060e:	25ff      	movs	r5, #255	; 0xff
 8010610:	469b      	mov	fp, r3
 8010612:	e754      	b.n	80104be <__aeabi_fmul+0x36>
 8010614:	0018      	movs	r0, r3
 8010616:	f000 fa2d 	bl	8010a74 <__clzsi2>
 801061a:	464a      	mov	r2, r9
 801061c:	1f43      	subs	r3, r0, #5
 801061e:	2576      	movs	r5, #118	; 0x76
 8010620:	409a      	lsls	r2, r3
 8010622:	2300      	movs	r3, #0
 8010624:	426d      	negs	r5, r5
 8010626:	4691      	mov	r9, r2
 8010628:	1a2d      	subs	r5, r5, r0
 801062a:	469a      	mov	sl, r3
 801062c:	469b      	mov	fp, r3
 801062e:	e746      	b.n	80104be <__aeabi_fmul+0x36>
 8010630:	4652      	mov	r2, sl
 8010632:	2303      	movs	r3, #3
 8010634:	431a      	orrs	r2, r3
 8010636:	4692      	mov	sl, r2
 8010638:	2003      	movs	r0, #3
 801063a:	e750      	b.n	80104de <__aeabi_fmul+0x56>
 801063c:	0020      	movs	r0, r4
 801063e:	f000 fa19 	bl	8010a74 <__clzsi2>
 8010642:	1f43      	subs	r3, r0, #5
 8010644:	1a2d      	subs	r5, r5, r0
 8010646:	409c      	lsls	r4, r3
 8010648:	3d76      	subs	r5, #118	; 0x76
 801064a:	2000      	movs	r0, #0
 801064c:	e747      	b.n	80104de <__aeabi_fmul+0x56>
 801064e:	2380      	movs	r3, #128	; 0x80
 8010650:	2700      	movs	r7, #0
 8010652:	03db      	lsls	r3, r3, #15
 8010654:	22ff      	movs	r2, #255	; 0xff
 8010656:	e772      	b.n	801053e <__aeabi_fmul+0xb6>
 8010658:	4642      	mov	r2, r8
 801065a:	e766      	b.n	801052a <__aeabi_fmul+0xa2>
 801065c:	464c      	mov	r4, r9
 801065e:	0032      	movs	r2, r6
 8010660:	4658      	mov	r0, fp
 8010662:	e762      	b.n	801052a <__aeabi_fmul+0xa2>
 8010664:	2380      	movs	r3, #128	; 0x80
 8010666:	464a      	mov	r2, r9
 8010668:	03db      	lsls	r3, r3, #15
 801066a:	421a      	tst	r2, r3
 801066c:	d022      	beq.n	80106b4 <__aeabi_fmul+0x22c>
 801066e:	421c      	tst	r4, r3
 8010670:	d120      	bne.n	80106b4 <__aeabi_fmul+0x22c>
 8010672:	4323      	orrs	r3, r4
 8010674:	025b      	lsls	r3, r3, #9
 8010676:	0a5b      	lsrs	r3, r3, #9
 8010678:	4647      	mov	r7, r8
 801067a:	22ff      	movs	r2, #255	; 0xff
 801067c:	e75f      	b.n	801053e <__aeabi_fmul+0xb6>
 801067e:	2301      	movs	r3, #1
 8010680:	1a9a      	subs	r2, r3, r2
 8010682:	2a1b      	cmp	r2, #27
 8010684:	dc21      	bgt.n	80106ca <__aeabi_fmul+0x242>
 8010686:	0023      	movs	r3, r4
 8010688:	9901      	ldr	r1, [sp, #4]
 801068a:	40d3      	lsrs	r3, r2
 801068c:	319e      	adds	r1, #158	; 0x9e
 801068e:	408c      	lsls	r4, r1
 8010690:	001a      	movs	r2, r3
 8010692:	0023      	movs	r3, r4
 8010694:	1e5c      	subs	r4, r3, #1
 8010696:	41a3      	sbcs	r3, r4
 8010698:	4313      	orrs	r3, r2
 801069a:	075a      	lsls	r2, r3, #29
 801069c:	d004      	beq.n	80106a8 <__aeabi_fmul+0x220>
 801069e:	220f      	movs	r2, #15
 80106a0:	401a      	ands	r2, r3
 80106a2:	2a04      	cmp	r2, #4
 80106a4:	d000      	beq.n	80106a8 <__aeabi_fmul+0x220>
 80106a6:	3304      	adds	r3, #4
 80106a8:	015a      	lsls	r2, r3, #5
 80106aa:	d411      	bmi.n	80106d0 <__aeabi_fmul+0x248>
 80106ac:	019b      	lsls	r3, r3, #6
 80106ae:	0a5b      	lsrs	r3, r3, #9
 80106b0:	2200      	movs	r2, #0
 80106b2:	e744      	b.n	801053e <__aeabi_fmul+0xb6>
 80106b4:	2380      	movs	r3, #128	; 0x80
 80106b6:	464a      	mov	r2, r9
 80106b8:	03db      	lsls	r3, r3, #15
 80106ba:	4313      	orrs	r3, r2
 80106bc:	025b      	lsls	r3, r3, #9
 80106be:	0a5b      	lsrs	r3, r3, #9
 80106c0:	0037      	movs	r7, r6
 80106c2:	22ff      	movs	r2, #255	; 0xff
 80106c4:	e73b      	b.n	801053e <__aeabi_fmul+0xb6>
 80106c6:	9501      	str	r5, [sp, #4]
 80106c8:	e787      	b.n	80105da <__aeabi_fmul+0x152>
 80106ca:	2200      	movs	r2, #0
 80106cc:	2300      	movs	r3, #0
 80106ce:	e736      	b.n	801053e <__aeabi_fmul+0xb6>
 80106d0:	2201      	movs	r2, #1
 80106d2:	2300      	movs	r3, #0
 80106d4:	e733      	b.n	801053e <__aeabi_fmul+0xb6>
 80106d6:	2380      	movs	r3, #128	; 0x80
 80106d8:	03db      	lsls	r3, r3, #15
 80106da:	4323      	orrs	r3, r4
 80106dc:	025b      	lsls	r3, r3, #9
 80106de:	0a5b      	lsrs	r3, r3, #9
 80106e0:	22ff      	movs	r2, #255	; 0xff
 80106e2:	e72c      	b.n	801053e <__aeabi_fmul+0xb6>
 80106e4:	0801c18c 	.word	0x0801c18c
 80106e8:	f7ffffff 	.word	0xf7ffffff

080106ec <__aeabi_fsub>:
 80106ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ee:	4647      	mov	r7, r8
 80106f0:	46ce      	mov	lr, r9
 80106f2:	0044      	lsls	r4, r0, #1
 80106f4:	0fc2      	lsrs	r2, r0, #31
 80106f6:	b580      	push	{r7, lr}
 80106f8:	0247      	lsls	r7, r0, #9
 80106fa:	0248      	lsls	r0, r1, #9
 80106fc:	0a40      	lsrs	r0, r0, #9
 80106fe:	4684      	mov	ip, r0
 8010700:	4666      	mov	r6, ip
 8010702:	0048      	lsls	r0, r1, #1
 8010704:	0a7f      	lsrs	r7, r7, #9
 8010706:	0e24      	lsrs	r4, r4, #24
 8010708:	00f6      	lsls	r6, r6, #3
 801070a:	0025      	movs	r5, r4
 801070c:	4690      	mov	r8, r2
 801070e:	00fb      	lsls	r3, r7, #3
 8010710:	0e00      	lsrs	r0, r0, #24
 8010712:	0fc9      	lsrs	r1, r1, #31
 8010714:	46b1      	mov	r9, r6
 8010716:	28ff      	cmp	r0, #255	; 0xff
 8010718:	d100      	bne.n	801071c <__aeabi_fsub+0x30>
 801071a:	e085      	b.n	8010828 <__aeabi_fsub+0x13c>
 801071c:	2601      	movs	r6, #1
 801071e:	4071      	eors	r1, r6
 8010720:	1a26      	subs	r6, r4, r0
 8010722:	4291      	cmp	r1, r2
 8010724:	d057      	beq.n	80107d6 <__aeabi_fsub+0xea>
 8010726:	2e00      	cmp	r6, #0
 8010728:	dd43      	ble.n	80107b2 <__aeabi_fsub+0xc6>
 801072a:	2800      	cmp	r0, #0
 801072c:	d000      	beq.n	8010730 <__aeabi_fsub+0x44>
 801072e:	e07f      	b.n	8010830 <__aeabi_fsub+0x144>
 8010730:	4649      	mov	r1, r9
 8010732:	2900      	cmp	r1, #0
 8010734:	d100      	bne.n	8010738 <__aeabi_fsub+0x4c>
 8010736:	e0aa      	b.n	801088e <__aeabi_fsub+0x1a2>
 8010738:	3e01      	subs	r6, #1
 801073a:	2e00      	cmp	r6, #0
 801073c:	d000      	beq.n	8010740 <__aeabi_fsub+0x54>
 801073e:	e0f7      	b.n	8010930 <__aeabi_fsub+0x244>
 8010740:	1a5b      	subs	r3, r3, r1
 8010742:	015a      	lsls	r2, r3, #5
 8010744:	d400      	bmi.n	8010748 <__aeabi_fsub+0x5c>
 8010746:	e08b      	b.n	8010860 <__aeabi_fsub+0x174>
 8010748:	019b      	lsls	r3, r3, #6
 801074a:	099c      	lsrs	r4, r3, #6
 801074c:	0020      	movs	r0, r4
 801074e:	f000 f991 	bl	8010a74 <__clzsi2>
 8010752:	3805      	subs	r0, #5
 8010754:	4084      	lsls	r4, r0
 8010756:	4285      	cmp	r5, r0
 8010758:	dd00      	ble.n	801075c <__aeabi_fsub+0x70>
 801075a:	e0d3      	b.n	8010904 <__aeabi_fsub+0x218>
 801075c:	1b45      	subs	r5, r0, r5
 801075e:	0023      	movs	r3, r4
 8010760:	2020      	movs	r0, #32
 8010762:	3501      	adds	r5, #1
 8010764:	40eb      	lsrs	r3, r5
 8010766:	1b45      	subs	r5, r0, r5
 8010768:	40ac      	lsls	r4, r5
 801076a:	1e62      	subs	r2, r4, #1
 801076c:	4194      	sbcs	r4, r2
 801076e:	4323      	orrs	r3, r4
 8010770:	2407      	movs	r4, #7
 8010772:	2500      	movs	r5, #0
 8010774:	401c      	ands	r4, r3
 8010776:	2201      	movs	r2, #1
 8010778:	4641      	mov	r1, r8
 801077a:	400a      	ands	r2, r1
 801077c:	2c00      	cmp	r4, #0
 801077e:	d004      	beq.n	801078a <__aeabi_fsub+0x9e>
 8010780:	210f      	movs	r1, #15
 8010782:	4019      	ands	r1, r3
 8010784:	2904      	cmp	r1, #4
 8010786:	d000      	beq.n	801078a <__aeabi_fsub+0x9e>
 8010788:	3304      	adds	r3, #4
 801078a:	0159      	lsls	r1, r3, #5
 801078c:	d400      	bmi.n	8010790 <__aeabi_fsub+0xa4>
 801078e:	e080      	b.n	8010892 <__aeabi_fsub+0x1a6>
 8010790:	3501      	adds	r5, #1
 8010792:	b2ec      	uxtb	r4, r5
 8010794:	2dff      	cmp	r5, #255	; 0xff
 8010796:	d000      	beq.n	801079a <__aeabi_fsub+0xae>
 8010798:	e0a3      	b.n	80108e2 <__aeabi_fsub+0x1f6>
 801079a:	24ff      	movs	r4, #255	; 0xff
 801079c:	2300      	movs	r3, #0
 801079e:	025b      	lsls	r3, r3, #9
 80107a0:	05e4      	lsls	r4, r4, #23
 80107a2:	0a58      	lsrs	r0, r3, #9
 80107a4:	07d2      	lsls	r2, r2, #31
 80107a6:	4320      	orrs	r0, r4
 80107a8:	4310      	orrs	r0, r2
 80107aa:	bc0c      	pop	{r2, r3}
 80107ac:	4690      	mov	r8, r2
 80107ae:	4699      	mov	r9, r3
 80107b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107b2:	2e00      	cmp	r6, #0
 80107b4:	d174      	bne.n	80108a0 <__aeabi_fsub+0x1b4>
 80107b6:	1c60      	adds	r0, r4, #1
 80107b8:	b2c0      	uxtb	r0, r0
 80107ba:	2801      	cmp	r0, #1
 80107bc:	dc00      	bgt.n	80107c0 <__aeabi_fsub+0xd4>
 80107be:	e0a7      	b.n	8010910 <__aeabi_fsub+0x224>
 80107c0:	464a      	mov	r2, r9
 80107c2:	1a9c      	subs	r4, r3, r2
 80107c4:	0162      	lsls	r2, r4, #5
 80107c6:	d500      	bpl.n	80107ca <__aeabi_fsub+0xde>
 80107c8:	e0b6      	b.n	8010938 <__aeabi_fsub+0x24c>
 80107ca:	2c00      	cmp	r4, #0
 80107cc:	d1be      	bne.n	801074c <__aeabi_fsub+0x60>
 80107ce:	2200      	movs	r2, #0
 80107d0:	2400      	movs	r4, #0
 80107d2:	2300      	movs	r3, #0
 80107d4:	e7e3      	b.n	801079e <__aeabi_fsub+0xb2>
 80107d6:	2e00      	cmp	r6, #0
 80107d8:	dc00      	bgt.n	80107dc <__aeabi_fsub+0xf0>
 80107da:	e085      	b.n	80108e8 <__aeabi_fsub+0x1fc>
 80107dc:	2800      	cmp	r0, #0
 80107de:	d046      	beq.n	801086e <__aeabi_fsub+0x182>
 80107e0:	2cff      	cmp	r4, #255	; 0xff
 80107e2:	d049      	beq.n	8010878 <__aeabi_fsub+0x18c>
 80107e4:	2280      	movs	r2, #128	; 0x80
 80107e6:	4648      	mov	r0, r9
 80107e8:	04d2      	lsls	r2, r2, #19
 80107ea:	4310      	orrs	r0, r2
 80107ec:	4681      	mov	r9, r0
 80107ee:	2201      	movs	r2, #1
 80107f0:	2e1b      	cmp	r6, #27
 80107f2:	dc09      	bgt.n	8010808 <__aeabi_fsub+0x11c>
 80107f4:	2020      	movs	r0, #32
 80107f6:	464c      	mov	r4, r9
 80107f8:	1b80      	subs	r0, r0, r6
 80107fa:	4084      	lsls	r4, r0
 80107fc:	464a      	mov	r2, r9
 80107fe:	0020      	movs	r0, r4
 8010800:	40f2      	lsrs	r2, r6
 8010802:	1e44      	subs	r4, r0, #1
 8010804:	41a0      	sbcs	r0, r4
 8010806:	4302      	orrs	r2, r0
 8010808:	189b      	adds	r3, r3, r2
 801080a:	015a      	lsls	r2, r3, #5
 801080c:	d528      	bpl.n	8010860 <__aeabi_fsub+0x174>
 801080e:	3501      	adds	r5, #1
 8010810:	2dff      	cmp	r5, #255	; 0xff
 8010812:	d100      	bne.n	8010816 <__aeabi_fsub+0x12a>
 8010814:	e0a8      	b.n	8010968 <__aeabi_fsub+0x27c>
 8010816:	2201      	movs	r2, #1
 8010818:	2407      	movs	r4, #7
 801081a:	4994      	ldr	r1, [pc, #592]	; (8010a6c <__aeabi_fsub+0x380>)
 801081c:	401a      	ands	r2, r3
 801081e:	085b      	lsrs	r3, r3, #1
 8010820:	400b      	ands	r3, r1
 8010822:	4313      	orrs	r3, r2
 8010824:	401c      	ands	r4, r3
 8010826:	e7a6      	b.n	8010776 <__aeabi_fsub+0x8a>
 8010828:	2e00      	cmp	r6, #0
 801082a:	d000      	beq.n	801082e <__aeabi_fsub+0x142>
 801082c:	e778      	b.n	8010720 <__aeabi_fsub+0x34>
 801082e:	e775      	b.n	801071c <__aeabi_fsub+0x30>
 8010830:	2cff      	cmp	r4, #255	; 0xff
 8010832:	d054      	beq.n	80108de <__aeabi_fsub+0x1f2>
 8010834:	2280      	movs	r2, #128	; 0x80
 8010836:	4649      	mov	r1, r9
 8010838:	04d2      	lsls	r2, r2, #19
 801083a:	4311      	orrs	r1, r2
 801083c:	4689      	mov	r9, r1
 801083e:	2201      	movs	r2, #1
 8010840:	2e1b      	cmp	r6, #27
 8010842:	dc09      	bgt.n	8010858 <__aeabi_fsub+0x16c>
 8010844:	2120      	movs	r1, #32
 8010846:	4648      	mov	r0, r9
 8010848:	1b89      	subs	r1, r1, r6
 801084a:	4088      	lsls	r0, r1
 801084c:	464a      	mov	r2, r9
 801084e:	0001      	movs	r1, r0
 8010850:	40f2      	lsrs	r2, r6
 8010852:	1e48      	subs	r0, r1, #1
 8010854:	4181      	sbcs	r1, r0
 8010856:	430a      	orrs	r2, r1
 8010858:	1a9b      	subs	r3, r3, r2
 801085a:	015a      	lsls	r2, r3, #5
 801085c:	d500      	bpl.n	8010860 <__aeabi_fsub+0x174>
 801085e:	e773      	b.n	8010748 <__aeabi_fsub+0x5c>
 8010860:	2201      	movs	r2, #1
 8010862:	4641      	mov	r1, r8
 8010864:	400a      	ands	r2, r1
 8010866:	0759      	lsls	r1, r3, #29
 8010868:	d000      	beq.n	801086c <__aeabi_fsub+0x180>
 801086a:	e789      	b.n	8010780 <__aeabi_fsub+0x94>
 801086c:	e011      	b.n	8010892 <__aeabi_fsub+0x1a6>
 801086e:	4648      	mov	r0, r9
 8010870:	2800      	cmp	r0, #0
 8010872:	d158      	bne.n	8010926 <__aeabi_fsub+0x23a>
 8010874:	2cff      	cmp	r4, #255	; 0xff
 8010876:	d10c      	bne.n	8010892 <__aeabi_fsub+0x1a6>
 8010878:	08db      	lsrs	r3, r3, #3
 801087a:	2b00      	cmp	r3, #0
 801087c:	d100      	bne.n	8010880 <__aeabi_fsub+0x194>
 801087e:	e78c      	b.n	801079a <__aeabi_fsub+0xae>
 8010880:	2080      	movs	r0, #128	; 0x80
 8010882:	03c0      	lsls	r0, r0, #15
 8010884:	4303      	orrs	r3, r0
 8010886:	025b      	lsls	r3, r3, #9
 8010888:	0a5b      	lsrs	r3, r3, #9
 801088a:	24ff      	movs	r4, #255	; 0xff
 801088c:	e787      	b.n	801079e <__aeabi_fsub+0xb2>
 801088e:	2cff      	cmp	r4, #255	; 0xff
 8010890:	d025      	beq.n	80108de <__aeabi_fsub+0x1f2>
 8010892:	08db      	lsrs	r3, r3, #3
 8010894:	2dff      	cmp	r5, #255	; 0xff
 8010896:	d0f0      	beq.n	801087a <__aeabi_fsub+0x18e>
 8010898:	025b      	lsls	r3, r3, #9
 801089a:	0a5b      	lsrs	r3, r3, #9
 801089c:	b2ec      	uxtb	r4, r5
 801089e:	e77e      	b.n	801079e <__aeabi_fsub+0xb2>
 80108a0:	2c00      	cmp	r4, #0
 80108a2:	d04d      	beq.n	8010940 <__aeabi_fsub+0x254>
 80108a4:	28ff      	cmp	r0, #255	; 0xff
 80108a6:	d018      	beq.n	80108da <__aeabi_fsub+0x1ee>
 80108a8:	2480      	movs	r4, #128	; 0x80
 80108aa:	04e4      	lsls	r4, r4, #19
 80108ac:	4272      	negs	r2, r6
 80108ae:	4323      	orrs	r3, r4
 80108b0:	2a1b      	cmp	r2, #27
 80108b2:	dd00      	ble.n	80108b6 <__aeabi_fsub+0x1ca>
 80108b4:	e0c4      	b.n	8010a40 <__aeabi_fsub+0x354>
 80108b6:	001c      	movs	r4, r3
 80108b8:	2520      	movs	r5, #32
 80108ba:	40d4      	lsrs	r4, r2
 80108bc:	1aaa      	subs	r2, r5, r2
 80108be:	4093      	lsls	r3, r2
 80108c0:	1e5a      	subs	r2, r3, #1
 80108c2:	4193      	sbcs	r3, r2
 80108c4:	4323      	orrs	r3, r4
 80108c6:	464a      	mov	r2, r9
 80108c8:	0005      	movs	r5, r0
 80108ca:	1ad3      	subs	r3, r2, r3
 80108cc:	4688      	mov	r8, r1
 80108ce:	e738      	b.n	8010742 <__aeabi_fsub+0x56>
 80108d0:	1c72      	adds	r2, r6, #1
 80108d2:	d0f8      	beq.n	80108c6 <__aeabi_fsub+0x1da>
 80108d4:	43f2      	mvns	r2, r6
 80108d6:	28ff      	cmp	r0, #255	; 0xff
 80108d8:	d1ea      	bne.n	80108b0 <__aeabi_fsub+0x1c4>
 80108da:	000a      	movs	r2, r1
 80108dc:	464b      	mov	r3, r9
 80108de:	25ff      	movs	r5, #255	; 0xff
 80108e0:	e7d7      	b.n	8010892 <__aeabi_fsub+0x1a6>
 80108e2:	019b      	lsls	r3, r3, #6
 80108e4:	0a5b      	lsrs	r3, r3, #9
 80108e6:	e75a      	b.n	801079e <__aeabi_fsub+0xb2>
 80108e8:	2e00      	cmp	r6, #0
 80108ea:	d141      	bne.n	8010970 <__aeabi_fsub+0x284>
 80108ec:	1c65      	adds	r5, r4, #1
 80108ee:	b2e9      	uxtb	r1, r5
 80108f0:	2901      	cmp	r1, #1
 80108f2:	dd45      	ble.n	8010980 <__aeabi_fsub+0x294>
 80108f4:	2dff      	cmp	r5, #255	; 0xff
 80108f6:	d100      	bne.n	80108fa <__aeabi_fsub+0x20e>
 80108f8:	e74f      	b.n	801079a <__aeabi_fsub+0xae>
 80108fa:	2407      	movs	r4, #7
 80108fc:	444b      	add	r3, r9
 80108fe:	085b      	lsrs	r3, r3, #1
 8010900:	401c      	ands	r4, r3
 8010902:	e738      	b.n	8010776 <__aeabi_fsub+0x8a>
 8010904:	2207      	movs	r2, #7
 8010906:	4b5a      	ldr	r3, [pc, #360]	; (8010a70 <__aeabi_fsub+0x384>)
 8010908:	1a2d      	subs	r5, r5, r0
 801090a:	4023      	ands	r3, r4
 801090c:	4014      	ands	r4, r2
 801090e:	e732      	b.n	8010776 <__aeabi_fsub+0x8a>
 8010910:	2c00      	cmp	r4, #0
 8010912:	d11d      	bne.n	8010950 <__aeabi_fsub+0x264>
 8010914:	2b00      	cmp	r3, #0
 8010916:	d17a      	bne.n	8010a0e <__aeabi_fsub+0x322>
 8010918:	464b      	mov	r3, r9
 801091a:	2b00      	cmp	r3, #0
 801091c:	d100      	bne.n	8010920 <__aeabi_fsub+0x234>
 801091e:	e091      	b.n	8010a44 <__aeabi_fsub+0x358>
 8010920:	000a      	movs	r2, r1
 8010922:	2500      	movs	r5, #0
 8010924:	e7b5      	b.n	8010892 <__aeabi_fsub+0x1a6>
 8010926:	3e01      	subs	r6, #1
 8010928:	2e00      	cmp	r6, #0
 801092a:	d119      	bne.n	8010960 <__aeabi_fsub+0x274>
 801092c:	444b      	add	r3, r9
 801092e:	e76c      	b.n	801080a <__aeabi_fsub+0x11e>
 8010930:	2cff      	cmp	r4, #255	; 0xff
 8010932:	d184      	bne.n	801083e <__aeabi_fsub+0x152>
 8010934:	25ff      	movs	r5, #255	; 0xff
 8010936:	e7ac      	b.n	8010892 <__aeabi_fsub+0x1a6>
 8010938:	464a      	mov	r2, r9
 801093a:	4688      	mov	r8, r1
 801093c:	1ad4      	subs	r4, r2, r3
 801093e:	e705      	b.n	801074c <__aeabi_fsub+0x60>
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1c5      	bne.n	80108d0 <__aeabi_fsub+0x1e4>
 8010944:	000a      	movs	r2, r1
 8010946:	28ff      	cmp	r0, #255	; 0xff
 8010948:	d0c8      	beq.n	80108dc <__aeabi_fsub+0x1f0>
 801094a:	0005      	movs	r5, r0
 801094c:	464b      	mov	r3, r9
 801094e:	e7a0      	b.n	8010892 <__aeabi_fsub+0x1a6>
 8010950:	2b00      	cmp	r3, #0
 8010952:	d149      	bne.n	80109e8 <__aeabi_fsub+0x2fc>
 8010954:	464b      	mov	r3, r9
 8010956:	2b00      	cmp	r3, #0
 8010958:	d077      	beq.n	8010a4a <__aeabi_fsub+0x35e>
 801095a:	000a      	movs	r2, r1
 801095c:	25ff      	movs	r5, #255	; 0xff
 801095e:	e798      	b.n	8010892 <__aeabi_fsub+0x1a6>
 8010960:	2cff      	cmp	r4, #255	; 0xff
 8010962:	d000      	beq.n	8010966 <__aeabi_fsub+0x27a>
 8010964:	e743      	b.n	80107ee <__aeabi_fsub+0x102>
 8010966:	e787      	b.n	8010878 <__aeabi_fsub+0x18c>
 8010968:	000a      	movs	r2, r1
 801096a:	24ff      	movs	r4, #255	; 0xff
 801096c:	2300      	movs	r3, #0
 801096e:	e716      	b.n	801079e <__aeabi_fsub+0xb2>
 8010970:	2c00      	cmp	r4, #0
 8010972:	d115      	bne.n	80109a0 <__aeabi_fsub+0x2b4>
 8010974:	2b00      	cmp	r3, #0
 8010976:	d157      	bne.n	8010a28 <__aeabi_fsub+0x33c>
 8010978:	28ff      	cmp	r0, #255	; 0xff
 801097a:	d1e6      	bne.n	801094a <__aeabi_fsub+0x25e>
 801097c:	464b      	mov	r3, r9
 801097e:	e77b      	b.n	8010878 <__aeabi_fsub+0x18c>
 8010980:	2c00      	cmp	r4, #0
 8010982:	d120      	bne.n	80109c6 <__aeabi_fsub+0x2da>
 8010984:	2b00      	cmp	r3, #0
 8010986:	d057      	beq.n	8010a38 <__aeabi_fsub+0x34c>
 8010988:	4649      	mov	r1, r9
 801098a:	2900      	cmp	r1, #0
 801098c:	d053      	beq.n	8010a36 <__aeabi_fsub+0x34a>
 801098e:	444b      	add	r3, r9
 8010990:	015a      	lsls	r2, r3, #5
 8010992:	d568      	bpl.n	8010a66 <__aeabi_fsub+0x37a>
 8010994:	2407      	movs	r4, #7
 8010996:	4a36      	ldr	r2, [pc, #216]	; (8010a70 <__aeabi_fsub+0x384>)
 8010998:	401c      	ands	r4, r3
 801099a:	2501      	movs	r5, #1
 801099c:	4013      	ands	r3, r2
 801099e:	e6ea      	b.n	8010776 <__aeabi_fsub+0x8a>
 80109a0:	28ff      	cmp	r0, #255	; 0xff
 80109a2:	d0eb      	beq.n	801097c <__aeabi_fsub+0x290>
 80109a4:	2280      	movs	r2, #128	; 0x80
 80109a6:	04d2      	lsls	r2, r2, #19
 80109a8:	4276      	negs	r6, r6
 80109aa:	4313      	orrs	r3, r2
 80109ac:	2e1b      	cmp	r6, #27
 80109ae:	dc53      	bgt.n	8010a58 <__aeabi_fsub+0x36c>
 80109b0:	2520      	movs	r5, #32
 80109b2:	1bad      	subs	r5, r5, r6
 80109b4:	001a      	movs	r2, r3
 80109b6:	40ab      	lsls	r3, r5
 80109b8:	40f2      	lsrs	r2, r6
 80109ba:	1e5c      	subs	r4, r3, #1
 80109bc:	41a3      	sbcs	r3, r4
 80109be:	4313      	orrs	r3, r2
 80109c0:	444b      	add	r3, r9
 80109c2:	0005      	movs	r5, r0
 80109c4:	e721      	b.n	801080a <__aeabi_fsub+0x11e>
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d0d8      	beq.n	801097c <__aeabi_fsub+0x290>
 80109ca:	4649      	mov	r1, r9
 80109cc:	2900      	cmp	r1, #0
 80109ce:	d100      	bne.n	80109d2 <__aeabi_fsub+0x2e6>
 80109d0:	e752      	b.n	8010878 <__aeabi_fsub+0x18c>
 80109d2:	2180      	movs	r1, #128	; 0x80
 80109d4:	03c9      	lsls	r1, r1, #15
 80109d6:	420f      	tst	r7, r1
 80109d8:	d100      	bne.n	80109dc <__aeabi_fsub+0x2f0>
 80109da:	e74d      	b.n	8010878 <__aeabi_fsub+0x18c>
 80109dc:	4660      	mov	r0, ip
 80109de:	4208      	tst	r0, r1
 80109e0:	d000      	beq.n	80109e4 <__aeabi_fsub+0x2f8>
 80109e2:	e749      	b.n	8010878 <__aeabi_fsub+0x18c>
 80109e4:	464b      	mov	r3, r9
 80109e6:	e747      	b.n	8010878 <__aeabi_fsub+0x18c>
 80109e8:	4648      	mov	r0, r9
 80109ea:	25ff      	movs	r5, #255	; 0xff
 80109ec:	2800      	cmp	r0, #0
 80109ee:	d100      	bne.n	80109f2 <__aeabi_fsub+0x306>
 80109f0:	e74f      	b.n	8010892 <__aeabi_fsub+0x1a6>
 80109f2:	2280      	movs	r2, #128	; 0x80
 80109f4:	03d2      	lsls	r2, r2, #15
 80109f6:	4217      	tst	r7, r2
 80109f8:	d004      	beq.n	8010a04 <__aeabi_fsub+0x318>
 80109fa:	4660      	mov	r0, ip
 80109fc:	4210      	tst	r0, r2
 80109fe:	d101      	bne.n	8010a04 <__aeabi_fsub+0x318>
 8010a00:	464b      	mov	r3, r9
 8010a02:	4688      	mov	r8, r1
 8010a04:	2201      	movs	r2, #1
 8010a06:	4641      	mov	r1, r8
 8010a08:	25ff      	movs	r5, #255	; 0xff
 8010a0a:	400a      	ands	r2, r1
 8010a0c:	e741      	b.n	8010892 <__aeabi_fsub+0x1a6>
 8010a0e:	4648      	mov	r0, r9
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d01f      	beq.n	8010a54 <__aeabi_fsub+0x368>
 8010a14:	1a1a      	subs	r2, r3, r0
 8010a16:	0150      	lsls	r0, r2, #5
 8010a18:	d520      	bpl.n	8010a5c <__aeabi_fsub+0x370>
 8010a1a:	464a      	mov	r2, r9
 8010a1c:	2407      	movs	r4, #7
 8010a1e:	1ad3      	subs	r3, r2, r3
 8010a20:	401c      	ands	r4, r3
 8010a22:	4688      	mov	r8, r1
 8010a24:	2500      	movs	r5, #0
 8010a26:	e6a6      	b.n	8010776 <__aeabi_fsub+0x8a>
 8010a28:	1c74      	adds	r4, r6, #1
 8010a2a:	d0c9      	beq.n	80109c0 <__aeabi_fsub+0x2d4>
 8010a2c:	43f6      	mvns	r6, r6
 8010a2e:	28ff      	cmp	r0, #255	; 0xff
 8010a30:	d1bc      	bne.n	80109ac <__aeabi_fsub+0x2c0>
 8010a32:	464b      	mov	r3, r9
 8010a34:	e720      	b.n	8010878 <__aeabi_fsub+0x18c>
 8010a36:	4699      	mov	r9, r3
 8010a38:	464b      	mov	r3, r9
 8010a3a:	2500      	movs	r5, #0
 8010a3c:	08db      	lsrs	r3, r3, #3
 8010a3e:	e72b      	b.n	8010898 <__aeabi_fsub+0x1ac>
 8010a40:	2301      	movs	r3, #1
 8010a42:	e740      	b.n	80108c6 <__aeabi_fsub+0x1da>
 8010a44:	2200      	movs	r2, #0
 8010a46:	2300      	movs	r3, #0
 8010a48:	e6a9      	b.n	801079e <__aeabi_fsub+0xb2>
 8010a4a:	2380      	movs	r3, #128	; 0x80
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	03db      	lsls	r3, r3, #15
 8010a50:	24ff      	movs	r4, #255	; 0xff
 8010a52:	e6a4      	b.n	801079e <__aeabi_fsub+0xb2>
 8010a54:	2500      	movs	r5, #0
 8010a56:	e71c      	b.n	8010892 <__aeabi_fsub+0x1a6>
 8010a58:	2301      	movs	r3, #1
 8010a5a:	e7b1      	b.n	80109c0 <__aeabi_fsub+0x2d4>
 8010a5c:	2a00      	cmp	r2, #0
 8010a5e:	d0f1      	beq.n	8010a44 <__aeabi_fsub+0x358>
 8010a60:	0013      	movs	r3, r2
 8010a62:	2500      	movs	r5, #0
 8010a64:	e6fc      	b.n	8010860 <__aeabi_fsub+0x174>
 8010a66:	2500      	movs	r5, #0
 8010a68:	e6fa      	b.n	8010860 <__aeabi_fsub+0x174>
 8010a6a:	46c0      	nop			; (mov r8, r8)
 8010a6c:	7dffffff 	.word	0x7dffffff
 8010a70:	fbffffff 	.word	0xfbffffff

08010a74 <__clzsi2>:
 8010a74:	211c      	movs	r1, #28
 8010a76:	2301      	movs	r3, #1
 8010a78:	041b      	lsls	r3, r3, #16
 8010a7a:	4298      	cmp	r0, r3
 8010a7c:	d301      	bcc.n	8010a82 <__clzsi2+0xe>
 8010a7e:	0c00      	lsrs	r0, r0, #16
 8010a80:	3910      	subs	r1, #16
 8010a82:	0a1b      	lsrs	r3, r3, #8
 8010a84:	4298      	cmp	r0, r3
 8010a86:	d301      	bcc.n	8010a8c <__clzsi2+0x18>
 8010a88:	0a00      	lsrs	r0, r0, #8
 8010a8a:	3908      	subs	r1, #8
 8010a8c:	091b      	lsrs	r3, r3, #4
 8010a8e:	4298      	cmp	r0, r3
 8010a90:	d301      	bcc.n	8010a96 <__clzsi2+0x22>
 8010a92:	0900      	lsrs	r0, r0, #4
 8010a94:	3904      	subs	r1, #4
 8010a96:	a202      	add	r2, pc, #8	; (adr r2, 8010aa0 <__clzsi2+0x2c>)
 8010a98:	5c10      	ldrb	r0, [r2, r0]
 8010a9a:	1840      	adds	r0, r0, r1
 8010a9c:	4770      	bx	lr
 8010a9e:	46c0      	nop			; (mov r8, r8)
 8010aa0:	02020304 	.word	0x02020304
 8010aa4:	01010101 	.word	0x01010101
	...

08010ab0 <__gnu_thumb1_case_sqi>:
 8010ab0:	b402      	push	{r1}
 8010ab2:	4671      	mov	r1, lr
 8010ab4:	0849      	lsrs	r1, r1, #1
 8010ab6:	0049      	lsls	r1, r1, #1
 8010ab8:	5609      	ldrsb	r1, [r1, r0]
 8010aba:	0049      	lsls	r1, r1, #1
 8010abc:	448e      	add	lr, r1
 8010abe:	bc02      	pop	{r1}
 8010ac0:	4770      	bx	lr
 8010ac2:	46c0      	nop			; (mov r8, r8)

08010ac4 <__gnu_thumb1_case_uqi>:
 8010ac4:	b402      	push	{r1}
 8010ac6:	4671      	mov	r1, lr
 8010ac8:	0849      	lsrs	r1, r1, #1
 8010aca:	0049      	lsls	r1, r1, #1
 8010acc:	5c09      	ldrb	r1, [r1, r0]
 8010ace:	0049      	lsls	r1, r1, #1
 8010ad0:	448e      	add	lr, r1
 8010ad2:	bc02      	pop	{r1}
 8010ad4:	4770      	bx	lr
 8010ad6:	46c0      	nop			; (mov r8, r8)

08010ad8 <__gnu_thumb1_case_uhi>:
 8010ad8:	b403      	push	{r0, r1}
 8010ada:	4671      	mov	r1, lr
 8010adc:	0849      	lsrs	r1, r1, #1
 8010ade:	0040      	lsls	r0, r0, #1
 8010ae0:	0049      	lsls	r1, r1, #1
 8010ae2:	5a09      	ldrh	r1, [r1, r0]
 8010ae4:	0049      	lsls	r1, r1, #1
 8010ae6:	448e      	add	lr, r1
 8010ae8:	bc03      	pop	{r0, r1}
 8010aea:	4770      	bx	lr

08010aec <__udivsi3>:
 8010aec:	2200      	movs	r2, #0
 8010aee:	0843      	lsrs	r3, r0, #1
 8010af0:	428b      	cmp	r3, r1
 8010af2:	d374      	bcc.n	8010bde <__udivsi3+0xf2>
 8010af4:	0903      	lsrs	r3, r0, #4
 8010af6:	428b      	cmp	r3, r1
 8010af8:	d35f      	bcc.n	8010bba <__udivsi3+0xce>
 8010afa:	0a03      	lsrs	r3, r0, #8
 8010afc:	428b      	cmp	r3, r1
 8010afe:	d344      	bcc.n	8010b8a <__udivsi3+0x9e>
 8010b00:	0b03      	lsrs	r3, r0, #12
 8010b02:	428b      	cmp	r3, r1
 8010b04:	d328      	bcc.n	8010b58 <__udivsi3+0x6c>
 8010b06:	0c03      	lsrs	r3, r0, #16
 8010b08:	428b      	cmp	r3, r1
 8010b0a:	d30d      	bcc.n	8010b28 <__udivsi3+0x3c>
 8010b0c:	22ff      	movs	r2, #255	; 0xff
 8010b0e:	0209      	lsls	r1, r1, #8
 8010b10:	ba12      	rev	r2, r2
 8010b12:	0c03      	lsrs	r3, r0, #16
 8010b14:	428b      	cmp	r3, r1
 8010b16:	d302      	bcc.n	8010b1e <__udivsi3+0x32>
 8010b18:	1212      	asrs	r2, r2, #8
 8010b1a:	0209      	lsls	r1, r1, #8
 8010b1c:	d065      	beq.n	8010bea <__udivsi3+0xfe>
 8010b1e:	0b03      	lsrs	r3, r0, #12
 8010b20:	428b      	cmp	r3, r1
 8010b22:	d319      	bcc.n	8010b58 <__udivsi3+0x6c>
 8010b24:	e000      	b.n	8010b28 <__udivsi3+0x3c>
 8010b26:	0a09      	lsrs	r1, r1, #8
 8010b28:	0bc3      	lsrs	r3, r0, #15
 8010b2a:	428b      	cmp	r3, r1
 8010b2c:	d301      	bcc.n	8010b32 <__udivsi3+0x46>
 8010b2e:	03cb      	lsls	r3, r1, #15
 8010b30:	1ac0      	subs	r0, r0, r3
 8010b32:	4152      	adcs	r2, r2
 8010b34:	0b83      	lsrs	r3, r0, #14
 8010b36:	428b      	cmp	r3, r1
 8010b38:	d301      	bcc.n	8010b3e <__udivsi3+0x52>
 8010b3a:	038b      	lsls	r3, r1, #14
 8010b3c:	1ac0      	subs	r0, r0, r3
 8010b3e:	4152      	adcs	r2, r2
 8010b40:	0b43      	lsrs	r3, r0, #13
 8010b42:	428b      	cmp	r3, r1
 8010b44:	d301      	bcc.n	8010b4a <__udivsi3+0x5e>
 8010b46:	034b      	lsls	r3, r1, #13
 8010b48:	1ac0      	subs	r0, r0, r3
 8010b4a:	4152      	adcs	r2, r2
 8010b4c:	0b03      	lsrs	r3, r0, #12
 8010b4e:	428b      	cmp	r3, r1
 8010b50:	d301      	bcc.n	8010b56 <__udivsi3+0x6a>
 8010b52:	030b      	lsls	r3, r1, #12
 8010b54:	1ac0      	subs	r0, r0, r3
 8010b56:	4152      	adcs	r2, r2
 8010b58:	0ac3      	lsrs	r3, r0, #11
 8010b5a:	428b      	cmp	r3, r1
 8010b5c:	d301      	bcc.n	8010b62 <__udivsi3+0x76>
 8010b5e:	02cb      	lsls	r3, r1, #11
 8010b60:	1ac0      	subs	r0, r0, r3
 8010b62:	4152      	adcs	r2, r2
 8010b64:	0a83      	lsrs	r3, r0, #10
 8010b66:	428b      	cmp	r3, r1
 8010b68:	d301      	bcc.n	8010b6e <__udivsi3+0x82>
 8010b6a:	028b      	lsls	r3, r1, #10
 8010b6c:	1ac0      	subs	r0, r0, r3
 8010b6e:	4152      	adcs	r2, r2
 8010b70:	0a43      	lsrs	r3, r0, #9
 8010b72:	428b      	cmp	r3, r1
 8010b74:	d301      	bcc.n	8010b7a <__udivsi3+0x8e>
 8010b76:	024b      	lsls	r3, r1, #9
 8010b78:	1ac0      	subs	r0, r0, r3
 8010b7a:	4152      	adcs	r2, r2
 8010b7c:	0a03      	lsrs	r3, r0, #8
 8010b7e:	428b      	cmp	r3, r1
 8010b80:	d301      	bcc.n	8010b86 <__udivsi3+0x9a>
 8010b82:	020b      	lsls	r3, r1, #8
 8010b84:	1ac0      	subs	r0, r0, r3
 8010b86:	4152      	adcs	r2, r2
 8010b88:	d2cd      	bcs.n	8010b26 <__udivsi3+0x3a>
 8010b8a:	09c3      	lsrs	r3, r0, #7
 8010b8c:	428b      	cmp	r3, r1
 8010b8e:	d301      	bcc.n	8010b94 <__udivsi3+0xa8>
 8010b90:	01cb      	lsls	r3, r1, #7
 8010b92:	1ac0      	subs	r0, r0, r3
 8010b94:	4152      	adcs	r2, r2
 8010b96:	0983      	lsrs	r3, r0, #6
 8010b98:	428b      	cmp	r3, r1
 8010b9a:	d301      	bcc.n	8010ba0 <__udivsi3+0xb4>
 8010b9c:	018b      	lsls	r3, r1, #6
 8010b9e:	1ac0      	subs	r0, r0, r3
 8010ba0:	4152      	adcs	r2, r2
 8010ba2:	0943      	lsrs	r3, r0, #5
 8010ba4:	428b      	cmp	r3, r1
 8010ba6:	d301      	bcc.n	8010bac <__udivsi3+0xc0>
 8010ba8:	014b      	lsls	r3, r1, #5
 8010baa:	1ac0      	subs	r0, r0, r3
 8010bac:	4152      	adcs	r2, r2
 8010bae:	0903      	lsrs	r3, r0, #4
 8010bb0:	428b      	cmp	r3, r1
 8010bb2:	d301      	bcc.n	8010bb8 <__udivsi3+0xcc>
 8010bb4:	010b      	lsls	r3, r1, #4
 8010bb6:	1ac0      	subs	r0, r0, r3
 8010bb8:	4152      	adcs	r2, r2
 8010bba:	08c3      	lsrs	r3, r0, #3
 8010bbc:	428b      	cmp	r3, r1
 8010bbe:	d301      	bcc.n	8010bc4 <__udivsi3+0xd8>
 8010bc0:	00cb      	lsls	r3, r1, #3
 8010bc2:	1ac0      	subs	r0, r0, r3
 8010bc4:	4152      	adcs	r2, r2
 8010bc6:	0883      	lsrs	r3, r0, #2
 8010bc8:	428b      	cmp	r3, r1
 8010bca:	d301      	bcc.n	8010bd0 <__udivsi3+0xe4>
 8010bcc:	008b      	lsls	r3, r1, #2
 8010bce:	1ac0      	subs	r0, r0, r3
 8010bd0:	4152      	adcs	r2, r2
 8010bd2:	0843      	lsrs	r3, r0, #1
 8010bd4:	428b      	cmp	r3, r1
 8010bd6:	d301      	bcc.n	8010bdc <__udivsi3+0xf0>
 8010bd8:	004b      	lsls	r3, r1, #1
 8010bda:	1ac0      	subs	r0, r0, r3
 8010bdc:	4152      	adcs	r2, r2
 8010bde:	1a41      	subs	r1, r0, r1
 8010be0:	d200      	bcs.n	8010be4 <__udivsi3+0xf8>
 8010be2:	4601      	mov	r1, r0
 8010be4:	4152      	adcs	r2, r2
 8010be6:	4610      	mov	r0, r2
 8010be8:	4770      	bx	lr
 8010bea:	e7ff      	b.n	8010bec <__udivsi3+0x100>
 8010bec:	b501      	push	{r0, lr}
 8010bee:	2000      	movs	r0, #0
 8010bf0:	f000 f8f0 	bl	8010dd4 <__aeabi_idiv0>
 8010bf4:	bd02      	pop	{r1, pc}
 8010bf6:	46c0      	nop			; (mov r8, r8)

08010bf8 <__aeabi_uidivmod>:
 8010bf8:	2900      	cmp	r1, #0
 8010bfa:	d0f7      	beq.n	8010bec <__udivsi3+0x100>
 8010bfc:	e776      	b.n	8010aec <__udivsi3>
 8010bfe:	4770      	bx	lr

08010c00 <__divsi3>:
 8010c00:	4603      	mov	r3, r0
 8010c02:	430b      	orrs	r3, r1
 8010c04:	d47f      	bmi.n	8010d06 <__divsi3+0x106>
 8010c06:	2200      	movs	r2, #0
 8010c08:	0843      	lsrs	r3, r0, #1
 8010c0a:	428b      	cmp	r3, r1
 8010c0c:	d374      	bcc.n	8010cf8 <__divsi3+0xf8>
 8010c0e:	0903      	lsrs	r3, r0, #4
 8010c10:	428b      	cmp	r3, r1
 8010c12:	d35f      	bcc.n	8010cd4 <__divsi3+0xd4>
 8010c14:	0a03      	lsrs	r3, r0, #8
 8010c16:	428b      	cmp	r3, r1
 8010c18:	d344      	bcc.n	8010ca4 <__divsi3+0xa4>
 8010c1a:	0b03      	lsrs	r3, r0, #12
 8010c1c:	428b      	cmp	r3, r1
 8010c1e:	d328      	bcc.n	8010c72 <__divsi3+0x72>
 8010c20:	0c03      	lsrs	r3, r0, #16
 8010c22:	428b      	cmp	r3, r1
 8010c24:	d30d      	bcc.n	8010c42 <__divsi3+0x42>
 8010c26:	22ff      	movs	r2, #255	; 0xff
 8010c28:	0209      	lsls	r1, r1, #8
 8010c2a:	ba12      	rev	r2, r2
 8010c2c:	0c03      	lsrs	r3, r0, #16
 8010c2e:	428b      	cmp	r3, r1
 8010c30:	d302      	bcc.n	8010c38 <__divsi3+0x38>
 8010c32:	1212      	asrs	r2, r2, #8
 8010c34:	0209      	lsls	r1, r1, #8
 8010c36:	d065      	beq.n	8010d04 <__divsi3+0x104>
 8010c38:	0b03      	lsrs	r3, r0, #12
 8010c3a:	428b      	cmp	r3, r1
 8010c3c:	d319      	bcc.n	8010c72 <__divsi3+0x72>
 8010c3e:	e000      	b.n	8010c42 <__divsi3+0x42>
 8010c40:	0a09      	lsrs	r1, r1, #8
 8010c42:	0bc3      	lsrs	r3, r0, #15
 8010c44:	428b      	cmp	r3, r1
 8010c46:	d301      	bcc.n	8010c4c <__divsi3+0x4c>
 8010c48:	03cb      	lsls	r3, r1, #15
 8010c4a:	1ac0      	subs	r0, r0, r3
 8010c4c:	4152      	adcs	r2, r2
 8010c4e:	0b83      	lsrs	r3, r0, #14
 8010c50:	428b      	cmp	r3, r1
 8010c52:	d301      	bcc.n	8010c58 <__divsi3+0x58>
 8010c54:	038b      	lsls	r3, r1, #14
 8010c56:	1ac0      	subs	r0, r0, r3
 8010c58:	4152      	adcs	r2, r2
 8010c5a:	0b43      	lsrs	r3, r0, #13
 8010c5c:	428b      	cmp	r3, r1
 8010c5e:	d301      	bcc.n	8010c64 <__divsi3+0x64>
 8010c60:	034b      	lsls	r3, r1, #13
 8010c62:	1ac0      	subs	r0, r0, r3
 8010c64:	4152      	adcs	r2, r2
 8010c66:	0b03      	lsrs	r3, r0, #12
 8010c68:	428b      	cmp	r3, r1
 8010c6a:	d301      	bcc.n	8010c70 <__divsi3+0x70>
 8010c6c:	030b      	lsls	r3, r1, #12
 8010c6e:	1ac0      	subs	r0, r0, r3
 8010c70:	4152      	adcs	r2, r2
 8010c72:	0ac3      	lsrs	r3, r0, #11
 8010c74:	428b      	cmp	r3, r1
 8010c76:	d301      	bcc.n	8010c7c <__divsi3+0x7c>
 8010c78:	02cb      	lsls	r3, r1, #11
 8010c7a:	1ac0      	subs	r0, r0, r3
 8010c7c:	4152      	adcs	r2, r2
 8010c7e:	0a83      	lsrs	r3, r0, #10
 8010c80:	428b      	cmp	r3, r1
 8010c82:	d301      	bcc.n	8010c88 <__divsi3+0x88>
 8010c84:	028b      	lsls	r3, r1, #10
 8010c86:	1ac0      	subs	r0, r0, r3
 8010c88:	4152      	adcs	r2, r2
 8010c8a:	0a43      	lsrs	r3, r0, #9
 8010c8c:	428b      	cmp	r3, r1
 8010c8e:	d301      	bcc.n	8010c94 <__divsi3+0x94>
 8010c90:	024b      	lsls	r3, r1, #9
 8010c92:	1ac0      	subs	r0, r0, r3
 8010c94:	4152      	adcs	r2, r2
 8010c96:	0a03      	lsrs	r3, r0, #8
 8010c98:	428b      	cmp	r3, r1
 8010c9a:	d301      	bcc.n	8010ca0 <__divsi3+0xa0>
 8010c9c:	020b      	lsls	r3, r1, #8
 8010c9e:	1ac0      	subs	r0, r0, r3
 8010ca0:	4152      	adcs	r2, r2
 8010ca2:	d2cd      	bcs.n	8010c40 <__divsi3+0x40>
 8010ca4:	09c3      	lsrs	r3, r0, #7
 8010ca6:	428b      	cmp	r3, r1
 8010ca8:	d301      	bcc.n	8010cae <__divsi3+0xae>
 8010caa:	01cb      	lsls	r3, r1, #7
 8010cac:	1ac0      	subs	r0, r0, r3
 8010cae:	4152      	adcs	r2, r2
 8010cb0:	0983      	lsrs	r3, r0, #6
 8010cb2:	428b      	cmp	r3, r1
 8010cb4:	d301      	bcc.n	8010cba <__divsi3+0xba>
 8010cb6:	018b      	lsls	r3, r1, #6
 8010cb8:	1ac0      	subs	r0, r0, r3
 8010cba:	4152      	adcs	r2, r2
 8010cbc:	0943      	lsrs	r3, r0, #5
 8010cbe:	428b      	cmp	r3, r1
 8010cc0:	d301      	bcc.n	8010cc6 <__divsi3+0xc6>
 8010cc2:	014b      	lsls	r3, r1, #5
 8010cc4:	1ac0      	subs	r0, r0, r3
 8010cc6:	4152      	adcs	r2, r2
 8010cc8:	0903      	lsrs	r3, r0, #4
 8010cca:	428b      	cmp	r3, r1
 8010ccc:	d301      	bcc.n	8010cd2 <__divsi3+0xd2>
 8010cce:	010b      	lsls	r3, r1, #4
 8010cd0:	1ac0      	subs	r0, r0, r3
 8010cd2:	4152      	adcs	r2, r2
 8010cd4:	08c3      	lsrs	r3, r0, #3
 8010cd6:	428b      	cmp	r3, r1
 8010cd8:	d301      	bcc.n	8010cde <__divsi3+0xde>
 8010cda:	00cb      	lsls	r3, r1, #3
 8010cdc:	1ac0      	subs	r0, r0, r3
 8010cde:	4152      	adcs	r2, r2
 8010ce0:	0883      	lsrs	r3, r0, #2
 8010ce2:	428b      	cmp	r3, r1
 8010ce4:	d301      	bcc.n	8010cea <__divsi3+0xea>
 8010ce6:	008b      	lsls	r3, r1, #2
 8010ce8:	1ac0      	subs	r0, r0, r3
 8010cea:	4152      	adcs	r2, r2
 8010cec:	0843      	lsrs	r3, r0, #1
 8010cee:	428b      	cmp	r3, r1
 8010cf0:	d301      	bcc.n	8010cf6 <__divsi3+0xf6>
 8010cf2:	004b      	lsls	r3, r1, #1
 8010cf4:	1ac0      	subs	r0, r0, r3
 8010cf6:	4152      	adcs	r2, r2
 8010cf8:	1a41      	subs	r1, r0, r1
 8010cfa:	d200      	bcs.n	8010cfe <__divsi3+0xfe>
 8010cfc:	4601      	mov	r1, r0
 8010cfe:	4152      	adcs	r2, r2
 8010d00:	4610      	mov	r0, r2
 8010d02:	4770      	bx	lr
 8010d04:	e05d      	b.n	8010dc2 <__divsi3+0x1c2>
 8010d06:	0fca      	lsrs	r2, r1, #31
 8010d08:	d000      	beq.n	8010d0c <__divsi3+0x10c>
 8010d0a:	4249      	negs	r1, r1
 8010d0c:	1003      	asrs	r3, r0, #32
 8010d0e:	d300      	bcc.n	8010d12 <__divsi3+0x112>
 8010d10:	4240      	negs	r0, r0
 8010d12:	4053      	eors	r3, r2
 8010d14:	2200      	movs	r2, #0
 8010d16:	469c      	mov	ip, r3
 8010d18:	0903      	lsrs	r3, r0, #4
 8010d1a:	428b      	cmp	r3, r1
 8010d1c:	d32d      	bcc.n	8010d7a <__divsi3+0x17a>
 8010d1e:	0a03      	lsrs	r3, r0, #8
 8010d20:	428b      	cmp	r3, r1
 8010d22:	d312      	bcc.n	8010d4a <__divsi3+0x14a>
 8010d24:	22fc      	movs	r2, #252	; 0xfc
 8010d26:	0189      	lsls	r1, r1, #6
 8010d28:	ba12      	rev	r2, r2
 8010d2a:	0a03      	lsrs	r3, r0, #8
 8010d2c:	428b      	cmp	r3, r1
 8010d2e:	d30c      	bcc.n	8010d4a <__divsi3+0x14a>
 8010d30:	0189      	lsls	r1, r1, #6
 8010d32:	1192      	asrs	r2, r2, #6
 8010d34:	428b      	cmp	r3, r1
 8010d36:	d308      	bcc.n	8010d4a <__divsi3+0x14a>
 8010d38:	0189      	lsls	r1, r1, #6
 8010d3a:	1192      	asrs	r2, r2, #6
 8010d3c:	428b      	cmp	r3, r1
 8010d3e:	d304      	bcc.n	8010d4a <__divsi3+0x14a>
 8010d40:	0189      	lsls	r1, r1, #6
 8010d42:	d03a      	beq.n	8010dba <__divsi3+0x1ba>
 8010d44:	1192      	asrs	r2, r2, #6
 8010d46:	e000      	b.n	8010d4a <__divsi3+0x14a>
 8010d48:	0989      	lsrs	r1, r1, #6
 8010d4a:	09c3      	lsrs	r3, r0, #7
 8010d4c:	428b      	cmp	r3, r1
 8010d4e:	d301      	bcc.n	8010d54 <__divsi3+0x154>
 8010d50:	01cb      	lsls	r3, r1, #7
 8010d52:	1ac0      	subs	r0, r0, r3
 8010d54:	4152      	adcs	r2, r2
 8010d56:	0983      	lsrs	r3, r0, #6
 8010d58:	428b      	cmp	r3, r1
 8010d5a:	d301      	bcc.n	8010d60 <__divsi3+0x160>
 8010d5c:	018b      	lsls	r3, r1, #6
 8010d5e:	1ac0      	subs	r0, r0, r3
 8010d60:	4152      	adcs	r2, r2
 8010d62:	0943      	lsrs	r3, r0, #5
 8010d64:	428b      	cmp	r3, r1
 8010d66:	d301      	bcc.n	8010d6c <__divsi3+0x16c>
 8010d68:	014b      	lsls	r3, r1, #5
 8010d6a:	1ac0      	subs	r0, r0, r3
 8010d6c:	4152      	adcs	r2, r2
 8010d6e:	0903      	lsrs	r3, r0, #4
 8010d70:	428b      	cmp	r3, r1
 8010d72:	d301      	bcc.n	8010d78 <__divsi3+0x178>
 8010d74:	010b      	lsls	r3, r1, #4
 8010d76:	1ac0      	subs	r0, r0, r3
 8010d78:	4152      	adcs	r2, r2
 8010d7a:	08c3      	lsrs	r3, r0, #3
 8010d7c:	428b      	cmp	r3, r1
 8010d7e:	d301      	bcc.n	8010d84 <__divsi3+0x184>
 8010d80:	00cb      	lsls	r3, r1, #3
 8010d82:	1ac0      	subs	r0, r0, r3
 8010d84:	4152      	adcs	r2, r2
 8010d86:	0883      	lsrs	r3, r0, #2
 8010d88:	428b      	cmp	r3, r1
 8010d8a:	d301      	bcc.n	8010d90 <__divsi3+0x190>
 8010d8c:	008b      	lsls	r3, r1, #2
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	4152      	adcs	r2, r2
 8010d92:	d2d9      	bcs.n	8010d48 <__divsi3+0x148>
 8010d94:	0843      	lsrs	r3, r0, #1
 8010d96:	428b      	cmp	r3, r1
 8010d98:	d301      	bcc.n	8010d9e <__divsi3+0x19e>
 8010d9a:	004b      	lsls	r3, r1, #1
 8010d9c:	1ac0      	subs	r0, r0, r3
 8010d9e:	4152      	adcs	r2, r2
 8010da0:	1a41      	subs	r1, r0, r1
 8010da2:	d200      	bcs.n	8010da6 <__divsi3+0x1a6>
 8010da4:	4601      	mov	r1, r0
 8010da6:	4663      	mov	r3, ip
 8010da8:	4152      	adcs	r2, r2
 8010daa:	105b      	asrs	r3, r3, #1
 8010dac:	4610      	mov	r0, r2
 8010dae:	d301      	bcc.n	8010db4 <__divsi3+0x1b4>
 8010db0:	4240      	negs	r0, r0
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d500      	bpl.n	8010db8 <__divsi3+0x1b8>
 8010db6:	4249      	negs	r1, r1
 8010db8:	4770      	bx	lr
 8010dba:	4663      	mov	r3, ip
 8010dbc:	105b      	asrs	r3, r3, #1
 8010dbe:	d300      	bcc.n	8010dc2 <__divsi3+0x1c2>
 8010dc0:	4240      	negs	r0, r0
 8010dc2:	b501      	push	{r0, lr}
 8010dc4:	2000      	movs	r0, #0
 8010dc6:	f000 f805 	bl	8010dd4 <__aeabi_idiv0>
 8010dca:	bd02      	pop	{r1, pc}

08010dcc <__aeabi_idivmod>:
 8010dcc:	2900      	cmp	r1, #0
 8010dce:	d0f8      	beq.n	8010dc2 <__divsi3+0x1c2>
 8010dd0:	e716      	b.n	8010c00 <__divsi3>
 8010dd2:	4770      	bx	lr

08010dd4 <__aeabi_idiv0>:
 8010dd4:	4770      	bx	lr
 8010dd6:	46c0      	nop			; (mov r8, r8)

08010dd8 <__aeabi_cdrcmple>:
 8010dd8:	4684      	mov	ip, r0
 8010dda:	1c10      	adds	r0, r2, #0
 8010ddc:	4662      	mov	r2, ip
 8010dde:	468c      	mov	ip, r1
 8010de0:	1c19      	adds	r1, r3, #0
 8010de2:	4663      	mov	r3, ip
 8010de4:	e000      	b.n	8010de8 <__aeabi_cdcmpeq>
 8010de6:	46c0      	nop			; (mov r8, r8)

08010de8 <__aeabi_cdcmpeq>:
 8010de8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010dea:	f001 f9c9 	bl	8012180 <__ledf2>
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d401      	bmi.n	8010df6 <__aeabi_cdcmpeq+0xe>
 8010df2:	2100      	movs	r1, #0
 8010df4:	42c8      	cmn	r0, r1
 8010df6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08010df8 <__aeabi_dcmpeq>:
 8010df8:	b510      	push	{r4, lr}
 8010dfa:	f001 f921 	bl	8012040 <__eqdf2>
 8010dfe:	4240      	negs	r0, r0
 8010e00:	3001      	adds	r0, #1
 8010e02:	bd10      	pop	{r4, pc}

08010e04 <__aeabi_dcmplt>:
 8010e04:	b510      	push	{r4, lr}
 8010e06:	f001 f9bb 	bl	8012180 <__ledf2>
 8010e0a:	2800      	cmp	r0, #0
 8010e0c:	db01      	blt.n	8010e12 <__aeabi_dcmplt+0xe>
 8010e0e:	2000      	movs	r0, #0
 8010e10:	bd10      	pop	{r4, pc}
 8010e12:	2001      	movs	r0, #1
 8010e14:	bd10      	pop	{r4, pc}
 8010e16:	46c0      	nop			; (mov r8, r8)

08010e18 <__aeabi_dcmple>:
 8010e18:	b510      	push	{r4, lr}
 8010e1a:	f001 f9b1 	bl	8012180 <__ledf2>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	dd01      	ble.n	8010e26 <__aeabi_dcmple+0xe>
 8010e22:	2000      	movs	r0, #0
 8010e24:	bd10      	pop	{r4, pc}
 8010e26:	2001      	movs	r0, #1
 8010e28:	bd10      	pop	{r4, pc}
 8010e2a:	46c0      	nop			; (mov r8, r8)

08010e2c <__aeabi_dcmpgt>:
 8010e2c:	b510      	push	{r4, lr}
 8010e2e:	f001 f943 	bl	80120b8 <__gedf2>
 8010e32:	2800      	cmp	r0, #0
 8010e34:	dc01      	bgt.n	8010e3a <__aeabi_dcmpgt+0xe>
 8010e36:	2000      	movs	r0, #0
 8010e38:	bd10      	pop	{r4, pc}
 8010e3a:	2001      	movs	r0, #1
 8010e3c:	bd10      	pop	{r4, pc}
 8010e3e:	46c0      	nop			; (mov r8, r8)

08010e40 <__aeabi_dcmpge>:
 8010e40:	b510      	push	{r4, lr}
 8010e42:	f001 f939 	bl	80120b8 <__gedf2>
 8010e46:	2800      	cmp	r0, #0
 8010e48:	da01      	bge.n	8010e4e <__aeabi_dcmpge+0xe>
 8010e4a:	2000      	movs	r0, #0
 8010e4c:	bd10      	pop	{r4, pc}
 8010e4e:	2001      	movs	r0, #1
 8010e50:	bd10      	pop	{r4, pc}
 8010e52:	46c0      	nop			; (mov r8, r8)

08010e54 <__aeabi_cfrcmple>:
 8010e54:	4684      	mov	ip, r0
 8010e56:	1c08      	adds	r0, r1, #0
 8010e58:	4661      	mov	r1, ip
 8010e5a:	e7ff      	b.n	8010e5c <__aeabi_cfcmpeq>

08010e5c <__aeabi_cfcmpeq>:
 8010e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e5e:	f000 f9c1 	bl	80111e4 <__lesf2>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	d401      	bmi.n	8010e6a <__aeabi_cfcmpeq+0xe>
 8010e66:	2100      	movs	r1, #0
 8010e68:	42c8      	cmn	r0, r1
 8010e6a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08010e6c <__aeabi_fcmpeq>:
 8010e6c:	b510      	push	{r4, lr}
 8010e6e:	f000 f943 	bl	80110f8 <__eqsf2>
 8010e72:	4240      	negs	r0, r0
 8010e74:	3001      	adds	r0, #1
 8010e76:	bd10      	pop	{r4, pc}

08010e78 <__aeabi_fcmplt>:
 8010e78:	b510      	push	{r4, lr}
 8010e7a:	f000 f9b3 	bl	80111e4 <__lesf2>
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	db01      	blt.n	8010e86 <__aeabi_fcmplt+0xe>
 8010e82:	2000      	movs	r0, #0
 8010e84:	bd10      	pop	{r4, pc}
 8010e86:	2001      	movs	r0, #1
 8010e88:	bd10      	pop	{r4, pc}
 8010e8a:	46c0      	nop			; (mov r8, r8)

08010e8c <__aeabi_fcmple>:
 8010e8c:	b510      	push	{r4, lr}
 8010e8e:	f000 f9a9 	bl	80111e4 <__lesf2>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	dd01      	ble.n	8010e9a <__aeabi_fcmple+0xe>
 8010e96:	2000      	movs	r0, #0
 8010e98:	bd10      	pop	{r4, pc}
 8010e9a:	2001      	movs	r0, #1
 8010e9c:	bd10      	pop	{r4, pc}
 8010e9e:	46c0      	nop			; (mov r8, r8)

08010ea0 <__aeabi_fcmpgt>:
 8010ea0:	b510      	push	{r4, lr}
 8010ea2:	f000 f951 	bl	8011148 <__gesf2>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	dc01      	bgt.n	8010eae <__aeabi_fcmpgt+0xe>
 8010eaa:	2000      	movs	r0, #0
 8010eac:	bd10      	pop	{r4, pc}
 8010eae:	2001      	movs	r0, #1
 8010eb0:	bd10      	pop	{r4, pc}
 8010eb2:	46c0      	nop			; (mov r8, r8)

08010eb4 <__aeabi_fcmpge>:
 8010eb4:	b510      	push	{r4, lr}
 8010eb6:	f000 f947 	bl	8011148 <__gesf2>
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	da01      	bge.n	8010ec2 <__aeabi_fcmpge+0xe>
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	bd10      	pop	{r4, pc}
 8010ec2:	2001      	movs	r0, #1
 8010ec4:	bd10      	pop	{r4, pc}
 8010ec6:	46c0      	nop			; (mov r8, r8)

08010ec8 <__aeabi_uldivmod>:
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d111      	bne.n	8010ef0 <__aeabi_uldivmod+0x28>
 8010ecc:	2a00      	cmp	r2, #0
 8010ece:	d10f      	bne.n	8010ef0 <__aeabi_uldivmod+0x28>
 8010ed0:	2900      	cmp	r1, #0
 8010ed2:	d100      	bne.n	8010ed6 <__aeabi_uldivmod+0xe>
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	d002      	beq.n	8010ede <__aeabi_uldivmod+0x16>
 8010ed8:	2100      	movs	r1, #0
 8010eda:	43c9      	mvns	r1, r1
 8010edc:	1c08      	adds	r0, r1, #0
 8010ede:	b407      	push	{r0, r1, r2}
 8010ee0:	4802      	ldr	r0, [pc, #8]	; (8010eec <__aeabi_uldivmod+0x24>)
 8010ee2:	a102      	add	r1, pc, #8	; (adr r1, 8010eec <__aeabi_uldivmod+0x24>)
 8010ee4:	1840      	adds	r0, r0, r1
 8010ee6:	9002      	str	r0, [sp, #8]
 8010ee8:	bd03      	pop	{r0, r1, pc}
 8010eea:	46c0      	nop			; (mov r8, r8)
 8010eec:	fffffee9 	.word	0xfffffee9
 8010ef0:	b403      	push	{r0, r1}
 8010ef2:	4668      	mov	r0, sp
 8010ef4:	b501      	push	{r0, lr}
 8010ef6:	9802      	ldr	r0, [sp, #8]
 8010ef8:	f000 f83c 	bl	8010f74 <__udivmoddi4>
 8010efc:	9b01      	ldr	r3, [sp, #4]
 8010efe:	469e      	mov	lr, r3
 8010f00:	b002      	add	sp, #8
 8010f02:	bc0c      	pop	{r2, r3}
 8010f04:	4770      	bx	lr
 8010f06:	46c0      	nop			; (mov r8, r8)

08010f08 <__aeabi_f2uiz>:
 8010f08:	219e      	movs	r1, #158	; 0x9e
 8010f0a:	b510      	push	{r4, lr}
 8010f0c:	05c9      	lsls	r1, r1, #23
 8010f0e:	1c04      	adds	r4, r0, #0
 8010f10:	f7ff ffd0 	bl	8010eb4 <__aeabi_fcmpge>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	d103      	bne.n	8010f20 <__aeabi_f2uiz+0x18>
 8010f18:	1c20      	adds	r0, r4, #0
 8010f1a:	f000 f9c9 	bl	80112b0 <__aeabi_f2iz>
 8010f1e:	bd10      	pop	{r4, pc}
 8010f20:	219e      	movs	r1, #158	; 0x9e
 8010f22:	1c20      	adds	r0, r4, #0
 8010f24:	05c9      	lsls	r1, r1, #23
 8010f26:	f7ff fbe1 	bl	80106ec <__aeabi_fsub>
 8010f2a:	f000 f9c1 	bl	80112b0 <__aeabi_f2iz>
 8010f2e:	2380      	movs	r3, #128	; 0x80
 8010f30:	061b      	lsls	r3, r3, #24
 8010f32:	469c      	mov	ip, r3
 8010f34:	4460      	add	r0, ip
 8010f36:	e7f2      	b.n	8010f1e <__aeabi_f2uiz+0x16>

08010f38 <__aeabi_d2uiz>:
 8010f38:	b570      	push	{r4, r5, r6, lr}
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	4b0c      	ldr	r3, [pc, #48]	; (8010f70 <__aeabi_d2uiz+0x38>)
 8010f3e:	0004      	movs	r4, r0
 8010f40:	000d      	movs	r5, r1
 8010f42:	f7ff ff7d 	bl	8010e40 <__aeabi_dcmpge>
 8010f46:	2800      	cmp	r0, #0
 8010f48:	d104      	bne.n	8010f54 <__aeabi_d2uiz+0x1c>
 8010f4a:	0020      	movs	r0, r4
 8010f4c:	0029      	movs	r1, r5
 8010f4e:	f001 ff55 	bl	8012dfc <__aeabi_d2iz>
 8010f52:	bd70      	pop	{r4, r5, r6, pc}
 8010f54:	4b06      	ldr	r3, [pc, #24]	; (8010f70 <__aeabi_d2uiz+0x38>)
 8010f56:	2200      	movs	r2, #0
 8010f58:	0020      	movs	r0, r4
 8010f5a:	0029      	movs	r1, r5
 8010f5c:	f001 fbea 	bl	8012734 <__aeabi_dsub>
 8010f60:	f001 ff4c 	bl	8012dfc <__aeabi_d2iz>
 8010f64:	2380      	movs	r3, #128	; 0x80
 8010f66:	061b      	lsls	r3, r3, #24
 8010f68:	469c      	mov	ip, r3
 8010f6a:	4460      	add	r0, ip
 8010f6c:	e7f1      	b.n	8010f52 <__aeabi_d2uiz+0x1a>
 8010f6e:	46c0      	nop			; (mov r8, r8)
 8010f70:	41e00000 	.word	0x41e00000

08010f74 <__udivmoddi4>:
 8010f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f76:	464f      	mov	r7, r9
 8010f78:	4646      	mov	r6, r8
 8010f7a:	46d6      	mov	lr, sl
 8010f7c:	b5c0      	push	{r6, r7, lr}
 8010f7e:	0004      	movs	r4, r0
 8010f80:	b082      	sub	sp, #8
 8010f82:	000d      	movs	r5, r1
 8010f84:	4691      	mov	r9, r2
 8010f86:	4698      	mov	r8, r3
 8010f88:	428b      	cmp	r3, r1
 8010f8a:	d82f      	bhi.n	8010fec <__udivmoddi4+0x78>
 8010f8c:	d02c      	beq.n	8010fe8 <__udivmoddi4+0x74>
 8010f8e:	4641      	mov	r1, r8
 8010f90:	4648      	mov	r0, r9
 8010f92:	f002 f8ab 	bl	80130ec <__clzdi2>
 8010f96:	0029      	movs	r1, r5
 8010f98:	0006      	movs	r6, r0
 8010f9a:	0020      	movs	r0, r4
 8010f9c:	f002 f8a6 	bl	80130ec <__clzdi2>
 8010fa0:	1a33      	subs	r3, r6, r0
 8010fa2:	469c      	mov	ip, r3
 8010fa4:	3b20      	subs	r3, #32
 8010fa6:	469a      	mov	sl, r3
 8010fa8:	d500      	bpl.n	8010fac <__udivmoddi4+0x38>
 8010faa:	e076      	b.n	801109a <__udivmoddi4+0x126>
 8010fac:	464b      	mov	r3, r9
 8010fae:	4652      	mov	r2, sl
 8010fb0:	4093      	lsls	r3, r2
 8010fb2:	001f      	movs	r7, r3
 8010fb4:	464b      	mov	r3, r9
 8010fb6:	4662      	mov	r2, ip
 8010fb8:	4093      	lsls	r3, r2
 8010fba:	001e      	movs	r6, r3
 8010fbc:	42af      	cmp	r7, r5
 8010fbe:	d828      	bhi.n	8011012 <__udivmoddi4+0x9e>
 8010fc0:	d025      	beq.n	801100e <__udivmoddi4+0x9a>
 8010fc2:	4653      	mov	r3, sl
 8010fc4:	1ba4      	subs	r4, r4, r6
 8010fc6:	41bd      	sbcs	r5, r7
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	da00      	bge.n	8010fce <__udivmoddi4+0x5a>
 8010fcc:	e07b      	b.n	80110c6 <__udivmoddi4+0x152>
 8010fce:	2200      	movs	r2, #0
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	9200      	str	r2, [sp, #0]
 8010fd4:	9301      	str	r3, [sp, #4]
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	4652      	mov	r2, sl
 8010fda:	4093      	lsls	r3, r2
 8010fdc:	9301      	str	r3, [sp, #4]
 8010fde:	2301      	movs	r3, #1
 8010fe0:	4662      	mov	r2, ip
 8010fe2:	4093      	lsls	r3, r2
 8010fe4:	9300      	str	r3, [sp, #0]
 8010fe6:	e018      	b.n	801101a <__udivmoddi4+0xa6>
 8010fe8:	4282      	cmp	r2, r0
 8010fea:	d9d0      	bls.n	8010f8e <__udivmoddi4+0x1a>
 8010fec:	2200      	movs	r2, #0
 8010fee:	2300      	movs	r3, #0
 8010ff0:	9200      	str	r2, [sp, #0]
 8010ff2:	9301      	str	r3, [sp, #4]
 8010ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d001      	beq.n	8010ffe <__udivmoddi4+0x8a>
 8010ffa:	601c      	str	r4, [r3, #0]
 8010ffc:	605d      	str	r5, [r3, #4]
 8010ffe:	9800      	ldr	r0, [sp, #0]
 8011000:	9901      	ldr	r1, [sp, #4]
 8011002:	b002      	add	sp, #8
 8011004:	bc1c      	pop	{r2, r3, r4}
 8011006:	4690      	mov	r8, r2
 8011008:	4699      	mov	r9, r3
 801100a:	46a2      	mov	sl, r4
 801100c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801100e:	42a3      	cmp	r3, r4
 8011010:	d9d7      	bls.n	8010fc2 <__udivmoddi4+0x4e>
 8011012:	2200      	movs	r2, #0
 8011014:	2300      	movs	r3, #0
 8011016:	9200      	str	r2, [sp, #0]
 8011018:	9301      	str	r3, [sp, #4]
 801101a:	4663      	mov	r3, ip
 801101c:	2b00      	cmp	r3, #0
 801101e:	d0e9      	beq.n	8010ff4 <__udivmoddi4+0x80>
 8011020:	07fb      	lsls	r3, r7, #31
 8011022:	4698      	mov	r8, r3
 8011024:	4641      	mov	r1, r8
 8011026:	0872      	lsrs	r2, r6, #1
 8011028:	430a      	orrs	r2, r1
 801102a:	087b      	lsrs	r3, r7, #1
 801102c:	4666      	mov	r6, ip
 801102e:	e00e      	b.n	801104e <__udivmoddi4+0xda>
 8011030:	42ab      	cmp	r3, r5
 8011032:	d101      	bne.n	8011038 <__udivmoddi4+0xc4>
 8011034:	42a2      	cmp	r2, r4
 8011036:	d80c      	bhi.n	8011052 <__udivmoddi4+0xde>
 8011038:	1aa4      	subs	r4, r4, r2
 801103a:	419d      	sbcs	r5, r3
 801103c:	2001      	movs	r0, #1
 801103e:	1924      	adds	r4, r4, r4
 8011040:	416d      	adcs	r5, r5
 8011042:	2100      	movs	r1, #0
 8011044:	3e01      	subs	r6, #1
 8011046:	1824      	adds	r4, r4, r0
 8011048:	414d      	adcs	r5, r1
 801104a:	2e00      	cmp	r6, #0
 801104c:	d006      	beq.n	801105c <__udivmoddi4+0xe8>
 801104e:	42ab      	cmp	r3, r5
 8011050:	d9ee      	bls.n	8011030 <__udivmoddi4+0xbc>
 8011052:	3e01      	subs	r6, #1
 8011054:	1924      	adds	r4, r4, r4
 8011056:	416d      	adcs	r5, r5
 8011058:	2e00      	cmp	r6, #0
 801105a:	d1f8      	bne.n	801104e <__udivmoddi4+0xda>
 801105c:	9800      	ldr	r0, [sp, #0]
 801105e:	9901      	ldr	r1, [sp, #4]
 8011060:	4653      	mov	r3, sl
 8011062:	1900      	adds	r0, r0, r4
 8011064:	4169      	adcs	r1, r5
 8011066:	2b00      	cmp	r3, #0
 8011068:	db23      	blt.n	80110b2 <__udivmoddi4+0x13e>
 801106a:	002b      	movs	r3, r5
 801106c:	4652      	mov	r2, sl
 801106e:	40d3      	lsrs	r3, r2
 8011070:	002a      	movs	r2, r5
 8011072:	4664      	mov	r4, ip
 8011074:	40e2      	lsrs	r2, r4
 8011076:	001c      	movs	r4, r3
 8011078:	4653      	mov	r3, sl
 801107a:	0015      	movs	r5, r2
 801107c:	2b00      	cmp	r3, #0
 801107e:	db2d      	blt.n	80110dc <__udivmoddi4+0x168>
 8011080:	0026      	movs	r6, r4
 8011082:	4657      	mov	r7, sl
 8011084:	40be      	lsls	r6, r7
 8011086:	0033      	movs	r3, r6
 8011088:	0026      	movs	r6, r4
 801108a:	4667      	mov	r7, ip
 801108c:	40be      	lsls	r6, r7
 801108e:	0032      	movs	r2, r6
 8011090:	1a80      	subs	r0, r0, r2
 8011092:	4199      	sbcs	r1, r3
 8011094:	9000      	str	r0, [sp, #0]
 8011096:	9101      	str	r1, [sp, #4]
 8011098:	e7ac      	b.n	8010ff4 <__udivmoddi4+0x80>
 801109a:	4662      	mov	r2, ip
 801109c:	2320      	movs	r3, #32
 801109e:	1a9b      	subs	r3, r3, r2
 80110a0:	464a      	mov	r2, r9
 80110a2:	40da      	lsrs	r2, r3
 80110a4:	4661      	mov	r1, ip
 80110a6:	0013      	movs	r3, r2
 80110a8:	4642      	mov	r2, r8
 80110aa:	408a      	lsls	r2, r1
 80110ac:	0017      	movs	r7, r2
 80110ae:	431f      	orrs	r7, r3
 80110b0:	e780      	b.n	8010fb4 <__udivmoddi4+0x40>
 80110b2:	4662      	mov	r2, ip
 80110b4:	2320      	movs	r3, #32
 80110b6:	1a9b      	subs	r3, r3, r2
 80110b8:	002a      	movs	r2, r5
 80110ba:	4666      	mov	r6, ip
 80110bc:	409a      	lsls	r2, r3
 80110be:	0023      	movs	r3, r4
 80110c0:	40f3      	lsrs	r3, r6
 80110c2:	4313      	orrs	r3, r2
 80110c4:	e7d4      	b.n	8011070 <__udivmoddi4+0xfc>
 80110c6:	4662      	mov	r2, ip
 80110c8:	2320      	movs	r3, #32
 80110ca:	2100      	movs	r1, #0
 80110cc:	1a9b      	subs	r3, r3, r2
 80110ce:	2200      	movs	r2, #0
 80110d0:	9100      	str	r1, [sp, #0]
 80110d2:	9201      	str	r2, [sp, #4]
 80110d4:	2201      	movs	r2, #1
 80110d6:	40da      	lsrs	r2, r3
 80110d8:	9201      	str	r2, [sp, #4]
 80110da:	e780      	b.n	8010fde <__udivmoddi4+0x6a>
 80110dc:	2320      	movs	r3, #32
 80110de:	4662      	mov	r2, ip
 80110e0:	0026      	movs	r6, r4
 80110e2:	1a9b      	subs	r3, r3, r2
 80110e4:	40de      	lsrs	r6, r3
 80110e6:	002f      	movs	r7, r5
 80110e8:	46b0      	mov	r8, r6
 80110ea:	4666      	mov	r6, ip
 80110ec:	40b7      	lsls	r7, r6
 80110ee:	4646      	mov	r6, r8
 80110f0:	003b      	movs	r3, r7
 80110f2:	4333      	orrs	r3, r6
 80110f4:	e7c8      	b.n	8011088 <__udivmoddi4+0x114>
 80110f6:	46c0      	nop			; (mov r8, r8)

080110f8 <__eqsf2>:
 80110f8:	b570      	push	{r4, r5, r6, lr}
 80110fa:	0042      	lsls	r2, r0, #1
 80110fc:	024e      	lsls	r6, r1, #9
 80110fe:	004c      	lsls	r4, r1, #1
 8011100:	0245      	lsls	r5, r0, #9
 8011102:	0a6d      	lsrs	r5, r5, #9
 8011104:	0e12      	lsrs	r2, r2, #24
 8011106:	0fc3      	lsrs	r3, r0, #31
 8011108:	0a76      	lsrs	r6, r6, #9
 801110a:	0e24      	lsrs	r4, r4, #24
 801110c:	0fc9      	lsrs	r1, r1, #31
 801110e:	2aff      	cmp	r2, #255	; 0xff
 8011110:	d00f      	beq.n	8011132 <__eqsf2+0x3a>
 8011112:	2cff      	cmp	r4, #255	; 0xff
 8011114:	d011      	beq.n	801113a <__eqsf2+0x42>
 8011116:	2001      	movs	r0, #1
 8011118:	42a2      	cmp	r2, r4
 801111a:	d000      	beq.n	801111e <__eqsf2+0x26>
 801111c:	bd70      	pop	{r4, r5, r6, pc}
 801111e:	42b5      	cmp	r5, r6
 8011120:	d1fc      	bne.n	801111c <__eqsf2+0x24>
 8011122:	428b      	cmp	r3, r1
 8011124:	d00d      	beq.n	8011142 <__eqsf2+0x4a>
 8011126:	2a00      	cmp	r2, #0
 8011128:	d1f8      	bne.n	801111c <__eqsf2+0x24>
 801112a:	0028      	movs	r0, r5
 801112c:	1e45      	subs	r5, r0, #1
 801112e:	41a8      	sbcs	r0, r5
 8011130:	e7f4      	b.n	801111c <__eqsf2+0x24>
 8011132:	2001      	movs	r0, #1
 8011134:	2d00      	cmp	r5, #0
 8011136:	d1f1      	bne.n	801111c <__eqsf2+0x24>
 8011138:	e7eb      	b.n	8011112 <__eqsf2+0x1a>
 801113a:	2001      	movs	r0, #1
 801113c:	2e00      	cmp	r6, #0
 801113e:	d1ed      	bne.n	801111c <__eqsf2+0x24>
 8011140:	e7e9      	b.n	8011116 <__eqsf2+0x1e>
 8011142:	2000      	movs	r0, #0
 8011144:	e7ea      	b.n	801111c <__eqsf2+0x24>
 8011146:	46c0      	nop			; (mov r8, r8)

08011148 <__gesf2>:
 8011148:	b570      	push	{r4, r5, r6, lr}
 801114a:	004a      	lsls	r2, r1, #1
 801114c:	024e      	lsls	r6, r1, #9
 801114e:	0245      	lsls	r5, r0, #9
 8011150:	0044      	lsls	r4, r0, #1
 8011152:	0a6d      	lsrs	r5, r5, #9
 8011154:	0e24      	lsrs	r4, r4, #24
 8011156:	0fc3      	lsrs	r3, r0, #31
 8011158:	0a76      	lsrs	r6, r6, #9
 801115a:	0e12      	lsrs	r2, r2, #24
 801115c:	0fc9      	lsrs	r1, r1, #31
 801115e:	2cff      	cmp	r4, #255	; 0xff
 8011160:	d015      	beq.n	801118e <__gesf2+0x46>
 8011162:	2aff      	cmp	r2, #255	; 0xff
 8011164:	d00e      	beq.n	8011184 <__gesf2+0x3c>
 8011166:	2c00      	cmp	r4, #0
 8011168:	d115      	bne.n	8011196 <__gesf2+0x4e>
 801116a:	2a00      	cmp	r2, #0
 801116c:	d101      	bne.n	8011172 <__gesf2+0x2a>
 801116e:	2e00      	cmp	r6, #0
 8011170:	d01c      	beq.n	80111ac <__gesf2+0x64>
 8011172:	2d00      	cmp	r5, #0
 8011174:	d014      	beq.n	80111a0 <__gesf2+0x58>
 8011176:	428b      	cmp	r3, r1
 8011178:	d027      	beq.n	80111ca <__gesf2+0x82>
 801117a:	2002      	movs	r0, #2
 801117c:	3b01      	subs	r3, #1
 801117e:	4018      	ands	r0, r3
 8011180:	3801      	subs	r0, #1
 8011182:	bd70      	pop	{r4, r5, r6, pc}
 8011184:	2e00      	cmp	r6, #0
 8011186:	d0ee      	beq.n	8011166 <__gesf2+0x1e>
 8011188:	2002      	movs	r0, #2
 801118a:	4240      	negs	r0, r0
 801118c:	e7f9      	b.n	8011182 <__gesf2+0x3a>
 801118e:	2d00      	cmp	r5, #0
 8011190:	d1fa      	bne.n	8011188 <__gesf2+0x40>
 8011192:	2aff      	cmp	r2, #255	; 0xff
 8011194:	d00e      	beq.n	80111b4 <__gesf2+0x6c>
 8011196:	2a00      	cmp	r2, #0
 8011198:	d10e      	bne.n	80111b8 <__gesf2+0x70>
 801119a:	2e00      	cmp	r6, #0
 801119c:	d0ed      	beq.n	801117a <__gesf2+0x32>
 801119e:	e00b      	b.n	80111b8 <__gesf2+0x70>
 80111a0:	2301      	movs	r3, #1
 80111a2:	3901      	subs	r1, #1
 80111a4:	4399      	bics	r1, r3
 80111a6:	0008      	movs	r0, r1
 80111a8:	3001      	adds	r0, #1
 80111aa:	e7ea      	b.n	8011182 <__gesf2+0x3a>
 80111ac:	2000      	movs	r0, #0
 80111ae:	2d00      	cmp	r5, #0
 80111b0:	d0e7      	beq.n	8011182 <__gesf2+0x3a>
 80111b2:	e7e2      	b.n	801117a <__gesf2+0x32>
 80111b4:	2e00      	cmp	r6, #0
 80111b6:	d1e7      	bne.n	8011188 <__gesf2+0x40>
 80111b8:	428b      	cmp	r3, r1
 80111ba:	d1de      	bne.n	801117a <__gesf2+0x32>
 80111bc:	4294      	cmp	r4, r2
 80111be:	dd05      	ble.n	80111cc <__gesf2+0x84>
 80111c0:	2102      	movs	r1, #2
 80111c2:	1e58      	subs	r0, r3, #1
 80111c4:	4008      	ands	r0, r1
 80111c6:	3801      	subs	r0, #1
 80111c8:	e7db      	b.n	8011182 <__gesf2+0x3a>
 80111ca:	2400      	movs	r4, #0
 80111cc:	42a2      	cmp	r2, r4
 80111ce:	dc04      	bgt.n	80111da <__gesf2+0x92>
 80111d0:	42b5      	cmp	r5, r6
 80111d2:	d8d2      	bhi.n	801117a <__gesf2+0x32>
 80111d4:	2000      	movs	r0, #0
 80111d6:	42b5      	cmp	r5, r6
 80111d8:	d2d3      	bcs.n	8011182 <__gesf2+0x3a>
 80111da:	1e58      	subs	r0, r3, #1
 80111dc:	2301      	movs	r3, #1
 80111de:	4398      	bics	r0, r3
 80111e0:	3001      	adds	r0, #1
 80111e2:	e7ce      	b.n	8011182 <__gesf2+0x3a>

080111e4 <__lesf2>:
 80111e4:	b530      	push	{r4, r5, lr}
 80111e6:	0042      	lsls	r2, r0, #1
 80111e8:	0244      	lsls	r4, r0, #9
 80111ea:	024d      	lsls	r5, r1, #9
 80111ec:	0fc3      	lsrs	r3, r0, #31
 80111ee:	0048      	lsls	r0, r1, #1
 80111f0:	0a64      	lsrs	r4, r4, #9
 80111f2:	0e12      	lsrs	r2, r2, #24
 80111f4:	0a6d      	lsrs	r5, r5, #9
 80111f6:	0e00      	lsrs	r0, r0, #24
 80111f8:	0fc9      	lsrs	r1, r1, #31
 80111fa:	2aff      	cmp	r2, #255	; 0xff
 80111fc:	d012      	beq.n	8011224 <__lesf2+0x40>
 80111fe:	28ff      	cmp	r0, #255	; 0xff
 8011200:	d00c      	beq.n	801121c <__lesf2+0x38>
 8011202:	2a00      	cmp	r2, #0
 8011204:	d112      	bne.n	801122c <__lesf2+0x48>
 8011206:	2800      	cmp	r0, #0
 8011208:	d119      	bne.n	801123e <__lesf2+0x5a>
 801120a:	2d00      	cmp	r5, #0
 801120c:	d117      	bne.n	801123e <__lesf2+0x5a>
 801120e:	2c00      	cmp	r4, #0
 8011210:	d02b      	beq.n	801126a <__lesf2+0x86>
 8011212:	2002      	movs	r0, #2
 8011214:	3b01      	subs	r3, #1
 8011216:	4018      	ands	r0, r3
 8011218:	3801      	subs	r0, #1
 801121a:	e026      	b.n	801126a <__lesf2+0x86>
 801121c:	2d00      	cmp	r5, #0
 801121e:	d0f0      	beq.n	8011202 <__lesf2+0x1e>
 8011220:	2002      	movs	r0, #2
 8011222:	e022      	b.n	801126a <__lesf2+0x86>
 8011224:	2c00      	cmp	r4, #0
 8011226:	d1fb      	bne.n	8011220 <__lesf2+0x3c>
 8011228:	28ff      	cmp	r0, #255	; 0xff
 801122a:	d01f      	beq.n	801126c <__lesf2+0x88>
 801122c:	2800      	cmp	r0, #0
 801122e:	d11f      	bne.n	8011270 <__lesf2+0x8c>
 8011230:	2d00      	cmp	r5, #0
 8011232:	d11d      	bne.n	8011270 <__lesf2+0x8c>
 8011234:	2002      	movs	r0, #2
 8011236:	3b01      	subs	r3, #1
 8011238:	4018      	ands	r0, r3
 801123a:	3801      	subs	r0, #1
 801123c:	e015      	b.n	801126a <__lesf2+0x86>
 801123e:	2c00      	cmp	r4, #0
 8011240:	d00e      	beq.n	8011260 <__lesf2+0x7c>
 8011242:	428b      	cmp	r3, r1
 8011244:	d1e5      	bne.n	8011212 <__lesf2+0x2e>
 8011246:	2200      	movs	r2, #0
 8011248:	4290      	cmp	r0, r2
 801124a:	dc04      	bgt.n	8011256 <__lesf2+0x72>
 801124c:	42ac      	cmp	r4, r5
 801124e:	d8e0      	bhi.n	8011212 <__lesf2+0x2e>
 8011250:	2000      	movs	r0, #0
 8011252:	42ac      	cmp	r4, r5
 8011254:	d209      	bcs.n	801126a <__lesf2+0x86>
 8011256:	1e58      	subs	r0, r3, #1
 8011258:	2301      	movs	r3, #1
 801125a:	4398      	bics	r0, r3
 801125c:	3001      	adds	r0, #1
 801125e:	e004      	b.n	801126a <__lesf2+0x86>
 8011260:	2301      	movs	r3, #1
 8011262:	3901      	subs	r1, #1
 8011264:	4399      	bics	r1, r3
 8011266:	0008      	movs	r0, r1
 8011268:	3001      	adds	r0, #1
 801126a:	bd30      	pop	{r4, r5, pc}
 801126c:	2d00      	cmp	r5, #0
 801126e:	d1d7      	bne.n	8011220 <__lesf2+0x3c>
 8011270:	428b      	cmp	r3, r1
 8011272:	d1ce      	bne.n	8011212 <__lesf2+0x2e>
 8011274:	4282      	cmp	r2, r0
 8011276:	dde7      	ble.n	8011248 <__lesf2+0x64>
 8011278:	2102      	movs	r1, #2
 801127a:	1e58      	subs	r0, r3, #1
 801127c:	4008      	ands	r0, r1
 801127e:	3801      	subs	r0, #1
 8011280:	e7f3      	b.n	801126a <__lesf2+0x86>
 8011282:	46c0      	nop			; (mov r8, r8)

08011284 <__aeabi_fcmpun>:
 8011284:	0242      	lsls	r2, r0, #9
 8011286:	024b      	lsls	r3, r1, #9
 8011288:	0040      	lsls	r0, r0, #1
 801128a:	0049      	lsls	r1, r1, #1
 801128c:	0a52      	lsrs	r2, r2, #9
 801128e:	0a5b      	lsrs	r3, r3, #9
 8011290:	0e09      	lsrs	r1, r1, #24
 8011292:	0e00      	lsrs	r0, r0, #24
 8011294:	28ff      	cmp	r0, #255	; 0xff
 8011296:	d006      	beq.n	80112a6 <__aeabi_fcmpun+0x22>
 8011298:	2000      	movs	r0, #0
 801129a:	29ff      	cmp	r1, #255	; 0xff
 801129c:	d102      	bne.n	80112a4 <__aeabi_fcmpun+0x20>
 801129e:	0018      	movs	r0, r3
 80112a0:	1e43      	subs	r3, r0, #1
 80112a2:	4198      	sbcs	r0, r3
 80112a4:	4770      	bx	lr
 80112a6:	38fe      	subs	r0, #254	; 0xfe
 80112a8:	2a00      	cmp	r2, #0
 80112aa:	d1fb      	bne.n	80112a4 <__aeabi_fcmpun+0x20>
 80112ac:	e7f4      	b.n	8011298 <__aeabi_fcmpun+0x14>
 80112ae:	46c0      	nop			; (mov r8, r8)

080112b0 <__aeabi_f2iz>:
 80112b0:	0241      	lsls	r1, r0, #9
 80112b2:	0042      	lsls	r2, r0, #1
 80112b4:	0fc3      	lsrs	r3, r0, #31
 80112b6:	0a49      	lsrs	r1, r1, #9
 80112b8:	0e12      	lsrs	r2, r2, #24
 80112ba:	2000      	movs	r0, #0
 80112bc:	2a7e      	cmp	r2, #126	; 0x7e
 80112be:	d90d      	bls.n	80112dc <__aeabi_f2iz+0x2c>
 80112c0:	2a9d      	cmp	r2, #157	; 0x9d
 80112c2:	d80c      	bhi.n	80112de <__aeabi_f2iz+0x2e>
 80112c4:	2080      	movs	r0, #128	; 0x80
 80112c6:	0400      	lsls	r0, r0, #16
 80112c8:	4301      	orrs	r1, r0
 80112ca:	2a95      	cmp	r2, #149	; 0x95
 80112cc:	dc0a      	bgt.n	80112e4 <__aeabi_f2iz+0x34>
 80112ce:	2096      	movs	r0, #150	; 0x96
 80112d0:	1a82      	subs	r2, r0, r2
 80112d2:	40d1      	lsrs	r1, r2
 80112d4:	4248      	negs	r0, r1
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d100      	bne.n	80112dc <__aeabi_f2iz+0x2c>
 80112da:	0008      	movs	r0, r1
 80112dc:	4770      	bx	lr
 80112de:	4a03      	ldr	r2, [pc, #12]	; (80112ec <__aeabi_f2iz+0x3c>)
 80112e0:	1898      	adds	r0, r3, r2
 80112e2:	e7fb      	b.n	80112dc <__aeabi_f2iz+0x2c>
 80112e4:	3a96      	subs	r2, #150	; 0x96
 80112e6:	4091      	lsls	r1, r2
 80112e8:	e7f4      	b.n	80112d4 <__aeabi_f2iz+0x24>
 80112ea:	46c0      	nop			; (mov r8, r8)
 80112ec:	7fffffff 	.word	0x7fffffff

080112f0 <__aeabi_i2f>:
 80112f0:	b570      	push	{r4, r5, r6, lr}
 80112f2:	2800      	cmp	r0, #0
 80112f4:	d03d      	beq.n	8011372 <__aeabi_i2f+0x82>
 80112f6:	17c3      	asrs	r3, r0, #31
 80112f8:	18c5      	adds	r5, r0, r3
 80112fa:	405d      	eors	r5, r3
 80112fc:	0fc4      	lsrs	r4, r0, #31
 80112fe:	0028      	movs	r0, r5
 8011300:	f7ff fbb8 	bl	8010a74 <__clzsi2>
 8011304:	229e      	movs	r2, #158	; 0x9e
 8011306:	1a12      	subs	r2, r2, r0
 8011308:	2a96      	cmp	r2, #150	; 0x96
 801130a:	dc07      	bgt.n	801131c <__aeabi_i2f+0x2c>
 801130c:	b2d2      	uxtb	r2, r2
 801130e:	2808      	cmp	r0, #8
 8011310:	dd33      	ble.n	801137a <__aeabi_i2f+0x8a>
 8011312:	3808      	subs	r0, #8
 8011314:	4085      	lsls	r5, r0
 8011316:	0268      	lsls	r0, r5, #9
 8011318:	0a40      	lsrs	r0, r0, #9
 801131a:	e023      	b.n	8011364 <__aeabi_i2f+0x74>
 801131c:	2a99      	cmp	r2, #153	; 0x99
 801131e:	dd0b      	ble.n	8011338 <__aeabi_i2f+0x48>
 8011320:	2305      	movs	r3, #5
 8011322:	0029      	movs	r1, r5
 8011324:	1a1b      	subs	r3, r3, r0
 8011326:	40d9      	lsrs	r1, r3
 8011328:	0003      	movs	r3, r0
 801132a:	331b      	adds	r3, #27
 801132c:	409d      	lsls	r5, r3
 801132e:	002b      	movs	r3, r5
 8011330:	1e5d      	subs	r5, r3, #1
 8011332:	41ab      	sbcs	r3, r5
 8011334:	4319      	orrs	r1, r3
 8011336:	000d      	movs	r5, r1
 8011338:	2805      	cmp	r0, #5
 801133a:	dd01      	ble.n	8011340 <__aeabi_i2f+0x50>
 801133c:	1f43      	subs	r3, r0, #5
 801133e:	409d      	lsls	r5, r3
 8011340:	002b      	movs	r3, r5
 8011342:	490f      	ldr	r1, [pc, #60]	; (8011380 <__aeabi_i2f+0x90>)
 8011344:	400b      	ands	r3, r1
 8011346:	076e      	lsls	r6, r5, #29
 8011348:	d009      	beq.n	801135e <__aeabi_i2f+0x6e>
 801134a:	260f      	movs	r6, #15
 801134c:	4035      	ands	r5, r6
 801134e:	2d04      	cmp	r5, #4
 8011350:	d005      	beq.n	801135e <__aeabi_i2f+0x6e>
 8011352:	3304      	adds	r3, #4
 8011354:	015d      	lsls	r5, r3, #5
 8011356:	d502      	bpl.n	801135e <__aeabi_i2f+0x6e>
 8011358:	229f      	movs	r2, #159	; 0x9f
 801135a:	400b      	ands	r3, r1
 801135c:	1a12      	subs	r2, r2, r0
 801135e:	019b      	lsls	r3, r3, #6
 8011360:	0a58      	lsrs	r0, r3, #9
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	0240      	lsls	r0, r0, #9
 8011366:	05d2      	lsls	r2, r2, #23
 8011368:	0a40      	lsrs	r0, r0, #9
 801136a:	07e4      	lsls	r4, r4, #31
 801136c:	4310      	orrs	r0, r2
 801136e:	4320      	orrs	r0, r4
 8011370:	bd70      	pop	{r4, r5, r6, pc}
 8011372:	2400      	movs	r4, #0
 8011374:	2200      	movs	r2, #0
 8011376:	2000      	movs	r0, #0
 8011378:	e7f4      	b.n	8011364 <__aeabi_i2f+0x74>
 801137a:	0268      	lsls	r0, r5, #9
 801137c:	0a40      	lsrs	r0, r0, #9
 801137e:	e7f1      	b.n	8011364 <__aeabi_i2f+0x74>
 8011380:	fbffffff 	.word	0xfbffffff

08011384 <__aeabi_ui2f>:
 8011384:	b570      	push	{r4, r5, r6, lr}
 8011386:	1e04      	subs	r4, r0, #0
 8011388:	d034      	beq.n	80113f4 <__aeabi_ui2f+0x70>
 801138a:	f7ff fb73 	bl	8010a74 <__clzsi2>
 801138e:	229e      	movs	r2, #158	; 0x9e
 8011390:	1a12      	subs	r2, r2, r0
 8011392:	2a96      	cmp	r2, #150	; 0x96
 8011394:	dc07      	bgt.n	80113a6 <__aeabi_ui2f+0x22>
 8011396:	b2d2      	uxtb	r2, r2
 8011398:	2808      	cmp	r0, #8
 801139a:	dd2e      	ble.n	80113fa <__aeabi_ui2f+0x76>
 801139c:	3808      	subs	r0, #8
 801139e:	4084      	lsls	r4, r0
 80113a0:	0260      	lsls	r0, r4, #9
 80113a2:	0a40      	lsrs	r0, r0, #9
 80113a4:	e021      	b.n	80113ea <__aeabi_ui2f+0x66>
 80113a6:	2a99      	cmp	r2, #153	; 0x99
 80113a8:	dd09      	ble.n	80113be <__aeabi_ui2f+0x3a>
 80113aa:	0003      	movs	r3, r0
 80113ac:	0021      	movs	r1, r4
 80113ae:	331b      	adds	r3, #27
 80113b0:	4099      	lsls	r1, r3
 80113b2:	1e4b      	subs	r3, r1, #1
 80113b4:	4199      	sbcs	r1, r3
 80113b6:	2305      	movs	r3, #5
 80113b8:	1a1b      	subs	r3, r3, r0
 80113ba:	40dc      	lsrs	r4, r3
 80113bc:	430c      	orrs	r4, r1
 80113be:	2805      	cmp	r0, #5
 80113c0:	dd01      	ble.n	80113c6 <__aeabi_ui2f+0x42>
 80113c2:	1f43      	subs	r3, r0, #5
 80113c4:	409c      	lsls	r4, r3
 80113c6:	0023      	movs	r3, r4
 80113c8:	490d      	ldr	r1, [pc, #52]	; (8011400 <__aeabi_ui2f+0x7c>)
 80113ca:	400b      	ands	r3, r1
 80113cc:	0765      	lsls	r5, r4, #29
 80113ce:	d009      	beq.n	80113e4 <__aeabi_ui2f+0x60>
 80113d0:	250f      	movs	r5, #15
 80113d2:	402c      	ands	r4, r5
 80113d4:	2c04      	cmp	r4, #4
 80113d6:	d005      	beq.n	80113e4 <__aeabi_ui2f+0x60>
 80113d8:	3304      	adds	r3, #4
 80113da:	015c      	lsls	r4, r3, #5
 80113dc:	d502      	bpl.n	80113e4 <__aeabi_ui2f+0x60>
 80113de:	229f      	movs	r2, #159	; 0x9f
 80113e0:	400b      	ands	r3, r1
 80113e2:	1a12      	subs	r2, r2, r0
 80113e4:	019b      	lsls	r3, r3, #6
 80113e6:	0a58      	lsrs	r0, r3, #9
 80113e8:	b2d2      	uxtb	r2, r2
 80113ea:	0240      	lsls	r0, r0, #9
 80113ec:	05d2      	lsls	r2, r2, #23
 80113ee:	0a40      	lsrs	r0, r0, #9
 80113f0:	4310      	orrs	r0, r2
 80113f2:	bd70      	pop	{r4, r5, r6, pc}
 80113f4:	2200      	movs	r2, #0
 80113f6:	2000      	movs	r0, #0
 80113f8:	e7f7      	b.n	80113ea <__aeabi_ui2f+0x66>
 80113fa:	0260      	lsls	r0, r4, #9
 80113fc:	0a40      	lsrs	r0, r0, #9
 80113fe:	e7f4      	b.n	80113ea <__aeabi_ui2f+0x66>
 8011400:	fbffffff 	.word	0xfbffffff

08011404 <__aeabi_dadd>:
 8011404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011406:	464f      	mov	r7, r9
 8011408:	4646      	mov	r6, r8
 801140a:	46d6      	mov	lr, sl
 801140c:	000c      	movs	r4, r1
 801140e:	0309      	lsls	r1, r1, #12
 8011410:	b5c0      	push	{r6, r7, lr}
 8011412:	0a49      	lsrs	r1, r1, #9
 8011414:	0f47      	lsrs	r7, r0, #29
 8011416:	005e      	lsls	r6, r3, #1
 8011418:	4339      	orrs	r1, r7
 801141a:	031f      	lsls	r7, r3, #12
 801141c:	0fdb      	lsrs	r3, r3, #31
 801141e:	469c      	mov	ip, r3
 8011420:	0065      	lsls	r5, r4, #1
 8011422:	0a7b      	lsrs	r3, r7, #9
 8011424:	0f57      	lsrs	r7, r2, #29
 8011426:	431f      	orrs	r7, r3
 8011428:	0d6d      	lsrs	r5, r5, #21
 801142a:	0fe4      	lsrs	r4, r4, #31
 801142c:	0d76      	lsrs	r6, r6, #21
 801142e:	46a1      	mov	r9, r4
 8011430:	00c0      	lsls	r0, r0, #3
 8011432:	46b8      	mov	r8, r7
 8011434:	00d2      	lsls	r2, r2, #3
 8011436:	1bab      	subs	r3, r5, r6
 8011438:	4564      	cmp	r4, ip
 801143a:	d07b      	beq.n	8011534 <__aeabi_dadd+0x130>
 801143c:	2b00      	cmp	r3, #0
 801143e:	dd5f      	ble.n	8011500 <__aeabi_dadd+0xfc>
 8011440:	2e00      	cmp	r6, #0
 8011442:	d000      	beq.n	8011446 <__aeabi_dadd+0x42>
 8011444:	e0a4      	b.n	8011590 <__aeabi_dadd+0x18c>
 8011446:	003e      	movs	r6, r7
 8011448:	4316      	orrs	r6, r2
 801144a:	d100      	bne.n	801144e <__aeabi_dadd+0x4a>
 801144c:	e112      	b.n	8011674 <__aeabi_dadd+0x270>
 801144e:	1e5e      	subs	r6, r3, #1
 8011450:	2e00      	cmp	r6, #0
 8011452:	d000      	beq.n	8011456 <__aeabi_dadd+0x52>
 8011454:	e19e      	b.n	8011794 <__aeabi_dadd+0x390>
 8011456:	1a87      	subs	r7, r0, r2
 8011458:	4643      	mov	r3, r8
 801145a:	42b8      	cmp	r0, r7
 801145c:	4180      	sbcs	r0, r0
 801145e:	2501      	movs	r5, #1
 8011460:	1ac9      	subs	r1, r1, r3
 8011462:	4240      	negs	r0, r0
 8011464:	1a09      	subs	r1, r1, r0
 8011466:	020b      	lsls	r3, r1, #8
 8011468:	d400      	bmi.n	801146c <__aeabi_dadd+0x68>
 801146a:	e131      	b.n	80116d0 <__aeabi_dadd+0x2cc>
 801146c:	0249      	lsls	r1, r1, #9
 801146e:	0a4e      	lsrs	r6, r1, #9
 8011470:	2e00      	cmp	r6, #0
 8011472:	d100      	bne.n	8011476 <__aeabi_dadd+0x72>
 8011474:	e16e      	b.n	8011754 <__aeabi_dadd+0x350>
 8011476:	0030      	movs	r0, r6
 8011478:	f7ff fafc 	bl	8010a74 <__clzsi2>
 801147c:	0003      	movs	r3, r0
 801147e:	3b08      	subs	r3, #8
 8011480:	2b1f      	cmp	r3, #31
 8011482:	dd00      	ble.n	8011486 <__aeabi_dadd+0x82>
 8011484:	e161      	b.n	801174a <__aeabi_dadd+0x346>
 8011486:	2220      	movs	r2, #32
 8011488:	0039      	movs	r1, r7
 801148a:	1ad2      	subs	r2, r2, r3
 801148c:	409e      	lsls	r6, r3
 801148e:	40d1      	lsrs	r1, r2
 8011490:	409f      	lsls	r7, r3
 8011492:	430e      	orrs	r6, r1
 8011494:	429d      	cmp	r5, r3
 8011496:	dd00      	ble.n	801149a <__aeabi_dadd+0x96>
 8011498:	e151      	b.n	801173e <__aeabi_dadd+0x33a>
 801149a:	1b5d      	subs	r5, r3, r5
 801149c:	1c6b      	adds	r3, r5, #1
 801149e:	2b1f      	cmp	r3, #31
 80114a0:	dd00      	ble.n	80114a4 <__aeabi_dadd+0xa0>
 80114a2:	e17c      	b.n	801179e <__aeabi_dadd+0x39a>
 80114a4:	2120      	movs	r1, #32
 80114a6:	1ac9      	subs	r1, r1, r3
 80114a8:	003d      	movs	r5, r7
 80114aa:	0030      	movs	r0, r6
 80114ac:	408f      	lsls	r7, r1
 80114ae:	4088      	lsls	r0, r1
 80114b0:	40dd      	lsrs	r5, r3
 80114b2:	1e79      	subs	r1, r7, #1
 80114b4:	418f      	sbcs	r7, r1
 80114b6:	0031      	movs	r1, r6
 80114b8:	2207      	movs	r2, #7
 80114ba:	4328      	orrs	r0, r5
 80114bc:	40d9      	lsrs	r1, r3
 80114be:	2500      	movs	r5, #0
 80114c0:	4307      	orrs	r7, r0
 80114c2:	403a      	ands	r2, r7
 80114c4:	2a00      	cmp	r2, #0
 80114c6:	d009      	beq.n	80114dc <__aeabi_dadd+0xd8>
 80114c8:	230f      	movs	r3, #15
 80114ca:	403b      	ands	r3, r7
 80114cc:	2b04      	cmp	r3, #4
 80114ce:	d005      	beq.n	80114dc <__aeabi_dadd+0xd8>
 80114d0:	1d3b      	adds	r3, r7, #4
 80114d2:	42bb      	cmp	r3, r7
 80114d4:	41bf      	sbcs	r7, r7
 80114d6:	427f      	negs	r7, r7
 80114d8:	19c9      	adds	r1, r1, r7
 80114da:	001f      	movs	r7, r3
 80114dc:	020b      	lsls	r3, r1, #8
 80114de:	d400      	bmi.n	80114e2 <__aeabi_dadd+0xde>
 80114e0:	e226      	b.n	8011930 <__aeabi_dadd+0x52c>
 80114e2:	1c6a      	adds	r2, r5, #1
 80114e4:	4bc6      	ldr	r3, [pc, #792]	; (8011800 <__aeabi_dadd+0x3fc>)
 80114e6:	0555      	lsls	r5, r2, #21
 80114e8:	0d6d      	lsrs	r5, r5, #21
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d100      	bne.n	80114f0 <__aeabi_dadd+0xec>
 80114ee:	e106      	b.n	80116fe <__aeabi_dadd+0x2fa>
 80114f0:	4ac4      	ldr	r2, [pc, #784]	; (8011804 <__aeabi_dadd+0x400>)
 80114f2:	08ff      	lsrs	r7, r7, #3
 80114f4:	400a      	ands	r2, r1
 80114f6:	0753      	lsls	r3, r2, #29
 80114f8:	0252      	lsls	r2, r2, #9
 80114fa:	433b      	orrs	r3, r7
 80114fc:	0b12      	lsrs	r2, r2, #12
 80114fe:	e08e      	b.n	801161e <__aeabi_dadd+0x21a>
 8011500:	2b00      	cmp	r3, #0
 8011502:	d000      	beq.n	8011506 <__aeabi_dadd+0x102>
 8011504:	e0b8      	b.n	8011678 <__aeabi_dadd+0x274>
 8011506:	1c6b      	adds	r3, r5, #1
 8011508:	055b      	lsls	r3, r3, #21
 801150a:	0d5b      	lsrs	r3, r3, #21
 801150c:	2b01      	cmp	r3, #1
 801150e:	dc00      	bgt.n	8011512 <__aeabi_dadd+0x10e>
 8011510:	e130      	b.n	8011774 <__aeabi_dadd+0x370>
 8011512:	1a87      	subs	r7, r0, r2
 8011514:	4643      	mov	r3, r8
 8011516:	42b8      	cmp	r0, r7
 8011518:	41b6      	sbcs	r6, r6
 801151a:	1acb      	subs	r3, r1, r3
 801151c:	4276      	negs	r6, r6
 801151e:	1b9e      	subs	r6, r3, r6
 8011520:	0233      	lsls	r3, r6, #8
 8011522:	d500      	bpl.n	8011526 <__aeabi_dadd+0x122>
 8011524:	e14c      	b.n	80117c0 <__aeabi_dadd+0x3bc>
 8011526:	003b      	movs	r3, r7
 8011528:	4333      	orrs	r3, r6
 801152a:	d1a1      	bne.n	8011470 <__aeabi_dadd+0x6c>
 801152c:	2200      	movs	r2, #0
 801152e:	2400      	movs	r4, #0
 8011530:	2500      	movs	r5, #0
 8011532:	e070      	b.n	8011616 <__aeabi_dadd+0x212>
 8011534:	2b00      	cmp	r3, #0
 8011536:	dc00      	bgt.n	801153a <__aeabi_dadd+0x136>
 8011538:	e0e5      	b.n	8011706 <__aeabi_dadd+0x302>
 801153a:	2e00      	cmp	r6, #0
 801153c:	d100      	bne.n	8011540 <__aeabi_dadd+0x13c>
 801153e:	e083      	b.n	8011648 <__aeabi_dadd+0x244>
 8011540:	4eaf      	ldr	r6, [pc, #700]	; (8011800 <__aeabi_dadd+0x3fc>)
 8011542:	42b5      	cmp	r5, r6
 8011544:	d060      	beq.n	8011608 <__aeabi_dadd+0x204>
 8011546:	2680      	movs	r6, #128	; 0x80
 8011548:	0436      	lsls	r6, r6, #16
 801154a:	4337      	orrs	r7, r6
 801154c:	46b8      	mov	r8, r7
 801154e:	2b38      	cmp	r3, #56	; 0x38
 8011550:	dc00      	bgt.n	8011554 <__aeabi_dadd+0x150>
 8011552:	e13e      	b.n	80117d2 <__aeabi_dadd+0x3ce>
 8011554:	4643      	mov	r3, r8
 8011556:	4313      	orrs	r3, r2
 8011558:	001f      	movs	r7, r3
 801155a:	1e7a      	subs	r2, r7, #1
 801155c:	4197      	sbcs	r7, r2
 801155e:	183f      	adds	r7, r7, r0
 8011560:	4287      	cmp	r7, r0
 8011562:	4180      	sbcs	r0, r0
 8011564:	4240      	negs	r0, r0
 8011566:	1809      	adds	r1, r1, r0
 8011568:	020b      	lsls	r3, r1, #8
 801156a:	d400      	bmi.n	801156e <__aeabi_dadd+0x16a>
 801156c:	e0b0      	b.n	80116d0 <__aeabi_dadd+0x2cc>
 801156e:	4ba4      	ldr	r3, [pc, #656]	; (8011800 <__aeabi_dadd+0x3fc>)
 8011570:	3501      	adds	r5, #1
 8011572:	429d      	cmp	r5, r3
 8011574:	d100      	bne.n	8011578 <__aeabi_dadd+0x174>
 8011576:	e0c3      	b.n	8011700 <__aeabi_dadd+0x2fc>
 8011578:	4aa2      	ldr	r2, [pc, #648]	; (8011804 <__aeabi_dadd+0x400>)
 801157a:	087b      	lsrs	r3, r7, #1
 801157c:	400a      	ands	r2, r1
 801157e:	2101      	movs	r1, #1
 8011580:	400f      	ands	r7, r1
 8011582:	431f      	orrs	r7, r3
 8011584:	0851      	lsrs	r1, r2, #1
 8011586:	07d3      	lsls	r3, r2, #31
 8011588:	2207      	movs	r2, #7
 801158a:	431f      	orrs	r7, r3
 801158c:	403a      	ands	r2, r7
 801158e:	e799      	b.n	80114c4 <__aeabi_dadd+0xc0>
 8011590:	4e9b      	ldr	r6, [pc, #620]	; (8011800 <__aeabi_dadd+0x3fc>)
 8011592:	42b5      	cmp	r5, r6
 8011594:	d038      	beq.n	8011608 <__aeabi_dadd+0x204>
 8011596:	2680      	movs	r6, #128	; 0x80
 8011598:	0436      	lsls	r6, r6, #16
 801159a:	4337      	orrs	r7, r6
 801159c:	46b8      	mov	r8, r7
 801159e:	2b38      	cmp	r3, #56	; 0x38
 80115a0:	dd00      	ble.n	80115a4 <__aeabi_dadd+0x1a0>
 80115a2:	e0dc      	b.n	801175e <__aeabi_dadd+0x35a>
 80115a4:	2b1f      	cmp	r3, #31
 80115a6:	dc00      	bgt.n	80115aa <__aeabi_dadd+0x1a6>
 80115a8:	e130      	b.n	801180c <__aeabi_dadd+0x408>
 80115aa:	001e      	movs	r6, r3
 80115ac:	4647      	mov	r7, r8
 80115ae:	3e20      	subs	r6, #32
 80115b0:	40f7      	lsrs	r7, r6
 80115b2:	46bc      	mov	ip, r7
 80115b4:	2b20      	cmp	r3, #32
 80115b6:	d004      	beq.n	80115c2 <__aeabi_dadd+0x1be>
 80115b8:	2640      	movs	r6, #64	; 0x40
 80115ba:	1af3      	subs	r3, r6, r3
 80115bc:	4646      	mov	r6, r8
 80115be:	409e      	lsls	r6, r3
 80115c0:	4332      	orrs	r2, r6
 80115c2:	0017      	movs	r7, r2
 80115c4:	4663      	mov	r3, ip
 80115c6:	1e7a      	subs	r2, r7, #1
 80115c8:	4197      	sbcs	r7, r2
 80115ca:	431f      	orrs	r7, r3
 80115cc:	e0cc      	b.n	8011768 <__aeabi_dadd+0x364>
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d100      	bne.n	80115d4 <__aeabi_dadd+0x1d0>
 80115d2:	e204      	b.n	80119de <__aeabi_dadd+0x5da>
 80115d4:	4643      	mov	r3, r8
 80115d6:	4313      	orrs	r3, r2
 80115d8:	d100      	bne.n	80115dc <__aeabi_dadd+0x1d8>
 80115da:	e159      	b.n	8011890 <__aeabi_dadd+0x48c>
 80115dc:	074b      	lsls	r3, r1, #29
 80115de:	08c0      	lsrs	r0, r0, #3
 80115e0:	4318      	orrs	r0, r3
 80115e2:	2380      	movs	r3, #128	; 0x80
 80115e4:	08c9      	lsrs	r1, r1, #3
 80115e6:	031b      	lsls	r3, r3, #12
 80115e8:	4219      	tst	r1, r3
 80115ea:	d008      	beq.n	80115fe <__aeabi_dadd+0x1fa>
 80115ec:	4645      	mov	r5, r8
 80115ee:	08ed      	lsrs	r5, r5, #3
 80115f0:	421d      	tst	r5, r3
 80115f2:	d104      	bne.n	80115fe <__aeabi_dadd+0x1fa>
 80115f4:	4643      	mov	r3, r8
 80115f6:	08d0      	lsrs	r0, r2, #3
 80115f8:	0759      	lsls	r1, r3, #29
 80115fa:	4308      	orrs	r0, r1
 80115fc:	0029      	movs	r1, r5
 80115fe:	0f42      	lsrs	r2, r0, #29
 8011600:	00c9      	lsls	r1, r1, #3
 8011602:	4d7f      	ldr	r5, [pc, #508]	; (8011800 <__aeabi_dadd+0x3fc>)
 8011604:	4311      	orrs	r1, r2
 8011606:	00c0      	lsls	r0, r0, #3
 8011608:	074b      	lsls	r3, r1, #29
 801160a:	08ca      	lsrs	r2, r1, #3
 801160c:	497c      	ldr	r1, [pc, #496]	; (8011800 <__aeabi_dadd+0x3fc>)
 801160e:	08c0      	lsrs	r0, r0, #3
 8011610:	4303      	orrs	r3, r0
 8011612:	428d      	cmp	r5, r1
 8011614:	d068      	beq.n	80116e8 <__aeabi_dadd+0x2e4>
 8011616:	0312      	lsls	r2, r2, #12
 8011618:	056d      	lsls	r5, r5, #21
 801161a:	0b12      	lsrs	r2, r2, #12
 801161c:	0d6d      	lsrs	r5, r5, #21
 801161e:	2100      	movs	r1, #0
 8011620:	0312      	lsls	r2, r2, #12
 8011622:	0018      	movs	r0, r3
 8011624:	0b13      	lsrs	r3, r2, #12
 8011626:	0d0a      	lsrs	r2, r1, #20
 8011628:	0512      	lsls	r2, r2, #20
 801162a:	431a      	orrs	r2, r3
 801162c:	4b76      	ldr	r3, [pc, #472]	; (8011808 <__aeabi_dadd+0x404>)
 801162e:	052d      	lsls	r5, r5, #20
 8011630:	4013      	ands	r3, r2
 8011632:	432b      	orrs	r3, r5
 8011634:	005b      	lsls	r3, r3, #1
 8011636:	07e4      	lsls	r4, r4, #31
 8011638:	085b      	lsrs	r3, r3, #1
 801163a:	4323      	orrs	r3, r4
 801163c:	0019      	movs	r1, r3
 801163e:	bc1c      	pop	{r2, r3, r4}
 8011640:	4690      	mov	r8, r2
 8011642:	4699      	mov	r9, r3
 8011644:	46a2      	mov	sl, r4
 8011646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011648:	003e      	movs	r6, r7
 801164a:	4316      	orrs	r6, r2
 801164c:	d012      	beq.n	8011674 <__aeabi_dadd+0x270>
 801164e:	1e5e      	subs	r6, r3, #1
 8011650:	2e00      	cmp	r6, #0
 8011652:	d000      	beq.n	8011656 <__aeabi_dadd+0x252>
 8011654:	e100      	b.n	8011858 <__aeabi_dadd+0x454>
 8011656:	1887      	adds	r7, r0, r2
 8011658:	4287      	cmp	r7, r0
 801165a:	4180      	sbcs	r0, r0
 801165c:	4441      	add	r1, r8
 801165e:	4240      	negs	r0, r0
 8011660:	1809      	adds	r1, r1, r0
 8011662:	2501      	movs	r5, #1
 8011664:	020b      	lsls	r3, r1, #8
 8011666:	d533      	bpl.n	80116d0 <__aeabi_dadd+0x2cc>
 8011668:	2502      	movs	r5, #2
 801166a:	e785      	b.n	8011578 <__aeabi_dadd+0x174>
 801166c:	4664      	mov	r4, ip
 801166e:	0033      	movs	r3, r6
 8011670:	4641      	mov	r1, r8
 8011672:	0010      	movs	r0, r2
 8011674:	001d      	movs	r5, r3
 8011676:	e7c7      	b.n	8011608 <__aeabi_dadd+0x204>
 8011678:	2d00      	cmp	r5, #0
 801167a:	d000      	beq.n	801167e <__aeabi_dadd+0x27a>
 801167c:	e0da      	b.n	8011834 <__aeabi_dadd+0x430>
 801167e:	000c      	movs	r4, r1
 8011680:	4304      	orrs	r4, r0
 8011682:	d0f3      	beq.n	801166c <__aeabi_dadd+0x268>
 8011684:	1c5c      	adds	r4, r3, #1
 8011686:	d100      	bne.n	801168a <__aeabi_dadd+0x286>
 8011688:	e19f      	b.n	80119ca <__aeabi_dadd+0x5c6>
 801168a:	4c5d      	ldr	r4, [pc, #372]	; (8011800 <__aeabi_dadd+0x3fc>)
 801168c:	42a6      	cmp	r6, r4
 801168e:	d100      	bne.n	8011692 <__aeabi_dadd+0x28e>
 8011690:	e12f      	b.n	80118f2 <__aeabi_dadd+0x4ee>
 8011692:	43db      	mvns	r3, r3
 8011694:	2b38      	cmp	r3, #56	; 0x38
 8011696:	dd00      	ble.n	801169a <__aeabi_dadd+0x296>
 8011698:	e166      	b.n	8011968 <__aeabi_dadd+0x564>
 801169a:	2b1f      	cmp	r3, #31
 801169c:	dd00      	ble.n	80116a0 <__aeabi_dadd+0x29c>
 801169e:	e183      	b.n	80119a8 <__aeabi_dadd+0x5a4>
 80116a0:	2420      	movs	r4, #32
 80116a2:	0005      	movs	r5, r0
 80116a4:	1ae4      	subs	r4, r4, r3
 80116a6:	000f      	movs	r7, r1
 80116a8:	40dd      	lsrs	r5, r3
 80116aa:	40d9      	lsrs	r1, r3
 80116ac:	40a0      	lsls	r0, r4
 80116ae:	4643      	mov	r3, r8
 80116b0:	40a7      	lsls	r7, r4
 80116b2:	1a5b      	subs	r3, r3, r1
 80116b4:	1e44      	subs	r4, r0, #1
 80116b6:	41a0      	sbcs	r0, r4
 80116b8:	4698      	mov	r8, r3
 80116ba:	432f      	orrs	r7, r5
 80116bc:	4338      	orrs	r0, r7
 80116be:	1a17      	subs	r7, r2, r0
 80116c0:	42ba      	cmp	r2, r7
 80116c2:	4192      	sbcs	r2, r2
 80116c4:	4643      	mov	r3, r8
 80116c6:	4252      	negs	r2, r2
 80116c8:	1a99      	subs	r1, r3, r2
 80116ca:	4664      	mov	r4, ip
 80116cc:	0035      	movs	r5, r6
 80116ce:	e6ca      	b.n	8011466 <__aeabi_dadd+0x62>
 80116d0:	2207      	movs	r2, #7
 80116d2:	403a      	ands	r2, r7
 80116d4:	2a00      	cmp	r2, #0
 80116d6:	d000      	beq.n	80116da <__aeabi_dadd+0x2d6>
 80116d8:	e6f6      	b.n	80114c8 <__aeabi_dadd+0xc4>
 80116da:	074b      	lsls	r3, r1, #29
 80116dc:	08ca      	lsrs	r2, r1, #3
 80116de:	4948      	ldr	r1, [pc, #288]	; (8011800 <__aeabi_dadd+0x3fc>)
 80116e0:	08ff      	lsrs	r7, r7, #3
 80116e2:	433b      	orrs	r3, r7
 80116e4:	428d      	cmp	r5, r1
 80116e6:	d196      	bne.n	8011616 <__aeabi_dadd+0x212>
 80116e8:	0019      	movs	r1, r3
 80116ea:	4311      	orrs	r1, r2
 80116ec:	d100      	bne.n	80116f0 <__aeabi_dadd+0x2ec>
 80116ee:	e19e      	b.n	8011a2e <__aeabi_dadd+0x62a>
 80116f0:	2180      	movs	r1, #128	; 0x80
 80116f2:	0309      	lsls	r1, r1, #12
 80116f4:	430a      	orrs	r2, r1
 80116f6:	0312      	lsls	r2, r2, #12
 80116f8:	0b12      	lsrs	r2, r2, #12
 80116fa:	4d41      	ldr	r5, [pc, #260]	; (8011800 <__aeabi_dadd+0x3fc>)
 80116fc:	e78f      	b.n	801161e <__aeabi_dadd+0x21a>
 80116fe:	0015      	movs	r5, r2
 8011700:	2200      	movs	r2, #0
 8011702:	2300      	movs	r3, #0
 8011704:	e78b      	b.n	801161e <__aeabi_dadd+0x21a>
 8011706:	2b00      	cmp	r3, #0
 8011708:	d000      	beq.n	801170c <__aeabi_dadd+0x308>
 801170a:	e0c7      	b.n	801189c <__aeabi_dadd+0x498>
 801170c:	1c6b      	adds	r3, r5, #1
 801170e:	055f      	lsls	r7, r3, #21
 8011710:	0d7f      	lsrs	r7, r7, #21
 8011712:	2f01      	cmp	r7, #1
 8011714:	dc00      	bgt.n	8011718 <__aeabi_dadd+0x314>
 8011716:	e0f1      	b.n	80118fc <__aeabi_dadd+0x4f8>
 8011718:	4d39      	ldr	r5, [pc, #228]	; (8011800 <__aeabi_dadd+0x3fc>)
 801171a:	42ab      	cmp	r3, r5
 801171c:	d100      	bne.n	8011720 <__aeabi_dadd+0x31c>
 801171e:	e0b9      	b.n	8011894 <__aeabi_dadd+0x490>
 8011720:	1885      	adds	r5, r0, r2
 8011722:	000a      	movs	r2, r1
 8011724:	4285      	cmp	r5, r0
 8011726:	4189      	sbcs	r1, r1
 8011728:	4442      	add	r2, r8
 801172a:	4249      	negs	r1, r1
 801172c:	1851      	adds	r1, r2, r1
 801172e:	2207      	movs	r2, #7
 8011730:	07cf      	lsls	r7, r1, #31
 8011732:	086d      	lsrs	r5, r5, #1
 8011734:	432f      	orrs	r7, r5
 8011736:	0849      	lsrs	r1, r1, #1
 8011738:	403a      	ands	r2, r7
 801173a:	001d      	movs	r5, r3
 801173c:	e6c2      	b.n	80114c4 <__aeabi_dadd+0xc0>
 801173e:	2207      	movs	r2, #7
 8011740:	4930      	ldr	r1, [pc, #192]	; (8011804 <__aeabi_dadd+0x400>)
 8011742:	1aed      	subs	r5, r5, r3
 8011744:	4031      	ands	r1, r6
 8011746:	403a      	ands	r2, r7
 8011748:	e6bc      	b.n	80114c4 <__aeabi_dadd+0xc0>
 801174a:	003e      	movs	r6, r7
 801174c:	3828      	subs	r0, #40	; 0x28
 801174e:	4086      	lsls	r6, r0
 8011750:	2700      	movs	r7, #0
 8011752:	e69f      	b.n	8011494 <__aeabi_dadd+0x90>
 8011754:	0038      	movs	r0, r7
 8011756:	f7ff f98d 	bl	8010a74 <__clzsi2>
 801175a:	3020      	adds	r0, #32
 801175c:	e68e      	b.n	801147c <__aeabi_dadd+0x78>
 801175e:	4643      	mov	r3, r8
 8011760:	4313      	orrs	r3, r2
 8011762:	001f      	movs	r7, r3
 8011764:	1e7a      	subs	r2, r7, #1
 8011766:	4197      	sbcs	r7, r2
 8011768:	1bc7      	subs	r7, r0, r7
 801176a:	42b8      	cmp	r0, r7
 801176c:	4180      	sbcs	r0, r0
 801176e:	4240      	negs	r0, r0
 8011770:	1a09      	subs	r1, r1, r0
 8011772:	e678      	b.n	8011466 <__aeabi_dadd+0x62>
 8011774:	000e      	movs	r6, r1
 8011776:	003b      	movs	r3, r7
 8011778:	4306      	orrs	r6, r0
 801177a:	4313      	orrs	r3, r2
 801177c:	2d00      	cmp	r5, #0
 801177e:	d161      	bne.n	8011844 <__aeabi_dadd+0x440>
 8011780:	2e00      	cmp	r6, #0
 8011782:	d000      	beq.n	8011786 <__aeabi_dadd+0x382>
 8011784:	e0f4      	b.n	8011970 <__aeabi_dadd+0x56c>
 8011786:	2b00      	cmp	r3, #0
 8011788:	d100      	bne.n	801178c <__aeabi_dadd+0x388>
 801178a:	e11b      	b.n	80119c4 <__aeabi_dadd+0x5c0>
 801178c:	4664      	mov	r4, ip
 801178e:	0039      	movs	r1, r7
 8011790:	0010      	movs	r0, r2
 8011792:	e739      	b.n	8011608 <__aeabi_dadd+0x204>
 8011794:	4f1a      	ldr	r7, [pc, #104]	; (8011800 <__aeabi_dadd+0x3fc>)
 8011796:	42bb      	cmp	r3, r7
 8011798:	d07a      	beq.n	8011890 <__aeabi_dadd+0x48c>
 801179a:	0033      	movs	r3, r6
 801179c:	e6ff      	b.n	801159e <__aeabi_dadd+0x19a>
 801179e:	0030      	movs	r0, r6
 80117a0:	3d1f      	subs	r5, #31
 80117a2:	40e8      	lsrs	r0, r5
 80117a4:	2b20      	cmp	r3, #32
 80117a6:	d003      	beq.n	80117b0 <__aeabi_dadd+0x3ac>
 80117a8:	2140      	movs	r1, #64	; 0x40
 80117aa:	1acb      	subs	r3, r1, r3
 80117ac:	409e      	lsls	r6, r3
 80117ae:	4337      	orrs	r7, r6
 80117b0:	1e7b      	subs	r3, r7, #1
 80117b2:	419f      	sbcs	r7, r3
 80117b4:	2207      	movs	r2, #7
 80117b6:	4307      	orrs	r7, r0
 80117b8:	403a      	ands	r2, r7
 80117ba:	2100      	movs	r1, #0
 80117bc:	2500      	movs	r5, #0
 80117be:	e789      	b.n	80116d4 <__aeabi_dadd+0x2d0>
 80117c0:	1a17      	subs	r7, r2, r0
 80117c2:	4643      	mov	r3, r8
 80117c4:	42ba      	cmp	r2, r7
 80117c6:	41b6      	sbcs	r6, r6
 80117c8:	1a59      	subs	r1, r3, r1
 80117ca:	4276      	negs	r6, r6
 80117cc:	1b8e      	subs	r6, r1, r6
 80117ce:	4664      	mov	r4, ip
 80117d0:	e64e      	b.n	8011470 <__aeabi_dadd+0x6c>
 80117d2:	2b1f      	cmp	r3, #31
 80117d4:	dd00      	ble.n	80117d8 <__aeabi_dadd+0x3d4>
 80117d6:	e0ad      	b.n	8011934 <__aeabi_dadd+0x530>
 80117d8:	2620      	movs	r6, #32
 80117da:	4647      	mov	r7, r8
 80117dc:	1af6      	subs	r6, r6, r3
 80117de:	40b7      	lsls	r7, r6
 80117e0:	46b9      	mov	r9, r7
 80117e2:	0017      	movs	r7, r2
 80117e4:	46b2      	mov	sl, r6
 80117e6:	40df      	lsrs	r7, r3
 80117e8:	464e      	mov	r6, r9
 80117ea:	433e      	orrs	r6, r7
 80117ec:	0037      	movs	r7, r6
 80117ee:	4656      	mov	r6, sl
 80117f0:	40b2      	lsls	r2, r6
 80117f2:	1e56      	subs	r6, r2, #1
 80117f4:	41b2      	sbcs	r2, r6
 80117f6:	4317      	orrs	r7, r2
 80117f8:	4642      	mov	r2, r8
 80117fa:	40da      	lsrs	r2, r3
 80117fc:	1889      	adds	r1, r1, r2
 80117fe:	e6ae      	b.n	801155e <__aeabi_dadd+0x15a>
 8011800:	000007ff 	.word	0x000007ff
 8011804:	ff7fffff 	.word	0xff7fffff
 8011808:	800fffff 	.word	0x800fffff
 801180c:	2620      	movs	r6, #32
 801180e:	4647      	mov	r7, r8
 8011810:	1af6      	subs	r6, r6, r3
 8011812:	40b7      	lsls	r7, r6
 8011814:	46b9      	mov	r9, r7
 8011816:	0017      	movs	r7, r2
 8011818:	46b2      	mov	sl, r6
 801181a:	40df      	lsrs	r7, r3
 801181c:	464e      	mov	r6, r9
 801181e:	433e      	orrs	r6, r7
 8011820:	0037      	movs	r7, r6
 8011822:	4656      	mov	r6, sl
 8011824:	40b2      	lsls	r2, r6
 8011826:	1e56      	subs	r6, r2, #1
 8011828:	41b2      	sbcs	r2, r6
 801182a:	4317      	orrs	r7, r2
 801182c:	4642      	mov	r2, r8
 801182e:	40da      	lsrs	r2, r3
 8011830:	1a89      	subs	r1, r1, r2
 8011832:	e799      	b.n	8011768 <__aeabi_dadd+0x364>
 8011834:	4c7f      	ldr	r4, [pc, #508]	; (8011a34 <__aeabi_dadd+0x630>)
 8011836:	42a6      	cmp	r6, r4
 8011838:	d05b      	beq.n	80118f2 <__aeabi_dadd+0x4ee>
 801183a:	2480      	movs	r4, #128	; 0x80
 801183c:	0424      	lsls	r4, r4, #16
 801183e:	425b      	negs	r3, r3
 8011840:	4321      	orrs	r1, r4
 8011842:	e727      	b.n	8011694 <__aeabi_dadd+0x290>
 8011844:	2e00      	cmp	r6, #0
 8011846:	d10c      	bne.n	8011862 <__aeabi_dadd+0x45e>
 8011848:	2b00      	cmp	r3, #0
 801184a:	d100      	bne.n	801184e <__aeabi_dadd+0x44a>
 801184c:	e0cb      	b.n	80119e6 <__aeabi_dadd+0x5e2>
 801184e:	4664      	mov	r4, ip
 8011850:	0039      	movs	r1, r7
 8011852:	0010      	movs	r0, r2
 8011854:	4d77      	ldr	r5, [pc, #476]	; (8011a34 <__aeabi_dadd+0x630>)
 8011856:	e6d7      	b.n	8011608 <__aeabi_dadd+0x204>
 8011858:	4f76      	ldr	r7, [pc, #472]	; (8011a34 <__aeabi_dadd+0x630>)
 801185a:	42bb      	cmp	r3, r7
 801185c:	d018      	beq.n	8011890 <__aeabi_dadd+0x48c>
 801185e:	0033      	movs	r3, r6
 8011860:	e675      	b.n	801154e <__aeabi_dadd+0x14a>
 8011862:	2b00      	cmp	r3, #0
 8011864:	d014      	beq.n	8011890 <__aeabi_dadd+0x48c>
 8011866:	074b      	lsls	r3, r1, #29
 8011868:	08c0      	lsrs	r0, r0, #3
 801186a:	4318      	orrs	r0, r3
 801186c:	2380      	movs	r3, #128	; 0x80
 801186e:	08c9      	lsrs	r1, r1, #3
 8011870:	031b      	lsls	r3, r3, #12
 8011872:	4219      	tst	r1, r3
 8011874:	d007      	beq.n	8011886 <__aeabi_dadd+0x482>
 8011876:	08fc      	lsrs	r4, r7, #3
 8011878:	421c      	tst	r4, r3
 801187a:	d104      	bne.n	8011886 <__aeabi_dadd+0x482>
 801187c:	0779      	lsls	r1, r7, #29
 801187e:	08d0      	lsrs	r0, r2, #3
 8011880:	4308      	orrs	r0, r1
 8011882:	46e1      	mov	r9, ip
 8011884:	0021      	movs	r1, r4
 8011886:	464c      	mov	r4, r9
 8011888:	0f42      	lsrs	r2, r0, #29
 801188a:	00c9      	lsls	r1, r1, #3
 801188c:	4311      	orrs	r1, r2
 801188e:	00c0      	lsls	r0, r0, #3
 8011890:	4d68      	ldr	r5, [pc, #416]	; (8011a34 <__aeabi_dadd+0x630>)
 8011892:	e6b9      	b.n	8011608 <__aeabi_dadd+0x204>
 8011894:	001d      	movs	r5, r3
 8011896:	2200      	movs	r2, #0
 8011898:	2300      	movs	r3, #0
 801189a:	e6c0      	b.n	801161e <__aeabi_dadd+0x21a>
 801189c:	2d00      	cmp	r5, #0
 801189e:	d15b      	bne.n	8011958 <__aeabi_dadd+0x554>
 80118a0:	000d      	movs	r5, r1
 80118a2:	4305      	orrs	r5, r0
 80118a4:	d100      	bne.n	80118a8 <__aeabi_dadd+0x4a4>
 80118a6:	e6e2      	b.n	801166e <__aeabi_dadd+0x26a>
 80118a8:	1c5d      	adds	r5, r3, #1
 80118aa:	d100      	bne.n	80118ae <__aeabi_dadd+0x4aa>
 80118ac:	e0b0      	b.n	8011a10 <__aeabi_dadd+0x60c>
 80118ae:	4d61      	ldr	r5, [pc, #388]	; (8011a34 <__aeabi_dadd+0x630>)
 80118b0:	42ae      	cmp	r6, r5
 80118b2:	d01f      	beq.n	80118f4 <__aeabi_dadd+0x4f0>
 80118b4:	43db      	mvns	r3, r3
 80118b6:	2b38      	cmp	r3, #56	; 0x38
 80118b8:	dc71      	bgt.n	801199e <__aeabi_dadd+0x59a>
 80118ba:	2b1f      	cmp	r3, #31
 80118bc:	dd00      	ble.n	80118c0 <__aeabi_dadd+0x4bc>
 80118be:	e096      	b.n	80119ee <__aeabi_dadd+0x5ea>
 80118c0:	2520      	movs	r5, #32
 80118c2:	000f      	movs	r7, r1
 80118c4:	1aed      	subs	r5, r5, r3
 80118c6:	40af      	lsls	r7, r5
 80118c8:	46b9      	mov	r9, r7
 80118ca:	0007      	movs	r7, r0
 80118cc:	46aa      	mov	sl, r5
 80118ce:	40df      	lsrs	r7, r3
 80118d0:	464d      	mov	r5, r9
 80118d2:	433d      	orrs	r5, r7
 80118d4:	002f      	movs	r7, r5
 80118d6:	4655      	mov	r5, sl
 80118d8:	40a8      	lsls	r0, r5
 80118da:	40d9      	lsrs	r1, r3
 80118dc:	1e45      	subs	r5, r0, #1
 80118de:	41a8      	sbcs	r0, r5
 80118e0:	4488      	add	r8, r1
 80118e2:	4307      	orrs	r7, r0
 80118e4:	18bf      	adds	r7, r7, r2
 80118e6:	4297      	cmp	r7, r2
 80118e8:	4192      	sbcs	r2, r2
 80118ea:	4251      	negs	r1, r2
 80118ec:	4441      	add	r1, r8
 80118ee:	0035      	movs	r5, r6
 80118f0:	e63a      	b.n	8011568 <__aeabi_dadd+0x164>
 80118f2:	4664      	mov	r4, ip
 80118f4:	0035      	movs	r5, r6
 80118f6:	4641      	mov	r1, r8
 80118f8:	0010      	movs	r0, r2
 80118fa:	e685      	b.n	8011608 <__aeabi_dadd+0x204>
 80118fc:	000b      	movs	r3, r1
 80118fe:	4303      	orrs	r3, r0
 8011900:	2d00      	cmp	r5, #0
 8011902:	d000      	beq.n	8011906 <__aeabi_dadd+0x502>
 8011904:	e663      	b.n	80115ce <__aeabi_dadd+0x1ca>
 8011906:	2b00      	cmp	r3, #0
 8011908:	d0f5      	beq.n	80118f6 <__aeabi_dadd+0x4f2>
 801190a:	4643      	mov	r3, r8
 801190c:	4313      	orrs	r3, r2
 801190e:	d100      	bne.n	8011912 <__aeabi_dadd+0x50e>
 8011910:	e67a      	b.n	8011608 <__aeabi_dadd+0x204>
 8011912:	1887      	adds	r7, r0, r2
 8011914:	4287      	cmp	r7, r0
 8011916:	4180      	sbcs	r0, r0
 8011918:	2207      	movs	r2, #7
 801191a:	4441      	add	r1, r8
 801191c:	4240      	negs	r0, r0
 801191e:	1809      	adds	r1, r1, r0
 8011920:	403a      	ands	r2, r7
 8011922:	020b      	lsls	r3, r1, #8
 8011924:	d400      	bmi.n	8011928 <__aeabi_dadd+0x524>
 8011926:	e6d5      	b.n	80116d4 <__aeabi_dadd+0x2d0>
 8011928:	4b43      	ldr	r3, [pc, #268]	; (8011a38 <__aeabi_dadd+0x634>)
 801192a:	3501      	adds	r5, #1
 801192c:	4019      	ands	r1, r3
 801192e:	e5c9      	b.n	80114c4 <__aeabi_dadd+0xc0>
 8011930:	0038      	movs	r0, r7
 8011932:	e669      	b.n	8011608 <__aeabi_dadd+0x204>
 8011934:	001e      	movs	r6, r3
 8011936:	4647      	mov	r7, r8
 8011938:	3e20      	subs	r6, #32
 801193a:	40f7      	lsrs	r7, r6
 801193c:	46bc      	mov	ip, r7
 801193e:	2b20      	cmp	r3, #32
 8011940:	d004      	beq.n	801194c <__aeabi_dadd+0x548>
 8011942:	2640      	movs	r6, #64	; 0x40
 8011944:	1af3      	subs	r3, r6, r3
 8011946:	4646      	mov	r6, r8
 8011948:	409e      	lsls	r6, r3
 801194a:	4332      	orrs	r2, r6
 801194c:	0017      	movs	r7, r2
 801194e:	4663      	mov	r3, ip
 8011950:	1e7a      	subs	r2, r7, #1
 8011952:	4197      	sbcs	r7, r2
 8011954:	431f      	orrs	r7, r3
 8011956:	e602      	b.n	801155e <__aeabi_dadd+0x15a>
 8011958:	4d36      	ldr	r5, [pc, #216]	; (8011a34 <__aeabi_dadd+0x630>)
 801195a:	42ae      	cmp	r6, r5
 801195c:	d0ca      	beq.n	80118f4 <__aeabi_dadd+0x4f0>
 801195e:	2580      	movs	r5, #128	; 0x80
 8011960:	042d      	lsls	r5, r5, #16
 8011962:	425b      	negs	r3, r3
 8011964:	4329      	orrs	r1, r5
 8011966:	e7a6      	b.n	80118b6 <__aeabi_dadd+0x4b2>
 8011968:	4308      	orrs	r0, r1
 801196a:	1e41      	subs	r1, r0, #1
 801196c:	4188      	sbcs	r0, r1
 801196e:	e6a6      	b.n	80116be <__aeabi_dadd+0x2ba>
 8011970:	2b00      	cmp	r3, #0
 8011972:	d100      	bne.n	8011976 <__aeabi_dadd+0x572>
 8011974:	e648      	b.n	8011608 <__aeabi_dadd+0x204>
 8011976:	1a87      	subs	r7, r0, r2
 8011978:	4643      	mov	r3, r8
 801197a:	42b8      	cmp	r0, r7
 801197c:	41b6      	sbcs	r6, r6
 801197e:	1acb      	subs	r3, r1, r3
 8011980:	4276      	negs	r6, r6
 8011982:	1b9e      	subs	r6, r3, r6
 8011984:	0233      	lsls	r3, r6, #8
 8011986:	d54b      	bpl.n	8011a20 <__aeabi_dadd+0x61c>
 8011988:	1a17      	subs	r7, r2, r0
 801198a:	4643      	mov	r3, r8
 801198c:	42ba      	cmp	r2, r7
 801198e:	4192      	sbcs	r2, r2
 8011990:	1a59      	subs	r1, r3, r1
 8011992:	4252      	negs	r2, r2
 8011994:	1a89      	subs	r1, r1, r2
 8011996:	2207      	movs	r2, #7
 8011998:	4664      	mov	r4, ip
 801199a:	403a      	ands	r2, r7
 801199c:	e592      	b.n	80114c4 <__aeabi_dadd+0xc0>
 801199e:	4301      	orrs	r1, r0
 80119a0:	000f      	movs	r7, r1
 80119a2:	1e79      	subs	r1, r7, #1
 80119a4:	418f      	sbcs	r7, r1
 80119a6:	e79d      	b.n	80118e4 <__aeabi_dadd+0x4e0>
 80119a8:	001c      	movs	r4, r3
 80119aa:	000f      	movs	r7, r1
 80119ac:	3c20      	subs	r4, #32
 80119ae:	40e7      	lsrs	r7, r4
 80119b0:	2b20      	cmp	r3, #32
 80119b2:	d003      	beq.n	80119bc <__aeabi_dadd+0x5b8>
 80119b4:	2440      	movs	r4, #64	; 0x40
 80119b6:	1ae3      	subs	r3, r4, r3
 80119b8:	4099      	lsls	r1, r3
 80119ba:	4308      	orrs	r0, r1
 80119bc:	1e41      	subs	r1, r0, #1
 80119be:	4188      	sbcs	r0, r1
 80119c0:	4338      	orrs	r0, r7
 80119c2:	e67c      	b.n	80116be <__aeabi_dadd+0x2ba>
 80119c4:	2200      	movs	r2, #0
 80119c6:	2400      	movs	r4, #0
 80119c8:	e625      	b.n	8011616 <__aeabi_dadd+0x212>
 80119ca:	1a17      	subs	r7, r2, r0
 80119cc:	4643      	mov	r3, r8
 80119ce:	42ba      	cmp	r2, r7
 80119d0:	4192      	sbcs	r2, r2
 80119d2:	1a59      	subs	r1, r3, r1
 80119d4:	4252      	negs	r2, r2
 80119d6:	1a89      	subs	r1, r1, r2
 80119d8:	4664      	mov	r4, ip
 80119da:	0035      	movs	r5, r6
 80119dc:	e543      	b.n	8011466 <__aeabi_dadd+0x62>
 80119de:	4641      	mov	r1, r8
 80119e0:	0010      	movs	r0, r2
 80119e2:	4d14      	ldr	r5, [pc, #80]	; (8011a34 <__aeabi_dadd+0x630>)
 80119e4:	e610      	b.n	8011608 <__aeabi_dadd+0x204>
 80119e6:	2280      	movs	r2, #128	; 0x80
 80119e8:	2400      	movs	r4, #0
 80119ea:	0312      	lsls	r2, r2, #12
 80119ec:	e680      	b.n	80116f0 <__aeabi_dadd+0x2ec>
 80119ee:	001d      	movs	r5, r3
 80119f0:	000f      	movs	r7, r1
 80119f2:	3d20      	subs	r5, #32
 80119f4:	40ef      	lsrs	r7, r5
 80119f6:	46bc      	mov	ip, r7
 80119f8:	2b20      	cmp	r3, #32
 80119fa:	d003      	beq.n	8011a04 <__aeabi_dadd+0x600>
 80119fc:	2540      	movs	r5, #64	; 0x40
 80119fe:	1aeb      	subs	r3, r5, r3
 8011a00:	4099      	lsls	r1, r3
 8011a02:	4308      	orrs	r0, r1
 8011a04:	0007      	movs	r7, r0
 8011a06:	4663      	mov	r3, ip
 8011a08:	1e78      	subs	r0, r7, #1
 8011a0a:	4187      	sbcs	r7, r0
 8011a0c:	431f      	orrs	r7, r3
 8011a0e:	e769      	b.n	80118e4 <__aeabi_dadd+0x4e0>
 8011a10:	1887      	adds	r7, r0, r2
 8011a12:	4297      	cmp	r7, r2
 8011a14:	419b      	sbcs	r3, r3
 8011a16:	4441      	add	r1, r8
 8011a18:	425b      	negs	r3, r3
 8011a1a:	18c9      	adds	r1, r1, r3
 8011a1c:	0035      	movs	r5, r6
 8011a1e:	e5a3      	b.n	8011568 <__aeabi_dadd+0x164>
 8011a20:	003b      	movs	r3, r7
 8011a22:	4333      	orrs	r3, r6
 8011a24:	d0ce      	beq.n	80119c4 <__aeabi_dadd+0x5c0>
 8011a26:	2207      	movs	r2, #7
 8011a28:	0031      	movs	r1, r6
 8011a2a:	403a      	ands	r2, r7
 8011a2c:	e652      	b.n	80116d4 <__aeabi_dadd+0x2d0>
 8011a2e:	2300      	movs	r3, #0
 8011a30:	001a      	movs	r2, r3
 8011a32:	e5f4      	b.n	801161e <__aeabi_dadd+0x21a>
 8011a34:	000007ff 	.word	0x000007ff
 8011a38:	ff7fffff 	.word	0xff7fffff

08011a3c <__aeabi_ddiv>:
 8011a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a3e:	4657      	mov	r7, sl
 8011a40:	46de      	mov	lr, fp
 8011a42:	464e      	mov	r6, r9
 8011a44:	4645      	mov	r5, r8
 8011a46:	b5e0      	push	{r5, r6, r7, lr}
 8011a48:	4683      	mov	fp, r0
 8011a4a:	0007      	movs	r7, r0
 8011a4c:	030e      	lsls	r6, r1, #12
 8011a4e:	0048      	lsls	r0, r1, #1
 8011a50:	b085      	sub	sp, #20
 8011a52:	4692      	mov	sl, r2
 8011a54:	001c      	movs	r4, r3
 8011a56:	0b36      	lsrs	r6, r6, #12
 8011a58:	0d40      	lsrs	r0, r0, #21
 8011a5a:	0fcd      	lsrs	r5, r1, #31
 8011a5c:	2800      	cmp	r0, #0
 8011a5e:	d100      	bne.n	8011a62 <__aeabi_ddiv+0x26>
 8011a60:	e09d      	b.n	8011b9e <__aeabi_ddiv+0x162>
 8011a62:	4b95      	ldr	r3, [pc, #596]	; (8011cb8 <__aeabi_ddiv+0x27c>)
 8011a64:	4298      	cmp	r0, r3
 8011a66:	d039      	beq.n	8011adc <__aeabi_ddiv+0xa0>
 8011a68:	2380      	movs	r3, #128	; 0x80
 8011a6a:	00f6      	lsls	r6, r6, #3
 8011a6c:	041b      	lsls	r3, r3, #16
 8011a6e:	431e      	orrs	r6, r3
 8011a70:	4a92      	ldr	r2, [pc, #584]	; (8011cbc <__aeabi_ddiv+0x280>)
 8011a72:	0f7b      	lsrs	r3, r7, #29
 8011a74:	4333      	orrs	r3, r6
 8011a76:	4699      	mov	r9, r3
 8011a78:	4694      	mov	ip, r2
 8011a7a:	0003      	movs	r3, r0
 8011a7c:	4463      	add	r3, ip
 8011a7e:	9300      	str	r3, [sp, #0]
 8011a80:	2300      	movs	r3, #0
 8011a82:	2600      	movs	r6, #0
 8011a84:	00ff      	lsls	r7, r7, #3
 8011a86:	9302      	str	r3, [sp, #8]
 8011a88:	0323      	lsls	r3, r4, #12
 8011a8a:	0b1b      	lsrs	r3, r3, #12
 8011a8c:	4698      	mov	r8, r3
 8011a8e:	0063      	lsls	r3, r4, #1
 8011a90:	0fe4      	lsrs	r4, r4, #31
 8011a92:	4652      	mov	r2, sl
 8011a94:	0d5b      	lsrs	r3, r3, #21
 8011a96:	9401      	str	r4, [sp, #4]
 8011a98:	d100      	bne.n	8011a9c <__aeabi_ddiv+0x60>
 8011a9a:	e0b3      	b.n	8011c04 <__aeabi_ddiv+0x1c8>
 8011a9c:	4986      	ldr	r1, [pc, #536]	; (8011cb8 <__aeabi_ddiv+0x27c>)
 8011a9e:	428b      	cmp	r3, r1
 8011aa0:	d100      	bne.n	8011aa4 <__aeabi_ddiv+0x68>
 8011aa2:	e09e      	b.n	8011be2 <__aeabi_ddiv+0x1a6>
 8011aa4:	4642      	mov	r2, r8
 8011aa6:	00d1      	lsls	r1, r2, #3
 8011aa8:	2280      	movs	r2, #128	; 0x80
 8011aaa:	0412      	lsls	r2, r2, #16
 8011aac:	430a      	orrs	r2, r1
 8011aae:	4651      	mov	r1, sl
 8011ab0:	0f49      	lsrs	r1, r1, #29
 8011ab2:	4311      	orrs	r1, r2
 8011ab4:	468b      	mov	fp, r1
 8011ab6:	4981      	ldr	r1, [pc, #516]	; (8011cbc <__aeabi_ddiv+0x280>)
 8011ab8:	4652      	mov	r2, sl
 8011aba:	468c      	mov	ip, r1
 8011abc:	9900      	ldr	r1, [sp, #0]
 8011abe:	4463      	add	r3, ip
 8011ac0:	1acb      	subs	r3, r1, r3
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	00d2      	lsls	r2, r2, #3
 8011ac6:	9300      	str	r3, [sp, #0]
 8011ac8:	002b      	movs	r3, r5
 8011aca:	4063      	eors	r3, r4
 8011acc:	469a      	mov	sl, r3
 8011ace:	2e0f      	cmp	r6, #15
 8011ad0:	d900      	bls.n	8011ad4 <__aeabi_ddiv+0x98>
 8011ad2:	e105      	b.n	8011ce0 <__aeabi_ddiv+0x2a4>
 8011ad4:	4b7a      	ldr	r3, [pc, #488]	; (8011cc0 <__aeabi_ddiv+0x284>)
 8011ad6:	00b6      	lsls	r6, r6, #2
 8011ad8:	599b      	ldr	r3, [r3, r6]
 8011ada:	469f      	mov	pc, r3
 8011adc:	465b      	mov	r3, fp
 8011ade:	4333      	orrs	r3, r6
 8011ae0:	4699      	mov	r9, r3
 8011ae2:	d000      	beq.n	8011ae6 <__aeabi_ddiv+0xaa>
 8011ae4:	e0b8      	b.n	8011c58 <__aeabi_ddiv+0x21c>
 8011ae6:	2302      	movs	r3, #2
 8011ae8:	2608      	movs	r6, #8
 8011aea:	2700      	movs	r7, #0
 8011aec:	9000      	str	r0, [sp, #0]
 8011aee:	9302      	str	r3, [sp, #8]
 8011af0:	e7ca      	b.n	8011a88 <__aeabi_ddiv+0x4c>
 8011af2:	46cb      	mov	fp, r9
 8011af4:	003a      	movs	r2, r7
 8011af6:	9902      	ldr	r1, [sp, #8]
 8011af8:	9501      	str	r5, [sp, #4]
 8011afa:	9b01      	ldr	r3, [sp, #4]
 8011afc:	469a      	mov	sl, r3
 8011afe:	2902      	cmp	r1, #2
 8011b00:	d027      	beq.n	8011b52 <__aeabi_ddiv+0x116>
 8011b02:	2903      	cmp	r1, #3
 8011b04:	d100      	bne.n	8011b08 <__aeabi_ddiv+0xcc>
 8011b06:	e280      	b.n	801200a <__aeabi_ddiv+0x5ce>
 8011b08:	2901      	cmp	r1, #1
 8011b0a:	d044      	beq.n	8011b96 <__aeabi_ddiv+0x15a>
 8011b0c:	496d      	ldr	r1, [pc, #436]	; (8011cc4 <__aeabi_ddiv+0x288>)
 8011b0e:	9b00      	ldr	r3, [sp, #0]
 8011b10:	468c      	mov	ip, r1
 8011b12:	4463      	add	r3, ip
 8011b14:	001c      	movs	r4, r3
 8011b16:	2c00      	cmp	r4, #0
 8011b18:	dd38      	ble.n	8011b8c <__aeabi_ddiv+0x150>
 8011b1a:	0753      	lsls	r3, r2, #29
 8011b1c:	d000      	beq.n	8011b20 <__aeabi_ddiv+0xe4>
 8011b1e:	e213      	b.n	8011f48 <__aeabi_ddiv+0x50c>
 8011b20:	08d2      	lsrs	r2, r2, #3
 8011b22:	465b      	mov	r3, fp
 8011b24:	01db      	lsls	r3, r3, #7
 8011b26:	d509      	bpl.n	8011b3c <__aeabi_ddiv+0x100>
 8011b28:	4659      	mov	r1, fp
 8011b2a:	4b67      	ldr	r3, [pc, #412]	; (8011cc8 <__aeabi_ddiv+0x28c>)
 8011b2c:	4019      	ands	r1, r3
 8011b2e:	468b      	mov	fp, r1
 8011b30:	2180      	movs	r1, #128	; 0x80
 8011b32:	00c9      	lsls	r1, r1, #3
 8011b34:	468c      	mov	ip, r1
 8011b36:	9b00      	ldr	r3, [sp, #0]
 8011b38:	4463      	add	r3, ip
 8011b3a:	001c      	movs	r4, r3
 8011b3c:	4b63      	ldr	r3, [pc, #396]	; (8011ccc <__aeabi_ddiv+0x290>)
 8011b3e:	429c      	cmp	r4, r3
 8011b40:	dc07      	bgt.n	8011b52 <__aeabi_ddiv+0x116>
 8011b42:	465b      	mov	r3, fp
 8011b44:	0564      	lsls	r4, r4, #21
 8011b46:	075f      	lsls	r7, r3, #29
 8011b48:	025b      	lsls	r3, r3, #9
 8011b4a:	4317      	orrs	r7, r2
 8011b4c:	0b1b      	lsrs	r3, r3, #12
 8011b4e:	0d62      	lsrs	r2, r4, #21
 8011b50:	e002      	b.n	8011b58 <__aeabi_ddiv+0x11c>
 8011b52:	2300      	movs	r3, #0
 8011b54:	2700      	movs	r7, #0
 8011b56:	4a58      	ldr	r2, [pc, #352]	; (8011cb8 <__aeabi_ddiv+0x27c>)
 8011b58:	2100      	movs	r1, #0
 8011b5a:	031b      	lsls	r3, r3, #12
 8011b5c:	0b1c      	lsrs	r4, r3, #12
 8011b5e:	0d0b      	lsrs	r3, r1, #20
 8011b60:	051b      	lsls	r3, r3, #20
 8011b62:	4323      	orrs	r3, r4
 8011b64:	0514      	lsls	r4, r2, #20
 8011b66:	4a5a      	ldr	r2, [pc, #360]	; (8011cd0 <__aeabi_ddiv+0x294>)
 8011b68:	0038      	movs	r0, r7
 8011b6a:	4013      	ands	r3, r2
 8011b6c:	431c      	orrs	r4, r3
 8011b6e:	4653      	mov	r3, sl
 8011b70:	0064      	lsls	r4, r4, #1
 8011b72:	07db      	lsls	r3, r3, #31
 8011b74:	0864      	lsrs	r4, r4, #1
 8011b76:	431c      	orrs	r4, r3
 8011b78:	0021      	movs	r1, r4
 8011b7a:	b005      	add	sp, #20
 8011b7c:	bc3c      	pop	{r2, r3, r4, r5}
 8011b7e:	4690      	mov	r8, r2
 8011b80:	4699      	mov	r9, r3
 8011b82:	46a2      	mov	sl, r4
 8011b84:	46ab      	mov	fp, r5
 8011b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b88:	2201      	movs	r2, #1
 8011b8a:	4252      	negs	r2, r2
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	1b1b      	subs	r3, r3, r4
 8011b90:	2b38      	cmp	r3, #56	; 0x38
 8011b92:	dc00      	bgt.n	8011b96 <__aeabi_ddiv+0x15a>
 8011b94:	e1ad      	b.n	8011ef2 <__aeabi_ddiv+0x4b6>
 8011b96:	2200      	movs	r2, #0
 8011b98:	2300      	movs	r3, #0
 8011b9a:	2700      	movs	r7, #0
 8011b9c:	e7dc      	b.n	8011b58 <__aeabi_ddiv+0x11c>
 8011b9e:	465b      	mov	r3, fp
 8011ba0:	4333      	orrs	r3, r6
 8011ba2:	4699      	mov	r9, r3
 8011ba4:	d05e      	beq.n	8011c64 <__aeabi_ddiv+0x228>
 8011ba6:	2e00      	cmp	r6, #0
 8011ba8:	d100      	bne.n	8011bac <__aeabi_ddiv+0x170>
 8011baa:	e18a      	b.n	8011ec2 <__aeabi_ddiv+0x486>
 8011bac:	0030      	movs	r0, r6
 8011bae:	f7fe ff61 	bl	8010a74 <__clzsi2>
 8011bb2:	0003      	movs	r3, r0
 8011bb4:	3b0b      	subs	r3, #11
 8011bb6:	2b1c      	cmp	r3, #28
 8011bb8:	dd00      	ble.n	8011bbc <__aeabi_ddiv+0x180>
 8011bba:	e17b      	b.n	8011eb4 <__aeabi_ddiv+0x478>
 8011bbc:	221d      	movs	r2, #29
 8011bbe:	1ad3      	subs	r3, r2, r3
 8011bc0:	465a      	mov	r2, fp
 8011bc2:	0001      	movs	r1, r0
 8011bc4:	40da      	lsrs	r2, r3
 8011bc6:	3908      	subs	r1, #8
 8011bc8:	408e      	lsls	r6, r1
 8011bca:	0013      	movs	r3, r2
 8011bcc:	465f      	mov	r7, fp
 8011bce:	4333      	orrs	r3, r6
 8011bd0:	4699      	mov	r9, r3
 8011bd2:	408f      	lsls	r7, r1
 8011bd4:	4b3f      	ldr	r3, [pc, #252]	; (8011cd4 <__aeabi_ddiv+0x298>)
 8011bd6:	2600      	movs	r6, #0
 8011bd8:	1a1b      	subs	r3, r3, r0
 8011bda:	9300      	str	r3, [sp, #0]
 8011bdc:	2300      	movs	r3, #0
 8011bde:	9302      	str	r3, [sp, #8]
 8011be0:	e752      	b.n	8011a88 <__aeabi_ddiv+0x4c>
 8011be2:	4641      	mov	r1, r8
 8011be4:	4653      	mov	r3, sl
 8011be6:	430b      	orrs	r3, r1
 8011be8:	493b      	ldr	r1, [pc, #236]	; (8011cd8 <__aeabi_ddiv+0x29c>)
 8011bea:	469b      	mov	fp, r3
 8011bec:	468c      	mov	ip, r1
 8011bee:	9b00      	ldr	r3, [sp, #0]
 8011bf0:	4463      	add	r3, ip
 8011bf2:	9300      	str	r3, [sp, #0]
 8011bf4:	465b      	mov	r3, fp
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d13b      	bne.n	8011c72 <__aeabi_ddiv+0x236>
 8011bfa:	2302      	movs	r3, #2
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	431e      	orrs	r6, r3
 8011c00:	2102      	movs	r1, #2
 8011c02:	e761      	b.n	8011ac8 <__aeabi_ddiv+0x8c>
 8011c04:	4643      	mov	r3, r8
 8011c06:	4313      	orrs	r3, r2
 8011c08:	469b      	mov	fp, r3
 8011c0a:	d037      	beq.n	8011c7c <__aeabi_ddiv+0x240>
 8011c0c:	4643      	mov	r3, r8
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d100      	bne.n	8011c14 <__aeabi_ddiv+0x1d8>
 8011c12:	e162      	b.n	8011eda <__aeabi_ddiv+0x49e>
 8011c14:	4640      	mov	r0, r8
 8011c16:	f7fe ff2d 	bl	8010a74 <__clzsi2>
 8011c1a:	0003      	movs	r3, r0
 8011c1c:	3b0b      	subs	r3, #11
 8011c1e:	2b1c      	cmp	r3, #28
 8011c20:	dd00      	ble.n	8011c24 <__aeabi_ddiv+0x1e8>
 8011c22:	e153      	b.n	8011ecc <__aeabi_ddiv+0x490>
 8011c24:	0002      	movs	r2, r0
 8011c26:	4641      	mov	r1, r8
 8011c28:	3a08      	subs	r2, #8
 8011c2a:	4091      	lsls	r1, r2
 8011c2c:	4688      	mov	r8, r1
 8011c2e:	211d      	movs	r1, #29
 8011c30:	1acb      	subs	r3, r1, r3
 8011c32:	4651      	mov	r1, sl
 8011c34:	40d9      	lsrs	r1, r3
 8011c36:	000b      	movs	r3, r1
 8011c38:	4641      	mov	r1, r8
 8011c3a:	430b      	orrs	r3, r1
 8011c3c:	469b      	mov	fp, r3
 8011c3e:	4653      	mov	r3, sl
 8011c40:	4093      	lsls	r3, r2
 8011c42:	001a      	movs	r2, r3
 8011c44:	9b00      	ldr	r3, [sp, #0]
 8011c46:	4925      	ldr	r1, [pc, #148]	; (8011cdc <__aeabi_ddiv+0x2a0>)
 8011c48:	469c      	mov	ip, r3
 8011c4a:	4460      	add	r0, ip
 8011c4c:	0003      	movs	r3, r0
 8011c4e:	468c      	mov	ip, r1
 8011c50:	4463      	add	r3, ip
 8011c52:	9300      	str	r3, [sp, #0]
 8011c54:	2100      	movs	r1, #0
 8011c56:	e737      	b.n	8011ac8 <__aeabi_ddiv+0x8c>
 8011c58:	2303      	movs	r3, #3
 8011c5a:	46b1      	mov	r9, r6
 8011c5c:	9000      	str	r0, [sp, #0]
 8011c5e:	260c      	movs	r6, #12
 8011c60:	9302      	str	r3, [sp, #8]
 8011c62:	e711      	b.n	8011a88 <__aeabi_ddiv+0x4c>
 8011c64:	2300      	movs	r3, #0
 8011c66:	9300      	str	r3, [sp, #0]
 8011c68:	3301      	adds	r3, #1
 8011c6a:	2604      	movs	r6, #4
 8011c6c:	2700      	movs	r7, #0
 8011c6e:	9302      	str	r3, [sp, #8]
 8011c70:	e70a      	b.n	8011a88 <__aeabi_ddiv+0x4c>
 8011c72:	2303      	movs	r3, #3
 8011c74:	46c3      	mov	fp, r8
 8011c76:	431e      	orrs	r6, r3
 8011c78:	2103      	movs	r1, #3
 8011c7a:	e725      	b.n	8011ac8 <__aeabi_ddiv+0x8c>
 8011c7c:	3301      	adds	r3, #1
 8011c7e:	431e      	orrs	r6, r3
 8011c80:	2200      	movs	r2, #0
 8011c82:	2101      	movs	r1, #1
 8011c84:	e720      	b.n	8011ac8 <__aeabi_ddiv+0x8c>
 8011c86:	2300      	movs	r3, #0
 8011c88:	469a      	mov	sl, r3
 8011c8a:	2380      	movs	r3, #128	; 0x80
 8011c8c:	2700      	movs	r7, #0
 8011c8e:	031b      	lsls	r3, r3, #12
 8011c90:	4a09      	ldr	r2, [pc, #36]	; (8011cb8 <__aeabi_ddiv+0x27c>)
 8011c92:	e761      	b.n	8011b58 <__aeabi_ddiv+0x11c>
 8011c94:	2380      	movs	r3, #128	; 0x80
 8011c96:	4649      	mov	r1, r9
 8011c98:	031b      	lsls	r3, r3, #12
 8011c9a:	4219      	tst	r1, r3
 8011c9c:	d100      	bne.n	8011ca0 <__aeabi_ddiv+0x264>
 8011c9e:	e0e2      	b.n	8011e66 <__aeabi_ddiv+0x42a>
 8011ca0:	4659      	mov	r1, fp
 8011ca2:	4219      	tst	r1, r3
 8011ca4:	d000      	beq.n	8011ca8 <__aeabi_ddiv+0x26c>
 8011ca6:	e0de      	b.n	8011e66 <__aeabi_ddiv+0x42a>
 8011ca8:	430b      	orrs	r3, r1
 8011caa:	031b      	lsls	r3, r3, #12
 8011cac:	0017      	movs	r7, r2
 8011cae:	0b1b      	lsrs	r3, r3, #12
 8011cb0:	46a2      	mov	sl, r4
 8011cb2:	4a01      	ldr	r2, [pc, #4]	; (8011cb8 <__aeabi_ddiv+0x27c>)
 8011cb4:	e750      	b.n	8011b58 <__aeabi_ddiv+0x11c>
 8011cb6:	46c0      	nop			; (mov r8, r8)
 8011cb8:	000007ff 	.word	0x000007ff
 8011cbc:	fffffc01 	.word	0xfffffc01
 8011cc0:	0801c1cc 	.word	0x0801c1cc
 8011cc4:	000003ff 	.word	0x000003ff
 8011cc8:	feffffff 	.word	0xfeffffff
 8011ccc:	000007fe 	.word	0x000007fe
 8011cd0:	800fffff 	.word	0x800fffff
 8011cd4:	fffffc0d 	.word	0xfffffc0d
 8011cd8:	fffff801 	.word	0xfffff801
 8011cdc:	000003f3 	.word	0x000003f3
 8011ce0:	45d9      	cmp	r9, fp
 8011ce2:	d900      	bls.n	8011ce6 <__aeabi_ddiv+0x2aa>
 8011ce4:	e0cb      	b.n	8011e7e <__aeabi_ddiv+0x442>
 8011ce6:	d100      	bne.n	8011cea <__aeabi_ddiv+0x2ae>
 8011ce8:	e0c6      	b.n	8011e78 <__aeabi_ddiv+0x43c>
 8011cea:	003c      	movs	r4, r7
 8011cec:	4648      	mov	r0, r9
 8011cee:	2700      	movs	r7, #0
 8011cf0:	9b00      	ldr	r3, [sp, #0]
 8011cf2:	3b01      	subs	r3, #1
 8011cf4:	9300      	str	r3, [sp, #0]
 8011cf6:	465b      	mov	r3, fp
 8011cf8:	0e16      	lsrs	r6, r2, #24
 8011cfa:	021b      	lsls	r3, r3, #8
 8011cfc:	431e      	orrs	r6, r3
 8011cfe:	0213      	lsls	r3, r2, #8
 8011d00:	4698      	mov	r8, r3
 8011d02:	0433      	lsls	r3, r6, #16
 8011d04:	0c1b      	lsrs	r3, r3, #16
 8011d06:	4699      	mov	r9, r3
 8011d08:	0c31      	lsrs	r1, r6, #16
 8011d0a:	9101      	str	r1, [sp, #4]
 8011d0c:	f7fe ff74 	bl	8010bf8 <__aeabi_uidivmod>
 8011d10:	464a      	mov	r2, r9
 8011d12:	4342      	muls	r2, r0
 8011d14:	040b      	lsls	r3, r1, #16
 8011d16:	0c21      	lsrs	r1, r4, #16
 8011d18:	0005      	movs	r5, r0
 8011d1a:	4319      	orrs	r1, r3
 8011d1c:	428a      	cmp	r2, r1
 8011d1e:	d907      	bls.n	8011d30 <__aeabi_ddiv+0x2f4>
 8011d20:	1989      	adds	r1, r1, r6
 8011d22:	3d01      	subs	r5, #1
 8011d24:	428e      	cmp	r6, r1
 8011d26:	d803      	bhi.n	8011d30 <__aeabi_ddiv+0x2f4>
 8011d28:	428a      	cmp	r2, r1
 8011d2a:	d901      	bls.n	8011d30 <__aeabi_ddiv+0x2f4>
 8011d2c:	1e85      	subs	r5, r0, #2
 8011d2e:	1989      	adds	r1, r1, r6
 8011d30:	1a88      	subs	r0, r1, r2
 8011d32:	9901      	ldr	r1, [sp, #4]
 8011d34:	f7fe ff60 	bl	8010bf8 <__aeabi_uidivmod>
 8011d38:	0409      	lsls	r1, r1, #16
 8011d3a:	468c      	mov	ip, r1
 8011d3c:	464a      	mov	r2, r9
 8011d3e:	0421      	lsls	r1, r4, #16
 8011d40:	4664      	mov	r4, ip
 8011d42:	4342      	muls	r2, r0
 8011d44:	0c09      	lsrs	r1, r1, #16
 8011d46:	0003      	movs	r3, r0
 8011d48:	4321      	orrs	r1, r4
 8011d4a:	428a      	cmp	r2, r1
 8011d4c:	d904      	bls.n	8011d58 <__aeabi_ddiv+0x31c>
 8011d4e:	1989      	adds	r1, r1, r6
 8011d50:	3b01      	subs	r3, #1
 8011d52:	428e      	cmp	r6, r1
 8011d54:	d800      	bhi.n	8011d58 <__aeabi_ddiv+0x31c>
 8011d56:	e0f1      	b.n	8011f3c <__aeabi_ddiv+0x500>
 8011d58:	042d      	lsls	r5, r5, #16
 8011d5a:	431d      	orrs	r5, r3
 8011d5c:	46ab      	mov	fp, r5
 8011d5e:	4643      	mov	r3, r8
 8011d60:	1a89      	subs	r1, r1, r2
 8011d62:	4642      	mov	r2, r8
 8011d64:	0c28      	lsrs	r0, r5, #16
 8011d66:	0412      	lsls	r2, r2, #16
 8011d68:	0c1d      	lsrs	r5, r3, #16
 8011d6a:	465b      	mov	r3, fp
 8011d6c:	0c14      	lsrs	r4, r2, #16
 8011d6e:	0022      	movs	r2, r4
 8011d70:	041b      	lsls	r3, r3, #16
 8011d72:	0c1b      	lsrs	r3, r3, #16
 8011d74:	435a      	muls	r2, r3
 8011d76:	9403      	str	r4, [sp, #12]
 8011d78:	436b      	muls	r3, r5
 8011d7a:	4344      	muls	r4, r0
 8011d7c:	9502      	str	r5, [sp, #8]
 8011d7e:	4368      	muls	r0, r5
 8011d80:	191b      	adds	r3, r3, r4
 8011d82:	0c15      	lsrs	r5, r2, #16
 8011d84:	18eb      	adds	r3, r5, r3
 8011d86:	429c      	cmp	r4, r3
 8011d88:	d903      	bls.n	8011d92 <__aeabi_ddiv+0x356>
 8011d8a:	2480      	movs	r4, #128	; 0x80
 8011d8c:	0264      	lsls	r4, r4, #9
 8011d8e:	46a4      	mov	ip, r4
 8011d90:	4460      	add	r0, ip
 8011d92:	0c1c      	lsrs	r4, r3, #16
 8011d94:	0415      	lsls	r5, r2, #16
 8011d96:	041b      	lsls	r3, r3, #16
 8011d98:	0c2d      	lsrs	r5, r5, #16
 8011d9a:	1820      	adds	r0, r4, r0
 8011d9c:	195d      	adds	r5, r3, r5
 8011d9e:	4281      	cmp	r1, r0
 8011da0:	d377      	bcc.n	8011e92 <__aeabi_ddiv+0x456>
 8011da2:	d073      	beq.n	8011e8c <__aeabi_ddiv+0x450>
 8011da4:	1a0c      	subs	r4, r1, r0
 8011da6:	4aa2      	ldr	r2, [pc, #648]	; (8012030 <__aeabi_ddiv+0x5f4>)
 8011da8:	1b7d      	subs	r5, r7, r5
 8011daa:	42af      	cmp	r7, r5
 8011dac:	41bf      	sbcs	r7, r7
 8011dae:	4694      	mov	ip, r2
 8011db0:	9b00      	ldr	r3, [sp, #0]
 8011db2:	427f      	negs	r7, r7
 8011db4:	4463      	add	r3, ip
 8011db6:	1be0      	subs	r0, r4, r7
 8011db8:	001c      	movs	r4, r3
 8011dba:	4286      	cmp	r6, r0
 8011dbc:	d100      	bne.n	8011dc0 <__aeabi_ddiv+0x384>
 8011dbe:	e0db      	b.n	8011f78 <__aeabi_ddiv+0x53c>
 8011dc0:	9901      	ldr	r1, [sp, #4]
 8011dc2:	f7fe ff19 	bl	8010bf8 <__aeabi_uidivmod>
 8011dc6:	464a      	mov	r2, r9
 8011dc8:	4342      	muls	r2, r0
 8011dca:	040b      	lsls	r3, r1, #16
 8011dcc:	0c29      	lsrs	r1, r5, #16
 8011dce:	0007      	movs	r7, r0
 8011dd0:	4319      	orrs	r1, r3
 8011dd2:	428a      	cmp	r2, r1
 8011dd4:	d907      	bls.n	8011de6 <__aeabi_ddiv+0x3aa>
 8011dd6:	1989      	adds	r1, r1, r6
 8011dd8:	3f01      	subs	r7, #1
 8011dda:	428e      	cmp	r6, r1
 8011ddc:	d803      	bhi.n	8011de6 <__aeabi_ddiv+0x3aa>
 8011dde:	428a      	cmp	r2, r1
 8011de0:	d901      	bls.n	8011de6 <__aeabi_ddiv+0x3aa>
 8011de2:	1e87      	subs	r7, r0, #2
 8011de4:	1989      	adds	r1, r1, r6
 8011de6:	1a88      	subs	r0, r1, r2
 8011de8:	9901      	ldr	r1, [sp, #4]
 8011dea:	f7fe ff05 	bl	8010bf8 <__aeabi_uidivmod>
 8011dee:	0409      	lsls	r1, r1, #16
 8011df0:	464a      	mov	r2, r9
 8011df2:	4689      	mov	r9, r1
 8011df4:	0429      	lsls	r1, r5, #16
 8011df6:	464d      	mov	r5, r9
 8011df8:	4342      	muls	r2, r0
 8011dfa:	0c09      	lsrs	r1, r1, #16
 8011dfc:	0003      	movs	r3, r0
 8011dfe:	4329      	orrs	r1, r5
 8011e00:	428a      	cmp	r2, r1
 8011e02:	d907      	bls.n	8011e14 <__aeabi_ddiv+0x3d8>
 8011e04:	1989      	adds	r1, r1, r6
 8011e06:	3b01      	subs	r3, #1
 8011e08:	428e      	cmp	r6, r1
 8011e0a:	d803      	bhi.n	8011e14 <__aeabi_ddiv+0x3d8>
 8011e0c:	428a      	cmp	r2, r1
 8011e0e:	d901      	bls.n	8011e14 <__aeabi_ddiv+0x3d8>
 8011e10:	1e83      	subs	r3, r0, #2
 8011e12:	1989      	adds	r1, r1, r6
 8011e14:	043f      	lsls	r7, r7, #16
 8011e16:	1a89      	subs	r1, r1, r2
 8011e18:	003a      	movs	r2, r7
 8011e1a:	9f03      	ldr	r7, [sp, #12]
 8011e1c:	431a      	orrs	r2, r3
 8011e1e:	0038      	movs	r0, r7
 8011e20:	0413      	lsls	r3, r2, #16
 8011e22:	0c1b      	lsrs	r3, r3, #16
 8011e24:	4358      	muls	r0, r3
 8011e26:	4681      	mov	r9, r0
 8011e28:	9802      	ldr	r0, [sp, #8]
 8011e2a:	0c15      	lsrs	r5, r2, #16
 8011e2c:	436f      	muls	r7, r5
 8011e2e:	4343      	muls	r3, r0
 8011e30:	4345      	muls	r5, r0
 8011e32:	4648      	mov	r0, r9
 8011e34:	0c00      	lsrs	r0, r0, #16
 8011e36:	4684      	mov	ip, r0
 8011e38:	19db      	adds	r3, r3, r7
 8011e3a:	4463      	add	r3, ip
 8011e3c:	429f      	cmp	r7, r3
 8011e3e:	d903      	bls.n	8011e48 <__aeabi_ddiv+0x40c>
 8011e40:	2080      	movs	r0, #128	; 0x80
 8011e42:	0240      	lsls	r0, r0, #9
 8011e44:	4684      	mov	ip, r0
 8011e46:	4465      	add	r5, ip
 8011e48:	4648      	mov	r0, r9
 8011e4a:	0c1f      	lsrs	r7, r3, #16
 8011e4c:	0400      	lsls	r0, r0, #16
 8011e4e:	041b      	lsls	r3, r3, #16
 8011e50:	0c00      	lsrs	r0, r0, #16
 8011e52:	197d      	adds	r5, r7, r5
 8011e54:	1818      	adds	r0, r3, r0
 8011e56:	42a9      	cmp	r1, r5
 8011e58:	d200      	bcs.n	8011e5c <__aeabi_ddiv+0x420>
 8011e5a:	e084      	b.n	8011f66 <__aeabi_ddiv+0x52a>
 8011e5c:	d100      	bne.n	8011e60 <__aeabi_ddiv+0x424>
 8011e5e:	e07f      	b.n	8011f60 <__aeabi_ddiv+0x524>
 8011e60:	2301      	movs	r3, #1
 8011e62:	431a      	orrs	r2, r3
 8011e64:	e657      	b.n	8011b16 <__aeabi_ddiv+0xda>
 8011e66:	2380      	movs	r3, #128	; 0x80
 8011e68:	464a      	mov	r2, r9
 8011e6a:	031b      	lsls	r3, r3, #12
 8011e6c:	4313      	orrs	r3, r2
 8011e6e:	031b      	lsls	r3, r3, #12
 8011e70:	0b1b      	lsrs	r3, r3, #12
 8011e72:	46aa      	mov	sl, r5
 8011e74:	4a6f      	ldr	r2, [pc, #444]	; (8012034 <__aeabi_ddiv+0x5f8>)
 8011e76:	e66f      	b.n	8011b58 <__aeabi_ddiv+0x11c>
 8011e78:	42ba      	cmp	r2, r7
 8011e7a:	d900      	bls.n	8011e7e <__aeabi_ddiv+0x442>
 8011e7c:	e735      	b.n	8011cea <__aeabi_ddiv+0x2ae>
 8011e7e:	464b      	mov	r3, r9
 8011e80:	07dc      	lsls	r4, r3, #31
 8011e82:	0858      	lsrs	r0, r3, #1
 8011e84:	087b      	lsrs	r3, r7, #1
 8011e86:	431c      	orrs	r4, r3
 8011e88:	07ff      	lsls	r7, r7, #31
 8011e8a:	e734      	b.n	8011cf6 <__aeabi_ddiv+0x2ba>
 8011e8c:	2400      	movs	r4, #0
 8011e8e:	42af      	cmp	r7, r5
 8011e90:	d289      	bcs.n	8011da6 <__aeabi_ddiv+0x36a>
 8011e92:	4447      	add	r7, r8
 8011e94:	4547      	cmp	r7, r8
 8011e96:	41a4      	sbcs	r4, r4
 8011e98:	465b      	mov	r3, fp
 8011e9a:	4264      	negs	r4, r4
 8011e9c:	19a4      	adds	r4, r4, r6
 8011e9e:	1864      	adds	r4, r4, r1
 8011ea0:	3b01      	subs	r3, #1
 8011ea2:	42a6      	cmp	r6, r4
 8011ea4:	d21e      	bcs.n	8011ee4 <__aeabi_ddiv+0x4a8>
 8011ea6:	42a0      	cmp	r0, r4
 8011ea8:	d86d      	bhi.n	8011f86 <__aeabi_ddiv+0x54a>
 8011eaa:	d100      	bne.n	8011eae <__aeabi_ddiv+0x472>
 8011eac:	e0b6      	b.n	801201c <__aeabi_ddiv+0x5e0>
 8011eae:	1a24      	subs	r4, r4, r0
 8011eb0:	469b      	mov	fp, r3
 8011eb2:	e778      	b.n	8011da6 <__aeabi_ddiv+0x36a>
 8011eb4:	0003      	movs	r3, r0
 8011eb6:	465a      	mov	r2, fp
 8011eb8:	3b28      	subs	r3, #40	; 0x28
 8011eba:	409a      	lsls	r2, r3
 8011ebc:	2700      	movs	r7, #0
 8011ebe:	4691      	mov	r9, r2
 8011ec0:	e688      	b.n	8011bd4 <__aeabi_ddiv+0x198>
 8011ec2:	4658      	mov	r0, fp
 8011ec4:	f7fe fdd6 	bl	8010a74 <__clzsi2>
 8011ec8:	3020      	adds	r0, #32
 8011eca:	e672      	b.n	8011bb2 <__aeabi_ddiv+0x176>
 8011ecc:	0003      	movs	r3, r0
 8011ece:	4652      	mov	r2, sl
 8011ed0:	3b28      	subs	r3, #40	; 0x28
 8011ed2:	409a      	lsls	r2, r3
 8011ed4:	4693      	mov	fp, r2
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	e6b4      	b.n	8011c44 <__aeabi_ddiv+0x208>
 8011eda:	4650      	mov	r0, sl
 8011edc:	f7fe fdca 	bl	8010a74 <__clzsi2>
 8011ee0:	3020      	adds	r0, #32
 8011ee2:	e69a      	b.n	8011c1a <__aeabi_ddiv+0x1de>
 8011ee4:	42a6      	cmp	r6, r4
 8011ee6:	d1e2      	bne.n	8011eae <__aeabi_ddiv+0x472>
 8011ee8:	45b8      	cmp	r8, r7
 8011eea:	d9dc      	bls.n	8011ea6 <__aeabi_ddiv+0x46a>
 8011eec:	1a34      	subs	r4, r6, r0
 8011eee:	469b      	mov	fp, r3
 8011ef0:	e759      	b.n	8011da6 <__aeabi_ddiv+0x36a>
 8011ef2:	2b1f      	cmp	r3, #31
 8011ef4:	dc65      	bgt.n	8011fc2 <__aeabi_ddiv+0x586>
 8011ef6:	4c50      	ldr	r4, [pc, #320]	; (8012038 <__aeabi_ddiv+0x5fc>)
 8011ef8:	9900      	ldr	r1, [sp, #0]
 8011efa:	46a4      	mov	ip, r4
 8011efc:	465c      	mov	r4, fp
 8011efe:	4461      	add	r1, ip
 8011f00:	0008      	movs	r0, r1
 8011f02:	408c      	lsls	r4, r1
 8011f04:	0011      	movs	r1, r2
 8011f06:	4082      	lsls	r2, r0
 8011f08:	40d9      	lsrs	r1, r3
 8011f0a:	1e50      	subs	r0, r2, #1
 8011f0c:	4182      	sbcs	r2, r0
 8011f0e:	430c      	orrs	r4, r1
 8011f10:	4314      	orrs	r4, r2
 8011f12:	465a      	mov	r2, fp
 8011f14:	40da      	lsrs	r2, r3
 8011f16:	0013      	movs	r3, r2
 8011f18:	0762      	lsls	r2, r4, #29
 8011f1a:	d009      	beq.n	8011f30 <__aeabi_ddiv+0x4f4>
 8011f1c:	220f      	movs	r2, #15
 8011f1e:	4022      	ands	r2, r4
 8011f20:	2a04      	cmp	r2, #4
 8011f22:	d005      	beq.n	8011f30 <__aeabi_ddiv+0x4f4>
 8011f24:	0022      	movs	r2, r4
 8011f26:	1d14      	adds	r4, r2, #4
 8011f28:	4294      	cmp	r4, r2
 8011f2a:	4189      	sbcs	r1, r1
 8011f2c:	4249      	negs	r1, r1
 8011f2e:	185b      	adds	r3, r3, r1
 8011f30:	021a      	lsls	r2, r3, #8
 8011f32:	d562      	bpl.n	8011ffa <__aeabi_ddiv+0x5be>
 8011f34:	2201      	movs	r2, #1
 8011f36:	2300      	movs	r3, #0
 8011f38:	2700      	movs	r7, #0
 8011f3a:	e60d      	b.n	8011b58 <__aeabi_ddiv+0x11c>
 8011f3c:	428a      	cmp	r2, r1
 8011f3e:	d800      	bhi.n	8011f42 <__aeabi_ddiv+0x506>
 8011f40:	e70a      	b.n	8011d58 <__aeabi_ddiv+0x31c>
 8011f42:	1e83      	subs	r3, r0, #2
 8011f44:	1989      	adds	r1, r1, r6
 8011f46:	e707      	b.n	8011d58 <__aeabi_ddiv+0x31c>
 8011f48:	230f      	movs	r3, #15
 8011f4a:	4013      	ands	r3, r2
 8011f4c:	2b04      	cmp	r3, #4
 8011f4e:	d100      	bne.n	8011f52 <__aeabi_ddiv+0x516>
 8011f50:	e5e6      	b.n	8011b20 <__aeabi_ddiv+0xe4>
 8011f52:	1d17      	adds	r7, r2, #4
 8011f54:	4297      	cmp	r7, r2
 8011f56:	4192      	sbcs	r2, r2
 8011f58:	4253      	negs	r3, r2
 8011f5a:	449b      	add	fp, r3
 8011f5c:	08fa      	lsrs	r2, r7, #3
 8011f5e:	e5e0      	b.n	8011b22 <__aeabi_ddiv+0xe6>
 8011f60:	2800      	cmp	r0, #0
 8011f62:	d100      	bne.n	8011f66 <__aeabi_ddiv+0x52a>
 8011f64:	e5d7      	b.n	8011b16 <__aeabi_ddiv+0xda>
 8011f66:	1871      	adds	r1, r6, r1
 8011f68:	1e53      	subs	r3, r2, #1
 8011f6a:	42b1      	cmp	r1, r6
 8011f6c:	d327      	bcc.n	8011fbe <__aeabi_ddiv+0x582>
 8011f6e:	42a9      	cmp	r1, r5
 8011f70:	d315      	bcc.n	8011f9e <__aeabi_ddiv+0x562>
 8011f72:	d058      	beq.n	8012026 <__aeabi_ddiv+0x5ea>
 8011f74:	001a      	movs	r2, r3
 8011f76:	e773      	b.n	8011e60 <__aeabi_ddiv+0x424>
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	dc00      	bgt.n	8011f7e <__aeabi_ddiv+0x542>
 8011f7c:	e604      	b.n	8011b88 <__aeabi_ddiv+0x14c>
 8011f7e:	2301      	movs	r3, #1
 8011f80:	2200      	movs	r2, #0
 8011f82:	449b      	add	fp, r3
 8011f84:	e5cd      	b.n	8011b22 <__aeabi_ddiv+0xe6>
 8011f86:	2302      	movs	r3, #2
 8011f88:	4447      	add	r7, r8
 8011f8a:	4547      	cmp	r7, r8
 8011f8c:	4189      	sbcs	r1, r1
 8011f8e:	425b      	negs	r3, r3
 8011f90:	469c      	mov	ip, r3
 8011f92:	4249      	negs	r1, r1
 8011f94:	1989      	adds	r1, r1, r6
 8011f96:	190c      	adds	r4, r1, r4
 8011f98:	44e3      	add	fp, ip
 8011f9a:	1a24      	subs	r4, r4, r0
 8011f9c:	e703      	b.n	8011da6 <__aeabi_ddiv+0x36a>
 8011f9e:	4643      	mov	r3, r8
 8011fa0:	005f      	lsls	r7, r3, #1
 8011fa2:	4547      	cmp	r7, r8
 8011fa4:	419b      	sbcs	r3, r3
 8011fa6:	46b8      	mov	r8, r7
 8011fa8:	425b      	negs	r3, r3
 8011faa:	199e      	adds	r6, r3, r6
 8011fac:	3a02      	subs	r2, #2
 8011fae:	1989      	adds	r1, r1, r6
 8011fb0:	42a9      	cmp	r1, r5
 8011fb2:	d000      	beq.n	8011fb6 <__aeabi_ddiv+0x57a>
 8011fb4:	e754      	b.n	8011e60 <__aeabi_ddiv+0x424>
 8011fb6:	4540      	cmp	r0, r8
 8011fb8:	d000      	beq.n	8011fbc <__aeabi_ddiv+0x580>
 8011fba:	e751      	b.n	8011e60 <__aeabi_ddiv+0x424>
 8011fbc:	e5ab      	b.n	8011b16 <__aeabi_ddiv+0xda>
 8011fbe:	001a      	movs	r2, r3
 8011fc0:	e7f6      	b.n	8011fb0 <__aeabi_ddiv+0x574>
 8011fc2:	211f      	movs	r1, #31
 8011fc4:	465f      	mov	r7, fp
 8011fc6:	4249      	negs	r1, r1
 8011fc8:	1b0c      	subs	r4, r1, r4
 8011fca:	40e7      	lsrs	r7, r4
 8011fcc:	2b20      	cmp	r3, #32
 8011fce:	d007      	beq.n	8011fe0 <__aeabi_ddiv+0x5a4>
 8011fd0:	491a      	ldr	r1, [pc, #104]	; (801203c <__aeabi_ddiv+0x600>)
 8011fd2:	9b00      	ldr	r3, [sp, #0]
 8011fd4:	468c      	mov	ip, r1
 8011fd6:	4463      	add	r3, ip
 8011fd8:	0018      	movs	r0, r3
 8011fda:	465b      	mov	r3, fp
 8011fdc:	4083      	lsls	r3, r0
 8011fde:	431a      	orrs	r2, r3
 8011fe0:	1e50      	subs	r0, r2, #1
 8011fe2:	4182      	sbcs	r2, r0
 8011fe4:	433a      	orrs	r2, r7
 8011fe6:	2707      	movs	r7, #7
 8011fe8:	2300      	movs	r3, #0
 8011fea:	4017      	ands	r7, r2
 8011fec:	d009      	beq.n	8012002 <__aeabi_ddiv+0x5c6>
 8011fee:	210f      	movs	r1, #15
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	4011      	ands	r1, r2
 8011ff4:	0014      	movs	r4, r2
 8011ff6:	2904      	cmp	r1, #4
 8011ff8:	d195      	bne.n	8011f26 <__aeabi_ddiv+0x4ea>
 8011ffa:	0022      	movs	r2, r4
 8011ffc:	075f      	lsls	r7, r3, #29
 8011ffe:	025b      	lsls	r3, r3, #9
 8012000:	0b1b      	lsrs	r3, r3, #12
 8012002:	08d2      	lsrs	r2, r2, #3
 8012004:	4317      	orrs	r7, r2
 8012006:	2200      	movs	r2, #0
 8012008:	e5a6      	b.n	8011b58 <__aeabi_ddiv+0x11c>
 801200a:	2380      	movs	r3, #128	; 0x80
 801200c:	4659      	mov	r1, fp
 801200e:	031b      	lsls	r3, r3, #12
 8012010:	430b      	orrs	r3, r1
 8012012:	031b      	lsls	r3, r3, #12
 8012014:	0017      	movs	r7, r2
 8012016:	0b1b      	lsrs	r3, r3, #12
 8012018:	4a06      	ldr	r2, [pc, #24]	; (8012034 <__aeabi_ddiv+0x5f8>)
 801201a:	e59d      	b.n	8011b58 <__aeabi_ddiv+0x11c>
 801201c:	42bd      	cmp	r5, r7
 801201e:	d8b2      	bhi.n	8011f86 <__aeabi_ddiv+0x54a>
 8012020:	469b      	mov	fp, r3
 8012022:	2400      	movs	r4, #0
 8012024:	e6bf      	b.n	8011da6 <__aeabi_ddiv+0x36a>
 8012026:	4580      	cmp	r8, r0
 8012028:	d3b9      	bcc.n	8011f9e <__aeabi_ddiv+0x562>
 801202a:	001a      	movs	r2, r3
 801202c:	e7c3      	b.n	8011fb6 <__aeabi_ddiv+0x57a>
 801202e:	46c0      	nop			; (mov r8, r8)
 8012030:	000003ff 	.word	0x000003ff
 8012034:	000007ff 	.word	0x000007ff
 8012038:	0000041e 	.word	0x0000041e
 801203c:	0000043e 	.word	0x0000043e

08012040 <__eqdf2>:
 8012040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012042:	464f      	mov	r7, r9
 8012044:	4646      	mov	r6, r8
 8012046:	46d6      	mov	lr, sl
 8012048:	4684      	mov	ip, r0
 801204a:	b5c0      	push	{r6, r7, lr}
 801204c:	4680      	mov	r8, r0
 801204e:	4e19      	ldr	r6, [pc, #100]	; (80120b4 <__eqdf2+0x74>)
 8012050:	0318      	lsls	r0, r3, #12
 8012052:	030f      	lsls	r7, r1, #12
 8012054:	004d      	lsls	r5, r1, #1
 8012056:	0b00      	lsrs	r0, r0, #12
 8012058:	005c      	lsls	r4, r3, #1
 801205a:	4682      	mov	sl, r0
 801205c:	0b3f      	lsrs	r7, r7, #12
 801205e:	0d6d      	lsrs	r5, r5, #21
 8012060:	0fc9      	lsrs	r1, r1, #31
 8012062:	4691      	mov	r9, r2
 8012064:	0d64      	lsrs	r4, r4, #21
 8012066:	0fdb      	lsrs	r3, r3, #31
 8012068:	2001      	movs	r0, #1
 801206a:	42b5      	cmp	r5, r6
 801206c:	d00a      	beq.n	8012084 <__eqdf2+0x44>
 801206e:	42b4      	cmp	r4, r6
 8012070:	d003      	beq.n	801207a <__eqdf2+0x3a>
 8012072:	42a5      	cmp	r5, r4
 8012074:	d101      	bne.n	801207a <__eqdf2+0x3a>
 8012076:	4557      	cmp	r7, sl
 8012078:	d00c      	beq.n	8012094 <__eqdf2+0x54>
 801207a:	bc1c      	pop	{r2, r3, r4}
 801207c:	4690      	mov	r8, r2
 801207e:	4699      	mov	r9, r3
 8012080:	46a2      	mov	sl, r4
 8012082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012084:	4666      	mov	r6, ip
 8012086:	433e      	orrs	r6, r7
 8012088:	d1f7      	bne.n	801207a <__eqdf2+0x3a>
 801208a:	42ac      	cmp	r4, r5
 801208c:	d1f5      	bne.n	801207a <__eqdf2+0x3a>
 801208e:	4654      	mov	r4, sl
 8012090:	4314      	orrs	r4, r2
 8012092:	d1f2      	bne.n	801207a <__eqdf2+0x3a>
 8012094:	2001      	movs	r0, #1
 8012096:	45c8      	cmp	r8, r9
 8012098:	d1ef      	bne.n	801207a <__eqdf2+0x3a>
 801209a:	4299      	cmp	r1, r3
 801209c:	d007      	beq.n	80120ae <__eqdf2+0x6e>
 801209e:	2d00      	cmp	r5, #0
 80120a0:	d1eb      	bne.n	801207a <__eqdf2+0x3a>
 80120a2:	4663      	mov	r3, ip
 80120a4:	431f      	orrs	r7, r3
 80120a6:	0038      	movs	r0, r7
 80120a8:	1e47      	subs	r7, r0, #1
 80120aa:	41b8      	sbcs	r0, r7
 80120ac:	e7e5      	b.n	801207a <__eqdf2+0x3a>
 80120ae:	2000      	movs	r0, #0
 80120b0:	e7e3      	b.n	801207a <__eqdf2+0x3a>
 80120b2:	46c0      	nop			; (mov r8, r8)
 80120b4:	000007ff 	.word	0x000007ff

080120b8 <__gedf2>:
 80120b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120ba:	464f      	mov	r7, r9
 80120bc:	4646      	mov	r6, r8
 80120be:	46d6      	mov	lr, sl
 80120c0:	004d      	lsls	r5, r1, #1
 80120c2:	b5c0      	push	{r6, r7, lr}
 80120c4:	030e      	lsls	r6, r1, #12
 80120c6:	0fc9      	lsrs	r1, r1, #31
 80120c8:	468a      	mov	sl, r1
 80120ca:	492c      	ldr	r1, [pc, #176]	; (801217c <__gedf2+0xc4>)
 80120cc:	031f      	lsls	r7, r3, #12
 80120ce:	005c      	lsls	r4, r3, #1
 80120d0:	4680      	mov	r8, r0
 80120d2:	0b36      	lsrs	r6, r6, #12
 80120d4:	0d6d      	lsrs	r5, r5, #21
 80120d6:	4691      	mov	r9, r2
 80120d8:	0b3f      	lsrs	r7, r7, #12
 80120da:	0d64      	lsrs	r4, r4, #21
 80120dc:	0fdb      	lsrs	r3, r3, #31
 80120de:	428d      	cmp	r5, r1
 80120e0:	d01e      	beq.n	8012120 <__gedf2+0x68>
 80120e2:	428c      	cmp	r4, r1
 80120e4:	d016      	beq.n	8012114 <__gedf2+0x5c>
 80120e6:	2d00      	cmp	r5, #0
 80120e8:	d11e      	bne.n	8012128 <__gedf2+0x70>
 80120ea:	4330      	orrs	r0, r6
 80120ec:	4684      	mov	ip, r0
 80120ee:	2c00      	cmp	r4, #0
 80120f0:	d101      	bne.n	80120f6 <__gedf2+0x3e>
 80120f2:	433a      	orrs	r2, r7
 80120f4:	d023      	beq.n	801213e <__gedf2+0x86>
 80120f6:	4662      	mov	r2, ip
 80120f8:	2a00      	cmp	r2, #0
 80120fa:	d01a      	beq.n	8012132 <__gedf2+0x7a>
 80120fc:	459a      	cmp	sl, r3
 80120fe:	d029      	beq.n	8012154 <__gedf2+0x9c>
 8012100:	4651      	mov	r1, sl
 8012102:	2002      	movs	r0, #2
 8012104:	3901      	subs	r1, #1
 8012106:	4008      	ands	r0, r1
 8012108:	3801      	subs	r0, #1
 801210a:	bc1c      	pop	{r2, r3, r4}
 801210c:	4690      	mov	r8, r2
 801210e:	4699      	mov	r9, r3
 8012110:	46a2      	mov	sl, r4
 8012112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012114:	0039      	movs	r1, r7
 8012116:	4311      	orrs	r1, r2
 8012118:	d0e5      	beq.n	80120e6 <__gedf2+0x2e>
 801211a:	2002      	movs	r0, #2
 801211c:	4240      	negs	r0, r0
 801211e:	e7f4      	b.n	801210a <__gedf2+0x52>
 8012120:	4330      	orrs	r0, r6
 8012122:	d1fa      	bne.n	801211a <__gedf2+0x62>
 8012124:	42ac      	cmp	r4, r5
 8012126:	d00f      	beq.n	8012148 <__gedf2+0x90>
 8012128:	2c00      	cmp	r4, #0
 801212a:	d10f      	bne.n	801214c <__gedf2+0x94>
 801212c:	433a      	orrs	r2, r7
 801212e:	d0e7      	beq.n	8012100 <__gedf2+0x48>
 8012130:	e00c      	b.n	801214c <__gedf2+0x94>
 8012132:	2201      	movs	r2, #1
 8012134:	3b01      	subs	r3, #1
 8012136:	4393      	bics	r3, r2
 8012138:	0018      	movs	r0, r3
 801213a:	3001      	adds	r0, #1
 801213c:	e7e5      	b.n	801210a <__gedf2+0x52>
 801213e:	4663      	mov	r3, ip
 8012140:	2000      	movs	r0, #0
 8012142:	2b00      	cmp	r3, #0
 8012144:	d0e1      	beq.n	801210a <__gedf2+0x52>
 8012146:	e7db      	b.n	8012100 <__gedf2+0x48>
 8012148:	433a      	orrs	r2, r7
 801214a:	d1e6      	bne.n	801211a <__gedf2+0x62>
 801214c:	459a      	cmp	sl, r3
 801214e:	d1d7      	bne.n	8012100 <__gedf2+0x48>
 8012150:	42a5      	cmp	r5, r4
 8012152:	dcd5      	bgt.n	8012100 <__gedf2+0x48>
 8012154:	42a5      	cmp	r5, r4
 8012156:	db05      	blt.n	8012164 <__gedf2+0xac>
 8012158:	42be      	cmp	r6, r7
 801215a:	d8d1      	bhi.n	8012100 <__gedf2+0x48>
 801215c:	d008      	beq.n	8012170 <__gedf2+0xb8>
 801215e:	2000      	movs	r0, #0
 8012160:	42be      	cmp	r6, r7
 8012162:	d2d2      	bcs.n	801210a <__gedf2+0x52>
 8012164:	4650      	mov	r0, sl
 8012166:	2301      	movs	r3, #1
 8012168:	3801      	subs	r0, #1
 801216a:	4398      	bics	r0, r3
 801216c:	3001      	adds	r0, #1
 801216e:	e7cc      	b.n	801210a <__gedf2+0x52>
 8012170:	45c8      	cmp	r8, r9
 8012172:	d8c5      	bhi.n	8012100 <__gedf2+0x48>
 8012174:	2000      	movs	r0, #0
 8012176:	45c8      	cmp	r8, r9
 8012178:	d3f4      	bcc.n	8012164 <__gedf2+0xac>
 801217a:	e7c6      	b.n	801210a <__gedf2+0x52>
 801217c:	000007ff 	.word	0x000007ff

08012180 <__ledf2>:
 8012180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012182:	464f      	mov	r7, r9
 8012184:	4646      	mov	r6, r8
 8012186:	46d6      	mov	lr, sl
 8012188:	004d      	lsls	r5, r1, #1
 801218a:	b5c0      	push	{r6, r7, lr}
 801218c:	030e      	lsls	r6, r1, #12
 801218e:	0fc9      	lsrs	r1, r1, #31
 8012190:	468a      	mov	sl, r1
 8012192:	492e      	ldr	r1, [pc, #184]	; (801224c <__ledf2+0xcc>)
 8012194:	031f      	lsls	r7, r3, #12
 8012196:	005c      	lsls	r4, r3, #1
 8012198:	4680      	mov	r8, r0
 801219a:	0b36      	lsrs	r6, r6, #12
 801219c:	0d6d      	lsrs	r5, r5, #21
 801219e:	4691      	mov	r9, r2
 80121a0:	0b3f      	lsrs	r7, r7, #12
 80121a2:	0d64      	lsrs	r4, r4, #21
 80121a4:	0fdb      	lsrs	r3, r3, #31
 80121a6:	428d      	cmp	r5, r1
 80121a8:	d018      	beq.n	80121dc <__ledf2+0x5c>
 80121aa:	428c      	cmp	r4, r1
 80121ac:	d011      	beq.n	80121d2 <__ledf2+0x52>
 80121ae:	2d00      	cmp	r5, #0
 80121b0:	d118      	bne.n	80121e4 <__ledf2+0x64>
 80121b2:	4330      	orrs	r0, r6
 80121b4:	4684      	mov	ip, r0
 80121b6:	2c00      	cmp	r4, #0
 80121b8:	d11e      	bne.n	80121f8 <__ledf2+0x78>
 80121ba:	433a      	orrs	r2, r7
 80121bc:	d11c      	bne.n	80121f8 <__ledf2+0x78>
 80121be:	4663      	mov	r3, ip
 80121c0:	2000      	movs	r0, #0
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d030      	beq.n	8012228 <__ledf2+0xa8>
 80121c6:	4651      	mov	r1, sl
 80121c8:	2002      	movs	r0, #2
 80121ca:	3901      	subs	r1, #1
 80121cc:	4008      	ands	r0, r1
 80121ce:	3801      	subs	r0, #1
 80121d0:	e02a      	b.n	8012228 <__ledf2+0xa8>
 80121d2:	0039      	movs	r1, r7
 80121d4:	4311      	orrs	r1, r2
 80121d6:	d0ea      	beq.n	80121ae <__ledf2+0x2e>
 80121d8:	2002      	movs	r0, #2
 80121da:	e025      	b.n	8012228 <__ledf2+0xa8>
 80121dc:	4330      	orrs	r0, r6
 80121de:	d1fb      	bne.n	80121d8 <__ledf2+0x58>
 80121e0:	42ac      	cmp	r4, r5
 80121e2:	d026      	beq.n	8012232 <__ledf2+0xb2>
 80121e4:	2c00      	cmp	r4, #0
 80121e6:	d126      	bne.n	8012236 <__ledf2+0xb6>
 80121e8:	433a      	orrs	r2, r7
 80121ea:	d124      	bne.n	8012236 <__ledf2+0xb6>
 80121ec:	4651      	mov	r1, sl
 80121ee:	2002      	movs	r0, #2
 80121f0:	3901      	subs	r1, #1
 80121f2:	4008      	ands	r0, r1
 80121f4:	3801      	subs	r0, #1
 80121f6:	e017      	b.n	8012228 <__ledf2+0xa8>
 80121f8:	4662      	mov	r2, ip
 80121fa:	2a00      	cmp	r2, #0
 80121fc:	d00f      	beq.n	801221e <__ledf2+0x9e>
 80121fe:	459a      	cmp	sl, r3
 8012200:	d1e1      	bne.n	80121c6 <__ledf2+0x46>
 8012202:	42a5      	cmp	r5, r4
 8012204:	db05      	blt.n	8012212 <__ledf2+0x92>
 8012206:	42be      	cmp	r6, r7
 8012208:	d8dd      	bhi.n	80121c6 <__ledf2+0x46>
 801220a:	d019      	beq.n	8012240 <__ledf2+0xc0>
 801220c:	2000      	movs	r0, #0
 801220e:	42be      	cmp	r6, r7
 8012210:	d20a      	bcs.n	8012228 <__ledf2+0xa8>
 8012212:	4650      	mov	r0, sl
 8012214:	2301      	movs	r3, #1
 8012216:	3801      	subs	r0, #1
 8012218:	4398      	bics	r0, r3
 801221a:	3001      	adds	r0, #1
 801221c:	e004      	b.n	8012228 <__ledf2+0xa8>
 801221e:	2201      	movs	r2, #1
 8012220:	3b01      	subs	r3, #1
 8012222:	4393      	bics	r3, r2
 8012224:	0018      	movs	r0, r3
 8012226:	3001      	adds	r0, #1
 8012228:	bc1c      	pop	{r2, r3, r4}
 801222a:	4690      	mov	r8, r2
 801222c:	4699      	mov	r9, r3
 801222e:	46a2      	mov	sl, r4
 8012230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012232:	433a      	orrs	r2, r7
 8012234:	d1d0      	bne.n	80121d8 <__ledf2+0x58>
 8012236:	459a      	cmp	sl, r3
 8012238:	d1c5      	bne.n	80121c6 <__ledf2+0x46>
 801223a:	42a5      	cmp	r5, r4
 801223c:	dcc3      	bgt.n	80121c6 <__ledf2+0x46>
 801223e:	e7e0      	b.n	8012202 <__ledf2+0x82>
 8012240:	45c8      	cmp	r8, r9
 8012242:	d8c0      	bhi.n	80121c6 <__ledf2+0x46>
 8012244:	2000      	movs	r0, #0
 8012246:	45c8      	cmp	r8, r9
 8012248:	d3e3      	bcc.n	8012212 <__ledf2+0x92>
 801224a:	e7ed      	b.n	8012228 <__ledf2+0xa8>
 801224c:	000007ff 	.word	0x000007ff

08012250 <__aeabi_dmul>:
 8012250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012252:	4657      	mov	r7, sl
 8012254:	46de      	mov	lr, fp
 8012256:	464e      	mov	r6, r9
 8012258:	4645      	mov	r5, r8
 801225a:	b5e0      	push	{r5, r6, r7, lr}
 801225c:	4683      	mov	fp, r0
 801225e:	0006      	movs	r6, r0
 8012260:	030f      	lsls	r7, r1, #12
 8012262:	0048      	lsls	r0, r1, #1
 8012264:	b087      	sub	sp, #28
 8012266:	4692      	mov	sl, r2
 8012268:	001d      	movs	r5, r3
 801226a:	0b3f      	lsrs	r7, r7, #12
 801226c:	0d40      	lsrs	r0, r0, #21
 801226e:	0fcc      	lsrs	r4, r1, #31
 8012270:	2800      	cmp	r0, #0
 8012272:	d100      	bne.n	8012276 <__aeabi_dmul+0x26>
 8012274:	e06f      	b.n	8012356 <__aeabi_dmul+0x106>
 8012276:	4bde      	ldr	r3, [pc, #888]	; (80125f0 <__aeabi_dmul+0x3a0>)
 8012278:	4298      	cmp	r0, r3
 801227a:	d038      	beq.n	80122ee <__aeabi_dmul+0x9e>
 801227c:	2380      	movs	r3, #128	; 0x80
 801227e:	00ff      	lsls	r7, r7, #3
 8012280:	041b      	lsls	r3, r3, #16
 8012282:	431f      	orrs	r7, r3
 8012284:	0f73      	lsrs	r3, r6, #29
 8012286:	433b      	orrs	r3, r7
 8012288:	9301      	str	r3, [sp, #4]
 801228a:	4bda      	ldr	r3, [pc, #872]	; (80125f4 <__aeabi_dmul+0x3a4>)
 801228c:	2700      	movs	r7, #0
 801228e:	4699      	mov	r9, r3
 8012290:	2300      	movs	r3, #0
 8012292:	469b      	mov	fp, r3
 8012294:	00f6      	lsls	r6, r6, #3
 8012296:	4481      	add	r9, r0
 8012298:	032b      	lsls	r3, r5, #12
 801229a:	0069      	lsls	r1, r5, #1
 801229c:	0b1b      	lsrs	r3, r3, #12
 801229e:	4652      	mov	r2, sl
 80122a0:	4698      	mov	r8, r3
 80122a2:	0d49      	lsrs	r1, r1, #21
 80122a4:	0fed      	lsrs	r5, r5, #31
 80122a6:	2900      	cmp	r1, #0
 80122a8:	d100      	bne.n	80122ac <__aeabi_dmul+0x5c>
 80122aa:	e085      	b.n	80123b8 <__aeabi_dmul+0x168>
 80122ac:	4bd0      	ldr	r3, [pc, #832]	; (80125f0 <__aeabi_dmul+0x3a0>)
 80122ae:	4299      	cmp	r1, r3
 80122b0:	d100      	bne.n	80122b4 <__aeabi_dmul+0x64>
 80122b2:	e073      	b.n	801239c <__aeabi_dmul+0x14c>
 80122b4:	4643      	mov	r3, r8
 80122b6:	00da      	lsls	r2, r3, #3
 80122b8:	2380      	movs	r3, #128	; 0x80
 80122ba:	041b      	lsls	r3, r3, #16
 80122bc:	4313      	orrs	r3, r2
 80122be:	4652      	mov	r2, sl
 80122c0:	48cc      	ldr	r0, [pc, #816]	; (80125f4 <__aeabi_dmul+0x3a4>)
 80122c2:	0f52      	lsrs	r2, r2, #29
 80122c4:	4684      	mov	ip, r0
 80122c6:	4313      	orrs	r3, r2
 80122c8:	4652      	mov	r2, sl
 80122ca:	2000      	movs	r0, #0
 80122cc:	4461      	add	r1, ip
 80122ce:	00d2      	lsls	r2, r2, #3
 80122d0:	4489      	add	r9, r1
 80122d2:	0021      	movs	r1, r4
 80122d4:	4069      	eors	r1, r5
 80122d6:	9100      	str	r1, [sp, #0]
 80122d8:	468c      	mov	ip, r1
 80122da:	2101      	movs	r1, #1
 80122dc:	4449      	add	r1, r9
 80122de:	468a      	mov	sl, r1
 80122e0:	2f0f      	cmp	r7, #15
 80122e2:	d900      	bls.n	80122e6 <__aeabi_dmul+0x96>
 80122e4:	e090      	b.n	8012408 <__aeabi_dmul+0x1b8>
 80122e6:	49c4      	ldr	r1, [pc, #784]	; (80125f8 <__aeabi_dmul+0x3a8>)
 80122e8:	00bf      	lsls	r7, r7, #2
 80122ea:	59cf      	ldr	r7, [r1, r7]
 80122ec:	46bf      	mov	pc, r7
 80122ee:	465b      	mov	r3, fp
 80122f0:	433b      	orrs	r3, r7
 80122f2:	9301      	str	r3, [sp, #4]
 80122f4:	d000      	beq.n	80122f8 <__aeabi_dmul+0xa8>
 80122f6:	e16a      	b.n	80125ce <__aeabi_dmul+0x37e>
 80122f8:	2302      	movs	r3, #2
 80122fa:	2708      	movs	r7, #8
 80122fc:	2600      	movs	r6, #0
 80122fe:	4681      	mov	r9, r0
 8012300:	469b      	mov	fp, r3
 8012302:	e7c9      	b.n	8012298 <__aeabi_dmul+0x48>
 8012304:	0032      	movs	r2, r6
 8012306:	4658      	mov	r0, fp
 8012308:	9b01      	ldr	r3, [sp, #4]
 801230a:	4661      	mov	r1, ip
 801230c:	9100      	str	r1, [sp, #0]
 801230e:	2802      	cmp	r0, #2
 8012310:	d100      	bne.n	8012314 <__aeabi_dmul+0xc4>
 8012312:	e075      	b.n	8012400 <__aeabi_dmul+0x1b0>
 8012314:	2803      	cmp	r0, #3
 8012316:	d100      	bne.n	801231a <__aeabi_dmul+0xca>
 8012318:	e1fe      	b.n	8012718 <__aeabi_dmul+0x4c8>
 801231a:	2801      	cmp	r0, #1
 801231c:	d000      	beq.n	8012320 <__aeabi_dmul+0xd0>
 801231e:	e12c      	b.n	801257a <__aeabi_dmul+0x32a>
 8012320:	2300      	movs	r3, #0
 8012322:	2700      	movs	r7, #0
 8012324:	2600      	movs	r6, #0
 8012326:	2500      	movs	r5, #0
 8012328:	033f      	lsls	r7, r7, #12
 801232a:	0d2a      	lsrs	r2, r5, #20
 801232c:	0b3f      	lsrs	r7, r7, #12
 801232e:	48b3      	ldr	r0, [pc, #716]	; (80125fc <__aeabi_dmul+0x3ac>)
 8012330:	0512      	lsls	r2, r2, #20
 8012332:	433a      	orrs	r2, r7
 8012334:	4002      	ands	r2, r0
 8012336:	051b      	lsls	r3, r3, #20
 8012338:	4313      	orrs	r3, r2
 801233a:	9a00      	ldr	r2, [sp, #0]
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	07d1      	lsls	r1, r2, #31
 8012340:	085b      	lsrs	r3, r3, #1
 8012342:	430b      	orrs	r3, r1
 8012344:	0030      	movs	r0, r6
 8012346:	0019      	movs	r1, r3
 8012348:	b007      	add	sp, #28
 801234a:	bc3c      	pop	{r2, r3, r4, r5}
 801234c:	4690      	mov	r8, r2
 801234e:	4699      	mov	r9, r3
 8012350:	46a2      	mov	sl, r4
 8012352:	46ab      	mov	fp, r5
 8012354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012356:	465b      	mov	r3, fp
 8012358:	433b      	orrs	r3, r7
 801235a:	9301      	str	r3, [sp, #4]
 801235c:	d100      	bne.n	8012360 <__aeabi_dmul+0x110>
 801235e:	e12f      	b.n	80125c0 <__aeabi_dmul+0x370>
 8012360:	2f00      	cmp	r7, #0
 8012362:	d100      	bne.n	8012366 <__aeabi_dmul+0x116>
 8012364:	e1a5      	b.n	80126b2 <__aeabi_dmul+0x462>
 8012366:	0038      	movs	r0, r7
 8012368:	f7fe fb84 	bl	8010a74 <__clzsi2>
 801236c:	0003      	movs	r3, r0
 801236e:	3b0b      	subs	r3, #11
 8012370:	2b1c      	cmp	r3, #28
 8012372:	dd00      	ble.n	8012376 <__aeabi_dmul+0x126>
 8012374:	e196      	b.n	80126a4 <__aeabi_dmul+0x454>
 8012376:	221d      	movs	r2, #29
 8012378:	1ad3      	subs	r3, r2, r3
 801237a:	465a      	mov	r2, fp
 801237c:	0001      	movs	r1, r0
 801237e:	40da      	lsrs	r2, r3
 8012380:	465e      	mov	r6, fp
 8012382:	3908      	subs	r1, #8
 8012384:	408f      	lsls	r7, r1
 8012386:	0013      	movs	r3, r2
 8012388:	408e      	lsls	r6, r1
 801238a:	433b      	orrs	r3, r7
 801238c:	9301      	str	r3, [sp, #4]
 801238e:	4b9c      	ldr	r3, [pc, #624]	; (8012600 <__aeabi_dmul+0x3b0>)
 8012390:	2700      	movs	r7, #0
 8012392:	1a1b      	subs	r3, r3, r0
 8012394:	4699      	mov	r9, r3
 8012396:	2300      	movs	r3, #0
 8012398:	469b      	mov	fp, r3
 801239a:	e77d      	b.n	8012298 <__aeabi_dmul+0x48>
 801239c:	4641      	mov	r1, r8
 801239e:	4653      	mov	r3, sl
 80123a0:	430b      	orrs	r3, r1
 80123a2:	4993      	ldr	r1, [pc, #588]	; (80125f0 <__aeabi_dmul+0x3a0>)
 80123a4:	468c      	mov	ip, r1
 80123a6:	44e1      	add	r9, ip
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d000      	beq.n	80123ae <__aeabi_dmul+0x15e>
 80123ac:	e11a      	b.n	80125e4 <__aeabi_dmul+0x394>
 80123ae:	2202      	movs	r2, #2
 80123b0:	2002      	movs	r0, #2
 80123b2:	4317      	orrs	r7, r2
 80123b4:	2200      	movs	r2, #0
 80123b6:	e78c      	b.n	80122d2 <__aeabi_dmul+0x82>
 80123b8:	4313      	orrs	r3, r2
 80123ba:	d100      	bne.n	80123be <__aeabi_dmul+0x16e>
 80123bc:	e10d      	b.n	80125da <__aeabi_dmul+0x38a>
 80123be:	4643      	mov	r3, r8
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d100      	bne.n	80123c6 <__aeabi_dmul+0x176>
 80123c4:	e181      	b.n	80126ca <__aeabi_dmul+0x47a>
 80123c6:	4640      	mov	r0, r8
 80123c8:	f7fe fb54 	bl	8010a74 <__clzsi2>
 80123cc:	0002      	movs	r2, r0
 80123ce:	3a0b      	subs	r2, #11
 80123d0:	2a1c      	cmp	r2, #28
 80123d2:	dd00      	ble.n	80123d6 <__aeabi_dmul+0x186>
 80123d4:	e172      	b.n	80126bc <__aeabi_dmul+0x46c>
 80123d6:	0001      	movs	r1, r0
 80123d8:	4643      	mov	r3, r8
 80123da:	3908      	subs	r1, #8
 80123dc:	408b      	lsls	r3, r1
 80123de:	4698      	mov	r8, r3
 80123e0:	231d      	movs	r3, #29
 80123e2:	1a9a      	subs	r2, r3, r2
 80123e4:	4653      	mov	r3, sl
 80123e6:	40d3      	lsrs	r3, r2
 80123e8:	001a      	movs	r2, r3
 80123ea:	4643      	mov	r3, r8
 80123ec:	4313      	orrs	r3, r2
 80123ee:	4652      	mov	r2, sl
 80123f0:	408a      	lsls	r2, r1
 80123f2:	4649      	mov	r1, r9
 80123f4:	1a08      	subs	r0, r1, r0
 80123f6:	4982      	ldr	r1, [pc, #520]	; (8012600 <__aeabi_dmul+0x3b0>)
 80123f8:	4689      	mov	r9, r1
 80123fa:	4481      	add	r9, r0
 80123fc:	2000      	movs	r0, #0
 80123fe:	e768      	b.n	80122d2 <__aeabi_dmul+0x82>
 8012400:	4b7b      	ldr	r3, [pc, #492]	; (80125f0 <__aeabi_dmul+0x3a0>)
 8012402:	2700      	movs	r7, #0
 8012404:	2600      	movs	r6, #0
 8012406:	e78e      	b.n	8012326 <__aeabi_dmul+0xd6>
 8012408:	0c14      	lsrs	r4, r2, #16
 801240a:	0412      	lsls	r2, r2, #16
 801240c:	0c12      	lsrs	r2, r2, #16
 801240e:	0011      	movs	r1, r2
 8012410:	0c37      	lsrs	r7, r6, #16
 8012412:	0436      	lsls	r6, r6, #16
 8012414:	0c35      	lsrs	r5, r6, #16
 8012416:	4379      	muls	r1, r7
 8012418:	0028      	movs	r0, r5
 801241a:	468c      	mov	ip, r1
 801241c:	002e      	movs	r6, r5
 801241e:	4360      	muls	r0, r4
 8012420:	4460      	add	r0, ip
 8012422:	4683      	mov	fp, r0
 8012424:	4356      	muls	r6, r2
 8012426:	0021      	movs	r1, r4
 8012428:	0c30      	lsrs	r0, r6, #16
 801242a:	4680      	mov	r8, r0
 801242c:	4658      	mov	r0, fp
 801242e:	4379      	muls	r1, r7
 8012430:	4440      	add	r0, r8
 8012432:	9102      	str	r1, [sp, #8]
 8012434:	4584      	cmp	ip, r0
 8012436:	d906      	bls.n	8012446 <__aeabi_dmul+0x1f6>
 8012438:	4688      	mov	r8, r1
 801243a:	2180      	movs	r1, #128	; 0x80
 801243c:	0249      	lsls	r1, r1, #9
 801243e:	468c      	mov	ip, r1
 8012440:	44e0      	add	r8, ip
 8012442:	4641      	mov	r1, r8
 8012444:	9102      	str	r1, [sp, #8]
 8012446:	0436      	lsls	r6, r6, #16
 8012448:	0c01      	lsrs	r1, r0, #16
 801244a:	0c36      	lsrs	r6, r6, #16
 801244c:	0400      	lsls	r0, r0, #16
 801244e:	468b      	mov	fp, r1
 8012450:	1981      	adds	r1, r0, r6
 8012452:	0c1e      	lsrs	r6, r3, #16
 8012454:	041b      	lsls	r3, r3, #16
 8012456:	0c1b      	lsrs	r3, r3, #16
 8012458:	9103      	str	r1, [sp, #12]
 801245a:	0019      	movs	r1, r3
 801245c:	4379      	muls	r1, r7
 801245e:	468c      	mov	ip, r1
 8012460:	0028      	movs	r0, r5
 8012462:	4375      	muls	r5, r6
 8012464:	4465      	add	r5, ip
 8012466:	46a8      	mov	r8, r5
 8012468:	4358      	muls	r0, r3
 801246a:	0c05      	lsrs	r5, r0, #16
 801246c:	4445      	add	r5, r8
 801246e:	4377      	muls	r7, r6
 8012470:	42a9      	cmp	r1, r5
 8012472:	d903      	bls.n	801247c <__aeabi_dmul+0x22c>
 8012474:	2180      	movs	r1, #128	; 0x80
 8012476:	0249      	lsls	r1, r1, #9
 8012478:	468c      	mov	ip, r1
 801247a:	4467      	add	r7, ip
 801247c:	0c29      	lsrs	r1, r5, #16
 801247e:	468c      	mov	ip, r1
 8012480:	0039      	movs	r1, r7
 8012482:	0400      	lsls	r0, r0, #16
 8012484:	0c00      	lsrs	r0, r0, #16
 8012486:	042d      	lsls	r5, r5, #16
 8012488:	182d      	adds	r5, r5, r0
 801248a:	4461      	add	r1, ip
 801248c:	44ab      	add	fp, r5
 801248e:	9105      	str	r1, [sp, #20]
 8012490:	4659      	mov	r1, fp
 8012492:	9104      	str	r1, [sp, #16]
 8012494:	9901      	ldr	r1, [sp, #4]
 8012496:	040f      	lsls	r7, r1, #16
 8012498:	0c3f      	lsrs	r7, r7, #16
 801249a:	0c08      	lsrs	r0, r1, #16
 801249c:	0039      	movs	r1, r7
 801249e:	4351      	muls	r1, r2
 80124a0:	4342      	muls	r2, r0
 80124a2:	4690      	mov	r8, r2
 80124a4:	0002      	movs	r2, r0
 80124a6:	468c      	mov	ip, r1
 80124a8:	0c09      	lsrs	r1, r1, #16
 80124aa:	468b      	mov	fp, r1
 80124ac:	4362      	muls	r2, r4
 80124ae:	437c      	muls	r4, r7
 80124b0:	4444      	add	r4, r8
 80124b2:	445c      	add	r4, fp
 80124b4:	45a0      	cmp	r8, r4
 80124b6:	d903      	bls.n	80124c0 <__aeabi_dmul+0x270>
 80124b8:	2180      	movs	r1, #128	; 0x80
 80124ba:	0249      	lsls	r1, r1, #9
 80124bc:	4688      	mov	r8, r1
 80124be:	4442      	add	r2, r8
 80124c0:	0c21      	lsrs	r1, r4, #16
 80124c2:	4688      	mov	r8, r1
 80124c4:	4661      	mov	r1, ip
 80124c6:	0409      	lsls	r1, r1, #16
 80124c8:	0c09      	lsrs	r1, r1, #16
 80124ca:	468c      	mov	ip, r1
 80124cc:	0039      	movs	r1, r7
 80124ce:	4359      	muls	r1, r3
 80124d0:	4343      	muls	r3, r0
 80124d2:	4370      	muls	r0, r6
 80124d4:	437e      	muls	r6, r7
 80124d6:	0c0f      	lsrs	r7, r1, #16
 80124d8:	18f6      	adds	r6, r6, r3
 80124da:	0424      	lsls	r4, r4, #16
 80124dc:	19be      	adds	r6, r7, r6
 80124de:	4464      	add	r4, ip
 80124e0:	4442      	add	r2, r8
 80124e2:	468c      	mov	ip, r1
 80124e4:	42b3      	cmp	r3, r6
 80124e6:	d903      	bls.n	80124f0 <__aeabi_dmul+0x2a0>
 80124e8:	2380      	movs	r3, #128	; 0x80
 80124ea:	025b      	lsls	r3, r3, #9
 80124ec:	4698      	mov	r8, r3
 80124ee:	4440      	add	r0, r8
 80124f0:	9b02      	ldr	r3, [sp, #8]
 80124f2:	4661      	mov	r1, ip
 80124f4:	4698      	mov	r8, r3
 80124f6:	9b04      	ldr	r3, [sp, #16]
 80124f8:	0437      	lsls	r7, r6, #16
 80124fa:	4443      	add	r3, r8
 80124fc:	469b      	mov	fp, r3
 80124fe:	45ab      	cmp	fp, r5
 8012500:	41ad      	sbcs	r5, r5
 8012502:	426b      	negs	r3, r5
 8012504:	040d      	lsls	r5, r1, #16
 8012506:	9905      	ldr	r1, [sp, #20]
 8012508:	0c2d      	lsrs	r5, r5, #16
 801250a:	468c      	mov	ip, r1
 801250c:	197f      	adds	r7, r7, r5
 801250e:	4467      	add	r7, ip
 8012510:	18fd      	adds	r5, r7, r3
 8012512:	46a8      	mov	r8, r5
 8012514:	465d      	mov	r5, fp
 8012516:	192d      	adds	r5, r5, r4
 8012518:	42a5      	cmp	r5, r4
 801251a:	41a4      	sbcs	r4, r4
 801251c:	4693      	mov	fp, r2
 801251e:	4264      	negs	r4, r4
 8012520:	46a4      	mov	ip, r4
 8012522:	44c3      	add	fp, r8
 8012524:	44dc      	add	ip, fp
 8012526:	428f      	cmp	r7, r1
 8012528:	41bf      	sbcs	r7, r7
 801252a:	4598      	cmp	r8, r3
 801252c:	419b      	sbcs	r3, r3
 801252e:	4593      	cmp	fp, r2
 8012530:	4192      	sbcs	r2, r2
 8012532:	45a4      	cmp	ip, r4
 8012534:	41a4      	sbcs	r4, r4
 8012536:	425b      	negs	r3, r3
 8012538:	427f      	negs	r7, r7
 801253a:	431f      	orrs	r7, r3
 801253c:	0c36      	lsrs	r6, r6, #16
 801253e:	4252      	negs	r2, r2
 8012540:	4264      	negs	r4, r4
 8012542:	19bf      	adds	r7, r7, r6
 8012544:	4322      	orrs	r2, r4
 8012546:	18bf      	adds	r7, r7, r2
 8012548:	4662      	mov	r2, ip
 801254a:	1838      	adds	r0, r7, r0
 801254c:	0243      	lsls	r3, r0, #9
 801254e:	0dd2      	lsrs	r2, r2, #23
 8012550:	9903      	ldr	r1, [sp, #12]
 8012552:	4313      	orrs	r3, r2
 8012554:	026a      	lsls	r2, r5, #9
 8012556:	430a      	orrs	r2, r1
 8012558:	1e50      	subs	r0, r2, #1
 801255a:	4182      	sbcs	r2, r0
 801255c:	4661      	mov	r1, ip
 801255e:	0ded      	lsrs	r5, r5, #23
 8012560:	432a      	orrs	r2, r5
 8012562:	024e      	lsls	r6, r1, #9
 8012564:	4332      	orrs	r2, r6
 8012566:	01d9      	lsls	r1, r3, #7
 8012568:	d400      	bmi.n	801256c <__aeabi_dmul+0x31c>
 801256a:	e0b3      	b.n	80126d4 <__aeabi_dmul+0x484>
 801256c:	2601      	movs	r6, #1
 801256e:	0850      	lsrs	r0, r2, #1
 8012570:	4032      	ands	r2, r6
 8012572:	4302      	orrs	r2, r0
 8012574:	07de      	lsls	r6, r3, #31
 8012576:	4332      	orrs	r2, r6
 8012578:	085b      	lsrs	r3, r3, #1
 801257a:	4c22      	ldr	r4, [pc, #136]	; (8012604 <__aeabi_dmul+0x3b4>)
 801257c:	4454      	add	r4, sl
 801257e:	2c00      	cmp	r4, #0
 8012580:	dd62      	ble.n	8012648 <__aeabi_dmul+0x3f8>
 8012582:	0751      	lsls	r1, r2, #29
 8012584:	d009      	beq.n	801259a <__aeabi_dmul+0x34a>
 8012586:	200f      	movs	r0, #15
 8012588:	4010      	ands	r0, r2
 801258a:	2804      	cmp	r0, #4
 801258c:	d005      	beq.n	801259a <__aeabi_dmul+0x34a>
 801258e:	1d10      	adds	r0, r2, #4
 8012590:	4290      	cmp	r0, r2
 8012592:	4192      	sbcs	r2, r2
 8012594:	4252      	negs	r2, r2
 8012596:	189b      	adds	r3, r3, r2
 8012598:	0002      	movs	r2, r0
 801259a:	01d9      	lsls	r1, r3, #7
 801259c:	d504      	bpl.n	80125a8 <__aeabi_dmul+0x358>
 801259e:	2480      	movs	r4, #128	; 0x80
 80125a0:	4819      	ldr	r0, [pc, #100]	; (8012608 <__aeabi_dmul+0x3b8>)
 80125a2:	00e4      	lsls	r4, r4, #3
 80125a4:	4003      	ands	r3, r0
 80125a6:	4454      	add	r4, sl
 80125a8:	4818      	ldr	r0, [pc, #96]	; (801260c <__aeabi_dmul+0x3bc>)
 80125aa:	4284      	cmp	r4, r0
 80125ac:	dd00      	ble.n	80125b0 <__aeabi_dmul+0x360>
 80125ae:	e727      	b.n	8012400 <__aeabi_dmul+0x1b0>
 80125b0:	075e      	lsls	r6, r3, #29
 80125b2:	025b      	lsls	r3, r3, #9
 80125b4:	08d2      	lsrs	r2, r2, #3
 80125b6:	0b1f      	lsrs	r7, r3, #12
 80125b8:	0563      	lsls	r3, r4, #21
 80125ba:	4316      	orrs	r6, r2
 80125bc:	0d5b      	lsrs	r3, r3, #21
 80125be:	e6b2      	b.n	8012326 <__aeabi_dmul+0xd6>
 80125c0:	2300      	movs	r3, #0
 80125c2:	4699      	mov	r9, r3
 80125c4:	3301      	adds	r3, #1
 80125c6:	2704      	movs	r7, #4
 80125c8:	2600      	movs	r6, #0
 80125ca:	469b      	mov	fp, r3
 80125cc:	e664      	b.n	8012298 <__aeabi_dmul+0x48>
 80125ce:	2303      	movs	r3, #3
 80125d0:	9701      	str	r7, [sp, #4]
 80125d2:	4681      	mov	r9, r0
 80125d4:	270c      	movs	r7, #12
 80125d6:	469b      	mov	fp, r3
 80125d8:	e65e      	b.n	8012298 <__aeabi_dmul+0x48>
 80125da:	2201      	movs	r2, #1
 80125dc:	2001      	movs	r0, #1
 80125de:	4317      	orrs	r7, r2
 80125e0:	2200      	movs	r2, #0
 80125e2:	e676      	b.n	80122d2 <__aeabi_dmul+0x82>
 80125e4:	2303      	movs	r3, #3
 80125e6:	2003      	movs	r0, #3
 80125e8:	431f      	orrs	r7, r3
 80125ea:	4643      	mov	r3, r8
 80125ec:	e671      	b.n	80122d2 <__aeabi_dmul+0x82>
 80125ee:	46c0      	nop			; (mov r8, r8)
 80125f0:	000007ff 	.word	0x000007ff
 80125f4:	fffffc01 	.word	0xfffffc01
 80125f8:	0801c20c 	.word	0x0801c20c
 80125fc:	800fffff 	.word	0x800fffff
 8012600:	fffffc0d 	.word	0xfffffc0d
 8012604:	000003ff 	.word	0x000003ff
 8012608:	feffffff 	.word	0xfeffffff
 801260c:	000007fe 	.word	0x000007fe
 8012610:	2300      	movs	r3, #0
 8012612:	2780      	movs	r7, #128	; 0x80
 8012614:	9300      	str	r3, [sp, #0]
 8012616:	033f      	lsls	r7, r7, #12
 8012618:	2600      	movs	r6, #0
 801261a:	4b43      	ldr	r3, [pc, #268]	; (8012728 <__aeabi_dmul+0x4d8>)
 801261c:	e683      	b.n	8012326 <__aeabi_dmul+0xd6>
 801261e:	9b01      	ldr	r3, [sp, #4]
 8012620:	0032      	movs	r2, r6
 8012622:	46a4      	mov	ip, r4
 8012624:	4658      	mov	r0, fp
 8012626:	e670      	b.n	801230a <__aeabi_dmul+0xba>
 8012628:	46ac      	mov	ip, r5
 801262a:	e66e      	b.n	801230a <__aeabi_dmul+0xba>
 801262c:	2780      	movs	r7, #128	; 0x80
 801262e:	9901      	ldr	r1, [sp, #4]
 8012630:	033f      	lsls	r7, r7, #12
 8012632:	4239      	tst	r1, r7
 8012634:	d02d      	beq.n	8012692 <__aeabi_dmul+0x442>
 8012636:	423b      	tst	r3, r7
 8012638:	d12b      	bne.n	8012692 <__aeabi_dmul+0x442>
 801263a:	431f      	orrs	r7, r3
 801263c:	033f      	lsls	r7, r7, #12
 801263e:	0b3f      	lsrs	r7, r7, #12
 8012640:	9500      	str	r5, [sp, #0]
 8012642:	0016      	movs	r6, r2
 8012644:	4b38      	ldr	r3, [pc, #224]	; (8012728 <__aeabi_dmul+0x4d8>)
 8012646:	e66e      	b.n	8012326 <__aeabi_dmul+0xd6>
 8012648:	2501      	movs	r5, #1
 801264a:	1b2d      	subs	r5, r5, r4
 801264c:	2d38      	cmp	r5, #56	; 0x38
 801264e:	dd00      	ble.n	8012652 <__aeabi_dmul+0x402>
 8012650:	e666      	b.n	8012320 <__aeabi_dmul+0xd0>
 8012652:	2d1f      	cmp	r5, #31
 8012654:	dc40      	bgt.n	80126d8 <__aeabi_dmul+0x488>
 8012656:	4835      	ldr	r0, [pc, #212]	; (801272c <__aeabi_dmul+0x4dc>)
 8012658:	001c      	movs	r4, r3
 801265a:	4450      	add	r0, sl
 801265c:	0016      	movs	r6, r2
 801265e:	4082      	lsls	r2, r0
 8012660:	4084      	lsls	r4, r0
 8012662:	40ee      	lsrs	r6, r5
 8012664:	1e50      	subs	r0, r2, #1
 8012666:	4182      	sbcs	r2, r0
 8012668:	4334      	orrs	r4, r6
 801266a:	4314      	orrs	r4, r2
 801266c:	40eb      	lsrs	r3, r5
 801266e:	0762      	lsls	r2, r4, #29
 8012670:	d009      	beq.n	8012686 <__aeabi_dmul+0x436>
 8012672:	220f      	movs	r2, #15
 8012674:	4022      	ands	r2, r4
 8012676:	2a04      	cmp	r2, #4
 8012678:	d005      	beq.n	8012686 <__aeabi_dmul+0x436>
 801267a:	0022      	movs	r2, r4
 801267c:	1d14      	adds	r4, r2, #4
 801267e:	4294      	cmp	r4, r2
 8012680:	4180      	sbcs	r0, r0
 8012682:	4240      	negs	r0, r0
 8012684:	181b      	adds	r3, r3, r0
 8012686:	021a      	lsls	r2, r3, #8
 8012688:	d53e      	bpl.n	8012708 <__aeabi_dmul+0x4b8>
 801268a:	2301      	movs	r3, #1
 801268c:	2700      	movs	r7, #0
 801268e:	2600      	movs	r6, #0
 8012690:	e649      	b.n	8012326 <__aeabi_dmul+0xd6>
 8012692:	2780      	movs	r7, #128	; 0x80
 8012694:	9b01      	ldr	r3, [sp, #4]
 8012696:	033f      	lsls	r7, r7, #12
 8012698:	431f      	orrs	r7, r3
 801269a:	033f      	lsls	r7, r7, #12
 801269c:	0b3f      	lsrs	r7, r7, #12
 801269e:	9400      	str	r4, [sp, #0]
 80126a0:	4b21      	ldr	r3, [pc, #132]	; (8012728 <__aeabi_dmul+0x4d8>)
 80126a2:	e640      	b.n	8012326 <__aeabi_dmul+0xd6>
 80126a4:	0003      	movs	r3, r0
 80126a6:	465a      	mov	r2, fp
 80126a8:	3b28      	subs	r3, #40	; 0x28
 80126aa:	409a      	lsls	r2, r3
 80126ac:	2600      	movs	r6, #0
 80126ae:	9201      	str	r2, [sp, #4]
 80126b0:	e66d      	b.n	801238e <__aeabi_dmul+0x13e>
 80126b2:	4658      	mov	r0, fp
 80126b4:	f7fe f9de 	bl	8010a74 <__clzsi2>
 80126b8:	3020      	adds	r0, #32
 80126ba:	e657      	b.n	801236c <__aeabi_dmul+0x11c>
 80126bc:	0003      	movs	r3, r0
 80126be:	4652      	mov	r2, sl
 80126c0:	3b28      	subs	r3, #40	; 0x28
 80126c2:	409a      	lsls	r2, r3
 80126c4:	0013      	movs	r3, r2
 80126c6:	2200      	movs	r2, #0
 80126c8:	e693      	b.n	80123f2 <__aeabi_dmul+0x1a2>
 80126ca:	4650      	mov	r0, sl
 80126cc:	f7fe f9d2 	bl	8010a74 <__clzsi2>
 80126d0:	3020      	adds	r0, #32
 80126d2:	e67b      	b.n	80123cc <__aeabi_dmul+0x17c>
 80126d4:	46ca      	mov	sl, r9
 80126d6:	e750      	b.n	801257a <__aeabi_dmul+0x32a>
 80126d8:	201f      	movs	r0, #31
 80126da:	001e      	movs	r6, r3
 80126dc:	4240      	negs	r0, r0
 80126de:	1b04      	subs	r4, r0, r4
 80126e0:	40e6      	lsrs	r6, r4
 80126e2:	2d20      	cmp	r5, #32
 80126e4:	d003      	beq.n	80126ee <__aeabi_dmul+0x49e>
 80126e6:	4c12      	ldr	r4, [pc, #72]	; (8012730 <__aeabi_dmul+0x4e0>)
 80126e8:	4454      	add	r4, sl
 80126ea:	40a3      	lsls	r3, r4
 80126ec:	431a      	orrs	r2, r3
 80126ee:	1e50      	subs	r0, r2, #1
 80126f0:	4182      	sbcs	r2, r0
 80126f2:	4332      	orrs	r2, r6
 80126f4:	2607      	movs	r6, #7
 80126f6:	2700      	movs	r7, #0
 80126f8:	4016      	ands	r6, r2
 80126fa:	d009      	beq.n	8012710 <__aeabi_dmul+0x4c0>
 80126fc:	200f      	movs	r0, #15
 80126fe:	2300      	movs	r3, #0
 8012700:	4010      	ands	r0, r2
 8012702:	0014      	movs	r4, r2
 8012704:	2804      	cmp	r0, #4
 8012706:	d1b9      	bne.n	801267c <__aeabi_dmul+0x42c>
 8012708:	0022      	movs	r2, r4
 801270a:	075e      	lsls	r6, r3, #29
 801270c:	025b      	lsls	r3, r3, #9
 801270e:	0b1f      	lsrs	r7, r3, #12
 8012710:	08d2      	lsrs	r2, r2, #3
 8012712:	4316      	orrs	r6, r2
 8012714:	2300      	movs	r3, #0
 8012716:	e606      	b.n	8012326 <__aeabi_dmul+0xd6>
 8012718:	2780      	movs	r7, #128	; 0x80
 801271a:	033f      	lsls	r7, r7, #12
 801271c:	431f      	orrs	r7, r3
 801271e:	033f      	lsls	r7, r7, #12
 8012720:	0b3f      	lsrs	r7, r7, #12
 8012722:	0016      	movs	r6, r2
 8012724:	4b00      	ldr	r3, [pc, #0]	; (8012728 <__aeabi_dmul+0x4d8>)
 8012726:	e5fe      	b.n	8012326 <__aeabi_dmul+0xd6>
 8012728:	000007ff 	.word	0x000007ff
 801272c:	0000041e 	.word	0x0000041e
 8012730:	0000043e 	.word	0x0000043e

08012734 <__aeabi_dsub>:
 8012734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012736:	4657      	mov	r7, sl
 8012738:	464e      	mov	r6, r9
 801273a:	4645      	mov	r5, r8
 801273c:	46de      	mov	lr, fp
 801273e:	000c      	movs	r4, r1
 8012740:	0309      	lsls	r1, r1, #12
 8012742:	b5e0      	push	{r5, r6, r7, lr}
 8012744:	0a49      	lsrs	r1, r1, #9
 8012746:	0f46      	lsrs	r6, r0, #29
 8012748:	005f      	lsls	r7, r3, #1
 801274a:	4331      	orrs	r1, r6
 801274c:	031e      	lsls	r6, r3, #12
 801274e:	0fdb      	lsrs	r3, r3, #31
 8012750:	0a76      	lsrs	r6, r6, #9
 8012752:	469b      	mov	fp, r3
 8012754:	0f53      	lsrs	r3, r2, #29
 8012756:	4333      	orrs	r3, r6
 8012758:	4ec8      	ldr	r6, [pc, #800]	; (8012a7c <__aeabi_dsub+0x348>)
 801275a:	0065      	lsls	r5, r4, #1
 801275c:	00c0      	lsls	r0, r0, #3
 801275e:	0fe4      	lsrs	r4, r4, #31
 8012760:	00d2      	lsls	r2, r2, #3
 8012762:	0d6d      	lsrs	r5, r5, #21
 8012764:	46a2      	mov	sl, r4
 8012766:	4681      	mov	r9, r0
 8012768:	0d7f      	lsrs	r7, r7, #21
 801276a:	469c      	mov	ip, r3
 801276c:	4690      	mov	r8, r2
 801276e:	42b7      	cmp	r7, r6
 8012770:	d100      	bne.n	8012774 <__aeabi_dsub+0x40>
 8012772:	e0b9      	b.n	80128e8 <__aeabi_dsub+0x1b4>
 8012774:	465b      	mov	r3, fp
 8012776:	2601      	movs	r6, #1
 8012778:	4073      	eors	r3, r6
 801277a:	469b      	mov	fp, r3
 801277c:	1bee      	subs	r6, r5, r7
 801277e:	45a3      	cmp	fp, r4
 8012780:	d100      	bne.n	8012784 <__aeabi_dsub+0x50>
 8012782:	e083      	b.n	801288c <__aeabi_dsub+0x158>
 8012784:	2e00      	cmp	r6, #0
 8012786:	dd63      	ble.n	8012850 <__aeabi_dsub+0x11c>
 8012788:	2f00      	cmp	r7, #0
 801278a:	d000      	beq.n	801278e <__aeabi_dsub+0x5a>
 801278c:	e0b1      	b.n	80128f2 <__aeabi_dsub+0x1be>
 801278e:	4663      	mov	r3, ip
 8012790:	4313      	orrs	r3, r2
 8012792:	d100      	bne.n	8012796 <__aeabi_dsub+0x62>
 8012794:	e123      	b.n	80129de <__aeabi_dsub+0x2aa>
 8012796:	1e73      	subs	r3, r6, #1
 8012798:	2b00      	cmp	r3, #0
 801279a:	d000      	beq.n	801279e <__aeabi_dsub+0x6a>
 801279c:	e1ba      	b.n	8012b14 <__aeabi_dsub+0x3e0>
 801279e:	1a86      	subs	r6, r0, r2
 80127a0:	4663      	mov	r3, ip
 80127a2:	42b0      	cmp	r0, r6
 80127a4:	4180      	sbcs	r0, r0
 80127a6:	2501      	movs	r5, #1
 80127a8:	1ac9      	subs	r1, r1, r3
 80127aa:	4240      	negs	r0, r0
 80127ac:	1a09      	subs	r1, r1, r0
 80127ae:	020b      	lsls	r3, r1, #8
 80127b0:	d400      	bmi.n	80127b4 <__aeabi_dsub+0x80>
 80127b2:	e147      	b.n	8012a44 <__aeabi_dsub+0x310>
 80127b4:	0249      	lsls	r1, r1, #9
 80127b6:	0a4b      	lsrs	r3, r1, #9
 80127b8:	4698      	mov	r8, r3
 80127ba:	4643      	mov	r3, r8
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d100      	bne.n	80127c2 <__aeabi_dsub+0x8e>
 80127c0:	e189      	b.n	8012ad6 <__aeabi_dsub+0x3a2>
 80127c2:	4640      	mov	r0, r8
 80127c4:	f7fe f956 	bl	8010a74 <__clzsi2>
 80127c8:	0003      	movs	r3, r0
 80127ca:	3b08      	subs	r3, #8
 80127cc:	2b1f      	cmp	r3, #31
 80127ce:	dd00      	ble.n	80127d2 <__aeabi_dsub+0x9e>
 80127d0:	e17c      	b.n	8012acc <__aeabi_dsub+0x398>
 80127d2:	2220      	movs	r2, #32
 80127d4:	0030      	movs	r0, r6
 80127d6:	1ad2      	subs	r2, r2, r3
 80127d8:	4641      	mov	r1, r8
 80127da:	40d0      	lsrs	r0, r2
 80127dc:	4099      	lsls	r1, r3
 80127de:	0002      	movs	r2, r0
 80127e0:	409e      	lsls	r6, r3
 80127e2:	430a      	orrs	r2, r1
 80127e4:	429d      	cmp	r5, r3
 80127e6:	dd00      	ble.n	80127ea <__aeabi_dsub+0xb6>
 80127e8:	e16a      	b.n	8012ac0 <__aeabi_dsub+0x38c>
 80127ea:	1b5d      	subs	r5, r3, r5
 80127ec:	1c6b      	adds	r3, r5, #1
 80127ee:	2b1f      	cmp	r3, #31
 80127f0:	dd00      	ble.n	80127f4 <__aeabi_dsub+0xc0>
 80127f2:	e194      	b.n	8012b1e <__aeabi_dsub+0x3ea>
 80127f4:	2120      	movs	r1, #32
 80127f6:	0010      	movs	r0, r2
 80127f8:	0035      	movs	r5, r6
 80127fa:	1ac9      	subs	r1, r1, r3
 80127fc:	408e      	lsls	r6, r1
 80127fe:	40da      	lsrs	r2, r3
 8012800:	4088      	lsls	r0, r1
 8012802:	40dd      	lsrs	r5, r3
 8012804:	1e71      	subs	r1, r6, #1
 8012806:	418e      	sbcs	r6, r1
 8012808:	0011      	movs	r1, r2
 801280a:	2207      	movs	r2, #7
 801280c:	4328      	orrs	r0, r5
 801280e:	2500      	movs	r5, #0
 8012810:	4306      	orrs	r6, r0
 8012812:	4032      	ands	r2, r6
 8012814:	2a00      	cmp	r2, #0
 8012816:	d009      	beq.n	801282c <__aeabi_dsub+0xf8>
 8012818:	230f      	movs	r3, #15
 801281a:	4033      	ands	r3, r6
 801281c:	2b04      	cmp	r3, #4
 801281e:	d005      	beq.n	801282c <__aeabi_dsub+0xf8>
 8012820:	1d33      	adds	r3, r6, #4
 8012822:	42b3      	cmp	r3, r6
 8012824:	41b6      	sbcs	r6, r6
 8012826:	4276      	negs	r6, r6
 8012828:	1989      	adds	r1, r1, r6
 801282a:	001e      	movs	r6, r3
 801282c:	020b      	lsls	r3, r1, #8
 801282e:	d400      	bmi.n	8012832 <__aeabi_dsub+0xfe>
 8012830:	e23d      	b.n	8012cae <__aeabi_dsub+0x57a>
 8012832:	1c6a      	adds	r2, r5, #1
 8012834:	4b91      	ldr	r3, [pc, #580]	; (8012a7c <__aeabi_dsub+0x348>)
 8012836:	0555      	lsls	r5, r2, #21
 8012838:	0d6d      	lsrs	r5, r5, #21
 801283a:	429a      	cmp	r2, r3
 801283c:	d100      	bne.n	8012840 <__aeabi_dsub+0x10c>
 801283e:	e119      	b.n	8012a74 <__aeabi_dsub+0x340>
 8012840:	4a8f      	ldr	r2, [pc, #572]	; (8012a80 <__aeabi_dsub+0x34c>)
 8012842:	08f6      	lsrs	r6, r6, #3
 8012844:	400a      	ands	r2, r1
 8012846:	0757      	lsls	r7, r2, #29
 8012848:	0252      	lsls	r2, r2, #9
 801284a:	4337      	orrs	r7, r6
 801284c:	0b12      	lsrs	r2, r2, #12
 801284e:	e09b      	b.n	8012988 <__aeabi_dsub+0x254>
 8012850:	2e00      	cmp	r6, #0
 8012852:	d000      	beq.n	8012856 <__aeabi_dsub+0x122>
 8012854:	e0c5      	b.n	80129e2 <__aeabi_dsub+0x2ae>
 8012856:	1c6e      	adds	r6, r5, #1
 8012858:	0576      	lsls	r6, r6, #21
 801285a:	0d76      	lsrs	r6, r6, #21
 801285c:	2e01      	cmp	r6, #1
 801285e:	dc00      	bgt.n	8012862 <__aeabi_dsub+0x12e>
 8012860:	e148      	b.n	8012af4 <__aeabi_dsub+0x3c0>
 8012862:	4667      	mov	r7, ip
 8012864:	1a86      	subs	r6, r0, r2
 8012866:	1bcb      	subs	r3, r1, r7
 8012868:	42b0      	cmp	r0, r6
 801286a:	41bf      	sbcs	r7, r7
 801286c:	427f      	negs	r7, r7
 801286e:	46b8      	mov	r8, r7
 8012870:	001f      	movs	r7, r3
 8012872:	4643      	mov	r3, r8
 8012874:	1aff      	subs	r7, r7, r3
 8012876:	003b      	movs	r3, r7
 8012878:	46b8      	mov	r8, r7
 801287a:	021b      	lsls	r3, r3, #8
 801287c:	d500      	bpl.n	8012880 <__aeabi_dsub+0x14c>
 801287e:	e15f      	b.n	8012b40 <__aeabi_dsub+0x40c>
 8012880:	4337      	orrs	r7, r6
 8012882:	d19a      	bne.n	80127ba <__aeabi_dsub+0x86>
 8012884:	2200      	movs	r2, #0
 8012886:	2400      	movs	r4, #0
 8012888:	2500      	movs	r5, #0
 801288a:	e079      	b.n	8012980 <__aeabi_dsub+0x24c>
 801288c:	2e00      	cmp	r6, #0
 801288e:	dc00      	bgt.n	8012892 <__aeabi_dsub+0x15e>
 8012890:	e0fa      	b.n	8012a88 <__aeabi_dsub+0x354>
 8012892:	2f00      	cmp	r7, #0
 8012894:	d100      	bne.n	8012898 <__aeabi_dsub+0x164>
 8012896:	e08d      	b.n	80129b4 <__aeabi_dsub+0x280>
 8012898:	4b78      	ldr	r3, [pc, #480]	; (8012a7c <__aeabi_dsub+0x348>)
 801289a:	429d      	cmp	r5, r3
 801289c:	d067      	beq.n	801296e <__aeabi_dsub+0x23a>
 801289e:	2380      	movs	r3, #128	; 0x80
 80128a0:	4667      	mov	r7, ip
 80128a2:	041b      	lsls	r3, r3, #16
 80128a4:	431f      	orrs	r7, r3
 80128a6:	46bc      	mov	ip, r7
 80128a8:	2e38      	cmp	r6, #56	; 0x38
 80128aa:	dc00      	bgt.n	80128ae <__aeabi_dsub+0x17a>
 80128ac:	e152      	b.n	8012b54 <__aeabi_dsub+0x420>
 80128ae:	4663      	mov	r3, ip
 80128b0:	4313      	orrs	r3, r2
 80128b2:	1e5a      	subs	r2, r3, #1
 80128b4:	4193      	sbcs	r3, r2
 80128b6:	181e      	adds	r6, r3, r0
 80128b8:	4286      	cmp	r6, r0
 80128ba:	4180      	sbcs	r0, r0
 80128bc:	4240      	negs	r0, r0
 80128be:	1809      	adds	r1, r1, r0
 80128c0:	020b      	lsls	r3, r1, #8
 80128c2:	d400      	bmi.n	80128c6 <__aeabi_dsub+0x192>
 80128c4:	e0be      	b.n	8012a44 <__aeabi_dsub+0x310>
 80128c6:	4b6d      	ldr	r3, [pc, #436]	; (8012a7c <__aeabi_dsub+0x348>)
 80128c8:	3501      	adds	r5, #1
 80128ca:	429d      	cmp	r5, r3
 80128cc:	d100      	bne.n	80128d0 <__aeabi_dsub+0x19c>
 80128ce:	e0d2      	b.n	8012a76 <__aeabi_dsub+0x342>
 80128d0:	4a6b      	ldr	r2, [pc, #428]	; (8012a80 <__aeabi_dsub+0x34c>)
 80128d2:	0873      	lsrs	r3, r6, #1
 80128d4:	400a      	ands	r2, r1
 80128d6:	2101      	movs	r1, #1
 80128d8:	400e      	ands	r6, r1
 80128da:	431e      	orrs	r6, r3
 80128dc:	0851      	lsrs	r1, r2, #1
 80128de:	07d3      	lsls	r3, r2, #31
 80128e0:	2207      	movs	r2, #7
 80128e2:	431e      	orrs	r6, r3
 80128e4:	4032      	ands	r2, r6
 80128e6:	e795      	b.n	8012814 <__aeabi_dsub+0xe0>
 80128e8:	001e      	movs	r6, r3
 80128ea:	4316      	orrs	r6, r2
 80128ec:	d000      	beq.n	80128f0 <__aeabi_dsub+0x1bc>
 80128ee:	e745      	b.n	801277c <__aeabi_dsub+0x48>
 80128f0:	e740      	b.n	8012774 <__aeabi_dsub+0x40>
 80128f2:	4b62      	ldr	r3, [pc, #392]	; (8012a7c <__aeabi_dsub+0x348>)
 80128f4:	429d      	cmp	r5, r3
 80128f6:	d03a      	beq.n	801296e <__aeabi_dsub+0x23a>
 80128f8:	2380      	movs	r3, #128	; 0x80
 80128fa:	4667      	mov	r7, ip
 80128fc:	041b      	lsls	r3, r3, #16
 80128fe:	431f      	orrs	r7, r3
 8012900:	46bc      	mov	ip, r7
 8012902:	2e38      	cmp	r6, #56	; 0x38
 8012904:	dd00      	ble.n	8012908 <__aeabi_dsub+0x1d4>
 8012906:	e0eb      	b.n	8012ae0 <__aeabi_dsub+0x3ac>
 8012908:	2e1f      	cmp	r6, #31
 801290a:	dc00      	bgt.n	801290e <__aeabi_dsub+0x1da>
 801290c:	e13a      	b.n	8012b84 <__aeabi_dsub+0x450>
 801290e:	0033      	movs	r3, r6
 8012910:	4667      	mov	r7, ip
 8012912:	3b20      	subs	r3, #32
 8012914:	40df      	lsrs	r7, r3
 8012916:	003b      	movs	r3, r7
 8012918:	2e20      	cmp	r6, #32
 801291a:	d005      	beq.n	8012928 <__aeabi_dsub+0x1f4>
 801291c:	2740      	movs	r7, #64	; 0x40
 801291e:	1bbf      	subs	r7, r7, r6
 8012920:	4666      	mov	r6, ip
 8012922:	40be      	lsls	r6, r7
 8012924:	4332      	orrs	r2, r6
 8012926:	4690      	mov	r8, r2
 8012928:	4646      	mov	r6, r8
 801292a:	1e72      	subs	r2, r6, #1
 801292c:	4196      	sbcs	r6, r2
 801292e:	4333      	orrs	r3, r6
 8012930:	e0da      	b.n	8012ae8 <__aeabi_dsub+0x3b4>
 8012932:	2b00      	cmp	r3, #0
 8012934:	d100      	bne.n	8012938 <__aeabi_dsub+0x204>
 8012936:	e214      	b.n	8012d62 <__aeabi_dsub+0x62e>
 8012938:	4663      	mov	r3, ip
 801293a:	4313      	orrs	r3, r2
 801293c:	d100      	bne.n	8012940 <__aeabi_dsub+0x20c>
 801293e:	e168      	b.n	8012c12 <__aeabi_dsub+0x4de>
 8012940:	2380      	movs	r3, #128	; 0x80
 8012942:	074e      	lsls	r6, r1, #29
 8012944:	08c0      	lsrs	r0, r0, #3
 8012946:	08c9      	lsrs	r1, r1, #3
 8012948:	031b      	lsls	r3, r3, #12
 801294a:	4306      	orrs	r6, r0
 801294c:	4219      	tst	r1, r3
 801294e:	d008      	beq.n	8012962 <__aeabi_dsub+0x22e>
 8012950:	4660      	mov	r0, ip
 8012952:	08c0      	lsrs	r0, r0, #3
 8012954:	4218      	tst	r0, r3
 8012956:	d104      	bne.n	8012962 <__aeabi_dsub+0x22e>
 8012958:	4663      	mov	r3, ip
 801295a:	0001      	movs	r1, r0
 801295c:	08d2      	lsrs	r2, r2, #3
 801295e:	075e      	lsls	r6, r3, #29
 8012960:	4316      	orrs	r6, r2
 8012962:	00f3      	lsls	r3, r6, #3
 8012964:	4699      	mov	r9, r3
 8012966:	00c9      	lsls	r1, r1, #3
 8012968:	0f72      	lsrs	r2, r6, #29
 801296a:	4d44      	ldr	r5, [pc, #272]	; (8012a7c <__aeabi_dsub+0x348>)
 801296c:	4311      	orrs	r1, r2
 801296e:	464b      	mov	r3, r9
 8012970:	08de      	lsrs	r6, r3, #3
 8012972:	4b42      	ldr	r3, [pc, #264]	; (8012a7c <__aeabi_dsub+0x348>)
 8012974:	074f      	lsls	r7, r1, #29
 8012976:	4337      	orrs	r7, r6
 8012978:	08ca      	lsrs	r2, r1, #3
 801297a:	429d      	cmp	r5, r3
 801297c:	d100      	bne.n	8012980 <__aeabi_dsub+0x24c>
 801297e:	e06e      	b.n	8012a5e <__aeabi_dsub+0x32a>
 8012980:	0312      	lsls	r2, r2, #12
 8012982:	056d      	lsls	r5, r5, #21
 8012984:	0b12      	lsrs	r2, r2, #12
 8012986:	0d6d      	lsrs	r5, r5, #21
 8012988:	2100      	movs	r1, #0
 801298a:	0312      	lsls	r2, r2, #12
 801298c:	0b13      	lsrs	r3, r2, #12
 801298e:	0d0a      	lsrs	r2, r1, #20
 8012990:	0512      	lsls	r2, r2, #20
 8012992:	431a      	orrs	r2, r3
 8012994:	4b3b      	ldr	r3, [pc, #236]	; (8012a84 <__aeabi_dsub+0x350>)
 8012996:	052d      	lsls	r5, r5, #20
 8012998:	4013      	ands	r3, r2
 801299a:	432b      	orrs	r3, r5
 801299c:	005b      	lsls	r3, r3, #1
 801299e:	07e4      	lsls	r4, r4, #31
 80129a0:	085b      	lsrs	r3, r3, #1
 80129a2:	4323      	orrs	r3, r4
 80129a4:	0038      	movs	r0, r7
 80129a6:	0019      	movs	r1, r3
 80129a8:	bc3c      	pop	{r2, r3, r4, r5}
 80129aa:	4690      	mov	r8, r2
 80129ac:	4699      	mov	r9, r3
 80129ae:	46a2      	mov	sl, r4
 80129b0:	46ab      	mov	fp, r5
 80129b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129b4:	4663      	mov	r3, ip
 80129b6:	4313      	orrs	r3, r2
 80129b8:	d011      	beq.n	80129de <__aeabi_dsub+0x2aa>
 80129ba:	1e73      	subs	r3, r6, #1
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d000      	beq.n	80129c2 <__aeabi_dsub+0x28e>
 80129c0:	e107      	b.n	8012bd2 <__aeabi_dsub+0x49e>
 80129c2:	1886      	adds	r6, r0, r2
 80129c4:	4286      	cmp	r6, r0
 80129c6:	4180      	sbcs	r0, r0
 80129c8:	4461      	add	r1, ip
 80129ca:	4240      	negs	r0, r0
 80129cc:	1809      	adds	r1, r1, r0
 80129ce:	2501      	movs	r5, #1
 80129d0:	020b      	lsls	r3, r1, #8
 80129d2:	d537      	bpl.n	8012a44 <__aeabi_dsub+0x310>
 80129d4:	2502      	movs	r5, #2
 80129d6:	e77b      	b.n	80128d0 <__aeabi_dsub+0x19c>
 80129d8:	003e      	movs	r6, r7
 80129da:	4661      	mov	r1, ip
 80129dc:	4691      	mov	r9, r2
 80129de:	0035      	movs	r5, r6
 80129e0:	e7c5      	b.n	801296e <__aeabi_dsub+0x23a>
 80129e2:	465c      	mov	r4, fp
 80129e4:	2d00      	cmp	r5, #0
 80129e6:	d000      	beq.n	80129ea <__aeabi_dsub+0x2b6>
 80129e8:	e0e1      	b.n	8012bae <__aeabi_dsub+0x47a>
 80129ea:	000b      	movs	r3, r1
 80129ec:	4303      	orrs	r3, r0
 80129ee:	d0f3      	beq.n	80129d8 <__aeabi_dsub+0x2a4>
 80129f0:	1c73      	adds	r3, r6, #1
 80129f2:	d100      	bne.n	80129f6 <__aeabi_dsub+0x2c2>
 80129f4:	e1ac      	b.n	8012d50 <__aeabi_dsub+0x61c>
 80129f6:	4b21      	ldr	r3, [pc, #132]	; (8012a7c <__aeabi_dsub+0x348>)
 80129f8:	429f      	cmp	r7, r3
 80129fa:	d100      	bne.n	80129fe <__aeabi_dsub+0x2ca>
 80129fc:	e13a      	b.n	8012c74 <__aeabi_dsub+0x540>
 80129fe:	43f3      	mvns	r3, r6
 8012a00:	2b38      	cmp	r3, #56	; 0x38
 8012a02:	dd00      	ble.n	8012a06 <__aeabi_dsub+0x2d2>
 8012a04:	e16f      	b.n	8012ce6 <__aeabi_dsub+0x5b2>
 8012a06:	2b1f      	cmp	r3, #31
 8012a08:	dd00      	ble.n	8012a0c <__aeabi_dsub+0x2d8>
 8012a0a:	e18c      	b.n	8012d26 <__aeabi_dsub+0x5f2>
 8012a0c:	2520      	movs	r5, #32
 8012a0e:	000e      	movs	r6, r1
 8012a10:	1aed      	subs	r5, r5, r3
 8012a12:	40ae      	lsls	r6, r5
 8012a14:	46b0      	mov	r8, r6
 8012a16:	0006      	movs	r6, r0
 8012a18:	46aa      	mov	sl, r5
 8012a1a:	40de      	lsrs	r6, r3
 8012a1c:	4645      	mov	r5, r8
 8012a1e:	4335      	orrs	r5, r6
 8012a20:	002e      	movs	r6, r5
 8012a22:	4655      	mov	r5, sl
 8012a24:	40d9      	lsrs	r1, r3
 8012a26:	40a8      	lsls	r0, r5
 8012a28:	4663      	mov	r3, ip
 8012a2a:	1e45      	subs	r5, r0, #1
 8012a2c:	41a8      	sbcs	r0, r5
 8012a2e:	1a5b      	subs	r3, r3, r1
 8012a30:	469c      	mov	ip, r3
 8012a32:	4330      	orrs	r0, r6
 8012a34:	1a16      	subs	r6, r2, r0
 8012a36:	42b2      	cmp	r2, r6
 8012a38:	4192      	sbcs	r2, r2
 8012a3a:	4663      	mov	r3, ip
 8012a3c:	4252      	negs	r2, r2
 8012a3e:	1a99      	subs	r1, r3, r2
 8012a40:	003d      	movs	r5, r7
 8012a42:	e6b4      	b.n	80127ae <__aeabi_dsub+0x7a>
 8012a44:	2207      	movs	r2, #7
 8012a46:	4032      	ands	r2, r6
 8012a48:	2a00      	cmp	r2, #0
 8012a4a:	d000      	beq.n	8012a4e <__aeabi_dsub+0x31a>
 8012a4c:	e6e4      	b.n	8012818 <__aeabi_dsub+0xe4>
 8012a4e:	4b0b      	ldr	r3, [pc, #44]	; (8012a7c <__aeabi_dsub+0x348>)
 8012a50:	08f6      	lsrs	r6, r6, #3
 8012a52:	074f      	lsls	r7, r1, #29
 8012a54:	4337      	orrs	r7, r6
 8012a56:	08ca      	lsrs	r2, r1, #3
 8012a58:	429d      	cmp	r5, r3
 8012a5a:	d000      	beq.n	8012a5e <__aeabi_dsub+0x32a>
 8012a5c:	e790      	b.n	8012980 <__aeabi_dsub+0x24c>
 8012a5e:	003b      	movs	r3, r7
 8012a60:	4313      	orrs	r3, r2
 8012a62:	d100      	bne.n	8012a66 <__aeabi_dsub+0x332>
 8012a64:	e1a6      	b.n	8012db4 <__aeabi_dsub+0x680>
 8012a66:	2380      	movs	r3, #128	; 0x80
 8012a68:	031b      	lsls	r3, r3, #12
 8012a6a:	431a      	orrs	r2, r3
 8012a6c:	0312      	lsls	r2, r2, #12
 8012a6e:	0b12      	lsrs	r2, r2, #12
 8012a70:	4d02      	ldr	r5, [pc, #8]	; (8012a7c <__aeabi_dsub+0x348>)
 8012a72:	e789      	b.n	8012988 <__aeabi_dsub+0x254>
 8012a74:	0015      	movs	r5, r2
 8012a76:	2200      	movs	r2, #0
 8012a78:	2700      	movs	r7, #0
 8012a7a:	e785      	b.n	8012988 <__aeabi_dsub+0x254>
 8012a7c:	000007ff 	.word	0x000007ff
 8012a80:	ff7fffff 	.word	0xff7fffff
 8012a84:	800fffff 	.word	0x800fffff
 8012a88:	2e00      	cmp	r6, #0
 8012a8a:	d000      	beq.n	8012a8e <__aeabi_dsub+0x35a>
 8012a8c:	e0c7      	b.n	8012c1e <__aeabi_dsub+0x4ea>
 8012a8e:	1c6b      	adds	r3, r5, #1
 8012a90:	055e      	lsls	r6, r3, #21
 8012a92:	0d76      	lsrs	r6, r6, #21
 8012a94:	2e01      	cmp	r6, #1
 8012a96:	dc00      	bgt.n	8012a9a <__aeabi_dsub+0x366>
 8012a98:	e0f0      	b.n	8012c7c <__aeabi_dsub+0x548>
 8012a9a:	4dc8      	ldr	r5, [pc, #800]	; (8012dbc <__aeabi_dsub+0x688>)
 8012a9c:	42ab      	cmp	r3, r5
 8012a9e:	d100      	bne.n	8012aa2 <__aeabi_dsub+0x36e>
 8012aa0:	e0b9      	b.n	8012c16 <__aeabi_dsub+0x4e2>
 8012aa2:	1885      	adds	r5, r0, r2
 8012aa4:	000a      	movs	r2, r1
 8012aa6:	4285      	cmp	r5, r0
 8012aa8:	4189      	sbcs	r1, r1
 8012aaa:	4462      	add	r2, ip
 8012aac:	4249      	negs	r1, r1
 8012aae:	1851      	adds	r1, r2, r1
 8012ab0:	2207      	movs	r2, #7
 8012ab2:	07ce      	lsls	r6, r1, #31
 8012ab4:	086d      	lsrs	r5, r5, #1
 8012ab6:	432e      	orrs	r6, r5
 8012ab8:	0849      	lsrs	r1, r1, #1
 8012aba:	4032      	ands	r2, r6
 8012abc:	001d      	movs	r5, r3
 8012abe:	e6a9      	b.n	8012814 <__aeabi_dsub+0xe0>
 8012ac0:	49bf      	ldr	r1, [pc, #764]	; (8012dc0 <__aeabi_dsub+0x68c>)
 8012ac2:	1aed      	subs	r5, r5, r3
 8012ac4:	4011      	ands	r1, r2
 8012ac6:	2207      	movs	r2, #7
 8012ac8:	4032      	ands	r2, r6
 8012aca:	e6a3      	b.n	8012814 <__aeabi_dsub+0xe0>
 8012acc:	0032      	movs	r2, r6
 8012ace:	3828      	subs	r0, #40	; 0x28
 8012ad0:	4082      	lsls	r2, r0
 8012ad2:	2600      	movs	r6, #0
 8012ad4:	e686      	b.n	80127e4 <__aeabi_dsub+0xb0>
 8012ad6:	0030      	movs	r0, r6
 8012ad8:	f7fd ffcc 	bl	8010a74 <__clzsi2>
 8012adc:	3020      	adds	r0, #32
 8012ade:	e673      	b.n	80127c8 <__aeabi_dsub+0x94>
 8012ae0:	4663      	mov	r3, ip
 8012ae2:	4313      	orrs	r3, r2
 8012ae4:	1e5a      	subs	r2, r3, #1
 8012ae6:	4193      	sbcs	r3, r2
 8012ae8:	1ac6      	subs	r6, r0, r3
 8012aea:	42b0      	cmp	r0, r6
 8012aec:	4180      	sbcs	r0, r0
 8012aee:	4240      	negs	r0, r0
 8012af0:	1a09      	subs	r1, r1, r0
 8012af2:	e65c      	b.n	80127ae <__aeabi_dsub+0x7a>
 8012af4:	000e      	movs	r6, r1
 8012af6:	4667      	mov	r7, ip
 8012af8:	4306      	orrs	r6, r0
 8012afa:	4317      	orrs	r7, r2
 8012afc:	2d00      	cmp	r5, #0
 8012afe:	d15e      	bne.n	8012bbe <__aeabi_dsub+0x48a>
 8012b00:	2e00      	cmp	r6, #0
 8012b02:	d000      	beq.n	8012b06 <__aeabi_dsub+0x3d2>
 8012b04:	e0f3      	b.n	8012cee <__aeabi_dsub+0x5ba>
 8012b06:	2f00      	cmp	r7, #0
 8012b08:	d100      	bne.n	8012b0c <__aeabi_dsub+0x3d8>
 8012b0a:	e11e      	b.n	8012d4a <__aeabi_dsub+0x616>
 8012b0c:	465c      	mov	r4, fp
 8012b0e:	4661      	mov	r1, ip
 8012b10:	4691      	mov	r9, r2
 8012b12:	e72c      	b.n	801296e <__aeabi_dsub+0x23a>
 8012b14:	4fa9      	ldr	r7, [pc, #676]	; (8012dbc <__aeabi_dsub+0x688>)
 8012b16:	42be      	cmp	r6, r7
 8012b18:	d07b      	beq.n	8012c12 <__aeabi_dsub+0x4de>
 8012b1a:	001e      	movs	r6, r3
 8012b1c:	e6f1      	b.n	8012902 <__aeabi_dsub+0x1ce>
 8012b1e:	0010      	movs	r0, r2
 8012b20:	3d1f      	subs	r5, #31
 8012b22:	40e8      	lsrs	r0, r5
 8012b24:	2b20      	cmp	r3, #32
 8012b26:	d003      	beq.n	8012b30 <__aeabi_dsub+0x3fc>
 8012b28:	2140      	movs	r1, #64	; 0x40
 8012b2a:	1acb      	subs	r3, r1, r3
 8012b2c:	409a      	lsls	r2, r3
 8012b2e:	4316      	orrs	r6, r2
 8012b30:	1e73      	subs	r3, r6, #1
 8012b32:	419e      	sbcs	r6, r3
 8012b34:	2207      	movs	r2, #7
 8012b36:	4306      	orrs	r6, r0
 8012b38:	4032      	ands	r2, r6
 8012b3a:	2100      	movs	r1, #0
 8012b3c:	2500      	movs	r5, #0
 8012b3e:	e783      	b.n	8012a48 <__aeabi_dsub+0x314>
 8012b40:	1a16      	subs	r6, r2, r0
 8012b42:	4663      	mov	r3, ip
 8012b44:	42b2      	cmp	r2, r6
 8012b46:	4180      	sbcs	r0, r0
 8012b48:	1a59      	subs	r1, r3, r1
 8012b4a:	4240      	negs	r0, r0
 8012b4c:	1a0b      	subs	r3, r1, r0
 8012b4e:	4698      	mov	r8, r3
 8012b50:	465c      	mov	r4, fp
 8012b52:	e632      	b.n	80127ba <__aeabi_dsub+0x86>
 8012b54:	2e1f      	cmp	r6, #31
 8012b56:	dd00      	ble.n	8012b5a <__aeabi_dsub+0x426>
 8012b58:	e0ab      	b.n	8012cb2 <__aeabi_dsub+0x57e>
 8012b5a:	2720      	movs	r7, #32
 8012b5c:	1bbb      	subs	r3, r7, r6
 8012b5e:	469a      	mov	sl, r3
 8012b60:	4663      	mov	r3, ip
 8012b62:	4657      	mov	r7, sl
 8012b64:	40bb      	lsls	r3, r7
 8012b66:	4699      	mov	r9, r3
 8012b68:	0013      	movs	r3, r2
 8012b6a:	464f      	mov	r7, r9
 8012b6c:	40f3      	lsrs	r3, r6
 8012b6e:	431f      	orrs	r7, r3
 8012b70:	003b      	movs	r3, r7
 8012b72:	4657      	mov	r7, sl
 8012b74:	40ba      	lsls	r2, r7
 8012b76:	1e57      	subs	r7, r2, #1
 8012b78:	41ba      	sbcs	r2, r7
 8012b7a:	4313      	orrs	r3, r2
 8012b7c:	4662      	mov	r2, ip
 8012b7e:	40f2      	lsrs	r2, r6
 8012b80:	1889      	adds	r1, r1, r2
 8012b82:	e698      	b.n	80128b6 <__aeabi_dsub+0x182>
 8012b84:	2720      	movs	r7, #32
 8012b86:	1bbb      	subs	r3, r7, r6
 8012b88:	469a      	mov	sl, r3
 8012b8a:	4663      	mov	r3, ip
 8012b8c:	4657      	mov	r7, sl
 8012b8e:	40bb      	lsls	r3, r7
 8012b90:	4699      	mov	r9, r3
 8012b92:	0013      	movs	r3, r2
 8012b94:	464f      	mov	r7, r9
 8012b96:	40f3      	lsrs	r3, r6
 8012b98:	431f      	orrs	r7, r3
 8012b9a:	003b      	movs	r3, r7
 8012b9c:	4657      	mov	r7, sl
 8012b9e:	40ba      	lsls	r2, r7
 8012ba0:	1e57      	subs	r7, r2, #1
 8012ba2:	41ba      	sbcs	r2, r7
 8012ba4:	4313      	orrs	r3, r2
 8012ba6:	4662      	mov	r2, ip
 8012ba8:	40f2      	lsrs	r2, r6
 8012baa:	1a89      	subs	r1, r1, r2
 8012bac:	e79c      	b.n	8012ae8 <__aeabi_dsub+0x3b4>
 8012bae:	4b83      	ldr	r3, [pc, #524]	; (8012dbc <__aeabi_dsub+0x688>)
 8012bb0:	429f      	cmp	r7, r3
 8012bb2:	d05f      	beq.n	8012c74 <__aeabi_dsub+0x540>
 8012bb4:	2580      	movs	r5, #128	; 0x80
 8012bb6:	042d      	lsls	r5, r5, #16
 8012bb8:	4273      	negs	r3, r6
 8012bba:	4329      	orrs	r1, r5
 8012bbc:	e720      	b.n	8012a00 <__aeabi_dsub+0x2cc>
 8012bbe:	2e00      	cmp	r6, #0
 8012bc0:	d10c      	bne.n	8012bdc <__aeabi_dsub+0x4a8>
 8012bc2:	2f00      	cmp	r7, #0
 8012bc4:	d100      	bne.n	8012bc8 <__aeabi_dsub+0x494>
 8012bc6:	e0d0      	b.n	8012d6a <__aeabi_dsub+0x636>
 8012bc8:	465c      	mov	r4, fp
 8012bca:	4661      	mov	r1, ip
 8012bcc:	4691      	mov	r9, r2
 8012bce:	4d7b      	ldr	r5, [pc, #492]	; (8012dbc <__aeabi_dsub+0x688>)
 8012bd0:	e6cd      	b.n	801296e <__aeabi_dsub+0x23a>
 8012bd2:	4f7a      	ldr	r7, [pc, #488]	; (8012dbc <__aeabi_dsub+0x688>)
 8012bd4:	42be      	cmp	r6, r7
 8012bd6:	d01c      	beq.n	8012c12 <__aeabi_dsub+0x4de>
 8012bd8:	001e      	movs	r6, r3
 8012bda:	e665      	b.n	80128a8 <__aeabi_dsub+0x174>
 8012bdc:	2f00      	cmp	r7, #0
 8012bde:	d018      	beq.n	8012c12 <__aeabi_dsub+0x4de>
 8012be0:	08c0      	lsrs	r0, r0, #3
 8012be2:	074e      	lsls	r6, r1, #29
 8012be4:	4306      	orrs	r6, r0
 8012be6:	2080      	movs	r0, #128	; 0x80
 8012be8:	08c9      	lsrs	r1, r1, #3
 8012bea:	0300      	lsls	r0, r0, #12
 8012bec:	4201      	tst	r1, r0
 8012bee:	d008      	beq.n	8012c02 <__aeabi_dsub+0x4ce>
 8012bf0:	4663      	mov	r3, ip
 8012bf2:	08dc      	lsrs	r4, r3, #3
 8012bf4:	4204      	tst	r4, r0
 8012bf6:	d104      	bne.n	8012c02 <__aeabi_dsub+0x4ce>
 8012bf8:	0021      	movs	r1, r4
 8012bfa:	46da      	mov	sl, fp
 8012bfc:	08d2      	lsrs	r2, r2, #3
 8012bfe:	075e      	lsls	r6, r3, #29
 8012c00:	4316      	orrs	r6, r2
 8012c02:	00f3      	lsls	r3, r6, #3
 8012c04:	4699      	mov	r9, r3
 8012c06:	2401      	movs	r4, #1
 8012c08:	4653      	mov	r3, sl
 8012c0a:	00c9      	lsls	r1, r1, #3
 8012c0c:	0f72      	lsrs	r2, r6, #29
 8012c0e:	4311      	orrs	r1, r2
 8012c10:	401c      	ands	r4, r3
 8012c12:	4d6a      	ldr	r5, [pc, #424]	; (8012dbc <__aeabi_dsub+0x688>)
 8012c14:	e6ab      	b.n	801296e <__aeabi_dsub+0x23a>
 8012c16:	001d      	movs	r5, r3
 8012c18:	2200      	movs	r2, #0
 8012c1a:	2700      	movs	r7, #0
 8012c1c:	e6b4      	b.n	8012988 <__aeabi_dsub+0x254>
 8012c1e:	2d00      	cmp	r5, #0
 8012c20:	d159      	bne.n	8012cd6 <__aeabi_dsub+0x5a2>
 8012c22:	000b      	movs	r3, r1
 8012c24:	4303      	orrs	r3, r0
 8012c26:	d100      	bne.n	8012c2a <__aeabi_dsub+0x4f6>
 8012c28:	e6d6      	b.n	80129d8 <__aeabi_dsub+0x2a4>
 8012c2a:	1c73      	adds	r3, r6, #1
 8012c2c:	d100      	bne.n	8012c30 <__aeabi_dsub+0x4fc>
 8012c2e:	e0b2      	b.n	8012d96 <__aeabi_dsub+0x662>
 8012c30:	4b62      	ldr	r3, [pc, #392]	; (8012dbc <__aeabi_dsub+0x688>)
 8012c32:	429f      	cmp	r7, r3
 8012c34:	d01e      	beq.n	8012c74 <__aeabi_dsub+0x540>
 8012c36:	43f3      	mvns	r3, r6
 8012c38:	2b38      	cmp	r3, #56	; 0x38
 8012c3a:	dc6f      	bgt.n	8012d1c <__aeabi_dsub+0x5e8>
 8012c3c:	2b1f      	cmp	r3, #31
 8012c3e:	dd00      	ble.n	8012c42 <__aeabi_dsub+0x50e>
 8012c40:	e097      	b.n	8012d72 <__aeabi_dsub+0x63e>
 8012c42:	2520      	movs	r5, #32
 8012c44:	000e      	movs	r6, r1
 8012c46:	1aed      	subs	r5, r5, r3
 8012c48:	40ae      	lsls	r6, r5
 8012c4a:	46b0      	mov	r8, r6
 8012c4c:	0006      	movs	r6, r0
 8012c4e:	46aa      	mov	sl, r5
 8012c50:	40de      	lsrs	r6, r3
 8012c52:	4645      	mov	r5, r8
 8012c54:	4335      	orrs	r5, r6
 8012c56:	002e      	movs	r6, r5
 8012c58:	4655      	mov	r5, sl
 8012c5a:	40a8      	lsls	r0, r5
 8012c5c:	40d9      	lsrs	r1, r3
 8012c5e:	1e45      	subs	r5, r0, #1
 8012c60:	41a8      	sbcs	r0, r5
 8012c62:	448c      	add	ip, r1
 8012c64:	4306      	orrs	r6, r0
 8012c66:	18b6      	adds	r6, r6, r2
 8012c68:	4296      	cmp	r6, r2
 8012c6a:	4192      	sbcs	r2, r2
 8012c6c:	4251      	negs	r1, r2
 8012c6e:	4461      	add	r1, ip
 8012c70:	003d      	movs	r5, r7
 8012c72:	e625      	b.n	80128c0 <__aeabi_dsub+0x18c>
 8012c74:	003d      	movs	r5, r7
 8012c76:	4661      	mov	r1, ip
 8012c78:	4691      	mov	r9, r2
 8012c7a:	e678      	b.n	801296e <__aeabi_dsub+0x23a>
 8012c7c:	000b      	movs	r3, r1
 8012c7e:	4303      	orrs	r3, r0
 8012c80:	2d00      	cmp	r5, #0
 8012c82:	d000      	beq.n	8012c86 <__aeabi_dsub+0x552>
 8012c84:	e655      	b.n	8012932 <__aeabi_dsub+0x1fe>
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d0f5      	beq.n	8012c76 <__aeabi_dsub+0x542>
 8012c8a:	4663      	mov	r3, ip
 8012c8c:	4313      	orrs	r3, r2
 8012c8e:	d100      	bne.n	8012c92 <__aeabi_dsub+0x55e>
 8012c90:	e66d      	b.n	801296e <__aeabi_dsub+0x23a>
 8012c92:	1886      	adds	r6, r0, r2
 8012c94:	4286      	cmp	r6, r0
 8012c96:	4180      	sbcs	r0, r0
 8012c98:	4461      	add	r1, ip
 8012c9a:	4240      	negs	r0, r0
 8012c9c:	1809      	adds	r1, r1, r0
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	020b      	lsls	r3, r1, #8
 8012ca2:	d400      	bmi.n	8012ca6 <__aeabi_dsub+0x572>
 8012ca4:	e6d0      	b.n	8012a48 <__aeabi_dsub+0x314>
 8012ca6:	4b46      	ldr	r3, [pc, #280]	; (8012dc0 <__aeabi_dsub+0x68c>)
 8012ca8:	3501      	adds	r5, #1
 8012caa:	4019      	ands	r1, r3
 8012cac:	e5b2      	b.n	8012814 <__aeabi_dsub+0xe0>
 8012cae:	46b1      	mov	r9, r6
 8012cb0:	e65d      	b.n	801296e <__aeabi_dsub+0x23a>
 8012cb2:	0033      	movs	r3, r6
 8012cb4:	4667      	mov	r7, ip
 8012cb6:	3b20      	subs	r3, #32
 8012cb8:	40df      	lsrs	r7, r3
 8012cba:	003b      	movs	r3, r7
 8012cbc:	2e20      	cmp	r6, #32
 8012cbe:	d005      	beq.n	8012ccc <__aeabi_dsub+0x598>
 8012cc0:	2740      	movs	r7, #64	; 0x40
 8012cc2:	1bbf      	subs	r7, r7, r6
 8012cc4:	4666      	mov	r6, ip
 8012cc6:	40be      	lsls	r6, r7
 8012cc8:	4332      	orrs	r2, r6
 8012cca:	4690      	mov	r8, r2
 8012ccc:	4646      	mov	r6, r8
 8012cce:	1e72      	subs	r2, r6, #1
 8012cd0:	4196      	sbcs	r6, r2
 8012cd2:	4333      	orrs	r3, r6
 8012cd4:	e5ef      	b.n	80128b6 <__aeabi_dsub+0x182>
 8012cd6:	4b39      	ldr	r3, [pc, #228]	; (8012dbc <__aeabi_dsub+0x688>)
 8012cd8:	429f      	cmp	r7, r3
 8012cda:	d0cb      	beq.n	8012c74 <__aeabi_dsub+0x540>
 8012cdc:	2580      	movs	r5, #128	; 0x80
 8012cde:	042d      	lsls	r5, r5, #16
 8012ce0:	4273      	negs	r3, r6
 8012ce2:	4329      	orrs	r1, r5
 8012ce4:	e7a8      	b.n	8012c38 <__aeabi_dsub+0x504>
 8012ce6:	4308      	orrs	r0, r1
 8012ce8:	1e41      	subs	r1, r0, #1
 8012cea:	4188      	sbcs	r0, r1
 8012cec:	e6a2      	b.n	8012a34 <__aeabi_dsub+0x300>
 8012cee:	2f00      	cmp	r7, #0
 8012cf0:	d100      	bne.n	8012cf4 <__aeabi_dsub+0x5c0>
 8012cf2:	e63c      	b.n	801296e <__aeabi_dsub+0x23a>
 8012cf4:	4663      	mov	r3, ip
 8012cf6:	1a86      	subs	r6, r0, r2
 8012cf8:	1acf      	subs	r7, r1, r3
 8012cfa:	42b0      	cmp	r0, r6
 8012cfc:	419b      	sbcs	r3, r3
 8012cfe:	425b      	negs	r3, r3
 8012d00:	1afb      	subs	r3, r7, r3
 8012d02:	4698      	mov	r8, r3
 8012d04:	021b      	lsls	r3, r3, #8
 8012d06:	d54e      	bpl.n	8012da6 <__aeabi_dsub+0x672>
 8012d08:	1a16      	subs	r6, r2, r0
 8012d0a:	4663      	mov	r3, ip
 8012d0c:	42b2      	cmp	r2, r6
 8012d0e:	4192      	sbcs	r2, r2
 8012d10:	1a59      	subs	r1, r3, r1
 8012d12:	4252      	negs	r2, r2
 8012d14:	1a89      	subs	r1, r1, r2
 8012d16:	465c      	mov	r4, fp
 8012d18:	2200      	movs	r2, #0
 8012d1a:	e57b      	b.n	8012814 <__aeabi_dsub+0xe0>
 8012d1c:	4301      	orrs	r1, r0
 8012d1e:	000e      	movs	r6, r1
 8012d20:	1e71      	subs	r1, r6, #1
 8012d22:	418e      	sbcs	r6, r1
 8012d24:	e79f      	b.n	8012c66 <__aeabi_dsub+0x532>
 8012d26:	001d      	movs	r5, r3
 8012d28:	000e      	movs	r6, r1
 8012d2a:	3d20      	subs	r5, #32
 8012d2c:	40ee      	lsrs	r6, r5
 8012d2e:	46b0      	mov	r8, r6
 8012d30:	2b20      	cmp	r3, #32
 8012d32:	d004      	beq.n	8012d3e <__aeabi_dsub+0x60a>
 8012d34:	2540      	movs	r5, #64	; 0x40
 8012d36:	1aeb      	subs	r3, r5, r3
 8012d38:	4099      	lsls	r1, r3
 8012d3a:	4308      	orrs	r0, r1
 8012d3c:	4681      	mov	r9, r0
 8012d3e:	4648      	mov	r0, r9
 8012d40:	4643      	mov	r3, r8
 8012d42:	1e41      	subs	r1, r0, #1
 8012d44:	4188      	sbcs	r0, r1
 8012d46:	4318      	orrs	r0, r3
 8012d48:	e674      	b.n	8012a34 <__aeabi_dsub+0x300>
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	2400      	movs	r4, #0
 8012d4e:	e617      	b.n	8012980 <__aeabi_dsub+0x24c>
 8012d50:	1a16      	subs	r6, r2, r0
 8012d52:	4663      	mov	r3, ip
 8012d54:	42b2      	cmp	r2, r6
 8012d56:	4192      	sbcs	r2, r2
 8012d58:	1a59      	subs	r1, r3, r1
 8012d5a:	4252      	negs	r2, r2
 8012d5c:	1a89      	subs	r1, r1, r2
 8012d5e:	003d      	movs	r5, r7
 8012d60:	e525      	b.n	80127ae <__aeabi_dsub+0x7a>
 8012d62:	4661      	mov	r1, ip
 8012d64:	4691      	mov	r9, r2
 8012d66:	4d15      	ldr	r5, [pc, #84]	; (8012dbc <__aeabi_dsub+0x688>)
 8012d68:	e601      	b.n	801296e <__aeabi_dsub+0x23a>
 8012d6a:	2280      	movs	r2, #128	; 0x80
 8012d6c:	2400      	movs	r4, #0
 8012d6e:	0312      	lsls	r2, r2, #12
 8012d70:	e679      	b.n	8012a66 <__aeabi_dsub+0x332>
 8012d72:	001d      	movs	r5, r3
 8012d74:	000e      	movs	r6, r1
 8012d76:	3d20      	subs	r5, #32
 8012d78:	40ee      	lsrs	r6, r5
 8012d7a:	46b0      	mov	r8, r6
 8012d7c:	2b20      	cmp	r3, #32
 8012d7e:	d004      	beq.n	8012d8a <__aeabi_dsub+0x656>
 8012d80:	2540      	movs	r5, #64	; 0x40
 8012d82:	1aeb      	subs	r3, r5, r3
 8012d84:	4099      	lsls	r1, r3
 8012d86:	4308      	orrs	r0, r1
 8012d88:	4681      	mov	r9, r0
 8012d8a:	464e      	mov	r6, r9
 8012d8c:	4643      	mov	r3, r8
 8012d8e:	1e71      	subs	r1, r6, #1
 8012d90:	418e      	sbcs	r6, r1
 8012d92:	431e      	orrs	r6, r3
 8012d94:	e767      	b.n	8012c66 <__aeabi_dsub+0x532>
 8012d96:	1886      	adds	r6, r0, r2
 8012d98:	4296      	cmp	r6, r2
 8012d9a:	419b      	sbcs	r3, r3
 8012d9c:	4461      	add	r1, ip
 8012d9e:	425b      	negs	r3, r3
 8012da0:	18c9      	adds	r1, r1, r3
 8012da2:	003d      	movs	r5, r7
 8012da4:	e58c      	b.n	80128c0 <__aeabi_dsub+0x18c>
 8012da6:	4647      	mov	r7, r8
 8012da8:	4337      	orrs	r7, r6
 8012daa:	d0ce      	beq.n	8012d4a <__aeabi_dsub+0x616>
 8012dac:	2207      	movs	r2, #7
 8012dae:	4641      	mov	r1, r8
 8012db0:	4032      	ands	r2, r6
 8012db2:	e649      	b.n	8012a48 <__aeabi_dsub+0x314>
 8012db4:	2700      	movs	r7, #0
 8012db6:	003a      	movs	r2, r7
 8012db8:	e5e6      	b.n	8012988 <__aeabi_dsub+0x254>
 8012dba:	46c0      	nop			; (mov r8, r8)
 8012dbc:	000007ff 	.word	0x000007ff
 8012dc0:	ff7fffff 	.word	0xff7fffff

08012dc4 <__aeabi_dcmpun>:
 8012dc4:	b570      	push	{r4, r5, r6, lr}
 8012dc6:	4e0c      	ldr	r6, [pc, #48]	; (8012df8 <__aeabi_dcmpun+0x34>)
 8012dc8:	030d      	lsls	r5, r1, #12
 8012dca:	031c      	lsls	r4, r3, #12
 8012dcc:	0049      	lsls	r1, r1, #1
 8012dce:	005b      	lsls	r3, r3, #1
 8012dd0:	0b2d      	lsrs	r5, r5, #12
 8012dd2:	0d49      	lsrs	r1, r1, #21
 8012dd4:	0b24      	lsrs	r4, r4, #12
 8012dd6:	0d5b      	lsrs	r3, r3, #21
 8012dd8:	42b1      	cmp	r1, r6
 8012dda:	d008      	beq.n	8012dee <__aeabi_dcmpun+0x2a>
 8012ddc:	4906      	ldr	r1, [pc, #24]	; (8012df8 <__aeabi_dcmpun+0x34>)
 8012dde:	2000      	movs	r0, #0
 8012de0:	428b      	cmp	r3, r1
 8012de2:	d103      	bne.n	8012dec <__aeabi_dcmpun+0x28>
 8012de4:	4314      	orrs	r4, r2
 8012de6:	0020      	movs	r0, r4
 8012de8:	1e44      	subs	r4, r0, #1
 8012dea:	41a0      	sbcs	r0, r4
 8012dec:	bd70      	pop	{r4, r5, r6, pc}
 8012dee:	4305      	orrs	r5, r0
 8012df0:	2001      	movs	r0, #1
 8012df2:	2d00      	cmp	r5, #0
 8012df4:	d1fa      	bne.n	8012dec <__aeabi_dcmpun+0x28>
 8012df6:	e7f1      	b.n	8012ddc <__aeabi_dcmpun+0x18>
 8012df8:	000007ff 	.word	0x000007ff

08012dfc <__aeabi_d2iz>:
 8012dfc:	b530      	push	{r4, r5, lr}
 8012dfe:	4d14      	ldr	r5, [pc, #80]	; (8012e50 <__aeabi_d2iz+0x54>)
 8012e00:	030a      	lsls	r2, r1, #12
 8012e02:	004b      	lsls	r3, r1, #1
 8012e04:	0b12      	lsrs	r2, r2, #12
 8012e06:	0d5b      	lsrs	r3, r3, #21
 8012e08:	0fc9      	lsrs	r1, r1, #31
 8012e0a:	2400      	movs	r4, #0
 8012e0c:	42ab      	cmp	r3, r5
 8012e0e:	dd11      	ble.n	8012e34 <__aeabi_d2iz+0x38>
 8012e10:	4c10      	ldr	r4, [pc, #64]	; (8012e54 <__aeabi_d2iz+0x58>)
 8012e12:	42a3      	cmp	r3, r4
 8012e14:	dc10      	bgt.n	8012e38 <__aeabi_d2iz+0x3c>
 8012e16:	2480      	movs	r4, #128	; 0x80
 8012e18:	0364      	lsls	r4, r4, #13
 8012e1a:	4322      	orrs	r2, r4
 8012e1c:	4c0e      	ldr	r4, [pc, #56]	; (8012e58 <__aeabi_d2iz+0x5c>)
 8012e1e:	1ae4      	subs	r4, r4, r3
 8012e20:	2c1f      	cmp	r4, #31
 8012e22:	dd0c      	ble.n	8012e3e <__aeabi_d2iz+0x42>
 8012e24:	480d      	ldr	r0, [pc, #52]	; (8012e5c <__aeabi_d2iz+0x60>)
 8012e26:	1ac3      	subs	r3, r0, r3
 8012e28:	40da      	lsrs	r2, r3
 8012e2a:	0013      	movs	r3, r2
 8012e2c:	425c      	negs	r4, r3
 8012e2e:	2900      	cmp	r1, #0
 8012e30:	d100      	bne.n	8012e34 <__aeabi_d2iz+0x38>
 8012e32:	001c      	movs	r4, r3
 8012e34:	0020      	movs	r0, r4
 8012e36:	bd30      	pop	{r4, r5, pc}
 8012e38:	4b09      	ldr	r3, [pc, #36]	; (8012e60 <__aeabi_d2iz+0x64>)
 8012e3a:	18cc      	adds	r4, r1, r3
 8012e3c:	e7fa      	b.n	8012e34 <__aeabi_d2iz+0x38>
 8012e3e:	4d09      	ldr	r5, [pc, #36]	; (8012e64 <__aeabi_d2iz+0x68>)
 8012e40:	40e0      	lsrs	r0, r4
 8012e42:	46ac      	mov	ip, r5
 8012e44:	4463      	add	r3, ip
 8012e46:	409a      	lsls	r2, r3
 8012e48:	0013      	movs	r3, r2
 8012e4a:	4303      	orrs	r3, r0
 8012e4c:	e7ee      	b.n	8012e2c <__aeabi_d2iz+0x30>
 8012e4e:	46c0      	nop			; (mov r8, r8)
 8012e50:	000003fe 	.word	0x000003fe
 8012e54:	0000041d 	.word	0x0000041d
 8012e58:	00000433 	.word	0x00000433
 8012e5c:	00000413 	.word	0x00000413
 8012e60:	7fffffff 	.word	0x7fffffff
 8012e64:	fffffbed 	.word	0xfffffbed

08012e68 <__aeabi_i2d>:
 8012e68:	b570      	push	{r4, r5, r6, lr}
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	d02d      	beq.n	8012eca <__aeabi_i2d+0x62>
 8012e6e:	17c3      	asrs	r3, r0, #31
 8012e70:	18c5      	adds	r5, r0, r3
 8012e72:	405d      	eors	r5, r3
 8012e74:	0fc4      	lsrs	r4, r0, #31
 8012e76:	0028      	movs	r0, r5
 8012e78:	f7fd fdfc 	bl	8010a74 <__clzsi2>
 8012e7c:	4b15      	ldr	r3, [pc, #84]	; (8012ed4 <__aeabi_i2d+0x6c>)
 8012e7e:	1a1b      	subs	r3, r3, r0
 8012e80:	055b      	lsls	r3, r3, #21
 8012e82:	0d5b      	lsrs	r3, r3, #21
 8012e84:	280a      	cmp	r0, #10
 8012e86:	dd15      	ble.n	8012eb4 <__aeabi_i2d+0x4c>
 8012e88:	380b      	subs	r0, #11
 8012e8a:	4085      	lsls	r5, r0
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	032d      	lsls	r5, r5, #12
 8012e90:	0b2d      	lsrs	r5, r5, #12
 8012e92:	2100      	movs	r1, #0
 8012e94:	0010      	movs	r0, r2
 8012e96:	032d      	lsls	r5, r5, #12
 8012e98:	0d0a      	lsrs	r2, r1, #20
 8012e9a:	0b2d      	lsrs	r5, r5, #12
 8012e9c:	0512      	lsls	r2, r2, #20
 8012e9e:	432a      	orrs	r2, r5
 8012ea0:	4d0d      	ldr	r5, [pc, #52]	; (8012ed8 <__aeabi_i2d+0x70>)
 8012ea2:	051b      	lsls	r3, r3, #20
 8012ea4:	402a      	ands	r2, r5
 8012ea6:	4313      	orrs	r3, r2
 8012ea8:	005b      	lsls	r3, r3, #1
 8012eaa:	07e4      	lsls	r4, r4, #31
 8012eac:	085b      	lsrs	r3, r3, #1
 8012eae:	4323      	orrs	r3, r4
 8012eb0:	0019      	movs	r1, r3
 8012eb2:	bd70      	pop	{r4, r5, r6, pc}
 8012eb4:	0002      	movs	r2, r0
 8012eb6:	0029      	movs	r1, r5
 8012eb8:	3215      	adds	r2, #21
 8012eba:	4091      	lsls	r1, r2
 8012ebc:	000a      	movs	r2, r1
 8012ebe:	210b      	movs	r1, #11
 8012ec0:	1a08      	subs	r0, r1, r0
 8012ec2:	40c5      	lsrs	r5, r0
 8012ec4:	032d      	lsls	r5, r5, #12
 8012ec6:	0b2d      	lsrs	r5, r5, #12
 8012ec8:	e7e3      	b.n	8012e92 <__aeabi_i2d+0x2a>
 8012eca:	2400      	movs	r4, #0
 8012ecc:	2300      	movs	r3, #0
 8012ece:	2500      	movs	r5, #0
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	e7de      	b.n	8012e92 <__aeabi_i2d+0x2a>
 8012ed4:	0000041e 	.word	0x0000041e
 8012ed8:	800fffff 	.word	0x800fffff

08012edc <__aeabi_ui2d>:
 8012edc:	b510      	push	{r4, lr}
 8012ede:	1e04      	subs	r4, r0, #0
 8012ee0:	d025      	beq.n	8012f2e <__aeabi_ui2d+0x52>
 8012ee2:	f7fd fdc7 	bl	8010a74 <__clzsi2>
 8012ee6:	4b14      	ldr	r3, [pc, #80]	; (8012f38 <__aeabi_ui2d+0x5c>)
 8012ee8:	1a1b      	subs	r3, r3, r0
 8012eea:	055b      	lsls	r3, r3, #21
 8012eec:	0d5b      	lsrs	r3, r3, #21
 8012eee:	280a      	cmp	r0, #10
 8012ef0:	dd12      	ble.n	8012f18 <__aeabi_ui2d+0x3c>
 8012ef2:	380b      	subs	r0, #11
 8012ef4:	4084      	lsls	r4, r0
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	0324      	lsls	r4, r4, #12
 8012efa:	0b24      	lsrs	r4, r4, #12
 8012efc:	2100      	movs	r1, #0
 8012efe:	0010      	movs	r0, r2
 8012f00:	0324      	lsls	r4, r4, #12
 8012f02:	0d0a      	lsrs	r2, r1, #20
 8012f04:	0b24      	lsrs	r4, r4, #12
 8012f06:	0512      	lsls	r2, r2, #20
 8012f08:	4322      	orrs	r2, r4
 8012f0a:	4c0c      	ldr	r4, [pc, #48]	; (8012f3c <__aeabi_ui2d+0x60>)
 8012f0c:	051b      	lsls	r3, r3, #20
 8012f0e:	4022      	ands	r2, r4
 8012f10:	4313      	orrs	r3, r2
 8012f12:	005b      	lsls	r3, r3, #1
 8012f14:	0859      	lsrs	r1, r3, #1
 8012f16:	bd10      	pop	{r4, pc}
 8012f18:	0002      	movs	r2, r0
 8012f1a:	0021      	movs	r1, r4
 8012f1c:	3215      	adds	r2, #21
 8012f1e:	4091      	lsls	r1, r2
 8012f20:	000a      	movs	r2, r1
 8012f22:	210b      	movs	r1, #11
 8012f24:	1a08      	subs	r0, r1, r0
 8012f26:	40c4      	lsrs	r4, r0
 8012f28:	0324      	lsls	r4, r4, #12
 8012f2a:	0b24      	lsrs	r4, r4, #12
 8012f2c:	e7e6      	b.n	8012efc <__aeabi_ui2d+0x20>
 8012f2e:	2300      	movs	r3, #0
 8012f30:	2400      	movs	r4, #0
 8012f32:	2200      	movs	r2, #0
 8012f34:	e7e2      	b.n	8012efc <__aeabi_ui2d+0x20>
 8012f36:	46c0      	nop			; (mov r8, r8)
 8012f38:	0000041e 	.word	0x0000041e
 8012f3c:	800fffff 	.word	0x800fffff

08012f40 <__aeabi_f2d>:
 8012f40:	0041      	lsls	r1, r0, #1
 8012f42:	0e09      	lsrs	r1, r1, #24
 8012f44:	1c4b      	adds	r3, r1, #1
 8012f46:	b570      	push	{r4, r5, r6, lr}
 8012f48:	b2db      	uxtb	r3, r3
 8012f4a:	0246      	lsls	r6, r0, #9
 8012f4c:	0a75      	lsrs	r5, r6, #9
 8012f4e:	0fc4      	lsrs	r4, r0, #31
 8012f50:	2b01      	cmp	r3, #1
 8012f52:	dd14      	ble.n	8012f7e <__aeabi_f2d+0x3e>
 8012f54:	23e0      	movs	r3, #224	; 0xe0
 8012f56:	009b      	lsls	r3, r3, #2
 8012f58:	076d      	lsls	r5, r5, #29
 8012f5a:	0b36      	lsrs	r6, r6, #12
 8012f5c:	18cb      	adds	r3, r1, r3
 8012f5e:	2100      	movs	r1, #0
 8012f60:	0d0a      	lsrs	r2, r1, #20
 8012f62:	0028      	movs	r0, r5
 8012f64:	0512      	lsls	r2, r2, #20
 8012f66:	4d1c      	ldr	r5, [pc, #112]	; (8012fd8 <__aeabi_f2d+0x98>)
 8012f68:	4332      	orrs	r2, r6
 8012f6a:	055b      	lsls	r3, r3, #21
 8012f6c:	402a      	ands	r2, r5
 8012f6e:	085b      	lsrs	r3, r3, #1
 8012f70:	4313      	orrs	r3, r2
 8012f72:	005b      	lsls	r3, r3, #1
 8012f74:	07e4      	lsls	r4, r4, #31
 8012f76:	085b      	lsrs	r3, r3, #1
 8012f78:	4323      	orrs	r3, r4
 8012f7a:	0019      	movs	r1, r3
 8012f7c:	bd70      	pop	{r4, r5, r6, pc}
 8012f7e:	2900      	cmp	r1, #0
 8012f80:	d114      	bne.n	8012fac <__aeabi_f2d+0x6c>
 8012f82:	2d00      	cmp	r5, #0
 8012f84:	d01e      	beq.n	8012fc4 <__aeabi_f2d+0x84>
 8012f86:	0028      	movs	r0, r5
 8012f88:	f7fd fd74 	bl	8010a74 <__clzsi2>
 8012f8c:	280a      	cmp	r0, #10
 8012f8e:	dc1c      	bgt.n	8012fca <__aeabi_f2d+0x8a>
 8012f90:	230b      	movs	r3, #11
 8012f92:	002a      	movs	r2, r5
 8012f94:	1a1b      	subs	r3, r3, r0
 8012f96:	40da      	lsrs	r2, r3
 8012f98:	0003      	movs	r3, r0
 8012f9a:	3315      	adds	r3, #21
 8012f9c:	409d      	lsls	r5, r3
 8012f9e:	4b0f      	ldr	r3, [pc, #60]	; (8012fdc <__aeabi_f2d+0x9c>)
 8012fa0:	0312      	lsls	r2, r2, #12
 8012fa2:	1a1b      	subs	r3, r3, r0
 8012fa4:	055b      	lsls	r3, r3, #21
 8012fa6:	0b16      	lsrs	r6, r2, #12
 8012fa8:	0d5b      	lsrs	r3, r3, #21
 8012faa:	e7d8      	b.n	8012f5e <__aeabi_f2d+0x1e>
 8012fac:	2d00      	cmp	r5, #0
 8012fae:	d006      	beq.n	8012fbe <__aeabi_f2d+0x7e>
 8012fb0:	0b32      	lsrs	r2, r6, #12
 8012fb2:	2680      	movs	r6, #128	; 0x80
 8012fb4:	0336      	lsls	r6, r6, #12
 8012fb6:	076d      	lsls	r5, r5, #29
 8012fb8:	4316      	orrs	r6, r2
 8012fba:	4b09      	ldr	r3, [pc, #36]	; (8012fe0 <__aeabi_f2d+0xa0>)
 8012fbc:	e7cf      	b.n	8012f5e <__aeabi_f2d+0x1e>
 8012fbe:	4b08      	ldr	r3, [pc, #32]	; (8012fe0 <__aeabi_f2d+0xa0>)
 8012fc0:	2600      	movs	r6, #0
 8012fc2:	e7cc      	b.n	8012f5e <__aeabi_f2d+0x1e>
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	2600      	movs	r6, #0
 8012fc8:	e7c9      	b.n	8012f5e <__aeabi_f2d+0x1e>
 8012fca:	0003      	movs	r3, r0
 8012fcc:	002a      	movs	r2, r5
 8012fce:	3b0b      	subs	r3, #11
 8012fd0:	409a      	lsls	r2, r3
 8012fd2:	2500      	movs	r5, #0
 8012fd4:	e7e3      	b.n	8012f9e <__aeabi_f2d+0x5e>
 8012fd6:	46c0      	nop			; (mov r8, r8)
 8012fd8:	800fffff 	.word	0x800fffff
 8012fdc:	00000389 	.word	0x00000389
 8012fe0:	000007ff 	.word	0x000007ff

08012fe4 <__aeabi_d2f>:
 8012fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fe6:	004c      	lsls	r4, r1, #1
 8012fe8:	0d64      	lsrs	r4, r4, #21
 8012fea:	030b      	lsls	r3, r1, #12
 8012fec:	1c62      	adds	r2, r4, #1
 8012fee:	0a5b      	lsrs	r3, r3, #9
 8012ff0:	0f46      	lsrs	r6, r0, #29
 8012ff2:	0552      	lsls	r2, r2, #21
 8012ff4:	0fc9      	lsrs	r1, r1, #31
 8012ff6:	431e      	orrs	r6, r3
 8012ff8:	00c5      	lsls	r5, r0, #3
 8012ffa:	0d52      	lsrs	r2, r2, #21
 8012ffc:	2a01      	cmp	r2, #1
 8012ffe:	dd29      	ble.n	8013054 <__aeabi_d2f+0x70>
 8013000:	4b37      	ldr	r3, [pc, #220]	; (80130e0 <__aeabi_d2f+0xfc>)
 8013002:	18e7      	adds	r7, r4, r3
 8013004:	2ffe      	cmp	r7, #254	; 0xfe
 8013006:	dc1c      	bgt.n	8013042 <__aeabi_d2f+0x5e>
 8013008:	2f00      	cmp	r7, #0
 801300a:	dd3b      	ble.n	8013084 <__aeabi_d2f+0xa0>
 801300c:	0180      	lsls	r0, r0, #6
 801300e:	1e43      	subs	r3, r0, #1
 8013010:	4198      	sbcs	r0, r3
 8013012:	2207      	movs	r2, #7
 8013014:	00f3      	lsls	r3, r6, #3
 8013016:	0f6d      	lsrs	r5, r5, #29
 8013018:	4303      	orrs	r3, r0
 801301a:	432b      	orrs	r3, r5
 801301c:	401a      	ands	r2, r3
 801301e:	2a00      	cmp	r2, #0
 8013020:	d004      	beq.n	801302c <__aeabi_d2f+0x48>
 8013022:	220f      	movs	r2, #15
 8013024:	401a      	ands	r2, r3
 8013026:	2a04      	cmp	r2, #4
 8013028:	d000      	beq.n	801302c <__aeabi_d2f+0x48>
 801302a:	3304      	adds	r3, #4
 801302c:	2280      	movs	r2, #128	; 0x80
 801302e:	04d2      	lsls	r2, r2, #19
 8013030:	401a      	ands	r2, r3
 8013032:	d024      	beq.n	801307e <__aeabi_d2f+0x9a>
 8013034:	3701      	adds	r7, #1
 8013036:	b2fa      	uxtb	r2, r7
 8013038:	2fff      	cmp	r7, #255	; 0xff
 801303a:	d002      	beq.n	8013042 <__aeabi_d2f+0x5e>
 801303c:	019b      	lsls	r3, r3, #6
 801303e:	0a58      	lsrs	r0, r3, #9
 8013040:	e001      	b.n	8013046 <__aeabi_d2f+0x62>
 8013042:	22ff      	movs	r2, #255	; 0xff
 8013044:	2000      	movs	r0, #0
 8013046:	0240      	lsls	r0, r0, #9
 8013048:	05d2      	lsls	r2, r2, #23
 801304a:	0a40      	lsrs	r0, r0, #9
 801304c:	07c9      	lsls	r1, r1, #31
 801304e:	4310      	orrs	r0, r2
 8013050:	4308      	orrs	r0, r1
 8013052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013054:	4335      	orrs	r5, r6
 8013056:	2c00      	cmp	r4, #0
 8013058:	d104      	bne.n	8013064 <__aeabi_d2f+0x80>
 801305a:	2d00      	cmp	r5, #0
 801305c:	d10a      	bne.n	8013074 <__aeabi_d2f+0x90>
 801305e:	2200      	movs	r2, #0
 8013060:	2000      	movs	r0, #0
 8013062:	e7f0      	b.n	8013046 <__aeabi_d2f+0x62>
 8013064:	2d00      	cmp	r5, #0
 8013066:	d0ec      	beq.n	8013042 <__aeabi_d2f+0x5e>
 8013068:	2080      	movs	r0, #128	; 0x80
 801306a:	03c0      	lsls	r0, r0, #15
 801306c:	4330      	orrs	r0, r6
 801306e:	22ff      	movs	r2, #255	; 0xff
 8013070:	e7e9      	b.n	8013046 <__aeabi_d2f+0x62>
 8013072:	2400      	movs	r4, #0
 8013074:	2300      	movs	r3, #0
 8013076:	025b      	lsls	r3, r3, #9
 8013078:	0a58      	lsrs	r0, r3, #9
 801307a:	b2e2      	uxtb	r2, r4
 801307c:	e7e3      	b.n	8013046 <__aeabi_d2f+0x62>
 801307e:	08db      	lsrs	r3, r3, #3
 8013080:	003c      	movs	r4, r7
 8013082:	e7f8      	b.n	8013076 <__aeabi_d2f+0x92>
 8013084:	003b      	movs	r3, r7
 8013086:	3317      	adds	r3, #23
 8013088:	dbf3      	blt.n	8013072 <__aeabi_d2f+0x8e>
 801308a:	2380      	movs	r3, #128	; 0x80
 801308c:	041b      	lsls	r3, r3, #16
 801308e:	4333      	orrs	r3, r6
 8013090:	261e      	movs	r6, #30
 8013092:	1bf6      	subs	r6, r6, r7
 8013094:	2e1f      	cmp	r6, #31
 8013096:	dd14      	ble.n	80130c2 <__aeabi_d2f+0xde>
 8013098:	2202      	movs	r2, #2
 801309a:	4252      	negs	r2, r2
 801309c:	1bd7      	subs	r7, r2, r7
 801309e:	001a      	movs	r2, r3
 80130a0:	40fa      	lsrs	r2, r7
 80130a2:	0017      	movs	r7, r2
 80130a4:	2e20      	cmp	r6, #32
 80130a6:	d004      	beq.n	80130b2 <__aeabi_d2f+0xce>
 80130a8:	4a0e      	ldr	r2, [pc, #56]	; (80130e4 <__aeabi_d2f+0x100>)
 80130aa:	4694      	mov	ip, r2
 80130ac:	4464      	add	r4, ip
 80130ae:	40a3      	lsls	r3, r4
 80130b0:	431d      	orrs	r5, r3
 80130b2:	002b      	movs	r3, r5
 80130b4:	1e5d      	subs	r5, r3, #1
 80130b6:	41ab      	sbcs	r3, r5
 80130b8:	2207      	movs	r2, #7
 80130ba:	433b      	orrs	r3, r7
 80130bc:	401a      	ands	r2, r3
 80130be:	2700      	movs	r7, #0
 80130c0:	e7ad      	b.n	801301e <__aeabi_d2f+0x3a>
 80130c2:	4a09      	ldr	r2, [pc, #36]	; (80130e8 <__aeabi_d2f+0x104>)
 80130c4:	0028      	movs	r0, r5
 80130c6:	18a2      	adds	r2, r4, r2
 80130c8:	4095      	lsls	r5, r2
 80130ca:	4093      	lsls	r3, r2
 80130cc:	1e6c      	subs	r4, r5, #1
 80130ce:	41a5      	sbcs	r5, r4
 80130d0:	40f0      	lsrs	r0, r6
 80130d2:	2207      	movs	r2, #7
 80130d4:	432b      	orrs	r3, r5
 80130d6:	4303      	orrs	r3, r0
 80130d8:	401a      	ands	r2, r3
 80130da:	2700      	movs	r7, #0
 80130dc:	e79f      	b.n	801301e <__aeabi_d2f+0x3a>
 80130de:	46c0      	nop			; (mov r8, r8)
 80130e0:	fffffc80 	.word	0xfffffc80
 80130e4:	fffffca2 	.word	0xfffffca2
 80130e8:	fffffc82 	.word	0xfffffc82

080130ec <__clzdi2>:
 80130ec:	b510      	push	{r4, lr}
 80130ee:	2900      	cmp	r1, #0
 80130f0:	d103      	bne.n	80130fa <__clzdi2+0xe>
 80130f2:	f7fd fcbf 	bl	8010a74 <__clzsi2>
 80130f6:	3020      	adds	r0, #32
 80130f8:	e002      	b.n	8013100 <__clzdi2+0x14>
 80130fa:	1c08      	adds	r0, r1, #0
 80130fc:	f7fd fcba 	bl	8010a74 <__clzsi2>
 8013100:	bd10      	pop	{r4, pc}
 8013102:	46c0      	nop			; (mov r8, r8)

08013104 <strlen>:
 8013104:	2300      	movs	r3, #0
 8013106:	5cc2      	ldrb	r2, [r0, r3]
 8013108:	3301      	adds	r3, #1
 801310a:	2a00      	cmp	r2, #0
 801310c:	d1fb      	bne.n	8013106 <strlen+0x2>
 801310e:	1e58      	subs	r0, r3, #1
 8013110:	4770      	bx	lr
	...

08013114 <_write>:
extern UART_HandleTypeDef DEBUG_UART_HANDLE;

int _write(int file, char *ptr, int len);

int _write(int file, char *ptr, int len)
{
 8013114:	b510      	push	{r4, lr}
 8013116:	0014      	movs	r4, r2
	(void)file;
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t*)ptr, len, 0xFFFF);
 8013118:	4b03      	ldr	r3, [pc, #12]	; (8013128 <_write+0x14>)
 801311a:	b292      	uxth	r2, r2
 801311c:	4803      	ldr	r0, [pc, #12]	; (801312c <_write+0x18>)
 801311e:	f7f9 fcfd 	bl	800cb1c <HAL_UART_Transmit>
	return len;
}
 8013122:	0020      	movs	r0, r4
 8013124:	bd10      	pop	{r4, pc}
 8013126:	46c0      	nop			; (mov r8, r8)
 8013128:	0000ffff 	.word	0x0000ffff
 801312c:	20000638 	.word	0x20000638

08013130 <Reset_Handler>:
 8013130:	480d      	ldr	r0, [pc, #52]	; (8013168 <LoopForever+0x2>)
 8013132:	4685      	mov	sp, r0
 8013134:	2100      	movs	r1, #0
 8013136:	e003      	b.n	8013140 <LoopCopyDataInit>

08013138 <CopyDataInit>:
 8013138:	4b0c      	ldr	r3, [pc, #48]	; (801316c <LoopForever+0x6>)
 801313a:	585b      	ldr	r3, [r3, r1]
 801313c:	5043      	str	r3, [r0, r1]
 801313e:	3104      	adds	r1, #4

08013140 <LoopCopyDataInit>:
 8013140:	480b      	ldr	r0, [pc, #44]	; (8013170 <LoopForever+0xa>)
 8013142:	4b0c      	ldr	r3, [pc, #48]	; (8013174 <LoopForever+0xe>)
 8013144:	1842      	adds	r2, r0, r1
 8013146:	429a      	cmp	r2, r3
 8013148:	d3f6      	bcc.n	8013138 <CopyDataInit>
 801314a:	4a0b      	ldr	r2, [pc, #44]	; (8013178 <LoopForever+0x12>)
 801314c:	e002      	b.n	8013154 <LoopFillZerobss>

0801314e <FillZerobss>:
 801314e:	2300      	movs	r3, #0
 8013150:	6013      	str	r3, [r2, #0]
 8013152:	3204      	adds	r2, #4

08013154 <LoopFillZerobss>:
 8013154:	4b09      	ldr	r3, [pc, #36]	; (801317c <LoopForever+0x16>)
 8013156:	429a      	cmp	r2, r3
 8013158:	d3f9      	bcc.n	801314e <FillZerobss>
 801315a:	f7f8 f932 	bl	800b3c2 <SystemInit>
 801315e:	f000 fa31 	bl	80135c4 <__libc_init_array>
 8013162:	f7f8 fc0b 	bl	800b97c <main>

08013166 <LoopForever>:
 8013166:	e7fe      	b.n	8013166 <LoopForever>
 8013168:	20009000 	.word	0x20009000
 801316c:	0801ef18 	.word	0x0801ef18
 8013170:	20000000 	.word	0x20000000
 8013174:	20000070 	.word	0x20000070
 8013178:	20000070 	.word	0x20000070
 801317c:	200006c8 	.word	0x200006c8

08013180 <ADC1_COMP_IRQHandler>:
 8013180:	e7fe      	b.n	8013180 <ADC1_COMP_IRQHandler>
	...

08013184 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013184:	4b0b      	ldr	r3, [pc, #44]	; (80131b4 <_sbrk+0x30>)
 8013186:	490c      	ldr	r1, [pc, #48]	; (80131b8 <_sbrk+0x34>)
{
 8013188:	0002      	movs	r2, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801318a:	1ac9      	subs	r1, r1, r3
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801318c:	4b0b      	ldr	r3, [pc, #44]	; (80131bc <_sbrk+0x38>)
{
 801318e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8013190:	6818      	ldr	r0, [r3, #0]
 8013192:	2800      	cmp	r0, #0
 8013194:	d101      	bne.n	801319a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8013196:	480a      	ldr	r0, [pc, #40]	; (80131c0 <_sbrk+0x3c>)
 8013198:	6018      	str	r0, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801319a:	6818      	ldr	r0, [r3, #0]
 801319c:	1882      	adds	r2, r0, r2
 801319e:	428a      	cmp	r2, r1
 80131a0:	d906      	bls.n	80131b0 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80131a2:	f000 f869 	bl	8013278 <__errno>
 80131a6:	230c      	movs	r3, #12
 80131a8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80131aa:	2001      	movs	r0, #1
 80131ac:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80131ae:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80131b0:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80131b2:	e7fc      	b.n	80131ae <_sbrk+0x2a>
 80131b4:	00001400 	.word	0x00001400
 80131b8:	20009000 	.word	0x20009000
 80131bc:	2000062c 	.word	0x2000062c
 80131c0:	200006c8 	.word	0x200006c8

080131c4 <__ieee754_sqrtf>:
 80131c4:	492a      	ldr	r1, [pc, #168]	; (8013270 <__ieee754_sqrtf+0xac>)
 80131c6:	0043      	lsls	r3, r0, #1
 80131c8:	b570      	push	{r4, r5, r6, lr}
 80131ca:	0002      	movs	r2, r0
 80131cc:	1c04      	adds	r4, r0, #0
 80131ce:	085b      	lsrs	r3, r3, #1
 80131d0:	428b      	cmp	r3, r1
 80131d2:	d83b      	bhi.n	801324c <__ieee754_sqrtf+0x88>
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d038      	beq.n	801324a <__ieee754_sqrtf+0x86>
 80131d8:	2800      	cmp	r0, #0
 80131da:	db3e      	blt.n	801325a <__ieee754_sqrtf+0x96>
 80131dc:	4925      	ldr	r1, [pc, #148]	; (8013274 <__ieee754_sqrtf+0xb0>)
 80131de:	15c6      	asrs	r6, r0, #23
 80131e0:	428b      	cmp	r3, r1
 80131e2:	d80b      	bhi.n	80131fc <__ieee754_sqrtf+0x38>
 80131e4:	2080      	movs	r0, #128	; 0x80
 80131e6:	0400      	lsls	r0, r0, #16
 80131e8:	4220      	tst	r0, r4
 80131ea:	d13d      	bne.n	8013268 <__ieee754_sqrtf+0xa4>
 80131ec:	2300      	movs	r3, #0
 80131ee:	e000      	b.n	80131f2 <__ieee754_sqrtf+0x2e>
 80131f0:	000b      	movs	r3, r1
 80131f2:	0052      	lsls	r2, r2, #1
 80131f4:	1c59      	adds	r1, r3, #1
 80131f6:	4202      	tst	r2, r0
 80131f8:	d0fa      	beq.n	80131f0 <__ieee754_sqrtf+0x2c>
 80131fa:	1af6      	subs	r6, r6, r3
 80131fc:	2380      	movs	r3, #128	; 0x80
 80131fe:	0252      	lsls	r2, r2, #9
 8013200:	041b      	lsls	r3, r3, #16
 8013202:	0a52      	lsrs	r2, r2, #9
 8013204:	431a      	orrs	r2, r3
 8013206:	3e7f      	subs	r6, #127	; 0x7f
 8013208:	0053      	lsls	r3, r2, #1
 801320a:	07f1      	lsls	r1, r6, #31
 801320c:	d500      	bpl.n	8013210 <__ieee754_sqrtf+0x4c>
 801320e:	0093      	lsls	r3, r2, #2
 8013210:	2280      	movs	r2, #128	; 0x80
 8013212:	1070      	asrs	r0, r6, #1
 8013214:	2119      	movs	r1, #25
 8013216:	2600      	movs	r6, #0
 8013218:	2500      	movs	r5, #0
 801321a:	0452      	lsls	r2, r2, #17
 801321c:	18ac      	adds	r4, r5, r2
 801321e:	429c      	cmp	r4, r3
 8013220:	dc02      	bgt.n	8013228 <__ieee754_sqrtf+0x64>
 8013222:	18a5      	adds	r5, r4, r2
 8013224:	1b1b      	subs	r3, r3, r4
 8013226:	18b6      	adds	r6, r6, r2
 8013228:	3901      	subs	r1, #1
 801322a:	005b      	lsls	r3, r3, #1
 801322c:	0852      	lsrs	r2, r2, #1
 801322e:	2900      	cmp	r1, #0
 8013230:	d1f4      	bne.n	801321c <__ieee754_sqrtf+0x58>
 8013232:	2b00      	cmp	r3, #0
 8013234:	d002      	beq.n	801323c <__ieee754_sqrtf+0x78>
 8013236:	2301      	movs	r3, #1
 8013238:	3601      	adds	r6, #1
 801323a:	439e      	bics	r6, r3
 801323c:	23fc      	movs	r3, #252	; 0xfc
 801323e:	059b      	lsls	r3, r3, #22
 8013240:	469c      	mov	ip, r3
 8013242:	1076      	asrs	r6, r6, #1
 8013244:	4466      	add	r6, ip
 8013246:	05c0      	lsls	r0, r0, #23
 8013248:	1980      	adds	r0, r0, r6
 801324a:	bd70      	pop	{r4, r5, r6, pc}
 801324c:	1c01      	adds	r1, r0, #0
 801324e:	f7fd f91b 	bl	8010488 <__aeabi_fmul>
 8013252:	1c21      	adds	r1, r4, #0
 8013254:	f7fc fe6c 	bl	800ff30 <__aeabi_fadd>
 8013258:	e7f7      	b.n	801324a <__ieee754_sqrtf+0x86>
 801325a:	1c01      	adds	r1, r0, #0
 801325c:	f7fd fa46 	bl	80106ec <__aeabi_fsub>
 8013260:	1c01      	adds	r1, r0, #0
 8013262:	f7fc ffff 	bl	8010264 <__aeabi_fdiv>
 8013266:	e7f0      	b.n	801324a <__ieee754_sqrtf+0x86>
 8013268:	2301      	movs	r3, #1
 801326a:	425b      	negs	r3, r3
 801326c:	e7c5      	b.n	80131fa <__ieee754_sqrtf+0x36>
 801326e:	46c0      	nop			; (mov r8, r8)
 8013270:	7f7fffff 	.word	0x7f7fffff
 8013274:	007fffff 	.word	0x007fffff

08013278 <__errno>:
 8013278:	4b01      	ldr	r3, [pc, #4]	; (8013280 <__errno+0x8>)
 801327a:	6818      	ldr	r0, [r3, #0]
 801327c:	4770      	bx	lr
 801327e:	46c0      	nop			; (mov r8, r8)
 8013280:	20000008 	.word	0x20000008

08013284 <__sflush_r>:
 8013284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013286:	898a      	ldrh	r2, [r1, #12]
 8013288:	0005      	movs	r5, r0
 801328a:	000c      	movs	r4, r1
 801328c:	0713      	lsls	r3, r2, #28
 801328e:	d460      	bmi.n	8013352 <__sflush_r+0xce>
 8013290:	684b      	ldr	r3, [r1, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	dc04      	bgt.n	80132a0 <__sflush_r+0x1c>
 8013296:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013298:	2b00      	cmp	r3, #0
 801329a:	dc01      	bgt.n	80132a0 <__sflush_r+0x1c>
 801329c:	2000      	movs	r0, #0
 801329e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80132a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80132a2:	2f00      	cmp	r7, #0
 80132a4:	d0fa      	beq.n	801329c <__sflush_r+0x18>
 80132a6:	2300      	movs	r3, #0
 80132a8:	682e      	ldr	r6, [r5, #0]
 80132aa:	602b      	str	r3, [r5, #0]
 80132ac:	2380      	movs	r3, #128	; 0x80
 80132ae:	015b      	lsls	r3, r3, #5
 80132b0:	6a21      	ldr	r1, [r4, #32]
 80132b2:	401a      	ands	r2, r3
 80132b4:	d034      	beq.n	8013320 <__sflush_r+0x9c>
 80132b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80132b8:	89a3      	ldrh	r3, [r4, #12]
 80132ba:	075b      	lsls	r3, r3, #29
 80132bc:	d506      	bpl.n	80132cc <__sflush_r+0x48>
 80132be:	6863      	ldr	r3, [r4, #4]
 80132c0:	1ac0      	subs	r0, r0, r3
 80132c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d001      	beq.n	80132cc <__sflush_r+0x48>
 80132c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80132ca:	1ac0      	subs	r0, r0, r3
 80132cc:	0002      	movs	r2, r0
 80132ce:	6a21      	ldr	r1, [r4, #32]
 80132d0:	2300      	movs	r3, #0
 80132d2:	0028      	movs	r0, r5
 80132d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80132d6:	47b8      	blx	r7
 80132d8:	89a1      	ldrh	r1, [r4, #12]
 80132da:	1c43      	adds	r3, r0, #1
 80132dc:	d106      	bne.n	80132ec <__sflush_r+0x68>
 80132de:	682b      	ldr	r3, [r5, #0]
 80132e0:	2b1d      	cmp	r3, #29
 80132e2:	d830      	bhi.n	8013346 <__sflush_r+0xc2>
 80132e4:	4a2b      	ldr	r2, [pc, #172]	; (8013394 <__sflush_r+0x110>)
 80132e6:	40da      	lsrs	r2, r3
 80132e8:	07d3      	lsls	r3, r2, #31
 80132ea:	d52c      	bpl.n	8013346 <__sflush_r+0xc2>
 80132ec:	2300      	movs	r3, #0
 80132ee:	6063      	str	r3, [r4, #4]
 80132f0:	6923      	ldr	r3, [r4, #16]
 80132f2:	6023      	str	r3, [r4, #0]
 80132f4:	04cb      	lsls	r3, r1, #19
 80132f6:	d505      	bpl.n	8013304 <__sflush_r+0x80>
 80132f8:	1c43      	adds	r3, r0, #1
 80132fa:	d102      	bne.n	8013302 <__sflush_r+0x7e>
 80132fc:	682b      	ldr	r3, [r5, #0]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d100      	bne.n	8013304 <__sflush_r+0x80>
 8013302:	6560      	str	r0, [r4, #84]	; 0x54
 8013304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013306:	602e      	str	r6, [r5, #0]
 8013308:	2900      	cmp	r1, #0
 801330a:	d0c7      	beq.n	801329c <__sflush_r+0x18>
 801330c:	0023      	movs	r3, r4
 801330e:	3344      	adds	r3, #68	; 0x44
 8013310:	4299      	cmp	r1, r3
 8013312:	d002      	beq.n	801331a <__sflush_r+0x96>
 8013314:	0028      	movs	r0, r5
 8013316:	f000 f981 	bl	801361c <_free_r>
 801331a:	2000      	movs	r0, #0
 801331c:	6360      	str	r0, [r4, #52]	; 0x34
 801331e:	e7be      	b.n	801329e <__sflush_r+0x1a>
 8013320:	2301      	movs	r3, #1
 8013322:	0028      	movs	r0, r5
 8013324:	47b8      	blx	r7
 8013326:	1c43      	adds	r3, r0, #1
 8013328:	d1c6      	bne.n	80132b8 <__sflush_r+0x34>
 801332a:	682b      	ldr	r3, [r5, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d0c3      	beq.n	80132b8 <__sflush_r+0x34>
 8013330:	2b1d      	cmp	r3, #29
 8013332:	d001      	beq.n	8013338 <__sflush_r+0xb4>
 8013334:	2b16      	cmp	r3, #22
 8013336:	d101      	bne.n	801333c <__sflush_r+0xb8>
 8013338:	602e      	str	r6, [r5, #0]
 801333a:	e7af      	b.n	801329c <__sflush_r+0x18>
 801333c:	2340      	movs	r3, #64	; 0x40
 801333e:	89a2      	ldrh	r2, [r4, #12]
 8013340:	4313      	orrs	r3, r2
 8013342:	81a3      	strh	r3, [r4, #12]
 8013344:	e7ab      	b.n	801329e <__sflush_r+0x1a>
 8013346:	2340      	movs	r3, #64	; 0x40
 8013348:	430b      	orrs	r3, r1
 801334a:	2001      	movs	r0, #1
 801334c:	81a3      	strh	r3, [r4, #12]
 801334e:	4240      	negs	r0, r0
 8013350:	e7a5      	b.n	801329e <__sflush_r+0x1a>
 8013352:	690f      	ldr	r7, [r1, #16]
 8013354:	2f00      	cmp	r7, #0
 8013356:	d0a1      	beq.n	801329c <__sflush_r+0x18>
 8013358:	680b      	ldr	r3, [r1, #0]
 801335a:	600f      	str	r7, [r1, #0]
 801335c:	1bdb      	subs	r3, r3, r7
 801335e:	9301      	str	r3, [sp, #4]
 8013360:	2300      	movs	r3, #0
 8013362:	0792      	lsls	r2, r2, #30
 8013364:	d100      	bne.n	8013368 <__sflush_r+0xe4>
 8013366:	694b      	ldr	r3, [r1, #20]
 8013368:	60a3      	str	r3, [r4, #8]
 801336a:	9b01      	ldr	r3, [sp, #4]
 801336c:	2b00      	cmp	r3, #0
 801336e:	dc00      	bgt.n	8013372 <__sflush_r+0xee>
 8013370:	e794      	b.n	801329c <__sflush_r+0x18>
 8013372:	9b01      	ldr	r3, [sp, #4]
 8013374:	003a      	movs	r2, r7
 8013376:	6a21      	ldr	r1, [r4, #32]
 8013378:	0028      	movs	r0, r5
 801337a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801337c:	47b0      	blx	r6
 801337e:	2800      	cmp	r0, #0
 8013380:	dc03      	bgt.n	801338a <__sflush_r+0x106>
 8013382:	2340      	movs	r3, #64	; 0x40
 8013384:	89a2      	ldrh	r2, [r4, #12]
 8013386:	4313      	orrs	r3, r2
 8013388:	e7df      	b.n	801334a <__sflush_r+0xc6>
 801338a:	9b01      	ldr	r3, [sp, #4]
 801338c:	183f      	adds	r7, r7, r0
 801338e:	1a1b      	subs	r3, r3, r0
 8013390:	9301      	str	r3, [sp, #4]
 8013392:	e7ea      	b.n	801336a <__sflush_r+0xe6>
 8013394:	20400001 	.word	0x20400001

08013398 <_fflush_r>:
 8013398:	690b      	ldr	r3, [r1, #16]
 801339a:	b570      	push	{r4, r5, r6, lr}
 801339c:	0005      	movs	r5, r0
 801339e:	000c      	movs	r4, r1
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d101      	bne.n	80133a8 <_fflush_r+0x10>
 80133a4:	2000      	movs	r0, #0
 80133a6:	bd70      	pop	{r4, r5, r6, pc}
 80133a8:	2800      	cmp	r0, #0
 80133aa:	d004      	beq.n	80133b6 <_fflush_r+0x1e>
 80133ac:	6983      	ldr	r3, [r0, #24]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d101      	bne.n	80133b6 <_fflush_r+0x1e>
 80133b2:	f000 f873 	bl	801349c <__sinit>
 80133b6:	4b0b      	ldr	r3, [pc, #44]	; (80133e4 <_fflush_r+0x4c>)
 80133b8:	429c      	cmp	r4, r3
 80133ba:	d109      	bne.n	80133d0 <_fflush_r+0x38>
 80133bc:	686c      	ldr	r4, [r5, #4]
 80133be:	220c      	movs	r2, #12
 80133c0:	5ea3      	ldrsh	r3, [r4, r2]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d0ee      	beq.n	80133a4 <_fflush_r+0xc>
 80133c6:	0021      	movs	r1, r4
 80133c8:	0028      	movs	r0, r5
 80133ca:	f7ff ff5b 	bl	8013284 <__sflush_r>
 80133ce:	e7ea      	b.n	80133a6 <_fflush_r+0xe>
 80133d0:	4b05      	ldr	r3, [pc, #20]	; (80133e8 <_fflush_r+0x50>)
 80133d2:	429c      	cmp	r4, r3
 80133d4:	d101      	bne.n	80133da <_fflush_r+0x42>
 80133d6:	68ac      	ldr	r4, [r5, #8]
 80133d8:	e7f1      	b.n	80133be <_fflush_r+0x26>
 80133da:	4b04      	ldr	r3, [pc, #16]	; (80133ec <_fflush_r+0x54>)
 80133dc:	429c      	cmp	r4, r3
 80133de:	d1ee      	bne.n	80133be <_fflush_r+0x26>
 80133e0:	68ec      	ldr	r4, [r5, #12]
 80133e2:	e7ec      	b.n	80133be <_fflush_r+0x26>
 80133e4:	0801ecbc 	.word	0x0801ecbc
 80133e8:	0801ecdc 	.word	0x0801ecdc
 80133ec:	0801ec9c 	.word	0x0801ec9c

080133f0 <fflush>:
 80133f0:	b510      	push	{r4, lr}
 80133f2:	1e01      	subs	r1, r0, #0
 80133f4:	d105      	bne.n	8013402 <fflush+0x12>
 80133f6:	4b05      	ldr	r3, [pc, #20]	; (801340c <fflush+0x1c>)
 80133f8:	4905      	ldr	r1, [pc, #20]	; (8013410 <fflush+0x20>)
 80133fa:	6818      	ldr	r0, [r3, #0]
 80133fc:	f000 f8c0 	bl	8013580 <_fwalk_reent>
 8013400:	bd10      	pop	{r4, pc}
 8013402:	4b04      	ldr	r3, [pc, #16]	; (8013414 <fflush+0x24>)
 8013404:	6818      	ldr	r0, [r3, #0]
 8013406:	f7ff ffc7 	bl	8013398 <_fflush_r>
 801340a:	e7f9      	b.n	8013400 <fflush+0x10>
 801340c:	0801ecfc 	.word	0x0801ecfc
 8013410:	08013399 	.word	0x08013399
 8013414:	20000008 	.word	0x20000008

08013418 <std>:
 8013418:	2300      	movs	r3, #0
 801341a:	b510      	push	{r4, lr}
 801341c:	0004      	movs	r4, r0
 801341e:	6003      	str	r3, [r0, #0]
 8013420:	6043      	str	r3, [r0, #4]
 8013422:	6083      	str	r3, [r0, #8]
 8013424:	8181      	strh	r1, [r0, #12]
 8013426:	6643      	str	r3, [r0, #100]	; 0x64
 8013428:	81c2      	strh	r2, [r0, #14]
 801342a:	6103      	str	r3, [r0, #16]
 801342c:	6143      	str	r3, [r0, #20]
 801342e:	6183      	str	r3, [r0, #24]
 8013430:	0019      	movs	r1, r3
 8013432:	2208      	movs	r2, #8
 8013434:	305c      	adds	r0, #92	; 0x5c
 8013436:	f000 f8e9 	bl	801360c <memset>
 801343a:	4b05      	ldr	r3, [pc, #20]	; (8013450 <std+0x38>)
 801343c:	6224      	str	r4, [r4, #32]
 801343e:	6263      	str	r3, [r4, #36]	; 0x24
 8013440:	4b04      	ldr	r3, [pc, #16]	; (8013454 <std+0x3c>)
 8013442:	62a3      	str	r3, [r4, #40]	; 0x28
 8013444:	4b04      	ldr	r3, [pc, #16]	; (8013458 <std+0x40>)
 8013446:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013448:	4b04      	ldr	r3, [pc, #16]	; (801345c <std+0x44>)
 801344a:	6323      	str	r3, [r4, #48]	; 0x30
 801344c:	bd10      	pop	{r4, pc}
 801344e:	46c0      	nop			; (mov r8, r8)
 8013450:	08013791 	.word	0x08013791
 8013454:	080137b9 	.word	0x080137b9
 8013458:	080137f1 	.word	0x080137f1
 801345c:	0801381d 	.word	0x0801381d

08013460 <_cleanup_r>:
 8013460:	b510      	push	{r4, lr}
 8013462:	4902      	ldr	r1, [pc, #8]	; (801346c <_cleanup_r+0xc>)
 8013464:	f000 f88c 	bl	8013580 <_fwalk_reent>
 8013468:	bd10      	pop	{r4, pc}
 801346a:	46c0      	nop			; (mov r8, r8)
 801346c:	08013399 	.word	0x08013399

08013470 <__sfmoreglue>:
 8013470:	b570      	push	{r4, r5, r6, lr}
 8013472:	2568      	movs	r5, #104	; 0x68
 8013474:	1e4a      	subs	r2, r1, #1
 8013476:	4355      	muls	r5, r2
 8013478:	000e      	movs	r6, r1
 801347a:	0029      	movs	r1, r5
 801347c:	3174      	adds	r1, #116	; 0x74
 801347e:	f000 f917 	bl	80136b0 <_malloc_r>
 8013482:	1e04      	subs	r4, r0, #0
 8013484:	d008      	beq.n	8013498 <__sfmoreglue+0x28>
 8013486:	2100      	movs	r1, #0
 8013488:	002a      	movs	r2, r5
 801348a:	6001      	str	r1, [r0, #0]
 801348c:	6046      	str	r6, [r0, #4]
 801348e:	300c      	adds	r0, #12
 8013490:	60a0      	str	r0, [r4, #8]
 8013492:	3268      	adds	r2, #104	; 0x68
 8013494:	f000 f8ba 	bl	801360c <memset>
 8013498:	0020      	movs	r0, r4
 801349a:	bd70      	pop	{r4, r5, r6, pc}

0801349c <__sinit>:
 801349c:	6983      	ldr	r3, [r0, #24]
 801349e:	b513      	push	{r0, r1, r4, lr}
 80134a0:	0004      	movs	r4, r0
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d128      	bne.n	80134f8 <__sinit+0x5c>
 80134a6:	6483      	str	r3, [r0, #72]	; 0x48
 80134a8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80134aa:	6503      	str	r3, [r0, #80]	; 0x50
 80134ac:	4b13      	ldr	r3, [pc, #76]	; (80134fc <__sinit+0x60>)
 80134ae:	4a14      	ldr	r2, [pc, #80]	; (8013500 <__sinit+0x64>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	6282      	str	r2, [r0, #40]	; 0x28
 80134b4:	9301      	str	r3, [sp, #4]
 80134b6:	4298      	cmp	r0, r3
 80134b8:	d101      	bne.n	80134be <__sinit+0x22>
 80134ba:	2301      	movs	r3, #1
 80134bc:	6183      	str	r3, [r0, #24]
 80134be:	0020      	movs	r0, r4
 80134c0:	f000 f820 	bl	8013504 <__sfp>
 80134c4:	6060      	str	r0, [r4, #4]
 80134c6:	0020      	movs	r0, r4
 80134c8:	f000 f81c 	bl	8013504 <__sfp>
 80134cc:	60a0      	str	r0, [r4, #8]
 80134ce:	0020      	movs	r0, r4
 80134d0:	f000 f818 	bl	8013504 <__sfp>
 80134d4:	2200      	movs	r2, #0
 80134d6:	60e0      	str	r0, [r4, #12]
 80134d8:	2104      	movs	r1, #4
 80134da:	6860      	ldr	r0, [r4, #4]
 80134dc:	f7ff ff9c 	bl	8013418 <std>
 80134e0:	2201      	movs	r2, #1
 80134e2:	2109      	movs	r1, #9
 80134e4:	68a0      	ldr	r0, [r4, #8]
 80134e6:	f7ff ff97 	bl	8013418 <std>
 80134ea:	2202      	movs	r2, #2
 80134ec:	2112      	movs	r1, #18
 80134ee:	68e0      	ldr	r0, [r4, #12]
 80134f0:	f7ff ff92 	bl	8013418 <std>
 80134f4:	2301      	movs	r3, #1
 80134f6:	61a3      	str	r3, [r4, #24]
 80134f8:	bd13      	pop	{r0, r1, r4, pc}
 80134fa:	46c0      	nop			; (mov r8, r8)
 80134fc:	0801ecfc 	.word	0x0801ecfc
 8013500:	08013461 	.word	0x08013461

08013504 <__sfp>:
 8013504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013506:	4b1c      	ldr	r3, [pc, #112]	; (8013578 <__sfp+0x74>)
 8013508:	0007      	movs	r7, r0
 801350a:	681e      	ldr	r6, [r3, #0]
 801350c:	69b3      	ldr	r3, [r6, #24]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d102      	bne.n	8013518 <__sfp+0x14>
 8013512:	0030      	movs	r0, r6
 8013514:	f7ff ffc2 	bl	801349c <__sinit>
 8013518:	3648      	adds	r6, #72	; 0x48
 801351a:	68b4      	ldr	r4, [r6, #8]
 801351c:	6873      	ldr	r3, [r6, #4]
 801351e:	3b01      	subs	r3, #1
 8013520:	d504      	bpl.n	801352c <__sfp+0x28>
 8013522:	6833      	ldr	r3, [r6, #0]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d007      	beq.n	8013538 <__sfp+0x34>
 8013528:	6836      	ldr	r6, [r6, #0]
 801352a:	e7f6      	b.n	801351a <__sfp+0x16>
 801352c:	220c      	movs	r2, #12
 801352e:	5ea5      	ldrsh	r5, [r4, r2]
 8013530:	2d00      	cmp	r5, #0
 8013532:	d00d      	beq.n	8013550 <__sfp+0x4c>
 8013534:	3468      	adds	r4, #104	; 0x68
 8013536:	e7f2      	b.n	801351e <__sfp+0x1a>
 8013538:	2104      	movs	r1, #4
 801353a:	0038      	movs	r0, r7
 801353c:	f7ff ff98 	bl	8013470 <__sfmoreglue>
 8013540:	6030      	str	r0, [r6, #0]
 8013542:	2800      	cmp	r0, #0
 8013544:	d1f0      	bne.n	8013528 <__sfp+0x24>
 8013546:	230c      	movs	r3, #12
 8013548:	0004      	movs	r4, r0
 801354a:	603b      	str	r3, [r7, #0]
 801354c:	0020      	movs	r0, r4
 801354e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013550:	0020      	movs	r0, r4
 8013552:	4b0a      	ldr	r3, [pc, #40]	; (801357c <__sfp+0x78>)
 8013554:	6665      	str	r5, [r4, #100]	; 0x64
 8013556:	6025      	str	r5, [r4, #0]
 8013558:	6065      	str	r5, [r4, #4]
 801355a:	60a5      	str	r5, [r4, #8]
 801355c:	60e3      	str	r3, [r4, #12]
 801355e:	6125      	str	r5, [r4, #16]
 8013560:	6165      	str	r5, [r4, #20]
 8013562:	61a5      	str	r5, [r4, #24]
 8013564:	2208      	movs	r2, #8
 8013566:	0029      	movs	r1, r5
 8013568:	305c      	adds	r0, #92	; 0x5c
 801356a:	f000 f84f 	bl	801360c <memset>
 801356e:	6365      	str	r5, [r4, #52]	; 0x34
 8013570:	63a5      	str	r5, [r4, #56]	; 0x38
 8013572:	64a5      	str	r5, [r4, #72]	; 0x48
 8013574:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013576:	e7e9      	b.n	801354c <__sfp+0x48>
 8013578:	0801ecfc 	.word	0x0801ecfc
 801357c:	ffff0001 	.word	0xffff0001

08013580 <_fwalk_reent>:
 8013580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013582:	0004      	movs	r4, r0
 8013584:	0007      	movs	r7, r0
 8013586:	2600      	movs	r6, #0
 8013588:	9101      	str	r1, [sp, #4]
 801358a:	3448      	adds	r4, #72	; 0x48
 801358c:	2c00      	cmp	r4, #0
 801358e:	d101      	bne.n	8013594 <_fwalk_reent+0x14>
 8013590:	0030      	movs	r0, r6
 8013592:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013594:	6863      	ldr	r3, [r4, #4]
 8013596:	68a5      	ldr	r5, [r4, #8]
 8013598:	9300      	str	r3, [sp, #0]
 801359a:	9b00      	ldr	r3, [sp, #0]
 801359c:	3b01      	subs	r3, #1
 801359e:	9300      	str	r3, [sp, #0]
 80135a0:	d501      	bpl.n	80135a6 <_fwalk_reent+0x26>
 80135a2:	6824      	ldr	r4, [r4, #0]
 80135a4:	e7f2      	b.n	801358c <_fwalk_reent+0xc>
 80135a6:	89ab      	ldrh	r3, [r5, #12]
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d908      	bls.n	80135be <_fwalk_reent+0x3e>
 80135ac:	220e      	movs	r2, #14
 80135ae:	5eab      	ldrsh	r3, [r5, r2]
 80135b0:	3301      	adds	r3, #1
 80135b2:	d004      	beq.n	80135be <_fwalk_reent+0x3e>
 80135b4:	0029      	movs	r1, r5
 80135b6:	0038      	movs	r0, r7
 80135b8:	9b01      	ldr	r3, [sp, #4]
 80135ba:	4798      	blx	r3
 80135bc:	4306      	orrs	r6, r0
 80135be:	3568      	adds	r5, #104	; 0x68
 80135c0:	e7eb      	b.n	801359a <_fwalk_reent+0x1a>
	...

080135c4 <__libc_init_array>:
 80135c4:	b570      	push	{r4, r5, r6, lr}
 80135c6:	2600      	movs	r6, #0
 80135c8:	4d0c      	ldr	r5, [pc, #48]	; (80135fc <__libc_init_array+0x38>)
 80135ca:	4c0d      	ldr	r4, [pc, #52]	; (8013600 <__libc_init_array+0x3c>)
 80135cc:	1b64      	subs	r4, r4, r5
 80135ce:	10a4      	asrs	r4, r4, #2
 80135d0:	42a6      	cmp	r6, r4
 80135d2:	d109      	bne.n	80135e8 <__libc_init_array+0x24>
 80135d4:	2600      	movs	r6, #0
 80135d6:	f002 fc59 	bl	8015e8c <_init>
 80135da:	4d0a      	ldr	r5, [pc, #40]	; (8013604 <__libc_init_array+0x40>)
 80135dc:	4c0a      	ldr	r4, [pc, #40]	; (8013608 <__libc_init_array+0x44>)
 80135de:	1b64      	subs	r4, r4, r5
 80135e0:	10a4      	asrs	r4, r4, #2
 80135e2:	42a6      	cmp	r6, r4
 80135e4:	d105      	bne.n	80135f2 <__libc_init_array+0x2e>
 80135e6:	bd70      	pop	{r4, r5, r6, pc}
 80135e8:	00b3      	lsls	r3, r6, #2
 80135ea:	58eb      	ldr	r3, [r5, r3]
 80135ec:	4798      	blx	r3
 80135ee:	3601      	adds	r6, #1
 80135f0:	e7ee      	b.n	80135d0 <__libc_init_array+0xc>
 80135f2:	00b3      	lsls	r3, r6, #2
 80135f4:	58eb      	ldr	r3, [r5, r3]
 80135f6:	4798      	blx	r3
 80135f8:	3601      	adds	r6, #1
 80135fa:	e7f2      	b.n	80135e2 <__libc_init_array+0x1e>
 80135fc:	0801ef10 	.word	0x0801ef10
 8013600:	0801ef10 	.word	0x0801ef10
 8013604:	0801ef10 	.word	0x0801ef10
 8013608:	0801ef14 	.word	0x0801ef14

0801360c <memset>:
 801360c:	0003      	movs	r3, r0
 801360e:	1812      	adds	r2, r2, r0
 8013610:	4293      	cmp	r3, r2
 8013612:	d100      	bne.n	8013616 <memset+0xa>
 8013614:	4770      	bx	lr
 8013616:	7019      	strb	r1, [r3, #0]
 8013618:	3301      	adds	r3, #1
 801361a:	e7f9      	b.n	8013610 <memset+0x4>

0801361c <_free_r>:
 801361c:	b570      	push	{r4, r5, r6, lr}
 801361e:	0005      	movs	r5, r0
 8013620:	2900      	cmp	r1, #0
 8013622:	d010      	beq.n	8013646 <_free_r+0x2a>
 8013624:	1f0c      	subs	r4, r1, #4
 8013626:	6823      	ldr	r3, [r4, #0]
 8013628:	2b00      	cmp	r3, #0
 801362a:	da00      	bge.n	801362e <_free_r+0x12>
 801362c:	18e4      	adds	r4, r4, r3
 801362e:	0028      	movs	r0, r5
 8013630:	f000 f934 	bl	801389c <__malloc_lock>
 8013634:	4a1d      	ldr	r2, [pc, #116]	; (80136ac <_free_r+0x90>)
 8013636:	6813      	ldr	r3, [r2, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d105      	bne.n	8013648 <_free_r+0x2c>
 801363c:	6063      	str	r3, [r4, #4]
 801363e:	6014      	str	r4, [r2, #0]
 8013640:	0028      	movs	r0, r5
 8013642:	f000 f92c 	bl	801389e <__malloc_unlock>
 8013646:	bd70      	pop	{r4, r5, r6, pc}
 8013648:	42a3      	cmp	r3, r4
 801364a:	d909      	bls.n	8013660 <_free_r+0x44>
 801364c:	6821      	ldr	r1, [r4, #0]
 801364e:	1860      	adds	r0, r4, r1
 8013650:	4283      	cmp	r3, r0
 8013652:	d1f3      	bne.n	801363c <_free_r+0x20>
 8013654:	6818      	ldr	r0, [r3, #0]
 8013656:	685b      	ldr	r3, [r3, #4]
 8013658:	1841      	adds	r1, r0, r1
 801365a:	6021      	str	r1, [r4, #0]
 801365c:	e7ee      	b.n	801363c <_free_r+0x20>
 801365e:	0013      	movs	r3, r2
 8013660:	685a      	ldr	r2, [r3, #4]
 8013662:	2a00      	cmp	r2, #0
 8013664:	d001      	beq.n	801366a <_free_r+0x4e>
 8013666:	42a2      	cmp	r2, r4
 8013668:	d9f9      	bls.n	801365e <_free_r+0x42>
 801366a:	6819      	ldr	r1, [r3, #0]
 801366c:	1858      	adds	r0, r3, r1
 801366e:	42a0      	cmp	r0, r4
 8013670:	d10b      	bne.n	801368a <_free_r+0x6e>
 8013672:	6820      	ldr	r0, [r4, #0]
 8013674:	1809      	adds	r1, r1, r0
 8013676:	1858      	adds	r0, r3, r1
 8013678:	6019      	str	r1, [r3, #0]
 801367a:	4282      	cmp	r2, r0
 801367c:	d1e0      	bne.n	8013640 <_free_r+0x24>
 801367e:	6810      	ldr	r0, [r2, #0]
 8013680:	6852      	ldr	r2, [r2, #4]
 8013682:	1841      	adds	r1, r0, r1
 8013684:	6019      	str	r1, [r3, #0]
 8013686:	605a      	str	r2, [r3, #4]
 8013688:	e7da      	b.n	8013640 <_free_r+0x24>
 801368a:	42a0      	cmp	r0, r4
 801368c:	d902      	bls.n	8013694 <_free_r+0x78>
 801368e:	230c      	movs	r3, #12
 8013690:	602b      	str	r3, [r5, #0]
 8013692:	e7d5      	b.n	8013640 <_free_r+0x24>
 8013694:	6821      	ldr	r1, [r4, #0]
 8013696:	1860      	adds	r0, r4, r1
 8013698:	4282      	cmp	r2, r0
 801369a:	d103      	bne.n	80136a4 <_free_r+0x88>
 801369c:	6810      	ldr	r0, [r2, #0]
 801369e:	6852      	ldr	r2, [r2, #4]
 80136a0:	1841      	adds	r1, r0, r1
 80136a2:	6021      	str	r1, [r4, #0]
 80136a4:	6062      	str	r2, [r4, #4]
 80136a6:	605c      	str	r4, [r3, #4]
 80136a8:	e7ca      	b.n	8013640 <_free_r+0x24>
 80136aa:	46c0      	nop			; (mov r8, r8)
 80136ac:	20000630 	.word	0x20000630

080136b0 <_malloc_r>:
 80136b0:	2303      	movs	r3, #3
 80136b2:	b570      	push	{r4, r5, r6, lr}
 80136b4:	1ccd      	adds	r5, r1, #3
 80136b6:	439d      	bics	r5, r3
 80136b8:	3508      	adds	r5, #8
 80136ba:	0006      	movs	r6, r0
 80136bc:	2d0c      	cmp	r5, #12
 80136be:	d21e      	bcs.n	80136fe <_malloc_r+0x4e>
 80136c0:	250c      	movs	r5, #12
 80136c2:	42a9      	cmp	r1, r5
 80136c4:	d81d      	bhi.n	8013702 <_malloc_r+0x52>
 80136c6:	0030      	movs	r0, r6
 80136c8:	f000 f8e8 	bl	801389c <__malloc_lock>
 80136cc:	4a25      	ldr	r2, [pc, #148]	; (8013764 <_malloc_r+0xb4>)
 80136ce:	6814      	ldr	r4, [r2, #0]
 80136d0:	0021      	movs	r1, r4
 80136d2:	2900      	cmp	r1, #0
 80136d4:	d119      	bne.n	801370a <_malloc_r+0x5a>
 80136d6:	4c24      	ldr	r4, [pc, #144]	; (8013768 <_malloc_r+0xb8>)
 80136d8:	6823      	ldr	r3, [r4, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d103      	bne.n	80136e6 <_malloc_r+0x36>
 80136de:	0030      	movs	r0, r6
 80136e0:	f000 f844 	bl	801376c <_sbrk_r>
 80136e4:	6020      	str	r0, [r4, #0]
 80136e6:	0029      	movs	r1, r5
 80136e8:	0030      	movs	r0, r6
 80136ea:	f000 f83f 	bl	801376c <_sbrk_r>
 80136ee:	1c43      	adds	r3, r0, #1
 80136f0:	d12b      	bne.n	801374a <_malloc_r+0x9a>
 80136f2:	230c      	movs	r3, #12
 80136f4:	0030      	movs	r0, r6
 80136f6:	6033      	str	r3, [r6, #0]
 80136f8:	f000 f8d1 	bl	801389e <__malloc_unlock>
 80136fc:	e003      	b.n	8013706 <_malloc_r+0x56>
 80136fe:	2d00      	cmp	r5, #0
 8013700:	dadf      	bge.n	80136c2 <_malloc_r+0x12>
 8013702:	230c      	movs	r3, #12
 8013704:	6033      	str	r3, [r6, #0]
 8013706:	2000      	movs	r0, #0
 8013708:	bd70      	pop	{r4, r5, r6, pc}
 801370a:	680b      	ldr	r3, [r1, #0]
 801370c:	1b5b      	subs	r3, r3, r5
 801370e:	d419      	bmi.n	8013744 <_malloc_r+0x94>
 8013710:	2b0b      	cmp	r3, #11
 8013712:	d903      	bls.n	801371c <_malloc_r+0x6c>
 8013714:	600b      	str	r3, [r1, #0]
 8013716:	18cc      	adds	r4, r1, r3
 8013718:	6025      	str	r5, [r4, #0]
 801371a:	e003      	b.n	8013724 <_malloc_r+0x74>
 801371c:	684b      	ldr	r3, [r1, #4]
 801371e:	428c      	cmp	r4, r1
 8013720:	d10d      	bne.n	801373e <_malloc_r+0x8e>
 8013722:	6013      	str	r3, [r2, #0]
 8013724:	0030      	movs	r0, r6
 8013726:	f000 f8ba 	bl	801389e <__malloc_unlock>
 801372a:	0020      	movs	r0, r4
 801372c:	2207      	movs	r2, #7
 801372e:	300b      	adds	r0, #11
 8013730:	1d23      	adds	r3, r4, #4
 8013732:	4390      	bics	r0, r2
 8013734:	1ac3      	subs	r3, r0, r3
 8013736:	d0e7      	beq.n	8013708 <_malloc_r+0x58>
 8013738:	425a      	negs	r2, r3
 801373a:	50e2      	str	r2, [r4, r3]
 801373c:	e7e4      	b.n	8013708 <_malloc_r+0x58>
 801373e:	6063      	str	r3, [r4, #4]
 8013740:	000c      	movs	r4, r1
 8013742:	e7ef      	b.n	8013724 <_malloc_r+0x74>
 8013744:	000c      	movs	r4, r1
 8013746:	6849      	ldr	r1, [r1, #4]
 8013748:	e7c3      	b.n	80136d2 <_malloc_r+0x22>
 801374a:	2303      	movs	r3, #3
 801374c:	1cc4      	adds	r4, r0, #3
 801374e:	439c      	bics	r4, r3
 8013750:	42a0      	cmp	r0, r4
 8013752:	d0e1      	beq.n	8013718 <_malloc_r+0x68>
 8013754:	1a21      	subs	r1, r4, r0
 8013756:	0030      	movs	r0, r6
 8013758:	f000 f808 	bl	801376c <_sbrk_r>
 801375c:	1c43      	adds	r3, r0, #1
 801375e:	d1db      	bne.n	8013718 <_malloc_r+0x68>
 8013760:	e7c7      	b.n	80136f2 <_malloc_r+0x42>
 8013762:	46c0      	nop			; (mov r8, r8)
 8013764:	20000630 	.word	0x20000630
 8013768:	20000634 	.word	0x20000634

0801376c <_sbrk_r>:
 801376c:	2300      	movs	r3, #0
 801376e:	b570      	push	{r4, r5, r6, lr}
 8013770:	4c06      	ldr	r4, [pc, #24]	; (801378c <_sbrk_r+0x20>)
 8013772:	0005      	movs	r5, r0
 8013774:	0008      	movs	r0, r1
 8013776:	6023      	str	r3, [r4, #0]
 8013778:	f7ff fd04 	bl	8013184 <_sbrk>
 801377c:	1c43      	adds	r3, r0, #1
 801377e:	d103      	bne.n	8013788 <_sbrk_r+0x1c>
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d000      	beq.n	8013788 <_sbrk_r+0x1c>
 8013786:	602b      	str	r3, [r5, #0]
 8013788:	bd70      	pop	{r4, r5, r6, pc}
 801378a:	46c0      	nop			; (mov r8, r8)
 801378c:	200006c4 	.word	0x200006c4

08013790 <__sread>:
 8013790:	b570      	push	{r4, r5, r6, lr}
 8013792:	000c      	movs	r4, r1
 8013794:	250e      	movs	r5, #14
 8013796:	5f49      	ldrsh	r1, [r1, r5]
 8013798:	f000 f882 	bl	80138a0 <_read_r>
 801379c:	2800      	cmp	r0, #0
 801379e:	db03      	blt.n	80137a8 <__sread+0x18>
 80137a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80137a2:	181b      	adds	r3, r3, r0
 80137a4:	6563      	str	r3, [r4, #84]	; 0x54
 80137a6:	bd70      	pop	{r4, r5, r6, pc}
 80137a8:	89a3      	ldrh	r3, [r4, #12]
 80137aa:	4a02      	ldr	r2, [pc, #8]	; (80137b4 <__sread+0x24>)
 80137ac:	4013      	ands	r3, r2
 80137ae:	81a3      	strh	r3, [r4, #12]
 80137b0:	e7f9      	b.n	80137a6 <__sread+0x16>
 80137b2:	46c0      	nop			; (mov r8, r8)
 80137b4:	ffffefff 	.word	0xffffefff

080137b8 <__swrite>:
 80137b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ba:	001f      	movs	r7, r3
 80137bc:	898b      	ldrh	r3, [r1, #12]
 80137be:	0005      	movs	r5, r0
 80137c0:	000c      	movs	r4, r1
 80137c2:	0016      	movs	r6, r2
 80137c4:	05db      	lsls	r3, r3, #23
 80137c6:	d505      	bpl.n	80137d4 <__swrite+0x1c>
 80137c8:	230e      	movs	r3, #14
 80137ca:	5ec9      	ldrsh	r1, [r1, r3]
 80137cc:	2200      	movs	r2, #0
 80137ce:	2302      	movs	r3, #2
 80137d0:	f000 f850 	bl	8013874 <_lseek_r>
 80137d4:	89a3      	ldrh	r3, [r4, #12]
 80137d6:	4a05      	ldr	r2, [pc, #20]	; (80137ec <__swrite+0x34>)
 80137d8:	0028      	movs	r0, r5
 80137da:	4013      	ands	r3, r2
 80137dc:	81a3      	strh	r3, [r4, #12]
 80137de:	0032      	movs	r2, r6
 80137e0:	230e      	movs	r3, #14
 80137e2:	5ee1      	ldrsh	r1, [r4, r3]
 80137e4:	003b      	movs	r3, r7
 80137e6:	f000 f81f 	bl	8013828 <_write_r>
 80137ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137ec:	ffffefff 	.word	0xffffefff

080137f0 <__sseek>:
 80137f0:	b570      	push	{r4, r5, r6, lr}
 80137f2:	000c      	movs	r4, r1
 80137f4:	250e      	movs	r5, #14
 80137f6:	5f49      	ldrsh	r1, [r1, r5]
 80137f8:	f000 f83c 	bl	8013874 <_lseek_r>
 80137fc:	89a3      	ldrh	r3, [r4, #12]
 80137fe:	1c42      	adds	r2, r0, #1
 8013800:	d103      	bne.n	801380a <__sseek+0x1a>
 8013802:	4a05      	ldr	r2, [pc, #20]	; (8013818 <__sseek+0x28>)
 8013804:	4013      	ands	r3, r2
 8013806:	81a3      	strh	r3, [r4, #12]
 8013808:	bd70      	pop	{r4, r5, r6, pc}
 801380a:	2280      	movs	r2, #128	; 0x80
 801380c:	0152      	lsls	r2, r2, #5
 801380e:	4313      	orrs	r3, r2
 8013810:	81a3      	strh	r3, [r4, #12]
 8013812:	6560      	str	r0, [r4, #84]	; 0x54
 8013814:	e7f8      	b.n	8013808 <__sseek+0x18>
 8013816:	46c0      	nop			; (mov r8, r8)
 8013818:	ffffefff 	.word	0xffffefff

0801381c <__sclose>:
 801381c:	b510      	push	{r4, lr}
 801381e:	230e      	movs	r3, #14
 8013820:	5ec9      	ldrsh	r1, [r1, r3]
 8013822:	f000 f815 	bl	8013850 <_close_r>
 8013826:	bd10      	pop	{r4, pc}

08013828 <_write_r>:
 8013828:	b570      	push	{r4, r5, r6, lr}
 801382a:	0005      	movs	r5, r0
 801382c:	0008      	movs	r0, r1
 801382e:	0011      	movs	r1, r2
 8013830:	2200      	movs	r2, #0
 8013832:	4c06      	ldr	r4, [pc, #24]	; (801384c <_write_r+0x24>)
 8013834:	6022      	str	r2, [r4, #0]
 8013836:	001a      	movs	r2, r3
 8013838:	f7ff fc6c 	bl	8013114 <_write>
 801383c:	1c43      	adds	r3, r0, #1
 801383e:	d103      	bne.n	8013848 <_write_r+0x20>
 8013840:	6823      	ldr	r3, [r4, #0]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d000      	beq.n	8013848 <_write_r+0x20>
 8013846:	602b      	str	r3, [r5, #0]
 8013848:	bd70      	pop	{r4, r5, r6, pc}
 801384a:	46c0      	nop			; (mov r8, r8)
 801384c:	200006c4 	.word	0x200006c4

08013850 <_close_r>:
 8013850:	2300      	movs	r3, #0
 8013852:	b570      	push	{r4, r5, r6, lr}
 8013854:	4c06      	ldr	r4, [pc, #24]	; (8013870 <_close_r+0x20>)
 8013856:	0005      	movs	r5, r0
 8013858:	0008      	movs	r0, r1
 801385a:	6023      	str	r3, [r4, #0]
 801385c:	f000 f834 	bl	80138c8 <_close>
 8013860:	1c43      	adds	r3, r0, #1
 8013862:	d103      	bne.n	801386c <_close_r+0x1c>
 8013864:	6823      	ldr	r3, [r4, #0]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d000      	beq.n	801386c <_close_r+0x1c>
 801386a:	602b      	str	r3, [r5, #0]
 801386c:	bd70      	pop	{r4, r5, r6, pc}
 801386e:	46c0      	nop			; (mov r8, r8)
 8013870:	200006c4 	.word	0x200006c4

08013874 <_lseek_r>:
 8013874:	b570      	push	{r4, r5, r6, lr}
 8013876:	0005      	movs	r5, r0
 8013878:	0008      	movs	r0, r1
 801387a:	0011      	movs	r1, r2
 801387c:	2200      	movs	r2, #0
 801387e:	4c06      	ldr	r4, [pc, #24]	; (8013898 <_lseek_r+0x24>)
 8013880:	6022      	str	r2, [r4, #0]
 8013882:	001a      	movs	r2, r3
 8013884:	f000 f828 	bl	80138d8 <_lseek>
 8013888:	1c43      	adds	r3, r0, #1
 801388a:	d103      	bne.n	8013894 <_lseek_r+0x20>
 801388c:	6823      	ldr	r3, [r4, #0]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d000      	beq.n	8013894 <_lseek_r+0x20>
 8013892:	602b      	str	r3, [r5, #0]
 8013894:	bd70      	pop	{r4, r5, r6, pc}
 8013896:	46c0      	nop			; (mov r8, r8)
 8013898:	200006c4 	.word	0x200006c4

0801389c <__malloc_lock>:
 801389c:	4770      	bx	lr

0801389e <__malloc_unlock>:
 801389e:	4770      	bx	lr

080138a0 <_read_r>:
 80138a0:	b570      	push	{r4, r5, r6, lr}
 80138a2:	0005      	movs	r5, r0
 80138a4:	0008      	movs	r0, r1
 80138a6:	0011      	movs	r1, r2
 80138a8:	2200      	movs	r2, #0
 80138aa:	4c06      	ldr	r4, [pc, #24]	; (80138c4 <_read_r+0x24>)
 80138ac:	6022      	str	r2, [r4, #0]
 80138ae:	001a      	movs	r2, r3
 80138b0:	f000 f81a 	bl	80138e8 <_read>
 80138b4:	1c43      	adds	r3, r0, #1
 80138b6:	d103      	bne.n	80138c0 <_read_r+0x20>
 80138b8:	6823      	ldr	r3, [r4, #0]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d000      	beq.n	80138c0 <_read_r+0x20>
 80138be:	602b      	str	r3, [r5, #0]
 80138c0:	bd70      	pop	{r4, r5, r6, pc}
 80138c2:	46c0      	nop			; (mov r8, r8)
 80138c4:	200006c4 	.word	0x200006c4

080138c8 <_close>:
 80138c8:	2258      	movs	r2, #88	; 0x58
 80138ca:	2001      	movs	r0, #1
 80138cc:	4b01      	ldr	r3, [pc, #4]	; (80138d4 <_close+0xc>)
 80138ce:	4240      	negs	r0, r0
 80138d0:	601a      	str	r2, [r3, #0]
 80138d2:	4770      	bx	lr
 80138d4:	200006c4 	.word	0x200006c4

080138d8 <_lseek>:
 80138d8:	2258      	movs	r2, #88	; 0x58
 80138da:	2001      	movs	r0, #1
 80138dc:	4b01      	ldr	r3, [pc, #4]	; (80138e4 <_lseek+0xc>)
 80138de:	4240      	negs	r0, r0
 80138e0:	601a      	str	r2, [r3, #0]
 80138e2:	4770      	bx	lr
 80138e4:	200006c4 	.word	0x200006c4

080138e8 <_read>:
 80138e8:	2258      	movs	r2, #88	; 0x58
 80138ea:	2001      	movs	r0, #1
 80138ec:	4b01      	ldr	r3, [pc, #4]	; (80138f4 <_read+0xc>)
 80138ee:	4240      	negs	r0, r0
 80138f0:	601a      	str	r2, [r3, #0]
 80138f2:	4770      	bx	lr
 80138f4:	200006c4 	.word	0x200006c4

080138f8 <cos>:
 80138f8:	b530      	push	{r4, r5, lr}
 80138fa:	4a20      	ldr	r2, [pc, #128]	; (801397c <cos+0x84>)
 80138fc:	004b      	lsls	r3, r1, #1
 80138fe:	b087      	sub	sp, #28
 8013900:	085b      	lsrs	r3, r3, #1
 8013902:	4293      	cmp	r3, r2
 8013904:	dd1c      	ble.n	8013940 <cos+0x48>
 8013906:	4a1e      	ldr	r2, [pc, #120]	; (8013980 <cos+0x88>)
 8013908:	4293      	cmp	r3, r2
 801390a:	dd05      	ble.n	8013918 <cos+0x20>
 801390c:	0002      	movs	r2, r0
 801390e:	000b      	movs	r3, r1
 8013910:	f7fe ff10 	bl	8012734 <__aeabi_dsub>
 8013914:	b007      	add	sp, #28
 8013916:	bd30      	pop	{r4, r5, pc}
 8013918:	aa02      	add	r2, sp, #8
 801391a:	f000 f9db 	bl	8013cd4 <__ieee754_rem_pio2>
 801391e:	2303      	movs	r3, #3
 8013920:	4018      	ands	r0, r3
 8013922:	9a04      	ldr	r2, [sp, #16]
 8013924:	9b05      	ldr	r3, [sp, #20]
 8013926:	2801      	cmp	r0, #1
 8013928:	d00f      	beq.n	801394a <cos+0x52>
 801392a:	2802      	cmp	r0, #2
 801392c:	d01c      	beq.n	8013968 <cos+0x70>
 801392e:	2800      	cmp	r0, #0
 8013930:	d015      	beq.n	801395e <cos+0x66>
 8013932:	9802      	ldr	r0, [sp, #8]
 8013934:	9903      	ldr	r1, [sp, #12]
 8013936:	2401      	movs	r4, #1
 8013938:	9400      	str	r4, [sp, #0]
 801393a:	f001 fb7f 	bl	801503c <__kernel_sin>
 801393e:	e7e9      	b.n	8013914 <cos+0x1c>
 8013940:	2200      	movs	r2, #0
 8013942:	2300      	movs	r3, #0
 8013944:	f000 fe00 	bl	8014548 <__kernel_cos>
 8013948:	e7e4      	b.n	8013914 <cos+0x1c>
 801394a:	9000      	str	r0, [sp, #0]
 801394c:	9802      	ldr	r0, [sp, #8]
 801394e:	9903      	ldr	r1, [sp, #12]
 8013950:	f001 fb74 	bl	801503c <__kernel_sin>
 8013954:	2380      	movs	r3, #128	; 0x80
 8013956:	061b      	lsls	r3, r3, #24
 8013958:	469c      	mov	ip, r3
 801395a:	4461      	add	r1, ip
 801395c:	e7da      	b.n	8013914 <cos+0x1c>
 801395e:	9802      	ldr	r0, [sp, #8]
 8013960:	9903      	ldr	r1, [sp, #12]
 8013962:	f000 fdf1 	bl	8014548 <__kernel_cos>
 8013966:	e7d5      	b.n	8013914 <cos+0x1c>
 8013968:	9802      	ldr	r0, [sp, #8]
 801396a:	9903      	ldr	r1, [sp, #12]
 801396c:	f000 fdec 	bl	8014548 <__kernel_cos>
 8013970:	2380      	movs	r3, #128	; 0x80
 8013972:	061b      	lsls	r3, r3, #24
 8013974:	469c      	mov	ip, r3
 8013976:	4461      	add	r1, ip
 8013978:	e7cc      	b.n	8013914 <cos+0x1c>
 801397a:	46c0      	nop			; (mov r8, r8)
 801397c:	3fe921fb 	.word	0x3fe921fb
 8013980:	7fefffff 	.word	0x7fefffff

08013984 <fmaxf>:
 8013984:	b570      	push	{r4, r5, r6, lr}
 8013986:	1c04      	adds	r4, r0, #0
 8013988:	1c0d      	adds	r5, r1, #0
 801398a:	f000 f811 	bl	80139b0 <__fpclassifyf>
 801398e:	2800      	cmp	r0, #0
 8013990:	d102      	bne.n	8013998 <fmaxf+0x14>
 8013992:	1c2c      	adds	r4, r5, #0
 8013994:	1c20      	adds	r0, r4, #0
 8013996:	bd70      	pop	{r4, r5, r6, pc}
 8013998:	1c28      	adds	r0, r5, #0
 801399a:	f000 f809 	bl	80139b0 <__fpclassifyf>
 801399e:	2800      	cmp	r0, #0
 80139a0:	d0f8      	beq.n	8013994 <fmaxf+0x10>
 80139a2:	1c29      	adds	r1, r5, #0
 80139a4:	1c20      	adds	r0, r4, #0
 80139a6:	f7fd fa7b 	bl	8010ea0 <__aeabi_fcmpgt>
 80139aa:	2800      	cmp	r0, #0
 80139ac:	d0f1      	beq.n	8013992 <fmaxf+0xe>
 80139ae:	e7f1      	b.n	8013994 <fmaxf+0x10>

080139b0 <__fpclassifyf>:
 80139b0:	0040      	lsls	r0, r0, #1
 80139b2:	0840      	lsrs	r0, r0, #1
 80139b4:	d00e      	beq.n	80139d4 <__fpclassifyf+0x24>
 80139b6:	4b0a      	ldr	r3, [pc, #40]	; (80139e0 <__fpclassifyf+0x30>)
 80139b8:	4a0a      	ldr	r2, [pc, #40]	; (80139e4 <__fpclassifyf+0x34>)
 80139ba:	18c3      	adds	r3, r0, r3
 80139bc:	4293      	cmp	r3, r2
 80139be:	d90b      	bls.n	80139d8 <__fpclassifyf+0x28>
 80139c0:	4a09      	ldr	r2, [pc, #36]	; (80139e8 <__fpclassifyf+0x38>)
 80139c2:	1e43      	subs	r3, r0, #1
 80139c4:	4293      	cmp	r3, r2
 80139c6:	d909      	bls.n	80139dc <__fpclassifyf+0x2c>
 80139c8:	4b08      	ldr	r3, [pc, #32]	; (80139ec <__fpclassifyf+0x3c>)
 80139ca:	469c      	mov	ip, r3
 80139cc:	4460      	add	r0, ip
 80139ce:	4243      	negs	r3, r0
 80139d0:	4158      	adcs	r0, r3
 80139d2:	4770      	bx	lr
 80139d4:	2002      	movs	r0, #2
 80139d6:	e7fc      	b.n	80139d2 <__fpclassifyf+0x22>
 80139d8:	2004      	movs	r0, #4
 80139da:	e7fa      	b.n	80139d2 <__fpclassifyf+0x22>
 80139dc:	2003      	movs	r0, #3
 80139de:	e7f8      	b.n	80139d2 <__fpclassifyf+0x22>
 80139e0:	ff800000 	.word	0xff800000
 80139e4:	7effffff 	.word	0x7effffff
 80139e8:	007ffffe 	.word	0x007ffffe
 80139ec:	80800000 	.word	0x80800000

080139f0 <roundf>:
 80139f0:	0043      	lsls	r3, r0, #1
 80139f2:	0e1b      	lsrs	r3, r3, #24
 80139f4:	3b7f      	subs	r3, #127	; 0x7f
 80139f6:	b510      	push	{r4, lr}
 80139f8:	1c01      	adds	r1, r0, #0
 80139fa:	2b16      	cmp	r3, #22
 80139fc:	dc0b      	bgt.n	8013a16 <roundf+0x26>
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	db0e      	blt.n	8013a20 <roundf+0x30>
 8013a02:	4c0b      	ldr	r4, [pc, #44]	; (8013a30 <roundf+0x40>)
 8013a04:	411c      	asrs	r4, r3
 8013a06:	4204      	tst	r4, r0
 8013a08:	d004      	beq.n	8013a14 <roundf+0x24>
 8013a0a:	2280      	movs	r2, #128	; 0x80
 8013a0c:	03d2      	lsls	r2, r2, #15
 8013a0e:	411a      	asrs	r2, r3
 8013a10:	1810      	adds	r0, r2, r0
 8013a12:	43a0      	bics	r0, r4
 8013a14:	bd10      	pop	{r4, pc}
 8013a16:	2b80      	cmp	r3, #128	; 0x80
 8013a18:	d1fc      	bne.n	8013a14 <roundf+0x24>
 8013a1a:	f7fc fa89 	bl	800ff30 <__aeabi_fadd>
 8013a1e:	e7f9      	b.n	8013a14 <roundf+0x24>
 8013a20:	0fc0      	lsrs	r0, r0, #31
 8013a22:	07c0      	lsls	r0, r0, #31
 8013a24:	3301      	adds	r3, #1
 8013a26:	d1f5      	bne.n	8013a14 <roundf+0x24>
 8013a28:	23fe      	movs	r3, #254	; 0xfe
 8013a2a:	059b      	lsls	r3, r3, #22
 8013a2c:	4318      	orrs	r0, r3
 8013a2e:	e7f1      	b.n	8013a14 <roundf+0x24>
 8013a30:	007fffff 	.word	0x007fffff

08013a34 <sqrt>:
 8013a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a36:	4647      	mov	r7, r8
 8013a38:	46ce      	mov	lr, r9
 8013a3a:	b580      	push	{r7, lr}
 8013a3c:	b08d      	sub	sp, #52	; 0x34
 8013a3e:	0004      	movs	r4, r0
 8013a40:	000d      	movs	r5, r1
 8013a42:	f000 fb57 	bl	80140f4 <__ieee754_sqrt>
 8013a46:	4b29      	ldr	r3, [pc, #164]	; (8013aec <sqrt+0xb8>)
 8013a48:	0006      	movs	r6, r0
 8013a4a:	781b      	ldrb	r3, [r3, #0]
 8013a4c:	000f      	movs	r7, r1
 8013a4e:	b25b      	sxtb	r3, r3
 8013a50:	4698      	mov	r8, r3
 8013a52:	3301      	adds	r3, #1
 8013a54:	d010      	beq.n	8013a78 <sqrt+0x44>
 8013a56:	0022      	movs	r2, r4
 8013a58:	002b      	movs	r3, r5
 8013a5a:	0020      	movs	r0, r4
 8013a5c:	0029      	movs	r1, r5
 8013a5e:	f7ff f9b1 	bl	8012dc4 <__aeabi_dcmpun>
 8013a62:	4681      	mov	r9, r0
 8013a64:	2800      	cmp	r0, #0
 8013a66:	d107      	bne.n	8013a78 <sqrt+0x44>
 8013a68:	2200      	movs	r2, #0
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	0020      	movs	r0, r4
 8013a6e:	0029      	movs	r1, r5
 8013a70:	f7fd f9c8 	bl	8010e04 <__aeabi_dcmplt>
 8013a74:	2800      	cmp	r0, #0
 8013a76:	d106      	bne.n	8013a86 <sqrt+0x52>
 8013a78:	0030      	movs	r0, r6
 8013a7a:	0039      	movs	r1, r7
 8013a7c:	b00d      	add	sp, #52	; 0x34
 8013a7e:	bc0c      	pop	{r2, r3}
 8013a80:	4690      	mov	r8, r2
 8013a82:	4699      	mov	r9, r3
 8013a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a86:	2301      	movs	r3, #1
 8013a88:	9302      	str	r3, [sp, #8]
 8013a8a:	4b19      	ldr	r3, [pc, #100]	; (8013af0 <sqrt+0xbc>)
 8013a8c:	9406      	str	r4, [sp, #24]
 8013a8e:	9507      	str	r5, [sp, #28]
 8013a90:	9303      	str	r3, [sp, #12]
 8013a92:	464b      	mov	r3, r9
 8013a94:	930a      	str	r3, [sp, #40]	; 0x28
 8013a96:	4643      	mov	r3, r8
 8013a98:	9404      	str	r4, [sp, #16]
 8013a9a:	9505      	str	r5, [sp, #20]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d015      	beq.n	8013acc <sqrt+0x98>
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	0019      	movs	r1, r3
 8013aa6:	0010      	movs	r0, r2
 8013aa8:	f7fd ffc8 	bl	8011a3c <__aeabi_ddiv>
 8013aac:	4643      	mov	r3, r8
 8013aae:	9008      	str	r0, [sp, #32]
 8013ab0:	9109      	str	r1, [sp, #36]	; 0x24
 8013ab2:	2b02      	cmp	r3, #2
 8013ab4:	d10e      	bne.n	8013ad4 <sqrt+0xa0>
 8013ab6:	f7ff fbdf 	bl	8013278 <__errno>
 8013aba:	2321      	movs	r3, #33	; 0x21
 8013abc:	6003      	str	r3, [r0, #0]
 8013abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ac0:	9301      	str	r3, [sp, #4]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d10c      	bne.n	8013ae0 <sqrt+0xac>
 8013ac6:	9e08      	ldr	r6, [sp, #32]
 8013ac8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013aca:	e7d5      	b.n	8013a78 <sqrt+0x44>
 8013acc:	2300      	movs	r3, #0
 8013ace:	2400      	movs	r4, #0
 8013ad0:	9308      	str	r3, [sp, #32]
 8013ad2:	9409      	str	r4, [sp, #36]	; 0x24
 8013ad4:	a802      	add	r0, sp, #8
 8013ad6:	f001 fc03 	bl	80152e0 <matherr>
 8013ada:	2800      	cmp	r0, #0
 8013adc:	d1ef      	bne.n	8013abe <sqrt+0x8a>
 8013ade:	e7ea      	b.n	8013ab6 <sqrt+0x82>
 8013ae0:	f7ff fbca 	bl	8013278 <__errno>
 8013ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ae6:	9301      	str	r3, [sp, #4]
 8013ae8:	6003      	str	r3, [r0, #0]
 8013aea:	e7ec      	b.n	8013ac6 <sqrt+0x92>
 8013aec:	2000006c 	.word	0x2000006c
 8013af0:	0801ed00 	.word	0x0801ed00

08013af4 <expf>:
 8013af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013af6:	b08b      	sub	sp, #44	; 0x2c
 8013af8:	1c04      	adds	r4, r0, #0
 8013afa:	f000 fbd3 	bl	80142a4 <__ieee754_expf>
 8013afe:	2300      	movs	r3, #0
 8013b00:	4e30      	ldr	r6, [pc, #192]	; (8013bc4 <expf+0xd0>)
 8013b02:	1c05      	adds	r5, r0, #0
 8013b04:	56f3      	ldrsb	r3, [r6, r3]
 8013b06:	3301      	adds	r3, #1
 8013b08:	d036      	beq.n	8013b78 <expf+0x84>
 8013b0a:	1c20      	adds	r0, r4, #0
 8013b0c:	f001 fc58 	bl	80153c0 <finitef>
 8013b10:	2800      	cmp	r0, #0
 8013b12:	d031      	beq.n	8013b78 <expf+0x84>
 8013b14:	492c      	ldr	r1, [pc, #176]	; (8013bc8 <expf+0xd4>)
 8013b16:	1c20      	adds	r0, r4, #0
 8013b18:	f7fd f9c2 	bl	8010ea0 <__aeabi_fcmpgt>
 8013b1c:	1e07      	subs	r7, r0, #0
 8013b1e:	d12e      	bne.n	8013b7e <expf+0x8a>
 8013b20:	492a      	ldr	r1, [pc, #168]	; (8013bcc <expf+0xd8>)
 8013b22:	1c20      	adds	r0, r4, #0
 8013b24:	f7fd f9a8 	bl	8010e78 <__aeabi_fcmplt>
 8013b28:	2800      	cmp	r0, #0
 8013b2a:	d025      	beq.n	8013b78 <expf+0x84>
 8013b2c:	2304      	movs	r3, #4
 8013b2e:	466d      	mov	r5, sp
 8013b30:	9300      	str	r3, [sp, #0]
 8013b32:	4b27      	ldr	r3, [pc, #156]	; (8013bd0 <expf+0xdc>)
 8013b34:	622f      	str	r7, [r5, #32]
 8013b36:	606b      	str	r3, [r5, #4]
 8013b38:	1c20      	adds	r0, r4, #0
 8013b3a:	f7ff fa01 	bl	8012f40 <__aeabi_f2d>
 8013b3e:	2300      	movs	r3, #0
 8013b40:	2200      	movs	r2, #0
 8013b42:	61aa      	str	r2, [r5, #24]
 8013b44:	61eb      	str	r3, [r5, #28]
 8013b46:	2300      	movs	r3, #0
 8013b48:	56f3      	ldrsb	r3, [r6, r3]
 8013b4a:	6128      	str	r0, [r5, #16]
 8013b4c:	6169      	str	r1, [r5, #20]
 8013b4e:	60a8      	str	r0, [r5, #8]
 8013b50:	60e9      	str	r1, [r5, #12]
 8013b52:	2b02      	cmp	r3, #2
 8013b54:	d031      	beq.n	8013bba <expf+0xc6>
 8013b56:	0028      	movs	r0, r5
 8013b58:	f001 fbc2 	bl	80152e0 <matherr>
 8013b5c:	2800      	cmp	r0, #0
 8013b5e:	d02c      	beq.n	8013bba <expf+0xc6>
 8013b60:	6a2b      	ldr	r3, [r5, #32]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d003      	beq.n	8013b6e <expf+0x7a>
 8013b66:	f7ff fb87 	bl	8013278 <__errno>
 8013b6a:	6a2b      	ldr	r3, [r5, #32]
 8013b6c:	6003      	str	r3, [r0, #0]
 8013b6e:	69a8      	ldr	r0, [r5, #24]
 8013b70:	69e9      	ldr	r1, [r5, #28]
 8013b72:	f7ff fa37 	bl	8012fe4 <__aeabi_d2f>
 8013b76:	1c05      	adds	r5, r0, #0
 8013b78:	1c28      	adds	r0, r5, #0
 8013b7a:	b00b      	add	sp, #44	; 0x2c
 8013b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b7e:	2303      	movs	r3, #3
 8013b80:	466d      	mov	r5, sp
 8013b82:	9300      	str	r3, [sp, #0]
 8013b84:	4b12      	ldr	r3, [pc, #72]	; (8013bd0 <expf+0xdc>)
 8013b86:	1c20      	adds	r0, r4, #0
 8013b88:	606b      	str	r3, [r5, #4]
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	622b      	str	r3, [r5, #32]
 8013b8e:	f7ff f9d7 	bl	8012f40 <__aeabi_f2d>
 8013b92:	2300      	movs	r3, #0
 8013b94:	56f3      	ldrsb	r3, [r6, r3]
 8013b96:	6128      	str	r0, [r5, #16]
 8013b98:	6169      	str	r1, [r5, #20]
 8013b9a:	60a8      	str	r0, [r5, #8]
 8013b9c:	60e9      	str	r1, [r5, #12]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d105      	bne.n	8013bae <expf+0xba>
 8013ba2:	22e0      	movs	r2, #224	; 0xe0
 8013ba4:	4b0b      	ldr	r3, [pc, #44]	; (8013bd4 <expf+0xe0>)
 8013ba6:	0612      	lsls	r2, r2, #24
 8013ba8:	61aa      	str	r2, [r5, #24]
 8013baa:	61eb      	str	r3, [r5, #28]
 8013bac:	e7d3      	b.n	8013b56 <expf+0x62>
 8013bae:	2000      	movs	r0, #0
 8013bb0:	4909      	ldr	r1, [pc, #36]	; (8013bd8 <expf+0xe4>)
 8013bb2:	61a8      	str	r0, [r5, #24]
 8013bb4:	61e9      	str	r1, [r5, #28]
 8013bb6:	2b02      	cmp	r3, #2
 8013bb8:	d1cd      	bne.n	8013b56 <expf+0x62>
 8013bba:	f7ff fb5d 	bl	8013278 <__errno>
 8013bbe:	2322      	movs	r3, #34	; 0x22
 8013bc0:	6003      	str	r3, [r0, #0]
 8013bc2:	e7cd      	b.n	8013b60 <expf+0x6c>
 8013bc4:	2000006c 	.word	0x2000006c
 8013bc8:	42b17180 	.word	0x42b17180
 8013bcc:	c2cff1b5 	.word	0xc2cff1b5
 8013bd0:	0801ed08 	.word	0x0801ed08
 8013bd4:	47efffff 	.word	0x47efffff
 8013bd8:	7ff00000 	.word	0x7ff00000

08013bdc <log10f>:
 8013bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bde:	2500      	movs	r5, #0
 8013be0:	b08d      	sub	sp, #52	; 0x34
 8013be2:	1c04      	adds	r4, r0, #0
 8013be4:	f000 fc58 	bl	8014498 <__ieee754_log10f>
 8013be8:	4b35      	ldr	r3, [pc, #212]	; (8013cc0 <log10f+0xe4>)
 8013bea:	1c06      	adds	r6, r0, #0
 8013bec:	575d      	ldrsb	r5, [r3, r5]
 8013bee:	1c6b      	adds	r3, r5, #1
 8013bf0:	d00b      	beq.n	8013c0a <log10f+0x2e>
 8013bf2:	1c21      	adds	r1, r4, #0
 8013bf4:	1c20      	adds	r0, r4, #0
 8013bf6:	f7fd fb45 	bl	8011284 <__aeabi_fcmpun>
 8013bfa:	1e07      	subs	r7, r0, #0
 8013bfc:	d105      	bne.n	8013c0a <log10f+0x2e>
 8013bfe:	2100      	movs	r1, #0
 8013c00:	1c20      	adds	r0, r4, #0
 8013c02:	f7fd f943 	bl	8010e8c <__aeabi_fcmple>
 8013c06:	2800      	cmp	r0, #0
 8013c08:	d102      	bne.n	8013c10 <log10f+0x34>
 8013c0a:	1c30      	adds	r0, r6, #0
 8013c0c:	b00d      	add	sp, #52	; 0x34
 8013c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c10:	4b2c      	ldr	r3, [pc, #176]	; (8013cc4 <log10f+0xe8>)
 8013c12:	1c20      	adds	r0, r4, #0
 8013c14:	9303      	str	r3, [sp, #12]
 8013c16:	970a      	str	r7, [sp, #40]	; 0x28
 8013c18:	f7ff f992 	bl	8012f40 <__aeabi_f2d>
 8013c1c:	9006      	str	r0, [sp, #24]
 8013c1e:	9107      	str	r1, [sp, #28]
 8013c20:	9004      	str	r0, [sp, #16]
 8013c22:	9105      	str	r1, [sp, #20]
 8013c24:	2d00      	cmp	r5, #0
 8013c26:	d11b      	bne.n	8013c60 <log10f+0x84>
 8013c28:	22e0      	movs	r2, #224	; 0xe0
 8013c2a:	4b27      	ldr	r3, [pc, #156]	; (8013cc8 <log10f+0xec>)
 8013c2c:	0612      	lsls	r2, r2, #24
 8013c2e:	2100      	movs	r1, #0
 8013c30:	1c20      	adds	r0, r4, #0
 8013c32:	9208      	str	r2, [sp, #32]
 8013c34:	9309      	str	r3, [sp, #36]	; 0x24
 8013c36:	f7fd f919 	bl	8010e6c <__aeabi_fcmpeq>
 8013c3a:	2800      	cmp	r0, #0
 8013c3c:	d037      	beq.n	8013cae <log10f+0xd2>
 8013c3e:	2302      	movs	r3, #2
 8013c40:	9302      	str	r3, [sp, #8]
 8013c42:	a802      	add	r0, sp, #8
 8013c44:	f001 fb4c 	bl	80152e0 <matherr>
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	d017      	beq.n	8013c7c <log10f+0xa0>
 8013c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c4e:	9301      	str	r3, [sp, #4]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d118      	bne.n	8013c86 <log10f+0xaa>
 8013c54:	9808      	ldr	r0, [sp, #32]
 8013c56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c58:	f7ff f9c4 	bl	8012fe4 <__aeabi_d2f>
 8013c5c:	1c06      	adds	r6, r0, #0
 8013c5e:	e7d4      	b.n	8013c0a <log10f+0x2e>
 8013c60:	2200      	movs	r2, #0
 8013c62:	4b1a      	ldr	r3, [pc, #104]	; (8013ccc <log10f+0xf0>)
 8013c64:	2100      	movs	r1, #0
 8013c66:	1c20      	adds	r0, r4, #0
 8013c68:	9208      	str	r2, [sp, #32]
 8013c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8013c6c:	f7fd f8fe 	bl	8010e6c <__aeabi_fcmpeq>
 8013c70:	2800      	cmp	r0, #0
 8013c72:	d00e      	beq.n	8013c92 <log10f+0xb6>
 8013c74:	2302      	movs	r3, #2
 8013c76:	9302      	str	r3, [sp, #8]
 8013c78:	2d02      	cmp	r5, #2
 8013c7a:	d1e2      	bne.n	8013c42 <log10f+0x66>
 8013c7c:	f7ff fafc 	bl	8013278 <__errno>
 8013c80:	2322      	movs	r3, #34	; 0x22
 8013c82:	6003      	str	r3, [r0, #0]
 8013c84:	e7e2      	b.n	8013c4c <log10f+0x70>
 8013c86:	f7ff faf7 	bl	8013278 <__errno>
 8013c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c8c:	9301      	str	r3, [sp, #4]
 8013c8e:	6003      	str	r3, [r0, #0]
 8013c90:	e7e0      	b.n	8013c54 <log10f+0x78>
 8013c92:	2301      	movs	r3, #1
 8013c94:	9302      	str	r3, [sp, #8]
 8013c96:	2d02      	cmp	r5, #2
 8013c98:	d10b      	bne.n	8013cb2 <log10f+0xd6>
 8013c9a:	f7ff faed 	bl	8013278 <__errno>
 8013c9e:	2321      	movs	r3, #33	; 0x21
 8013ca0:	6003      	str	r3, [r0, #0]
 8013ca2:	480b      	ldr	r0, [pc, #44]	; (8013cd0 <log10f+0xf4>)
 8013ca4:	f001 fb1e 	bl	80152e4 <nan>
 8013ca8:	9008      	str	r0, [sp, #32]
 8013caa:	9109      	str	r1, [sp, #36]	; 0x24
 8013cac:	e7ce      	b.n	8013c4c <log10f+0x70>
 8013cae:	2301      	movs	r3, #1
 8013cb0:	9302      	str	r3, [sp, #8]
 8013cb2:	a802      	add	r0, sp, #8
 8013cb4:	f001 fb14 	bl	80152e0 <matherr>
 8013cb8:	2800      	cmp	r0, #0
 8013cba:	d1f2      	bne.n	8013ca2 <log10f+0xc6>
 8013cbc:	e7ed      	b.n	8013c9a <log10f+0xbe>
 8013cbe:	46c0      	nop			; (mov r8, r8)
 8013cc0:	2000006c 	.word	0x2000006c
 8013cc4:	0801ed10 	.word	0x0801ed10
 8013cc8:	c7efffff 	.word	0xc7efffff
 8013ccc:	fff00000 	.word	0xfff00000
 8013cd0:	0801e008 	.word	0x0801e008

08013cd4 <__ieee754_rem_pio2>:
 8013cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cd6:	464e      	mov	r6, r9
 8013cd8:	4645      	mov	r5, r8
 8013cda:	46de      	mov	lr, fp
 8013cdc:	4657      	mov	r7, sl
 8013cde:	b5e0      	push	{r5, r6, r7, lr}
 8013ce0:	4be1      	ldr	r3, [pc, #900]	; (8014068 <__ieee754_rem_pio2+0x394>)
 8013ce2:	004c      	lsls	r4, r1, #1
 8013ce4:	b08f      	sub	sp, #60	; 0x3c
 8013ce6:	4690      	mov	r8, r2
 8013ce8:	4689      	mov	r9, r1
 8013cea:	0864      	lsrs	r4, r4, #1
 8013cec:	429c      	cmp	r4, r3
 8013cee:	dc00      	bgt.n	8013cf2 <__ieee754_rem_pio2+0x1e>
 8013cf0:	e087      	b.n	8013e02 <__ieee754_rem_pio2+0x12e>
 8013cf2:	4bde      	ldr	r3, [pc, #888]	; (801406c <__ieee754_rem_pio2+0x398>)
 8013cf4:	429c      	cmp	r4, r3
 8013cf6:	dc22      	bgt.n	8013d3e <__ieee754_rem_pio2+0x6a>
 8013cf8:	4add      	ldr	r2, [pc, #884]	; (8014070 <__ieee754_rem_pio2+0x39c>)
 8013cfa:	2900      	cmp	r1, #0
 8013cfc:	dc00      	bgt.n	8013d00 <__ieee754_rem_pio2+0x2c>
 8013cfe:	e092      	b.n	8013e26 <__ieee754_rem_pio2+0x152>
 8013d00:	4bdc      	ldr	r3, [pc, #880]	; (8014074 <__ieee754_rem_pio2+0x3a0>)
 8013d02:	f7fe fd17 	bl	8012734 <__aeabi_dsub>
 8013d06:	4bdb      	ldr	r3, [pc, #876]	; (8014074 <__ieee754_rem_pio2+0x3a0>)
 8013d08:	0006      	movs	r6, r0
 8013d0a:	000f      	movs	r7, r1
 8013d0c:	429c      	cmp	r4, r3
 8013d0e:	d100      	bne.n	8013d12 <__ieee754_rem_pio2+0x3e>
 8013d10:	e17e      	b.n	8014010 <__ieee754_rem_pio2+0x33c>
 8013d12:	4ad9      	ldr	r2, [pc, #868]	; (8014078 <__ieee754_rem_pio2+0x3a4>)
 8013d14:	4bd9      	ldr	r3, [pc, #868]	; (801407c <__ieee754_rem_pio2+0x3a8>)
 8013d16:	f7fe fd0d 	bl	8012734 <__aeabi_dsub>
 8013d1a:	0002      	movs	r2, r0
 8013d1c:	000b      	movs	r3, r1
 8013d1e:	4641      	mov	r1, r8
 8013d20:	0030      	movs	r0, r6
 8013d22:	600a      	str	r2, [r1, #0]
 8013d24:	604b      	str	r3, [r1, #4]
 8013d26:	0039      	movs	r1, r7
 8013d28:	f7fe fd04 	bl	8012734 <__aeabi_dsub>
 8013d2c:	4bd3      	ldr	r3, [pc, #844]	; (801407c <__ieee754_rem_pio2+0x3a8>)
 8013d2e:	4ad2      	ldr	r2, [pc, #840]	; (8014078 <__ieee754_rem_pio2+0x3a4>)
 8013d30:	f7fe fd00 	bl	8012734 <__aeabi_dsub>
 8013d34:	4643      	mov	r3, r8
 8013d36:	2501      	movs	r5, #1
 8013d38:	6098      	str	r0, [r3, #8]
 8013d3a:	60d9      	str	r1, [r3, #12]
 8013d3c:	e06b      	b.n	8013e16 <__ieee754_rem_pio2+0x142>
 8013d3e:	4bd0      	ldr	r3, [pc, #832]	; (8014080 <__ieee754_rem_pio2+0x3ac>)
 8013d40:	429c      	cmp	r4, r3
 8013d42:	dc00      	bgt.n	8013d46 <__ieee754_rem_pio2+0x72>
 8013d44:	e08f      	b.n	8013e66 <__ieee754_rem_pio2+0x192>
 8013d46:	4bcf      	ldr	r3, [pc, #828]	; (8014084 <__ieee754_rem_pio2+0x3b0>)
 8013d48:	429c      	cmp	r4, r3
 8013d4a:	dd00      	ble.n	8013d4e <__ieee754_rem_pio2+0x7a>
 8013d4c:	e155      	b.n	8013ffa <__ieee754_rem_pio2+0x326>
 8013d4e:	4ace      	ldr	r2, [pc, #824]	; (8014088 <__ieee754_rem_pio2+0x3b4>)
 8013d50:	1523      	asrs	r3, r4, #20
 8013d52:	4692      	mov	sl, r2
 8013d54:	449a      	add	sl, r3
 8013d56:	4651      	mov	r1, sl
 8013d58:	0509      	lsls	r1, r1, #20
 8013d5a:	1a63      	subs	r3, r4, r1
 8013d5c:	0019      	movs	r1, r3
 8013d5e:	001d      	movs	r5, r3
 8013d60:	0004      	movs	r4, r0
 8013d62:	f7ff f84b 	bl	8012dfc <__aeabi_d2iz>
 8013d66:	f7ff f87f 	bl	8012e68 <__aeabi_i2d>
 8013d6a:	0002      	movs	r2, r0
 8013d6c:	000b      	movs	r3, r1
 8013d6e:	0020      	movs	r0, r4
 8013d70:	0029      	movs	r1, r5
 8013d72:	9208      	str	r2, [sp, #32]
 8013d74:	9309      	str	r3, [sp, #36]	; 0x24
 8013d76:	f7fe fcdd 	bl	8012734 <__aeabi_dsub>
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	4bc3      	ldr	r3, [pc, #780]	; (801408c <__ieee754_rem_pio2+0x3b8>)
 8013d7e:	f7fe fa67 	bl	8012250 <__aeabi_dmul>
 8013d82:	000f      	movs	r7, r1
 8013d84:	0006      	movs	r6, r0
 8013d86:	f7ff f839 	bl	8012dfc <__aeabi_d2iz>
 8013d8a:	f7ff f86d 	bl	8012e68 <__aeabi_i2d>
 8013d8e:	0004      	movs	r4, r0
 8013d90:	000d      	movs	r5, r1
 8013d92:	0002      	movs	r2, r0
 8013d94:	000b      	movs	r3, r1
 8013d96:	0030      	movs	r0, r6
 8013d98:	0039      	movs	r1, r7
 8013d9a:	940a      	str	r4, [sp, #40]	; 0x28
 8013d9c:	950b      	str	r5, [sp, #44]	; 0x2c
 8013d9e:	f7fe fcc9 	bl	8012734 <__aeabi_dsub>
 8013da2:	2200      	movs	r2, #0
 8013da4:	4bb9      	ldr	r3, [pc, #740]	; (801408c <__ieee754_rem_pio2+0x3b8>)
 8013da6:	f7fe fa53 	bl	8012250 <__aeabi_dmul>
 8013daa:	2200      	movs	r2, #0
 8013dac:	2300      	movs	r3, #0
 8013dae:	900c      	str	r0, [sp, #48]	; 0x30
 8013db0:	910d      	str	r1, [sp, #52]	; 0x34
 8013db2:	f7fd f821 	bl	8010df8 <__aeabi_dcmpeq>
 8013db6:	2800      	cmp	r0, #0
 8013db8:	d100      	bne.n	8013dbc <__ieee754_rem_pio2+0xe8>
 8013dba:	e192      	b.n	80140e2 <__ieee754_rem_pio2+0x40e>
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	0020      	movs	r0, r4
 8013dc2:	0029      	movs	r1, r5
 8013dc4:	f7fd f818 	bl	8010df8 <__aeabi_dcmpeq>
 8013dc8:	4243      	negs	r3, r0
 8013dca:	4143      	adcs	r3, r0
 8013dcc:	3301      	adds	r3, #1
 8013dce:	4ab0      	ldr	r2, [pc, #704]	; (8014090 <__ieee754_rem_pio2+0x3bc>)
 8013dd0:	4641      	mov	r1, r8
 8013dd2:	9201      	str	r2, [sp, #4]
 8013dd4:	2202      	movs	r2, #2
 8013dd6:	a808      	add	r0, sp, #32
 8013dd8:	9200      	str	r2, [sp, #0]
 8013dda:	4652      	mov	r2, sl
 8013ddc:	f000 fcce 	bl	801477c <__kernel_rem_pio2>
 8013de0:	464b      	mov	r3, r9
 8013de2:	0005      	movs	r5, r0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	da16      	bge.n	8013e16 <__ieee754_rem_pio2+0x142>
 8013de8:	2280      	movs	r2, #128	; 0x80
 8013dea:	4643      	mov	r3, r8
 8013dec:	0612      	lsls	r2, r2, #24
 8013dee:	4694      	mov	ip, r2
 8013df0:	4642      	mov	r2, r8
 8013df2:	685b      	ldr	r3, [r3, #4]
 8013df4:	4245      	negs	r5, r0
 8013df6:	4463      	add	r3, ip
 8013df8:	6053      	str	r3, [r2, #4]
 8013dfa:	68d3      	ldr	r3, [r2, #12]
 8013dfc:	4463      	add	r3, ip
 8013dfe:	60d3      	str	r3, [r2, #12]
 8013e00:	e009      	b.n	8013e16 <__ieee754_rem_pio2+0x142>
 8013e02:	000b      	movs	r3, r1
 8013e04:	0002      	movs	r2, r0
 8013e06:	4641      	mov	r1, r8
 8013e08:	600a      	str	r2, [r1, #0]
 8013e0a:	604b      	str	r3, [r1, #4]
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	2300      	movs	r3, #0
 8013e10:	2500      	movs	r5, #0
 8013e12:	608a      	str	r2, [r1, #8]
 8013e14:	60cb      	str	r3, [r1, #12]
 8013e16:	0028      	movs	r0, r5
 8013e18:	b00f      	add	sp, #60	; 0x3c
 8013e1a:	bc3c      	pop	{r2, r3, r4, r5}
 8013e1c:	4690      	mov	r8, r2
 8013e1e:	4699      	mov	r9, r3
 8013e20:	46a2      	mov	sl, r4
 8013e22:	46ab      	mov	fp, r5
 8013e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e26:	4b93      	ldr	r3, [pc, #588]	; (8014074 <__ieee754_rem_pio2+0x3a0>)
 8013e28:	f7fd faec 	bl	8011404 <__aeabi_dadd>
 8013e2c:	4b91      	ldr	r3, [pc, #580]	; (8014074 <__ieee754_rem_pio2+0x3a0>)
 8013e2e:	0006      	movs	r6, r0
 8013e30:	000f      	movs	r7, r1
 8013e32:	429c      	cmp	r4, r3
 8013e34:	d100      	bne.n	8013e38 <__ieee754_rem_pio2+0x164>
 8013e36:	e13d      	b.n	80140b4 <__ieee754_rem_pio2+0x3e0>
 8013e38:	4a8f      	ldr	r2, [pc, #572]	; (8014078 <__ieee754_rem_pio2+0x3a4>)
 8013e3a:	4b90      	ldr	r3, [pc, #576]	; (801407c <__ieee754_rem_pio2+0x3a8>)
 8013e3c:	f7fd fae2 	bl	8011404 <__aeabi_dadd>
 8013e40:	0002      	movs	r2, r0
 8013e42:	000b      	movs	r3, r1
 8013e44:	4641      	mov	r1, r8
 8013e46:	0030      	movs	r0, r6
 8013e48:	600a      	str	r2, [r1, #0]
 8013e4a:	604b      	str	r3, [r1, #4]
 8013e4c:	0039      	movs	r1, r7
 8013e4e:	f7fe fc71 	bl	8012734 <__aeabi_dsub>
 8013e52:	4a89      	ldr	r2, [pc, #548]	; (8014078 <__ieee754_rem_pio2+0x3a4>)
 8013e54:	4b89      	ldr	r3, [pc, #548]	; (801407c <__ieee754_rem_pio2+0x3a8>)
 8013e56:	f7fd fad5 	bl	8011404 <__aeabi_dadd>
 8013e5a:	2501      	movs	r5, #1
 8013e5c:	4643      	mov	r3, r8
 8013e5e:	426d      	negs	r5, r5
 8013e60:	6098      	str	r0, [r3, #8]
 8013e62:	60d9      	str	r1, [r3, #12]
 8013e64:	e7d7      	b.n	8013e16 <__ieee754_rem_pio2+0x142>
 8013e66:	f001 f99b 	bl	80151a0 <fabs>
 8013e6a:	4a8a      	ldr	r2, [pc, #552]	; (8014094 <__ieee754_rem_pio2+0x3c0>)
 8013e6c:	4b8a      	ldr	r3, [pc, #552]	; (8014098 <__ieee754_rem_pio2+0x3c4>)
 8013e6e:	0006      	movs	r6, r0
 8013e70:	000f      	movs	r7, r1
 8013e72:	f7fe f9ed 	bl	8012250 <__aeabi_dmul>
 8013e76:	2200      	movs	r2, #0
 8013e78:	4b88      	ldr	r3, [pc, #544]	; (801409c <__ieee754_rem_pio2+0x3c8>)
 8013e7a:	f7fd fac3 	bl	8011404 <__aeabi_dadd>
 8013e7e:	f7fe ffbd 	bl	8012dfc <__aeabi_d2iz>
 8013e82:	0005      	movs	r5, r0
 8013e84:	f7fe fff0 	bl	8012e68 <__aeabi_i2d>
 8013e88:	4a79      	ldr	r2, [pc, #484]	; (8014070 <__ieee754_rem_pio2+0x39c>)
 8013e8a:	4b7a      	ldr	r3, [pc, #488]	; (8014074 <__ieee754_rem_pio2+0x3a0>)
 8013e8c:	9004      	str	r0, [sp, #16]
 8013e8e:	9105      	str	r1, [sp, #20]
 8013e90:	f7fe f9de 	bl	8012250 <__aeabi_dmul>
 8013e94:	0002      	movs	r2, r0
 8013e96:	000b      	movs	r3, r1
 8013e98:	0030      	movs	r0, r6
 8013e9a:	0039      	movs	r1, r7
 8013e9c:	f7fe fc4a 	bl	8012734 <__aeabi_dsub>
 8013ea0:	4a75      	ldr	r2, [pc, #468]	; (8014078 <__ieee754_rem_pio2+0x3a4>)
 8013ea2:	0006      	movs	r6, r0
 8013ea4:	000f      	movs	r7, r1
 8013ea6:	9804      	ldr	r0, [sp, #16]
 8013ea8:	9905      	ldr	r1, [sp, #20]
 8013eaa:	4b74      	ldr	r3, [pc, #464]	; (801407c <__ieee754_rem_pio2+0x3a8>)
 8013eac:	f7fe f9d0 	bl	8012250 <__aeabi_dmul>
 8013eb0:	9002      	str	r0, [sp, #8]
 8013eb2:	9103      	str	r1, [sp, #12]
 8013eb4:	2d1f      	cmp	r5, #31
 8013eb6:	dc00      	bgt.n	8013eba <__ieee754_rem_pio2+0x1e6>
 8013eb8:	e0c7      	b.n	801404a <__ieee754_rem_pio2+0x376>
 8013eba:	9a02      	ldr	r2, [sp, #8]
 8013ebc:	9b03      	ldr	r3, [sp, #12]
 8013ebe:	0030      	movs	r0, r6
 8013ec0:	0039      	movs	r1, r7
 8013ec2:	f7fe fc37 	bl	8012734 <__aeabi_dsub>
 8013ec6:	4683      	mov	fp, r0
 8013ec8:	468a      	mov	sl, r1
 8013eca:	4653      	mov	r3, sl
 8013ecc:	005b      	lsls	r3, r3, #1
 8013ece:	1524      	asrs	r4, r4, #20
 8013ed0:	0d5b      	lsrs	r3, r3, #21
 8013ed2:	1ae3      	subs	r3, r4, r3
 8013ed4:	2b10      	cmp	r3, #16
 8013ed6:	dd6c      	ble.n	8013fb2 <__ieee754_rem_pio2+0x2de>
 8013ed8:	9804      	ldr	r0, [sp, #16]
 8013eda:	9905      	ldr	r1, [sp, #20]
 8013edc:	22d3      	movs	r2, #211	; 0xd3
 8013ede:	4b67      	ldr	r3, [pc, #412]	; (801407c <__ieee754_rem_pio2+0x3a8>)
 8013ee0:	0552      	lsls	r2, r2, #21
 8013ee2:	f7fe f9b5 	bl	8012250 <__aeabi_dmul>
 8013ee6:	0002      	movs	r2, r0
 8013ee8:	000b      	movs	r3, r1
 8013eea:	0030      	movs	r0, r6
 8013eec:	0039      	movs	r1, r7
 8013eee:	9202      	str	r2, [sp, #8]
 8013ef0:	9303      	str	r3, [sp, #12]
 8013ef2:	f7fe fc1f 	bl	8012734 <__aeabi_dsub>
 8013ef6:	000a      	movs	r2, r1
 8013ef8:	0001      	movs	r1, r0
 8013efa:	0013      	movs	r3, r2
 8013efc:	9106      	str	r1, [sp, #24]
 8013efe:	9207      	str	r2, [sp, #28]
 8013f00:	0002      	movs	r2, r0
 8013f02:	0039      	movs	r1, r7
 8013f04:	0030      	movs	r0, r6
 8013f06:	f7fe fc15 	bl	8012734 <__aeabi_dsub>
 8013f0a:	9a02      	ldr	r2, [sp, #8]
 8013f0c:	9b03      	ldr	r3, [sp, #12]
 8013f0e:	f7fe fc11 	bl	8012734 <__aeabi_dsub>
 8013f12:	0006      	movs	r6, r0
 8013f14:	000f      	movs	r7, r1
 8013f16:	9804      	ldr	r0, [sp, #16]
 8013f18:	9905      	ldr	r1, [sp, #20]
 8013f1a:	4a61      	ldr	r2, [pc, #388]	; (80140a0 <__ieee754_rem_pio2+0x3cc>)
 8013f1c:	4b61      	ldr	r3, [pc, #388]	; (80140a4 <__ieee754_rem_pio2+0x3d0>)
 8013f1e:	f7fe f997 	bl	8012250 <__aeabi_dmul>
 8013f22:	0032      	movs	r2, r6
 8013f24:	003b      	movs	r3, r7
 8013f26:	f7fe fc05 	bl	8012734 <__aeabi_dsub>
 8013f2a:	9e06      	ldr	r6, [sp, #24]
 8013f2c:	9f07      	ldr	r7, [sp, #28]
 8013f2e:	000b      	movs	r3, r1
 8013f30:	0002      	movs	r2, r0
 8013f32:	0039      	movs	r1, r7
 8013f34:	0030      	movs	r0, r6
 8013f36:	9202      	str	r2, [sp, #8]
 8013f38:	9303      	str	r3, [sp, #12]
 8013f3a:	f7fe fbfb 	bl	8012734 <__aeabi_dsub>
 8013f3e:	004b      	lsls	r3, r1, #1
 8013f40:	0d5b      	lsrs	r3, r3, #21
 8013f42:	4683      	mov	fp, r0
 8013f44:	468a      	mov	sl, r1
 8013f46:	1ae4      	subs	r4, r4, r3
 8013f48:	2c31      	cmp	r4, #49	; 0x31
 8013f4a:	dd32      	ble.n	8013fb2 <__ieee754_rem_pio2+0x2de>
 8013f4c:	9804      	ldr	r0, [sp, #16]
 8013f4e:	9905      	ldr	r1, [sp, #20]
 8013f50:	22b8      	movs	r2, #184	; 0xb8
 8013f52:	4b54      	ldr	r3, [pc, #336]	; (80140a4 <__ieee754_rem_pio2+0x3d0>)
 8013f54:	0592      	lsls	r2, r2, #22
 8013f56:	f7fe f97b 	bl	8012250 <__aeabi_dmul>
 8013f5a:	0003      	movs	r3, r0
 8013f5c:	000c      	movs	r4, r1
 8013f5e:	0002      	movs	r2, r0
 8013f60:	9302      	str	r3, [sp, #8]
 8013f62:	9403      	str	r4, [sp, #12]
 8013f64:	000b      	movs	r3, r1
 8013f66:	9806      	ldr	r0, [sp, #24]
 8013f68:	9907      	ldr	r1, [sp, #28]
 8013f6a:	f7fe fbe3 	bl	8012734 <__aeabi_dsub>
 8013f6e:	0002      	movs	r2, r0
 8013f70:	000b      	movs	r3, r1
 8013f72:	0006      	movs	r6, r0
 8013f74:	000f      	movs	r7, r1
 8013f76:	9806      	ldr	r0, [sp, #24]
 8013f78:	9907      	ldr	r1, [sp, #28]
 8013f7a:	f7fe fbdb 	bl	8012734 <__aeabi_dsub>
 8013f7e:	9a02      	ldr	r2, [sp, #8]
 8013f80:	9b03      	ldr	r3, [sp, #12]
 8013f82:	f7fe fbd7 	bl	8012734 <__aeabi_dsub>
 8013f86:	4a48      	ldr	r2, [pc, #288]	; (80140a8 <__ieee754_rem_pio2+0x3d4>)
 8013f88:	9002      	str	r0, [sp, #8]
 8013f8a:	9103      	str	r1, [sp, #12]
 8013f8c:	9804      	ldr	r0, [sp, #16]
 8013f8e:	9905      	ldr	r1, [sp, #20]
 8013f90:	4b46      	ldr	r3, [pc, #280]	; (80140ac <__ieee754_rem_pio2+0x3d8>)
 8013f92:	f7fe f95d 	bl	8012250 <__aeabi_dmul>
 8013f96:	9a02      	ldr	r2, [sp, #8]
 8013f98:	9b03      	ldr	r3, [sp, #12]
 8013f9a:	f7fe fbcb 	bl	8012734 <__aeabi_dsub>
 8013f9e:	0002      	movs	r2, r0
 8013fa0:	000b      	movs	r3, r1
 8013fa2:	0030      	movs	r0, r6
 8013fa4:	0039      	movs	r1, r7
 8013fa6:	9202      	str	r2, [sp, #8]
 8013fa8:	9303      	str	r3, [sp, #12]
 8013faa:	f7fe fbc3 	bl	8012734 <__aeabi_dsub>
 8013fae:	4683      	mov	fp, r0
 8013fb0:	468a      	mov	sl, r1
 8013fb2:	465a      	mov	r2, fp
 8013fb4:	4653      	mov	r3, sl
 8013fb6:	4641      	mov	r1, r8
 8013fb8:	0030      	movs	r0, r6
 8013fba:	600a      	str	r2, [r1, #0]
 8013fbc:	604b      	str	r3, [r1, #4]
 8013fbe:	0039      	movs	r1, r7
 8013fc0:	f7fe fbb8 	bl	8012734 <__aeabi_dsub>
 8013fc4:	9a02      	ldr	r2, [sp, #8]
 8013fc6:	9b03      	ldr	r3, [sp, #12]
 8013fc8:	f7fe fbb4 	bl	8012734 <__aeabi_dsub>
 8013fcc:	4644      	mov	r4, r8
 8013fce:	000b      	movs	r3, r1
 8013fd0:	0002      	movs	r2, r0
 8013fd2:	60a2      	str	r2, [r4, #8]
 8013fd4:	60e3      	str	r3, [r4, #12]
 8013fd6:	464b      	mov	r3, r9
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	db00      	blt.n	8013fde <__ieee754_rem_pio2+0x30a>
 8013fdc:	e71b      	b.n	8013e16 <__ieee754_rem_pio2+0x142>
 8013fde:	465b      	mov	r3, fp
 8013fe0:	6023      	str	r3, [r4, #0]
 8013fe2:	2380      	movs	r3, #128	; 0x80
 8013fe4:	061b      	lsls	r3, r3, #24
 8013fe6:	4453      	add	r3, sl
 8013fe8:	6063      	str	r3, [r4, #4]
 8013fea:	2380      	movs	r3, #128	; 0x80
 8013fec:	061b      	lsls	r3, r3, #24
 8013fee:	469c      	mov	ip, r3
 8013ff0:	4461      	add	r1, ip
 8013ff2:	60a0      	str	r0, [r4, #8]
 8013ff4:	60e1      	str	r1, [r4, #12]
 8013ff6:	426d      	negs	r5, r5
 8013ff8:	e70d      	b.n	8013e16 <__ieee754_rem_pio2+0x142>
 8013ffa:	000b      	movs	r3, r1
 8013ffc:	0002      	movs	r2, r0
 8013ffe:	f7fe fb99 	bl	8012734 <__aeabi_dsub>
 8014002:	4643      	mov	r3, r8
 8014004:	2500      	movs	r5, #0
 8014006:	6098      	str	r0, [r3, #8]
 8014008:	60d9      	str	r1, [r3, #12]
 801400a:	6018      	str	r0, [r3, #0]
 801400c:	6059      	str	r1, [r3, #4]
 801400e:	e702      	b.n	8013e16 <__ieee754_rem_pio2+0x142>
 8014010:	22d3      	movs	r2, #211	; 0xd3
 8014012:	4b1a      	ldr	r3, [pc, #104]	; (801407c <__ieee754_rem_pio2+0x3a8>)
 8014014:	0552      	lsls	r2, r2, #21
 8014016:	f7fe fb8d 	bl	8012734 <__aeabi_dsub>
 801401a:	4a21      	ldr	r2, [pc, #132]	; (80140a0 <__ieee754_rem_pio2+0x3cc>)
 801401c:	4b21      	ldr	r3, [pc, #132]	; (80140a4 <__ieee754_rem_pio2+0x3d0>)
 801401e:	000d      	movs	r5, r1
 8014020:	0004      	movs	r4, r0
 8014022:	f7fe fb87 	bl	8012734 <__aeabi_dsub>
 8014026:	0002      	movs	r2, r0
 8014028:	000b      	movs	r3, r1
 801402a:	4641      	mov	r1, r8
 801402c:	0020      	movs	r0, r4
 801402e:	600a      	str	r2, [r1, #0]
 8014030:	604b      	str	r3, [r1, #4]
 8014032:	0029      	movs	r1, r5
 8014034:	f7fe fb7e 	bl	8012734 <__aeabi_dsub>
 8014038:	4b1a      	ldr	r3, [pc, #104]	; (80140a4 <__ieee754_rem_pio2+0x3d0>)
 801403a:	4a19      	ldr	r2, [pc, #100]	; (80140a0 <__ieee754_rem_pio2+0x3cc>)
 801403c:	f7fe fb7a 	bl	8012734 <__aeabi_dsub>
 8014040:	4643      	mov	r3, r8
 8014042:	2501      	movs	r5, #1
 8014044:	6098      	str	r0, [r3, #8]
 8014046:	60d9      	str	r1, [r3, #12]
 8014048:	e6e5      	b.n	8013e16 <__ieee754_rem_pio2+0x142>
 801404a:	0002      	movs	r2, r0
 801404c:	000b      	movs	r3, r1
 801404e:	0030      	movs	r0, r6
 8014050:	0039      	movs	r1, r7
 8014052:	f7fe fb6f 	bl	8012734 <__aeabi_dsub>
 8014056:	1e6b      	subs	r3, r5, #1
 8014058:	4a15      	ldr	r2, [pc, #84]	; (80140b0 <__ieee754_rem_pio2+0x3dc>)
 801405a:	009b      	lsls	r3, r3, #2
 801405c:	589b      	ldr	r3, [r3, r2]
 801405e:	4683      	mov	fp, r0
 8014060:	468a      	mov	sl, r1
 8014062:	42a3      	cmp	r3, r4
 8014064:	d1a5      	bne.n	8013fb2 <__ieee754_rem_pio2+0x2de>
 8014066:	e730      	b.n	8013eca <__ieee754_rem_pio2+0x1f6>
 8014068:	3fe921fb 	.word	0x3fe921fb
 801406c:	4002d97b 	.word	0x4002d97b
 8014070:	54400000 	.word	0x54400000
 8014074:	3ff921fb 	.word	0x3ff921fb
 8014078:	1a626331 	.word	0x1a626331
 801407c:	3dd0b461 	.word	0x3dd0b461
 8014080:	413921fb 	.word	0x413921fb
 8014084:	7fefffff 	.word	0x7fefffff
 8014088:	fffffbea 	.word	0xfffffbea
 801408c:	41700000 	.word	0x41700000
 8014090:	0801ed98 	.word	0x0801ed98
 8014094:	6dc9c883 	.word	0x6dc9c883
 8014098:	3fe45f30 	.word	0x3fe45f30
 801409c:	3fe00000 	.word	0x3fe00000
 80140a0:	2e037073 	.word	0x2e037073
 80140a4:	3ba3198a 	.word	0x3ba3198a
 80140a8:	252049c1 	.word	0x252049c1
 80140ac:	397b839a 	.word	0x397b839a
 80140b0:	0801ed18 	.word	0x0801ed18
 80140b4:	22d3      	movs	r2, #211	; 0xd3
 80140b6:	4b0c      	ldr	r3, [pc, #48]	; (80140e8 <__ieee754_rem_pio2+0x414>)
 80140b8:	0552      	lsls	r2, r2, #21
 80140ba:	f7fd f9a3 	bl	8011404 <__aeabi_dadd>
 80140be:	4a0b      	ldr	r2, [pc, #44]	; (80140ec <__ieee754_rem_pio2+0x418>)
 80140c0:	4b0b      	ldr	r3, [pc, #44]	; (80140f0 <__ieee754_rem_pio2+0x41c>)
 80140c2:	0004      	movs	r4, r0
 80140c4:	000d      	movs	r5, r1
 80140c6:	f7fd f99d 	bl	8011404 <__aeabi_dadd>
 80140ca:	0002      	movs	r2, r0
 80140cc:	000b      	movs	r3, r1
 80140ce:	4641      	mov	r1, r8
 80140d0:	0020      	movs	r0, r4
 80140d2:	600a      	str	r2, [r1, #0]
 80140d4:	604b      	str	r3, [r1, #4]
 80140d6:	0029      	movs	r1, r5
 80140d8:	f7fe fb2c 	bl	8012734 <__aeabi_dsub>
 80140dc:	4a03      	ldr	r2, [pc, #12]	; (80140ec <__ieee754_rem_pio2+0x418>)
 80140de:	4b04      	ldr	r3, [pc, #16]	; (80140f0 <__ieee754_rem_pio2+0x41c>)
 80140e0:	e6b9      	b.n	8013e56 <__ieee754_rem_pio2+0x182>
 80140e2:	2303      	movs	r3, #3
 80140e4:	e673      	b.n	8013dce <__ieee754_rem_pio2+0xfa>
 80140e6:	46c0      	nop			; (mov r8, r8)
 80140e8:	3dd0b461 	.word	0x3dd0b461
 80140ec:	2e037073 	.word	0x2e037073
 80140f0:	3ba3198a 	.word	0x3ba3198a

080140f4 <__ieee754_sqrt>:
 80140f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140f6:	4647      	mov	r7, r8
 80140f8:	46ce      	mov	lr, r9
 80140fa:	4b67      	ldr	r3, [pc, #412]	; (8014298 <__ieee754_sqrt+0x1a4>)
 80140fc:	b580      	push	{r7, lr}
 80140fe:	000a      	movs	r2, r1
 8014100:	000f      	movs	r7, r1
 8014102:	0019      	movs	r1, r3
 8014104:	0005      	movs	r5, r0
 8014106:	4039      	ands	r1, r7
 8014108:	4299      	cmp	r1, r3
 801410a:	d100      	bne.n	801410e <__ieee754_sqrt+0x1a>
 801410c:	e09b      	b.n	8014246 <__ieee754_sqrt+0x152>
 801410e:	0004      	movs	r4, r0
 8014110:	0001      	movs	r1, r0
 8014112:	2f00      	cmp	r7, #0
 8014114:	dd69      	ble.n	80141ea <__ieee754_sqrt+0xf6>
 8014116:	153f      	asrs	r7, r7, #20
 8014118:	d100      	bne.n	801411c <__ieee754_sqrt+0x28>
 801411a:	e0b4      	b.n	8014286 <__ieee754_sqrt+0x192>
 801411c:	4b5f      	ldr	r3, [pc, #380]	; (801429c <__ieee754_sqrt+0x1a8>)
 801411e:	0312      	lsls	r2, r2, #12
 8014120:	469c      	mov	ip, r3
 8014122:	2380      	movs	r3, #128	; 0x80
 8014124:	0b12      	lsrs	r2, r2, #12
 8014126:	035b      	lsls	r3, r3, #13
 8014128:	4313      	orrs	r3, r2
 801412a:	005b      	lsls	r3, r3, #1
 801412c:	0fca      	lsrs	r2, r1, #31
 801412e:	4467      	add	r7, ip
 8014130:	189b      	adds	r3, r3, r2
 8014132:	004a      	lsls	r2, r1, #1
 8014134:	07f8      	lsls	r0, r7, #31
 8014136:	d503      	bpl.n	8014140 <__ieee754_sqrt+0x4c>
 8014138:	0fd2      	lsrs	r2, r2, #31
 801413a:	005b      	lsls	r3, r3, #1
 801413c:	189b      	adds	r3, r3, r2
 801413e:	008a      	lsls	r2, r1, #2
 8014140:	1079      	asrs	r1, r7, #1
 8014142:	468c      	mov	ip, r1
 8014144:	2100      	movs	r1, #0
 8014146:	2080      	movs	r0, #128	; 0x80
 8014148:	2416      	movs	r4, #22
 801414a:	4689      	mov	r9, r1
 801414c:	0380      	lsls	r0, r0, #14
 801414e:	180d      	adds	r5, r1, r0
 8014150:	429d      	cmp	r5, r3
 8014152:	dc02      	bgt.n	801415a <__ieee754_sqrt+0x66>
 8014154:	1829      	adds	r1, r5, r0
 8014156:	1b5b      	subs	r3, r3, r5
 8014158:	4481      	add	r9, r0
 801415a:	0fd5      	lsrs	r5, r2, #31
 801415c:	005b      	lsls	r3, r3, #1
 801415e:	3c01      	subs	r4, #1
 8014160:	195b      	adds	r3, r3, r5
 8014162:	0052      	lsls	r2, r2, #1
 8014164:	0840      	lsrs	r0, r0, #1
 8014166:	2c00      	cmp	r4, #0
 8014168:	d1f1      	bne.n	801414e <__ieee754_sqrt+0x5a>
 801416a:	2000      	movs	r0, #0
 801416c:	4680      	mov	r8, r0
 801416e:	2080      	movs	r0, #128	; 0x80
 8014170:	2520      	movs	r5, #32
 8014172:	2700      	movs	r7, #0
 8014174:	0600      	lsls	r0, r0, #24
 8014176:	e009      	b.n	801418c <__ieee754_sqrt+0x98>
 8014178:	428b      	cmp	r3, r1
 801417a:	d05c      	beq.n	8014236 <__ieee754_sqrt+0x142>
 801417c:	0fd4      	lsrs	r4, r2, #31
 801417e:	005b      	lsls	r3, r3, #1
 8014180:	3d01      	subs	r5, #1
 8014182:	18e3      	adds	r3, r4, r3
 8014184:	0052      	lsls	r2, r2, #1
 8014186:	0840      	lsrs	r0, r0, #1
 8014188:	2d00      	cmp	r5, #0
 801418a:	d016      	beq.n	80141ba <__ieee754_sqrt+0xc6>
 801418c:	19c4      	adds	r4, r0, r7
 801418e:	428b      	cmp	r3, r1
 8014190:	ddf2      	ble.n	8014178 <__ieee754_sqrt+0x84>
 8014192:	1827      	adds	r7, r4, r0
 8014194:	000e      	movs	r6, r1
 8014196:	2c00      	cmp	r4, #0
 8014198:	db49      	blt.n	801422e <__ieee754_sqrt+0x13a>
 801419a:	1a5b      	subs	r3, r3, r1
 801419c:	42a2      	cmp	r2, r4
 801419e:	4189      	sbcs	r1, r1
 80141a0:	4249      	negs	r1, r1
 80141a2:	1a5b      	subs	r3, r3, r1
 80141a4:	1b12      	subs	r2, r2, r4
 80141a6:	0fd4      	lsrs	r4, r2, #31
 80141a8:	005b      	lsls	r3, r3, #1
 80141aa:	3d01      	subs	r5, #1
 80141ac:	4480      	add	r8, r0
 80141ae:	0031      	movs	r1, r6
 80141b0:	18e3      	adds	r3, r4, r3
 80141b2:	0052      	lsls	r2, r2, #1
 80141b4:	0840      	lsrs	r0, r0, #1
 80141b6:	2d00      	cmp	r5, #0
 80141b8:	d1e8      	bne.n	801418c <__ieee754_sqrt+0x98>
 80141ba:	4313      	orrs	r3, r2
 80141bc:	d14e      	bne.n	801425c <__ieee754_sqrt+0x168>
 80141be:	4643      	mov	r3, r8
 80141c0:	085b      	lsrs	r3, r3, #1
 80141c2:	4937      	ldr	r1, [pc, #220]	; (80142a0 <__ieee754_sqrt+0x1ac>)
 80141c4:	464a      	mov	r2, r9
 80141c6:	4688      	mov	r8, r1
 80141c8:	4649      	mov	r1, r9
 80141ca:	1052      	asrs	r2, r2, #1
 80141cc:	4442      	add	r2, r8
 80141ce:	07c9      	lsls	r1, r1, #31
 80141d0:	d502      	bpl.n	80141d8 <__ieee754_sqrt+0xe4>
 80141d2:	2180      	movs	r1, #128	; 0x80
 80141d4:	0609      	lsls	r1, r1, #24
 80141d6:	430b      	orrs	r3, r1
 80141d8:	4661      	mov	r1, ip
 80141da:	050f      	lsls	r7, r1, #20
 80141dc:	18bd      	adds	r5, r7, r2
 80141de:	0018      	movs	r0, r3
 80141e0:	0029      	movs	r1, r5
 80141e2:	bc0c      	pop	{r2, r3}
 80141e4:	4690      	mov	r8, r2
 80141e6:	4699      	mov	r9, r3
 80141e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141ea:	007b      	lsls	r3, r7, #1
 80141ec:	085b      	lsrs	r3, r3, #1
 80141ee:	4303      	orrs	r3, r0
 80141f0:	0039      	movs	r1, r7
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d0f5      	beq.n	80141e2 <__ieee754_sqrt+0xee>
 80141f6:	2f00      	cmp	r7, #0
 80141f8:	d13c      	bne.n	8014274 <__ieee754_sqrt+0x180>
 80141fa:	0ae3      	lsrs	r3, r4, #11
 80141fc:	3a15      	subs	r2, #21
 80141fe:	0564      	lsls	r4, r4, #21
 8014200:	2b00      	cmp	r3, #0
 8014202:	d0fa      	beq.n	80141fa <__ieee754_sqrt+0x106>
 8014204:	2080      	movs	r0, #128	; 0x80
 8014206:	0340      	lsls	r0, r0, #13
 8014208:	4203      	tst	r3, r0
 801420a:	d13f      	bne.n	801428c <__ieee754_sqrt+0x198>
 801420c:	2700      	movs	r7, #0
 801420e:	e000      	b.n	8014212 <__ieee754_sqrt+0x11e>
 8014210:	000f      	movs	r7, r1
 8014212:	005b      	lsls	r3, r3, #1
 8014214:	1c79      	adds	r1, r7, #1
 8014216:	4203      	tst	r3, r0
 8014218:	d0fa      	beq.n	8014210 <__ieee754_sqrt+0x11c>
 801421a:	0025      	movs	r5, r4
 801421c:	2020      	movs	r0, #32
 801421e:	408d      	lsls	r5, r1
 8014220:	1a40      	subs	r0, r0, r1
 8014222:	0029      	movs	r1, r5
 8014224:	1bd7      	subs	r7, r2, r7
 8014226:	0022      	movs	r2, r4
 8014228:	40c2      	lsrs	r2, r0
 801422a:	431a      	orrs	r2, r3
 801422c:	e776      	b.n	801411c <__ieee754_sqrt+0x28>
 801422e:	43fe      	mvns	r6, r7
 8014230:	0ff6      	lsrs	r6, r6, #31
 8014232:	198e      	adds	r6, r1, r6
 8014234:	e7b1      	b.n	801419a <__ieee754_sqrt+0xa6>
 8014236:	4294      	cmp	r4, r2
 8014238:	d8a0      	bhi.n	801417c <__ieee754_sqrt+0x88>
 801423a:	1827      	adds	r7, r4, r0
 801423c:	2c00      	cmp	r4, #0
 801423e:	dbf6      	blt.n	801422e <__ieee754_sqrt+0x13a>
 8014240:	001e      	movs	r6, r3
 8014242:	2300      	movs	r3, #0
 8014244:	e7ae      	b.n	80141a4 <__ieee754_sqrt+0xb0>
 8014246:	0002      	movs	r2, r0
 8014248:	003b      	movs	r3, r7
 801424a:	0028      	movs	r0, r5
 801424c:	0039      	movs	r1, r7
 801424e:	f7fd ffff 	bl	8012250 <__aeabi_dmul>
 8014252:	002a      	movs	r2, r5
 8014254:	003b      	movs	r3, r7
 8014256:	f7fd f8d5 	bl	8011404 <__aeabi_dadd>
 801425a:	e7c2      	b.n	80141e2 <__ieee754_sqrt+0xee>
 801425c:	4643      	mov	r3, r8
 801425e:	3301      	adds	r3, #1
 8014260:	d003      	beq.n	801426a <__ieee754_sqrt+0x176>
 8014262:	4643      	mov	r3, r8
 8014264:	3301      	adds	r3, #1
 8014266:	085b      	lsrs	r3, r3, #1
 8014268:	e7ab      	b.n	80141c2 <__ieee754_sqrt+0xce>
 801426a:	2301      	movs	r3, #1
 801426c:	4698      	mov	r8, r3
 801426e:	2300      	movs	r3, #0
 8014270:	44c1      	add	r9, r8
 8014272:	e7a6      	b.n	80141c2 <__ieee754_sqrt+0xce>
 8014274:	003b      	movs	r3, r7
 8014276:	0002      	movs	r2, r0
 8014278:	f7fe fa5c 	bl	8012734 <__aeabi_dsub>
 801427c:	0002      	movs	r2, r0
 801427e:	000b      	movs	r3, r1
 8014280:	f7fd fbdc 	bl	8011a3c <__aeabi_ddiv>
 8014284:	e7ad      	b.n	80141e2 <__ieee754_sqrt+0xee>
 8014286:	0013      	movs	r3, r2
 8014288:	2200      	movs	r2, #0
 801428a:	e7bb      	b.n	8014204 <__ieee754_sqrt+0x110>
 801428c:	2701      	movs	r7, #1
 801428e:	0021      	movs	r1, r4
 8014290:	2020      	movs	r0, #32
 8014292:	427f      	negs	r7, r7
 8014294:	e7c6      	b.n	8014224 <__ieee754_sqrt+0x130>
 8014296:	46c0      	nop			; (mov r8, r8)
 8014298:	7ff00000 	.word	0x7ff00000
 801429c:	fffffc01 	.word	0xfffffc01
 80142a0:	3fe00000 	.word	0x3fe00000

080142a4 <__ieee754_expf>:
 80142a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142a6:	22ff      	movs	r2, #255	; 0xff
 80142a8:	46d6      	mov	lr, sl
 80142aa:	464f      	mov	r7, r9
 80142ac:	4646      	mov	r6, r8
 80142ae:	0043      	lsls	r3, r0, #1
 80142b0:	b5c0      	push	{r6, r7, lr}
 80142b2:	1c04      	adds	r4, r0, #0
 80142b4:	0001      	movs	r1, r0
 80142b6:	085b      	lsrs	r3, r3, #1
 80142b8:	05d2      	lsls	r2, r2, #23
 80142ba:	4293      	cmp	r3, r2
 80142bc:	d831      	bhi.n	8014322 <__ieee754_expf+0x7e>
 80142be:	0fc5      	lsrs	r5, r0, #31
 80142c0:	4293      	cmp	r3, r2
 80142c2:	d035      	beq.n	8014330 <__ieee754_expf+0x8c>
 80142c4:	4a63      	ldr	r2, [pc, #396]	; (8014454 <__ieee754_expf+0x1b0>)
 80142c6:	4290      	cmp	r0, r2
 80142c8:	dc36      	bgt.n	8014338 <__ieee754_expf+0x94>
 80142ca:	2800      	cmp	r0, #0
 80142cc:	da00      	bge.n	80142d0 <__ieee754_expf+0x2c>
 80142ce:	e088      	b.n	80143e2 <__ieee754_expf+0x13e>
 80142d0:	4a61      	ldr	r2, [pc, #388]	; (8014458 <__ieee754_expf+0x1b4>)
 80142d2:	4293      	cmp	r3, r2
 80142d4:	d935      	bls.n	8014342 <__ieee754_expf+0x9e>
 80142d6:	4a61      	ldr	r2, [pc, #388]	; (801445c <__ieee754_expf+0x1b8>)
 80142d8:	4293      	cmp	r3, r2
 80142da:	d800      	bhi.n	80142de <__ieee754_expf+0x3a>
 80142dc:	e0a9      	b.n	8014432 <__ieee754_expf+0x18e>
 80142de:	4960      	ldr	r1, [pc, #384]	; (8014460 <__ieee754_expf+0x1bc>)
 80142e0:	1c20      	adds	r0, r4, #0
 80142e2:	f7fc f8d1 	bl	8010488 <__aeabi_fmul>
 80142e6:	4b5f      	ldr	r3, [pc, #380]	; (8014464 <__ieee754_expf+0x1c0>)
 80142e8:	00ad      	lsls	r5, r5, #2
 80142ea:	58e9      	ldr	r1, [r5, r3]
 80142ec:	f7fb fe20 	bl	800ff30 <__aeabi_fadd>
 80142f0:	f7fc ffde 	bl	80112b0 <__aeabi_f2iz>
 80142f4:	0005      	movs	r5, r0
 80142f6:	f7fc fffb 	bl	80112f0 <__aeabi_i2f>
 80142fa:	495b      	ldr	r1, [pc, #364]	; (8014468 <__ieee754_expf+0x1c4>)
 80142fc:	1c07      	adds	r7, r0, #0
 80142fe:	f7fc f8c3 	bl	8010488 <__aeabi_fmul>
 8014302:	1c01      	adds	r1, r0, #0
 8014304:	1c20      	adds	r0, r4, #0
 8014306:	f7fc f9f1 	bl	80106ec <__aeabi_fsub>
 801430a:	4958      	ldr	r1, [pc, #352]	; (801446c <__ieee754_expf+0x1c8>)
 801430c:	4682      	mov	sl, r0
 801430e:	1c38      	adds	r0, r7, #0
 8014310:	f7fc f8ba 	bl	8010488 <__aeabi_fmul>
 8014314:	1c07      	adds	r7, r0, #0
 8014316:	1c39      	adds	r1, r7, #0
 8014318:	4650      	mov	r0, sl
 801431a:	f7fc f9e7 	bl	80106ec <__aeabi_fsub>
 801431e:	1c04      	adds	r4, r0, #0
 8014320:	e013      	b.n	801434a <__ieee754_expf+0xa6>
 8014322:	f7fb fe05 	bl	800ff30 <__aeabi_fadd>
 8014326:	bc1c      	pop	{r2, r3, r4}
 8014328:	4690      	mov	r8, r2
 801432a:	4699      	mov	r9, r3
 801432c:	46a2      	mov	sl, r4
 801432e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014330:	2d00      	cmp	r5, #0
 8014332:	d0f8      	beq.n	8014326 <__ieee754_expf+0x82>
 8014334:	2000      	movs	r0, #0
 8014336:	e7f6      	b.n	8014326 <__ieee754_expf+0x82>
 8014338:	494d      	ldr	r1, [pc, #308]	; (8014470 <__ieee754_expf+0x1cc>)
 801433a:	1c08      	adds	r0, r1, #0
 801433c:	f7fc f8a4 	bl	8010488 <__aeabi_fmul>
 8014340:	e7f1      	b.n	8014326 <__ieee754_expf+0x82>
 8014342:	4a4c      	ldr	r2, [pc, #304]	; (8014474 <__ieee754_expf+0x1d0>)
 8014344:	4293      	cmp	r3, r2
 8014346:	d964      	bls.n	8014412 <__ieee754_expf+0x16e>
 8014348:	2500      	movs	r5, #0
 801434a:	1c21      	adds	r1, r4, #0
 801434c:	1c20      	adds	r0, r4, #0
 801434e:	f7fc f89b 	bl	8010488 <__aeabi_fmul>
 8014352:	4949      	ldr	r1, [pc, #292]	; (8014478 <__ieee754_expf+0x1d4>)
 8014354:	1c06      	adds	r6, r0, #0
 8014356:	f7fc f897 	bl	8010488 <__aeabi_fmul>
 801435a:	4948      	ldr	r1, [pc, #288]	; (801447c <__ieee754_expf+0x1d8>)
 801435c:	f7fc f9c6 	bl	80106ec <__aeabi_fsub>
 8014360:	1c31      	adds	r1, r6, #0
 8014362:	f7fc f891 	bl	8010488 <__aeabi_fmul>
 8014366:	4946      	ldr	r1, [pc, #280]	; (8014480 <__ieee754_expf+0x1dc>)
 8014368:	f7fb fde2 	bl	800ff30 <__aeabi_fadd>
 801436c:	1c31      	adds	r1, r6, #0
 801436e:	f7fc f88b 	bl	8010488 <__aeabi_fmul>
 8014372:	4944      	ldr	r1, [pc, #272]	; (8014484 <__ieee754_expf+0x1e0>)
 8014374:	f7fc f9ba 	bl	80106ec <__aeabi_fsub>
 8014378:	1c31      	adds	r1, r6, #0
 801437a:	f7fc f885 	bl	8010488 <__aeabi_fmul>
 801437e:	4942      	ldr	r1, [pc, #264]	; (8014488 <__ieee754_expf+0x1e4>)
 8014380:	f7fb fdd6 	bl	800ff30 <__aeabi_fadd>
 8014384:	1c31      	adds	r1, r6, #0
 8014386:	f7fc f87f 	bl	8010488 <__aeabi_fmul>
 801438a:	1c01      	adds	r1, r0, #0
 801438c:	1c20      	adds	r0, r4, #0
 801438e:	f7fc f9ad 	bl	80106ec <__aeabi_fsub>
 8014392:	1c01      	adds	r1, r0, #0
 8014394:	4680      	mov	r8, r0
 8014396:	1c20      	adds	r0, r4, #0
 8014398:	f7fc f876 	bl	8010488 <__aeabi_fmul>
 801439c:	4681      	mov	r9, r0
 801439e:	2d00      	cmp	r5, #0
 80143a0:	d025      	beq.n	80143ee <__ieee754_expf+0x14a>
 80143a2:	2080      	movs	r0, #128	; 0x80
 80143a4:	4641      	mov	r1, r8
 80143a6:	05c0      	lsls	r0, r0, #23
 80143a8:	f7fc f9a0 	bl	80106ec <__aeabi_fsub>
 80143ac:	1c01      	adds	r1, r0, #0
 80143ae:	4648      	mov	r0, r9
 80143b0:	f7fb ff58 	bl	8010264 <__aeabi_fdiv>
 80143b4:	1c01      	adds	r1, r0, #0
 80143b6:	1c38      	adds	r0, r7, #0
 80143b8:	f7fc f998 	bl	80106ec <__aeabi_fsub>
 80143bc:	4651      	mov	r1, sl
 80143be:	f7fc f995 	bl	80106ec <__aeabi_fsub>
 80143c2:	1c01      	adds	r1, r0, #0
 80143c4:	20fe      	movs	r0, #254	; 0xfe
 80143c6:	0580      	lsls	r0, r0, #22
 80143c8:	f7fc f990 	bl	80106ec <__aeabi_fsub>
 80143cc:	002b      	movs	r3, r5
 80143ce:	337d      	adds	r3, #125	; 0x7d
 80143d0:	da3c      	bge.n	801444c <__ieee754_expf+0x1a8>
 80143d2:	21d8      	movs	r1, #216	; 0xd8
 80143d4:	3564      	adds	r5, #100	; 0x64
 80143d6:	05ed      	lsls	r5, r5, #23
 80143d8:	1828      	adds	r0, r5, r0
 80143da:	0509      	lsls	r1, r1, #20
 80143dc:	f7fc f854 	bl	8010488 <__aeabi_fmul>
 80143e0:	e7a1      	b.n	8014326 <__ieee754_expf+0x82>
 80143e2:	4a2a      	ldr	r2, [pc, #168]	; (801448c <__ieee754_expf+0x1e8>)
 80143e4:	4293      	cmp	r3, r2
 80143e6:	d800      	bhi.n	80143ea <__ieee754_expf+0x146>
 80143e8:	e772      	b.n	80142d0 <__ieee754_expf+0x2c>
 80143ea:	2000      	movs	r0, #0
 80143ec:	e79b      	b.n	8014326 <__ieee754_expf+0x82>
 80143ee:	2180      	movs	r1, #128	; 0x80
 80143f0:	4640      	mov	r0, r8
 80143f2:	05c9      	lsls	r1, r1, #23
 80143f4:	f7fc f97a 	bl	80106ec <__aeabi_fsub>
 80143f8:	1c01      	adds	r1, r0, #0
 80143fa:	4648      	mov	r0, r9
 80143fc:	f7fb ff32 	bl	8010264 <__aeabi_fdiv>
 8014400:	1c21      	adds	r1, r4, #0
 8014402:	f7fc f973 	bl	80106ec <__aeabi_fsub>
 8014406:	1c01      	adds	r1, r0, #0
 8014408:	20fe      	movs	r0, #254	; 0xfe
 801440a:	0580      	lsls	r0, r0, #22
 801440c:	f7fc f96e 	bl	80106ec <__aeabi_fsub>
 8014410:	e789      	b.n	8014326 <__ieee754_expf+0x82>
 8014412:	4917      	ldr	r1, [pc, #92]	; (8014470 <__ieee754_expf+0x1cc>)
 8014414:	1c20      	adds	r0, r4, #0
 8014416:	f7fb fd8b 	bl	800ff30 <__aeabi_fadd>
 801441a:	21fe      	movs	r1, #254	; 0xfe
 801441c:	0589      	lsls	r1, r1, #22
 801441e:	f7fc fd3f 	bl	8010ea0 <__aeabi_fcmpgt>
 8014422:	2800      	cmp	r0, #0
 8014424:	d090      	beq.n	8014348 <__ieee754_expf+0xa4>
 8014426:	21fe      	movs	r1, #254	; 0xfe
 8014428:	1c20      	adds	r0, r4, #0
 801442a:	0589      	lsls	r1, r1, #22
 801442c:	f7fb fd80 	bl	800ff30 <__aeabi_fadd>
 8014430:	e779      	b.n	8014326 <__ieee754_expf+0x82>
 8014432:	4b17      	ldr	r3, [pc, #92]	; (8014490 <__ieee754_expf+0x1ec>)
 8014434:	00af      	lsls	r7, r5, #2
 8014436:	58f9      	ldr	r1, [r7, r3]
 8014438:	1c20      	adds	r0, r4, #0
 801443a:	2401      	movs	r4, #1
 801443c:	f7fc f956 	bl	80106ec <__aeabi_fsub>
 8014440:	4b14      	ldr	r3, [pc, #80]	; (8014494 <__ieee754_expf+0x1f0>)
 8014442:	1b64      	subs	r4, r4, r5
 8014444:	4682      	mov	sl, r0
 8014446:	58ff      	ldr	r7, [r7, r3]
 8014448:	1b65      	subs	r5, r4, r5
 801444a:	e764      	b.n	8014316 <__ieee754_expf+0x72>
 801444c:	05ed      	lsls	r5, r5, #23
 801444e:	1828      	adds	r0, r5, r0
 8014450:	e769      	b.n	8014326 <__ieee754_expf+0x82>
 8014452:	46c0      	nop			; (mov r8, r8)
 8014454:	42b17217 	.word	0x42b17217
 8014458:	3eb17218 	.word	0x3eb17218
 801445c:	3f851591 	.word	0x3f851591
 8014460:	3fb8aa3b 	.word	0x3fb8aa3b
 8014464:	0801eea0 	.word	0x0801eea0
 8014468:	3f317180 	.word	0x3f317180
 801446c:	3717f7d1 	.word	0x3717f7d1
 8014470:	7149f2ca 	.word	0x7149f2ca
 8014474:	317fffff 	.word	0x317fffff
 8014478:	3331bb4c 	.word	0x3331bb4c
 801447c:	35ddea0e 	.word	0x35ddea0e
 8014480:	388ab355 	.word	0x388ab355
 8014484:	3b360b61 	.word	0x3b360b61
 8014488:	3e2aaaab 	.word	0x3e2aaaab
 801448c:	42cff1b5 	.word	0x42cff1b5
 8014490:	0801eea8 	.word	0x0801eea8
 8014494:	0801eeb0 	.word	0x0801eeb0

08014498 <__ieee754_log10f>:
 8014498:	b570      	push	{r4, r5, r6, lr}
 801449a:	0003      	movs	r3, r0
 801449c:	0042      	lsls	r2, r0, #1
 801449e:	d037      	beq.n	8014510 <__ieee754_log10f+0x78>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	db3b      	blt.n	801451c <__ieee754_log10f+0x84>
 80144a4:	4a23      	ldr	r2, [pc, #140]	; (8014534 <__ieee754_log10f+0x9c>)
 80144a6:	4290      	cmp	r0, r2
 80144a8:	dc3f      	bgt.n	801452a <__ieee754_log10f+0x92>
 80144aa:	4923      	ldr	r1, [pc, #140]	; (8014538 <__ieee754_log10f+0xa0>)
 80144ac:	2200      	movs	r2, #0
 80144ae:	4288      	cmp	r0, r1
 80144b0:	dc06      	bgt.n	80144c0 <__ieee754_log10f+0x28>
 80144b2:	2198      	movs	r1, #152	; 0x98
 80144b4:	05c9      	lsls	r1, r1, #23
 80144b6:	f7fb ffe7 	bl	8010488 <__aeabi_fmul>
 80144ba:	2219      	movs	r2, #25
 80144bc:	0003      	movs	r3, r0
 80144be:	4252      	negs	r2, r2
 80144c0:	15d8      	asrs	r0, r3, #23
 80144c2:	387f      	subs	r0, #127	; 0x7f
 80144c4:	1880      	adds	r0, r0, r2
 80144c6:	0fc6      	lsrs	r6, r0, #31
 80144c8:	025b      	lsls	r3, r3, #9
 80144ca:	1980      	adds	r0, r0, r6
 80144cc:	0a5c      	lsrs	r4, r3, #9
 80144ce:	f7fc ff0f 	bl	80112f0 <__aeabi_i2f>
 80144d2:	1c05      	adds	r5, r0, #0
 80144d4:	207f      	movs	r0, #127	; 0x7f
 80144d6:	1b80      	subs	r0, r0, r6
 80144d8:	05c0      	lsls	r0, r0, #23
 80144da:	4320      	orrs	r0, r4
 80144dc:	f000 ff7a 	bl	80153d4 <__ieee754_logf>
 80144e0:	4916      	ldr	r1, [pc, #88]	; (801453c <__ieee754_log10f+0xa4>)
 80144e2:	1c06      	adds	r6, r0, #0
 80144e4:	1c28      	adds	r0, r5, #0
 80144e6:	f7fb ffcf 	bl	8010488 <__aeabi_fmul>
 80144ea:	4915      	ldr	r1, [pc, #84]	; (8014540 <__ieee754_log10f+0xa8>)
 80144ec:	1c04      	adds	r4, r0, #0
 80144ee:	1c30      	adds	r0, r6, #0
 80144f0:	f7fb ffca 	bl	8010488 <__aeabi_fmul>
 80144f4:	1c01      	adds	r1, r0, #0
 80144f6:	1c20      	adds	r0, r4, #0
 80144f8:	f7fb fd1a 	bl	800ff30 <__aeabi_fadd>
 80144fc:	4911      	ldr	r1, [pc, #68]	; (8014544 <__ieee754_log10f+0xac>)
 80144fe:	1c04      	adds	r4, r0, #0
 8014500:	1c28      	adds	r0, r5, #0
 8014502:	f7fb ffc1 	bl	8010488 <__aeabi_fmul>
 8014506:	1c01      	adds	r1, r0, #0
 8014508:	1c20      	adds	r0, r4, #0
 801450a:	f7fb fd11 	bl	800ff30 <__aeabi_fadd>
 801450e:	e004      	b.n	801451a <__ieee754_log10f+0x82>
 8014510:	20cc      	movs	r0, #204	; 0xcc
 8014512:	2100      	movs	r1, #0
 8014514:	0600      	lsls	r0, r0, #24
 8014516:	f7fb fea5 	bl	8010264 <__aeabi_fdiv>
 801451a:	bd70      	pop	{r4, r5, r6, pc}
 801451c:	1c01      	adds	r1, r0, #0
 801451e:	f7fc f8e5 	bl	80106ec <__aeabi_fsub>
 8014522:	2100      	movs	r1, #0
 8014524:	f7fb fe9e 	bl	8010264 <__aeabi_fdiv>
 8014528:	e7f7      	b.n	801451a <__ieee754_log10f+0x82>
 801452a:	1c01      	adds	r1, r0, #0
 801452c:	f7fb fd00 	bl	800ff30 <__aeabi_fadd>
 8014530:	e7f3      	b.n	801451a <__ieee754_log10f+0x82>
 8014532:	46c0      	nop			; (mov r8, r8)
 8014534:	7f7fffff 	.word	0x7f7fffff
 8014538:	007fffff 	.word	0x007fffff
 801453c:	355427db 	.word	0x355427db
 8014540:	3ede5bd9 	.word	0x3ede5bd9
 8014544:	3e9a2080 	.word	0x3e9a2080

08014548 <__kernel_cos>:
 8014548:	b5f0      	push	{r4, r5, r6, r7, lr}
 801454a:	4647      	mov	r7, r8
 801454c:	46ce      	mov	lr, r9
 801454e:	b580      	push	{r7, lr}
 8014550:	b087      	sub	sp, #28
 8014552:	9200      	str	r2, [sp, #0]
 8014554:	9301      	str	r3, [sp, #4]
 8014556:	4b75      	ldr	r3, [pc, #468]	; (801472c <__kernel_cos+0x1e4>)
 8014558:	004f      	lsls	r7, r1, #1
 801455a:	4681      	mov	r9, r0
 801455c:	4688      	mov	r8, r1
 801455e:	087f      	lsrs	r7, r7, #1
 8014560:	429f      	cmp	r7, r3
 8014562:	dc63      	bgt.n	801462c <__kernel_cos+0xe4>
 8014564:	f7fe fc4a 	bl	8012dfc <__aeabi_d2iz>
 8014568:	2800      	cmp	r0, #0
 801456a:	d100      	bne.n	801456e <__kernel_cos+0x26>
 801456c:	e0d4      	b.n	8014718 <__kernel_cos+0x1d0>
 801456e:	464a      	mov	r2, r9
 8014570:	4643      	mov	r3, r8
 8014572:	4648      	mov	r0, r9
 8014574:	4641      	mov	r1, r8
 8014576:	f7fd fe6b 	bl	8012250 <__aeabi_dmul>
 801457a:	0004      	movs	r4, r0
 801457c:	000d      	movs	r5, r1
 801457e:	4a6c      	ldr	r2, [pc, #432]	; (8014730 <__kernel_cos+0x1e8>)
 8014580:	4b6c      	ldr	r3, [pc, #432]	; (8014734 <__kernel_cos+0x1ec>)
 8014582:	f7fd fe65 	bl	8012250 <__aeabi_dmul>
 8014586:	4a6c      	ldr	r2, [pc, #432]	; (8014738 <__kernel_cos+0x1f0>)
 8014588:	4b6c      	ldr	r3, [pc, #432]	; (801473c <__kernel_cos+0x1f4>)
 801458a:	f7fc ff3b 	bl	8011404 <__aeabi_dadd>
 801458e:	0022      	movs	r2, r4
 8014590:	002b      	movs	r3, r5
 8014592:	f7fd fe5d 	bl	8012250 <__aeabi_dmul>
 8014596:	4a6a      	ldr	r2, [pc, #424]	; (8014740 <__kernel_cos+0x1f8>)
 8014598:	4b6a      	ldr	r3, [pc, #424]	; (8014744 <__kernel_cos+0x1fc>)
 801459a:	f7fe f8cb 	bl	8012734 <__aeabi_dsub>
 801459e:	0022      	movs	r2, r4
 80145a0:	002b      	movs	r3, r5
 80145a2:	f7fd fe55 	bl	8012250 <__aeabi_dmul>
 80145a6:	4a68      	ldr	r2, [pc, #416]	; (8014748 <__kernel_cos+0x200>)
 80145a8:	4b68      	ldr	r3, [pc, #416]	; (801474c <__kernel_cos+0x204>)
 80145aa:	f7fc ff2b 	bl	8011404 <__aeabi_dadd>
 80145ae:	0022      	movs	r2, r4
 80145b0:	002b      	movs	r3, r5
 80145b2:	f7fd fe4d 	bl	8012250 <__aeabi_dmul>
 80145b6:	4a66      	ldr	r2, [pc, #408]	; (8014750 <__kernel_cos+0x208>)
 80145b8:	4b66      	ldr	r3, [pc, #408]	; (8014754 <__kernel_cos+0x20c>)
 80145ba:	f7fe f8bb 	bl	8012734 <__aeabi_dsub>
 80145be:	0022      	movs	r2, r4
 80145c0:	002b      	movs	r3, r5
 80145c2:	f7fd fe45 	bl	8012250 <__aeabi_dmul>
 80145c6:	4a64      	ldr	r2, [pc, #400]	; (8014758 <__kernel_cos+0x210>)
 80145c8:	4b64      	ldr	r3, [pc, #400]	; (801475c <__kernel_cos+0x214>)
 80145ca:	f7fc ff1b 	bl	8011404 <__aeabi_dadd>
 80145ce:	0022      	movs	r2, r4
 80145d0:	002b      	movs	r3, r5
 80145d2:	f7fd fe3d 	bl	8012250 <__aeabi_dmul>
 80145d6:	9002      	str	r0, [sp, #8]
 80145d8:	9103      	str	r1, [sp, #12]
 80145da:	2200      	movs	r2, #0
 80145dc:	4b60      	ldr	r3, [pc, #384]	; (8014760 <__kernel_cos+0x218>)
 80145de:	0020      	movs	r0, r4
 80145e0:	0029      	movs	r1, r5
 80145e2:	f7fd fe35 	bl	8012250 <__aeabi_dmul>
 80145e6:	9a02      	ldr	r2, [sp, #8]
 80145e8:	9b03      	ldr	r3, [sp, #12]
 80145ea:	0006      	movs	r6, r0
 80145ec:	000f      	movs	r7, r1
 80145ee:	0020      	movs	r0, r4
 80145f0:	0029      	movs	r1, r5
 80145f2:	f7fd fe2d 	bl	8012250 <__aeabi_dmul>
 80145f6:	9a00      	ldr	r2, [sp, #0]
 80145f8:	9b01      	ldr	r3, [sp, #4]
 80145fa:	0004      	movs	r4, r0
 80145fc:	000d      	movs	r5, r1
 80145fe:	4648      	mov	r0, r9
 8014600:	4641      	mov	r1, r8
 8014602:	f7fd fe25 	bl	8012250 <__aeabi_dmul>
 8014606:	0002      	movs	r2, r0
 8014608:	000b      	movs	r3, r1
 801460a:	0020      	movs	r0, r4
 801460c:	0029      	movs	r1, r5
 801460e:	f7fe f891 	bl	8012734 <__aeabi_dsub>
 8014612:	0002      	movs	r2, r0
 8014614:	000b      	movs	r3, r1
 8014616:	0030      	movs	r0, r6
 8014618:	0039      	movs	r1, r7
 801461a:	f7fe f88b 	bl	8012734 <__aeabi_dsub>
 801461e:	0002      	movs	r2, r0
 8014620:	000b      	movs	r3, r1
 8014622:	2000      	movs	r0, #0
 8014624:	494f      	ldr	r1, [pc, #316]	; (8014764 <__kernel_cos+0x21c>)
 8014626:	f7fe f885 	bl	8012734 <__aeabi_dsub>
 801462a:	e070      	b.n	801470e <__kernel_cos+0x1c6>
 801462c:	0002      	movs	r2, r0
 801462e:	000b      	movs	r3, r1
 8014630:	f7fd fe0e 	bl	8012250 <__aeabi_dmul>
 8014634:	0004      	movs	r4, r0
 8014636:	000d      	movs	r5, r1
 8014638:	4a3d      	ldr	r2, [pc, #244]	; (8014730 <__kernel_cos+0x1e8>)
 801463a:	4b3e      	ldr	r3, [pc, #248]	; (8014734 <__kernel_cos+0x1ec>)
 801463c:	f7fd fe08 	bl	8012250 <__aeabi_dmul>
 8014640:	4a3d      	ldr	r2, [pc, #244]	; (8014738 <__kernel_cos+0x1f0>)
 8014642:	4b3e      	ldr	r3, [pc, #248]	; (801473c <__kernel_cos+0x1f4>)
 8014644:	f7fc fede 	bl	8011404 <__aeabi_dadd>
 8014648:	0022      	movs	r2, r4
 801464a:	002b      	movs	r3, r5
 801464c:	f7fd fe00 	bl	8012250 <__aeabi_dmul>
 8014650:	4a3b      	ldr	r2, [pc, #236]	; (8014740 <__kernel_cos+0x1f8>)
 8014652:	4b3c      	ldr	r3, [pc, #240]	; (8014744 <__kernel_cos+0x1fc>)
 8014654:	f7fe f86e 	bl	8012734 <__aeabi_dsub>
 8014658:	0022      	movs	r2, r4
 801465a:	002b      	movs	r3, r5
 801465c:	f7fd fdf8 	bl	8012250 <__aeabi_dmul>
 8014660:	4a39      	ldr	r2, [pc, #228]	; (8014748 <__kernel_cos+0x200>)
 8014662:	4b3a      	ldr	r3, [pc, #232]	; (801474c <__kernel_cos+0x204>)
 8014664:	f7fc fece 	bl	8011404 <__aeabi_dadd>
 8014668:	0022      	movs	r2, r4
 801466a:	002b      	movs	r3, r5
 801466c:	f7fd fdf0 	bl	8012250 <__aeabi_dmul>
 8014670:	4a37      	ldr	r2, [pc, #220]	; (8014750 <__kernel_cos+0x208>)
 8014672:	4b38      	ldr	r3, [pc, #224]	; (8014754 <__kernel_cos+0x20c>)
 8014674:	f7fe f85e 	bl	8012734 <__aeabi_dsub>
 8014678:	0022      	movs	r2, r4
 801467a:	002b      	movs	r3, r5
 801467c:	f7fd fde8 	bl	8012250 <__aeabi_dmul>
 8014680:	4a35      	ldr	r2, [pc, #212]	; (8014758 <__kernel_cos+0x210>)
 8014682:	4b36      	ldr	r3, [pc, #216]	; (801475c <__kernel_cos+0x214>)
 8014684:	f7fc febe 	bl	8011404 <__aeabi_dadd>
 8014688:	002b      	movs	r3, r5
 801468a:	0022      	movs	r2, r4
 801468c:	f7fd fde0 	bl	8012250 <__aeabi_dmul>
 8014690:	4b35      	ldr	r3, [pc, #212]	; (8014768 <__kernel_cos+0x220>)
 8014692:	9002      	str	r0, [sp, #8]
 8014694:	9103      	str	r1, [sp, #12]
 8014696:	429f      	cmp	r7, r3
 8014698:	dd9f      	ble.n	80145da <__kernel_cos+0x92>
 801469a:	4b34      	ldr	r3, [pc, #208]	; (801476c <__kernel_cos+0x224>)
 801469c:	2200      	movs	r2, #0
 801469e:	429f      	cmp	r7, r3
 80146a0:	dc3d      	bgt.n	801471e <__kernel_cos+0x1d6>
 80146a2:	4933      	ldr	r1, [pc, #204]	; (8014770 <__kernel_cos+0x228>)
 80146a4:	2000      	movs	r0, #0
 80146a6:	187b      	adds	r3, r7, r1
 80146a8:	492e      	ldr	r1, [pc, #184]	; (8014764 <__kernel_cos+0x21c>)
 80146aa:	0016      	movs	r6, r2
 80146ac:	001f      	movs	r7, r3
 80146ae:	f7fe f841 	bl	8012734 <__aeabi_dsub>
 80146b2:	9004      	str	r0, [sp, #16]
 80146b4:	9105      	str	r1, [sp, #20]
 80146b6:	2200      	movs	r2, #0
 80146b8:	4b29      	ldr	r3, [pc, #164]	; (8014760 <__kernel_cos+0x218>)
 80146ba:	0020      	movs	r0, r4
 80146bc:	0029      	movs	r1, r5
 80146be:	f7fd fdc7 	bl	8012250 <__aeabi_dmul>
 80146c2:	0032      	movs	r2, r6
 80146c4:	003b      	movs	r3, r7
 80146c6:	f7fe f835 	bl	8012734 <__aeabi_dsub>
 80146ca:	9a02      	ldr	r2, [sp, #8]
 80146cc:	9b03      	ldr	r3, [sp, #12]
 80146ce:	0006      	movs	r6, r0
 80146d0:	000f      	movs	r7, r1
 80146d2:	0020      	movs	r0, r4
 80146d4:	0029      	movs	r1, r5
 80146d6:	f7fd fdbb 	bl	8012250 <__aeabi_dmul>
 80146da:	9a00      	ldr	r2, [sp, #0]
 80146dc:	9b01      	ldr	r3, [sp, #4]
 80146de:	0004      	movs	r4, r0
 80146e0:	000d      	movs	r5, r1
 80146e2:	4648      	mov	r0, r9
 80146e4:	4641      	mov	r1, r8
 80146e6:	f7fd fdb3 	bl	8012250 <__aeabi_dmul>
 80146ea:	0002      	movs	r2, r0
 80146ec:	000b      	movs	r3, r1
 80146ee:	0020      	movs	r0, r4
 80146f0:	0029      	movs	r1, r5
 80146f2:	f7fe f81f 	bl	8012734 <__aeabi_dsub>
 80146f6:	0002      	movs	r2, r0
 80146f8:	000b      	movs	r3, r1
 80146fa:	0030      	movs	r0, r6
 80146fc:	0039      	movs	r1, r7
 80146fe:	f7fe f819 	bl	8012734 <__aeabi_dsub>
 8014702:	0002      	movs	r2, r0
 8014704:	000b      	movs	r3, r1
 8014706:	9804      	ldr	r0, [sp, #16]
 8014708:	9905      	ldr	r1, [sp, #20]
 801470a:	f7fe f813 	bl	8012734 <__aeabi_dsub>
 801470e:	b007      	add	sp, #28
 8014710:	bc0c      	pop	{r2, r3}
 8014712:	4690      	mov	r8, r2
 8014714:	4699      	mov	r9, r3
 8014716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014718:	2000      	movs	r0, #0
 801471a:	4912      	ldr	r1, [pc, #72]	; (8014764 <__kernel_cos+0x21c>)
 801471c:	e7f7      	b.n	801470e <__kernel_cos+0x1c6>
 801471e:	4b15      	ldr	r3, [pc, #84]	; (8014774 <__kernel_cos+0x22c>)
 8014720:	2600      	movs	r6, #0
 8014722:	9204      	str	r2, [sp, #16]
 8014724:	9305      	str	r3, [sp, #20]
 8014726:	4f14      	ldr	r7, [pc, #80]	; (8014778 <__kernel_cos+0x230>)
 8014728:	e7c5      	b.n	80146b6 <__kernel_cos+0x16e>
 801472a:	46c0      	nop			; (mov r8, r8)
 801472c:	3e3fffff 	.word	0x3e3fffff
 8014730:	be8838d4 	.word	0xbe8838d4
 8014734:	bda8fae9 	.word	0xbda8fae9
 8014738:	bdb4b1c4 	.word	0xbdb4b1c4
 801473c:	3e21ee9e 	.word	0x3e21ee9e
 8014740:	809c52ad 	.word	0x809c52ad
 8014744:	3e927e4f 	.word	0x3e927e4f
 8014748:	19cb1590 	.word	0x19cb1590
 801474c:	3efa01a0 	.word	0x3efa01a0
 8014750:	16c15177 	.word	0x16c15177
 8014754:	3f56c16c 	.word	0x3f56c16c
 8014758:	5555554c 	.word	0x5555554c
 801475c:	3fa55555 	.word	0x3fa55555
 8014760:	3fe00000 	.word	0x3fe00000
 8014764:	3ff00000 	.word	0x3ff00000
 8014768:	3fd33332 	.word	0x3fd33332
 801476c:	3fe90000 	.word	0x3fe90000
 8014770:	ffe00000 	.word	0xffe00000
 8014774:	3fe70000 	.word	0x3fe70000
 8014778:	3fd20000 	.word	0x3fd20000

0801477c <__kernel_rem_pio2>:
 801477c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801477e:	46de      	mov	lr, fp
 8014780:	464e      	mov	r6, r9
 8014782:	4645      	mov	r5, r8
 8014784:	4657      	mov	r7, sl
 8014786:	b5e0      	push	{r5, r6, r7, lr}
 8014788:	4cdc      	ldr	r4, [pc, #880]	; (8014afc <__kernel_rem_pio2+0x380>)
 801478a:	44a5      	add	sp, r4
 801478c:	910d      	str	r1, [sp, #52]	; 0x34
 801478e:	0014      	movs	r4, r2
 8014790:	0019      	movs	r1, r3
 8014792:	9aa4      	ldr	r2, [sp, #656]	; 0x290
 8014794:	9309      	str	r3, [sp, #36]	; 0x24
 8014796:	4bda      	ldr	r3, [pc, #872]	; (8014b00 <__kernel_rem_pio2+0x384>)
 8014798:	0092      	lsls	r2, r2, #2
 801479a:	58d6      	ldr	r6, [r2, r3]
 801479c:	1e4d      	subs	r5, r1, #1
 801479e:	9003      	str	r0, [sp, #12]
 80147a0:	2118      	movs	r1, #24
 80147a2:	1ee0      	subs	r0, r4, #3
 80147a4:	9606      	str	r6, [sp, #24]
 80147a6:	9502      	str	r5, [sp, #8]
 80147a8:	f7fc fa2a 	bl	8010c00 <__divsi3>
 80147ac:	43c3      	mvns	r3, r0
 80147ae:	0001      	movs	r1, r0
 80147b0:	17db      	asrs	r3, r3, #31
 80147b2:	4019      	ands	r1, r3
 80147b4:	1c4b      	adds	r3, r1, #1
 80147b6:	009a      	lsls	r2, r3, #2
 80147b8:	1a9b      	subs	r3, r3, r2
 80147ba:	00db      	lsls	r3, r3, #3
 80147bc:	191b      	adds	r3, r3, r4
 80147be:	910b      	str	r1, [sp, #44]	; 0x2c
 80147c0:	9305      	str	r3, [sp, #20]
 80147c2:	1b4c      	subs	r4, r1, r5
 80147c4:	1977      	adds	r7, r6, r5
 80147c6:	d418      	bmi.n	80147fa <__kernel_rem_pio2+0x7e>
 80147c8:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80147ca:	00a5      	lsls	r5, r4, #2
 80147cc:	469c      	mov	ip, r3
 80147ce:	193f      	adds	r7, r7, r4
 80147d0:	ae22      	add	r6, sp, #136	; 0x88
 80147d2:	4465      	add	r5, ip
 80147d4:	3701      	adds	r7, #1
 80147d6:	e007      	b.n	80147e8 <__kernel_rem_pio2+0x6c>
 80147d8:	6828      	ldr	r0, [r5, #0]
 80147da:	f7fe fb45 	bl	8012e68 <__aeabi_i2d>
 80147de:	3401      	adds	r4, #1
 80147e0:	c603      	stmia	r6!, {r0, r1}
 80147e2:	3504      	adds	r5, #4
 80147e4:	42bc      	cmp	r4, r7
 80147e6:	d008      	beq.n	80147fa <__kernel_rem_pio2+0x7e>
 80147e8:	2c00      	cmp	r4, #0
 80147ea:	daf5      	bge.n	80147d8 <__kernel_rem_pio2+0x5c>
 80147ec:	2000      	movs	r0, #0
 80147ee:	2100      	movs	r1, #0
 80147f0:	3401      	adds	r4, #1
 80147f2:	c603      	stmia	r6!, {r0, r1}
 80147f4:	3504      	adds	r5, #4
 80147f6:	42bc      	cmp	r4, r7
 80147f8:	d1f6      	bne.n	80147e8 <__kernel_rem_pio2+0x6c>
 80147fa:	9b06      	ldr	r3, [sp, #24]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	da01      	bge.n	8014804 <__kernel_rem_pio2+0x88>
 8014800:	f000 fbfd 	bl	8014ffe <__kernel_rem_pio2+0x882>
 8014804:	9b06      	ldr	r3, [sp, #24]
 8014806:	9903      	ldr	r1, [sp, #12]
 8014808:	3301      	adds	r3, #1
 801480a:	00db      	lsls	r3, r3, #3
 801480c:	469a      	mov	sl, r3
 801480e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014810:	00da      	lsls	r2, r3, #3
 8014812:	4694      	mov	ip, r2
 8014814:	9200      	str	r2, [sp, #0]
 8014816:	2200      	movs	r2, #0
 8014818:	4691      	mov	r9, r2
 801481a:	aa72      	add	r2, sp, #456	; 0x1c8
 801481c:	9204      	str	r2, [sp, #16]
 801481e:	4ab9      	ldr	r2, [pc, #740]	; (8014b04 <__kernel_rem_pio2+0x388>)
 8014820:	4461      	add	r1, ip
 8014822:	4693      	mov	fp, r2
 8014824:	4688      	mov	r8, r1
 8014826:	ab9a      	add	r3, sp, #616	; 0x268
 8014828:	4463      	add	r3, ip
 801482a:	449b      	add	fp, r3
 801482c:	9b02      	ldr	r3, [sp, #8]
 801482e:	2b00      	cmp	r3, #0
 8014830:	da00      	bge.n	8014834 <__kernel_rem_pio2+0xb8>
 8014832:	e1bc      	b.n	8014bae <__kernel_rem_pio2+0x432>
 8014834:	465d      	mov	r5, fp
 8014836:	2600      	movs	r6, #0
 8014838:	2700      	movs	r7, #0
 801483a:	9c03      	ldr	r4, [sp, #12]
 801483c:	444d      	add	r5, r9
 801483e:	682a      	ldr	r2, [r5, #0]
 8014840:	686b      	ldr	r3, [r5, #4]
 8014842:	cc03      	ldmia	r4!, {r0, r1}
 8014844:	f7fd fd04 	bl	8012250 <__aeabi_dmul>
 8014848:	0002      	movs	r2, r0
 801484a:	000b      	movs	r3, r1
 801484c:	0030      	movs	r0, r6
 801484e:	0039      	movs	r1, r7
 8014850:	f7fc fdd8 	bl	8011404 <__aeabi_dadd>
 8014854:	3d08      	subs	r5, #8
 8014856:	0006      	movs	r6, r0
 8014858:	000f      	movs	r7, r1
 801485a:	4544      	cmp	r4, r8
 801485c:	d1ef      	bne.n	801483e <__kernel_rem_pio2+0xc2>
 801485e:	9b04      	ldr	r3, [sp, #16]
 8014860:	444b      	add	r3, r9
 8014862:	601e      	str	r6, [r3, #0]
 8014864:	605f      	str	r7, [r3, #4]
 8014866:	2308      	movs	r3, #8
 8014868:	469c      	mov	ip, r3
 801486a:	44e1      	add	r9, ip
 801486c:	45d1      	cmp	r9, sl
 801486e:	d1dd      	bne.n	801482c <__kernel_rem_pio2+0xb0>
 8014870:	a80e      	add	r0, sp, #56	; 0x38
 8014872:	2104      	movs	r1, #4
 8014874:	4684      	mov	ip, r0
 8014876:	4249      	negs	r1, r1
 8014878:	4461      	add	r1, ip
 801487a:	468c      	mov	ip, r1
 801487c:	9a06      	ldr	r2, [sp, #24]
 801487e:	0093      	lsls	r3, r2, #2
 8014880:	449c      	add	ip, r3
 8014882:	4661      	mov	r1, ip
 8014884:	4684      	mov	ip, r0
 8014886:	910a      	str	r1, [sp, #40]	; 0x28
 8014888:	9903      	ldr	r1, [sp, #12]
 801488a:	3b08      	subs	r3, #8
 801488c:	4463      	add	r3, ip
 801488e:	468c      	mov	ip, r1
 8014890:	930c      	str	r3, [sp, #48]	; 0x30
 8014892:	9b00      	ldr	r3, [sp, #0]
 8014894:	9200      	str	r2, [sp, #0]
 8014896:	4463      	add	r3, ip
 8014898:	469b      	mov	fp, r3
 801489a:	9a00      	ldr	r2, [sp, #0]
 801489c:	9804      	ldr	r0, [sp, #16]
 801489e:	00d1      	lsls	r1, r2, #3
 80148a0:	0003      	movs	r3, r0
 80148a2:	468c      	mov	ip, r1
 80148a4:	4463      	add	r3, ip
 80148a6:	9108      	str	r1, [sp, #32]
 80148a8:	681e      	ldr	r6, [r3, #0]
 80148aa:	685f      	ldr	r7, [r3, #4]
 80148ac:	2a00      	cmp	r2, #0
 80148ae:	dd33      	ble.n	8014918 <__kernel_rem_pio2+0x19c>
 80148b0:	4995      	ldr	r1, [pc, #596]	; (8014b08 <__kernel_rem_pio2+0x38c>)
 80148b2:	4680      	mov	r8, r0
 80148b4:	468c      	mov	ip, r1
 80148b6:	4462      	add	r2, ip
 80148b8:	00d3      	lsls	r3, r2, #3
 80148ba:	4498      	add	r8, r3
 80148bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80148be:	469a      	mov	sl, r3
 80148c0:	ab0e      	add	r3, sp, #56	; 0x38
 80148c2:	4699      	mov	r9, r3
 80148c4:	2200      	movs	r2, #0
 80148c6:	4b91      	ldr	r3, [pc, #580]	; (8014b0c <__kernel_rem_pio2+0x390>)
 80148c8:	0030      	movs	r0, r6
 80148ca:	0039      	movs	r1, r7
 80148cc:	f7fd fcc0 	bl	8012250 <__aeabi_dmul>
 80148d0:	f7fe fa94 	bl	8012dfc <__aeabi_d2iz>
 80148d4:	f7fe fac8 	bl	8012e68 <__aeabi_i2d>
 80148d8:	2200      	movs	r2, #0
 80148da:	4b8d      	ldr	r3, [pc, #564]	; (8014b10 <__kernel_rem_pio2+0x394>)
 80148dc:	0004      	movs	r4, r0
 80148de:	000d      	movs	r5, r1
 80148e0:	f7fd fcb6 	bl	8012250 <__aeabi_dmul>
 80148e4:	0002      	movs	r2, r0
 80148e6:	000b      	movs	r3, r1
 80148e8:	0030      	movs	r0, r6
 80148ea:	0039      	movs	r1, r7
 80148ec:	f7fd ff22 	bl	8012734 <__aeabi_dsub>
 80148f0:	f7fe fa84 	bl	8012dfc <__aeabi_d2iz>
 80148f4:	464b      	mov	r3, r9
 80148f6:	c301      	stmia	r3!, {r0}
 80148f8:	4699      	mov	r9, r3
 80148fa:	4643      	mov	r3, r8
 80148fc:	0020      	movs	r0, r4
 80148fe:	681a      	ldr	r2, [r3, #0]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	0029      	movs	r1, r5
 8014904:	f7fc fd7e 	bl	8011404 <__aeabi_dadd>
 8014908:	2308      	movs	r3, #8
 801490a:	425b      	negs	r3, r3
 801490c:	469c      	mov	ip, r3
 801490e:	44e0      	add	r8, ip
 8014910:	0006      	movs	r6, r0
 8014912:	000f      	movs	r7, r1
 8014914:	45d0      	cmp	r8, sl
 8014916:	d1d5      	bne.n	80148c4 <__kernel_rem_pio2+0x148>
 8014918:	9b05      	ldr	r3, [sp, #20]
 801491a:	0030      	movs	r0, r6
 801491c:	001a      	movs	r2, r3
 801491e:	0039      	movs	r1, r7
 8014920:	4698      	mov	r8, r3
 8014922:	f000 fce5 	bl	80152f0 <scalbn>
 8014926:	23ff      	movs	r3, #255	; 0xff
 8014928:	2200      	movs	r2, #0
 801492a:	059b      	lsls	r3, r3, #22
 801492c:	0004      	movs	r4, r0
 801492e:	000d      	movs	r5, r1
 8014930:	f7fd fc8e 	bl	8012250 <__aeabi_dmul>
 8014934:	f000 fc38 	bl	80151a8 <floor>
 8014938:	2200      	movs	r2, #0
 801493a:	4b76      	ldr	r3, [pc, #472]	; (8014b14 <__kernel_rem_pio2+0x398>)
 801493c:	f7fd fc88 	bl	8012250 <__aeabi_dmul>
 8014940:	0002      	movs	r2, r0
 8014942:	000b      	movs	r3, r1
 8014944:	0020      	movs	r0, r4
 8014946:	0029      	movs	r1, r5
 8014948:	f7fd fef4 	bl	8012734 <__aeabi_dsub>
 801494c:	000d      	movs	r5, r1
 801494e:	0004      	movs	r4, r0
 8014950:	f7fe fa54 	bl	8012dfc <__aeabi_d2iz>
 8014954:	4681      	mov	r9, r0
 8014956:	f7fe fa87 	bl	8012e68 <__aeabi_i2d>
 801495a:	0002      	movs	r2, r0
 801495c:	000b      	movs	r3, r1
 801495e:	0020      	movs	r0, r4
 8014960:	0029      	movs	r1, r5
 8014962:	f7fd fee7 	bl	8012734 <__aeabi_dsub>
 8014966:	0006      	movs	r6, r0
 8014968:	4640      	mov	r0, r8
 801496a:	000f      	movs	r7, r1
 801496c:	2800      	cmp	r0, #0
 801496e:	dc00      	bgt.n	8014972 <__kernel_rem_pio2+0x1f6>
 8014970:	e0ee      	b.n	8014b50 <__kernel_rem_pio2+0x3d4>
 8014972:	9b00      	ldr	r3, [sp, #0]
 8014974:	2118      	movs	r1, #24
 8014976:	1e5a      	subs	r2, r3, #1
 8014978:	0092      	lsls	r2, r2, #2
 801497a:	ab0e      	add	r3, sp, #56	; 0x38
 801497c:	589b      	ldr	r3, [r3, r2]
 801497e:	1a09      	subs	r1, r1, r0
 8014980:	001d      	movs	r5, r3
 8014982:	410d      	asrs	r5, r1
 8014984:	44a9      	add	r9, r5
 8014986:	408d      	lsls	r5, r1
 8014988:	1b5d      	subs	r5, r3, r5
 801498a:	ab0e      	add	r3, sp, #56	; 0x38
 801498c:	509d      	str	r5, [r3, r2]
 801498e:	2317      	movs	r3, #23
 8014990:	1a1b      	subs	r3, r3, r0
 8014992:	411d      	asrs	r5, r3
 8014994:	2d00      	cmp	r5, #0
 8014996:	dd2d      	ble.n	80149f4 <__kernel_rem_pio2+0x278>
 8014998:	2301      	movs	r3, #1
 801499a:	469c      	mov	ip, r3
 801499c:	9b00      	ldr	r3, [sp, #0]
 801499e:	44e1      	add	r9, ip
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	dc00      	bgt.n	80149a6 <__kernel_rem_pio2+0x22a>
 80149a4:	e21c      	b.n	8014de0 <__kernel_rem_pio2+0x664>
 80149a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80149a8:	2301      	movs	r3, #1
 80149aa:	2c00      	cmp	r4, #0
 80149ac:	d000      	beq.n	80149b0 <__kernel_rem_pio2+0x234>
 80149ae:	e0b5      	b.n	8014b1c <__kernel_rem_pio2+0x3a0>
 80149b0:	9a00      	ldr	r2, [sp, #0]
 80149b2:	2a01      	cmp	r2, #1
 80149b4:	d009      	beq.n	80149ca <__kernel_rem_pio2+0x24e>
 80149b6:	0099      	lsls	r1, r3, #2
 80149b8:	aa0e      	add	r2, sp, #56	; 0x38
 80149ba:	5854      	ldr	r4, [r2, r1]
 80149bc:	3301      	adds	r3, #1
 80149be:	2c00      	cmp	r4, #0
 80149c0:	d000      	beq.n	80149c4 <__kernel_rem_pio2+0x248>
 80149c2:	e0ac      	b.n	8014b1e <__kernel_rem_pio2+0x3a2>
 80149c4:	9a00      	ldr	r2, [sp, #0]
 80149c6:	429a      	cmp	r2, r3
 80149c8:	d1f5      	bne.n	80149b6 <__kernel_rem_pio2+0x23a>
 80149ca:	9b05      	ldr	r3, [sp, #20]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	dd0e      	ble.n	80149ee <__kernel_rem_pio2+0x272>
 80149d0:	2b01      	cmp	r3, #1
 80149d2:	d100      	bne.n	80149d6 <__kernel_rem_pio2+0x25a>
 80149d4:	e1a8      	b.n	8014d28 <__kernel_rem_pio2+0x5ac>
 80149d6:	2b02      	cmp	r3, #2
 80149d8:	d109      	bne.n	80149ee <__kernel_rem_pio2+0x272>
 80149da:	9b00      	ldr	r3, [sp, #0]
 80149dc:	a90e      	add	r1, sp, #56	; 0x38
 80149de:	1e5a      	subs	r2, r3, #1
 80149e0:	0092      	lsls	r2, r2, #2
 80149e2:	ab0e      	add	r3, sp, #56	; 0x38
 80149e4:	589b      	ldr	r3, [r3, r2]
 80149e6:	9307      	str	r3, [sp, #28]
 80149e8:	029b      	lsls	r3, r3, #10
 80149ea:	0a9b      	lsrs	r3, r3, #10
 80149ec:	508b      	str	r3, [r1, r2]
 80149ee:	2d02      	cmp	r5, #2
 80149f0:	d100      	bne.n	80149f4 <__kernel_rem_pio2+0x278>
 80149f2:	e0c1      	b.n	8014b78 <__kernel_rem_pio2+0x3fc>
 80149f4:	2300      	movs	r3, #0
 80149f6:	2200      	movs	r2, #0
 80149f8:	0030      	movs	r0, r6
 80149fa:	0039      	movs	r1, r7
 80149fc:	f7fc f9fc 	bl	8010df8 <__aeabi_dcmpeq>
 8014a00:	9b00      	ldr	r3, [sp, #0]
 8014a02:	2800      	cmp	r0, #0
 8014a04:	d100      	bne.n	8014a08 <__kernel_rem_pio2+0x28c>
 8014a06:	e294      	b.n	8014f32 <__kernel_rem_pio2+0x7b6>
 8014a08:	9a06      	ldr	r2, [sp, #24]
 8014a0a:	1e59      	subs	r1, r3, #1
 8014a0c:	428a      	cmp	r2, r1
 8014a0e:	dc10      	bgt.n	8014a32 <__kernel_rem_pio2+0x2b6>
 8014a10:	4a41      	ldr	r2, [pc, #260]	; (8014b18 <__kernel_rem_pio2+0x39c>)
 8014a12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a14:	4694      	mov	ip, r2
 8014a16:	aa0e      	add	r2, sp, #56	; 0x38
 8014a18:	4463      	add	r3, ip
 8014a1a:	4694      	mov	ip, r2
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	009b      	lsls	r3, r3, #2
 8014a20:	4463      	add	r3, ip
 8014a22:	681c      	ldr	r4, [r3, #0]
 8014a24:	3b04      	subs	r3, #4
 8014a26:	4322      	orrs	r2, r4
 8014a28:	4283      	cmp	r3, r0
 8014a2a:	d1fa      	bne.n	8014a22 <__kernel_rem_pio2+0x2a6>
 8014a2c:	2a00      	cmp	r2, #0
 8014a2e:	d000      	beq.n	8014a32 <__kernel_rem_pio2+0x2b6>
 8014a30:	e0c0      	b.n	8014bb4 <__kernel_rem_pio2+0x438>
 8014a32:	9b06      	ldr	r3, [sp, #24]
 8014a34:	aa0e      	add	r2, sp, #56	; 0x38
 8014a36:	3b01      	subs	r3, #1
 8014a38:	009b      	lsls	r3, r3, #2
 8014a3a:	58d3      	ldr	r3, [r2, r3]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d000      	beq.n	8014a42 <__kernel_rem_pio2+0x2c6>
 8014a40:	e0b3      	b.n	8014baa <__kernel_rem_pio2+0x42e>
 8014a42:	2201      	movs	r2, #1
 8014a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a46:	3b04      	subs	r3, #4
 8014a48:	6859      	ldr	r1, [r3, #4]
 8014a4a:	3201      	adds	r2, #1
 8014a4c:	2900      	cmp	r1, #0
 8014a4e:	d0fa      	beq.n	8014a46 <__kernel_rem_pio2+0x2ca>
 8014a50:	9b00      	ldr	r3, [sp, #0]
 8014a52:	469c      	mov	ip, r3
 8014a54:	4462      	add	r2, ip
 8014a56:	0011      	movs	r1, r2
 8014a58:	9207      	str	r2, [sp, #28]
 8014a5a:	001a      	movs	r2, r3
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	428b      	cmp	r3, r1
 8014a60:	dc46      	bgt.n	8014af0 <__kernel_rem_pio2+0x374>
 8014a62:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014a64:	4663      	mov	r3, ip
 8014a66:	4680      	mov	r8, r0
 8014a68:	9ca5      	ldr	r4, [sp, #660]	; 0x294
 8014a6a:	4443      	add	r3, r8
 8014a6c:	46a0      	mov	r8, r4
 8014a6e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014a70:	009b      	lsls	r3, r3, #2
 8014a72:	46a1      	mov	r9, r4
 8014a74:	444a      	add	r2, r9
 8014a76:	4498      	add	r8, r3
 8014a78:	00d3      	lsls	r3, r2, #3
 8014a7a:	aa22      	add	r2, sp, #136	; 0x88
 8014a7c:	4691      	mov	r9, r2
 8014a7e:	9a04      	ldr	r2, [sp, #16]
 8014a80:	4499      	add	r9, r3
 8014a82:	4694      	mov	ip, r2
 8014a84:	9b08      	ldr	r3, [sp, #32]
 8014a86:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8014a88:	4463      	add	r3, ip
 8014a8a:	4684      	mov	ip, r0
 8014a8c:	4461      	add	r1, ip
 8014a8e:	4694      	mov	ip, r2
 8014a90:	469a      	mov	sl, r3
 8014a92:	008b      	lsls	r3, r1, #2
 8014a94:	4463      	add	r3, ip
 8014a96:	9300      	str	r3, [sp, #0]
 8014a98:	4643      	mov	r3, r8
 8014a9a:	6858      	ldr	r0, [r3, #4]
 8014a9c:	f7fe f9e4 	bl	8012e68 <__aeabi_i2d>
 8014aa0:	464b      	mov	r3, r9
 8014aa2:	6018      	str	r0, [r3, #0]
 8014aa4:	6059      	str	r1, [r3, #4]
 8014aa6:	9b02      	ldr	r3, [sp, #8]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	db24      	blt.n	8014af6 <__kernel_rem_pio2+0x37a>
 8014aac:	464d      	mov	r5, r9
 8014aae:	9c03      	ldr	r4, [sp, #12]
 8014ab0:	2600      	movs	r6, #0
 8014ab2:	2700      	movs	r7, #0
 8014ab4:	e001      	b.n	8014aba <__kernel_rem_pio2+0x33e>
 8014ab6:	6828      	ldr	r0, [r5, #0]
 8014ab8:	6869      	ldr	r1, [r5, #4]
 8014aba:	cc0c      	ldmia	r4!, {r2, r3}
 8014abc:	f7fd fbc8 	bl	8012250 <__aeabi_dmul>
 8014ac0:	0002      	movs	r2, r0
 8014ac2:	000b      	movs	r3, r1
 8014ac4:	0030      	movs	r0, r6
 8014ac6:	0039      	movs	r1, r7
 8014ac8:	f7fc fc9c 	bl	8011404 <__aeabi_dadd>
 8014acc:	3d08      	subs	r5, #8
 8014ace:	0006      	movs	r6, r0
 8014ad0:	000f      	movs	r7, r1
 8014ad2:	455c      	cmp	r4, fp
 8014ad4:	d1ef      	bne.n	8014ab6 <__kernel_rem_pio2+0x33a>
 8014ad6:	4653      	mov	r3, sl
 8014ad8:	609e      	str	r6, [r3, #8]
 8014ada:	60df      	str	r7, [r3, #12]
 8014adc:	2304      	movs	r3, #4
 8014ade:	469c      	mov	ip, r3
 8014ae0:	3304      	adds	r3, #4
 8014ae2:	44e0      	add	r8, ip
 8014ae4:	469c      	mov	ip, r3
 8014ae6:	9b00      	ldr	r3, [sp, #0]
 8014ae8:	44e1      	add	r9, ip
 8014aea:	44e2      	add	sl, ip
 8014aec:	4598      	cmp	r8, r3
 8014aee:	d1d3      	bne.n	8014a98 <__kernel_rem_pio2+0x31c>
 8014af0:	9b07      	ldr	r3, [sp, #28]
 8014af2:	9300      	str	r3, [sp, #0]
 8014af4:	e6d1      	b.n	801489a <__kernel_rem_pio2+0x11e>
 8014af6:	2600      	movs	r6, #0
 8014af8:	2700      	movs	r7, #0
 8014afa:	e7ec      	b.n	8014ad6 <__kernel_rem_pio2+0x35a>
 8014afc:	fffffd94 	.word	0xfffffd94
 8014b00:	0801eef8 	.word	0x0801eef8
 8014b04:	fffffe18 	.word	0xfffffe18
 8014b08:	1fffffff 	.word	0x1fffffff
 8014b0c:	3e700000 	.word	0x3e700000
 8014b10:	41700000 	.word	0x41700000
 8014b14:	40200000 	.word	0x40200000
 8014b18:	3fffffff 	.word	0x3fffffff
 8014b1c:	2100      	movs	r1, #0
 8014b1e:	2280      	movs	r2, #128	; 0x80
 8014b20:	0452      	lsls	r2, r2, #17
 8014b22:	1b14      	subs	r4, r2, r4
 8014b24:	aa0e      	add	r2, sp, #56	; 0x38
 8014b26:	5054      	str	r4, [r2, r1]
 8014b28:	9900      	ldr	r1, [sp, #0]
 8014b2a:	4299      	cmp	r1, r3
 8014b2c:	dd0e      	ble.n	8014b4c <__kernel_rem_pio2+0x3d0>
 8014b2e:	a80e      	add	r0, sp, #56	; 0x38
 8014b30:	4684      	mov	ip, r0
 8014b32:	009b      	lsls	r3, r3, #2
 8014b34:	aa0e      	add	r2, sp, #56	; 0x38
 8014b36:	0089      	lsls	r1, r1, #2
 8014b38:	58d2      	ldr	r2, [r2, r3]
 8014b3a:	4461      	add	r1, ip
 8014b3c:	4463      	add	r3, ip
 8014b3e:	48cf      	ldr	r0, [pc, #828]	; (8014e7c <__kernel_rem_pio2+0x700>)
 8014b40:	e000      	b.n	8014b44 <__kernel_rem_pio2+0x3c8>
 8014b42:	681a      	ldr	r2, [r3, #0]
 8014b44:	1a82      	subs	r2, r0, r2
 8014b46:	c304      	stmia	r3!, {r2}
 8014b48:	428b      	cmp	r3, r1
 8014b4a:	d1fa      	bne.n	8014b42 <__kernel_rem_pio2+0x3c6>
 8014b4c:	2401      	movs	r4, #1
 8014b4e:	e73c      	b.n	80149ca <__kernel_rem_pio2+0x24e>
 8014b50:	9b05      	ldr	r3, [sp, #20]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d106      	bne.n	8014b64 <__kernel_rem_pio2+0x3e8>
 8014b56:	9b00      	ldr	r3, [sp, #0]
 8014b58:	aa0e      	add	r2, sp, #56	; 0x38
 8014b5a:	3b01      	subs	r3, #1
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	58d5      	ldr	r5, [r2, r3]
 8014b60:	15ed      	asrs	r5, r5, #23
 8014b62:	e717      	b.n	8014994 <__kernel_rem_pio2+0x218>
 8014b64:	2200      	movs	r2, #0
 8014b66:	4bc6      	ldr	r3, [pc, #792]	; (8014e80 <__kernel_rem_pio2+0x704>)
 8014b68:	0030      	movs	r0, r6
 8014b6a:	f7fc f969 	bl	8010e40 <__aeabi_dcmpge>
 8014b6e:	2800      	cmp	r0, #0
 8014b70:	d000      	beq.n	8014b74 <__kernel_rem_pio2+0x3f8>
 8014b72:	e124      	b.n	8014dbe <__kernel_rem_pio2+0x642>
 8014b74:	2500      	movs	r5, #0
 8014b76:	e73d      	b.n	80149f4 <__kernel_rem_pio2+0x278>
 8014b78:	0032      	movs	r2, r6
 8014b7a:	003b      	movs	r3, r7
 8014b7c:	2000      	movs	r0, #0
 8014b7e:	49c1      	ldr	r1, [pc, #772]	; (8014e84 <__kernel_rem_pio2+0x708>)
 8014b80:	f7fd fdd8 	bl	8012734 <__aeabi_dsub>
 8014b84:	0006      	movs	r6, r0
 8014b86:	000f      	movs	r7, r1
 8014b88:	2c00      	cmp	r4, #0
 8014b8a:	d100      	bne.n	8014b8e <__kernel_rem_pio2+0x412>
 8014b8c:	e732      	b.n	80149f4 <__kernel_rem_pio2+0x278>
 8014b8e:	9a05      	ldr	r2, [sp, #20]
 8014b90:	2000      	movs	r0, #0
 8014b92:	49bc      	ldr	r1, [pc, #752]	; (8014e84 <__kernel_rem_pio2+0x708>)
 8014b94:	f000 fbac 	bl	80152f0 <scalbn>
 8014b98:	0002      	movs	r2, r0
 8014b9a:	000b      	movs	r3, r1
 8014b9c:	0030      	movs	r0, r6
 8014b9e:	0039      	movs	r1, r7
 8014ba0:	f7fd fdc8 	bl	8012734 <__aeabi_dsub>
 8014ba4:	0006      	movs	r6, r0
 8014ba6:	000f      	movs	r7, r1
 8014ba8:	e724      	b.n	80149f4 <__kernel_rem_pio2+0x278>
 8014baa:	2201      	movs	r2, #1
 8014bac:	e750      	b.n	8014a50 <__kernel_rem_pio2+0x2d4>
 8014bae:	2600      	movs	r6, #0
 8014bb0:	2700      	movs	r7, #0
 8014bb2:	e654      	b.n	801485e <__kernel_rem_pio2+0xe2>
 8014bb4:	464b      	mov	r3, r9
 8014bb6:	9a05      	ldr	r2, [sp, #20]
 8014bb8:	9307      	str	r3, [sp, #28]
 8014bba:	4688      	mov	r8, r1
 8014bbc:	008b      	lsls	r3, r1, #2
 8014bbe:	a90e      	add	r1, sp, #56	; 0x38
 8014bc0:	58cb      	ldr	r3, [r1, r3]
 8014bc2:	3a18      	subs	r2, #24
 8014bc4:	9508      	str	r5, [sp, #32]
 8014bc6:	9205      	str	r2, [sp, #20]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d10d      	bne.n	8014be8 <__kernel_rem_pio2+0x46c>
 8014bcc:	468c      	mov	ip, r1
 8014bce:	4641      	mov	r1, r8
 8014bd0:	4bad      	ldr	r3, [pc, #692]	; (8014e88 <__kernel_rem_pio2+0x70c>)
 8014bd2:	4443      	add	r3, r8
 8014bd4:	009b      	lsls	r3, r3, #2
 8014bd6:	4463      	add	r3, ip
 8014bd8:	3b04      	subs	r3, #4
 8014bda:	6858      	ldr	r0, [r3, #4]
 8014bdc:	3901      	subs	r1, #1
 8014bde:	3a18      	subs	r2, #24
 8014be0:	2800      	cmp	r0, #0
 8014be2:	d0f9      	beq.n	8014bd8 <__kernel_rem_pio2+0x45c>
 8014be4:	4688      	mov	r8, r1
 8014be6:	9205      	str	r2, [sp, #20]
 8014be8:	9a05      	ldr	r2, [sp, #20]
 8014bea:	2000      	movs	r0, #0
 8014bec:	49a5      	ldr	r1, [pc, #660]	; (8014e84 <__kernel_rem_pio2+0x708>)
 8014bee:	f000 fb7f 	bl	80152f0 <scalbn>
 8014bf2:	4643      	mov	r3, r8
 8014bf4:	0004      	movs	r4, r0
 8014bf6:	000d      	movs	r5, r1
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	da00      	bge.n	8014bfe <__kernel_rem_pio2+0x482>
 8014bfc:	e205      	b.n	801500a <__kernel_rem_pio2+0x88e>
 8014bfe:	009e      	lsls	r6, r3, #2
 8014c00:	ab0e      	add	r3, sp, #56	; 0x38
 8014c02:	469c      	mov	ip, r3
 8014c04:	4643      	mov	r3, r8
 8014c06:	00db      	lsls	r3, r3, #3
 8014c08:	4466      	add	r6, ip
 8014c0a:	469c      	mov	ip, r3
 8014c0c:	9305      	str	r3, [sp, #20]
 8014c0e:	ab70      	add	r3, sp, #448	; 0x1c0
 8014c10:	4699      	mov	r9, r3
 8014c12:	9f04      	ldr	r7, [sp, #16]
 8014c14:	4467      	add	r7, ip
 8014c16:	9700      	str	r7, [sp, #0]
 8014c18:	6830      	ldr	r0, [r6, #0]
 8014c1a:	f7fe f925 	bl	8012e68 <__aeabi_i2d>
 8014c1e:	0022      	movs	r2, r4
 8014c20:	002b      	movs	r3, r5
 8014c22:	f7fd fb15 	bl	8012250 <__aeabi_dmul>
 8014c26:	2200      	movs	r2, #0
 8014c28:	6038      	str	r0, [r7, #0]
 8014c2a:	6079      	str	r1, [r7, #4]
 8014c2c:	4b97      	ldr	r3, [pc, #604]	; (8014e8c <__kernel_rem_pio2+0x710>)
 8014c2e:	0020      	movs	r0, r4
 8014c30:	0029      	movs	r1, r5
 8014c32:	f7fd fb0d 	bl	8012250 <__aeabi_dmul>
 8014c36:	3f08      	subs	r7, #8
 8014c38:	0004      	movs	r4, r0
 8014c3a:	000d      	movs	r5, r1
 8014c3c:	3e04      	subs	r6, #4
 8014c3e:	45b9      	cmp	r9, r7
 8014c40:	d1ea      	bne.n	8014c18 <__kernel_rem_pio2+0x49c>
 8014c42:	ab4a      	add	r3, sp, #296	; 0x128
 8014c44:	9303      	str	r3, [sp, #12]
 8014c46:	469b      	mov	fp, r3
 8014c48:	2300      	movs	r3, #0
 8014c4a:	469a      	mov	sl, r3
 8014c4c:	9b06      	ldr	r3, [sp, #24]
 8014c4e:	4642      	mov	r2, r8
 8014c50:	4699      	mov	r9, r3
 8014c52:	4643      	mov	r3, r8
 8014c54:	3201      	adds	r2, #1
 8014c56:	9202      	str	r2, [sp, #8]
 8014c58:	9304      	str	r3, [sp, #16]
 8014c5a:	464b      	mov	r3, r9
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	da00      	bge.n	8014c62 <__kernel_rem_pio2+0x4e6>
 8014c60:	e0aa      	b.n	8014db8 <__kernel_rem_pio2+0x63c>
 8014c62:	2080      	movs	r0, #128	; 0x80
 8014c64:	4b8a      	ldr	r3, [pc, #552]	; (8014e90 <__kernel_rem_pio2+0x714>)
 8014c66:	9d00      	ldr	r5, [sp, #0]
 8014c68:	4698      	mov	r8, r3
 8014c6a:	05c0      	lsls	r0, r0, #23
 8014c6c:	4989      	ldr	r1, [pc, #548]	; (8014e94 <__kernel_rem_pio2+0x718>)
 8014c6e:	2600      	movs	r6, #0
 8014c70:	2700      	movs	r7, #0
 8014c72:	2400      	movs	r4, #0
 8014c74:	e008      	b.n	8014c88 <__kernel_rem_pio2+0x50c>
 8014c76:	2308      	movs	r3, #8
 8014c78:	469c      	mov	ip, r3
 8014c7a:	3508      	adds	r5, #8
 8014c7c:	44e0      	add	r8, ip
 8014c7e:	4554      	cmp	r4, sl
 8014c80:	dc11      	bgt.n	8014ca6 <__kernel_rem_pio2+0x52a>
 8014c82:	4643      	mov	r3, r8
 8014c84:	6818      	ldr	r0, [r3, #0]
 8014c86:	6859      	ldr	r1, [r3, #4]
 8014c88:	682a      	ldr	r2, [r5, #0]
 8014c8a:	686b      	ldr	r3, [r5, #4]
 8014c8c:	f7fd fae0 	bl	8012250 <__aeabi_dmul>
 8014c90:	0002      	movs	r2, r0
 8014c92:	000b      	movs	r3, r1
 8014c94:	0030      	movs	r0, r6
 8014c96:	0039      	movs	r1, r7
 8014c98:	f7fc fbb4 	bl	8011404 <__aeabi_dadd>
 8014c9c:	3401      	adds	r4, #1
 8014c9e:	0006      	movs	r6, r0
 8014ca0:	000f      	movs	r7, r1
 8014ca2:	45a1      	cmp	r9, r4
 8014ca4:	dae7      	bge.n	8014c76 <__kernel_rem_pio2+0x4fa>
 8014ca6:	465b      	mov	r3, fp
 8014ca8:	c3c0      	stmia	r3!, {r6, r7}
 8014caa:	469b      	mov	fp, r3
 8014cac:	2301      	movs	r3, #1
 8014cae:	469c      	mov	ip, r3
 8014cb0:	9b00      	ldr	r3, [sp, #0]
 8014cb2:	44e2      	add	sl, ip
 8014cb4:	3b08      	subs	r3, #8
 8014cb6:	9300      	str	r3, [sp, #0]
 8014cb8:	9b02      	ldr	r3, [sp, #8]
 8014cba:	459a      	cmp	sl, r3
 8014cbc:	d1cd      	bne.n	8014c5a <__kernel_rem_pio2+0x4de>
 8014cbe:	9b04      	ldr	r3, [sp, #16]
 8014cc0:	4698      	mov	r8, r3
 8014cc2:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014cc4:	2b02      	cmp	r3, #2
 8014cc6:	dd00      	ble.n	8014cca <__kernel_rem_pio2+0x54e>
 8014cc8:	e08e      	b.n	8014de8 <__kernel_rem_pio2+0x66c>
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	dc37      	bgt.n	8014d3e <__kernel_rem_pio2+0x5c2>
 8014cce:	d11f      	bne.n	8014d10 <__kernel_rem_pio2+0x594>
 8014cd0:	9b05      	ldr	r3, [sp, #20]
 8014cd2:	2700      	movs	r7, #0
 8014cd4:	001d      	movs	r5, r3
 8014cd6:	9b03      	ldr	r3, [sp, #12]
 8014cd8:	2400      	movs	r4, #0
 8014cda:	469c      	mov	ip, r3
 8014cdc:	001e      	movs	r6, r3
 8014cde:	4465      	add	r5, ip
 8014ce0:	3e08      	subs	r6, #8
 8014ce2:	682a      	ldr	r2, [r5, #0]
 8014ce4:	686b      	ldr	r3, [r5, #4]
 8014ce6:	0038      	movs	r0, r7
 8014ce8:	0021      	movs	r1, r4
 8014cea:	f7fc fb8b 	bl	8011404 <__aeabi_dadd>
 8014cee:	3d08      	subs	r5, #8
 8014cf0:	0007      	movs	r7, r0
 8014cf2:	000c      	movs	r4, r1
 8014cf4:	42ae      	cmp	r6, r5
 8014cf6:	d1f4      	bne.n	8014ce2 <__kernel_rem_pio2+0x566>
 8014cf8:	9b08      	ldr	r3, [sp, #32]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d003      	beq.n	8014d06 <__kernel_rem_pio2+0x58a>
 8014cfe:	2380      	movs	r3, #128	; 0x80
 8014d00:	061b      	lsls	r3, r3, #24
 8014d02:	469c      	mov	ip, r3
 8014d04:	4464      	add	r4, ip
 8014d06:	003a      	movs	r2, r7
 8014d08:	0023      	movs	r3, r4
 8014d0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014d0c:	600a      	str	r2, [r1, #0]
 8014d0e:	604b      	str	r3, [r1, #4]
 8014d10:	2007      	movs	r0, #7
 8014d12:	9b07      	ldr	r3, [sp, #28]
 8014d14:	4018      	ands	r0, r3
 8014d16:	239b      	movs	r3, #155	; 0x9b
 8014d18:	009b      	lsls	r3, r3, #2
 8014d1a:	449d      	add	sp, r3
 8014d1c:	bc3c      	pop	{r2, r3, r4, r5}
 8014d1e:	4690      	mov	r8, r2
 8014d20:	4699      	mov	r9, r3
 8014d22:	46a2      	mov	sl, r4
 8014d24:	46ab      	mov	fp, r5
 8014d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d28:	9b00      	ldr	r3, [sp, #0]
 8014d2a:	a90e      	add	r1, sp, #56	; 0x38
 8014d2c:	1e5a      	subs	r2, r3, #1
 8014d2e:	0092      	lsls	r2, r2, #2
 8014d30:	ab0e      	add	r3, sp, #56	; 0x38
 8014d32:	589b      	ldr	r3, [r3, r2]
 8014d34:	9307      	str	r3, [sp, #28]
 8014d36:	025b      	lsls	r3, r3, #9
 8014d38:	0a5b      	lsrs	r3, r3, #9
 8014d3a:	508b      	str	r3, [r1, r2]
 8014d3c:	e657      	b.n	80149ee <__kernel_rem_pio2+0x272>
 8014d3e:	4643      	mov	r3, r8
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	da00      	bge.n	8014d46 <__kernel_rem_pio2+0x5ca>
 8014d44:	e170      	b.n	8015028 <__kernel_rem_pio2+0x8ac>
 8014d46:	2000      	movs	r0, #0
 8014d48:	2100      	movs	r1, #0
 8014d4a:	00db      	lsls	r3, r3, #3
 8014d4c:	aa4a      	add	r2, sp, #296	; 0x128
 8014d4e:	18d6      	adds	r6, r2, r3
 8014d50:	af48      	add	r7, sp, #288	; 0x120
 8014d52:	6832      	ldr	r2, [r6, #0]
 8014d54:	6873      	ldr	r3, [r6, #4]
 8014d56:	3e08      	subs	r6, #8
 8014d58:	f7fc fb54 	bl	8011404 <__aeabi_dadd>
 8014d5c:	42b7      	cmp	r7, r6
 8014d5e:	d1f8      	bne.n	8014d52 <__kernel_rem_pio2+0x5d6>
 8014d60:	9b08      	ldr	r3, [sp, #32]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d000      	beq.n	8014d68 <__kernel_rem_pio2+0x5ec>
 8014d66:	e125      	b.n	8014fb4 <__kernel_rem_pio2+0x838>
 8014d68:	000b      	movs	r3, r1
 8014d6a:	0002      	movs	r2, r0
 8014d6c:	984a      	ldr	r0, [sp, #296]	; 0x128
 8014d6e:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8014d70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014d72:	6022      	str	r2, [r4, #0]
 8014d74:	6063      	str	r3, [r4, #4]
 8014d76:	f7fd fcdd 	bl	8012734 <__aeabi_dsub>
 8014d7a:	4643      	mov	r3, r8
 8014d7c:	0007      	movs	r7, r0
 8014d7e:	000c      	movs	r4, r1
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	dd13      	ble.n	8014dac <__kernel_rem_pio2+0x630>
 8014d84:	2501      	movs	r5, #1
 8014d86:	ae4c      	add	r6, sp, #304	; 0x130
 8014d88:	46b1      	mov	r9, r6
 8014d8a:	0038      	movs	r0, r7
 8014d8c:	002e      	movs	r6, r5
 8014d8e:	0021      	movs	r1, r4
 8014d90:	464c      	mov	r4, r9
 8014d92:	3601      	adds	r6, #1
 8014d94:	cc0c      	ldmia	r4!, {r2, r3}
 8014d96:	f7fc fb35 	bl	8011404 <__aeabi_dadd>
 8014d9a:	46a1      	mov	r9, r4
 8014d9c:	45b0      	cmp	r8, r6
 8014d9e:	daf7      	bge.n	8014d90 <__kernel_rem_pio2+0x614>
 8014da0:	9b08      	ldr	r3, [sp, #32]
 8014da2:	0007      	movs	r7, r0
 8014da4:	000c      	movs	r4, r1
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d000      	beq.n	8014dac <__kernel_rem_pio2+0x630>
 8014daa:	e115      	b.n	8014fd8 <__kernel_rem_pio2+0x85c>
 8014dac:	003a      	movs	r2, r7
 8014dae:	0023      	movs	r3, r4
 8014db0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014db2:	608a      	str	r2, [r1, #8]
 8014db4:	60cb      	str	r3, [r1, #12]
 8014db6:	e7ab      	b.n	8014d10 <__kernel_rem_pio2+0x594>
 8014db8:	2600      	movs	r6, #0
 8014dba:	2700      	movs	r7, #0
 8014dbc:	e773      	b.n	8014ca6 <__kernel_rem_pio2+0x52a>
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	469c      	mov	ip, r3
 8014dc2:	9b00      	ldr	r3, [sp, #0]
 8014dc4:	44e1      	add	r9, ip
 8014dc6:	2502      	movs	r5, #2
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	dd00      	ble.n	8014dce <__kernel_rem_pio2+0x652>
 8014dcc:	e5eb      	b.n	80149a6 <__kernel_rem_pio2+0x22a>
 8014dce:	0032      	movs	r2, r6
 8014dd0:	003b      	movs	r3, r7
 8014dd2:	2000      	movs	r0, #0
 8014dd4:	492b      	ldr	r1, [pc, #172]	; (8014e84 <__kernel_rem_pio2+0x708>)
 8014dd6:	f7fd fcad 	bl	8012734 <__aeabi_dsub>
 8014dda:	0006      	movs	r6, r0
 8014ddc:	000f      	movs	r7, r1
 8014dde:	e609      	b.n	80149f4 <__kernel_rem_pio2+0x278>
 8014de0:	2400      	movs	r4, #0
 8014de2:	e5f2      	b.n	80149ca <__kernel_rem_pio2+0x24e>
 8014de4:	ab4a      	add	r3, sp, #296	; 0x128
 8014de6:	9303      	str	r3, [sp, #12]
 8014de8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014dea:	2b03      	cmp	r3, #3
 8014dec:	d000      	beq.n	8014df0 <__kernel_rem_pio2+0x674>
 8014dee:	e78f      	b.n	8014d10 <__kernel_rem_pio2+0x594>
 8014df0:	4643      	mov	r3, r8
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	dc00      	bgt.n	8014df8 <__kernel_rem_pio2+0x67c>
 8014df6:	e114      	b.n	8015022 <__kernel_rem_pio2+0x8a6>
 8014df8:	9a03      	ldr	r2, [sp, #12]
 8014dfa:	00db      	lsls	r3, r3, #3
 8014dfc:	469b      	mov	fp, r3
 8014dfe:	0013      	movs	r3, r2
 8014e00:	4691      	mov	r9, r2
 8014e02:	445b      	add	r3, fp
 8014e04:	681e      	ldr	r6, [r3, #0]
 8014e06:	685f      	ldr	r7, [r3, #4]
 8014e08:	4b23      	ldr	r3, [pc, #140]	; (8014e98 <__kernel_rem_pio2+0x71c>)
 8014e0a:	4443      	add	r3, r8
 8014e0c:	9302      	str	r3, [sp, #8]
 8014e0e:	00db      	lsls	r3, r3, #3
 8014e10:	4499      	add	r9, r3
 8014e12:	ab48      	add	r3, sp, #288	; 0x120
 8014e14:	469a      	mov	sl, r3
 8014e16:	464b      	mov	r3, r9
 8014e18:	685c      	ldr	r4, [r3, #4]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	0018      	movs	r0, r3
 8014e1e:	0021      	movs	r1, r4
 8014e20:	0032      	movs	r2, r6
 8014e22:	003b      	movs	r3, r7
 8014e24:	9000      	str	r0, [sp, #0]
 8014e26:	9101      	str	r1, [sp, #4]
 8014e28:	f7fc faec 	bl	8011404 <__aeabi_dadd>
 8014e2c:	0004      	movs	r4, r0
 8014e2e:	000d      	movs	r5, r1
 8014e30:	0002      	movs	r2, r0
 8014e32:	000b      	movs	r3, r1
 8014e34:	9800      	ldr	r0, [sp, #0]
 8014e36:	9901      	ldr	r1, [sp, #4]
 8014e38:	f7fd fc7c 	bl	8012734 <__aeabi_dsub>
 8014e3c:	003b      	movs	r3, r7
 8014e3e:	0032      	movs	r2, r6
 8014e40:	f7fc fae0 	bl	8011404 <__aeabi_dadd>
 8014e44:	464b      	mov	r3, r9
 8014e46:	6098      	str	r0, [r3, #8]
 8014e48:	60d9      	str	r1, [r3, #12]
 8014e4a:	601c      	str	r4, [r3, #0]
 8014e4c:	605d      	str	r5, [r3, #4]
 8014e4e:	2308      	movs	r3, #8
 8014e50:	425b      	negs	r3, r3
 8014e52:	469c      	mov	ip, r3
 8014e54:	44e1      	add	r9, ip
 8014e56:	0026      	movs	r6, r4
 8014e58:	002f      	movs	r7, r5
 8014e5a:	45ca      	cmp	sl, r9
 8014e5c:	d1db      	bne.n	8014e16 <__kernel_rem_pio2+0x69a>
 8014e5e:	4643      	mov	r3, r8
 8014e60:	2b01      	cmp	r3, #1
 8014e62:	dc00      	bgt.n	8014e66 <__kernel_rem_pio2+0x6ea>
 8014e64:	e0e3      	b.n	801502e <__kernel_rem_pio2+0x8b2>
 8014e66:	9a03      	ldr	r2, [sp, #12]
 8014e68:	0013      	movs	r3, r2
 8014e6a:	445b      	add	r3, fp
 8014e6c:	681e      	ldr	r6, [r3, #0]
 8014e6e:	685f      	ldr	r7, [r3, #4]
 8014e70:	9b02      	ldr	r3, [sp, #8]
 8014e72:	00db      	lsls	r3, r3, #3
 8014e74:	4699      	mov	r9, r3
 8014e76:	444a      	add	r2, r9
 8014e78:	4690      	mov	r8, r2
 8014e7a:	e010      	b.n	8014e9e <__kernel_rem_pio2+0x722>
 8014e7c:	00ffffff 	.word	0x00ffffff
 8014e80:	3fe00000 	.word	0x3fe00000
 8014e84:	3ff00000 	.word	0x3ff00000
 8014e88:	3fffffff 	.word	0x3fffffff
 8014e8c:	3e700000 	.word	0x3e700000
 8014e90:	0801eeb8 	.word	0x0801eeb8
 8014e94:	3ff921fb 	.word	0x3ff921fb
 8014e98:	1fffffff 	.word	0x1fffffff
 8014e9c:	4698      	mov	r8, r3
 8014e9e:	4643      	mov	r3, r8
 8014ea0:	685c      	ldr	r4, [r3, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	0018      	movs	r0, r3
 8014ea6:	0021      	movs	r1, r4
 8014ea8:	0032      	movs	r2, r6
 8014eaa:	003b      	movs	r3, r7
 8014eac:	9000      	str	r0, [sp, #0]
 8014eae:	9101      	str	r1, [sp, #4]
 8014eb0:	f7fc faa8 	bl	8011404 <__aeabi_dadd>
 8014eb4:	0004      	movs	r4, r0
 8014eb6:	000d      	movs	r5, r1
 8014eb8:	0002      	movs	r2, r0
 8014eba:	000b      	movs	r3, r1
 8014ebc:	9800      	ldr	r0, [sp, #0]
 8014ebe:	9901      	ldr	r1, [sp, #4]
 8014ec0:	f7fd fc38 	bl	8012734 <__aeabi_dsub>
 8014ec4:	0032      	movs	r2, r6
 8014ec6:	003b      	movs	r3, r7
 8014ec8:	f7fc fa9c 	bl	8011404 <__aeabi_dadd>
 8014ecc:	4643      	mov	r3, r8
 8014ece:	9a03      	ldr	r2, [sp, #12]
 8014ed0:	6098      	str	r0, [r3, #8]
 8014ed2:	60d9      	str	r1, [r3, #12]
 8014ed4:	601c      	str	r4, [r3, #0]
 8014ed6:	605d      	str	r5, [r3, #4]
 8014ed8:	3b08      	subs	r3, #8
 8014eda:	0026      	movs	r6, r4
 8014edc:	002f      	movs	r7, r5
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d1dc      	bne.n	8014e9c <__kernel_rem_pio2+0x720>
 8014ee2:	464d      	mov	r5, r9
 8014ee4:	4694      	mov	ip, r2
 8014ee6:	2600      	movs	r6, #0
 8014ee8:	2400      	movs	r4, #0
 8014eea:	4647      	mov	r7, r8
 8014eec:	3508      	adds	r5, #8
 8014eee:	4465      	add	r5, ip
 8014ef0:	682a      	ldr	r2, [r5, #0]
 8014ef2:	686b      	ldr	r3, [r5, #4]
 8014ef4:	0030      	movs	r0, r6
 8014ef6:	0021      	movs	r1, r4
 8014ef8:	f7fc fa84 	bl	8011404 <__aeabi_dadd>
 8014efc:	3d08      	subs	r5, #8
 8014efe:	0006      	movs	r6, r0
 8014f00:	000c      	movs	r4, r1
 8014f02:	42af      	cmp	r7, r5
 8014f04:	d1f4      	bne.n	8014ef0 <__kernel_rem_pio2+0x774>
 8014f06:	9b03      	ldr	r3, [sp, #12]
 8014f08:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 8014f0a:	685d      	ldr	r5, [r3, #4]
 8014f0c:	6899      	ldr	r1, [r3, #8]
 8014f0e:	68d8      	ldr	r0, [r3, #12]
 8014f10:	9b08      	ldr	r3, [sp, #32]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d065      	beq.n	8014fe2 <__kernel_rem_pio2+0x866>
 8014f16:	2280      	movs	r2, #128	; 0x80
 8014f18:	0612      	lsls	r2, r2, #24
 8014f1a:	4694      	mov	ip, r2
 8014f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f1e:	4465      	add	r5, ip
 8014f20:	4460      	add	r0, ip
 8014f22:	4464      	add	r4, ip
 8014f24:	601f      	str	r7, [r3, #0]
 8014f26:	605d      	str	r5, [r3, #4]
 8014f28:	6099      	str	r1, [r3, #8]
 8014f2a:	60d8      	str	r0, [r3, #12]
 8014f2c:	611e      	str	r6, [r3, #16]
 8014f2e:	615c      	str	r4, [r3, #20]
 8014f30:	e6ee      	b.n	8014d10 <__kernel_rem_pio2+0x594>
 8014f32:	469a      	mov	sl, r3
 8014f34:	464b      	mov	r3, r9
 8014f36:	9307      	str	r3, [sp, #28]
 8014f38:	9b05      	ldr	r3, [sp, #20]
 8014f3a:	0030      	movs	r0, r6
 8014f3c:	425a      	negs	r2, r3
 8014f3e:	0039      	movs	r1, r7
 8014f40:	9508      	str	r5, [sp, #32]
 8014f42:	f000 f9d5 	bl	80152f0 <scalbn>
 8014f46:	2200      	movs	r2, #0
 8014f48:	4b3a      	ldr	r3, [pc, #232]	; (8015034 <__kernel_rem_pio2+0x8b8>)
 8014f4a:	0006      	movs	r6, r0
 8014f4c:	000f      	movs	r7, r1
 8014f4e:	f7fb ff77 	bl	8010e40 <__aeabi_dcmpge>
 8014f52:	2800      	cmp	r0, #0
 8014f54:	d024      	beq.n	8014fa0 <__kernel_rem_pio2+0x824>
 8014f56:	4b38      	ldr	r3, [pc, #224]	; (8015038 <__kernel_rem_pio2+0x8bc>)
 8014f58:	2200      	movs	r2, #0
 8014f5a:	0030      	movs	r0, r6
 8014f5c:	0039      	movs	r1, r7
 8014f5e:	f7fd f977 	bl	8012250 <__aeabi_dmul>
 8014f62:	f7fd ff4b 	bl	8012dfc <__aeabi_d2iz>
 8014f66:	4652      	mov	r2, sl
 8014f68:	0004      	movs	r4, r0
 8014f6a:	0095      	lsls	r5, r2, #2
 8014f6c:	f7fd ff7c 	bl	8012e68 <__aeabi_i2d>
 8014f70:	2200      	movs	r2, #0
 8014f72:	4b30      	ldr	r3, [pc, #192]	; (8015034 <__kernel_rem_pio2+0x8b8>)
 8014f74:	f7fd f96c 	bl	8012250 <__aeabi_dmul>
 8014f78:	0002      	movs	r2, r0
 8014f7a:	000b      	movs	r3, r1
 8014f7c:	0030      	movs	r0, r6
 8014f7e:	0039      	movs	r1, r7
 8014f80:	f7fd fbd8 	bl	8012734 <__aeabi_dsub>
 8014f84:	f7fd ff3a 	bl	8012dfc <__aeabi_d2iz>
 8014f88:	aa0e      	add	r2, sp, #56	; 0x38
 8014f8a:	5150      	str	r0, [r2, r5]
 8014f8c:	2201      	movs	r2, #1
 8014f8e:	9b05      	ldr	r3, [sp, #20]
 8014f90:	4452      	add	r2, sl
 8014f92:	3318      	adds	r3, #24
 8014f94:	4690      	mov	r8, r2
 8014f96:	9305      	str	r3, [sp, #20]
 8014f98:	0093      	lsls	r3, r2, #2
 8014f9a:	aa0e      	add	r2, sp, #56	; 0x38
 8014f9c:	50d4      	str	r4, [r2, r3]
 8014f9e:	e623      	b.n	8014be8 <__kernel_rem_pio2+0x46c>
 8014fa0:	4653      	mov	r3, sl
 8014fa2:	0030      	movs	r0, r6
 8014fa4:	0039      	movs	r1, r7
 8014fa6:	009c      	lsls	r4, r3, #2
 8014fa8:	f7fd ff28 	bl	8012dfc <__aeabi_d2iz>
 8014fac:	ab0e      	add	r3, sp, #56	; 0x38
 8014fae:	5118      	str	r0, [r3, r4]
 8014fb0:	46d0      	mov	r8, sl
 8014fb2:	e619      	b.n	8014be8 <__kernel_rem_pio2+0x46c>
 8014fb4:	2380      	movs	r3, #128	; 0x80
 8014fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014fb8:	061b      	lsls	r3, r3, #24
 8014fba:	18cb      	adds	r3, r1, r3
 8014fbc:	6010      	str	r0, [r2, #0]
 8014fbe:	6053      	str	r3, [r2, #4]
 8014fc0:	000b      	movs	r3, r1
 8014fc2:	0002      	movs	r2, r0
 8014fc4:	984a      	ldr	r0, [sp, #296]	; 0x128
 8014fc6:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8014fc8:	f7fd fbb4 	bl	8012734 <__aeabi_dsub>
 8014fcc:	4643      	mov	r3, r8
 8014fce:	0007      	movs	r7, r0
 8014fd0:	000c      	movs	r4, r1
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	dd00      	ble.n	8014fd8 <__kernel_rem_pio2+0x85c>
 8014fd6:	e6d5      	b.n	8014d84 <__kernel_rem_pio2+0x608>
 8014fd8:	2380      	movs	r3, #128	; 0x80
 8014fda:	061b      	lsls	r3, r3, #24
 8014fdc:	469c      	mov	ip, r3
 8014fde:	4464      	add	r4, ip
 8014fe0:	e6e4      	b.n	8014dac <__kernel_rem_pio2+0x630>
 8014fe2:	002b      	movs	r3, r5
 8014fe4:	003a      	movs	r2, r7
 8014fe6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014fe8:	602a      	str	r2, [r5, #0]
 8014fea:	606b      	str	r3, [r5, #4]
 8014fec:	000a      	movs	r2, r1
 8014fee:	0003      	movs	r3, r0
 8014ff0:	60aa      	str	r2, [r5, #8]
 8014ff2:	60eb      	str	r3, [r5, #12]
 8014ff4:	0032      	movs	r2, r6
 8014ff6:	0023      	movs	r3, r4
 8014ff8:	612a      	str	r2, [r5, #16]
 8014ffa:	616b      	str	r3, [r5, #20]
 8014ffc:	e688      	b.n	8014d10 <__kernel_rem_pio2+0x594>
 8014ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015000:	00db      	lsls	r3, r3, #3
 8015002:	9300      	str	r3, [sp, #0]
 8015004:	ab72      	add	r3, sp, #456	; 0x1c8
 8015006:	9304      	str	r3, [sp, #16]
 8015008:	e432      	b.n	8014870 <__kernel_rem_pio2+0xf4>
 801500a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801500c:	2b02      	cmp	r3, #2
 801500e:	dd00      	ble.n	8015012 <__kernel_rem_pio2+0x896>
 8015010:	e6e8      	b.n	8014de4 <__kernel_rem_pio2+0x668>
 8015012:	2b00      	cmp	r3, #0
 8015014:	dd00      	ble.n	8015018 <__kernel_rem_pio2+0x89c>
 8015016:	e692      	b.n	8014d3e <__kernel_rem_pio2+0x5c2>
 8015018:	d000      	beq.n	801501c <__kernel_rem_pio2+0x8a0>
 801501a:	e679      	b.n	8014d10 <__kernel_rem_pio2+0x594>
 801501c:	2700      	movs	r7, #0
 801501e:	2400      	movs	r4, #0
 8015020:	e66a      	b.n	8014cf8 <__kernel_rem_pio2+0x57c>
 8015022:	2600      	movs	r6, #0
 8015024:	2400      	movs	r4, #0
 8015026:	e76e      	b.n	8014f06 <__kernel_rem_pio2+0x78a>
 8015028:	2000      	movs	r0, #0
 801502a:	2100      	movs	r1, #0
 801502c:	e698      	b.n	8014d60 <__kernel_rem_pio2+0x5e4>
 801502e:	2600      	movs	r6, #0
 8015030:	0034      	movs	r4, r6
 8015032:	e768      	b.n	8014f06 <__kernel_rem_pio2+0x78a>
 8015034:	41700000 	.word	0x41700000
 8015038:	3e700000 	.word	0x3e700000

0801503c <__kernel_sin>:
 801503c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801503e:	46ce      	mov	lr, r9
 8015040:	4647      	mov	r7, r8
 8015042:	b580      	push	{r7, lr}
 8015044:	b087      	sub	sp, #28
 8015046:	9200      	str	r2, [sp, #0]
 8015048:	9301      	str	r3, [sp, #4]
 801504a:	4a47      	ldr	r2, [pc, #284]	; (8015168 <__kernel_sin+0x12c>)
 801504c:	004b      	lsls	r3, r1, #1
 801504e:	4681      	mov	r9, r0
 8015050:	4688      	mov	r8, r1
 8015052:	085b      	lsrs	r3, r3, #1
 8015054:	4293      	cmp	r3, r2
 8015056:	dc07      	bgt.n	8015068 <__kernel_sin+0x2c>
 8015058:	4641      	mov	r1, r8
 801505a:	4648      	mov	r0, r9
 801505c:	f7fd fece 	bl	8012dfc <__aeabi_d2iz>
 8015060:	4641      	mov	r1, r8
 8015062:	1e03      	subs	r3, r0, #0
 8015064:	4648      	mov	r0, r9
 8015066:	d066      	beq.n	8015136 <__kernel_sin+0xfa>
 8015068:	464a      	mov	r2, r9
 801506a:	4643      	mov	r3, r8
 801506c:	4648      	mov	r0, r9
 801506e:	4641      	mov	r1, r8
 8015070:	f7fd f8ee 	bl	8012250 <__aeabi_dmul>
 8015074:	0004      	movs	r4, r0
 8015076:	000d      	movs	r5, r1
 8015078:	0002      	movs	r2, r0
 801507a:	000b      	movs	r3, r1
 801507c:	4648      	mov	r0, r9
 801507e:	4641      	mov	r1, r8
 8015080:	f7fd f8e6 	bl	8012250 <__aeabi_dmul>
 8015084:	4a39      	ldr	r2, [pc, #228]	; (801516c <__kernel_sin+0x130>)
 8015086:	4b3a      	ldr	r3, [pc, #232]	; (8015170 <__kernel_sin+0x134>)
 8015088:	0006      	movs	r6, r0
 801508a:	000f      	movs	r7, r1
 801508c:	0020      	movs	r0, r4
 801508e:	0029      	movs	r1, r5
 8015090:	f7fd f8de 	bl	8012250 <__aeabi_dmul>
 8015094:	4a37      	ldr	r2, [pc, #220]	; (8015174 <__kernel_sin+0x138>)
 8015096:	4b38      	ldr	r3, [pc, #224]	; (8015178 <__kernel_sin+0x13c>)
 8015098:	f7fd fb4c 	bl	8012734 <__aeabi_dsub>
 801509c:	0022      	movs	r2, r4
 801509e:	002b      	movs	r3, r5
 80150a0:	f7fd f8d6 	bl	8012250 <__aeabi_dmul>
 80150a4:	4a35      	ldr	r2, [pc, #212]	; (801517c <__kernel_sin+0x140>)
 80150a6:	4b36      	ldr	r3, [pc, #216]	; (8015180 <__kernel_sin+0x144>)
 80150a8:	f7fc f9ac 	bl	8011404 <__aeabi_dadd>
 80150ac:	0022      	movs	r2, r4
 80150ae:	002b      	movs	r3, r5
 80150b0:	f7fd f8ce 	bl	8012250 <__aeabi_dmul>
 80150b4:	4a33      	ldr	r2, [pc, #204]	; (8015184 <__kernel_sin+0x148>)
 80150b6:	4b34      	ldr	r3, [pc, #208]	; (8015188 <__kernel_sin+0x14c>)
 80150b8:	f7fd fb3c 	bl	8012734 <__aeabi_dsub>
 80150bc:	0022      	movs	r2, r4
 80150be:	002b      	movs	r3, r5
 80150c0:	f7fd f8c6 	bl	8012250 <__aeabi_dmul>
 80150c4:	4b31      	ldr	r3, [pc, #196]	; (801518c <__kernel_sin+0x150>)
 80150c6:	4a32      	ldr	r2, [pc, #200]	; (8015190 <__kernel_sin+0x154>)
 80150c8:	f7fc f99c 	bl	8011404 <__aeabi_dadd>
 80150cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150ce:	9002      	str	r0, [sp, #8]
 80150d0:	9103      	str	r1, [sp, #12]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d034      	beq.n	8015140 <__kernel_sin+0x104>
 80150d6:	9800      	ldr	r0, [sp, #0]
 80150d8:	9901      	ldr	r1, [sp, #4]
 80150da:	2200      	movs	r2, #0
 80150dc:	4b2d      	ldr	r3, [pc, #180]	; (8015194 <__kernel_sin+0x158>)
 80150de:	f7fd f8b7 	bl	8012250 <__aeabi_dmul>
 80150e2:	9a02      	ldr	r2, [sp, #8]
 80150e4:	9b03      	ldr	r3, [sp, #12]
 80150e6:	9004      	str	r0, [sp, #16]
 80150e8:	9105      	str	r1, [sp, #20]
 80150ea:	0030      	movs	r0, r6
 80150ec:	0039      	movs	r1, r7
 80150ee:	f7fd f8af 	bl	8012250 <__aeabi_dmul>
 80150f2:	0002      	movs	r2, r0
 80150f4:	000b      	movs	r3, r1
 80150f6:	9804      	ldr	r0, [sp, #16]
 80150f8:	9905      	ldr	r1, [sp, #20]
 80150fa:	f7fd fb1b 	bl	8012734 <__aeabi_dsub>
 80150fe:	0022      	movs	r2, r4
 8015100:	002b      	movs	r3, r5
 8015102:	f7fd f8a5 	bl	8012250 <__aeabi_dmul>
 8015106:	9a00      	ldr	r2, [sp, #0]
 8015108:	9b01      	ldr	r3, [sp, #4]
 801510a:	f7fd fb13 	bl	8012734 <__aeabi_dsub>
 801510e:	4a22      	ldr	r2, [pc, #136]	; (8015198 <__kernel_sin+0x15c>)
 8015110:	0004      	movs	r4, r0
 8015112:	000d      	movs	r5, r1
 8015114:	4b21      	ldr	r3, [pc, #132]	; (801519c <__kernel_sin+0x160>)
 8015116:	0030      	movs	r0, r6
 8015118:	0039      	movs	r1, r7
 801511a:	f7fd f899 	bl	8012250 <__aeabi_dmul>
 801511e:	0002      	movs	r2, r0
 8015120:	000b      	movs	r3, r1
 8015122:	0020      	movs	r0, r4
 8015124:	0029      	movs	r1, r5
 8015126:	f7fc f96d 	bl	8011404 <__aeabi_dadd>
 801512a:	0002      	movs	r2, r0
 801512c:	000b      	movs	r3, r1
 801512e:	4648      	mov	r0, r9
 8015130:	4641      	mov	r1, r8
 8015132:	f7fd faff 	bl	8012734 <__aeabi_dsub>
 8015136:	b007      	add	sp, #28
 8015138:	bc0c      	pop	{r2, r3}
 801513a:	4690      	mov	r8, r2
 801513c:	4699      	mov	r9, r3
 801513e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015140:	0002      	movs	r2, r0
 8015142:	000b      	movs	r3, r1
 8015144:	0020      	movs	r0, r4
 8015146:	0029      	movs	r1, r5
 8015148:	f7fd f882 	bl	8012250 <__aeabi_dmul>
 801514c:	4a12      	ldr	r2, [pc, #72]	; (8015198 <__kernel_sin+0x15c>)
 801514e:	4b13      	ldr	r3, [pc, #76]	; (801519c <__kernel_sin+0x160>)
 8015150:	f7fd faf0 	bl	8012734 <__aeabi_dsub>
 8015154:	0032      	movs	r2, r6
 8015156:	003b      	movs	r3, r7
 8015158:	f7fd f87a 	bl	8012250 <__aeabi_dmul>
 801515c:	464a      	mov	r2, r9
 801515e:	4643      	mov	r3, r8
 8015160:	f7fc f950 	bl	8011404 <__aeabi_dadd>
 8015164:	e7e7      	b.n	8015136 <__kernel_sin+0xfa>
 8015166:	46c0      	nop			; (mov r8, r8)
 8015168:	3e3fffff 	.word	0x3e3fffff
 801516c:	5acfd57c 	.word	0x5acfd57c
 8015170:	3de5d93a 	.word	0x3de5d93a
 8015174:	8a2b9ceb 	.word	0x8a2b9ceb
 8015178:	3e5ae5e6 	.word	0x3e5ae5e6
 801517c:	57b1fe7d 	.word	0x57b1fe7d
 8015180:	3ec71de3 	.word	0x3ec71de3
 8015184:	19c161d5 	.word	0x19c161d5
 8015188:	3f2a01a0 	.word	0x3f2a01a0
 801518c:	3f811111 	.word	0x3f811111
 8015190:	1110f8a6 	.word	0x1110f8a6
 8015194:	3fe00000 	.word	0x3fe00000
 8015198:	55555549 	.word	0x55555549
 801519c:	3fc55555 	.word	0x3fc55555

080151a0 <fabs>:
 80151a0:	0049      	lsls	r1, r1, #1
 80151a2:	084b      	lsrs	r3, r1, #1
 80151a4:	0019      	movs	r1, r3
 80151a6:	4770      	bx	lr

080151a8 <floor>:
 80151a8:	4a47      	ldr	r2, [pc, #284]	; (80152c8 <floor+0x120>)
 80151aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151ac:	464f      	mov	r7, r9
 80151ae:	4691      	mov	r9, r2
 80151b0:	004b      	lsls	r3, r1, #1
 80151b2:	0d5b      	lsrs	r3, r3, #21
 80151b4:	4499      	add	r9, r3
 80151b6:	4646      	mov	r6, r8
 80151b8:	46d6      	mov	lr, sl
 80151ba:	464a      	mov	r2, r9
 80151bc:	b5c0      	push	{r6, r7, lr}
 80151be:	0005      	movs	r5, r0
 80151c0:	000c      	movs	r4, r1
 80151c2:	000e      	movs	r6, r1
 80151c4:	4688      	mov	r8, r1
 80151c6:	0007      	movs	r7, r0
 80151c8:	2a13      	cmp	r2, #19
 80151ca:	dc27      	bgt.n	801521c <floor+0x74>
 80151cc:	2a00      	cmp	r2, #0
 80151ce:	db4b      	blt.n	8015268 <floor+0xc0>
 80151d0:	4b3e      	ldr	r3, [pc, #248]	; (80152cc <floor+0x124>)
 80151d2:	4113      	asrs	r3, r2
 80151d4:	469a      	mov	sl, r3
 80151d6:	000b      	movs	r3, r1
 80151d8:	4652      	mov	r2, sl
 80151da:	4013      	ands	r3, r2
 80151dc:	4303      	orrs	r3, r0
 80151de:	d018      	beq.n	8015212 <floor+0x6a>
 80151e0:	4a3b      	ldr	r2, [pc, #236]	; (80152d0 <floor+0x128>)
 80151e2:	4b3c      	ldr	r3, [pc, #240]	; (80152d4 <floor+0x12c>)
 80151e4:	0028      	movs	r0, r5
 80151e6:	0021      	movs	r1, r4
 80151e8:	f7fc f90c 	bl	8011404 <__aeabi_dadd>
 80151ec:	2200      	movs	r2, #0
 80151ee:	2300      	movs	r3, #0
 80151f0:	f7fb fe1c 	bl	8010e2c <__aeabi_dcmpgt>
 80151f4:	2800      	cmp	r0, #0
 80151f6:	d047      	beq.n	8015288 <floor+0xe0>
 80151f8:	2c00      	cmp	r4, #0
 80151fa:	da04      	bge.n	8015206 <floor+0x5e>
 80151fc:	2380      	movs	r3, #128	; 0x80
 80151fe:	464a      	mov	r2, r9
 8015200:	035b      	lsls	r3, r3, #13
 8015202:	4113      	asrs	r3, r2
 8015204:	4498      	add	r8, r3
 8015206:	4646      	mov	r6, r8
 8015208:	4653      	mov	r3, sl
 801520a:	2700      	movs	r7, #0
 801520c:	439e      	bics	r6, r3
 801520e:	0038      	movs	r0, r7
 8015210:	0031      	movs	r1, r6
 8015212:	bc1c      	pop	{r2, r3, r4}
 8015214:	4690      	mov	r8, r2
 8015216:	4699      	mov	r9, r3
 8015218:	46a2      	mov	sl, r4
 801521a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801521c:	2a33      	cmp	r2, #51	; 0x33
 801521e:	dd08      	ble.n	8015232 <floor+0x8a>
 8015220:	2380      	movs	r3, #128	; 0x80
 8015222:	00db      	lsls	r3, r3, #3
 8015224:	4599      	cmp	r9, r3
 8015226:	d1f4      	bne.n	8015212 <floor+0x6a>
 8015228:	0002      	movs	r2, r0
 801522a:	000b      	movs	r3, r1
 801522c:	f7fc f8ea 	bl	8011404 <__aeabi_dadd>
 8015230:	e7ef      	b.n	8015212 <floor+0x6a>
 8015232:	4a29      	ldr	r2, [pc, #164]	; (80152d8 <floor+0x130>)
 8015234:	4694      	mov	ip, r2
 8015236:	2201      	movs	r2, #1
 8015238:	4463      	add	r3, ip
 801523a:	4252      	negs	r2, r2
 801523c:	40da      	lsrs	r2, r3
 801523e:	4692      	mov	sl, r2
 8015240:	4202      	tst	r2, r0
 8015242:	d0e6      	beq.n	8015212 <floor+0x6a>
 8015244:	4a22      	ldr	r2, [pc, #136]	; (80152d0 <floor+0x128>)
 8015246:	4b23      	ldr	r3, [pc, #140]	; (80152d4 <floor+0x12c>)
 8015248:	0028      	movs	r0, r5
 801524a:	0021      	movs	r1, r4
 801524c:	f7fc f8da 	bl	8011404 <__aeabi_dadd>
 8015250:	2200      	movs	r2, #0
 8015252:	2300      	movs	r3, #0
 8015254:	f7fb fdea 	bl	8010e2c <__aeabi_dcmpgt>
 8015258:	2800      	cmp	r0, #0
 801525a:	d015      	beq.n	8015288 <floor+0xe0>
 801525c:	2c00      	cmp	r4, #0
 801525e:	db1e      	blt.n	801529e <floor+0xf6>
 8015260:	4653      	mov	r3, sl
 8015262:	4646      	mov	r6, r8
 8015264:	439f      	bics	r7, r3
 8015266:	e00f      	b.n	8015288 <floor+0xe0>
 8015268:	4a19      	ldr	r2, [pc, #100]	; (80152d0 <floor+0x128>)
 801526a:	4b1a      	ldr	r3, [pc, #104]	; (80152d4 <floor+0x12c>)
 801526c:	0028      	movs	r0, r5
 801526e:	0021      	movs	r1, r4
 8015270:	f7fc f8c8 	bl	8011404 <__aeabi_dadd>
 8015274:	2200      	movs	r2, #0
 8015276:	2300      	movs	r3, #0
 8015278:	f7fb fdd8 	bl	8010e2c <__aeabi_dcmpgt>
 801527c:	2800      	cmp	r0, #0
 801527e:	d003      	beq.n	8015288 <floor+0xe0>
 8015280:	2c00      	cmp	r4, #0
 8015282:	db04      	blt.n	801528e <floor+0xe6>
 8015284:	2700      	movs	r7, #0
 8015286:	2600      	movs	r6, #0
 8015288:	0038      	movs	r0, r7
 801528a:	0031      	movs	r1, r6
 801528c:	e7c1      	b.n	8015212 <floor+0x6a>
 801528e:	0064      	lsls	r4, r4, #1
 8015290:	0864      	lsrs	r4, r4, #1
 8015292:	4325      	orrs	r5, r4
 8015294:	2700      	movs	r7, #0
 8015296:	2d00      	cmp	r5, #0
 8015298:	d0f6      	beq.n	8015288 <floor+0xe0>
 801529a:	4e10      	ldr	r6, [pc, #64]	; (80152dc <floor+0x134>)
 801529c:	e7f4      	b.n	8015288 <floor+0xe0>
 801529e:	464b      	mov	r3, r9
 80152a0:	2b14      	cmp	r3, #20
 80152a2:	d00b      	beq.n	80152bc <floor+0x114>
 80152a4:	2234      	movs	r2, #52	; 0x34
 80152a6:	1ad2      	subs	r2, r2, r3
 80152a8:	2301      	movs	r3, #1
 80152aa:	4093      	lsls	r3, r2
 80152ac:	195d      	adds	r5, r3, r5
 80152ae:	42bd      	cmp	r5, r7
 80152b0:	d208      	bcs.n	80152c4 <floor+0x11c>
 80152b2:	2301      	movs	r3, #1
 80152b4:	469c      	mov	ip, r3
 80152b6:	002f      	movs	r7, r5
 80152b8:	44e0      	add	r8, ip
 80152ba:	e7d1      	b.n	8015260 <floor+0xb8>
 80152bc:	3b13      	subs	r3, #19
 80152be:	469c      	mov	ip, r3
 80152c0:	44e0      	add	r8, ip
 80152c2:	e7cd      	b.n	8015260 <floor+0xb8>
 80152c4:	002f      	movs	r7, r5
 80152c6:	e7cb      	b.n	8015260 <floor+0xb8>
 80152c8:	fffffc01 	.word	0xfffffc01
 80152cc:	000fffff 	.word	0x000fffff
 80152d0:	8800759c 	.word	0x8800759c
 80152d4:	7e37e43c 	.word	0x7e37e43c
 80152d8:	fffffbed 	.word	0xfffffbed
 80152dc:	bff00000 	.word	0xbff00000

080152e0 <matherr>:
 80152e0:	2000      	movs	r0, #0
 80152e2:	4770      	bx	lr

080152e4 <nan>:
 80152e4:	2000      	movs	r0, #0
 80152e6:	4901      	ldr	r1, [pc, #4]	; (80152ec <nan+0x8>)
 80152e8:	4770      	bx	lr
 80152ea:	46c0      	nop			; (mov r8, r8)
 80152ec:	7ff80000 	.word	0x7ff80000

080152f0 <scalbn>:
 80152f0:	004b      	lsls	r3, r1, #1
 80152f2:	b570      	push	{r4, r5, r6, lr}
 80152f4:	0d5b      	lsrs	r3, r3, #21
 80152f6:	0014      	movs	r4, r2
 80152f8:	000a      	movs	r2, r1
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d11a      	bne.n	8015334 <scalbn+0x44>
 80152fe:	004b      	lsls	r3, r1, #1
 8015300:	085b      	lsrs	r3, r3, #1
 8015302:	4303      	orrs	r3, r0
 8015304:	d015      	beq.n	8015332 <scalbn+0x42>
 8015306:	4b23      	ldr	r3, [pc, #140]	; (8015394 <scalbn+0xa4>)
 8015308:	2200      	movs	r2, #0
 801530a:	f7fc ffa1 	bl	8012250 <__aeabi_dmul>
 801530e:	4b22      	ldr	r3, [pc, #136]	; (8015398 <scalbn+0xa8>)
 8015310:	429c      	cmp	r4, r3
 8015312:	db2d      	blt.n	8015370 <scalbn+0x80>
 8015314:	000a      	movs	r2, r1
 8015316:	004b      	lsls	r3, r1, #1
 8015318:	0d5b      	lsrs	r3, r3, #21
 801531a:	3b36      	subs	r3, #54	; 0x36
 801531c:	4d1f      	ldr	r5, [pc, #124]	; (801539c <scalbn+0xac>)
 801531e:	18e3      	adds	r3, r4, r3
 8015320:	42ab      	cmp	r3, r5
 8015322:	dc2a      	bgt.n	801537a <scalbn+0x8a>
 8015324:	2b00      	cmp	r3, #0
 8015326:	dd0d      	ble.n	8015344 <scalbn+0x54>
 8015328:	4c1d      	ldr	r4, [pc, #116]	; (80153a0 <scalbn+0xb0>)
 801532a:	051b      	lsls	r3, r3, #20
 801532c:	4022      	ands	r2, r4
 801532e:	431a      	orrs	r2, r3
 8015330:	0011      	movs	r1, r2
 8015332:	bd70      	pop	{r4, r5, r6, pc}
 8015334:	4d1b      	ldr	r5, [pc, #108]	; (80153a4 <scalbn+0xb4>)
 8015336:	42ab      	cmp	r3, r5
 8015338:	d1f0      	bne.n	801531c <scalbn+0x2c>
 801533a:	0002      	movs	r2, r0
 801533c:	000b      	movs	r3, r1
 801533e:	f7fc f861 	bl	8011404 <__aeabi_dadd>
 8015342:	e7f6      	b.n	8015332 <scalbn+0x42>
 8015344:	001d      	movs	r5, r3
 8015346:	3535      	adds	r5, #53	; 0x35
 8015348:	da19      	bge.n	801537e <scalbn+0x8e>
 801534a:	4b17      	ldr	r3, [pc, #92]	; (80153a8 <scalbn+0xb8>)
 801534c:	0002      	movs	r2, r0
 801534e:	429c      	cmp	r4, r3
 8015350:	dd09      	ble.n	8015366 <scalbn+0x76>
 8015352:	000b      	movs	r3, r1
 8015354:	4815      	ldr	r0, [pc, #84]	; (80153ac <scalbn+0xbc>)
 8015356:	4916      	ldr	r1, [pc, #88]	; (80153b0 <scalbn+0xc0>)
 8015358:	f000 f982 	bl	8015660 <copysign>
 801535c:	4a13      	ldr	r2, [pc, #76]	; (80153ac <scalbn+0xbc>)
 801535e:	4b14      	ldr	r3, [pc, #80]	; (80153b0 <scalbn+0xc0>)
 8015360:	f7fc ff76 	bl	8012250 <__aeabi_dmul>
 8015364:	e7e5      	b.n	8015332 <scalbn+0x42>
 8015366:	000b      	movs	r3, r1
 8015368:	4812      	ldr	r0, [pc, #72]	; (80153b4 <scalbn+0xc4>)
 801536a:	4913      	ldr	r1, [pc, #76]	; (80153b8 <scalbn+0xc8>)
 801536c:	f000 f978 	bl	8015660 <copysign>
 8015370:	4a10      	ldr	r2, [pc, #64]	; (80153b4 <scalbn+0xc4>)
 8015372:	4b11      	ldr	r3, [pc, #68]	; (80153b8 <scalbn+0xc8>)
 8015374:	f7fc ff6c 	bl	8012250 <__aeabi_dmul>
 8015378:	e7db      	b.n	8015332 <scalbn+0x42>
 801537a:	0002      	movs	r2, r0
 801537c:	e7e9      	b.n	8015352 <scalbn+0x62>
 801537e:	4c08      	ldr	r4, [pc, #32]	; (80153a0 <scalbn+0xb0>)
 8015380:	3336      	adds	r3, #54	; 0x36
 8015382:	4022      	ands	r2, r4
 8015384:	051b      	lsls	r3, r3, #20
 8015386:	4313      	orrs	r3, r2
 8015388:	0019      	movs	r1, r3
 801538a:	2200      	movs	r2, #0
 801538c:	4b0b      	ldr	r3, [pc, #44]	; (80153bc <scalbn+0xcc>)
 801538e:	f7fc ff5f 	bl	8012250 <__aeabi_dmul>
 8015392:	e7ce      	b.n	8015332 <scalbn+0x42>
 8015394:	43500000 	.word	0x43500000
 8015398:	ffff3cb0 	.word	0xffff3cb0
 801539c:	000007fe 	.word	0x000007fe
 80153a0:	800fffff 	.word	0x800fffff
 80153a4:	000007ff 	.word	0x000007ff
 80153a8:	0000c350 	.word	0x0000c350
 80153ac:	8800759c 	.word	0x8800759c
 80153b0:	7e37e43c 	.word	0x7e37e43c
 80153b4:	c2f8f359 	.word	0xc2f8f359
 80153b8:	01a56e1f 	.word	0x01a56e1f
 80153bc:	3c900000 	.word	0x3c900000

080153c0 <finitef>:
 80153c0:	0043      	lsls	r3, r0, #1
 80153c2:	2000      	movs	r0, #0
 80153c4:	4a02      	ldr	r2, [pc, #8]	; (80153d0 <finitef+0x10>)
 80153c6:	085b      	lsrs	r3, r3, #1
 80153c8:	429a      	cmp	r2, r3
 80153ca:	4140      	adcs	r0, r0
 80153cc:	4770      	bx	lr
 80153ce:	46c0      	nop			; (mov r8, r8)
 80153d0:	7f7fffff 	.word	0x7f7fffff

080153d4 <__ieee754_logf>:
 80153d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153d6:	46de      	mov	lr, fp
 80153d8:	4657      	mov	r7, sl
 80153da:	464e      	mov	r6, r9
 80153dc:	4645      	mov	r5, r8
 80153de:	0003      	movs	r3, r0
 80153e0:	b5e0      	push	{r5, r6, r7, lr}
 80153e2:	0042      	lsls	r2, r0, #1
 80153e4:	d044      	beq.n	8015470 <__ieee754_logf+0x9c>
 80153e6:	2800      	cmp	r0, #0
 80153e8:	db4d      	blt.n	8015486 <__ieee754_logf+0xb2>
 80153ea:	4a8e      	ldr	r2, [pc, #568]	; (8015624 <__ieee754_logf+0x250>)
 80153ec:	4290      	cmp	r0, r2
 80153ee:	dc51      	bgt.n	8015494 <__ieee754_logf+0xc0>
 80153f0:	4a8d      	ldr	r2, [pc, #564]	; (8015628 <__ieee754_logf+0x254>)
 80153f2:	2100      	movs	r1, #0
 80153f4:	4290      	cmp	r0, r2
 80153f6:	dc06      	bgt.n	8015406 <__ieee754_logf+0x32>
 80153f8:	2198      	movs	r1, #152	; 0x98
 80153fa:	05c9      	lsls	r1, r1, #23
 80153fc:	f7fb f844 	bl	8010488 <__aeabi_fmul>
 8015400:	2119      	movs	r1, #25
 8015402:	0003      	movs	r3, r0
 8015404:	4249      	negs	r1, r1
 8015406:	15da      	asrs	r2, r3, #23
 8015408:	025b      	lsls	r3, r3, #9
 801540a:	0a5c      	lsrs	r4, r3, #9
 801540c:	4b87      	ldr	r3, [pc, #540]	; (801562c <__ieee754_logf+0x258>)
 801540e:	3a7f      	subs	r2, #127	; 0x7f
 8015410:	18e0      	adds	r0, r4, r3
 8015412:	2380      	movs	r3, #128	; 0x80
 8015414:	041b      	lsls	r3, r3, #16
 8015416:	4003      	ands	r3, r0
 8015418:	20fe      	movs	r0, #254	; 0xfe
 801541a:	1852      	adds	r2, r2, r1
 801541c:	21fe      	movs	r1, #254	; 0xfe
 801541e:	0580      	lsls	r0, r0, #22
 8015420:	4058      	eors	r0, r3
 8015422:	15dd      	asrs	r5, r3, #23
 8015424:	4320      	orrs	r0, r4
 8015426:	0589      	lsls	r1, r1, #22
 8015428:	18ad      	adds	r5, r5, r2
 801542a:	f7fb f95f 	bl	80106ec <__aeabi_fsub>
 801542e:	0023      	movs	r3, r4
 8015430:	330f      	adds	r3, #15
 8015432:	025b      	lsls	r3, r3, #9
 8015434:	1c06      	adds	r6, r0, #0
 8015436:	0a5b      	lsrs	r3, r3, #9
 8015438:	2b0f      	cmp	r3, #15
 801543a:	dc2f      	bgt.n	801549c <__ieee754_logf+0xc8>
 801543c:	2100      	movs	r1, #0
 801543e:	f7fb fd15 	bl	8010e6c <__aeabi_fcmpeq>
 8015442:	2800      	cmp	r0, #0
 8015444:	d100      	bne.n	8015448 <__ieee754_logf+0x74>
 8015446:	e09e      	b.n	8015586 <__ieee754_logf+0x1b2>
 8015448:	2000      	movs	r0, #0
 801544a:	2d00      	cmp	r5, #0
 801544c:	d015      	beq.n	801547a <__ieee754_logf+0xa6>
 801544e:	0028      	movs	r0, r5
 8015450:	f7fb ff4e 	bl	80112f0 <__aeabi_i2f>
 8015454:	4976      	ldr	r1, [pc, #472]	; (8015630 <__ieee754_logf+0x25c>)
 8015456:	1c04      	adds	r4, r0, #0
 8015458:	f7fb f816 	bl	8010488 <__aeabi_fmul>
 801545c:	4975      	ldr	r1, [pc, #468]	; (8015634 <__ieee754_logf+0x260>)
 801545e:	1c05      	adds	r5, r0, #0
 8015460:	1c20      	adds	r0, r4, #0
 8015462:	f7fb f811 	bl	8010488 <__aeabi_fmul>
 8015466:	1c01      	adds	r1, r0, #0
 8015468:	1c28      	adds	r0, r5, #0
 801546a:	f7fa fd61 	bl	800ff30 <__aeabi_fadd>
 801546e:	e004      	b.n	801547a <__ieee754_logf+0xa6>
 8015470:	20cc      	movs	r0, #204	; 0xcc
 8015472:	2100      	movs	r1, #0
 8015474:	0600      	lsls	r0, r0, #24
 8015476:	f7fa fef5 	bl	8010264 <__aeabi_fdiv>
 801547a:	bc3c      	pop	{r2, r3, r4, r5}
 801547c:	4690      	mov	r8, r2
 801547e:	4699      	mov	r9, r3
 8015480:	46a2      	mov	sl, r4
 8015482:	46ab      	mov	fp, r5
 8015484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015486:	1c01      	adds	r1, r0, #0
 8015488:	f7fb f930 	bl	80106ec <__aeabi_fsub>
 801548c:	2100      	movs	r1, #0
 801548e:	f7fa fee9 	bl	8010264 <__aeabi_fdiv>
 8015492:	e7f2      	b.n	801547a <__ieee754_logf+0xa6>
 8015494:	1c01      	adds	r1, r0, #0
 8015496:	f7fa fd4b 	bl	800ff30 <__aeabi_fadd>
 801549a:	e7ee      	b.n	801547a <__ieee754_logf+0xa6>
 801549c:	2180      	movs	r1, #128	; 0x80
 801549e:	05c9      	lsls	r1, r1, #23
 80154a0:	f7fa fd46 	bl	800ff30 <__aeabi_fadd>
 80154a4:	1c01      	adds	r1, r0, #0
 80154a6:	1c30      	adds	r0, r6, #0
 80154a8:	f7fa fedc 	bl	8010264 <__aeabi_fdiv>
 80154ac:	4680      	mov	r8, r0
 80154ae:	0028      	movs	r0, r5
 80154b0:	f7fb ff1e 	bl	80112f0 <__aeabi_i2f>
 80154b4:	4641      	mov	r1, r8
 80154b6:	4681      	mov	r9, r0
 80154b8:	4640      	mov	r0, r8
 80154ba:	f7fa ffe5 	bl	8010488 <__aeabi_fmul>
 80154be:	4b5e      	ldr	r3, [pc, #376]	; (8015638 <__ieee754_logf+0x264>)
 80154c0:	1c01      	adds	r1, r0, #0
 80154c2:	469a      	mov	sl, r3
 80154c4:	4683      	mov	fp, r0
 80154c6:	f7fa ffdf 	bl	8010488 <__aeabi_fmul>
 80154ca:	495c      	ldr	r1, [pc, #368]	; (801563c <__ieee754_logf+0x268>)
 80154cc:	1c07      	adds	r7, r0, #0
 80154ce:	f7fa ffdb 	bl	8010488 <__aeabi_fmul>
 80154d2:	495b      	ldr	r1, [pc, #364]	; (8015640 <__ieee754_logf+0x26c>)
 80154d4:	f7fa fd2c 	bl	800ff30 <__aeabi_fadd>
 80154d8:	1c39      	adds	r1, r7, #0
 80154da:	f7fa ffd5 	bl	8010488 <__aeabi_fmul>
 80154de:	4959      	ldr	r1, [pc, #356]	; (8015644 <__ieee754_logf+0x270>)
 80154e0:	f7fa fd26 	bl	800ff30 <__aeabi_fadd>
 80154e4:	1c39      	adds	r1, r7, #0
 80154e6:	f7fa ffcf 	bl	8010488 <__aeabi_fmul>
 80154ea:	4957      	ldr	r1, [pc, #348]	; (8015648 <__ieee754_logf+0x274>)
 80154ec:	f7fa fd20 	bl	800ff30 <__aeabi_fadd>
 80154f0:	4659      	mov	r1, fp
 80154f2:	f7fa ffc9 	bl	8010488 <__aeabi_fmul>
 80154f6:	4955      	ldr	r1, [pc, #340]	; (801564c <__ieee754_logf+0x278>)
 80154f8:	4683      	mov	fp, r0
 80154fa:	1c38      	adds	r0, r7, #0
 80154fc:	f7fa ffc4 	bl	8010488 <__aeabi_fmul>
 8015500:	4953      	ldr	r1, [pc, #332]	; (8015650 <__ieee754_logf+0x27c>)
 8015502:	f7fa fd15 	bl	800ff30 <__aeabi_fadd>
 8015506:	1c39      	adds	r1, r7, #0
 8015508:	f7fa ffbe 	bl	8010488 <__aeabi_fmul>
 801550c:	4951      	ldr	r1, [pc, #324]	; (8015654 <__ieee754_logf+0x280>)
 801550e:	f7fa fd0f 	bl	800ff30 <__aeabi_fadd>
 8015512:	1c39      	adds	r1, r7, #0
 8015514:	f7fa ffb8 	bl	8010488 <__aeabi_fmul>
 8015518:	1c01      	adds	r1, r0, #0
 801551a:	4658      	mov	r0, fp
 801551c:	f7fa fd08 	bl	800ff30 <__aeabi_fadd>
 8015520:	4b4d      	ldr	r3, [pc, #308]	; (8015658 <__ieee754_logf+0x284>)
 8015522:	44a2      	add	sl, r4
 8015524:	1b1c      	subs	r4, r3, r4
 8015526:	4653      	mov	r3, sl
 8015528:	1c07      	adds	r7, r0, #0
 801552a:	431c      	orrs	r4, r3
 801552c:	2c00      	cmp	r4, #0
 801552e:	dd65      	ble.n	80155fc <__ieee754_logf+0x228>
 8015530:	21fc      	movs	r1, #252	; 0xfc
 8015532:	1c30      	adds	r0, r6, #0
 8015534:	0589      	lsls	r1, r1, #22
 8015536:	f7fa ffa7 	bl	8010488 <__aeabi_fmul>
 801553a:	1c31      	adds	r1, r6, #0
 801553c:	f7fa ffa4 	bl	8010488 <__aeabi_fmul>
 8015540:	1c01      	adds	r1, r0, #0
 8015542:	1c04      	adds	r4, r0, #0
 8015544:	1c38      	adds	r0, r7, #0
 8015546:	f7fa fcf3 	bl	800ff30 <__aeabi_fadd>
 801554a:	4641      	mov	r1, r8
 801554c:	f7fa ff9c 	bl	8010488 <__aeabi_fmul>
 8015550:	1c07      	adds	r7, r0, #0
 8015552:	2d00      	cmp	r5, #0
 8015554:	d044      	beq.n	80155e0 <__ieee754_logf+0x20c>
 8015556:	4936      	ldr	r1, [pc, #216]	; (8015630 <__ieee754_logf+0x25c>)
 8015558:	4648      	mov	r0, r9
 801555a:	f7fa ff95 	bl	8010488 <__aeabi_fmul>
 801555e:	4935      	ldr	r1, [pc, #212]	; (8015634 <__ieee754_logf+0x260>)
 8015560:	1c05      	adds	r5, r0, #0
 8015562:	4648      	mov	r0, r9
 8015564:	f7fa ff90 	bl	8010488 <__aeabi_fmul>
 8015568:	1c39      	adds	r1, r7, #0
 801556a:	f7fa fce1 	bl	800ff30 <__aeabi_fadd>
 801556e:	1c01      	adds	r1, r0, #0
 8015570:	1c20      	adds	r0, r4, #0
 8015572:	f7fb f8bb 	bl	80106ec <__aeabi_fsub>
 8015576:	1c31      	adds	r1, r6, #0
 8015578:	f7fb f8b8 	bl	80106ec <__aeabi_fsub>
 801557c:	1c01      	adds	r1, r0, #0
 801557e:	1c28      	adds	r0, r5, #0
 8015580:	f7fb f8b4 	bl	80106ec <__aeabi_fsub>
 8015584:	e779      	b.n	801547a <__ieee754_logf+0xa6>
 8015586:	4935      	ldr	r1, [pc, #212]	; (801565c <__ieee754_logf+0x288>)
 8015588:	1c30      	adds	r0, r6, #0
 801558a:	f7fa ff7d 	bl	8010488 <__aeabi_fmul>
 801558e:	1c01      	adds	r1, r0, #0
 8015590:	20fc      	movs	r0, #252	; 0xfc
 8015592:	0580      	lsls	r0, r0, #22
 8015594:	f7fb f8aa 	bl	80106ec <__aeabi_fsub>
 8015598:	1c31      	adds	r1, r6, #0
 801559a:	1c04      	adds	r4, r0, #0
 801559c:	1c30      	adds	r0, r6, #0
 801559e:	f7fa ff73 	bl	8010488 <__aeabi_fmul>
 80155a2:	1c01      	adds	r1, r0, #0
 80155a4:	1c20      	adds	r0, r4, #0
 80155a6:	f7fa ff6f 	bl	8010488 <__aeabi_fmul>
 80155aa:	1c04      	adds	r4, r0, #0
 80155ac:	2d00      	cmp	r5, #0
 80155ae:	d020      	beq.n	80155f2 <__ieee754_logf+0x21e>
 80155b0:	0028      	movs	r0, r5
 80155b2:	f7fb fe9d 	bl	80112f0 <__aeabi_i2f>
 80155b6:	491e      	ldr	r1, [pc, #120]	; (8015630 <__ieee754_logf+0x25c>)
 80155b8:	1c05      	adds	r5, r0, #0
 80155ba:	f7fa ff65 	bl	8010488 <__aeabi_fmul>
 80155be:	491d      	ldr	r1, [pc, #116]	; (8015634 <__ieee754_logf+0x260>)
 80155c0:	1c07      	adds	r7, r0, #0
 80155c2:	1c28      	adds	r0, r5, #0
 80155c4:	f7fa ff60 	bl	8010488 <__aeabi_fmul>
 80155c8:	1c01      	adds	r1, r0, #0
 80155ca:	1c20      	adds	r0, r4, #0
 80155cc:	f7fb f88e 	bl	80106ec <__aeabi_fsub>
 80155d0:	1c31      	adds	r1, r6, #0
 80155d2:	f7fb f88b 	bl	80106ec <__aeabi_fsub>
 80155d6:	1c01      	adds	r1, r0, #0
 80155d8:	1c38      	adds	r0, r7, #0
 80155da:	f7fb f887 	bl	80106ec <__aeabi_fsub>
 80155de:	e74c      	b.n	801547a <__ieee754_logf+0xa6>
 80155e0:	1c01      	adds	r1, r0, #0
 80155e2:	1c20      	adds	r0, r4, #0
 80155e4:	f7fb f882 	bl	80106ec <__aeabi_fsub>
 80155e8:	1c01      	adds	r1, r0, #0
 80155ea:	1c30      	adds	r0, r6, #0
 80155ec:	f7fb f87e 	bl	80106ec <__aeabi_fsub>
 80155f0:	e743      	b.n	801547a <__ieee754_logf+0xa6>
 80155f2:	1c21      	adds	r1, r4, #0
 80155f4:	1c30      	adds	r0, r6, #0
 80155f6:	f7fb f879 	bl	80106ec <__aeabi_fsub>
 80155fa:	e73e      	b.n	801547a <__ieee754_logf+0xa6>
 80155fc:	1c01      	adds	r1, r0, #0
 80155fe:	1c30      	adds	r0, r6, #0
 8015600:	f7fb f874 	bl	80106ec <__aeabi_fsub>
 8015604:	4641      	mov	r1, r8
 8015606:	f7fa ff3f 	bl	8010488 <__aeabi_fmul>
 801560a:	1c04      	adds	r4, r0, #0
 801560c:	2d00      	cmp	r5, #0
 801560e:	d0f0      	beq.n	80155f2 <__ieee754_logf+0x21e>
 8015610:	4907      	ldr	r1, [pc, #28]	; (8015630 <__ieee754_logf+0x25c>)
 8015612:	4648      	mov	r0, r9
 8015614:	f7fa ff38 	bl	8010488 <__aeabi_fmul>
 8015618:	4906      	ldr	r1, [pc, #24]	; (8015634 <__ieee754_logf+0x260>)
 801561a:	1c05      	adds	r5, r0, #0
 801561c:	4648      	mov	r0, r9
 801561e:	f7fa ff33 	bl	8010488 <__aeabi_fmul>
 8015622:	e7a4      	b.n	801556e <__ieee754_logf+0x19a>
 8015624:	7f7fffff 	.word	0x7f7fffff
 8015628:	007fffff 	.word	0x007fffff
 801562c:	004afb20 	.word	0x004afb20
 8015630:	3f317180 	.word	0x3f317180
 8015634:	3717f7d1 	.word	0x3717f7d1
 8015638:	ffcf5c30 	.word	0xffcf5c30
 801563c:	3e178897 	.word	0x3e178897
 8015640:	3e3a3325 	.word	0x3e3a3325
 8015644:	3e924925 	.word	0x3e924925
 8015648:	3f2aaaab 	.word	0x3f2aaaab
 801564c:	3e1cd04f 	.word	0x3e1cd04f
 8015650:	3e638e29 	.word	0x3e638e29
 8015654:	3ecccccd 	.word	0x3ecccccd
 8015658:	0035c288 	.word	0x0035c288
 801565c:	3eaaaaab 	.word	0x3eaaaaab

08015660 <copysign>:
 8015660:	b530      	push	{r4, r5, lr}
 8015662:	004a      	lsls	r2, r1, #1
 8015664:	0fdb      	lsrs	r3, r3, #31
 8015666:	07db      	lsls	r3, r3, #31
 8015668:	0852      	lsrs	r2, r2, #1
 801566a:	431a      	orrs	r2, r3
 801566c:	0011      	movs	r1, r2
 801566e:	bd30      	pop	{r4, r5, pc}

08015670 <out_func>:
	uint16_t position;
} print_buffer_t;


static void out_func(char character, void *arg)
{
 8015670:	b510      	push	{r4, lr}
	print_buffer_t *buf = arg;

	buf->buffer[buf->position++] = character;
 8015672:	000c      	movs	r4, r1
 8015674:	34c8      	adds	r4, #200	; 0xc8
 8015676:	8823      	ldrh	r3, [r4, #0]
 8015678:	1c5a      	adds	r2, r3, #1
 801567a:	b292      	uxth	r2, r2
 801567c:	8022      	strh	r2, [r4, #0]
 801567e:	54c8      	strb	r0, [r1, r3]
	if (buf->position == BUF_SIZE)
 8015680:	2ac8      	cmp	r2, #200	; 0xc8
 8015682:	d104      	bne.n	801568e <out_func+0x1e>
	{
		_write(0, buf->buffer, BUF_SIZE);
 8015684:	2000      	movs	r0, #0
 8015686:	f7fd fd45 	bl	8013114 <_write>
		buf->position = 0;
 801568a:	2300      	movs	r3, #0
 801568c:	8023      	strh	r3, [r4, #0]
	}
}
 801568e:	bd10      	pop	{r4, pc}

08015690 <__wrap_puts>:


int __wrap_puts(const char *str)
{
 8015690:	b510      	push	{r4, lr}
 8015692:	0004      	movs	r4, r0
	size_t len = strlen(str);
 8015694:	f7fd fd36 	bl	8013104 <strlen>

	_write(0, str, len);
 8015698:	0021      	movs	r1, r4
	size_t len = strlen(str);
 801569a:	0002      	movs	r2, r0
	_write(0, str, len);
 801569c:	2000      	movs	r0, #0
 801569e:	f7fd fd39 	bl	8013114 <_write>
	_write(0, "\n", 1);
 80156a2:	2201      	movs	r2, #1
 80156a4:	4902      	ldr	r1, [pc, #8]	; (80156b0 <__wrap_puts+0x20>)
 80156a6:	2000      	movs	r0, #0
 80156a8:	f7fd fd34 	bl	8013114 <_write>
	return 0;
}
 80156ac:	2000      	movs	r0, #0
 80156ae:	bd10      	pop	{r4, pc}
 80156b0:	0801e61a 	.word	0x0801e61a

080156b4 <__wrap_printf>:
	return 0;
}


int __wrap_printf(const char *format, ...)
{
 80156b4:	b40f      	push	{r0, r1, r2, r3}
 80156b6:	b530      	push	{r4, r5, lr}
 80156b8:	b0b5      	sub	sp, #212	; 0xd4
 80156ba:	ac38      	add	r4, sp, #224	; 0xe0
 80156bc:	cc20      	ldmia	r4!, {r5}
	print_buffer_t buf = {
 80156be:	22ca      	movs	r2, #202	; 0xca
 80156c0:	2100      	movs	r1, #0
 80156c2:	a801      	add	r0, sp, #4
 80156c4:	f7fd ffa2 	bl	801360c <memset>
		.buffer   = {0}
	};
	va_list        va;

	va_start(va, format);
	int ret = fctvprintf(out_func, &buf, format, va);
 80156c8:	0023      	movs	r3, r4
 80156ca:	002a      	movs	r2, r5
 80156cc:	a901      	add	r1, sp, #4
 80156ce:	4809      	ldr	r0, [pc, #36]	; (80156f4 <__wrap_printf+0x40>)
	va_start(va, format);
 80156d0:	9400      	str	r4, [sp, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 80156d2:	f000 fb9b 	bl	8015e0c <fctvprintf>
	if (buf.position != 0)
 80156d6:	ab33      	add	r3, sp, #204	; 0xcc
 80156d8:	881a      	ldrh	r2, [r3, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 80156da:	0004      	movs	r4, r0
	if (buf.position != 0)
 80156dc:	2a00      	cmp	r2, #0
 80156de:	d003      	beq.n	80156e8 <__wrap_printf+0x34>
	{
		_write(0, buf.buffer, buf.position);
 80156e0:	a901      	add	r1, sp, #4
 80156e2:	2000      	movs	r0, #0
 80156e4:	f7fd fd16 	bl	8013114 <_write>
	}

	va_end(va);

	return ret;
}
 80156e8:	0020      	movs	r0, r4
 80156ea:	b035      	add	sp, #212	; 0xd4
 80156ec:	bc30      	pop	{r4, r5}
 80156ee:	bc08      	pop	{r3}
 80156f0:	b004      	add	sp, #16
 80156f2:	4718      	bx	r3
 80156f4:	08015671 	.word	0x08015671

080156f8 <__wrap_vsnprintf>:
	return ret;
}


int __wrap_vsnprintf(char *buffer, size_t count, const char *format, va_list va)
{
 80156f8:	b510      	push	{r4, lr}
	return vsnprintf_(buffer, count, format, va);
 80156fa:	f000 fb7b 	bl	8015df4 <vsnprintf_>
}
 80156fe:	bd10      	pop	{r4, pc}

08015700 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8015700:	429a      	cmp	r2, r3
 8015702:	d200      	bcs.n	8015706 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 8015704:	5488      	strb	r0, [r1, r2]
  }
}
 8015706:	4770      	bx	lr

08015708 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8015708:	4770      	bx	lr

0801570a <_out_fct>:
}


// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
 801570a:	b510      	push	{r4, lr}
  (void)idx; (void)maxlen;
  if (character) {
 801570c:	2800      	cmp	r0, #0
 801570e:	d002      	beq.n	8015716 <_out_fct+0xc>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
 8015710:	680b      	ldr	r3, [r1, #0]
 8015712:	6849      	ldr	r1, [r1, #4]
 8015714:	4798      	blx	r3
  }
}
 8015716:	bd10      	pop	{r4, pc}

08015718 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801571a:	b087      	sub	sp, #28
 801571c:	9103      	str	r1, [sp, #12]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 801571e:	2102      	movs	r1, #2
{
 8015720:	9304      	str	r3, [sp, #16]
 8015722:	ab0e      	add	r3, sp, #56	; 0x38
 8015724:	781f      	ldrb	r7, [r3, #0]
 8015726:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015728:	9002      	str	r0, [sp, #8]
  if (!(flags & FLAGS_LEFT)) {
 801572a:	4019      	ands	r1, r3
{
 801572c:	9201      	str	r2, [sp, #4]
 801572e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015730:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015732:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015734:	9810      	ldr	r0, [sp, #64]	; 0x40
  if (!(flags & FLAGS_LEFT)) {
 8015736:	9105      	str	r1, [sp, #20]
 8015738:	d11f      	bne.n	801577a <_ntoa_format+0x62>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 801573a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801573c:	3101      	adds	r1, #1
 801573e:	4019      	ands	r1, r3
 8015740:	2e00      	cmp	r6, #0
 8015742:	d009      	beq.n	8015758 <_ntoa_format+0x40>
 8015744:	2900      	cmp	r1, #0
 8015746:	d007      	beq.n	8015758 <_ntoa_format+0x40>
 8015748:	2f00      	cmp	r7, #0
 801574a:	d102      	bne.n	8015752 <_ntoa_format+0x3a>
 801574c:	260c      	movs	r6, #12
 801574e:	4233      	tst	r3, r6
 8015750:	d002      	beq.n	8015758 <_ntoa_format+0x40>
      width--;
 8015752:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015754:	3e01      	subs	r6, #1
 8015756:	9611      	str	r6, [sp, #68]	; 0x44
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8015758:	2630      	movs	r6, #48	; 0x30
 801575a:	e003      	b.n	8015764 <_ntoa_format+0x4c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801575c:	2c20      	cmp	r4, #32
 801575e:	d003      	beq.n	8015768 <_ntoa_format+0x50>
      buf[len++] = '0';
 8015760:	552e      	strb	r6, [r5, r4]
 8015762:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015764:	42a0      	cmp	r0, r4
 8015766:	d8f9      	bhi.n	801575c <_ntoa_format+0x44>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8015768:	2630      	movs	r6, #48	; 0x30
 801576a:	46b4      	mov	ip, r6
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801576c:	2900      	cmp	r1, #0
 801576e:	d004      	beq.n	801577a <_ntoa_format+0x62>
 8015770:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015772:	42a6      	cmp	r6, r4
 8015774:	d901      	bls.n	801577a <_ntoa_format+0x62>
 8015776:	2c20      	cmp	r4, #32
 8015778:	d114      	bne.n	80157a4 <_ntoa_format+0x8c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 801577a:	06d9      	lsls	r1, r3, #27
 801577c:	d536      	bpl.n	80157ec <_ntoa_format+0xd4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 801577e:	0559      	lsls	r1, r3, #21
 8015780:	d415      	bmi.n	80157ae <_ntoa_format+0x96>
 8015782:	2c00      	cmp	r4, #0
 8015784:	d013      	beq.n	80157ae <_ntoa_format+0x96>
 8015786:	4284      	cmp	r4, r0
 8015788:	d002      	beq.n	8015790 <_ntoa_format+0x78>
 801578a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801578c:	428c      	cmp	r4, r1
 801578e:	d10e      	bne.n	80157ae <_ntoa_format+0x96>
      len--;
 8015790:	1e61      	subs	r1, r4, #1
      if (len && (base == 16U)) {
 8015792:	2900      	cmp	r1, #0
 8015794:	d00a      	beq.n	80157ac <_ntoa_format+0x94>
        len--;
 8015796:	3c02      	subs	r4, #2
      if (len && (base == 16U)) {
 8015798:	2a10      	cmp	r2, #16
 801579a:	d00a      	beq.n	80157b2 <_ntoa_format+0x9a>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801579c:	000c      	movs	r4, r1
 801579e:	2a02      	cmp	r2, #2
 80157a0:	d11f      	bne.n	80157e2 <_ntoa_format+0xca>
 80157a2:	e032      	b.n	801580a <_ntoa_format+0xf2>
      buf[len++] = '0';
 80157a4:	4666      	mov	r6, ip
 80157a6:	552e      	strb	r6, [r5, r4]
 80157a8:	3401      	adds	r4, #1
 80157aa:	e7df      	b.n	801576c <_ntoa_format+0x54>
 80157ac:	000c      	movs	r4, r1
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80157ae:	2a10      	cmp	r2, #16
 80157b0:	d127      	bne.n	8015802 <_ntoa_format+0xea>
 80157b2:	069a      	lsls	r2, r3, #26
 80157b4:	d410      	bmi.n	80157d8 <_ntoa_format+0xc0>
      buf[len++] = 'x';
 80157b6:	2278      	movs	r2, #120	; 0x78
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80157b8:	2c1f      	cmp	r4, #31
 80157ba:	d910      	bls.n	80157de <_ntoa_format+0xc6>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80157bc:	9e01      	ldr	r6, [sp, #4]
 80157be:	079b      	lsls	r3, r3, #30
 80157c0:	d031      	beq.n	8015826 <_ntoa_format+0x10e>
      out(' ', buffer, idx++, maxlen);
 80157c2:	9400      	str	r4, [sp, #0]
 80157c4:	9b00      	ldr	r3, [sp, #0]
 80157c6:	19a0      	adds	r0, r4, r6
 80157c8:	1ac2      	subs	r2, r0, r3
  while (len) {
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d132      	bne.n	8015834 <_ntoa_format+0x11c>
  if (flags & FLAGS_LEFT) {
 80157ce:	9b05      	ldr	r3, [sp, #20]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d140      	bne.n	8015856 <_ntoa_format+0x13e>
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 80157d4:	b007      	add	sp, #28
 80157d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf[len++] = 'X';
 80157d8:	2258      	movs	r2, #88	; 0x58
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80157da:	2c1f      	cmp	r4, #31
 80157dc:	d8ee      	bhi.n	80157bc <_ntoa_format+0xa4>
      buf[len++] = 'b';
 80157de:	552a      	strb	r2, [r5, r4]
 80157e0:	3401      	adds	r4, #1
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80157e2:	2c1f      	cmp	r4, #31
 80157e4:	d8ea      	bhi.n	80157bc <_ntoa_format+0xa4>
      buf[len++] = '0';
 80157e6:	2230      	movs	r2, #48	; 0x30
 80157e8:	552a      	strb	r2, [r5, r4]
 80157ea:	3401      	adds	r4, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80157ec:	2c20      	cmp	r4, #32
 80157ee:	d0e5      	beq.n	80157bc <_ntoa_format+0xa4>
      buf[len++] = '-';
 80157f0:	222d      	movs	r2, #45	; 0x2d
    if (negative) {
 80157f2:	2f00      	cmp	r7, #0
 80157f4:	d102      	bne.n	80157fc <_ntoa_format+0xe4>
    else if (flags & FLAGS_PLUS) {
 80157f6:	075a      	lsls	r2, r3, #29
 80157f8:	d509      	bpl.n	801580e <_ntoa_format+0xf6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80157fa:	222b      	movs	r2, #43	; 0x2b
      buf[len++] = ' ';
 80157fc:	552a      	strb	r2, [r5, r4]
 80157fe:	3401      	adds	r4, #1
 8015800:	e7dc      	b.n	80157bc <_ntoa_format+0xa4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015802:	2a02      	cmp	r2, #2
 8015804:	d1ed      	bne.n	80157e2 <_ntoa_format+0xca>
 8015806:	2c1f      	cmp	r4, #31
 8015808:	d8d8      	bhi.n	80157bc <_ntoa_format+0xa4>
      buf[len++] = 'b';
 801580a:	2262      	movs	r2, #98	; 0x62
 801580c:	e7e7      	b.n	80157de <_ntoa_format+0xc6>
    else if (flags & FLAGS_SPACE) {
 801580e:	071a      	lsls	r2, r3, #28
 8015810:	d5d4      	bpl.n	80157bc <_ntoa_format+0xa4>
      buf[len++] = ' ';
 8015812:	2220      	movs	r2, #32
 8015814:	e7f2      	b.n	80157fc <_ntoa_format+0xe4>
      out(' ', buffer, idx++, maxlen);
 8015816:	1c77      	adds	r7, r6, #1
 8015818:	0032      	movs	r2, r6
 801581a:	9b04      	ldr	r3, [sp, #16]
 801581c:	9e02      	ldr	r6, [sp, #8]
 801581e:	9903      	ldr	r1, [sp, #12]
 8015820:	2020      	movs	r0, #32
 8015822:	47b0      	blx	r6
 8015824:	003e      	movs	r6, r7
    for (size_t i = len; i < width; i++) {
 8015826:	9b01      	ldr	r3, [sp, #4]
 8015828:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801582a:	1ae3      	subs	r3, r4, r3
 801582c:	199b      	adds	r3, r3, r6
 801582e:	429a      	cmp	r2, r3
 8015830:	d8f1      	bhi.n	8015816 <_ntoa_format+0xfe>
 8015832:	e7c6      	b.n	80157c2 <_ntoa_format+0xaa>
    out(buf[--len], buffer, idx++, maxlen);
 8015834:	9b00      	ldr	r3, [sp, #0]
 8015836:	9903      	ldr	r1, [sp, #12]
 8015838:	3b01      	subs	r3, #1
 801583a:	9300      	str	r3, [sp, #0]
 801583c:	5ce8      	ldrb	r0, [r5, r3]
 801583e:	9f02      	ldr	r7, [sp, #8]
 8015840:	9b04      	ldr	r3, [sp, #16]
 8015842:	47b8      	blx	r7
 8015844:	e7be      	b.n	80157c4 <_ntoa_format+0xac>
      out(' ', buffer, idx++, maxlen);
 8015846:	1c44      	adds	r4, r0, #1
 8015848:	0002      	movs	r2, r0
 801584a:	9b04      	ldr	r3, [sp, #16]
 801584c:	2020      	movs	r0, #32
 801584e:	9903      	ldr	r1, [sp, #12]
 8015850:	9d02      	ldr	r5, [sp, #8]
 8015852:	47a8      	blx	r5
 8015854:	0020      	movs	r0, r4
    while (idx - start_idx < width) {
 8015856:	9b01      	ldr	r3, [sp, #4]
 8015858:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801585a:	1ac3      	subs	r3, r0, r3
 801585c:	429a      	cmp	r2, r3
 801585e:	d8f2      	bhi.n	8015846 <_ntoa_format+0x12e>
 8015860:	e7b8      	b.n	80157d4 <_ntoa_format+0xbc>

08015862 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015864:	b095      	sub	sp, #84	; 0x54
 8015866:	9309      	str	r3, [sp, #36]	; 0x24
 8015868:	ab1a      	add	r3, sp, #104	; 0x68
 801586a:	0006      	movs	r6, r0
 801586c:	cb01      	ldmia	r3!, {r0}
 801586e:	000f      	movs	r7, r1
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	9208      	str	r2, [sp, #32]
 8015874:	930a      	str	r3, [sp, #40]	; 0x28
 8015876:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8015878:	2800      	cmp	r0, #0
 801587a:	d101      	bne.n	8015880 <_ntoa_long+0x1e>
    flags &= ~FLAGS_HASH;
 801587c:	2310      	movs	r3, #16
 801587e:	439c      	bics	r4, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015880:	0563      	lsls	r3, r4, #21
 8015882:	d502      	bpl.n	801588a <_ntoa_long+0x28>
  size_t len = 0U;
 8015884:	2300      	movs	r3, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015886:	4298      	cmp	r0, r3
 8015888:	d01d      	beq.n	80158c6 <_ntoa_long+0x64>
 801588a:	2361      	movs	r3, #97	; 0x61
 801588c:	06a2      	lsls	r2, r4, #26
 801588e:	d500      	bpl.n	8015892 <_ntoa_long+0x30>
 8015890:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015892:	2500      	movs	r5, #0
 8015894:	b2db      	uxtb	r3, r3
 8015896:	3b0a      	subs	r3, #10
 8015898:	930b      	str	r3, [sp, #44]	; 0x2c
 801589a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801589c:	f7fb f9ac 	bl	8010bf8 <__aeabi_uidivmod>
 80158a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      const char digit = (char)(value % base);
 80158a2:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80158a4:	189a      	adds	r2, r3, r2
 80158a6:	4684      	mov	ip, r0
 80158a8:	b2d2      	uxtb	r2, r2
 80158aa:	2909      	cmp	r1, #9
 80158ac:	d801      	bhi.n	80158b2 <_ntoa_long+0x50>
 80158ae:	3330      	adds	r3, #48	; 0x30
 80158b0:	b2da      	uxtb	r2, r3
 80158b2:	2020      	movs	r0, #32
 80158b4:	a904      	add	r1, sp, #16
 80158b6:	1809      	adds	r1, r1, r0
      value /= base;
 80158b8:	4660      	mov	r0, ip
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80158ba:	1c6b      	adds	r3, r5, #1
 80158bc:	554a      	strb	r2, [r1, r5]
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80158be:	2800      	cmp	r0, #0
 80158c0:	d001      	beq.n	80158c6 <_ntoa_long+0x64>
 80158c2:	2b20      	cmp	r3, #32
 80158c4:	d113      	bne.n	80158ee <_ntoa_long+0x8c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80158c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80158c8:	9301      	str	r3, [sp, #4]
 80158ca:	9205      	str	r2, [sp, #20]
 80158cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80158ce:	ab0c      	add	r3, sp, #48	; 0x30
 80158d0:	9204      	str	r2, [sp, #16]
 80158d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80158d4:	9300      	str	r3, [sp, #0]
 80158d6:	9203      	str	r2, [sp, #12]
 80158d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158da:	9406      	str	r4, [sp, #24]
 80158dc:	9202      	str	r2, [sp, #8]
 80158de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158e0:	9a08      	ldr	r2, [sp, #32]
 80158e2:	0039      	movs	r1, r7
 80158e4:	0030      	movs	r0, r6
 80158e6:	f7ff ff17 	bl	8015718 <_ntoa_format>
}
 80158ea:	b015      	add	sp, #84	; 0x54
 80158ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158ee:	001d      	movs	r5, r3
 80158f0:	e7d3      	b.n	801589a <_ntoa_long+0x38>

080158f2 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80158f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158f4:	b099      	sub	sp, #100	; 0x64
 80158f6:	930c      	str	r3, [sp, #48]	; 0x30
 80158f8:	ab20      	add	r3, sp, #128	; 0x80
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	9009      	str	r0, [sp, #36]	; 0x24
 80158fe:	930d      	str	r3, [sp, #52]	; 0x34
 8015900:	981e      	ldr	r0, [sp, #120]	; 0x78
 8015902:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015904:	910a      	str	r1, [sp, #40]	; 0x28
 8015906:	930e      	str	r3, [sp, #56]	; 0x38
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8015908:	0003      	movs	r3, r0
{
 801590a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801590c:	920b      	str	r2, [sp, #44]	; 0x2c
 801590e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8015910:	9e26      	ldr	r6, [sp, #152]	; 0x98
  if (!value) {
 8015912:	430b      	orrs	r3, r1
 8015914:	d101      	bne.n	801591a <_ntoa_long_long+0x28>
    flags &= ~FLAGS_HASH;
 8015916:	3310      	adds	r3, #16
 8015918:	439e      	bics	r6, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 801591a:	0573      	lsls	r3, r6, #21
 801591c:	d504      	bpl.n	8015928 <_ntoa_long_long+0x36>
 801591e:	0003      	movs	r3, r0
  size_t len = 0U;
 8015920:	2200      	movs	r2, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015922:	430b      	orrs	r3, r1
 8015924:	4293      	cmp	r3, r2
 8015926:	d021      	beq.n	801596c <_ntoa_long_long+0x7a>
 8015928:	2361      	movs	r3, #97	; 0x61
 801592a:	06b2      	lsls	r2, r6, #26
 801592c:	d500      	bpl.n	8015930 <_ntoa_long_long+0x3e>
 801592e:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015930:	2400      	movs	r4, #0
 8015932:	b2db      	uxtb	r3, r3
 8015934:	3b0a      	subs	r3, #10
 8015936:	930f      	str	r3, [sp, #60]	; 0x3c
 8015938:	002a      	movs	r2, r5
 801593a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801593c:	f7fb fac4 	bl	8010ec8 <__aeabi_uldivmod>
 8015940:	468c      	mov	ip, r1
 8015942:	990f      	ldr	r1, [sp, #60]	; 0x3c
      const char digit = (char)(value % base);
 8015944:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015946:	1851      	adds	r1, r2, r1
 8015948:	0003      	movs	r3, r0
 801594a:	b2c9      	uxtb	r1, r1
 801594c:	2a09      	cmp	r2, #9
 801594e:	d801      	bhi.n	8015954 <_ntoa_long_long+0x62>
 8015950:	3230      	adds	r2, #48	; 0x30
 8015952:	b2d1      	uxtb	r1, r2
 8015954:	2720      	movs	r7, #32
 8015956:	a808      	add	r0, sp, #32
 8015958:	19c0      	adds	r0, r0, r7
 801595a:	5501      	strb	r1, [r0, r4]
 801595c:	1c62      	adds	r2, r4, #1
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 801595e:	4664      	mov	r4, ip
      value /= base;
 8015960:	0018      	movs	r0, r3
 8015962:	4661      	mov	r1, ip
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8015964:	431c      	orrs	r4, r3
 8015966:	d001      	beq.n	801596c <_ntoa_long_long+0x7a>
 8015968:	42ba      	cmp	r2, r7
 801596a:	d112      	bne.n	8015992 <_ntoa_long_long+0xa0>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 801596c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801596e:	9201      	str	r2, [sp, #4]
 8015970:	9305      	str	r3, [sp, #20]
 8015972:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015974:	9606      	str	r6, [sp, #24]
 8015976:	9304      	str	r3, [sp, #16]
 8015978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801597a:	9503      	str	r5, [sp, #12]
 801597c:	9302      	str	r3, [sp, #8]
 801597e:	ab10      	add	r3, sp, #64	; 0x40
 8015980:	9300      	str	r3, [sp, #0]
 8015982:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015986:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015988:	9809      	ldr	r0, [sp, #36]	; 0x24
 801598a:	f7ff fec5 	bl	8015718 <_ntoa_format>
}
 801598e:	b019      	add	sp, #100	; 0x64
 8015990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015992:	0014      	movs	r4, r2
 8015994:	e7d0      	b.n	8015938 <_ntoa_long_long+0x46>
	...

08015998 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8015998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801599a:	b099      	sub	sp, #100	; 0x64
 801599c:	900d      	str	r0, [sp, #52]	; 0x34
 801599e:	910e      	str	r1, [sp, #56]	; 0x38
 80159a0:	920c      	str	r2, [sp, #48]	; 0x30
 80159a2:	930a      	str	r3, [sp, #40]	; 0x28
 80159a4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 80159a6:	2900      	cmp	r1, #0
 80159a8:	d101      	bne.n	80159ae <_vsnprintf+0x16>
    // use null output function
    out = _out_null;
 80159aa:	4bb6      	ldr	r3, [pc, #728]	; (8015c84 <_vsnprintf+0x2ec>)
 80159ac:	930d      	str	r3, [sp, #52]	; 0x34
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
 80159ae:	2700      	movs	r7, #0
 80159b0:	e101      	b.n	8015bb6 <_vsnprintf+0x21e>
 80159b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159b4:	3301      	adds	r3, #1
 80159b6:	930a      	str	r3, [sp, #40]	; 0x28
    if (*format != '%') {
 80159b8:	2825      	cmp	r0, #37	; 0x25
 80159ba:	d007      	beq.n	80159cc <_vsnprintf+0x34>
        out(*format, buffer, idx++, maxlen);
 80159bc:	003a      	movs	r2, r7
 80159be:	1c7c      	adds	r4, r7, #1
 80159c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80159c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80159c6:	47a8      	blx	r5
 80159c8:	0027      	movs	r7, r4
        format++;
        break;
 80159ca:	e0f4      	b.n	8015bb6 <_vsnprintf+0x21e>
    flags = 0U;
 80159cc:	2400      	movs	r4, #0
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80159ce:	2101      	movs	r1, #1
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80159d0:	2008      	movs	r0, #8
 80159d2:	e005      	b.n	80159e0 <_vsnprintf+0x48>
      switch (*format) {
 80159d4:	2b2d      	cmp	r3, #45	; 0x2d
 80159d6:	d016      	beq.n	8015a06 <_vsnprintf+0x6e>
 80159d8:	2b30      	cmp	r3, #48	; 0x30
 80159da:	d10c      	bne.n	80159f6 <_vsnprintf+0x5e>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80159dc:	430c      	orrs	r4, r1
{
 80159de:	920a      	str	r2, [sp, #40]	; 0x28
      switch (*format) {
 80159e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	3201      	adds	r2, #1
 80159e8:	2b2b      	cmp	r3, #43	; 0x2b
 80159ea:	d00f      	beq.n	8015a0c <_vsnprintf+0x74>
 80159ec:	d8f2      	bhi.n	80159d4 <_vsnprintf+0x3c>
 80159ee:	2b20      	cmp	r3, #32
 80159f0:	d00e      	beq.n	8015a10 <_vsnprintf+0x78>
 80159f2:	2b23      	cmp	r3, #35	; 0x23
 80159f4:	d00e      	beq.n	8015a14 <_vsnprintf+0x7c>
    if (_is_digit(*format)) {
 80159f6:	0019      	movs	r1, r3
 80159f8:	3930      	subs	r1, #48	; 0x30
 80159fa:	2909      	cmp	r1, #9
 80159fc:	d82c      	bhi.n	8015a58 <_vsnprintf+0xc0>
  unsigned int i = 0U;
 80159fe:	2300      	movs	r3, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015a00:	200a      	movs	r0, #10
  unsigned int i = 0U;
 8015a02:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a04:	e00e      	b.n	8015a24 <_vsnprintf+0x8c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8015a06:	2302      	movs	r3, #2
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8015a08:	431c      	orrs	r4, r3
 8015a0a:	e7e8      	b.n	80159de <_vsnprintf+0x46>
 8015a0c:	2304      	movs	r3, #4
 8015a0e:	e7fb      	b.n	8015a08 <_vsnprintf+0x70>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8015a10:	4304      	orrs	r4, r0
 8015a12:	e7e4      	b.n	80159de <_vsnprintf+0x46>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8015a14:	2310      	movs	r3, #16
 8015a16:	e7f7      	b.n	8015a08 <_vsnprintf+0x70>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a1a:	910a      	str	r1, [sp, #40]	; 0x28
 8015a1c:	4343      	muls	r3, r0
 8015a1e:	3b30      	subs	r3, #48	; 0x30
 8015a20:	18d3      	adds	r3, r2, r3
 8015a22:	930f      	str	r3, [sp, #60]	; 0x3c
  while (_is_digit(**str)) {
 8015a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a26:	781a      	ldrb	r2, [r3, #0]
 8015a28:	1c59      	adds	r1, r3, #1
 8015a2a:	0013      	movs	r3, r2
 8015a2c:	3b30      	subs	r3, #48	; 0x30
 8015a2e:	2b09      	cmp	r3, #9
 8015a30:	d9f2      	bls.n	8015a18 <_vsnprintf+0x80>
    precision = 0U;
 8015a32:	2200      	movs	r2, #0
    if (*format == '.') {
 8015a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    precision = 0U;
 8015a36:	920b      	str	r2, [sp, #44]	; 0x2c
    if (*format == '.') {
 8015a38:	781b      	ldrb	r3, [r3, #0]
 8015a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8015a3c:	d138      	bne.n	8015ab0 <_vsnprintf+0x118>
      flags |= FLAGS_PRECISION;
 8015a3e:	2280      	movs	r2, #128	; 0x80
 8015a40:	00d2      	lsls	r2, r2, #3
 8015a42:	4314      	orrs	r4, r2
      if (_is_digit(*format)) {
 8015a44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a48:	7852      	ldrb	r2, [r2, #1]
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	0011      	movs	r1, r2
 8015a4e:	3930      	subs	r1, #48	; 0x30
 8015a50:	2909      	cmp	r1, #9
 8015a52:	d820      	bhi.n	8015a96 <_vsnprintf+0xfe>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015a54:	250a      	movs	r5, #10
 8015a56:	e016      	b.n	8015a86 <_vsnprintf+0xee>
    width = 0U;
 8015a58:	2100      	movs	r1, #0
 8015a5a:	910f      	str	r1, [sp, #60]	; 0x3c
    else if (*format == '*') {
 8015a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8015a5e:	d1e8      	bne.n	8015a32 <_vsnprintf+0x9a>
      const int w = va_arg(va, int);
 8015a60:	6831      	ldr	r1, [r6, #0]
 8015a62:	1d33      	adds	r3, r6, #4
 8015a64:	910f      	str	r1, [sp, #60]	; 0x3c
      if (w < 0) {
 8015a66:	2900      	cmp	r1, #0
 8015a68:	da04      	bge.n	8015a74 <_vsnprintf+0xdc>
        flags |= FLAGS_LEFT;    // reverse padding
 8015a6a:	2102      	movs	r1, #2
 8015a6c:	430c      	orrs	r4, r1
        width = (unsigned int)-w;
 8015a6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015a70:	4249      	negs	r1, r1
 8015a72:	910f      	str	r1, [sp, #60]	; 0x3c
      const int w = va_arg(va, int);
 8015a74:	001e      	movs	r6, r3
 8015a76:	920a      	str	r2, [sp, #40]	; 0x28
 8015a78:	e7db      	b.n	8015a32 <_vsnprintf+0x9a>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a7c:	436b      	muls	r3, r5
 8015a7e:	3b30      	subs	r3, #48	; 0x30
 8015a80:	18d3      	adds	r3, r2, r3
 8015a82:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a84:	0003      	movs	r3, r0
  while (_is_digit(**str)) {
 8015a86:	781a      	ldrb	r2, [r3, #0]
 8015a88:	1c58      	adds	r0, r3, #1
 8015a8a:	0011      	movs	r1, r2
 8015a8c:	3930      	subs	r1, #48	; 0x30
 8015a8e:	2909      	cmp	r1, #9
 8015a90:	d9f3      	bls.n	8015a7a <_vsnprintf+0xe2>
      format++;
 8015a92:	930a      	str	r3, [sp, #40]	; 0x28
 8015a94:	e00c      	b.n	8015ab0 <_vsnprintf+0x118>
      else if (*format == '*') {
 8015a96:	2a2a      	cmp	r2, #42	; 0x2a
 8015a98:	d1fb      	bne.n	8015a92 <_vsnprintf+0xfa>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8015a9a:	6833      	ldr	r3, [r6, #0]
        const int prec = (int)va_arg(va, int);
 8015a9c:	3604      	adds	r6, #4
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8015a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015aa0:	43db      	mvns	r3, r3
 8015aa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015aa4:	17db      	asrs	r3, r3, #31
 8015aa6:	401a      	ands	r2, r3
        format++;
 8015aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8015aaa:	920b      	str	r2, [sp, #44]	; 0x2c
        format++;
 8015aac:	3302      	adds	r3, #2
 8015aae:	930a      	str	r3, [sp, #40]	; 0x28
 8015ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ab2:	1c5a      	adds	r2, r3, #1
    switch (*format) {
 8015ab4:	781b      	ldrb	r3, [r3, #0]
 8015ab6:	2b6c      	cmp	r3, #108	; 0x6c
 8015ab8:	d00d      	beq.n	8015ad6 <_vsnprintf+0x13e>
 8015aba:	d805      	bhi.n	8015ac8 <_vsnprintf+0x130>
 8015abc:	2b68      	cmp	r3, #104	; 0x68
 8015abe:	d014      	beq.n	8015aea <_vsnprintf+0x152>
 8015ac0:	2b6a      	cmp	r3, #106	; 0x6a
 8015ac2:	d02f      	beq.n	8015b24 <_vsnprintf+0x18c>
 8015ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ac6:	e016      	b.n	8015af6 <_vsnprintf+0x15e>
 8015ac8:	2b74      	cmp	r3, #116	; 0x74
 8015aca:	d001      	beq.n	8015ad0 <_vsnprintf+0x138>
 8015acc:	2b7a      	cmp	r3, #122	; 0x7a
 8015ace:	d1f9      	bne.n	8015ac4 <_vsnprintf+0x12c>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8015ad0:	2380      	movs	r3, #128	; 0x80
 8015ad2:	005b      	lsls	r3, r3, #1
 8015ad4:	e00e      	b.n	8015af4 <_vsnprintf+0x15c>
        if (*format == 'l') {
 8015ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ad8:	785b      	ldrb	r3, [r3, #1]
 8015ada:	2b6c      	cmp	r3, #108	; 0x6c
 8015adc:	d1f8      	bne.n	8015ad0 <_vsnprintf+0x138>
          flags |= FLAGS_LONG_LONG;
 8015ade:	23c0      	movs	r3, #192	; 0xc0
 8015ae0:	009b      	lsls	r3, r3, #2
          format++;
 8015ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
          flags |= FLAGS_CHAR;
 8015ae4:	431c      	orrs	r4, r3
          format++;
 8015ae6:	3202      	adds	r2, #2
 8015ae8:	e005      	b.n	8015af6 <_vsnprintf+0x15e>
        if (*format == 'h') {
 8015aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015aec:	785b      	ldrb	r3, [r3, #1]
 8015aee:	2b68      	cmp	r3, #104	; 0x68
 8015af0:	d016      	beq.n	8015b20 <_vsnprintf+0x188>
        flags |= FLAGS_SHORT;
 8015af2:	2380      	movs	r3, #128	; 0x80
 8015af4:	431c      	orrs	r4, r3
    switch (*format) {
 8015af6:	7810      	ldrb	r0, [r2, #0]
 8015af8:	1c53      	adds	r3, r2, #1
 8015afa:	930a      	str	r3, [sp, #40]	; 0x28
 8015afc:	2869      	cmp	r0, #105	; 0x69
 8015afe:	d01a      	beq.n	8015b36 <_vsnprintf+0x19e>
 8015b00:	d900      	bls.n	8015b04 <_vsnprintf+0x16c>
 8015b02:	e06a      	b.n	8015bda <_vsnprintf+0x242>
 8015b04:	2862      	cmp	r0, #98	; 0x62
 8015b06:	d100      	bne.n	8015b0a <_vsnprintf+0x172>
 8015b08:	e172      	b.n	8015df0 <_vsnprintf+0x458>
 8015b0a:	d80e      	bhi.n	8015b2a <_vsnprintf+0x192>
 8015b0c:	2825      	cmp	r0, #37	; 0x25
 8015b0e:	d100      	bne.n	8015b12 <_vsnprintf+0x17a>
 8015b10:	e754      	b.n	80159bc <_vsnprintf+0x24>
 8015b12:	2858      	cmp	r0, #88	; 0x58
 8015b14:	d000      	beq.n	8015b18 <_vsnprintf+0x180>
 8015b16:	e751      	b.n	80159bc <_vsnprintf+0x24>
          flags |= FLAGS_UPPERCASE;
 8015b18:	2320      	movs	r3, #32
 8015b1a:	431c      	orrs	r4, r3
          base = 16U;
 8015b1c:	3b10      	subs	r3, #16
 8015b1e:	e011      	b.n	8015b44 <_vsnprintf+0x1ac>
          flags |= FLAGS_CHAR;
 8015b20:	23c0      	movs	r3, #192	; 0xc0
 8015b22:	e7de      	b.n	8015ae2 <_vsnprintf+0x14a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8015b24:	2380      	movs	r3, #128	; 0x80
 8015b26:	009b      	lsls	r3, r3, #2
 8015b28:	e7e4      	b.n	8015af4 <_vsnprintf+0x15c>
    switch (*format) {
 8015b2a:	2863      	cmp	r0, #99	; 0x63
 8015b2c:	d100      	bne.n	8015b30 <_vsnprintf+0x198>
 8015b2e:	e0c9      	b.n	8015cc4 <_vsnprintf+0x32c>
 8015b30:	2864      	cmp	r0, #100	; 0x64
 8015b32:	d000      	beq.n	8015b36 <_vsnprintf+0x19e>
 8015b34:	e742      	b.n	80159bc <_vsnprintf+0x24>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8015b36:	2310      	movs	r3, #16
 8015b38:	439c      	bics	r4, r3
          base = 10U;
 8015b3a:	3b06      	subs	r3, #6
        if ((*format != 'i') && (*format != 'd')) {
 8015b3c:	2869      	cmp	r0, #105	; 0x69
 8015b3e:	d003      	beq.n	8015b48 <_vsnprintf+0x1b0>
 8015b40:	2864      	cmp	r0, #100	; 0x64
 8015b42:	d001      	beq.n	8015b48 <_vsnprintf+0x1b0>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8015b44:	220c      	movs	r2, #12
 8015b46:	4394      	bics	r4, r2
        if (flags & FLAGS_PRECISION) {
 8015b48:	0562      	lsls	r2, r4, #21
 8015b4a:	d501      	bpl.n	8015b50 <_vsnprintf+0x1b8>
          flags &= ~FLAGS_ZEROPAD;
 8015b4c:	2201      	movs	r2, #1
 8015b4e:	4394      	bics	r4, r2
 8015b50:	2280      	movs	r2, #128	; 0x80
 8015b52:	0092      	lsls	r2, r2, #2
 8015b54:	4022      	ands	r2, r4
        if ((*format == 'i') || (*format == 'd')) {
 8015b56:	2869      	cmp	r0, #105	; 0x69
 8015b58:	d002      	beq.n	8015b60 <_vsnprintf+0x1c8>
 8015b5a:	2864      	cmp	r0, #100	; 0x64
 8015b5c:	d000      	beq.n	8015b60 <_vsnprintf+0x1c8>
 8015b5e:	e07b      	b.n	8015c58 <_vsnprintf+0x2c0>
          if (flags & FLAGS_LONG_LONG) {
 8015b60:	2a00      	cmp	r2, #0
 8015b62:	d059      	beq.n	8015c18 <_vsnprintf+0x280>
            const long long value = va_arg(va, long long);
 8015b64:	2107      	movs	r1, #7
 8015b66:	1df2      	adds	r2, r6, #7
 8015b68:	438a      	bics	r2, r1
 8015b6a:	6811      	ldr	r1, [r2, #0]
 8015b6c:	0015      	movs	r5, r2
 8015b6e:	6852      	ldr	r2, [r2, #4]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8015b70:	9304      	str	r3, [sp, #16]
 8015b72:	2300      	movs	r3, #0
 8015b74:	9305      	str	r3, [sp, #20]
 8015b76:	0fd3      	lsrs	r3, r2, #31
 8015b78:	9302      	str	r3, [sp, #8]
 8015b7a:	17d3      	asrs	r3, r2, #31
 8015b7c:	9311      	str	r3, [sp, #68]	; 0x44
 8015b7e:	9310      	str	r3, [sp, #64]	; 0x40
 8015b80:	404b      	eors	r3, r1
 8015b82:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015b84:	9314      	str	r3, [sp, #80]	; 0x50
 8015b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b88:	9007      	str	r0, [sp, #28]
 8015b8a:	4053      	eors	r3, r2
 8015b8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015b8e:	9315      	str	r3, [sp, #84]	; 0x54
 8015b90:	9006      	str	r0, [sp, #24]
 8015b92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b96:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015b98:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015b9a:	1a12      	subs	r2, r2, r0
 8015b9c:	418b      	sbcs	r3, r1
 8015b9e:	9200      	str	r2, [sp, #0]
 8015ba0:	9301      	str	r3, [sp, #4]
            const long long value = va_arg(va, long long);
 8015ba2:	3508      	adds	r5, #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8015ba4:	9408      	str	r4, [sp, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8015ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ba8:	003a      	movs	r2, r7
 8015baa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015bac:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015bae:	f7ff fea0 	bl	80158f2 <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8015bb2:	0007      	movs	r7, r0
        break;
 8015bb4:	002e      	movs	r6, r5
  while (*format)
 8015bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bb8:	7818      	ldrb	r0, [r3, #0]
 8015bba:	2800      	cmp	r0, #0
 8015bbc:	d000      	beq.n	8015bc0 <_vsnprintf+0x228>
 8015bbe:	e6f8      	b.n	80159b2 <_vsnprintf+0x1a>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8015bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bc2:	003a      	movs	r2, r7
 8015bc4:	429f      	cmp	r7, r3
 8015bc6:	d300      	bcc.n	8015bca <_vsnprintf+0x232>
 8015bc8:	1e5a      	subs	r2, r3, #1
 8015bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bcc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015bce:	2000      	movs	r0, #0
 8015bd0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015bd2:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
}
 8015bd4:	0038      	movs	r0, r7
 8015bd6:	b019      	add	sp, #100	; 0x64
 8015bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (*format) {
 8015bda:	2873      	cmp	r0, #115	; 0x73
 8015bdc:	d100      	bne.n	8015be0 <_vsnprintf+0x248>
 8015bde:	e0a7      	b.n	8015d30 <_vsnprintf+0x398>
 8015be0:	d812      	bhi.n	8015c08 <_vsnprintf+0x270>
 8015be2:	286f      	cmp	r0, #111	; 0x6f
 8015be4:	d100      	bne.n	8015be8 <_vsnprintf+0x250>
 8015be6:	e101      	b.n	8015dec <_vsnprintf+0x454>
 8015be8:	2870      	cmp	r0, #112	; 0x70
 8015bea:	d000      	beq.n	8015bee <_vsnprintf+0x256>
 8015bec:	e6e6      	b.n	80159bc <_vsnprintf+0x24>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8015bee:	2321      	movs	r3, #33	; 0x21
 8015bf0:	431c      	orrs	r4, r3
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8015bf2:	3b19      	subs	r3, #25
 8015bf4:	9304      	str	r3, [sp, #16]
 8015bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bf8:	1d35      	adds	r5, r6, #4
 8015bfa:	9303      	str	r3, [sp, #12]
 8015bfc:	2310      	movs	r3, #16
 8015bfe:	9302      	str	r3, [sp, #8]
 8015c00:	2300      	movs	r3, #0
 8015c02:	9405      	str	r4, [sp, #20]
 8015c04:	9301      	str	r3, [sp, #4]
 8015c06:	e049      	b.n	8015c9c <_vsnprintf+0x304>
    switch (*format) {
 8015c08:	2875      	cmp	r0, #117	; 0x75
 8015c0a:	d100      	bne.n	8015c0e <_vsnprintf+0x276>
 8015c0c:	e793      	b.n	8015b36 <_vsnprintf+0x19e>
 8015c0e:	2878      	cmp	r0, #120	; 0x78
 8015c10:	d000      	beq.n	8015c14 <_vsnprintf+0x27c>
 8015c12:	e6d3      	b.n	80159bc <_vsnprintf+0x24>
          base = 16U;
 8015c14:	2310      	movs	r3, #16
 8015c16:	e795      	b.n	8015b44 <_vsnprintf+0x1ac>
 8015c18:	1d35      	adds	r5, r6, #4
          else if (flags & FLAGS_LONG) {
 8015c1a:	05e2      	lsls	r2, r4, #23
 8015c1c:	d513      	bpl.n	8015c46 <_vsnprintf+0x2ae>
            const long value = va_arg(va, long);
 8015c1e:	6832      	ldr	r2, [r6, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8015c20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015c22:	9302      	str	r3, [sp, #8]
 8015c24:	0fd3      	lsrs	r3, r2, #31
 8015c26:	9104      	str	r1, [sp, #16]
 8015c28:	9301      	str	r3, [sp, #4]
 8015c2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c2c:	17d3      	asrs	r3, r2, #31
 8015c2e:	18d2      	adds	r2, r2, r3
 8015c30:	9405      	str	r4, [sp, #20]
 8015c32:	9103      	str	r1, [sp, #12]
 8015c34:	405a      	eors	r2, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8015c36:	9200      	str	r2, [sp, #0]
 8015c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c3a:	003a      	movs	r2, r7
 8015c3c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015c3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015c40:	f7ff fe0f 	bl	8015862 <_ntoa_long>
 8015c44:	e7b5      	b.n	8015bb2 <_vsnprintf+0x21a>
 8015c46:	6832      	ldr	r2, [r6, #0]
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8015c48:	0661      	lsls	r1, r4, #25
 8015c4a:	d501      	bpl.n	8015c50 <_vsnprintf+0x2b8>
 8015c4c:	b252      	sxtb	r2, r2
 8015c4e:	e7e7      	b.n	8015c20 <_vsnprintf+0x288>
 8015c50:	0621      	lsls	r1, r4, #24
 8015c52:	d5e5      	bpl.n	8015c20 <_vsnprintf+0x288>
 8015c54:	b212      	sxth	r2, r2
 8015c56:	e7e3      	b.n	8015c20 <_vsnprintf+0x288>
          if (flags & FLAGS_LONG_LONG) {
 8015c58:	2a00      	cmp	r2, #0
 8015c5a:	d015      	beq.n	8015c88 <_vsnprintf+0x2f0>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8015c5c:	2107      	movs	r1, #7
 8015c5e:	1df2      	adds	r2, r6, #7
 8015c60:	438a      	bics	r2, r1
 8015c62:	9304      	str	r3, [sp, #16]
 8015c64:	2300      	movs	r3, #0
 8015c66:	0015      	movs	r5, r2
 8015c68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015c6a:	9408      	str	r4, [sp, #32]
 8015c6c:	9107      	str	r1, [sp, #28]
 8015c6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c70:	9305      	str	r3, [sp, #20]
 8015c72:	9106      	str	r1, [sp, #24]
 8015c74:	9302      	str	r3, [sp, #8]
 8015c76:	6813      	ldr	r3, [r2, #0]
 8015c78:	6854      	ldr	r4, [r2, #4]
 8015c7a:	3508      	adds	r5, #8
 8015c7c:	9300      	str	r3, [sp, #0]
 8015c7e:	9401      	str	r4, [sp, #4]
 8015c80:	e791      	b.n	8015ba6 <_vsnprintf+0x20e>
 8015c82:	46c0      	nop			; (mov r8, r8)
 8015c84:	08015709 	.word	0x08015709
 8015c88:	1d35      	adds	r5, r6, #4
          else if (flags & FLAGS_LONG) {
 8015c8a:	05e1      	lsls	r1, r4, #23
 8015c8c:	d509      	bpl.n	8015ca2 <_vsnprintf+0x30a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8015c8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015c90:	9405      	str	r4, [sp, #20]
 8015c92:	9104      	str	r1, [sp, #16]
 8015c94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c96:	9302      	str	r3, [sp, #8]
 8015c98:	9103      	str	r1, [sp, #12]
 8015c9a:	9201      	str	r2, [sp, #4]
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8015c9c:	6833      	ldr	r3, [r6, #0]
 8015c9e:	9300      	str	r3, [sp, #0]
 8015ca0:	e7ca      	b.n	8015c38 <_vsnprintf+0x2a0>
 8015ca2:	6832      	ldr	r2, [r6, #0]
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8015ca4:	0661      	lsls	r1, r4, #25
 8015ca6:	d509      	bpl.n	8015cbc <_vsnprintf+0x324>
 8015ca8:	b2d2      	uxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8015caa:	9302      	str	r3, [sp, #8]
 8015cac:	2300      	movs	r3, #0
 8015cae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015cb0:	9405      	str	r4, [sp, #20]
 8015cb2:	9104      	str	r1, [sp, #16]
 8015cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015cb6:	9301      	str	r3, [sp, #4]
 8015cb8:	9103      	str	r1, [sp, #12]
 8015cba:	e7bc      	b.n	8015c36 <_vsnprintf+0x29e>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8015cbc:	0621      	lsls	r1, r4, #24
 8015cbe:	d5f4      	bpl.n	8015caa <_vsnprintf+0x312>
 8015cc0:	b292      	uxth	r2, r2
 8015cc2:	e7f2      	b.n	8015caa <_vsnprintf+0x312>
        if (!(flags & FLAGS_LEFT)) {
 8015cc4:	2302      	movs	r3, #2
 8015cc6:	4023      	ands	r3, r4
 8015cc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8015cca:	d026      	beq.n	8015d1a <_vsnprintf+0x382>
        unsigned int l = 1U;
 8015ccc:	2301      	movs	r3, #1
 8015cce:	003c      	movs	r4, r7
 8015cd0:	9312      	str	r3, [sp, #72]	; 0x48
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8015cd2:	6830      	ldr	r0, [r6, #0]
 8015cd4:	1d33      	adds	r3, r6, #4
 8015cd6:	9313      	str	r3, [sp, #76]	; 0x4c
 8015cd8:	b2c0      	uxtb	r0, r0
 8015cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cdc:	0022      	movs	r2, r4
 8015cde:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015ce0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015ce2:	47a8      	blx	r5
        if (flags & FLAGS_LEFT) {
 8015ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8015ce6:	1c67      	adds	r7, r4, #1
        if (flags & FLAGS_LEFT) {
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d006      	beq.n	8015cfa <_vsnprintf+0x362>
 8015cec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015cee:	3d01      	subs	r5, #1
 8015cf0:	1b2d      	subs	r5, r5, r4
          while (l++ < width) {
 8015cf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015cf4:	197b      	adds	r3, r7, r5
 8015cf6:	4293      	cmp	r3, r2
 8015cf8:	d311      	bcc.n	8015d1e <_vsnprintf+0x386>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8015cfa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
        break;
 8015cfc:	e75b      	b.n	8015bb6 <_vsnprintf+0x21e>
            out(' ', buffer, idx++, maxlen);
 8015cfe:	0022      	movs	r2, r4
 8015d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d02:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015d04:	2020      	movs	r0, #32
 8015d06:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015d08:	47a0      	blx	r4
 8015d0a:	1cab      	adds	r3, r5, #2
 8015d0c:	9312      	str	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 8015d0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d10:	197c      	adds	r4, r7, r5
 8015d12:	3501      	adds	r5, #1
 8015d14:	429d      	cmp	r5, r3
 8015d16:	d3f2      	bcc.n	8015cfe <_vsnprintf+0x366>
 8015d18:	e7db      	b.n	8015cd2 <_vsnprintf+0x33a>
 8015d1a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015d1c:	e7f5      	b.n	8015d0a <_vsnprintf+0x372>
            out(' ', buffer, idx++, maxlen);
 8015d1e:	003a      	movs	r2, r7
 8015d20:	1c7c      	adds	r4, r7, #1
 8015d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d24:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015d26:	2020      	movs	r0, #32
 8015d28:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015d2a:	47b0      	blx	r6
 8015d2c:	0027      	movs	r7, r4
 8015d2e:	e7e0      	b.n	8015cf2 <_vsnprintf+0x35a>
        const char* p = va_arg(va, char*);
 8015d30:	1d33      	adds	r3, r6, #4
 8015d32:	9317      	str	r3, [sp, #92]	; 0x5c
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8015d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        const char* p = va_arg(va, char*);
 8015d36:	6836      	ldr	r6, [r6, #0]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d101      	bne.n	8015d40 <_vsnprintf+0x3a8>
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	425b      	negs	r3, r3
 8015d40:	0035      	movs	r5, r6
 8015d42:	18f3      	adds	r3, r6, r3
  for (s = str; *s && maxsize--; ++s);
 8015d44:	782a      	ldrb	r2, [r5, #0]
 8015d46:	2a00      	cmp	r2, #0
 8015d48:	d001      	beq.n	8015d4e <_vsnprintf+0x3b6>
 8015d4a:	42ab      	cmp	r3, r5
 8015d4c:	d112      	bne.n	8015d74 <_vsnprintf+0x3dc>
        if (flags & FLAGS_PRECISION) {
 8015d4e:	2380      	movs	r3, #128	; 0x80
 8015d50:	00db      	lsls	r3, r3, #3
 8015d52:	4023      	ands	r3, r4
  return (unsigned int)(s - str);
 8015d54:	1bad      	subs	r5, r5, r6
        if (flags & FLAGS_PRECISION) {
 8015d56:	9313      	str	r3, [sp, #76]	; 0x4c
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d003      	beq.n	8015d64 <_vsnprintf+0x3cc>
          l = (l < precision ? l : precision);
 8015d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d5e:	429d      	cmp	r5, r3
 8015d60:	d900      	bls.n	8015d64 <_vsnprintf+0x3cc>
 8015d62:	001d      	movs	r5, r3
        if (!(flags & FLAGS_LEFT)) {
 8015d64:	2302      	movs	r3, #2
 8015d66:	4023      	ands	r3, r4
 8015d68:	9316      	str	r3, [sp, #88]	; 0x58
 8015d6a:	d014      	beq.n	8015d96 <_vsnprintf+0x3fe>
 8015d6c:	003c      	movs	r4, r7
 8015d6e:	9512      	str	r5, [sp, #72]	; 0x48
 8015d70:	0025      	movs	r5, r4
 8015d72:	e01a      	b.n	8015daa <_vsnprintf+0x412>
  for (s = str; *s && maxsize--; ++s);
 8015d74:	3501      	adds	r5, #1
 8015d76:	e7e5      	b.n	8015d44 <_vsnprintf+0x3ac>
            out(' ', buffer, idx++, maxlen);
 8015d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d7a:	0022      	movs	r2, r4
 8015d7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015d7e:	2020      	movs	r0, #32
 8015d80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015d82:	47a0      	blx	r4
          while (l++ < width) {
 8015d84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d86:	1c5a      	adds	r2, r3, #1
 8015d88:	9212      	str	r2, [sp, #72]	; 0x48
 8015d8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d8c:	1b7c      	subs	r4, r7, r5
 8015d8e:	18e4      	adds	r4, r4, r3
 8015d90:	429a      	cmp	r2, r3
 8015d92:	d8f1      	bhi.n	8015d78 <_vsnprintf+0x3e0>
 8015d94:	e7ec      	b.n	8015d70 <_vsnprintf+0x3d8>
 8015d96:	002b      	movs	r3, r5
 8015d98:	e7f5      	b.n	8015d86 <_vsnprintf+0x3ee>
 8015d9a:	930b      	str	r3, [sp, #44]	; 0x2c
          out(*(p++), buffer, idx++, maxlen);
 8015d9c:	1c6f      	adds	r7, r5, #1
 8015d9e:	002a      	movs	r2, r5
 8015da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015da2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015da4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015da6:	47a8      	blx	r5
 8015da8:	003d      	movs	r5, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8015daa:	1b33      	subs	r3, r6, r4
 8015dac:	5d58      	ldrb	r0, [r3, r5]
 8015dae:	2800      	cmp	r0, #0
 8015db0:	d007      	beq.n	8015dc2 <_vsnprintf+0x42a>
 8015db2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d0f1      	beq.n	8015d9c <_vsnprintf+0x404>
 8015db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015dbc:	3b01      	subs	r3, #1
 8015dbe:	2a00      	cmp	r2, #0
 8015dc0:	d1eb      	bne.n	8015d9a <_vsnprintf+0x402>
        if (flags & FLAGS_LEFT) {
 8015dc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015dc4:	002f      	movs	r7, r5
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d109      	bne.n	8015dde <_vsnprintf+0x446>
        const char* p = va_arg(va, char*);
 8015dca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
        break;
 8015dcc:	e6f3      	b.n	8015bb6 <_vsnprintf+0x21e>
            out(' ', buffer, idx++, maxlen);
 8015dce:	003a      	movs	r2, r7
 8015dd0:	1c7c      	adds	r4, r7, #1
 8015dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015dd4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015dd6:	2020      	movs	r0, #32
 8015dd8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015dda:	47b0      	blx	r6
 8015ddc:	0027      	movs	r7, r4
 8015dde:	9b12      	ldr	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 8015de0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015de2:	1b5b      	subs	r3, r3, r5
 8015de4:	19db      	adds	r3, r3, r7
 8015de6:	4293      	cmp	r3, r2
 8015de8:	d3f1      	bcc.n	8015dce <_vsnprintf+0x436>
 8015dea:	e7ee      	b.n	8015dca <_vsnprintf+0x432>
          base =  8U;
 8015dec:	2308      	movs	r3, #8
 8015dee:	e6a9      	b.n	8015b44 <_vsnprintf+0x1ac>
          base =  2U;
 8015df0:	2302      	movs	r3, #2
 8015df2:	e6a7      	b.n	8015b44 <_vsnprintf+0x1ac>

08015df4 <vsnprintf_>:
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 8015df4:	b507      	push	{r0, r1, r2, lr}
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 8015df6:	9300      	str	r3, [sp, #0]
 8015df8:	0013      	movs	r3, r2
 8015dfa:	000a      	movs	r2, r1
 8015dfc:	0001      	movs	r1, r0
 8015dfe:	4802      	ldr	r0, [pc, #8]	; (8015e08 <vsnprintf_+0x14>)
 8015e00:	f7ff fdca 	bl	8015998 <_vsnprintf>
}
 8015e04:	bd0e      	pop	{r1, r2, r3, pc}
 8015e06:	46c0      	nop			; (mov r8, r8)
 8015e08:	08015701 	.word	0x08015701

08015e0c <fctvprintf>:
  va_end(va);
  return ret;
}

int fctvprintf(void (*out)(char character, void* arg), void* arg, const char* format, va_list va)
{
 8015e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 8015e0e:	9103      	str	r1, [sp, #12]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8015e10:	2101      	movs	r1, #1
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 8015e12:	9002      	str	r0, [sp, #8]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8015e14:	9300      	str	r3, [sp, #0]
 8015e16:	4804      	ldr	r0, [pc, #16]	; (8015e28 <fctvprintf+0x1c>)
 8015e18:	0013      	movs	r3, r2
 8015e1a:	424a      	negs	r2, r1
 8015e1c:	a902      	add	r1, sp, #8
 8015e1e:	f7ff fdbb 	bl	8015998 <_vsnprintf>
}
 8015e22:	b005      	add	sp, #20
 8015e24:	bd00      	pop	{pc}
 8015e26:	46c0      	nop			; (mov r8, r8)
 8015e28:	0801570b 	.word	0x0801570b

08015e2c <malloc>:
 8015e2c:	b510      	push	{r4, lr}
 8015e2e:	4b03      	ldr	r3, [pc, #12]	; (8015e3c <malloc+0x10>)
 8015e30:	0001      	movs	r1, r0
 8015e32:	6818      	ldr	r0, [r3, #0]
 8015e34:	f7fd fc3c 	bl	80136b0 <_malloc_r>
 8015e38:	bd10      	pop	{r4, pc}
 8015e3a:	46c0      	nop			; (mov r8, r8)
 8015e3c:	20000008 	.word	0x20000008

08015e40 <free>:
 8015e40:	b510      	push	{r4, lr}
 8015e42:	4b03      	ldr	r3, [pc, #12]	; (8015e50 <free+0x10>)
 8015e44:	0001      	movs	r1, r0
 8015e46:	6818      	ldr	r0, [r3, #0]
 8015e48:	f7fd fbe8 	bl	801361c <_free_r>
 8015e4c:	bd10      	pop	{r4, pc}
 8015e4e:	46c0      	nop			; (mov r8, r8)
 8015e50:	20000008 	.word	0x20000008

08015e54 <memcpy>:
 8015e54:	2300      	movs	r3, #0
 8015e56:	b510      	push	{r4, lr}
 8015e58:	429a      	cmp	r2, r3
 8015e5a:	d100      	bne.n	8015e5e <memcpy+0xa>
 8015e5c:	bd10      	pop	{r4, pc}
 8015e5e:	5ccc      	ldrb	r4, [r1, r3]
 8015e60:	54c4      	strb	r4, [r0, r3]
 8015e62:	3301      	adds	r3, #1
 8015e64:	e7f8      	b.n	8015e58 <memcpy+0x4>

08015e66 <memmove>:
 8015e66:	b510      	push	{r4, lr}
 8015e68:	4288      	cmp	r0, r1
 8015e6a:	d902      	bls.n	8015e72 <memmove+0xc>
 8015e6c:	188b      	adds	r3, r1, r2
 8015e6e:	4298      	cmp	r0, r3
 8015e70:	d303      	bcc.n	8015e7a <memmove+0x14>
 8015e72:	2300      	movs	r3, #0
 8015e74:	e007      	b.n	8015e86 <memmove+0x20>
 8015e76:	5c8b      	ldrb	r3, [r1, r2]
 8015e78:	5483      	strb	r3, [r0, r2]
 8015e7a:	3a01      	subs	r2, #1
 8015e7c:	d2fb      	bcs.n	8015e76 <memmove+0x10>
 8015e7e:	bd10      	pop	{r4, pc}
 8015e80:	5ccc      	ldrb	r4, [r1, r3]
 8015e82:	54c4      	strb	r4, [r0, r3]
 8015e84:	3301      	adds	r3, #1
 8015e86:	429a      	cmp	r2, r3
 8015e88:	d1fa      	bne.n	8015e80 <memmove+0x1a>
 8015e8a:	e7f8      	b.n	8015e7e <memmove+0x18>

08015e8c <_init>:
 8015e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e8e:	46c0      	nop			; (mov r8, r8)
 8015e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e92:	bc08      	pop	{r3}
 8015e94:	469e      	mov	lr, r3
 8015e96:	4770      	bx	lr

08015e98 <_fini>:
 8015e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e9a:	46c0      	nop			; (mov r8, r8)
 8015e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e9e:	bc08      	pop	{r3}
 8015ea0:	469e      	mov	lr, r3
 8015ea2:	4770      	bx	lr
